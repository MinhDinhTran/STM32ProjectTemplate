ARM GAS  /tmp/ccEzGk5p.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_tim.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.TI1_Config,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	TI1_Config:
  25              	.LFB200:
  26              		.file 1 "./FWLIB/src/stm32f4xx_tim.c"
   1:./FWLIB/src/stm32f4xx_tim.c **** /**
   2:./FWLIB/src/stm32f4xx_tim.c ****   ******************************************************************************
   3:./FWLIB/src/stm32f4xx_tim.c ****   * @file    stm32f4xx_tim.c
   4:./FWLIB/src/stm32f4xx_tim.c ****   * @author  MCD Application Team
   5:./FWLIB/src/stm32f4xx_tim.c ****   * @version V1.4.0
   6:./FWLIB/src/stm32f4xx_tim.c ****   * @date    04-August-2014
   7:./FWLIB/src/stm32f4xx_tim.c ****   * @brief   This file provides firmware functions to manage the following 
   8:./FWLIB/src/stm32f4xx_tim.c ****   *          functionalities of the TIM peripheral:
   9:./FWLIB/src/stm32f4xx_tim.c ****   *            + TimeBase management
  10:./FWLIB/src/stm32f4xx_tim.c ****   *            + Output Compare management
  11:./FWLIB/src/stm32f4xx_tim.c ****   *            + Input Capture management
  12:./FWLIB/src/stm32f4xx_tim.c ****   *            + Advanced-control timers (TIM1 and TIM8) specific features  
  13:./FWLIB/src/stm32f4xx_tim.c ****   *            + Interrupts, DMA and flags management
  14:./FWLIB/src/stm32f4xx_tim.c ****   *            + Clocks management
  15:./FWLIB/src/stm32f4xx_tim.c ****   *            + Synchronization management
  16:./FWLIB/src/stm32f4xx_tim.c ****   *            + Specific interface management
  17:./FWLIB/src/stm32f4xx_tim.c ****   *            + Specific remapping management      
  18:./FWLIB/src/stm32f4xx_tim.c ****   *              
  19:./FWLIB/src/stm32f4xx_tim.c ****   @verbatim   
  20:./FWLIB/src/stm32f4xx_tim.c ****  ===============================================================================
  21:./FWLIB/src/stm32f4xx_tim.c ****                    #####  How to use this driver #####
  22:./FWLIB/src/stm32f4xx_tim.c ****  ===============================================================================
  23:./FWLIB/src/stm32f4xx_tim.c ****     [..]
  24:./FWLIB/src/stm32f4xx_tim.c ****     This driver provides functions to configure and program the TIM 
  25:./FWLIB/src/stm32f4xx_tim.c ****     of all STM32F4xx devices.
  26:./FWLIB/src/stm32f4xx_tim.c ****     These functions are split in 9 groups: 
  27:./FWLIB/src/stm32f4xx_tim.c ****      
  28:./FWLIB/src/stm32f4xx_tim.c ****       (#) TIM TimeBase management: this group includes all needed functions 
  29:./FWLIB/src/stm32f4xx_tim.c ****           to configure the TM Timebase unit:
  30:./FWLIB/src/stm32f4xx_tim.c ****         (++) Set/Get Prescaler
  31:./FWLIB/src/stm32f4xx_tim.c ****         (++) Set/Get Autoreload  
  32:./FWLIB/src/stm32f4xx_tim.c ****         (++) Counter modes configuration
ARM GAS  /tmp/ccEzGk5p.s 			page 2


  33:./FWLIB/src/stm32f4xx_tim.c ****         (++) Set Clock division  
  34:./FWLIB/src/stm32f4xx_tim.c ****         (++) Select the One Pulse mode
  35:./FWLIB/src/stm32f4xx_tim.c ****         (++) Update Request Configuration
  36:./FWLIB/src/stm32f4xx_tim.c ****         (++) Update Disable Configuration
  37:./FWLIB/src/stm32f4xx_tim.c ****         (++) Auto-Preload Configuration 
  38:./FWLIB/src/stm32f4xx_tim.c ****         (++) Enable/Disable the counter     
  39:./FWLIB/src/stm32f4xx_tim.c ****                    
  40:./FWLIB/src/stm32f4xx_tim.c ****       (#) TIM Output Compare management: this group includes all needed 
  41:./FWLIB/src/stm32f4xx_tim.c ****           functions to configure the Capture/Compare unit used in Output 
  42:./FWLIB/src/stm32f4xx_tim.c ****           compare mode: 
  43:./FWLIB/src/stm32f4xx_tim.c ****         (++) Configure each channel, independently, in Output Compare mode
  44:./FWLIB/src/stm32f4xx_tim.c ****         (++) Select the output compare modes
  45:./FWLIB/src/stm32f4xx_tim.c ****         (++) Select the Polarities of each channel
  46:./FWLIB/src/stm32f4xx_tim.c ****         (++) Set/Get the Capture/Compare register values
  47:./FWLIB/src/stm32f4xx_tim.c ****         (++) Select the Output Compare Fast mode 
  48:./FWLIB/src/stm32f4xx_tim.c ****         (++) Select the Output Compare Forced mode  
  49:./FWLIB/src/stm32f4xx_tim.c ****         (++) Output Compare-Preload Configuration 
  50:./FWLIB/src/stm32f4xx_tim.c ****         (++) Clear Output Compare Reference
  51:./FWLIB/src/stm32f4xx_tim.c ****         (++) Select the OCREF Clear signal
  52:./FWLIB/src/stm32f4xx_tim.c ****         (++) Enable/Disable the Capture/Compare Channels    
  53:./FWLIB/src/stm32f4xx_tim.c ****                      
  54:./FWLIB/src/stm32f4xx_tim.c ****       (#) TIM Input Capture management: this group includes all needed 
  55:./FWLIB/src/stm32f4xx_tim.c ****           functions to configure the Capture/Compare unit used in 
  56:./FWLIB/src/stm32f4xx_tim.c ****           Input Capture mode:
  57:./FWLIB/src/stm32f4xx_tim.c ****         (++) Configure each channel in input capture mode
  58:./FWLIB/src/stm32f4xx_tim.c ****         (++) Configure Channel1/2 in PWM Input mode
  59:./FWLIB/src/stm32f4xx_tim.c ****         (++) Set the Input Capture Prescaler
  60:./FWLIB/src/stm32f4xx_tim.c ****         (++) Get the Capture/Compare values      
  61:./FWLIB/src/stm32f4xx_tim.c ****                      
  62:./FWLIB/src/stm32f4xx_tim.c ****       (#) Advanced-control timers (TIM1 and TIM8) specific features
  63:./FWLIB/src/stm32f4xx_tim.c ****         (++) Configures the Break input, dead time, Lock level, the OSSI,
  64:./FWLIB/src/stm32f4xx_tim.c ****              the OSSR State and the AOE(automatic output enable)
  65:./FWLIB/src/stm32f4xx_tim.c ****         (++) Enable/Disable the TIM peripheral Main Outputs
  66:./FWLIB/src/stm32f4xx_tim.c ****         (++) Select the Commutation event
  67:./FWLIB/src/stm32f4xx_tim.c ****         (++) Set/Reset the Capture Compare Preload Control bit
  68:./FWLIB/src/stm32f4xx_tim.c ****                                 
  69:./FWLIB/src/stm32f4xx_tim.c ****       (#) TIM interrupts, DMA and flags management
  70:./FWLIB/src/stm32f4xx_tim.c ****         (++) Enable/Disable interrupt sources
  71:./FWLIB/src/stm32f4xx_tim.c ****         (++) Get flags status
  72:./FWLIB/src/stm32f4xx_tim.c ****         (++) Clear flags/ Pending bits
  73:./FWLIB/src/stm32f4xx_tim.c ****         (++) Enable/Disable DMA requests 
  74:./FWLIB/src/stm32f4xx_tim.c ****         (++) Configure DMA burst mode
  75:./FWLIB/src/stm32f4xx_tim.c ****         (++) Select CaptureCompare DMA request  
  76:./FWLIB/src/stm32f4xx_tim.c ****                 
  77:./FWLIB/src/stm32f4xx_tim.c ****       (#) TIM clocks management: this group includes all needed functions 
  78:./FWLIB/src/stm32f4xx_tim.c ****           to configure the clock controller unit:
  79:./FWLIB/src/stm32f4xx_tim.c ****         (++) Select internal/External clock
  80:./FWLIB/src/stm32f4xx_tim.c ****         (++) Select the external clock mode: ETR(Mode1/Mode2), TIx or ITRx
  81:./FWLIB/src/stm32f4xx_tim.c ****            
  82:./FWLIB/src/stm32f4xx_tim.c ****       (#) TIM synchronization management: this group includes all needed 
  83:./FWLIB/src/stm32f4xx_tim.c ****           functions to configure the Synchronization unit:
  84:./FWLIB/src/stm32f4xx_tim.c ****         (++) Select Input Trigger  
  85:./FWLIB/src/stm32f4xx_tim.c ****         (++) Select Output Trigger  
  86:./FWLIB/src/stm32f4xx_tim.c ****         (++) Select Master Slave Mode 
  87:./FWLIB/src/stm32f4xx_tim.c ****         (++) ETR Configuration when used as external trigger   
  88:./FWLIB/src/stm32f4xx_tim.c ****        
  89:./FWLIB/src/stm32f4xx_tim.c ****       (#) TIM specific interface management, this group includes all 
ARM GAS  /tmp/ccEzGk5p.s 			page 3


  90:./FWLIB/src/stm32f4xx_tim.c ****           needed functions to use the specific TIM interface:
  91:./FWLIB/src/stm32f4xx_tim.c ****         (++) Encoder Interface Configuration
  92:./FWLIB/src/stm32f4xx_tim.c ****         (++) Select Hall Sensor   
  93:./FWLIB/src/stm32f4xx_tim.c ****            
  94:./FWLIB/src/stm32f4xx_tim.c ****       (#) TIM specific remapping management includes the Remapping 
  95:./FWLIB/src/stm32f4xx_tim.c ****           configuration of specific timers               
  96:./FWLIB/src/stm32f4xx_tim.c ****      
  97:./FWLIB/src/stm32f4xx_tim.c ****   @endverbatim    
  98:./FWLIB/src/stm32f4xx_tim.c ****   ******************************************************************************
  99:./FWLIB/src/stm32f4xx_tim.c ****   * @attention
 100:./FWLIB/src/stm32f4xx_tim.c ****   *
 101:./FWLIB/src/stm32f4xx_tim.c ****   * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
 102:./FWLIB/src/stm32f4xx_tim.c ****   *
 103:./FWLIB/src/stm32f4xx_tim.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
 104:./FWLIB/src/stm32f4xx_tim.c ****   * You may not use this file except in compliance with the License.
 105:./FWLIB/src/stm32f4xx_tim.c ****   * You may obtain a copy of the License at:
 106:./FWLIB/src/stm32f4xx_tim.c ****   *
 107:./FWLIB/src/stm32f4xx_tim.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
 108:./FWLIB/src/stm32f4xx_tim.c ****   *
 109:./FWLIB/src/stm32f4xx_tim.c ****   * Unless required by applicable law or agreed to in writing, software 
 110:./FWLIB/src/stm32f4xx_tim.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
 111:./FWLIB/src/stm32f4xx_tim.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 112:./FWLIB/src/stm32f4xx_tim.c ****   * See the License for the specific language governing permissions and
 113:./FWLIB/src/stm32f4xx_tim.c ****   * limitations under the License.
 114:./FWLIB/src/stm32f4xx_tim.c ****   *
 115:./FWLIB/src/stm32f4xx_tim.c ****   ******************************************************************************
 116:./FWLIB/src/stm32f4xx_tim.c ****   */
 117:./FWLIB/src/stm32f4xx_tim.c **** 
 118:./FWLIB/src/stm32f4xx_tim.c **** /* Includes ------------------------------------------------------------------*/
 119:./FWLIB/src/stm32f4xx_tim.c **** #include "stm32f4xx_tim.h"
 120:./FWLIB/src/stm32f4xx_tim.c **** #include "stm32f4xx_rcc.h"
 121:./FWLIB/src/stm32f4xx_tim.c **** 
 122:./FWLIB/src/stm32f4xx_tim.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 123:./FWLIB/src/stm32f4xx_tim.c ****   * @{
 124:./FWLIB/src/stm32f4xx_tim.c ****   */
 125:./FWLIB/src/stm32f4xx_tim.c **** 
 126:./FWLIB/src/stm32f4xx_tim.c **** /** @defgroup TIM 
 127:./FWLIB/src/stm32f4xx_tim.c ****   * @brief TIM driver modules
 128:./FWLIB/src/stm32f4xx_tim.c ****   * @{
 129:./FWLIB/src/stm32f4xx_tim.c ****   */
 130:./FWLIB/src/stm32f4xx_tim.c **** 
 131:./FWLIB/src/stm32f4xx_tim.c **** /* Private typedef -----------------------------------------------------------*/
 132:./FWLIB/src/stm32f4xx_tim.c **** /* Private define ------------------------------------------------------------*/
 133:./FWLIB/src/stm32f4xx_tim.c **** 
 134:./FWLIB/src/stm32f4xx_tim.c **** /* ---------------------- TIM registers bit mask ------------------------ */
 135:./FWLIB/src/stm32f4xx_tim.c **** #define SMCR_ETR_MASK      ((uint16_t)0x00FF) 
 136:./FWLIB/src/stm32f4xx_tim.c **** #define CCMR_OFFSET        ((uint16_t)0x0018)
 137:./FWLIB/src/stm32f4xx_tim.c **** #define CCER_CCE_SET       ((uint16_t)0x0001)  
 138:./FWLIB/src/stm32f4xx_tim.c **** #define	CCER_CCNE_SET      ((uint16_t)0x0004) 
 139:./FWLIB/src/stm32f4xx_tim.c **** #define CCMR_OC13M_MASK    ((uint16_t)0xFF8F)
 140:./FWLIB/src/stm32f4xx_tim.c **** #define CCMR_OC24M_MASK    ((uint16_t)0x8FFF) 
 141:./FWLIB/src/stm32f4xx_tim.c **** 
 142:./FWLIB/src/stm32f4xx_tim.c **** /* Private macro -------------------------------------------------------------*/
 143:./FWLIB/src/stm32f4xx_tim.c **** /* Private variables ---------------------------------------------------------*/
 144:./FWLIB/src/stm32f4xx_tim.c **** /* Private function prototypes -----------------------------------------------*/
 145:./FWLIB/src/stm32f4xx_tim.c **** static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
 146:./FWLIB/src/stm32f4xx_tim.c ****                        uint16_t TIM_ICFilter);
ARM GAS  /tmp/ccEzGk5p.s 			page 4


 147:./FWLIB/src/stm32f4xx_tim.c **** static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
 148:./FWLIB/src/stm32f4xx_tim.c ****                        uint16_t TIM_ICFilter);
 149:./FWLIB/src/stm32f4xx_tim.c **** static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
 150:./FWLIB/src/stm32f4xx_tim.c ****                        uint16_t TIM_ICFilter);
 151:./FWLIB/src/stm32f4xx_tim.c **** static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
 152:./FWLIB/src/stm32f4xx_tim.c ****                        uint16_t TIM_ICFilter);
 153:./FWLIB/src/stm32f4xx_tim.c **** 
 154:./FWLIB/src/stm32f4xx_tim.c **** /* Private functions ---------------------------------------------------------*/
 155:./FWLIB/src/stm32f4xx_tim.c **** 
 156:./FWLIB/src/stm32f4xx_tim.c **** /** @defgroup TIM_Private_Functions
 157:./FWLIB/src/stm32f4xx_tim.c ****   * @{
 158:./FWLIB/src/stm32f4xx_tim.c ****   */
 159:./FWLIB/src/stm32f4xx_tim.c **** 
 160:./FWLIB/src/stm32f4xx_tim.c **** /** @defgroup TIM_Group1 TimeBase management functions
 161:./FWLIB/src/stm32f4xx_tim.c ****  *  @brief   TimeBase management functions 
 162:./FWLIB/src/stm32f4xx_tim.c ****  *
 163:./FWLIB/src/stm32f4xx_tim.c **** @verbatim   
 164:./FWLIB/src/stm32f4xx_tim.c ****  ===============================================================================
 165:./FWLIB/src/stm32f4xx_tim.c ****                      ##### TimeBase management functions #####
 166:./FWLIB/src/stm32f4xx_tim.c ****  ===============================================================================  
 167:./FWLIB/src/stm32f4xx_tim.c ****   
 168:./FWLIB/src/stm32f4xx_tim.c ****      
 169:./FWLIB/src/stm32f4xx_tim.c ****             ##### TIM Driver: how to use it in Timing(Time base) Mode #####
 170:./FWLIB/src/stm32f4xx_tim.c ****  ===============================================================================
 171:./FWLIB/src/stm32f4xx_tim.c ****     [..] 
 172:./FWLIB/src/stm32f4xx_tim.c ****     To use the Timer in Timing(Time base) mode, the following steps are mandatory:
 173:./FWLIB/src/stm32f4xx_tim.c ****        
 174:./FWLIB/src/stm32f4xx_tim.c ****       (#) Enable TIM clock using RCC_APBxPeriphClockCmd(RCC_APBxPeriph_TIMx, ENABLE) function
 175:./FWLIB/src/stm32f4xx_tim.c ****                     
 176:./FWLIB/src/stm32f4xx_tim.c ****       (#) Fill the TIM_TimeBaseInitStruct with the desired parameters.
 177:./FWLIB/src/stm32f4xx_tim.c ****        
 178:./FWLIB/src/stm32f4xx_tim.c ****       (#) Call TIM_TimeBaseInit(TIMx, &TIM_TimeBaseInitStruct) to configure the Time Base unit
 179:./FWLIB/src/stm32f4xx_tim.c ****           with the corresponding configuration
 180:./FWLIB/src/stm32f4xx_tim.c ****           
 181:./FWLIB/src/stm32f4xx_tim.c ****       (#) Enable the NVIC if you need to generate the update interrupt. 
 182:./FWLIB/src/stm32f4xx_tim.c ****           
 183:./FWLIB/src/stm32f4xx_tim.c ****       (#) Enable the corresponding interrupt using the function TIM_ITConfig(TIMx, TIM_IT_Update) 
 184:./FWLIB/src/stm32f4xx_tim.c ****        
 185:./FWLIB/src/stm32f4xx_tim.c ****       (#) Call the TIM_Cmd(ENABLE) function to enable the TIM counter.
 186:./FWLIB/src/stm32f4xx_tim.c ****              
 187:./FWLIB/src/stm32f4xx_tim.c ****        -@- All other functions can be used separately to modify, if needed,
 188:./FWLIB/src/stm32f4xx_tim.c ****            a specific feature of the Timer. 
 189:./FWLIB/src/stm32f4xx_tim.c **** 
 190:./FWLIB/src/stm32f4xx_tim.c **** @endverbatim
 191:./FWLIB/src/stm32f4xx_tim.c ****   * @{
 192:./FWLIB/src/stm32f4xx_tim.c ****   */
 193:./FWLIB/src/stm32f4xx_tim.c ****   
 194:./FWLIB/src/stm32f4xx_tim.c **** /**
 195:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Deinitializes the TIMx peripheral registers to their default reset values.
 196:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
 197:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
 198:./FWLIB/src/stm32f4xx_tim.c **** 
 199:./FWLIB/src/stm32f4xx_tim.c ****   */
 200:./FWLIB/src/stm32f4xx_tim.c **** void TIM_DeInit(TIM_TypeDef* TIMx)
 201:./FWLIB/src/stm32f4xx_tim.c **** {
 202:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 203:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
ARM GAS  /tmp/ccEzGk5p.s 			page 5


 204:./FWLIB/src/stm32f4xx_tim.c ****  
 205:./FWLIB/src/stm32f4xx_tim.c ****   if (TIMx == TIM1)
 206:./FWLIB/src/stm32f4xx_tim.c ****   {
 207:./FWLIB/src/stm32f4xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 208:./FWLIB/src/stm32f4xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 209:./FWLIB/src/stm32f4xx_tim.c ****   } 
 210:./FWLIB/src/stm32f4xx_tim.c ****   else if (TIMx == TIM2) 
 211:./FWLIB/src/stm32f4xx_tim.c ****   {     
 212:./FWLIB/src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 213:./FWLIB/src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 214:./FWLIB/src/stm32f4xx_tim.c ****   }  
 215:./FWLIB/src/stm32f4xx_tim.c ****   else if (TIMx == TIM3)
 216:./FWLIB/src/stm32f4xx_tim.c ****   { 
 217:./FWLIB/src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 218:./FWLIB/src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 219:./FWLIB/src/stm32f4xx_tim.c ****   }  
 220:./FWLIB/src/stm32f4xx_tim.c ****   else if (TIMx == TIM4)
 221:./FWLIB/src/stm32f4xx_tim.c ****   { 
 222:./FWLIB/src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 223:./FWLIB/src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 224:./FWLIB/src/stm32f4xx_tim.c ****   }  
 225:./FWLIB/src/stm32f4xx_tim.c ****   else if (TIMx == TIM5)
 226:./FWLIB/src/stm32f4xx_tim.c ****   {      
 227:./FWLIB/src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 228:./FWLIB/src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 229:./FWLIB/src/stm32f4xx_tim.c ****   }  
 230:./FWLIB/src/stm32f4xx_tim.c ****   else if (TIMx == TIM6)  
 231:./FWLIB/src/stm32f4xx_tim.c ****   {    
 232:./FWLIB/src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 233:./FWLIB/src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 234:./FWLIB/src/stm32f4xx_tim.c ****   }  
 235:./FWLIB/src/stm32f4xx_tim.c ****   else if (TIMx == TIM7)
 236:./FWLIB/src/stm32f4xx_tim.c ****   {      
 237:./FWLIB/src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 238:./FWLIB/src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 239:./FWLIB/src/stm32f4xx_tim.c ****   }  
 240:./FWLIB/src/stm32f4xx_tim.c ****   else if (TIMx == TIM8)
 241:./FWLIB/src/stm32f4xx_tim.c ****   {      
 242:./FWLIB/src/stm32f4xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 243:./FWLIB/src/stm32f4xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 244:./FWLIB/src/stm32f4xx_tim.c ****   }  
 245:./FWLIB/src/stm32f4xx_tim.c ****   else if (TIMx == TIM9)
 246:./FWLIB/src/stm32f4xx_tim.c ****   {      
 247:./FWLIB/src/stm32f4xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 248:./FWLIB/src/stm32f4xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 249:./FWLIB/src/stm32f4xx_tim.c ****    }  
 250:./FWLIB/src/stm32f4xx_tim.c ****   else if (TIMx == TIM10)
 251:./FWLIB/src/stm32f4xx_tim.c ****   {      
 252:./FWLIB/src/stm32f4xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 253:./FWLIB/src/stm32f4xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 254:./FWLIB/src/stm32f4xx_tim.c ****   }  
 255:./FWLIB/src/stm32f4xx_tim.c ****   else if (TIMx == TIM11) 
 256:./FWLIB/src/stm32f4xx_tim.c ****   {     
 257:./FWLIB/src/stm32f4xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 258:./FWLIB/src/stm32f4xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 259:./FWLIB/src/stm32f4xx_tim.c ****   }  
 260:./FWLIB/src/stm32f4xx_tim.c ****   else if (TIMx == TIM12)
ARM GAS  /tmp/ccEzGk5p.s 			page 6


 261:./FWLIB/src/stm32f4xx_tim.c ****   {      
 262:./FWLIB/src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 263:./FWLIB/src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 264:./FWLIB/src/stm32f4xx_tim.c ****   }  
 265:./FWLIB/src/stm32f4xx_tim.c ****   else if (TIMx == TIM13) 
 266:./FWLIB/src/stm32f4xx_tim.c ****   {       
 267:./FWLIB/src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 268:./FWLIB/src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 269:./FWLIB/src/stm32f4xx_tim.c ****   }  
 270:./FWLIB/src/stm32f4xx_tim.c ****   else
 271:./FWLIB/src/stm32f4xx_tim.c ****   { 
 272:./FWLIB/src/stm32f4xx_tim.c ****     if (TIMx == TIM14) 
 273:./FWLIB/src/stm32f4xx_tim.c ****     {     
 274:./FWLIB/src/stm32f4xx_tim.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 275:./FWLIB/src/stm32f4xx_tim.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 276:./FWLIB/src/stm32f4xx_tim.c ****     }   
 277:./FWLIB/src/stm32f4xx_tim.c ****   }
 278:./FWLIB/src/stm32f4xx_tim.c **** }
 279:./FWLIB/src/stm32f4xx_tim.c **** 
 280:./FWLIB/src/stm32f4xx_tim.c **** /**
 281:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Initializes the TIMx Time Base Unit peripheral according to 
 282:./FWLIB/src/stm32f4xx_tim.c ****   *         the specified parameters in the TIM_TimeBaseInitStruct.
 283:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1 to 14 to select the TIM peripheral.
 284:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
 285:./FWLIB/src/stm32f4xx_tim.c ****   *         that contains the configuration information for the specified TIM peripheral.
 286:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
 287:./FWLIB/src/stm32f4xx_tim.c ****   */
 288:./FWLIB/src/stm32f4xx_tim.c **** void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
 289:./FWLIB/src/stm32f4xx_tim.c **** {
 290:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpcr1 = 0;
 291:./FWLIB/src/stm32f4xx_tim.c **** 
 292:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 293:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 294:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
 295:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));
 296:./FWLIB/src/stm32f4xx_tim.c **** 
 297:./FWLIB/src/stm32f4xx_tim.c ****   tmpcr1 = TIMx->CR1;  
 298:./FWLIB/src/stm32f4xx_tim.c **** 
 299:./FWLIB/src/stm32f4xx_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM8)||
 300:./FWLIB/src/stm32f4xx_tim.c ****      (TIMx == TIM2) || (TIMx == TIM3)||
 301:./FWLIB/src/stm32f4xx_tim.c ****      (TIMx == TIM4) || (TIMx == TIM5)) 
 302:./FWLIB/src/stm32f4xx_tim.c ****   {
 303:./FWLIB/src/stm32f4xx_tim.c ****     /* Select the Counter Mode */
 304:./FWLIB/src/stm32f4xx_tim.c ****     tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 305:./FWLIB/src/stm32f4xx_tim.c ****     tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 306:./FWLIB/src/stm32f4xx_tim.c ****   }
 307:./FWLIB/src/stm32f4xx_tim.c ****  
 308:./FWLIB/src/stm32f4xx_tim.c ****   if((TIMx != TIM6) && (TIMx != TIM7))
 309:./FWLIB/src/stm32f4xx_tim.c ****   {
 310:./FWLIB/src/stm32f4xx_tim.c ****     /* Set the clock division */
 311:./FWLIB/src/stm32f4xx_tim.c ****     tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 312:./FWLIB/src/stm32f4xx_tim.c ****     tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 313:./FWLIB/src/stm32f4xx_tim.c ****   }
 314:./FWLIB/src/stm32f4xx_tim.c **** 
 315:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CR1 = tmpcr1;
 316:./FWLIB/src/stm32f4xx_tim.c **** 
 317:./FWLIB/src/stm32f4xx_tim.c ****   /* Set the Autoreload value */
ARM GAS  /tmp/ccEzGk5p.s 			page 7


 318:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 319:./FWLIB/src/stm32f4xx_tim.c ****  
 320:./FWLIB/src/stm32f4xx_tim.c ****   /* Set the Prescaler value */
 321:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 322:./FWLIB/src/stm32f4xx_tim.c ****     
 323:./FWLIB/src/stm32f4xx_tim.c ****   if ((TIMx == TIM1) || (TIMx == TIM8))  
 324:./FWLIB/src/stm32f4xx_tim.c ****   {
 325:./FWLIB/src/stm32f4xx_tim.c ****     /* Set the Repetition Counter value */
 326:./FWLIB/src/stm32f4xx_tim.c ****     TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 327:./FWLIB/src/stm32f4xx_tim.c ****   }
 328:./FWLIB/src/stm32f4xx_tim.c **** 
 329:./FWLIB/src/stm32f4xx_tim.c ****   /* Generate an update event to reload the Prescaler 
 330:./FWLIB/src/stm32f4xx_tim.c ****      and the repetition counter(only for TIM1 and TIM8) value immediatly */
 331:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 332:./FWLIB/src/stm32f4xx_tim.c **** }
 333:./FWLIB/src/stm32f4xx_tim.c **** 
 334:./FWLIB/src/stm32f4xx_tim.c **** /**
 335:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Fills each TIM_TimeBaseInitStruct member with its default value.
 336:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
 337:./FWLIB/src/stm32f4xx_tim.c ****   *         structure which will be initialized.
 338:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
 339:./FWLIB/src/stm32f4xx_tim.c ****   */
 340:./FWLIB/src/stm32f4xx_tim.c **** void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
 341:./FWLIB/src/stm32f4xx_tim.c **** {
 342:./FWLIB/src/stm32f4xx_tim.c ****   /* Set the default configuration */
 343:./FWLIB/src/stm32f4xx_tim.c ****   TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 344:./FWLIB/src/stm32f4xx_tim.c ****   TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 345:./FWLIB/src/stm32f4xx_tim.c ****   TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 346:./FWLIB/src/stm32f4xx_tim.c ****   TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 347:./FWLIB/src/stm32f4xx_tim.c ****   TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 348:./FWLIB/src/stm32f4xx_tim.c **** }
 349:./FWLIB/src/stm32f4xx_tim.c **** 
 350:./FWLIB/src/stm32f4xx_tim.c **** /**
 351:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx Prescaler.
 352:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1 to 14 to select the TIM peripheral.
 353:./FWLIB/src/stm32f4xx_tim.c ****   * @param  Prescaler: specifies the Prescaler Register value
 354:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_PSCReloadMode: specifies the TIM Prescaler Reload mode
 355:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
 356:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
 357:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediatly.
 358:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
 359:./FWLIB/src/stm32f4xx_tim.c ****   */
 360:./FWLIB/src/stm32f4xx_tim.c **** void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
 361:./FWLIB/src/stm32f4xx_tim.c **** {
 362:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 363:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
 364:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
 365:./FWLIB/src/stm32f4xx_tim.c ****   /* Set the Prescaler value */
 366:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->PSC = Prescaler;
 367:./FWLIB/src/stm32f4xx_tim.c ****   /* Set or reset the UG Bit */
 368:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->EGR = TIM_PSCReloadMode;
 369:./FWLIB/src/stm32f4xx_tim.c **** }
 370:./FWLIB/src/stm32f4xx_tim.c **** 
 371:./FWLIB/src/stm32f4xx_tim.c **** /**
 372:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Specifies the TIMx Counter Mode to be used.
 373:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
 374:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_CounterMode: specifies the Counter Mode to be used
ARM GAS  /tmp/ccEzGk5p.s 			page 8


 375:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
 376:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_CounterMode_Up: TIM Up Counting Mode
 377:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_CounterMode_Down: TIM Down Counting Mode
 378:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_CounterMode_CenterAligned1: TIM Center Aligned Mode1
 379:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
 380:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
 381:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
 382:./FWLIB/src/stm32f4xx_tim.c ****   */
 383:./FWLIB/src/stm32f4xx_tim.c **** void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
 384:./FWLIB/src/stm32f4xx_tim.c **** {
 385:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpcr1 = 0;
 386:./FWLIB/src/stm32f4xx_tim.c **** 
 387:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 388:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
 389:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));
 390:./FWLIB/src/stm32f4xx_tim.c **** 
 391:./FWLIB/src/stm32f4xx_tim.c ****   tmpcr1 = TIMx->CR1;
 392:./FWLIB/src/stm32f4xx_tim.c **** 
 393:./FWLIB/src/stm32f4xx_tim.c ****   /* Reset the CMS and DIR Bits */
 394:./FWLIB/src/stm32f4xx_tim.c ****   tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 395:./FWLIB/src/stm32f4xx_tim.c **** 
 396:./FWLIB/src/stm32f4xx_tim.c ****   /* Set the Counter Mode */
 397:./FWLIB/src/stm32f4xx_tim.c ****   tmpcr1 |= TIM_CounterMode;
 398:./FWLIB/src/stm32f4xx_tim.c **** 
 399:./FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CR1 register */
 400:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CR1 = tmpcr1;
 401:./FWLIB/src/stm32f4xx_tim.c **** }
 402:./FWLIB/src/stm32f4xx_tim.c **** 
 403:./FWLIB/src/stm32f4xx_tim.c **** /**
 404:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Sets the TIMx Counter Register value
 405:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
 406:./FWLIB/src/stm32f4xx_tim.c ****   * @param  Counter: specifies the Counter register new value.
 407:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
 408:./FWLIB/src/stm32f4xx_tim.c ****   */
 409:./FWLIB/src/stm32f4xx_tim.c **** void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
 410:./FWLIB/src/stm32f4xx_tim.c **** {
 411:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 412:./FWLIB/src/stm32f4xx_tim.c ****    assert_param(IS_TIM_ALL_PERIPH(TIMx));
 413:./FWLIB/src/stm32f4xx_tim.c **** 
 414:./FWLIB/src/stm32f4xx_tim.c ****   /* Set the Counter Register value */
 415:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CNT = Counter;
 416:./FWLIB/src/stm32f4xx_tim.c **** }
 417:./FWLIB/src/stm32f4xx_tim.c **** 
 418:./FWLIB/src/stm32f4xx_tim.c **** /**
 419:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Sets the TIMx Autoreload Register value
 420:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
 421:./FWLIB/src/stm32f4xx_tim.c ****   * @param  Autoreload: specifies the Autoreload register new value.
 422:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
 423:./FWLIB/src/stm32f4xx_tim.c ****   */
 424:./FWLIB/src/stm32f4xx_tim.c **** void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
 425:./FWLIB/src/stm32f4xx_tim.c **** {
 426:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 427:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
 428:./FWLIB/src/stm32f4xx_tim.c ****   
 429:./FWLIB/src/stm32f4xx_tim.c ****   /* Set the Autoreload Register value */
 430:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->ARR = Autoreload;
 431:./FWLIB/src/stm32f4xx_tim.c **** }
ARM GAS  /tmp/ccEzGk5p.s 			page 9


 432:./FWLIB/src/stm32f4xx_tim.c **** 
 433:./FWLIB/src/stm32f4xx_tim.c **** /**
 434:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Gets the TIMx Counter value.
 435:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
 436:./FWLIB/src/stm32f4xx_tim.c ****   * @retval Counter Register value
 437:./FWLIB/src/stm32f4xx_tim.c ****   */
 438:./FWLIB/src/stm32f4xx_tim.c **** uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
 439:./FWLIB/src/stm32f4xx_tim.c **** {
 440:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 441:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
 442:./FWLIB/src/stm32f4xx_tim.c **** 
 443:./FWLIB/src/stm32f4xx_tim.c ****   /* Get the Counter Register value */
 444:./FWLIB/src/stm32f4xx_tim.c ****   return TIMx->CNT;
 445:./FWLIB/src/stm32f4xx_tim.c **** }
 446:./FWLIB/src/stm32f4xx_tim.c **** 
 447:./FWLIB/src/stm32f4xx_tim.c **** /**
 448:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Gets the TIMx Prescaler value.
 449:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
 450:./FWLIB/src/stm32f4xx_tim.c ****   * @retval Prescaler Register value.
 451:./FWLIB/src/stm32f4xx_tim.c ****   */
 452:./FWLIB/src/stm32f4xx_tim.c **** uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
 453:./FWLIB/src/stm32f4xx_tim.c **** {
 454:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 455:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
 456:./FWLIB/src/stm32f4xx_tim.c **** 
 457:./FWLIB/src/stm32f4xx_tim.c ****   /* Get the Prescaler Register value */
 458:./FWLIB/src/stm32f4xx_tim.c ****   return TIMx->PSC;
 459:./FWLIB/src/stm32f4xx_tim.c **** }
 460:./FWLIB/src/stm32f4xx_tim.c **** 
 461:./FWLIB/src/stm32f4xx_tim.c **** /**
 462:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Enables or Disables the TIMx Update event.
 463:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
 464:./FWLIB/src/stm32f4xx_tim.c ****   * @param  NewState: new state of the TIMx UDIS bit
 465:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
 466:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
 467:./FWLIB/src/stm32f4xx_tim.c ****   */
 468:./FWLIB/src/stm32f4xx_tim.c **** void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
 469:./FWLIB/src/stm32f4xx_tim.c **** {
 470:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 471:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
 472:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 473:./FWLIB/src/stm32f4xx_tim.c **** 
 474:./FWLIB/src/stm32f4xx_tim.c ****   if (NewState != DISABLE)
 475:./FWLIB/src/stm32f4xx_tim.c ****   {
 476:./FWLIB/src/stm32f4xx_tim.c ****     /* Set the Update Disable Bit */
 477:./FWLIB/src/stm32f4xx_tim.c ****     TIMx->CR1 |= TIM_CR1_UDIS;
 478:./FWLIB/src/stm32f4xx_tim.c ****   }
 479:./FWLIB/src/stm32f4xx_tim.c ****   else
 480:./FWLIB/src/stm32f4xx_tim.c ****   {
 481:./FWLIB/src/stm32f4xx_tim.c ****     /* Reset the Update Disable Bit */
 482:./FWLIB/src/stm32f4xx_tim.c ****     TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 483:./FWLIB/src/stm32f4xx_tim.c ****   }
 484:./FWLIB/src/stm32f4xx_tim.c **** }
 485:./FWLIB/src/stm32f4xx_tim.c **** 
 486:./FWLIB/src/stm32f4xx_tim.c **** /**
 487:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx Update Request Interrupt source.
 488:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
ARM GAS  /tmp/ccEzGk5p.s 			page 10


 489:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_UpdateSource: specifies the Update source.
 490:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
 491:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_UpdateSource_Global: Source of update is the counter
 492:./FWLIB/src/stm32f4xx_tim.c ****   *                 overflow/underflow or the setting of UG bit, or an update
 493:./FWLIB/src/stm32f4xx_tim.c ****   *                 generation through the slave mode controller.
 494:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_UpdateSource_Regular: Source of update is counter overflow/underflow.
 495:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
 496:./FWLIB/src/stm32f4xx_tim.c ****   */
 497:./FWLIB/src/stm32f4xx_tim.c **** void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
 498:./FWLIB/src/stm32f4xx_tim.c **** {
 499:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 500:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
 501:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));
 502:./FWLIB/src/stm32f4xx_tim.c **** 
 503:./FWLIB/src/stm32f4xx_tim.c ****   if (TIM_UpdateSource != TIM_UpdateSource_Global)
 504:./FWLIB/src/stm32f4xx_tim.c ****   {
 505:./FWLIB/src/stm32f4xx_tim.c ****     /* Set the URS Bit */
 506:./FWLIB/src/stm32f4xx_tim.c ****     TIMx->CR1 |= TIM_CR1_URS;
 507:./FWLIB/src/stm32f4xx_tim.c ****   }
 508:./FWLIB/src/stm32f4xx_tim.c ****   else
 509:./FWLIB/src/stm32f4xx_tim.c ****   {
 510:./FWLIB/src/stm32f4xx_tim.c ****     /* Reset the URS Bit */
 511:./FWLIB/src/stm32f4xx_tim.c ****     TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 512:./FWLIB/src/stm32f4xx_tim.c ****   }
 513:./FWLIB/src/stm32f4xx_tim.c **** }
 514:./FWLIB/src/stm32f4xx_tim.c **** 
 515:./FWLIB/src/stm32f4xx_tim.c **** /**
 516:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Enables or disables TIMx peripheral Preload register on ARR.
 517:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
 518:./FWLIB/src/stm32f4xx_tim.c ****   * @param  NewState: new state of the TIMx peripheral Preload register
 519:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
 520:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
 521:./FWLIB/src/stm32f4xx_tim.c ****   */
 522:./FWLIB/src/stm32f4xx_tim.c **** void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
 523:./FWLIB/src/stm32f4xx_tim.c **** {
 524:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 525:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
 526:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 527:./FWLIB/src/stm32f4xx_tim.c **** 
 528:./FWLIB/src/stm32f4xx_tim.c ****   if (NewState != DISABLE)
 529:./FWLIB/src/stm32f4xx_tim.c ****   {
 530:./FWLIB/src/stm32f4xx_tim.c ****     /* Set the ARR Preload Bit */
 531:./FWLIB/src/stm32f4xx_tim.c ****     TIMx->CR1 |= TIM_CR1_ARPE;
 532:./FWLIB/src/stm32f4xx_tim.c ****   }
 533:./FWLIB/src/stm32f4xx_tim.c ****   else
 534:./FWLIB/src/stm32f4xx_tim.c ****   {
 535:./FWLIB/src/stm32f4xx_tim.c ****     /* Reset the ARR Preload Bit */
 536:./FWLIB/src/stm32f4xx_tim.c ****     TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 537:./FWLIB/src/stm32f4xx_tim.c ****   }
 538:./FWLIB/src/stm32f4xx_tim.c **** }
 539:./FWLIB/src/stm32f4xx_tim.c **** 
 540:./FWLIB/src/stm32f4xx_tim.c **** /**
 541:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Selects the TIMx's One Pulse Mode.
 542:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
 543:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_OPMode: specifies the OPM Mode to be used.
 544:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
 545:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OPMode_Single
ARM GAS  /tmp/ccEzGk5p.s 			page 11


 546:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OPMode_Repetitive
 547:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
 548:./FWLIB/src/stm32f4xx_tim.c ****   */
 549:./FWLIB/src/stm32f4xx_tim.c **** void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
 550:./FWLIB/src/stm32f4xx_tim.c **** {
 551:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 552:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
 553:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OPM_MODE(TIM_OPMode));
 554:./FWLIB/src/stm32f4xx_tim.c **** 
 555:./FWLIB/src/stm32f4xx_tim.c ****   /* Reset the OPM Bit */
 556:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 557:./FWLIB/src/stm32f4xx_tim.c **** 
 558:./FWLIB/src/stm32f4xx_tim.c ****   /* Configure the OPM Mode */
 559:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CR1 |= TIM_OPMode;
 560:./FWLIB/src/stm32f4xx_tim.c **** }
 561:./FWLIB/src/stm32f4xx_tim.c **** 
 562:./FWLIB/src/stm32f4xx_tim.c **** /**
 563:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Sets the TIMx Clock Division value.
 564:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
 565:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_CKD: specifies the clock division value.
 566:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following value:
 567:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_CKD_DIV1: TDTS = Tck_tim
 568:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
 569:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
 570:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
 571:./FWLIB/src/stm32f4xx_tim.c ****   */
 572:./FWLIB/src/stm32f4xx_tim.c **** void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
 573:./FWLIB/src/stm32f4xx_tim.c **** {
 574:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 575:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST1_PERIPH(TIMx));
 576:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_CKD_DIV(TIM_CKD));
 577:./FWLIB/src/stm32f4xx_tim.c **** 
 578:./FWLIB/src/stm32f4xx_tim.c ****   /* Reset the CKD Bits */
 579:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 580:./FWLIB/src/stm32f4xx_tim.c **** 
 581:./FWLIB/src/stm32f4xx_tim.c ****   /* Set the CKD value */
 582:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CR1 |= TIM_CKD;
 583:./FWLIB/src/stm32f4xx_tim.c **** }
 584:./FWLIB/src/stm32f4xx_tim.c **** 
 585:./FWLIB/src/stm32f4xx_tim.c **** /**
 586:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Enables or disables the specified TIM peripheral.
 587:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 to select the TIMx peripheral.
 588:./FWLIB/src/stm32f4xx_tim.c ****   * @param  NewState: new state of the TIMx peripheral.
 589:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
 590:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
 591:./FWLIB/src/stm32f4xx_tim.c ****   */
 592:./FWLIB/src/stm32f4xx_tim.c **** void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
 593:./FWLIB/src/stm32f4xx_tim.c **** {
 594:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 595:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 596:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 597:./FWLIB/src/stm32f4xx_tim.c ****   
 598:./FWLIB/src/stm32f4xx_tim.c ****   if (NewState != DISABLE)
 599:./FWLIB/src/stm32f4xx_tim.c ****   {
 600:./FWLIB/src/stm32f4xx_tim.c ****     /* Enable the TIM Counter */
 601:./FWLIB/src/stm32f4xx_tim.c ****     TIMx->CR1 |= TIM_CR1_CEN;
 602:./FWLIB/src/stm32f4xx_tim.c ****   }
ARM GAS  /tmp/ccEzGk5p.s 			page 12


 603:./FWLIB/src/stm32f4xx_tim.c ****   else
 604:./FWLIB/src/stm32f4xx_tim.c ****   {
 605:./FWLIB/src/stm32f4xx_tim.c ****     /* Disable the TIM Counter */
 606:./FWLIB/src/stm32f4xx_tim.c ****     TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 607:./FWLIB/src/stm32f4xx_tim.c ****   }
 608:./FWLIB/src/stm32f4xx_tim.c **** }
 609:./FWLIB/src/stm32f4xx_tim.c **** /**
 610:./FWLIB/src/stm32f4xx_tim.c ****   * @}
 611:./FWLIB/src/stm32f4xx_tim.c ****   */
 612:./FWLIB/src/stm32f4xx_tim.c **** 
 613:./FWLIB/src/stm32f4xx_tim.c **** /** @defgroup TIM_Group2 Output Compare management functions
 614:./FWLIB/src/stm32f4xx_tim.c ****  *  @brief    Output Compare management functions 
 615:./FWLIB/src/stm32f4xx_tim.c ****  *
 616:./FWLIB/src/stm32f4xx_tim.c **** @verbatim   
 617:./FWLIB/src/stm32f4xx_tim.c ****  ===============================================================================
 618:./FWLIB/src/stm32f4xx_tim.c ****               ##### Output Compare management functions #####
 619:./FWLIB/src/stm32f4xx_tim.c ****  ===============================================================================  
 620:./FWLIB/src/stm32f4xx_tim.c ****    
 621:./FWLIB/src/stm32f4xx_tim.c ****       
 622:./FWLIB/src/stm32f4xx_tim.c ****         ##### TIM Driver: how to use it in Output Compare Mode #####
 623:./FWLIB/src/stm32f4xx_tim.c ****  ===============================================================================
 624:./FWLIB/src/stm32f4xx_tim.c ****     [..] 
 625:./FWLIB/src/stm32f4xx_tim.c ****     To use the Timer in Output Compare mode, the following steps are mandatory:
 626:./FWLIB/src/stm32f4xx_tim.c ****        
 627:./FWLIB/src/stm32f4xx_tim.c ****       (#) Enable TIM clock using RCC_APBxPeriphClockCmd(RCC_APBxPeriph_TIMx, ENABLE) 
 628:./FWLIB/src/stm32f4xx_tim.c ****           function
 629:./FWLIB/src/stm32f4xx_tim.c ****        
 630:./FWLIB/src/stm32f4xx_tim.c ****       (#) Configure the TIM pins by configuring the corresponding GPIO pins
 631:./FWLIB/src/stm32f4xx_tim.c ****        
 632:./FWLIB/src/stm32f4xx_tim.c ****       (#) Configure the Time base unit as described in the first part of this driver, 
 633:./FWLIB/src/stm32f4xx_tim.c ****         (++) if needed, else the Timer will run with the default configuration:
 634:./FWLIB/src/stm32f4xx_tim.c ****             Autoreload value = 0xFFFF
 635:./FWLIB/src/stm32f4xx_tim.c ****         (++) Prescaler value = 0x0000
 636:./FWLIB/src/stm32f4xx_tim.c ****         (++) Counter mode = Up counting
 637:./FWLIB/src/stm32f4xx_tim.c ****         (++) Clock Division = TIM_CKD_DIV1
 638:./FWLIB/src/stm32f4xx_tim.c ****           
 639:./FWLIB/src/stm32f4xx_tim.c ****       (#) Fill the TIM_OCInitStruct with the desired parameters including:
 640:./FWLIB/src/stm32f4xx_tim.c ****         (++) The TIM Output Compare mode: TIM_OCMode
 641:./FWLIB/src/stm32f4xx_tim.c ****         (++) TIM Output State: TIM_OutputState
 642:./FWLIB/src/stm32f4xx_tim.c ****         (++) TIM Pulse value: TIM_Pulse
 643:./FWLIB/src/stm32f4xx_tim.c ****         (++) TIM Output Compare Polarity : TIM_OCPolarity
 644:./FWLIB/src/stm32f4xx_tim.c ****        
 645:./FWLIB/src/stm32f4xx_tim.c ****       (#) Call TIM_OCxInit(TIMx, &TIM_OCInitStruct) to configure the desired 
 646:./FWLIB/src/stm32f4xx_tim.c ****           channel with the corresponding configuration
 647:./FWLIB/src/stm32f4xx_tim.c ****        
 648:./FWLIB/src/stm32f4xx_tim.c ****       (#) Call the TIM_Cmd(ENABLE) function to enable the TIM counter.
 649:./FWLIB/src/stm32f4xx_tim.c ****        
 650:./FWLIB/src/stm32f4xx_tim.c ****       -@- All other functions can be used separately to modify, if needed,
 651:./FWLIB/src/stm32f4xx_tim.c ****           a specific feature of the Timer. 
 652:./FWLIB/src/stm32f4xx_tim.c ****           
 653:./FWLIB/src/stm32f4xx_tim.c ****       -@- In case of PWM mode, this function is mandatory:
 654:./FWLIB/src/stm32f4xx_tim.c ****           TIM_OCxPreloadConfig(TIMx, TIM_OCPreload_ENABLE); 
 655:./FWLIB/src/stm32f4xx_tim.c ****               
 656:./FWLIB/src/stm32f4xx_tim.c ****       -@- If the corresponding interrupt or DMA request are needed, the user should:
 657:./FWLIB/src/stm32f4xx_tim.c ****         (+@) Enable the NVIC (or the DMA) to use the TIM interrupts (or DMA requests). 
 658:./FWLIB/src/stm32f4xx_tim.c ****         (+@) Enable the corresponding interrupt (or DMA request) using the function 
 659:./FWLIB/src/stm32f4xx_tim.c ****              TIM_ITConfig(TIMx, TIM_IT_CCx) (or TIM_DMA_Cmd(TIMx, TIM_DMA_CCx))   
ARM GAS  /tmp/ccEzGk5p.s 			page 13


 660:./FWLIB/src/stm32f4xx_tim.c **** 
 661:./FWLIB/src/stm32f4xx_tim.c **** @endverbatim
 662:./FWLIB/src/stm32f4xx_tim.c ****   * @{
 663:./FWLIB/src/stm32f4xx_tim.c ****   */
 664:./FWLIB/src/stm32f4xx_tim.c **** 
 665:./FWLIB/src/stm32f4xx_tim.c **** /**
 666:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Initializes the TIMx Channel1 according to the specified parameters in
 667:./FWLIB/src/stm32f4xx_tim.c ****   *         the TIM_OCInitStruct.
 668:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
 669:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
 670:./FWLIB/src/stm32f4xx_tim.c ****   *         the configuration information for the specified TIM peripheral.
 671:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
 672:./FWLIB/src/stm32f4xx_tim.c ****   */
 673:./FWLIB/src/stm32f4xx_tim.c **** void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
 674:./FWLIB/src/stm32f4xx_tim.c **** {
 675:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 676:./FWLIB/src/stm32f4xx_tim.c ****    
 677:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 678:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
 679:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
 680:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
 681:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 682:./FWLIB/src/stm32f4xx_tim.c **** 
 683:./FWLIB/src/stm32f4xx_tim.c ****   /* Disable the Channel 1: Reset the CC1E Bit */
 684:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 685:./FWLIB/src/stm32f4xx_tim.c ****   
 686:./FWLIB/src/stm32f4xx_tim.c ****   /* Get the TIMx CCER register value */
 687:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer = TIMx->CCER;
 688:./FWLIB/src/stm32f4xx_tim.c ****   /* Get the TIMx CR2 register value */
 689:./FWLIB/src/stm32f4xx_tim.c ****   tmpcr2 =  TIMx->CR2;
 690:./FWLIB/src/stm32f4xx_tim.c ****   
 691:./FWLIB/src/stm32f4xx_tim.c ****   /* Get the TIMx CCMR1 register value */
 692:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmrx = TIMx->CCMR1;
 693:./FWLIB/src/stm32f4xx_tim.c ****     
 694:./FWLIB/src/stm32f4xx_tim.c ****   /* Reset the Output Compare Mode Bits */
 695:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 696:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 697:./FWLIB/src/stm32f4xx_tim.c ****   /* Select the Output Compare Mode */
 698:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 699:./FWLIB/src/stm32f4xx_tim.c ****   
 700:./FWLIB/src/stm32f4xx_tim.c ****   /* Reset the Output Polarity level */
 701:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 702:./FWLIB/src/stm32f4xx_tim.c ****   /* Set the Output Compare Polarity */
 703:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 704:./FWLIB/src/stm32f4xx_tim.c ****   
 705:./FWLIB/src/stm32f4xx_tim.c ****   /* Set the Output State */
 706:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 707:./FWLIB/src/stm32f4xx_tim.c ****     
 708:./FWLIB/src/stm32f4xx_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM8))
 709:./FWLIB/src/stm32f4xx_tim.c ****   {
 710:./FWLIB/src/stm32f4xx_tim.c ****     assert_param(IS_TIM_OUTPUTN_STATE(TIM_OCInitStruct->TIM_OutputNState));
 711:./FWLIB/src/stm32f4xx_tim.c ****     assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
 712:./FWLIB/src/stm32f4xx_tim.c ****     assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
 713:./FWLIB/src/stm32f4xx_tim.c ****     assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
 714:./FWLIB/src/stm32f4xx_tim.c ****     
 715:./FWLIB/src/stm32f4xx_tim.c ****     /* Reset the Output N Polarity level */
 716:./FWLIB/src/stm32f4xx_tim.c ****     tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
ARM GAS  /tmp/ccEzGk5p.s 			page 14


 717:./FWLIB/src/stm32f4xx_tim.c ****     /* Set the Output N Polarity */
 718:./FWLIB/src/stm32f4xx_tim.c ****     tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 719:./FWLIB/src/stm32f4xx_tim.c ****     /* Reset the Output N State */
 720:./FWLIB/src/stm32f4xx_tim.c ****     tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 721:./FWLIB/src/stm32f4xx_tim.c ****     
 722:./FWLIB/src/stm32f4xx_tim.c ****     /* Set the Output N State */
 723:./FWLIB/src/stm32f4xx_tim.c ****     tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 724:./FWLIB/src/stm32f4xx_tim.c ****     /* Reset the Output Compare and Output Compare N IDLE State */
 725:./FWLIB/src/stm32f4xx_tim.c ****     tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 726:./FWLIB/src/stm32f4xx_tim.c ****     tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 727:./FWLIB/src/stm32f4xx_tim.c ****     /* Set the Output Idle state */
 728:./FWLIB/src/stm32f4xx_tim.c ****     tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 729:./FWLIB/src/stm32f4xx_tim.c ****     /* Set the Output N Idle state */
 730:./FWLIB/src/stm32f4xx_tim.c ****     tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 731:./FWLIB/src/stm32f4xx_tim.c ****   }
 732:./FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CR2 */
 733:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CR2 = tmpcr2;
 734:./FWLIB/src/stm32f4xx_tim.c ****   
 735:./FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR1 */
 736:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR1 = tmpccmrx;
 737:./FWLIB/src/stm32f4xx_tim.c ****   
 738:./FWLIB/src/stm32f4xx_tim.c ****   /* Set the Capture Compare Register value */
 739:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 740:./FWLIB/src/stm32f4xx_tim.c ****   
 741:./FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCER */
 742:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER = tmpccer;
 743:./FWLIB/src/stm32f4xx_tim.c **** }
 744:./FWLIB/src/stm32f4xx_tim.c **** 
 745:./FWLIB/src/stm32f4xx_tim.c **** /**
 746:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Initializes the TIMx Channel2 according to the specified parameters 
 747:./FWLIB/src/stm32f4xx_tim.c ****   *         in the TIM_OCInitStruct.
 748:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
 749:./FWLIB/src/stm32f4xx_tim.c ****   *         peripheral.
 750:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
 751:./FWLIB/src/stm32f4xx_tim.c ****   *         the configuration information for the specified TIM peripheral.
 752:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
 753:./FWLIB/src/stm32f4xx_tim.c ****   */
 754:./FWLIB/src/stm32f4xx_tim.c **** void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
 755:./FWLIB/src/stm32f4xx_tim.c **** {
 756:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 757:./FWLIB/src/stm32f4xx_tim.c ****    
 758:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 759:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx)); 
 760:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
 761:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
 762:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 763:./FWLIB/src/stm32f4xx_tim.c **** 
 764:./FWLIB/src/stm32f4xx_tim.c ****   /* Disable the Channel 2: Reset the CC2E Bit */
 765:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 766:./FWLIB/src/stm32f4xx_tim.c ****   
 767:./FWLIB/src/stm32f4xx_tim.c ****   /* Get the TIMx CCER register value */  
 768:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer = TIMx->CCER;
 769:./FWLIB/src/stm32f4xx_tim.c ****   /* Get the TIMx CR2 register value */
 770:./FWLIB/src/stm32f4xx_tim.c ****   tmpcr2 =  TIMx->CR2;
 771:./FWLIB/src/stm32f4xx_tim.c ****   
 772:./FWLIB/src/stm32f4xx_tim.c ****   /* Get the TIMx CCMR1 register value */
 773:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmrx = TIMx->CCMR1;
ARM GAS  /tmp/ccEzGk5p.s 			page 15


 774:./FWLIB/src/stm32f4xx_tim.c ****     
 775:./FWLIB/src/stm32f4xx_tim.c ****   /* Reset the Output Compare mode and Capture/Compare selection Bits */
 776:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
 777:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 778:./FWLIB/src/stm32f4xx_tim.c ****   
 779:./FWLIB/src/stm32f4xx_tim.c ****   /* Select the Output Compare Mode */
 780:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 781:./FWLIB/src/stm32f4xx_tim.c ****   
 782:./FWLIB/src/stm32f4xx_tim.c ****   /* Reset the Output Polarity level */
 783:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 784:./FWLIB/src/stm32f4xx_tim.c ****   /* Set the Output Compare Polarity */
 785:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 786:./FWLIB/src/stm32f4xx_tim.c ****   
 787:./FWLIB/src/stm32f4xx_tim.c ****   /* Set the Output State */
 788:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 789:./FWLIB/src/stm32f4xx_tim.c ****     
 790:./FWLIB/src/stm32f4xx_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM8))
 791:./FWLIB/src/stm32f4xx_tim.c ****   {
 792:./FWLIB/src/stm32f4xx_tim.c ****     assert_param(IS_TIM_OUTPUTN_STATE(TIM_OCInitStruct->TIM_OutputNState));
 793:./FWLIB/src/stm32f4xx_tim.c ****     assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
 794:./FWLIB/src/stm32f4xx_tim.c ****     assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
 795:./FWLIB/src/stm32f4xx_tim.c ****     assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
 796:./FWLIB/src/stm32f4xx_tim.c ****     
 797:./FWLIB/src/stm32f4xx_tim.c ****     /* Reset the Output N Polarity level */
 798:./FWLIB/src/stm32f4xx_tim.c ****     tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 799:./FWLIB/src/stm32f4xx_tim.c ****     /* Set the Output N Polarity */
 800:./FWLIB/src/stm32f4xx_tim.c ****     tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 801:./FWLIB/src/stm32f4xx_tim.c ****     /* Reset the Output N State */
 802:./FWLIB/src/stm32f4xx_tim.c ****     tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 803:./FWLIB/src/stm32f4xx_tim.c ****     
 804:./FWLIB/src/stm32f4xx_tim.c ****     /* Set the Output N State */
 805:./FWLIB/src/stm32f4xx_tim.c ****     tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 806:./FWLIB/src/stm32f4xx_tim.c ****     /* Reset the Output Compare and Output Compare N IDLE State */
 807:./FWLIB/src/stm32f4xx_tim.c ****     tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
 808:./FWLIB/src/stm32f4xx_tim.c ****     tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 809:./FWLIB/src/stm32f4xx_tim.c ****     /* Set the Output Idle state */
 810:./FWLIB/src/stm32f4xx_tim.c ****     tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 811:./FWLIB/src/stm32f4xx_tim.c ****     /* Set the Output N Idle state */
 812:./FWLIB/src/stm32f4xx_tim.c ****     tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 813:./FWLIB/src/stm32f4xx_tim.c ****   }
 814:./FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CR2 */
 815:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CR2 = tmpcr2;
 816:./FWLIB/src/stm32f4xx_tim.c ****   
 817:./FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR1 */
 818:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR1 = tmpccmrx;
 819:./FWLIB/src/stm32f4xx_tim.c ****   
 820:./FWLIB/src/stm32f4xx_tim.c ****   /* Set the Capture Compare Register value */
 821:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 822:./FWLIB/src/stm32f4xx_tim.c ****   
 823:./FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCER */
 824:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER = tmpccer;
 825:./FWLIB/src/stm32f4xx_tim.c **** }
 826:./FWLIB/src/stm32f4xx_tim.c **** 
 827:./FWLIB/src/stm32f4xx_tim.c **** /**
 828:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Initializes the TIMx Channel3 according to the specified parameters
 829:./FWLIB/src/stm32f4xx_tim.c ****   *         in the TIM_OCInitStruct.
 830:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
ARM GAS  /tmp/ccEzGk5p.s 			page 16


 831:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
 832:./FWLIB/src/stm32f4xx_tim.c ****   *         the configuration information for the specified TIM peripheral.
 833:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
 834:./FWLIB/src/stm32f4xx_tim.c ****   */
 835:./FWLIB/src/stm32f4xx_tim.c **** void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
 836:./FWLIB/src/stm32f4xx_tim.c **** {
 837:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 838:./FWLIB/src/stm32f4xx_tim.c ****    
 839:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 840:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
 841:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
 842:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
 843:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 844:./FWLIB/src/stm32f4xx_tim.c **** 
 845:./FWLIB/src/stm32f4xx_tim.c ****   /* Disable the Channel 3: Reset the CC2E Bit */
 846:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 847:./FWLIB/src/stm32f4xx_tim.c ****   
 848:./FWLIB/src/stm32f4xx_tim.c ****   /* Get the TIMx CCER register value */
 849:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer = TIMx->CCER;
 850:./FWLIB/src/stm32f4xx_tim.c ****   /* Get the TIMx CR2 register value */
 851:./FWLIB/src/stm32f4xx_tim.c ****   tmpcr2 =  TIMx->CR2;
 852:./FWLIB/src/stm32f4xx_tim.c ****   
 853:./FWLIB/src/stm32f4xx_tim.c ****   /* Get the TIMx CCMR2 register value */
 854:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmrx = TIMx->CCMR2;
 855:./FWLIB/src/stm32f4xx_tim.c ****     
 856:./FWLIB/src/stm32f4xx_tim.c ****   /* Reset the Output Compare mode and Capture/Compare selection Bits */
 857:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 858:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 859:./FWLIB/src/stm32f4xx_tim.c ****   /* Select the Output Compare Mode */
 860:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 861:./FWLIB/src/stm32f4xx_tim.c ****   
 862:./FWLIB/src/stm32f4xx_tim.c ****   /* Reset the Output Polarity level */
 863:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 864:./FWLIB/src/stm32f4xx_tim.c ****   /* Set the Output Compare Polarity */
 865:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 866:./FWLIB/src/stm32f4xx_tim.c ****   
 867:./FWLIB/src/stm32f4xx_tim.c ****   /* Set the Output State */
 868:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 869:./FWLIB/src/stm32f4xx_tim.c ****     
 870:./FWLIB/src/stm32f4xx_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM8))
 871:./FWLIB/src/stm32f4xx_tim.c ****   {
 872:./FWLIB/src/stm32f4xx_tim.c ****     assert_param(IS_TIM_OUTPUTN_STATE(TIM_OCInitStruct->TIM_OutputNState));
 873:./FWLIB/src/stm32f4xx_tim.c ****     assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
 874:./FWLIB/src/stm32f4xx_tim.c ****     assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
 875:./FWLIB/src/stm32f4xx_tim.c ****     assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
 876:./FWLIB/src/stm32f4xx_tim.c ****     
 877:./FWLIB/src/stm32f4xx_tim.c ****     /* Reset the Output N Polarity level */
 878:./FWLIB/src/stm32f4xx_tim.c ****     tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 879:./FWLIB/src/stm32f4xx_tim.c ****     /* Set the Output N Polarity */
 880:./FWLIB/src/stm32f4xx_tim.c ****     tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 881:./FWLIB/src/stm32f4xx_tim.c ****     /* Reset the Output N State */
 882:./FWLIB/src/stm32f4xx_tim.c ****     tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 883:./FWLIB/src/stm32f4xx_tim.c ****     
 884:./FWLIB/src/stm32f4xx_tim.c ****     /* Set the Output N State */
 885:./FWLIB/src/stm32f4xx_tim.c ****     tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 886:./FWLIB/src/stm32f4xx_tim.c ****     /* Reset the Output Compare and Output Compare N IDLE State */
 887:./FWLIB/src/stm32f4xx_tim.c ****     tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
ARM GAS  /tmp/ccEzGk5p.s 			page 17


 888:./FWLIB/src/stm32f4xx_tim.c ****     tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 889:./FWLIB/src/stm32f4xx_tim.c ****     /* Set the Output Idle state */
 890:./FWLIB/src/stm32f4xx_tim.c ****     tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 891:./FWLIB/src/stm32f4xx_tim.c ****     /* Set the Output N Idle state */
 892:./FWLIB/src/stm32f4xx_tim.c ****     tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 893:./FWLIB/src/stm32f4xx_tim.c ****   }
 894:./FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CR2 */
 895:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CR2 = tmpcr2;
 896:./FWLIB/src/stm32f4xx_tim.c ****   
 897:./FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR2 */
 898:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR2 = tmpccmrx;
 899:./FWLIB/src/stm32f4xx_tim.c ****   
 900:./FWLIB/src/stm32f4xx_tim.c ****   /* Set the Capture Compare Register value */
 901:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 902:./FWLIB/src/stm32f4xx_tim.c ****   
 903:./FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCER */
 904:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER = tmpccer;
 905:./FWLIB/src/stm32f4xx_tim.c **** }
 906:./FWLIB/src/stm32f4xx_tim.c **** 
 907:./FWLIB/src/stm32f4xx_tim.c **** /**
 908:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Initializes the TIMx Channel4 according to the specified parameters
 909:./FWLIB/src/stm32f4xx_tim.c ****   *         in the TIM_OCInitStruct.
 910:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
 911:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
 912:./FWLIB/src/stm32f4xx_tim.c ****   *         the configuration information for the specified TIM peripheral.
 913:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
 914:./FWLIB/src/stm32f4xx_tim.c ****   */
 915:./FWLIB/src/stm32f4xx_tim.c **** void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
 916:./FWLIB/src/stm32f4xx_tim.c **** {
 917:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 918:./FWLIB/src/stm32f4xx_tim.c ****    
 919:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 920:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
 921:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
 922:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
 923:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 924:./FWLIB/src/stm32f4xx_tim.c **** 
 925:./FWLIB/src/stm32f4xx_tim.c ****   /* Disable the Channel 4: Reset the CC4E Bit */
 926:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 927:./FWLIB/src/stm32f4xx_tim.c ****   
 928:./FWLIB/src/stm32f4xx_tim.c ****   /* Get the TIMx CCER register value */
 929:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer = TIMx->CCER;
 930:./FWLIB/src/stm32f4xx_tim.c ****   /* Get the TIMx CR2 register value */
 931:./FWLIB/src/stm32f4xx_tim.c ****   tmpcr2 =  TIMx->CR2;
 932:./FWLIB/src/stm32f4xx_tim.c ****   
 933:./FWLIB/src/stm32f4xx_tim.c ****   /* Get the TIMx CCMR2 register value */
 934:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmrx = TIMx->CCMR2;
 935:./FWLIB/src/stm32f4xx_tim.c ****     
 936:./FWLIB/src/stm32f4xx_tim.c ****   /* Reset the Output Compare mode and Capture/Compare selection Bits */
 937:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 938:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 939:./FWLIB/src/stm32f4xx_tim.c ****   
 940:./FWLIB/src/stm32f4xx_tim.c ****   /* Select the Output Compare Mode */
 941:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 942:./FWLIB/src/stm32f4xx_tim.c ****   
 943:./FWLIB/src/stm32f4xx_tim.c ****   /* Reset the Output Polarity level */
 944:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer &= (uint16_t)~TIM_CCER_CC4P;
ARM GAS  /tmp/ccEzGk5p.s 			page 18


 945:./FWLIB/src/stm32f4xx_tim.c ****   /* Set the Output Compare Polarity */
 946:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 947:./FWLIB/src/stm32f4xx_tim.c ****   
 948:./FWLIB/src/stm32f4xx_tim.c ****   /* Set the Output State */
 949:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 950:./FWLIB/src/stm32f4xx_tim.c ****   
 951:./FWLIB/src/stm32f4xx_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM8))
 952:./FWLIB/src/stm32f4xx_tim.c ****   {
 953:./FWLIB/src/stm32f4xx_tim.c ****     assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
 954:./FWLIB/src/stm32f4xx_tim.c ****     /* Reset the Output Compare IDLE State */
 955:./FWLIB/src/stm32f4xx_tim.c ****     tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 956:./FWLIB/src/stm32f4xx_tim.c ****     /* Set the Output Idle state */
 957:./FWLIB/src/stm32f4xx_tim.c ****     tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 958:./FWLIB/src/stm32f4xx_tim.c ****   }
 959:./FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CR2 */
 960:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CR2 = tmpcr2;
 961:./FWLIB/src/stm32f4xx_tim.c ****   
 962:./FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR2 */  
 963:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR2 = tmpccmrx;
 964:./FWLIB/src/stm32f4xx_tim.c ****     
 965:./FWLIB/src/stm32f4xx_tim.c ****   /* Set the Capture Compare Register value */
 966:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 967:./FWLIB/src/stm32f4xx_tim.c ****   
 968:./FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCER */
 969:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER = tmpccer;
 970:./FWLIB/src/stm32f4xx_tim.c **** }
 971:./FWLIB/src/stm32f4xx_tim.c **** 
 972:./FWLIB/src/stm32f4xx_tim.c **** /**
 973:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Fills each TIM_OCInitStruct member with its default value.
 974:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure which will
 975:./FWLIB/src/stm32f4xx_tim.c ****   *         be initialized.
 976:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
 977:./FWLIB/src/stm32f4xx_tim.c ****   */
 978:./FWLIB/src/stm32f4xx_tim.c **** void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
 979:./FWLIB/src/stm32f4xx_tim.c **** {
 980:./FWLIB/src/stm32f4xx_tim.c ****   /* Set the default configuration */
 981:./FWLIB/src/stm32f4xx_tim.c ****   TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 982:./FWLIB/src/stm32f4xx_tim.c ****   TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 983:./FWLIB/src/stm32f4xx_tim.c ****   TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 984:./FWLIB/src/stm32f4xx_tim.c ****   TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 985:./FWLIB/src/stm32f4xx_tim.c ****   TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 986:./FWLIB/src/stm32f4xx_tim.c ****   TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 987:./FWLIB/src/stm32f4xx_tim.c ****   TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 988:./FWLIB/src/stm32f4xx_tim.c ****   TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 989:./FWLIB/src/stm32f4xx_tim.c **** }
 990:./FWLIB/src/stm32f4xx_tim.c **** 
 991:./FWLIB/src/stm32f4xx_tim.c **** /**
 992:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Selects the TIM Output Compare Mode.
 993:./FWLIB/src/stm32f4xx_tim.c ****   * @note   This function disables the selected channel before changing the Output
 994:./FWLIB/src/stm32f4xx_tim.c ****   *         Compare Mode. If needed, user has to enable this channel using
 995:./FWLIB/src/stm32f4xx_tim.c ****   *         TIM_CCxCmd() and TIM_CCxNCmd() functions.
 996:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
 997:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_Channel: specifies the TIM Channel
 998:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
 999:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_Channel_1: TIM Channel 1
1000:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_Channel_2: TIM Channel 2
1001:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_Channel_3: TIM Channel 3
ARM GAS  /tmp/ccEzGk5p.s 			page 19


1002:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_Channel_4: TIM Channel 4
1003:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_OCMode: specifies the TIM Output Compare Mode.
1004:./FWLIB/src/stm32f4xx_tim.c ****   *           This parameter can be one of the following values:
1005:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCMode_Timing
1006:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCMode_Active
1007:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCMode_Toggle
1008:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCMode_PWM1
1009:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCMode_PWM2
1010:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ForcedAction_Active
1011:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ForcedAction_InActive
1012:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1013:./FWLIB/src/stm32f4xx_tim.c ****   */
1014:./FWLIB/src/stm32f4xx_tim.c **** void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
1015:./FWLIB/src/stm32f4xx_tim.c **** {
1016:./FWLIB/src/stm32f4xx_tim.c ****   uint32_t tmp = 0;
1017:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmp1 = 0;
1018:./FWLIB/src/stm32f4xx_tim.c **** 
1019:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1020:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST1_PERIPH(TIMx));
1021:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_CHANNEL(TIM_Channel));
1022:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OCM(TIM_OCMode));
1023:./FWLIB/src/stm32f4xx_tim.c **** 
1024:./FWLIB/src/stm32f4xx_tim.c ****   tmp = (uint32_t) TIMx;
1025:./FWLIB/src/stm32f4xx_tim.c ****   tmp += CCMR_OFFSET;
1026:./FWLIB/src/stm32f4xx_tim.c **** 
1027:./FWLIB/src/stm32f4xx_tim.c ****   tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
1028:./FWLIB/src/stm32f4xx_tim.c **** 
1029:./FWLIB/src/stm32f4xx_tim.c ****   /* Disable the Channel: Reset the CCxE Bit */
1030:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER &= (uint16_t) ~tmp1;
1031:./FWLIB/src/stm32f4xx_tim.c **** 
1032:./FWLIB/src/stm32f4xx_tim.c ****   if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
1033:./FWLIB/src/stm32f4xx_tim.c ****   {
1034:./FWLIB/src/stm32f4xx_tim.c ****     tmp += (TIM_Channel>>1);
1035:./FWLIB/src/stm32f4xx_tim.c **** 
1036:./FWLIB/src/stm32f4xx_tim.c ****     /* Reset the OCxM bits in the CCMRx register */
1037:./FWLIB/src/stm32f4xx_tim.c ****     *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
1038:./FWLIB/src/stm32f4xx_tim.c ****    
1039:./FWLIB/src/stm32f4xx_tim.c ****     /* Configure the OCxM bits in the CCMRx register */
1040:./FWLIB/src/stm32f4xx_tim.c ****     *(__IO uint32_t *) tmp |= TIM_OCMode;
1041:./FWLIB/src/stm32f4xx_tim.c ****   }
1042:./FWLIB/src/stm32f4xx_tim.c ****   else
1043:./FWLIB/src/stm32f4xx_tim.c ****   {
1044:./FWLIB/src/stm32f4xx_tim.c ****     tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
1045:./FWLIB/src/stm32f4xx_tim.c **** 
1046:./FWLIB/src/stm32f4xx_tim.c ****     /* Reset the OCxM bits in the CCMRx register */
1047:./FWLIB/src/stm32f4xx_tim.c ****     *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
1048:./FWLIB/src/stm32f4xx_tim.c ****     
1049:./FWLIB/src/stm32f4xx_tim.c ****     /* Configure the OCxM bits in the CCMRx register */
1050:./FWLIB/src/stm32f4xx_tim.c ****     *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
1051:./FWLIB/src/stm32f4xx_tim.c ****   }
1052:./FWLIB/src/stm32f4xx_tim.c **** }
1053:./FWLIB/src/stm32f4xx_tim.c **** 
1054:./FWLIB/src/stm32f4xx_tim.c **** /**
1055:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Sets the TIMx Capture Compare1 Register value
1056:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
1057:./FWLIB/src/stm32f4xx_tim.c ****   * @param  Compare1: specifies the Capture Compare1 register new value.
1058:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
ARM GAS  /tmp/ccEzGk5p.s 			page 20


1059:./FWLIB/src/stm32f4xx_tim.c ****   */
1060:./FWLIB/src/stm32f4xx_tim.c **** void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
1061:./FWLIB/src/stm32f4xx_tim.c **** {
1062:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1063:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST1_PERIPH(TIMx));
1064:./FWLIB/src/stm32f4xx_tim.c **** 
1065:./FWLIB/src/stm32f4xx_tim.c ****   /* Set the Capture Compare1 Register value */
1066:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCR1 = Compare1;
1067:./FWLIB/src/stm32f4xx_tim.c **** }
1068:./FWLIB/src/stm32f4xx_tim.c **** 
1069:./FWLIB/src/stm32f4xx_tim.c **** /**
1070:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Sets the TIMx Capture Compare2 Register value
1071:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
1072:./FWLIB/src/stm32f4xx_tim.c ****   *         peripheral.
1073:./FWLIB/src/stm32f4xx_tim.c ****   * @param  Compare2: specifies the Capture Compare2 register new value.
1074:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1075:./FWLIB/src/stm32f4xx_tim.c ****   */
1076:./FWLIB/src/stm32f4xx_tim.c **** void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
1077:./FWLIB/src/stm32f4xx_tim.c **** {
1078:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1079:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
1080:./FWLIB/src/stm32f4xx_tim.c **** 
1081:./FWLIB/src/stm32f4xx_tim.c ****   /* Set the Capture Compare2 Register value */
1082:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCR2 = Compare2;
1083:./FWLIB/src/stm32f4xx_tim.c **** }
1084:./FWLIB/src/stm32f4xx_tim.c **** 
1085:./FWLIB/src/stm32f4xx_tim.c **** /**
1086:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Sets the TIMx Capture Compare3 Register value
1087:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1088:./FWLIB/src/stm32f4xx_tim.c ****   * @param  Compare3: specifies the Capture Compare3 register new value.
1089:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1090:./FWLIB/src/stm32f4xx_tim.c ****   */
1091:./FWLIB/src/stm32f4xx_tim.c **** void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
1092:./FWLIB/src/stm32f4xx_tim.c **** {
1093:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1094:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1095:./FWLIB/src/stm32f4xx_tim.c **** 
1096:./FWLIB/src/stm32f4xx_tim.c ****   /* Set the Capture Compare3 Register value */
1097:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCR3 = Compare3;
1098:./FWLIB/src/stm32f4xx_tim.c **** }
1099:./FWLIB/src/stm32f4xx_tim.c **** 
1100:./FWLIB/src/stm32f4xx_tim.c **** /**
1101:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Sets the TIMx Capture Compare4 Register value
1102:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1103:./FWLIB/src/stm32f4xx_tim.c ****   * @param  Compare4: specifies the Capture Compare4 register new value.
1104:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1105:./FWLIB/src/stm32f4xx_tim.c ****   */
1106:./FWLIB/src/stm32f4xx_tim.c **** void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4)
1107:./FWLIB/src/stm32f4xx_tim.c **** {
1108:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1109:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1110:./FWLIB/src/stm32f4xx_tim.c **** 
1111:./FWLIB/src/stm32f4xx_tim.c ****   /* Set the Capture Compare4 Register value */
1112:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCR4 = Compare4;
1113:./FWLIB/src/stm32f4xx_tim.c **** }
1114:./FWLIB/src/stm32f4xx_tim.c **** 
1115:./FWLIB/src/stm32f4xx_tim.c **** /**
ARM GAS  /tmp/ccEzGk5p.s 			page 21


1116:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Forces the TIMx output 1 waveform to active or inactive level.
1117:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
1118:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ForcedAction: specifies the forced Action to be set to the output waveform.
1119:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1120:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ForcedAction_Active: Force active level on OC1REF
1121:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
1122:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1123:./FWLIB/src/stm32f4xx_tim.c ****   */
1124:./FWLIB/src/stm32f4xx_tim.c **** void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
1125:./FWLIB/src/stm32f4xx_tim.c **** {
1126:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr1 = 0;
1127:./FWLIB/src/stm32f4xx_tim.c **** 
1128:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1129:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST1_PERIPH(TIMx));
1130:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
1131:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
1132:./FWLIB/src/stm32f4xx_tim.c **** 
1133:./FWLIB/src/stm32f4xx_tim.c ****   /* Reset the OC1M Bits */
1134:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1M;
1135:./FWLIB/src/stm32f4xx_tim.c **** 
1136:./FWLIB/src/stm32f4xx_tim.c ****   /* Configure The Forced output Mode */
1137:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 |= TIM_ForcedAction;
1138:./FWLIB/src/stm32f4xx_tim.c **** 
1139:./FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR1 register */
1140:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
1141:./FWLIB/src/stm32f4xx_tim.c **** }
1142:./FWLIB/src/stm32f4xx_tim.c **** 
1143:./FWLIB/src/stm32f4xx_tim.c **** /**
1144:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Forces the TIMx output 2 waveform to active or inactive level.
1145:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
1146:./FWLIB/src/stm32f4xx_tim.c ****   *         peripheral.
1147:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ForcedAction: specifies the forced Action to be set to the output waveform.
1148:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1149:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ForcedAction_Active: Force active level on OC2REF
1150:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
1151:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1152:./FWLIB/src/stm32f4xx_tim.c ****   */
1153:./FWLIB/src/stm32f4xx_tim.c **** void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
1154:./FWLIB/src/stm32f4xx_tim.c **** {
1155:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr1 = 0;
1156:./FWLIB/src/stm32f4xx_tim.c **** 
1157:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1158:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
1159:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
1160:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
1161:./FWLIB/src/stm32f4xx_tim.c **** 
1162:./FWLIB/src/stm32f4xx_tim.c ****   /* Reset the OC2M Bits */
1163:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2M;
1164:./FWLIB/src/stm32f4xx_tim.c **** 
1165:./FWLIB/src/stm32f4xx_tim.c ****   /* Configure The Forced output Mode */
1166:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
1167:./FWLIB/src/stm32f4xx_tim.c **** 
1168:./FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR1 register */
1169:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
1170:./FWLIB/src/stm32f4xx_tim.c **** }
1171:./FWLIB/src/stm32f4xx_tim.c **** 
1172:./FWLIB/src/stm32f4xx_tim.c **** /**
ARM GAS  /tmp/ccEzGk5p.s 			page 22


1173:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Forces the TIMx output 3 waveform to active or inactive level.
1174:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1175:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ForcedAction: specifies the forced Action to be set to the output waveform.
1176:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1177:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ForcedAction_Active: Force active level on OC3REF
1178:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
1179:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1180:./FWLIB/src/stm32f4xx_tim.c ****   */
1181:./FWLIB/src/stm32f4xx_tim.c **** void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
1182:./FWLIB/src/stm32f4xx_tim.c **** {
1183:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr2 = 0;
1184:./FWLIB/src/stm32f4xx_tim.c **** 
1185:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1186:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1187:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
1188:./FWLIB/src/stm32f4xx_tim.c **** 
1189:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
1190:./FWLIB/src/stm32f4xx_tim.c **** 
1191:./FWLIB/src/stm32f4xx_tim.c ****   /* Reset the OC1M Bits */
1192:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3M;
1193:./FWLIB/src/stm32f4xx_tim.c **** 
1194:./FWLIB/src/stm32f4xx_tim.c ****   /* Configure The Forced output Mode */
1195:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 |= TIM_ForcedAction;
1196:./FWLIB/src/stm32f4xx_tim.c **** 
1197:./FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR2 register */
1198:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
1199:./FWLIB/src/stm32f4xx_tim.c **** }
1200:./FWLIB/src/stm32f4xx_tim.c **** 
1201:./FWLIB/src/stm32f4xx_tim.c **** /**
1202:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Forces the TIMx output 4 waveform to active or inactive level.
1203:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1204:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ForcedAction: specifies the forced Action to be set to the output waveform.
1205:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1206:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ForcedAction_Active: Force active level on OC4REF
1207:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
1208:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1209:./FWLIB/src/stm32f4xx_tim.c ****   */
1210:./FWLIB/src/stm32f4xx_tim.c **** void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
1211:./FWLIB/src/stm32f4xx_tim.c **** {
1212:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr2 = 0;
1213:./FWLIB/src/stm32f4xx_tim.c **** 
1214:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1215:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1216:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
1217:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
1218:./FWLIB/src/stm32f4xx_tim.c **** 
1219:./FWLIB/src/stm32f4xx_tim.c ****   /* Reset the OC2M Bits */
1220:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4M;
1221:./FWLIB/src/stm32f4xx_tim.c **** 
1222:./FWLIB/src/stm32f4xx_tim.c ****   /* Configure The Forced output Mode */
1223:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
1224:./FWLIB/src/stm32f4xx_tim.c **** 
1225:./FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR2 register */
1226:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
1227:./FWLIB/src/stm32f4xx_tim.c **** }
1228:./FWLIB/src/stm32f4xx_tim.c **** 
1229:./FWLIB/src/stm32f4xx_tim.c **** /**
ARM GAS  /tmp/ccEzGk5p.s 			page 23


1230:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Enables or disables the TIMx peripheral Preload register on CCR1.
1231:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
1232:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_OCPreload: new state of the TIMx peripheral Preload register
1233:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1234:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCPreload_Enable
1235:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCPreload_Disable
1236:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1237:./FWLIB/src/stm32f4xx_tim.c ****   */
1238:./FWLIB/src/stm32f4xx_tim.c **** void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
1239:./FWLIB/src/stm32f4xx_tim.c **** {
1240:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr1 = 0;
1241:./FWLIB/src/stm32f4xx_tim.c **** 
1242:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1243:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST1_PERIPH(TIMx));
1244:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
1245:./FWLIB/src/stm32f4xx_tim.c **** 
1246:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
1247:./FWLIB/src/stm32f4xx_tim.c **** 
1248:./FWLIB/src/stm32f4xx_tim.c ****   /* Reset the OC1PE Bit */
1249:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
1250:./FWLIB/src/stm32f4xx_tim.c **** 
1251:./FWLIB/src/stm32f4xx_tim.c ****   /* Enable or Disable the Output Compare Preload feature */
1252:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 |= TIM_OCPreload;
1253:./FWLIB/src/stm32f4xx_tim.c **** 
1254:./FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR1 register */
1255:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
1256:./FWLIB/src/stm32f4xx_tim.c **** }
1257:./FWLIB/src/stm32f4xx_tim.c **** 
1258:./FWLIB/src/stm32f4xx_tim.c **** /**
1259:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Enables or disables the TIMx peripheral Preload register on CCR2.
1260:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
1261:./FWLIB/src/stm32f4xx_tim.c ****   *         peripheral.
1262:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_OCPreload: new state of the TIMx peripheral Preload register
1263:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1264:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCPreload_Enable
1265:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCPreload_Disable
1266:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1267:./FWLIB/src/stm32f4xx_tim.c ****   */
1268:./FWLIB/src/stm32f4xx_tim.c **** void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
1269:./FWLIB/src/stm32f4xx_tim.c **** {
1270:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr1 = 0;
1271:./FWLIB/src/stm32f4xx_tim.c **** 
1272:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1273:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
1274:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
1275:./FWLIB/src/stm32f4xx_tim.c **** 
1276:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
1277:./FWLIB/src/stm32f4xx_tim.c **** 
1278:./FWLIB/src/stm32f4xx_tim.c ****   /* Reset the OC2PE Bit */
1279:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
1280:./FWLIB/src/stm32f4xx_tim.c **** 
1281:./FWLIB/src/stm32f4xx_tim.c ****   /* Enable or Disable the Output Compare Preload feature */
1282:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
1283:./FWLIB/src/stm32f4xx_tim.c **** 
1284:./FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR1 register */
1285:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
1286:./FWLIB/src/stm32f4xx_tim.c **** }
ARM GAS  /tmp/ccEzGk5p.s 			page 24


1287:./FWLIB/src/stm32f4xx_tim.c **** 
1288:./FWLIB/src/stm32f4xx_tim.c **** /**
1289:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Enables or disables the TIMx peripheral Preload register on CCR3.
1290:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1291:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_OCPreload: new state of the TIMx peripheral Preload register
1292:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1293:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCPreload_Enable
1294:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCPreload_Disable
1295:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1296:./FWLIB/src/stm32f4xx_tim.c ****   */
1297:./FWLIB/src/stm32f4xx_tim.c **** void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
1298:./FWLIB/src/stm32f4xx_tim.c **** {
1299:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr2 = 0;
1300:./FWLIB/src/stm32f4xx_tim.c **** 
1301:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1302:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1303:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
1304:./FWLIB/src/stm32f4xx_tim.c **** 
1305:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
1306:./FWLIB/src/stm32f4xx_tim.c **** 
1307:./FWLIB/src/stm32f4xx_tim.c ****   /* Reset the OC3PE Bit */
1308:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
1309:./FWLIB/src/stm32f4xx_tim.c **** 
1310:./FWLIB/src/stm32f4xx_tim.c ****   /* Enable or Disable the Output Compare Preload feature */
1311:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 |= TIM_OCPreload;
1312:./FWLIB/src/stm32f4xx_tim.c **** 
1313:./FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR2 register */
1314:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
1315:./FWLIB/src/stm32f4xx_tim.c **** }
1316:./FWLIB/src/stm32f4xx_tim.c **** 
1317:./FWLIB/src/stm32f4xx_tim.c **** /**
1318:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Enables or disables the TIMx peripheral Preload register on CCR4.
1319:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1320:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_OCPreload: new state of the TIMx peripheral Preload register
1321:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1322:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCPreload_Enable
1323:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCPreload_Disable
1324:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1325:./FWLIB/src/stm32f4xx_tim.c ****   */
1326:./FWLIB/src/stm32f4xx_tim.c **** void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
1327:./FWLIB/src/stm32f4xx_tim.c **** {
1328:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr2 = 0;
1329:./FWLIB/src/stm32f4xx_tim.c **** 
1330:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1331:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1332:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
1333:./FWLIB/src/stm32f4xx_tim.c **** 
1334:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
1335:./FWLIB/src/stm32f4xx_tim.c **** 
1336:./FWLIB/src/stm32f4xx_tim.c ****   /* Reset the OC4PE Bit */
1337:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
1338:./FWLIB/src/stm32f4xx_tim.c **** 
1339:./FWLIB/src/stm32f4xx_tim.c ****   /* Enable or Disable the Output Compare Preload feature */
1340:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
1341:./FWLIB/src/stm32f4xx_tim.c **** 
1342:./FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR2 register */
1343:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
ARM GAS  /tmp/ccEzGk5p.s 			page 25


1344:./FWLIB/src/stm32f4xx_tim.c **** }
1345:./FWLIB/src/stm32f4xx_tim.c **** 
1346:./FWLIB/src/stm32f4xx_tim.c **** /**
1347:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx Output Compare 1 Fast feature.
1348:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
1349:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_OCFast: new state of the Output Compare Fast Enable Bit.
1350:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1351:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCFast_Enable: TIM output compare fast enable
1352:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCFast_Disable: TIM output compare fast disable
1353:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1354:./FWLIB/src/stm32f4xx_tim.c ****   */
1355:./FWLIB/src/stm32f4xx_tim.c **** void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
1356:./FWLIB/src/stm32f4xx_tim.c **** {
1357:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr1 = 0;
1358:./FWLIB/src/stm32f4xx_tim.c **** 
1359:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1360:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST1_PERIPH(TIMx));
1361:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
1362:./FWLIB/src/stm32f4xx_tim.c **** 
1363:./FWLIB/src/stm32f4xx_tim.c ****   /* Get the TIMx CCMR1 register value */
1364:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
1365:./FWLIB/src/stm32f4xx_tim.c **** 
1366:./FWLIB/src/stm32f4xx_tim.c ****   /* Reset the OC1FE Bit */
1367:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1FE;
1368:./FWLIB/src/stm32f4xx_tim.c **** 
1369:./FWLIB/src/stm32f4xx_tim.c ****   /* Enable or Disable the Output Compare Fast Bit */
1370:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 |= TIM_OCFast;
1371:./FWLIB/src/stm32f4xx_tim.c **** 
1372:./FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR1 */
1373:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
1374:./FWLIB/src/stm32f4xx_tim.c **** }
1375:./FWLIB/src/stm32f4xx_tim.c **** 
1376:./FWLIB/src/stm32f4xx_tim.c **** /**
1377:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx Output Compare 2 Fast feature.
1378:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
1379:./FWLIB/src/stm32f4xx_tim.c ****   *         peripheral.
1380:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_OCFast: new state of the Output Compare Fast Enable Bit.
1381:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1382:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCFast_Enable: TIM output compare fast enable
1383:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCFast_Disable: TIM output compare fast disable
1384:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1385:./FWLIB/src/stm32f4xx_tim.c ****   */
1386:./FWLIB/src/stm32f4xx_tim.c **** void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
1387:./FWLIB/src/stm32f4xx_tim.c **** {
1388:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr1 = 0;
1389:./FWLIB/src/stm32f4xx_tim.c **** 
1390:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1391:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
1392:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
1393:./FWLIB/src/stm32f4xx_tim.c **** 
1394:./FWLIB/src/stm32f4xx_tim.c ****   /* Get the TIMx CCMR1 register value */
1395:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
1396:./FWLIB/src/stm32f4xx_tim.c **** 
1397:./FWLIB/src/stm32f4xx_tim.c ****   /* Reset the OC2FE Bit */
1398:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2FE);
1399:./FWLIB/src/stm32f4xx_tim.c **** 
1400:./FWLIB/src/stm32f4xx_tim.c ****   /* Enable or Disable the Output Compare Fast Bit */
ARM GAS  /tmp/ccEzGk5p.s 			page 26


1401:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
1402:./FWLIB/src/stm32f4xx_tim.c **** 
1403:./FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR1 */
1404:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
1405:./FWLIB/src/stm32f4xx_tim.c **** }
1406:./FWLIB/src/stm32f4xx_tim.c **** 
1407:./FWLIB/src/stm32f4xx_tim.c **** /**
1408:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx Output Compare 3 Fast feature.
1409:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1410:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_OCFast: new state of the Output Compare Fast Enable Bit.
1411:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1412:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCFast_Enable: TIM output compare fast enable
1413:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCFast_Disable: TIM output compare fast disable
1414:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1415:./FWLIB/src/stm32f4xx_tim.c ****   */
1416:./FWLIB/src/stm32f4xx_tim.c **** void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
1417:./FWLIB/src/stm32f4xx_tim.c **** {
1418:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr2 = 0;
1419:./FWLIB/src/stm32f4xx_tim.c ****   
1420:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1421:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1422:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
1423:./FWLIB/src/stm32f4xx_tim.c **** 
1424:./FWLIB/src/stm32f4xx_tim.c ****   /* Get the TIMx CCMR2 register value */
1425:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
1426:./FWLIB/src/stm32f4xx_tim.c **** 
1427:./FWLIB/src/stm32f4xx_tim.c ****   /* Reset the OC3FE Bit */
1428:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3FE;
1429:./FWLIB/src/stm32f4xx_tim.c **** 
1430:./FWLIB/src/stm32f4xx_tim.c ****   /* Enable or Disable the Output Compare Fast Bit */
1431:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 |= TIM_OCFast;
1432:./FWLIB/src/stm32f4xx_tim.c **** 
1433:./FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR2 */
1434:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
1435:./FWLIB/src/stm32f4xx_tim.c **** }
1436:./FWLIB/src/stm32f4xx_tim.c **** 
1437:./FWLIB/src/stm32f4xx_tim.c **** /**
1438:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx Output Compare 4 Fast feature.
1439:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1440:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_OCFast: new state of the Output Compare Fast Enable Bit.
1441:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1442:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCFast_Enable: TIM output compare fast enable
1443:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCFast_Disable: TIM output compare fast disable
1444:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1445:./FWLIB/src/stm32f4xx_tim.c ****   */
1446:./FWLIB/src/stm32f4xx_tim.c **** void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
1447:./FWLIB/src/stm32f4xx_tim.c **** {
1448:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr2 = 0;
1449:./FWLIB/src/stm32f4xx_tim.c **** 
1450:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1451:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1452:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
1453:./FWLIB/src/stm32f4xx_tim.c **** 
1454:./FWLIB/src/stm32f4xx_tim.c ****   /* Get the TIMx CCMR2 register value */
1455:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
1456:./FWLIB/src/stm32f4xx_tim.c **** 
1457:./FWLIB/src/stm32f4xx_tim.c ****   /* Reset the OC4FE Bit */
ARM GAS  /tmp/ccEzGk5p.s 			page 27


1458:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4FE);
1459:./FWLIB/src/stm32f4xx_tim.c **** 
1460:./FWLIB/src/stm32f4xx_tim.c ****   /* Enable or Disable the Output Compare Fast Bit */
1461:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
1462:./FWLIB/src/stm32f4xx_tim.c **** 
1463:./FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR2 */
1464:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
1465:./FWLIB/src/stm32f4xx_tim.c **** }
1466:./FWLIB/src/stm32f4xx_tim.c **** 
1467:./FWLIB/src/stm32f4xx_tim.c **** /**
1468:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Clears or safeguards the OCREF1 signal on an external event
1469:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
1470:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_OCClear: new state of the Output Compare Clear Enable Bit.
1471:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1472:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCClear_Enable: TIM Output clear enable
1473:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCClear_Disable: TIM Output clear disable
1474:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1475:./FWLIB/src/stm32f4xx_tim.c ****   */
1476:./FWLIB/src/stm32f4xx_tim.c **** void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
1477:./FWLIB/src/stm32f4xx_tim.c **** {
1478:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr1 = 0;
1479:./FWLIB/src/stm32f4xx_tim.c **** 
1480:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1481:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST1_PERIPH(TIMx));
1482:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
1483:./FWLIB/src/stm32f4xx_tim.c **** 
1484:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
1485:./FWLIB/src/stm32f4xx_tim.c **** 
1486:./FWLIB/src/stm32f4xx_tim.c ****   /* Reset the OC1CE Bit */
1487:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1CE;
1488:./FWLIB/src/stm32f4xx_tim.c **** 
1489:./FWLIB/src/stm32f4xx_tim.c ****   /* Enable or Disable the Output Compare Clear Bit */
1490:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 |= TIM_OCClear;
1491:./FWLIB/src/stm32f4xx_tim.c **** 
1492:./FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR1 register */
1493:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
1494:./FWLIB/src/stm32f4xx_tim.c **** }
1495:./FWLIB/src/stm32f4xx_tim.c **** 
1496:./FWLIB/src/stm32f4xx_tim.c **** /**
1497:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Clears or safeguards the OCREF2 signal on an external event
1498:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
1499:./FWLIB/src/stm32f4xx_tim.c ****   *         peripheral.
1500:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_OCClear: new state of the Output Compare Clear Enable Bit.
1501:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1502:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCClear_Enable: TIM Output clear enable
1503:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCClear_Disable: TIM Output clear disable
1504:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1505:./FWLIB/src/stm32f4xx_tim.c ****   */
1506:./FWLIB/src/stm32f4xx_tim.c **** void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
1507:./FWLIB/src/stm32f4xx_tim.c **** {
1508:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr1 = 0;
1509:./FWLIB/src/stm32f4xx_tim.c **** 
1510:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1511:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
1512:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
1513:./FWLIB/src/stm32f4xx_tim.c **** 
1514:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
ARM GAS  /tmp/ccEzGk5p.s 			page 28


1515:./FWLIB/src/stm32f4xx_tim.c **** 
1516:./FWLIB/src/stm32f4xx_tim.c ****   /* Reset the OC2CE Bit */
1517:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;
1518:./FWLIB/src/stm32f4xx_tim.c **** 
1519:./FWLIB/src/stm32f4xx_tim.c ****   /* Enable or Disable the Output Compare Clear Bit */
1520:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
1521:./FWLIB/src/stm32f4xx_tim.c **** 
1522:./FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR1 register */
1523:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
1524:./FWLIB/src/stm32f4xx_tim.c **** }
1525:./FWLIB/src/stm32f4xx_tim.c **** 
1526:./FWLIB/src/stm32f4xx_tim.c **** /**
1527:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Clears or safeguards the OCREF3 signal on an external event
1528:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1529:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_OCClear: new state of the Output Compare Clear Enable Bit.
1530:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1531:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCClear_Enable: TIM Output clear enable
1532:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCClear_Disable: TIM Output clear disable
1533:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1534:./FWLIB/src/stm32f4xx_tim.c ****   */
1535:./FWLIB/src/stm32f4xx_tim.c **** void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
1536:./FWLIB/src/stm32f4xx_tim.c **** {
1537:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr2 = 0;
1538:./FWLIB/src/stm32f4xx_tim.c **** 
1539:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1540:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1541:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
1542:./FWLIB/src/stm32f4xx_tim.c **** 
1543:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
1544:./FWLIB/src/stm32f4xx_tim.c **** 
1545:./FWLIB/src/stm32f4xx_tim.c ****   /* Reset the OC3CE Bit */
1546:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3CE;
1547:./FWLIB/src/stm32f4xx_tim.c **** 
1548:./FWLIB/src/stm32f4xx_tim.c ****   /* Enable or Disable the Output Compare Clear Bit */
1549:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 |= TIM_OCClear;
1550:./FWLIB/src/stm32f4xx_tim.c **** 
1551:./FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR2 register */
1552:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
1553:./FWLIB/src/stm32f4xx_tim.c **** }
1554:./FWLIB/src/stm32f4xx_tim.c **** 
1555:./FWLIB/src/stm32f4xx_tim.c **** /**
1556:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Clears or safeguards the OCREF4 signal on an external event
1557:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1558:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_OCClear: new state of the Output Compare Clear Enable Bit.
1559:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1560:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCClear_Enable: TIM Output clear enable
1561:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCClear_Disable: TIM Output clear disable
1562:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1563:./FWLIB/src/stm32f4xx_tim.c ****   */
1564:./FWLIB/src/stm32f4xx_tim.c **** void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
1565:./FWLIB/src/stm32f4xx_tim.c **** {
1566:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr2 = 0;
1567:./FWLIB/src/stm32f4xx_tim.c **** 
1568:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1569:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1570:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
1571:./FWLIB/src/stm32f4xx_tim.c **** 
ARM GAS  /tmp/ccEzGk5p.s 			page 29


1572:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
1573:./FWLIB/src/stm32f4xx_tim.c **** 
1574:./FWLIB/src/stm32f4xx_tim.c ****   /* Reset the OC4CE Bit */
1575:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;
1576:./FWLIB/src/stm32f4xx_tim.c **** 
1577:./FWLIB/src/stm32f4xx_tim.c ****   /* Enable or Disable the Output Compare Clear Bit */
1578:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
1579:./FWLIB/src/stm32f4xx_tim.c **** 
1580:./FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR2 register */
1581:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
1582:./FWLIB/src/stm32f4xx_tim.c **** }
1583:./FWLIB/src/stm32f4xx_tim.c **** 
1584:./FWLIB/src/stm32f4xx_tim.c **** /**
1585:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx channel 1 polarity.
1586:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
1587:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_OCPolarity: specifies the OC1 Polarity
1588:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1589:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCPolarity_High: Output Compare active high
1590:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCPolarity_Low: Output Compare active low
1591:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1592:./FWLIB/src/stm32f4xx_tim.c ****   */
1593:./FWLIB/src/stm32f4xx_tim.c **** void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
1594:./FWLIB/src/stm32f4xx_tim.c **** {
1595:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccer = 0;
1596:./FWLIB/src/stm32f4xx_tim.c **** 
1597:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1598:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST1_PERIPH(TIMx));
1599:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
1600:./FWLIB/src/stm32f4xx_tim.c **** 
1601:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer = TIMx->CCER;
1602:./FWLIB/src/stm32f4xx_tim.c **** 
1603:./FWLIB/src/stm32f4xx_tim.c ****   /* Set or Reset the CC1P Bit */
1604:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer &= (uint16_t)(~TIM_CCER_CC1P);
1605:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer |= TIM_OCPolarity;
1606:./FWLIB/src/stm32f4xx_tim.c **** 
1607:./FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCER register */
1608:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER = tmpccer;
1609:./FWLIB/src/stm32f4xx_tim.c **** }
1610:./FWLIB/src/stm32f4xx_tim.c **** 
1611:./FWLIB/src/stm32f4xx_tim.c **** /**
1612:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx Channel 1N polarity.
1613:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 or 8 to select the TIM peripheral.
1614:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_OCNPolarity: specifies the OC1N Polarity
1615:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1616:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCNPolarity_High: Output Compare active high
1617:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCNPolarity_Low: Output Compare active low
1618:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1619:./FWLIB/src/stm32f4xx_tim.c ****   */
1620:./FWLIB/src/stm32f4xx_tim.c **** void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
1621:./FWLIB/src/stm32f4xx_tim.c **** {
1622:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccer = 0;
1623:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1624:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
1625:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
1626:./FWLIB/src/stm32f4xx_tim.c ****    
1627:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer = TIMx->CCER;
1628:./FWLIB/src/stm32f4xx_tim.c **** 
ARM GAS  /tmp/ccEzGk5p.s 			page 30


1629:./FWLIB/src/stm32f4xx_tim.c ****   /* Set or Reset the CC1NP Bit */
1630:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
1631:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer |= TIM_OCNPolarity;
1632:./FWLIB/src/stm32f4xx_tim.c **** 
1633:./FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCER register */
1634:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER = tmpccer;
1635:./FWLIB/src/stm32f4xx_tim.c **** }
1636:./FWLIB/src/stm32f4xx_tim.c **** 
1637:./FWLIB/src/stm32f4xx_tim.c **** /**
1638:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx channel 2 polarity.
1639:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
1640:./FWLIB/src/stm32f4xx_tim.c ****   *         peripheral.
1641:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_OCPolarity: specifies the OC2 Polarity
1642:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1643:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCPolarity_High: Output Compare active high
1644:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCPolarity_Low: Output Compare active low
1645:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1646:./FWLIB/src/stm32f4xx_tim.c ****   */
1647:./FWLIB/src/stm32f4xx_tim.c **** void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
1648:./FWLIB/src/stm32f4xx_tim.c **** {
1649:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccer = 0;
1650:./FWLIB/src/stm32f4xx_tim.c **** 
1651:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1652:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
1653:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
1654:./FWLIB/src/stm32f4xx_tim.c **** 
1655:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer = TIMx->CCER;
1656:./FWLIB/src/stm32f4xx_tim.c **** 
1657:./FWLIB/src/stm32f4xx_tim.c ****   /* Set or Reset the CC2P Bit */
1658:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer &= (uint16_t)(~TIM_CCER_CC2P);
1659:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
1660:./FWLIB/src/stm32f4xx_tim.c **** 
1661:./FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCER register */
1662:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER = tmpccer;
1663:./FWLIB/src/stm32f4xx_tim.c **** }
1664:./FWLIB/src/stm32f4xx_tim.c **** 
1665:./FWLIB/src/stm32f4xx_tim.c **** /**
1666:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx Channel 2N polarity.
1667:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 or 8 to select the TIM peripheral.
1668:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_OCNPolarity: specifies the OC2N Polarity
1669:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1670:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCNPolarity_High: Output Compare active high
1671:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCNPolarity_Low: Output Compare active low
1672:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1673:./FWLIB/src/stm32f4xx_tim.c ****   */
1674:./FWLIB/src/stm32f4xx_tim.c **** void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
1675:./FWLIB/src/stm32f4xx_tim.c **** {
1676:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccer = 0;
1677:./FWLIB/src/stm32f4xx_tim.c **** 
1678:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1679:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
1680:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
1681:./FWLIB/src/stm32f4xx_tim.c ****   
1682:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer = TIMx->CCER;
1683:./FWLIB/src/stm32f4xx_tim.c **** 
1684:./FWLIB/src/stm32f4xx_tim.c ****   /* Set or Reset the CC2NP Bit */
1685:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
ARM GAS  /tmp/ccEzGk5p.s 			page 31


1686:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
1687:./FWLIB/src/stm32f4xx_tim.c **** 
1688:./FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCER register */
1689:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER = tmpccer;
1690:./FWLIB/src/stm32f4xx_tim.c **** }
1691:./FWLIB/src/stm32f4xx_tim.c **** 
1692:./FWLIB/src/stm32f4xx_tim.c **** /**
1693:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx channel 3 polarity.
1694:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1695:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_OCPolarity: specifies the OC3 Polarity
1696:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1697:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCPolarity_High: Output Compare active high
1698:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCPolarity_Low: Output Compare active low
1699:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1700:./FWLIB/src/stm32f4xx_tim.c ****   */
1701:./FWLIB/src/stm32f4xx_tim.c **** void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
1702:./FWLIB/src/stm32f4xx_tim.c **** {
1703:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccer = 0;
1704:./FWLIB/src/stm32f4xx_tim.c **** 
1705:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1706:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1707:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
1708:./FWLIB/src/stm32f4xx_tim.c **** 
1709:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer = TIMx->CCER;
1710:./FWLIB/src/stm32f4xx_tim.c **** 
1711:./FWLIB/src/stm32f4xx_tim.c ****   /* Set or Reset the CC3P Bit */
1712:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer &= (uint16_t)~TIM_CCER_CC3P;
1713:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
1714:./FWLIB/src/stm32f4xx_tim.c **** 
1715:./FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCER register */
1716:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER = tmpccer;
1717:./FWLIB/src/stm32f4xx_tim.c **** }
1718:./FWLIB/src/stm32f4xx_tim.c **** 
1719:./FWLIB/src/stm32f4xx_tim.c **** /**
1720:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx Channel 3N polarity.
1721:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 or 8 to select the TIM peripheral.
1722:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_OCNPolarity: specifies the OC3N Polarity
1723:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1724:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCNPolarity_High: Output Compare active high
1725:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCNPolarity_Low: Output Compare active low
1726:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1727:./FWLIB/src/stm32f4xx_tim.c ****   */
1728:./FWLIB/src/stm32f4xx_tim.c **** void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
1729:./FWLIB/src/stm32f4xx_tim.c **** {
1730:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccer = 0;
1731:./FWLIB/src/stm32f4xx_tim.c ****  
1732:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1733:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
1734:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
1735:./FWLIB/src/stm32f4xx_tim.c ****     
1736:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer = TIMx->CCER;
1737:./FWLIB/src/stm32f4xx_tim.c **** 
1738:./FWLIB/src/stm32f4xx_tim.c ****   /* Set or Reset the CC3NP Bit */
1739:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
1740:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
1741:./FWLIB/src/stm32f4xx_tim.c **** 
1742:./FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCER register */
ARM GAS  /tmp/ccEzGk5p.s 			page 32


1743:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER = tmpccer;
1744:./FWLIB/src/stm32f4xx_tim.c **** }
1745:./FWLIB/src/stm32f4xx_tim.c **** 
1746:./FWLIB/src/stm32f4xx_tim.c **** /**
1747:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx channel 4 polarity.
1748:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1749:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_OCPolarity: specifies the OC4 Polarity
1750:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1751:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCPolarity_High: Output Compare active high
1752:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_OCPolarity_Low: Output Compare active low
1753:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1754:./FWLIB/src/stm32f4xx_tim.c ****   */
1755:./FWLIB/src/stm32f4xx_tim.c **** void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
1756:./FWLIB/src/stm32f4xx_tim.c **** {
1757:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccer = 0;
1758:./FWLIB/src/stm32f4xx_tim.c **** 
1759:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1760:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1761:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
1762:./FWLIB/src/stm32f4xx_tim.c **** 
1763:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer = TIMx->CCER;
1764:./FWLIB/src/stm32f4xx_tim.c **** 
1765:./FWLIB/src/stm32f4xx_tim.c ****   /* Set or Reset the CC4P Bit */
1766:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer &= (uint16_t)~TIM_CCER_CC4P;
1767:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
1768:./FWLIB/src/stm32f4xx_tim.c **** 
1769:./FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCER register */
1770:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER = tmpccer;
1771:./FWLIB/src/stm32f4xx_tim.c **** }
1772:./FWLIB/src/stm32f4xx_tim.c **** 
1773:./FWLIB/src/stm32f4xx_tim.c **** /**
1774:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Enables or disables the TIM Capture Compare Channel x.
1775:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
1776:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_Channel: specifies the TIM Channel
1777:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1778:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_Channel_1: TIM Channel 1
1779:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_Channel_2: TIM Channel 2
1780:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_Channel_3: TIM Channel 3
1781:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_Channel_4: TIM Channel 4
1782:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
1783:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
1784:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1785:./FWLIB/src/stm32f4xx_tim.c ****   */
1786:./FWLIB/src/stm32f4xx_tim.c **** void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
1787:./FWLIB/src/stm32f4xx_tim.c **** {
1788:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmp = 0;
1789:./FWLIB/src/stm32f4xx_tim.c **** 
1790:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1791:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
1792:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_CHANNEL(TIM_Channel));
1793:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_CCX(TIM_CCx));
1794:./FWLIB/src/stm32f4xx_tim.c **** 
1795:./FWLIB/src/stm32f4xx_tim.c ****   tmp = CCER_CCE_SET << TIM_Channel;
1796:./FWLIB/src/stm32f4xx_tim.c **** 
1797:./FWLIB/src/stm32f4xx_tim.c ****   /* Reset the CCxE Bit */
1798:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER &= (uint16_t)~ tmp;
1799:./FWLIB/src/stm32f4xx_tim.c **** 
ARM GAS  /tmp/ccEzGk5p.s 			page 33


1800:./FWLIB/src/stm32f4xx_tim.c ****   /* Set or reset the CCxE Bit */ 
1801:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
1802:./FWLIB/src/stm32f4xx_tim.c **** }
1803:./FWLIB/src/stm32f4xx_tim.c **** 
1804:./FWLIB/src/stm32f4xx_tim.c **** /**
1805:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Enables or disables the TIM Capture Compare Channel xN.
1806:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 or 8 to select the TIM peripheral.
1807:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_Channel: specifies the TIM Channel
1808:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1809:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_Channel_1: TIM Channel 1
1810:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_Channel_2: TIM Channel 2
1811:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_Channel_3: TIM Channel 3
1812:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
1813:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
1814:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1815:./FWLIB/src/stm32f4xx_tim.c ****   */
1816:./FWLIB/src/stm32f4xx_tim.c **** void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
1817:./FWLIB/src/stm32f4xx_tim.c **** {
1818:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmp = 0;
1819:./FWLIB/src/stm32f4xx_tim.c **** 
1820:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1821:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
1822:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
1823:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_CCXN(TIM_CCxN));
1824:./FWLIB/src/stm32f4xx_tim.c **** 
1825:./FWLIB/src/stm32f4xx_tim.c ****   tmp = CCER_CCNE_SET << TIM_Channel;
1826:./FWLIB/src/stm32f4xx_tim.c **** 
1827:./FWLIB/src/stm32f4xx_tim.c ****   /* Reset the CCxNE Bit */
1828:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER &= (uint16_t) ~tmp;
1829:./FWLIB/src/stm32f4xx_tim.c **** 
1830:./FWLIB/src/stm32f4xx_tim.c ****   /* Set or reset the CCxNE Bit */ 
1831:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
1832:./FWLIB/src/stm32f4xx_tim.c **** }
1833:./FWLIB/src/stm32f4xx_tim.c **** /**
1834:./FWLIB/src/stm32f4xx_tim.c ****   * @}
1835:./FWLIB/src/stm32f4xx_tim.c ****   */
1836:./FWLIB/src/stm32f4xx_tim.c **** 
1837:./FWLIB/src/stm32f4xx_tim.c **** /** @defgroup TIM_Group3 Input Capture management functions
1838:./FWLIB/src/stm32f4xx_tim.c ****  *  @brief    Input Capture management functions 
1839:./FWLIB/src/stm32f4xx_tim.c ****  *
1840:./FWLIB/src/stm32f4xx_tim.c **** @verbatim   
1841:./FWLIB/src/stm32f4xx_tim.c ****  ===============================================================================
1842:./FWLIB/src/stm32f4xx_tim.c ****                   ##### Input Capture management functions #####
1843:./FWLIB/src/stm32f4xx_tim.c ****  ===============================================================================  
1844:./FWLIB/src/stm32f4xx_tim.c ****          
1845:./FWLIB/src/stm32f4xx_tim.c ****             ##### TIM Driver: how to use it in Input Capture Mode #####
1846:./FWLIB/src/stm32f4xx_tim.c ****  ===============================================================================
1847:./FWLIB/src/stm32f4xx_tim.c ****     [..]    
1848:./FWLIB/src/stm32f4xx_tim.c ****     To use the Timer in Input Capture mode, the following steps are mandatory:
1849:./FWLIB/src/stm32f4xx_tim.c ****        
1850:./FWLIB/src/stm32f4xx_tim.c ****       (#) Enable TIM clock using RCC_APBxPeriphClockCmd(RCC_APBxPeriph_TIMx, ENABLE) 
1851:./FWLIB/src/stm32f4xx_tim.c ****           function
1852:./FWLIB/src/stm32f4xx_tim.c ****        
1853:./FWLIB/src/stm32f4xx_tim.c ****       (#) Configure the TIM pins by configuring the corresponding GPIO pins
1854:./FWLIB/src/stm32f4xx_tim.c ****        
1855:./FWLIB/src/stm32f4xx_tim.c ****       (#) Configure the Time base unit as described in the first part of this driver,
1856:./FWLIB/src/stm32f4xx_tim.c ****           if needed, else the Timer will run with the default configuration:
ARM GAS  /tmp/ccEzGk5p.s 			page 34


1857:./FWLIB/src/stm32f4xx_tim.c ****         (++) Autoreload value = 0xFFFF
1858:./FWLIB/src/stm32f4xx_tim.c ****         (++) Prescaler value = 0x0000
1859:./FWLIB/src/stm32f4xx_tim.c ****         (++) Counter mode = Up counting
1860:./FWLIB/src/stm32f4xx_tim.c ****         (++) Clock Division = TIM_CKD_DIV1
1861:./FWLIB/src/stm32f4xx_tim.c ****           
1862:./FWLIB/src/stm32f4xx_tim.c ****       (#) Fill the TIM_ICInitStruct with the desired parameters including:
1863:./FWLIB/src/stm32f4xx_tim.c ****         (++) TIM Channel: TIM_Channel
1864:./FWLIB/src/stm32f4xx_tim.c ****         (++) TIM Input Capture polarity: TIM_ICPolarity
1865:./FWLIB/src/stm32f4xx_tim.c ****         (++) TIM Input Capture selection: TIM_ICSelection
1866:./FWLIB/src/stm32f4xx_tim.c ****         (++) TIM Input Capture Prescaler: TIM_ICPrescaler
1867:./FWLIB/src/stm32f4xx_tim.c ****         (++) TIM Input CApture filter value: TIM_ICFilter
1868:./FWLIB/src/stm32f4xx_tim.c ****        
1869:./FWLIB/src/stm32f4xx_tim.c ****       (#) Call TIM_ICInit(TIMx, &TIM_ICInitStruct) to configure the desired channel 
1870:./FWLIB/src/stm32f4xx_tim.c ****           with the corresponding configuration and to measure only frequency 
1871:./FWLIB/src/stm32f4xx_tim.c ****           or duty cycle of the input signal, or, Call TIM_PWMIConfig(TIMx, &TIM_ICInitStruct) 
1872:./FWLIB/src/stm32f4xx_tim.c ****           to configure the desired channels with the corresponding configuration 
1873:./FWLIB/src/stm32f4xx_tim.c ****           and to measure the frequency and the duty cycle of the input signal
1874:./FWLIB/src/stm32f4xx_tim.c ****           
1875:./FWLIB/src/stm32f4xx_tim.c ****       (#) Enable the NVIC or the DMA to read the measured frequency. 
1876:./FWLIB/src/stm32f4xx_tim.c ****           
1877:./FWLIB/src/stm32f4xx_tim.c ****       (#) Enable the corresponding interrupt (or DMA request) to read the Captured 
1878:./FWLIB/src/stm32f4xx_tim.c ****           value, using the function TIM_ITConfig(TIMx, TIM_IT_CCx) 
1879:./FWLIB/src/stm32f4xx_tim.c ****           (or TIM_DMA_Cmd(TIMx, TIM_DMA_CCx)) 
1880:./FWLIB/src/stm32f4xx_tim.c ****        
1881:./FWLIB/src/stm32f4xx_tim.c ****       (#) Call the TIM_Cmd(ENABLE) function to enable the TIM counter.
1882:./FWLIB/src/stm32f4xx_tim.c ****        
1883:./FWLIB/src/stm32f4xx_tim.c ****       (#) Use TIM_GetCapturex(TIMx); to read the captured value.
1884:./FWLIB/src/stm32f4xx_tim.c ****        
1885:./FWLIB/src/stm32f4xx_tim.c ****       -@- All other functions can be used separately to modify, if needed,
1886:./FWLIB/src/stm32f4xx_tim.c ****           a specific feature of the Timer. 
1887:./FWLIB/src/stm32f4xx_tim.c **** 
1888:./FWLIB/src/stm32f4xx_tim.c **** @endverbatim
1889:./FWLIB/src/stm32f4xx_tim.c ****   * @{
1890:./FWLIB/src/stm32f4xx_tim.c ****   */
1891:./FWLIB/src/stm32f4xx_tim.c **** 
1892:./FWLIB/src/stm32f4xx_tim.c **** /**
1893:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Initializes the TIM peripheral according to the specified parameters
1894:./FWLIB/src/stm32f4xx_tim.c ****   *         in the TIM_ICInitStruct.
1895:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
1896:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
1897:./FWLIB/src/stm32f4xx_tim.c ****   *         the configuration information for the specified TIM peripheral.
1898:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1899:./FWLIB/src/stm32f4xx_tim.c ****   */
1900:./FWLIB/src/stm32f4xx_tim.c **** void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
1901:./FWLIB/src/stm32f4xx_tim.c **** {
1902:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1903:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST1_PERIPH(TIMx));
1904:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
1905:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
1906:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
1907:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
1908:./FWLIB/src/stm32f4xx_tim.c ****   
1909:./FWLIB/src/stm32f4xx_tim.c ****   if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
1910:./FWLIB/src/stm32f4xx_tim.c ****   {
1911:./FWLIB/src/stm32f4xx_tim.c ****     /* TI1 Configuration */
1912:./FWLIB/src/stm32f4xx_tim.c ****     TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
1913:./FWLIB/src/stm32f4xx_tim.c ****                TIM_ICInitStruct->TIM_ICSelection,
ARM GAS  /tmp/ccEzGk5p.s 			page 35


1914:./FWLIB/src/stm32f4xx_tim.c ****                TIM_ICInitStruct->TIM_ICFilter);
1915:./FWLIB/src/stm32f4xx_tim.c ****     /* Set the Input Capture Prescaler value */
1916:./FWLIB/src/stm32f4xx_tim.c ****     TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
1917:./FWLIB/src/stm32f4xx_tim.c ****   }
1918:./FWLIB/src/stm32f4xx_tim.c ****   else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
1919:./FWLIB/src/stm32f4xx_tim.c ****   {
1920:./FWLIB/src/stm32f4xx_tim.c ****     /* TI2 Configuration */
1921:./FWLIB/src/stm32f4xx_tim.c ****     assert_param(IS_TIM_LIST2_PERIPH(TIMx));
1922:./FWLIB/src/stm32f4xx_tim.c ****     TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
1923:./FWLIB/src/stm32f4xx_tim.c ****                TIM_ICInitStruct->TIM_ICSelection,
1924:./FWLIB/src/stm32f4xx_tim.c ****                TIM_ICInitStruct->TIM_ICFilter);
1925:./FWLIB/src/stm32f4xx_tim.c ****     /* Set the Input Capture Prescaler value */
1926:./FWLIB/src/stm32f4xx_tim.c ****     TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
1927:./FWLIB/src/stm32f4xx_tim.c ****   }
1928:./FWLIB/src/stm32f4xx_tim.c ****   else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
1929:./FWLIB/src/stm32f4xx_tim.c ****   {
1930:./FWLIB/src/stm32f4xx_tim.c ****     /* TI3 Configuration */
1931:./FWLIB/src/stm32f4xx_tim.c ****     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1932:./FWLIB/src/stm32f4xx_tim.c ****     TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
1933:./FWLIB/src/stm32f4xx_tim.c ****                TIM_ICInitStruct->TIM_ICSelection,
1934:./FWLIB/src/stm32f4xx_tim.c ****                TIM_ICInitStruct->TIM_ICFilter);
1935:./FWLIB/src/stm32f4xx_tim.c ****     /* Set the Input Capture Prescaler value */
1936:./FWLIB/src/stm32f4xx_tim.c ****     TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
1937:./FWLIB/src/stm32f4xx_tim.c ****   }
1938:./FWLIB/src/stm32f4xx_tim.c ****   else
1939:./FWLIB/src/stm32f4xx_tim.c ****   {
1940:./FWLIB/src/stm32f4xx_tim.c ****     /* TI4 Configuration */
1941:./FWLIB/src/stm32f4xx_tim.c ****     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1942:./FWLIB/src/stm32f4xx_tim.c ****     TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
1943:./FWLIB/src/stm32f4xx_tim.c ****                TIM_ICInitStruct->TIM_ICSelection,
1944:./FWLIB/src/stm32f4xx_tim.c ****                TIM_ICInitStruct->TIM_ICFilter);
1945:./FWLIB/src/stm32f4xx_tim.c ****     /* Set the Input Capture Prescaler value */
1946:./FWLIB/src/stm32f4xx_tim.c ****     TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
1947:./FWLIB/src/stm32f4xx_tim.c ****   }
1948:./FWLIB/src/stm32f4xx_tim.c **** }
1949:./FWLIB/src/stm32f4xx_tim.c **** 
1950:./FWLIB/src/stm32f4xx_tim.c **** /**
1951:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Fills each TIM_ICInitStruct member with its default value.
1952:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
1953:./FWLIB/src/stm32f4xx_tim.c ****   *         be initialized.
1954:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1955:./FWLIB/src/stm32f4xx_tim.c ****   */
1956:./FWLIB/src/stm32f4xx_tim.c **** void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
1957:./FWLIB/src/stm32f4xx_tim.c **** {
1958:./FWLIB/src/stm32f4xx_tim.c ****   /* Set the default configuration */
1959:./FWLIB/src/stm32f4xx_tim.c ****   TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
1960:./FWLIB/src/stm32f4xx_tim.c ****   TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
1961:./FWLIB/src/stm32f4xx_tim.c ****   TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
1962:./FWLIB/src/stm32f4xx_tim.c ****   TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
1963:./FWLIB/src/stm32f4xx_tim.c ****   TIM_ICInitStruct->TIM_ICFilter = 0x00;
1964:./FWLIB/src/stm32f4xx_tim.c **** }
1965:./FWLIB/src/stm32f4xx_tim.c **** 
1966:./FWLIB/src/stm32f4xx_tim.c **** /**
1967:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configures the TIM peripheral according to the specified parameters
1968:./FWLIB/src/stm32f4xx_tim.c ****   *         in the TIM_ICInitStruct to measure an external PWM signal.
1969:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5,8, 9 or 12 to select the TIM 
1970:./FWLIB/src/stm32f4xx_tim.c ****   *         peripheral.
ARM GAS  /tmp/ccEzGk5p.s 			page 36


1971:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
1972:./FWLIB/src/stm32f4xx_tim.c ****   *         the configuration information for the specified TIM peripheral.
1973:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
1974:./FWLIB/src/stm32f4xx_tim.c ****   */
1975:./FWLIB/src/stm32f4xx_tim.c **** void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
1976:./FWLIB/src/stm32f4xx_tim.c **** {
1977:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
1978:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
1979:./FWLIB/src/stm32f4xx_tim.c **** 
1980:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
1981:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
1982:./FWLIB/src/stm32f4xx_tim.c **** 
1983:./FWLIB/src/stm32f4xx_tim.c ****   /* Select the Opposite Input Polarity */
1984:./FWLIB/src/stm32f4xx_tim.c ****   if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
1985:./FWLIB/src/stm32f4xx_tim.c ****   {
1986:./FWLIB/src/stm32f4xx_tim.c ****     icoppositepolarity = TIM_ICPolarity_Falling;
1987:./FWLIB/src/stm32f4xx_tim.c ****   }
1988:./FWLIB/src/stm32f4xx_tim.c ****   else
1989:./FWLIB/src/stm32f4xx_tim.c ****   {
1990:./FWLIB/src/stm32f4xx_tim.c ****     icoppositepolarity = TIM_ICPolarity_Rising;
1991:./FWLIB/src/stm32f4xx_tim.c ****   }
1992:./FWLIB/src/stm32f4xx_tim.c ****   /* Select the Opposite Input */
1993:./FWLIB/src/stm32f4xx_tim.c ****   if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
1994:./FWLIB/src/stm32f4xx_tim.c ****   {
1995:./FWLIB/src/stm32f4xx_tim.c ****     icoppositeselection = TIM_ICSelection_IndirectTI;
1996:./FWLIB/src/stm32f4xx_tim.c ****   }
1997:./FWLIB/src/stm32f4xx_tim.c ****   else
1998:./FWLIB/src/stm32f4xx_tim.c ****   {
1999:./FWLIB/src/stm32f4xx_tim.c ****     icoppositeselection = TIM_ICSelection_DirectTI;
2000:./FWLIB/src/stm32f4xx_tim.c ****   }
2001:./FWLIB/src/stm32f4xx_tim.c ****   if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
2002:./FWLIB/src/stm32f4xx_tim.c ****   {
2003:./FWLIB/src/stm32f4xx_tim.c ****     /* TI1 Configuration */
2004:./FWLIB/src/stm32f4xx_tim.c ****     TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
2005:./FWLIB/src/stm32f4xx_tim.c ****                TIM_ICInitStruct->TIM_ICFilter);
2006:./FWLIB/src/stm32f4xx_tim.c ****     /* Set the Input Capture Prescaler value */
2007:./FWLIB/src/stm32f4xx_tim.c ****     TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
2008:./FWLIB/src/stm32f4xx_tim.c ****     /* TI2 Configuration */
2009:./FWLIB/src/stm32f4xx_tim.c ****     TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
2010:./FWLIB/src/stm32f4xx_tim.c ****     /* Set the Input Capture Prescaler value */
2011:./FWLIB/src/stm32f4xx_tim.c ****     TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
2012:./FWLIB/src/stm32f4xx_tim.c ****   }
2013:./FWLIB/src/stm32f4xx_tim.c ****   else
2014:./FWLIB/src/stm32f4xx_tim.c ****   { 
2015:./FWLIB/src/stm32f4xx_tim.c ****     /* TI2 Configuration */
2016:./FWLIB/src/stm32f4xx_tim.c ****     TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
2017:./FWLIB/src/stm32f4xx_tim.c ****                TIM_ICInitStruct->TIM_ICFilter);
2018:./FWLIB/src/stm32f4xx_tim.c ****     /* Set the Input Capture Prescaler value */
2019:./FWLIB/src/stm32f4xx_tim.c ****     TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
2020:./FWLIB/src/stm32f4xx_tim.c ****     /* TI1 Configuration */
2021:./FWLIB/src/stm32f4xx_tim.c ****     TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
2022:./FWLIB/src/stm32f4xx_tim.c ****     /* Set the Input Capture Prescaler value */
2023:./FWLIB/src/stm32f4xx_tim.c ****     TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
2024:./FWLIB/src/stm32f4xx_tim.c ****   }
2025:./FWLIB/src/stm32f4xx_tim.c **** }
2026:./FWLIB/src/stm32f4xx_tim.c **** 
2027:./FWLIB/src/stm32f4xx_tim.c **** /**
ARM GAS  /tmp/ccEzGk5p.s 			page 37


2028:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Gets the TIMx Input Capture 1 value.
2029:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
2030:./FWLIB/src/stm32f4xx_tim.c ****   * @retval Capture Compare 1 Register value.
2031:./FWLIB/src/stm32f4xx_tim.c ****   */
2032:./FWLIB/src/stm32f4xx_tim.c **** uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)
2033:./FWLIB/src/stm32f4xx_tim.c **** {
2034:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2035:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST1_PERIPH(TIMx));
2036:./FWLIB/src/stm32f4xx_tim.c **** 
2037:./FWLIB/src/stm32f4xx_tim.c ****   /* Get the Capture 1 Register value */
2038:./FWLIB/src/stm32f4xx_tim.c ****   return TIMx->CCR1;
2039:./FWLIB/src/stm32f4xx_tim.c **** }
2040:./FWLIB/src/stm32f4xx_tim.c **** 
2041:./FWLIB/src/stm32f4xx_tim.c **** /**
2042:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Gets the TIMx Input Capture 2 value.
2043:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
2044:./FWLIB/src/stm32f4xx_tim.c ****   *         peripheral.
2045:./FWLIB/src/stm32f4xx_tim.c ****   * @retval Capture Compare 2 Register value.
2046:./FWLIB/src/stm32f4xx_tim.c ****   */
2047:./FWLIB/src/stm32f4xx_tim.c **** uint32_t TIM_GetCapture2(TIM_TypeDef* TIMx)
2048:./FWLIB/src/stm32f4xx_tim.c **** {
2049:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2050:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
2051:./FWLIB/src/stm32f4xx_tim.c **** 
2052:./FWLIB/src/stm32f4xx_tim.c ****   /* Get the Capture 2 Register value */
2053:./FWLIB/src/stm32f4xx_tim.c ****   return TIMx->CCR2;
2054:./FWLIB/src/stm32f4xx_tim.c **** }
2055:./FWLIB/src/stm32f4xx_tim.c **** 
2056:./FWLIB/src/stm32f4xx_tim.c **** /**
2057:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Gets the TIMx Input Capture 3 value.
2058:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
2059:./FWLIB/src/stm32f4xx_tim.c ****   * @retval Capture Compare 3 Register value.
2060:./FWLIB/src/stm32f4xx_tim.c ****   */
2061:./FWLIB/src/stm32f4xx_tim.c **** uint32_t TIM_GetCapture3(TIM_TypeDef* TIMx)
2062:./FWLIB/src/stm32f4xx_tim.c **** {
2063:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2064:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
2065:./FWLIB/src/stm32f4xx_tim.c **** 
2066:./FWLIB/src/stm32f4xx_tim.c ****   /* Get the Capture 3 Register value */
2067:./FWLIB/src/stm32f4xx_tim.c ****   return TIMx->CCR3;
2068:./FWLIB/src/stm32f4xx_tim.c **** }
2069:./FWLIB/src/stm32f4xx_tim.c **** 
2070:./FWLIB/src/stm32f4xx_tim.c **** /**
2071:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Gets the TIMx Input Capture 4 value.
2072:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
2073:./FWLIB/src/stm32f4xx_tim.c ****   * @retval Capture Compare 4 Register value.
2074:./FWLIB/src/stm32f4xx_tim.c ****   */
2075:./FWLIB/src/stm32f4xx_tim.c **** uint32_t TIM_GetCapture4(TIM_TypeDef* TIMx)
2076:./FWLIB/src/stm32f4xx_tim.c **** {
2077:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2078:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
2079:./FWLIB/src/stm32f4xx_tim.c **** 
2080:./FWLIB/src/stm32f4xx_tim.c ****   /* Get the Capture 4 Register value */
2081:./FWLIB/src/stm32f4xx_tim.c ****   return TIMx->CCR4;
2082:./FWLIB/src/stm32f4xx_tim.c **** }
2083:./FWLIB/src/stm32f4xx_tim.c **** 
2084:./FWLIB/src/stm32f4xx_tim.c **** /**
ARM GAS  /tmp/ccEzGk5p.s 			page 38


2085:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Sets the TIMx Input Capture 1 prescaler.
2086:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
2087:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ICPSC: specifies the Input Capture1 prescaler new value.
2088:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
2089:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPSC_DIV1: no prescaler
2090:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPSC_DIV2: capture is done once every 2 events
2091:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
2092:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
2093:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
2094:./FWLIB/src/stm32f4xx_tim.c ****   */
2095:./FWLIB/src/stm32f4xx_tim.c **** void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
2096:./FWLIB/src/stm32f4xx_tim.c **** {
2097:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2098:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST1_PERIPH(TIMx));
2099:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
2100:./FWLIB/src/stm32f4xx_tim.c **** 
2101:./FWLIB/src/stm32f4xx_tim.c ****   /* Reset the IC1PSC Bits */
2102:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
2103:./FWLIB/src/stm32f4xx_tim.c **** 
2104:./FWLIB/src/stm32f4xx_tim.c ****   /* Set the IC1PSC value */
2105:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR1 |= TIM_ICPSC;
2106:./FWLIB/src/stm32f4xx_tim.c **** }
2107:./FWLIB/src/stm32f4xx_tim.c **** 
2108:./FWLIB/src/stm32f4xx_tim.c **** /**
2109:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Sets the TIMx Input Capture 2 prescaler.
2110:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
2111:./FWLIB/src/stm32f4xx_tim.c ****   *         peripheral.
2112:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ICPSC: specifies the Input Capture2 prescaler new value.
2113:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
2114:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPSC_DIV1: no prescaler
2115:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPSC_DIV2: capture is done once every 2 events
2116:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
2117:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
2118:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
2119:./FWLIB/src/stm32f4xx_tim.c ****   */
2120:./FWLIB/src/stm32f4xx_tim.c **** void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
2121:./FWLIB/src/stm32f4xx_tim.c **** {
2122:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2123:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
2124:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
2125:./FWLIB/src/stm32f4xx_tim.c **** 
2126:./FWLIB/src/stm32f4xx_tim.c ****   /* Reset the IC2PSC Bits */
2127:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
2128:./FWLIB/src/stm32f4xx_tim.c **** 
2129:./FWLIB/src/stm32f4xx_tim.c ****   /* Set the IC2PSC value */
2130:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
2131:./FWLIB/src/stm32f4xx_tim.c **** }
2132:./FWLIB/src/stm32f4xx_tim.c **** 
2133:./FWLIB/src/stm32f4xx_tim.c **** /**
2134:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Sets the TIMx Input Capture 3 prescaler.
2135:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
2136:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ICPSC: specifies the Input Capture3 prescaler new value.
2137:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
2138:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPSC_DIV1: no prescaler
2139:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPSC_DIV2: capture is done once every 2 events
2140:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
2141:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
ARM GAS  /tmp/ccEzGk5p.s 			page 39


2142:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
2143:./FWLIB/src/stm32f4xx_tim.c ****   */
2144:./FWLIB/src/stm32f4xx_tim.c **** void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
2145:./FWLIB/src/stm32f4xx_tim.c **** {
2146:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2147:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
2148:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
2149:./FWLIB/src/stm32f4xx_tim.c **** 
2150:./FWLIB/src/stm32f4xx_tim.c ****   /* Reset the IC3PSC Bits */
2151:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
2152:./FWLIB/src/stm32f4xx_tim.c **** 
2153:./FWLIB/src/stm32f4xx_tim.c ****   /* Set the IC3PSC value */
2154:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR2 |= TIM_ICPSC;
2155:./FWLIB/src/stm32f4xx_tim.c **** }
2156:./FWLIB/src/stm32f4xx_tim.c **** 
2157:./FWLIB/src/stm32f4xx_tim.c **** /**
2158:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Sets the TIMx Input Capture 4 prescaler.
2159:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
2160:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ICPSC: specifies the Input Capture4 prescaler new value.
2161:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
2162:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPSC_DIV1: no prescaler
2163:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPSC_DIV2: capture is done once every 2 events
2164:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
2165:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
2166:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
2167:./FWLIB/src/stm32f4xx_tim.c ****   */
2168:./FWLIB/src/stm32f4xx_tim.c **** void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
2169:./FWLIB/src/stm32f4xx_tim.c **** {  
2170:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2171:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
2172:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
2173:./FWLIB/src/stm32f4xx_tim.c **** 
2174:./FWLIB/src/stm32f4xx_tim.c ****   /* Reset the IC4PSC Bits */
2175:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
2176:./FWLIB/src/stm32f4xx_tim.c **** 
2177:./FWLIB/src/stm32f4xx_tim.c ****   /* Set the IC4PSC value */
2178:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
2179:./FWLIB/src/stm32f4xx_tim.c **** }
2180:./FWLIB/src/stm32f4xx_tim.c **** /**
2181:./FWLIB/src/stm32f4xx_tim.c ****   * @}
2182:./FWLIB/src/stm32f4xx_tim.c ****   */
2183:./FWLIB/src/stm32f4xx_tim.c **** 
2184:./FWLIB/src/stm32f4xx_tim.c **** /** @defgroup TIM_Group4 Advanced-control timers (TIM1 and TIM8) specific features
2185:./FWLIB/src/stm32f4xx_tim.c ****  *  @brief   Advanced-control timers (TIM1 and TIM8) specific features
2186:./FWLIB/src/stm32f4xx_tim.c ****  *
2187:./FWLIB/src/stm32f4xx_tim.c **** @verbatim   
2188:./FWLIB/src/stm32f4xx_tim.c ****  ===============================================================================
2189:./FWLIB/src/stm32f4xx_tim.c ****       ##### Advanced-control timers (TIM1 and TIM8) specific features #####
2190:./FWLIB/src/stm32f4xx_tim.c ****  ===============================================================================  
2191:./FWLIB/src/stm32f4xx_tim.c ****         
2192:./FWLIB/src/stm32f4xx_tim.c ****              ##### TIM Driver: how to use the Break feature #####
2193:./FWLIB/src/stm32f4xx_tim.c ****  ===============================================================================
2194:./FWLIB/src/stm32f4xx_tim.c ****     [..] 
2195:./FWLIB/src/stm32f4xx_tim.c ****     After configuring the Timer channel(s) in the appropriate Output Compare mode: 
2196:./FWLIB/src/stm32f4xx_tim.c ****                          
2197:./FWLIB/src/stm32f4xx_tim.c ****       (#) Fill the TIM_BDTRInitStruct with the desired parameters for the Timer
2198:./FWLIB/src/stm32f4xx_tim.c ****           Break Polarity, dead time, Lock level, the OSSI/OSSR State and the 
ARM GAS  /tmp/ccEzGk5p.s 			page 40


2199:./FWLIB/src/stm32f4xx_tim.c ****           AOE(automatic output enable).
2200:./FWLIB/src/stm32f4xx_tim.c ****                
2201:./FWLIB/src/stm32f4xx_tim.c ****       (#) Call TIM_BDTRConfig(TIMx, &TIM_BDTRInitStruct) to configure the Timer
2202:./FWLIB/src/stm32f4xx_tim.c ****           
2203:./FWLIB/src/stm32f4xx_tim.c ****       (#) Enable the Main Output using TIM_CtrlPWMOutputs(TIM1, ENABLE) 
2204:./FWLIB/src/stm32f4xx_tim.c ****           
2205:./FWLIB/src/stm32f4xx_tim.c ****       (#) Once the break even occurs, the Timer's output signals are put in reset
2206:./FWLIB/src/stm32f4xx_tim.c ****           state or in a known state (according to the configuration made in
2207:./FWLIB/src/stm32f4xx_tim.c ****           TIM_BDTRConfig() function).
2208:./FWLIB/src/stm32f4xx_tim.c **** 
2209:./FWLIB/src/stm32f4xx_tim.c **** @endverbatim
2210:./FWLIB/src/stm32f4xx_tim.c ****   * @{
2211:./FWLIB/src/stm32f4xx_tim.c ****   */
2212:./FWLIB/src/stm32f4xx_tim.c **** 
2213:./FWLIB/src/stm32f4xx_tim.c **** /**
2214:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configures the Break feature, dead time, Lock level, OSSI/OSSR State
2215:./FWLIB/src/stm32f4xx_tim.c ****   *         and the AOE(automatic output enable).
2216:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1 or 8 to select the TIM 
2217:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
2218:./FWLIB/src/stm32f4xx_tim.c ****   *         contains the BDTR Register configuration  information for the TIM peripheral.
2219:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
2220:./FWLIB/src/stm32f4xx_tim.c ****   */
2221:./FWLIB/src/stm32f4xx_tim.c **** void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
2222:./FWLIB/src/stm32f4xx_tim.c **** {
2223:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2224:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
2225:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OSSR_STATE(TIM_BDTRInitStruct->TIM_OSSRState));
2226:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OSSI_STATE(TIM_BDTRInitStruct->TIM_OSSIState));
2227:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LOCK_LEVEL(TIM_BDTRInitStruct->TIM_LOCKLevel));
2228:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
2229:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
2230:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
2231:./FWLIB/src/stm32f4xx_tim.c **** 
2232:./FWLIB/src/stm32f4xx_tim.c ****   /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
2233:./FWLIB/src/stm32f4xx_tim.c ****      the OSSI State, the dead time value and the Automatic Output Enable Bit */
2234:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
2235:./FWLIB/src/stm32f4xx_tim.c ****              TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
2236:./FWLIB/src/stm32f4xx_tim.c ****              TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
2237:./FWLIB/src/stm32f4xx_tim.c ****              TIM_BDTRInitStruct->TIM_AutomaticOutput;
2238:./FWLIB/src/stm32f4xx_tim.c **** }
2239:./FWLIB/src/stm32f4xx_tim.c **** 
2240:./FWLIB/src/stm32f4xx_tim.c **** /**
2241:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Fills each TIM_BDTRInitStruct member with its default value.
2242:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
2243:./FWLIB/src/stm32f4xx_tim.c ****   *         will be initialized.
2244:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
2245:./FWLIB/src/stm32f4xx_tim.c ****   */
2246:./FWLIB/src/stm32f4xx_tim.c **** void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
2247:./FWLIB/src/stm32f4xx_tim.c **** {
2248:./FWLIB/src/stm32f4xx_tim.c ****   /* Set the default configuration */
2249:./FWLIB/src/stm32f4xx_tim.c ****   TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
2250:./FWLIB/src/stm32f4xx_tim.c ****   TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
2251:./FWLIB/src/stm32f4xx_tim.c ****   TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
2252:./FWLIB/src/stm32f4xx_tim.c ****   TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
2253:./FWLIB/src/stm32f4xx_tim.c ****   TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
2254:./FWLIB/src/stm32f4xx_tim.c ****   TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
2255:./FWLIB/src/stm32f4xx_tim.c ****   TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
ARM GAS  /tmp/ccEzGk5p.s 			page 41


2256:./FWLIB/src/stm32f4xx_tim.c **** }
2257:./FWLIB/src/stm32f4xx_tim.c **** 
2258:./FWLIB/src/stm32f4xx_tim.c **** /**
2259:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Enables or disables the TIM peripheral Main Outputs.
2260:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 or 8 to select the TIMx peripheral.
2261:./FWLIB/src/stm32f4xx_tim.c ****   * @param  NewState: new state of the TIM peripheral Main Outputs.
2262:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
2263:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
2264:./FWLIB/src/stm32f4xx_tim.c ****   */
2265:./FWLIB/src/stm32f4xx_tim.c **** void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
2266:./FWLIB/src/stm32f4xx_tim.c **** {
2267:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2268:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
2269:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2270:./FWLIB/src/stm32f4xx_tim.c **** 
2271:./FWLIB/src/stm32f4xx_tim.c ****   if (NewState != DISABLE)
2272:./FWLIB/src/stm32f4xx_tim.c ****   {
2273:./FWLIB/src/stm32f4xx_tim.c ****     /* Enable the TIM Main Output */
2274:./FWLIB/src/stm32f4xx_tim.c ****     TIMx->BDTR |= TIM_BDTR_MOE;
2275:./FWLIB/src/stm32f4xx_tim.c ****   }
2276:./FWLIB/src/stm32f4xx_tim.c ****   else
2277:./FWLIB/src/stm32f4xx_tim.c ****   {
2278:./FWLIB/src/stm32f4xx_tim.c ****     /* Disable the TIM Main Output */
2279:./FWLIB/src/stm32f4xx_tim.c ****     TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
2280:./FWLIB/src/stm32f4xx_tim.c ****   }  
2281:./FWLIB/src/stm32f4xx_tim.c **** }
2282:./FWLIB/src/stm32f4xx_tim.c **** 
2283:./FWLIB/src/stm32f4xx_tim.c **** /**
2284:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Selects the TIM peripheral Commutation event.
2285:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1 or 8 to select the TIMx peripheral
2286:./FWLIB/src/stm32f4xx_tim.c ****   * @param  NewState: new state of the Commutation event.
2287:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
2288:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
2289:./FWLIB/src/stm32f4xx_tim.c ****   */
2290:./FWLIB/src/stm32f4xx_tim.c **** void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
2291:./FWLIB/src/stm32f4xx_tim.c **** {
2292:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2293:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
2294:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2295:./FWLIB/src/stm32f4xx_tim.c **** 
2296:./FWLIB/src/stm32f4xx_tim.c ****   if (NewState != DISABLE)
2297:./FWLIB/src/stm32f4xx_tim.c ****   {
2298:./FWLIB/src/stm32f4xx_tim.c ****     /* Set the COM Bit */
2299:./FWLIB/src/stm32f4xx_tim.c ****     TIMx->CR2 |= TIM_CR2_CCUS;
2300:./FWLIB/src/stm32f4xx_tim.c ****   }
2301:./FWLIB/src/stm32f4xx_tim.c ****   else
2302:./FWLIB/src/stm32f4xx_tim.c ****   {
2303:./FWLIB/src/stm32f4xx_tim.c ****     /* Reset the COM Bit */
2304:./FWLIB/src/stm32f4xx_tim.c ****     TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
2305:./FWLIB/src/stm32f4xx_tim.c ****   }
2306:./FWLIB/src/stm32f4xx_tim.c **** }
2307:./FWLIB/src/stm32f4xx_tim.c **** 
2308:./FWLIB/src/stm32f4xx_tim.c **** /**
2309:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Sets or Resets the TIM peripheral Capture Compare Preload Control bit.
2310:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1 or 8 to select the TIMx peripheral
2311:./FWLIB/src/stm32f4xx_tim.c ****   * @param  NewState: new state of the Capture Compare Preload Control bit
2312:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
ARM GAS  /tmp/ccEzGk5p.s 			page 42


2313:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
2314:./FWLIB/src/stm32f4xx_tim.c ****   */
2315:./FWLIB/src/stm32f4xx_tim.c **** void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
2316:./FWLIB/src/stm32f4xx_tim.c **** { 
2317:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2318:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
2319:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2320:./FWLIB/src/stm32f4xx_tim.c ****   if (NewState != DISABLE)
2321:./FWLIB/src/stm32f4xx_tim.c ****   {
2322:./FWLIB/src/stm32f4xx_tim.c ****     /* Set the CCPC Bit */
2323:./FWLIB/src/stm32f4xx_tim.c ****     TIMx->CR2 |= TIM_CR2_CCPC;
2324:./FWLIB/src/stm32f4xx_tim.c ****   }
2325:./FWLIB/src/stm32f4xx_tim.c ****   else
2326:./FWLIB/src/stm32f4xx_tim.c ****   {
2327:./FWLIB/src/stm32f4xx_tim.c ****     /* Reset the CCPC Bit */
2328:./FWLIB/src/stm32f4xx_tim.c ****     TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
2329:./FWLIB/src/stm32f4xx_tim.c ****   }
2330:./FWLIB/src/stm32f4xx_tim.c **** }
2331:./FWLIB/src/stm32f4xx_tim.c **** /**
2332:./FWLIB/src/stm32f4xx_tim.c ****   * @}
2333:./FWLIB/src/stm32f4xx_tim.c ****   */
2334:./FWLIB/src/stm32f4xx_tim.c **** 
2335:./FWLIB/src/stm32f4xx_tim.c **** /** @defgroup TIM_Group5 Interrupts DMA and flags management functions
2336:./FWLIB/src/stm32f4xx_tim.c ****  *  @brief    Interrupts, DMA and flags management functions 
2337:./FWLIB/src/stm32f4xx_tim.c ****  *
2338:./FWLIB/src/stm32f4xx_tim.c **** @verbatim   
2339:./FWLIB/src/stm32f4xx_tim.c ****  ===============================================================================
2340:./FWLIB/src/stm32f4xx_tim.c ****           ##### Interrupts, DMA and flags management functions #####
2341:./FWLIB/src/stm32f4xx_tim.c ****  ===============================================================================  
2342:./FWLIB/src/stm32f4xx_tim.c **** 
2343:./FWLIB/src/stm32f4xx_tim.c **** @endverbatim
2344:./FWLIB/src/stm32f4xx_tim.c ****   * @{
2345:./FWLIB/src/stm32f4xx_tim.c ****   */
2346:./FWLIB/src/stm32f4xx_tim.c **** 
2347:./FWLIB/src/stm32f4xx_tim.c **** /**
2348:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Enables or disables the specified TIM interrupts.
2349:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 to select the TIMx peripheral.
2350:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_IT: specifies the TIM interrupts sources to be enabled or disabled.
2351:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be any combination of the following values:
2352:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_IT_Update: TIM update Interrupt source
2353:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_IT_CC1: TIM Capture Compare 1 Interrupt source
2354:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_IT_CC2: TIM Capture Compare 2 Interrupt source
2355:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_IT_CC3: TIM Capture Compare 3 Interrupt source
2356:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_IT_CC4: TIM Capture Compare 4 Interrupt source
2357:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_IT_COM: TIM Commutation Interrupt source
2358:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_IT_Trigger: TIM Trigger Interrupt source
2359:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_IT_Break: TIM Break Interrupt source
2360:./FWLIB/src/stm32f4xx_tim.c ****   *  
2361:./FWLIB/src/stm32f4xx_tim.c ****   * @note   For TIM6 and TIM7 only the parameter TIM_IT_Update can be used
2362:./FWLIB/src/stm32f4xx_tim.c ****   * @note   For TIM9 and TIM12 only one of the following parameters can be used: TIM_IT_Update,
2363:./FWLIB/src/stm32f4xx_tim.c ****   *          TIM_IT_CC1, TIM_IT_CC2 or TIM_IT_Trigger. 
2364:./FWLIB/src/stm32f4xx_tim.c ****   * @note   For TIM10, TIM11, TIM13 and TIM14 only one of the following parameters can
2365:./FWLIB/src/stm32f4xx_tim.c ****   *          be used: TIM_IT_Update or TIM_IT_CC1   
2366:./FWLIB/src/stm32f4xx_tim.c ****   * @note   TIM_IT_COM and TIM_IT_Break can be used only with TIM1 and TIM8 
2367:./FWLIB/src/stm32f4xx_tim.c ****   *        
2368:./FWLIB/src/stm32f4xx_tim.c ****   * @param  NewState: new state of the TIM interrupts.
2369:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
ARM GAS  /tmp/ccEzGk5p.s 			page 43


2370:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
2371:./FWLIB/src/stm32f4xx_tim.c ****   */
2372:./FWLIB/src/stm32f4xx_tim.c **** void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
2373:./FWLIB/src/stm32f4xx_tim.c **** {  
2374:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2375:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2376:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_IT(TIM_IT));
2377:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2378:./FWLIB/src/stm32f4xx_tim.c ****   
2379:./FWLIB/src/stm32f4xx_tim.c ****   if (NewState != DISABLE)
2380:./FWLIB/src/stm32f4xx_tim.c ****   {
2381:./FWLIB/src/stm32f4xx_tim.c ****     /* Enable the Interrupt sources */
2382:./FWLIB/src/stm32f4xx_tim.c ****     TIMx->DIER |= TIM_IT;
2383:./FWLIB/src/stm32f4xx_tim.c ****   }
2384:./FWLIB/src/stm32f4xx_tim.c ****   else
2385:./FWLIB/src/stm32f4xx_tim.c ****   {
2386:./FWLIB/src/stm32f4xx_tim.c ****     /* Disable the Interrupt sources */
2387:./FWLIB/src/stm32f4xx_tim.c ****     TIMx->DIER &= (uint16_t)~TIM_IT;
2388:./FWLIB/src/stm32f4xx_tim.c ****   }
2389:./FWLIB/src/stm32f4xx_tim.c **** }
2390:./FWLIB/src/stm32f4xx_tim.c **** 
2391:./FWLIB/src/stm32f4xx_tim.c **** /**
2392:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx event to be generate by software.
2393:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
2394:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_EventSource: specifies the event source.
2395:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one or more of the following values:	   
2396:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_EventSource_Update: Timer update Event source
2397:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_EventSource_CC1: Timer Capture Compare 1 Event source
2398:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_EventSource_CC2: Timer Capture Compare 2 Event source
2399:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_EventSource_CC3: Timer Capture Compare 3 Event source
2400:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_EventSource_CC4: Timer Capture Compare 4 Event source
2401:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_EventSource_COM: Timer COM event source  
2402:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_EventSource_Trigger: Timer Trigger Event source
2403:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_EventSource_Break: Timer Break event source
2404:./FWLIB/src/stm32f4xx_tim.c ****   * 
2405:./FWLIB/src/stm32f4xx_tim.c ****   * @note   TIM6 and TIM7 can only generate an update event. 
2406:./FWLIB/src/stm32f4xx_tim.c ****   * @note   TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.
2407:./FWLIB/src/stm32f4xx_tim.c ****   *        
2408:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
2409:./FWLIB/src/stm32f4xx_tim.c ****   */
2410:./FWLIB/src/stm32f4xx_tim.c **** void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
2411:./FWLIB/src/stm32f4xx_tim.c **** { 
2412:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2413:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2414:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
2415:./FWLIB/src/stm32f4xx_tim.c ****  
2416:./FWLIB/src/stm32f4xx_tim.c ****   /* Set the event sources */
2417:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->EGR = TIM_EventSource;
2418:./FWLIB/src/stm32f4xx_tim.c **** }
2419:./FWLIB/src/stm32f4xx_tim.c **** 
2420:./FWLIB/src/stm32f4xx_tim.c **** /**
2421:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Checks whether the specified TIM flag is set or not.
2422:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
2423:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_FLAG: specifies the flag to check.
2424:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
2425:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_Update: TIM update Flag
2426:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_CC1: TIM Capture Compare 1 Flag
ARM GAS  /tmp/ccEzGk5p.s 			page 44


2427:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_CC2: TIM Capture Compare 2 Flag
2428:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_CC3: TIM Capture Compare 3 Flag
2429:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_CC4: TIM Capture Compare 4 Flag
2430:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_COM: TIM Commutation Flag
2431:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_Trigger: TIM Trigger Flag
2432:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_Break: TIM Break Flag
2433:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_CC1OF: TIM Capture Compare 1 over capture Flag
2434:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_CC2OF: TIM Capture Compare 2 over capture Flag
2435:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_CC3OF: TIM Capture Compare 3 over capture Flag
2436:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_CC4OF: TIM Capture Compare 4 over capture Flag
2437:./FWLIB/src/stm32f4xx_tim.c ****   *
2438:./FWLIB/src/stm32f4xx_tim.c ****   * @note   TIM6 and TIM7 can have only one update flag. 
2439:./FWLIB/src/stm32f4xx_tim.c ****   * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.    
2440:./FWLIB/src/stm32f4xx_tim.c ****   *
2441:./FWLIB/src/stm32f4xx_tim.c ****   * @retval The new state of TIM_FLAG (SET or RESET).
2442:./FWLIB/src/stm32f4xx_tim.c ****   */
2443:./FWLIB/src/stm32f4xx_tim.c **** FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
2444:./FWLIB/src/stm32f4xx_tim.c **** { 
2445:./FWLIB/src/stm32f4xx_tim.c ****   ITStatus bitstatus = RESET;  
2446:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2447:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2448:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
2449:./FWLIB/src/stm32f4xx_tim.c **** 
2450:./FWLIB/src/stm32f4xx_tim.c ****   
2451:./FWLIB/src/stm32f4xx_tim.c ****   if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
2452:./FWLIB/src/stm32f4xx_tim.c ****   {
2453:./FWLIB/src/stm32f4xx_tim.c ****     bitstatus = SET;
2454:./FWLIB/src/stm32f4xx_tim.c ****   }
2455:./FWLIB/src/stm32f4xx_tim.c ****   else
2456:./FWLIB/src/stm32f4xx_tim.c ****   {
2457:./FWLIB/src/stm32f4xx_tim.c ****     bitstatus = RESET;
2458:./FWLIB/src/stm32f4xx_tim.c ****   }
2459:./FWLIB/src/stm32f4xx_tim.c ****   return bitstatus;
2460:./FWLIB/src/stm32f4xx_tim.c **** }
2461:./FWLIB/src/stm32f4xx_tim.c **** 
2462:./FWLIB/src/stm32f4xx_tim.c **** /**
2463:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Clears the TIMx's pending flags.
2464:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
2465:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_FLAG: specifies the flag bit to clear.
2466:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be any combination of the following values:
2467:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_Update: TIM update Flag
2468:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_CC1: TIM Capture Compare 1 Flag
2469:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_CC2: TIM Capture Compare 2 Flag
2470:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_CC3: TIM Capture Compare 3 Flag
2471:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_CC4: TIM Capture Compare 4 Flag
2472:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_COM: TIM Commutation Flag
2473:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_Trigger: TIM Trigger Flag
2474:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_Break: TIM Break Flag
2475:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_CC1OF: TIM Capture Compare 1 over capture Flag
2476:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_CC2OF: TIM Capture Compare 2 over capture Flag
2477:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_CC3OF: TIM Capture Compare 3 over capture Flag
2478:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_CC4OF: TIM Capture Compare 4 over capture Flag
2479:./FWLIB/src/stm32f4xx_tim.c ****   *
2480:./FWLIB/src/stm32f4xx_tim.c ****   * @note   TIM6 and TIM7 can have only one update flag. 
2481:./FWLIB/src/stm32f4xx_tim.c ****   * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.
2482:./FWLIB/src/stm32f4xx_tim.c ****   *    
2483:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
ARM GAS  /tmp/ccEzGk5p.s 			page 45


2484:./FWLIB/src/stm32f4xx_tim.c ****   */
2485:./FWLIB/src/stm32f4xx_tim.c **** void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
2486:./FWLIB/src/stm32f4xx_tim.c **** {  
2487:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2488:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2489:./FWLIB/src/stm32f4xx_tim.c ****    
2490:./FWLIB/src/stm32f4xx_tim.c ****   /* Clear the flags */
2491:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->SR = (uint16_t)~TIM_FLAG;
2492:./FWLIB/src/stm32f4xx_tim.c **** }
2493:./FWLIB/src/stm32f4xx_tim.c **** 
2494:./FWLIB/src/stm32f4xx_tim.c **** /**
2495:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Checks whether the TIM interrupt has occurred or not.
2496:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
2497:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_IT: specifies the TIM interrupt source to check.
2498:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
2499:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_IT_Update: TIM update Interrupt source
2500:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_IT_CC1: TIM Capture Compare 1 Interrupt source
2501:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_IT_CC2: TIM Capture Compare 2 Interrupt source
2502:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_IT_CC3: TIM Capture Compare 3 Interrupt source
2503:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_IT_CC4: TIM Capture Compare 4 Interrupt source
2504:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_IT_COM: TIM Commutation Interrupt source
2505:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_IT_Trigger: TIM Trigger Interrupt source
2506:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_IT_Break: TIM Break Interrupt source
2507:./FWLIB/src/stm32f4xx_tim.c ****   *
2508:./FWLIB/src/stm32f4xx_tim.c ****   * @note   TIM6 and TIM7 can generate only an update interrupt.
2509:./FWLIB/src/stm32f4xx_tim.c ****   * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
2510:./FWLIB/src/stm32f4xx_tim.c ****   *     
2511:./FWLIB/src/stm32f4xx_tim.c ****   * @retval The new state of the TIM_IT(SET or RESET).
2512:./FWLIB/src/stm32f4xx_tim.c ****   */
2513:./FWLIB/src/stm32f4xx_tim.c **** ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
2514:./FWLIB/src/stm32f4xx_tim.c **** {
2515:./FWLIB/src/stm32f4xx_tim.c ****   ITStatus bitstatus = RESET;  
2516:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t itstatus = 0x0, itenable = 0x0;
2517:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2518:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2519:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_GET_IT(TIM_IT));
2520:./FWLIB/src/stm32f4xx_tim.c ****    
2521:./FWLIB/src/stm32f4xx_tim.c ****   itstatus = TIMx->SR & TIM_IT;
2522:./FWLIB/src/stm32f4xx_tim.c ****   
2523:./FWLIB/src/stm32f4xx_tim.c ****   itenable = TIMx->DIER & TIM_IT;
2524:./FWLIB/src/stm32f4xx_tim.c ****   if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
2525:./FWLIB/src/stm32f4xx_tim.c ****   {
2526:./FWLIB/src/stm32f4xx_tim.c ****     bitstatus = SET;
2527:./FWLIB/src/stm32f4xx_tim.c ****   }
2528:./FWLIB/src/stm32f4xx_tim.c ****   else
2529:./FWLIB/src/stm32f4xx_tim.c ****   {
2530:./FWLIB/src/stm32f4xx_tim.c ****     bitstatus = RESET;
2531:./FWLIB/src/stm32f4xx_tim.c ****   }
2532:./FWLIB/src/stm32f4xx_tim.c ****   return bitstatus;
2533:./FWLIB/src/stm32f4xx_tim.c **** }
2534:./FWLIB/src/stm32f4xx_tim.c **** 
2535:./FWLIB/src/stm32f4xx_tim.c **** /**
2536:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Clears the TIMx's interrupt pending bits.
2537:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
2538:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_IT: specifies the pending bit to clear.
2539:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be any combination of the following values:
2540:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_IT_Update: TIM1 update Interrupt source
ARM GAS  /tmp/ccEzGk5p.s 			page 46


2541:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_IT_CC1: TIM Capture Compare 1 Interrupt source
2542:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_IT_CC2: TIM Capture Compare 2 Interrupt source
2543:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_IT_CC3: TIM Capture Compare 3 Interrupt source
2544:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_IT_CC4: TIM Capture Compare 4 Interrupt source
2545:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_IT_COM: TIM Commutation Interrupt source
2546:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_IT_Trigger: TIM Trigger Interrupt source
2547:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_IT_Break: TIM Break Interrupt source
2548:./FWLIB/src/stm32f4xx_tim.c ****   *
2549:./FWLIB/src/stm32f4xx_tim.c ****   * @note   TIM6 and TIM7 can generate only an update interrupt.
2550:./FWLIB/src/stm32f4xx_tim.c ****   * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
2551:./FWLIB/src/stm32f4xx_tim.c ****   *      
2552:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
2553:./FWLIB/src/stm32f4xx_tim.c ****   */
2554:./FWLIB/src/stm32f4xx_tim.c **** void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
2555:./FWLIB/src/stm32f4xx_tim.c **** {
2556:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2557:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2558:./FWLIB/src/stm32f4xx_tim.c **** 
2559:./FWLIB/src/stm32f4xx_tim.c ****   /* Clear the IT pending Bit */
2560:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->SR = (uint16_t)~TIM_IT;
2561:./FWLIB/src/stm32f4xx_tim.c **** }
2562:./FWLIB/src/stm32f4xx_tim.c **** 
2563:./FWLIB/src/stm32f4xx_tim.c **** /**
2564:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx's DMA interface.
2565:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
2566:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_DMABase: DMA Base address.
2567:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
2568:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_DMABase_CR1  
2569:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_DMABase_CR2
2570:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_DMABase_SMCR
2571:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_DMABase_DIER
2572:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM1_DMABase_SR
2573:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_DMABase_EGR
2574:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_DMABase_CCMR1
2575:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_DMABase_CCMR2
2576:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_DMABase_CCER
2577:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_DMABase_CNT   
2578:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_DMABase_PSC   
2579:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_DMABase_ARR
2580:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_DMABase_RCR
2581:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_DMABase_CCR1
2582:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_DMABase_CCR2
2583:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_DMABase_CCR3  
2584:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_DMABase_CCR4
2585:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_DMABase_BDTR
2586:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_DMABase_DCR
2587:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_DMABurstLength: DMA Burst length. This parameter can be one value
2588:./FWLIB/src/stm32f4xx_tim.c ****   *         between: TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
2589:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
2590:./FWLIB/src/stm32f4xx_tim.c ****   */
2591:./FWLIB/src/stm32f4xx_tim.c **** void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
2592:./FWLIB/src/stm32f4xx_tim.c **** {
2593:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2594:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
2595:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
2596:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));
2597:./FWLIB/src/stm32f4xx_tim.c **** 
ARM GAS  /tmp/ccEzGk5p.s 			page 47


2598:./FWLIB/src/stm32f4xx_tim.c ****   /* Set the DMA Base and the DMA Burst Length */
2599:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
2600:./FWLIB/src/stm32f4xx_tim.c **** }
2601:./FWLIB/src/stm32f4xx_tim.c **** 
2602:./FWLIB/src/stm32f4xx_tim.c **** /**
2603:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Enables or disables the TIMx's DMA Requests.
2604:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the TIM peripheral.
2605:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_DMASource: specifies the DMA Request sources.
2606:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be any combination of the following values:
2607:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_DMA_Update: TIM update Interrupt source
2608:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_DMA_CC1: TIM Capture Compare 1 DMA source
2609:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_DMA_CC2: TIM Capture Compare 2 DMA source
2610:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_DMA_CC3: TIM Capture Compare 3 DMA source
2611:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_DMA_CC4: TIM Capture Compare 4 DMA source
2612:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_DMA_COM: TIM Commutation DMA source
2613:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_DMA_Trigger: TIM Trigger DMA source
2614:./FWLIB/src/stm32f4xx_tim.c ****   * @param  NewState: new state of the DMA Request sources.
2615:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
2616:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
2617:./FWLIB/src/stm32f4xx_tim.c ****   */
2618:./FWLIB/src/stm32f4xx_tim.c **** void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
2619:./FWLIB/src/stm32f4xx_tim.c **** { 
2620:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2621:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
2622:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
2623:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2624:./FWLIB/src/stm32f4xx_tim.c ****   
2625:./FWLIB/src/stm32f4xx_tim.c ****   if (NewState != DISABLE)
2626:./FWLIB/src/stm32f4xx_tim.c ****   {
2627:./FWLIB/src/stm32f4xx_tim.c ****     /* Enable the DMA sources */
2628:./FWLIB/src/stm32f4xx_tim.c ****     TIMx->DIER |= TIM_DMASource; 
2629:./FWLIB/src/stm32f4xx_tim.c ****   }
2630:./FWLIB/src/stm32f4xx_tim.c ****   else
2631:./FWLIB/src/stm32f4xx_tim.c ****   {
2632:./FWLIB/src/stm32f4xx_tim.c ****     /* Disable the DMA sources */
2633:./FWLIB/src/stm32f4xx_tim.c ****     TIMx->DIER &= (uint16_t)~TIM_DMASource;
2634:./FWLIB/src/stm32f4xx_tim.c ****   }
2635:./FWLIB/src/stm32f4xx_tim.c **** }
2636:./FWLIB/src/stm32f4xx_tim.c **** 
2637:./FWLIB/src/stm32f4xx_tim.c **** /**
2638:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Selects the TIMx peripheral Capture Compare DMA source.
2639:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
2640:./FWLIB/src/stm32f4xx_tim.c ****   * @param  NewState: new state of the Capture Compare DMA source
2641:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
2642:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
2643:./FWLIB/src/stm32f4xx_tim.c ****   */
2644:./FWLIB/src/stm32f4xx_tim.c **** void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
2645:./FWLIB/src/stm32f4xx_tim.c **** {
2646:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2647:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
2648:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2649:./FWLIB/src/stm32f4xx_tim.c **** 
2650:./FWLIB/src/stm32f4xx_tim.c ****   if (NewState != DISABLE)
2651:./FWLIB/src/stm32f4xx_tim.c ****   {
2652:./FWLIB/src/stm32f4xx_tim.c ****     /* Set the CCDS Bit */
2653:./FWLIB/src/stm32f4xx_tim.c ****     TIMx->CR2 |= TIM_CR2_CCDS;
2654:./FWLIB/src/stm32f4xx_tim.c ****   }
ARM GAS  /tmp/ccEzGk5p.s 			page 48


2655:./FWLIB/src/stm32f4xx_tim.c ****   else
2656:./FWLIB/src/stm32f4xx_tim.c ****   {
2657:./FWLIB/src/stm32f4xx_tim.c ****     /* Reset the CCDS Bit */
2658:./FWLIB/src/stm32f4xx_tim.c ****     TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
2659:./FWLIB/src/stm32f4xx_tim.c ****   }
2660:./FWLIB/src/stm32f4xx_tim.c **** }
2661:./FWLIB/src/stm32f4xx_tim.c **** /**
2662:./FWLIB/src/stm32f4xx_tim.c ****   * @}
2663:./FWLIB/src/stm32f4xx_tim.c ****   */
2664:./FWLIB/src/stm32f4xx_tim.c **** 
2665:./FWLIB/src/stm32f4xx_tim.c **** /** @defgroup TIM_Group6 Clocks management functions
2666:./FWLIB/src/stm32f4xx_tim.c ****  *  @brief    Clocks management functions
2667:./FWLIB/src/stm32f4xx_tim.c ****  *
2668:./FWLIB/src/stm32f4xx_tim.c **** @verbatim   
2669:./FWLIB/src/stm32f4xx_tim.c ****  ===============================================================================
2670:./FWLIB/src/stm32f4xx_tim.c ****                   ##### Clocks management functions #####
2671:./FWLIB/src/stm32f4xx_tim.c ****  ===============================================================================  
2672:./FWLIB/src/stm32f4xx_tim.c **** 
2673:./FWLIB/src/stm32f4xx_tim.c **** @endverbatim
2674:./FWLIB/src/stm32f4xx_tim.c ****   * @{
2675:./FWLIB/src/stm32f4xx_tim.c ****   */
2676:./FWLIB/src/stm32f4xx_tim.c **** 
2677:./FWLIB/src/stm32f4xx_tim.c **** /**
2678:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx internal Clock
2679:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
2680:./FWLIB/src/stm32f4xx_tim.c ****   *         peripheral.
2681:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
2682:./FWLIB/src/stm32f4xx_tim.c ****   */
2683:./FWLIB/src/stm32f4xx_tim.c **** void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
2684:./FWLIB/src/stm32f4xx_tim.c **** {
2685:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2686:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
2687:./FWLIB/src/stm32f4xx_tim.c **** 
2688:./FWLIB/src/stm32f4xx_tim.c ****   /* Disable slave mode to clock the prescaler directly with the internal clock */
2689:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
2690:./FWLIB/src/stm32f4xx_tim.c **** }
2691:./FWLIB/src/stm32f4xx_tim.c **** 
2692:./FWLIB/src/stm32f4xx_tim.c **** /**
2693:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx Internal Trigger as External Clock
2694:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
2695:./FWLIB/src/stm32f4xx_tim.c ****   *         peripheral.
2696:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_InputTriggerSource: Trigger source.
2697:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
2698:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_TS_ITR0: Internal Trigger 0
2699:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_TS_ITR1: Internal Trigger 1
2700:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_TS_ITR2: Internal Trigger 2
2701:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_TS_ITR3: Internal Trigger 3
2702:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
2703:./FWLIB/src/stm32f4xx_tim.c ****   */
2704:./FWLIB/src/stm32f4xx_tim.c **** void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
2705:./FWLIB/src/stm32f4xx_tim.c **** {
2706:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2707:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
2708:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));
2709:./FWLIB/src/stm32f4xx_tim.c **** 
2710:./FWLIB/src/stm32f4xx_tim.c ****   /* Select the Internal Trigger */
2711:./FWLIB/src/stm32f4xx_tim.c ****   TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
ARM GAS  /tmp/ccEzGk5p.s 			page 49


2712:./FWLIB/src/stm32f4xx_tim.c **** 
2713:./FWLIB/src/stm32f4xx_tim.c ****   /* Select the External clock mode1 */
2714:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->SMCR |= TIM_SlaveMode_External1;
2715:./FWLIB/src/stm32f4xx_tim.c **** }
2716:./FWLIB/src/stm32f4xx_tim.c **** 
2717:./FWLIB/src/stm32f4xx_tim.c **** /**
2718:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx Trigger as External Clock
2719:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13 or 14  
2720:./FWLIB/src/stm32f4xx_tim.c ****   *         to select the TIM peripheral.
2721:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_TIxExternalCLKSource: Trigger source.
2722:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
2723:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_TIxExternalCLK1Source_TI1ED: TI1 Edge Detector
2724:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_TIxExternalCLK1Source_TI1: Filtered Timer Input 1
2725:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_TIxExternalCLK1Source_TI2: Filtered Timer Input 2
2726:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ICPolarity: specifies the TIx Polarity.
2727:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
2728:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPolarity_Rising
2729:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPolarity_Falling
2730:./FWLIB/src/stm32f4xx_tim.c ****   * @param  ICFilter: specifies the filter value.
2731:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter must be a value between 0x0 and 0xF.
2732:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
2733:./FWLIB/src/stm32f4xx_tim.c ****   */
2734:./FWLIB/src/stm32f4xx_tim.c **** void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
2735:./FWLIB/src/stm32f4xx_tim.c ****                                 uint16_t TIM_ICPolarity, uint16_t ICFilter)
2736:./FWLIB/src/stm32f4xx_tim.c **** {
2737:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2738:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST1_PERIPH(TIMx));
2739:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
2740:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_IC_FILTER(ICFilter));
2741:./FWLIB/src/stm32f4xx_tim.c **** 
2742:./FWLIB/src/stm32f4xx_tim.c ****   /* Configure the Timer Input Clock Source */
2743:./FWLIB/src/stm32f4xx_tim.c ****   if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
2744:./FWLIB/src/stm32f4xx_tim.c ****   {
2745:./FWLIB/src/stm32f4xx_tim.c ****     TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
2746:./FWLIB/src/stm32f4xx_tim.c ****   }
2747:./FWLIB/src/stm32f4xx_tim.c ****   else
2748:./FWLIB/src/stm32f4xx_tim.c ****   {
2749:./FWLIB/src/stm32f4xx_tim.c ****     TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
2750:./FWLIB/src/stm32f4xx_tim.c ****   }
2751:./FWLIB/src/stm32f4xx_tim.c ****   /* Select the Trigger source */
2752:./FWLIB/src/stm32f4xx_tim.c ****   TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
2753:./FWLIB/src/stm32f4xx_tim.c ****   /* Select the External clock mode1 */
2754:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->SMCR |= TIM_SlaveMode_External1;
2755:./FWLIB/src/stm32f4xx_tim.c **** }
2756:./FWLIB/src/stm32f4xx_tim.c **** 
2757:./FWLIB/src/stm32f4xx_tim.c **** /**
2758:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configures the External clock Mode1
2759:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
2760:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ExtTRGPrescaler: The external Trigger Prescaler.
2761:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
2762:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ExtTRGPSC_OFF: ETRP Prescaler OFF.
2763:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV2: ETRP frequency divided by 2.
2764:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV4: ETRP frequency divided by 4.
2765:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV8: ETRP frequency divided by 8.
2766:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ExtTRGPolarity: The external Trigger Polarity.
2767:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
2768:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ExtTRGPolarity_Inverted: active low or falling edge active.
ARM GAS  /tmp/ccEzGk5p.s 			page 50


2769:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ExtTRGPolarity_NonInverted: active high or rising edge active.
2770:./FWLIB/src/stm32f4xx_tim.c ****   * @param  ExtTRGFilter: External Trigger Filter.
2771:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter must be a value between 0x00 and 0x0F
2772:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
2773:./FWLIB/src/stm32f4xx_tim.c ****   */
2774:./FWLIB/src/stm32f4xx_tim.c **** void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
2775:./FWLIB/src/stm32f4xx_tim.c ****                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
2776:./FWLIB/src/stm32f4xx_tim.c **** {
2777:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpsmcr = 0;
2778:./FWLIB/src/stm32f4xx_tim.c **** 
2779:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2780:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
2781:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
2782:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
2783:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
2784:./FWLIB/src/stm32f4xx_tim.c ****   /* Configure the ETR Clock source */
2785:./FWLIB/src/stm32f4xx_tim.c ****   TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
2786:./FWLIB/src/stm32f4xx_tim.c ****   
2787:./FWLIB/src/stm32f4xx_tim.c ****   /* Get the TIMx SMCR register value */
2788:./FWLIB/src/stm32f4xx_tim.c ****   tmpsmcr = TIMx->SMCR;
2789:./FWLIB/src/stm32f4xx_tim.c **** 
2790:./FWLIB/src/stm32f4xx_tim.c ****   /* Reset the SMS Bits */
2791:./FWLIB/src/stm32f4xx_tim.c ****   tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
2792:./FWLIB/src/stm32f4xx_tim.c **** 
2793:./FWLIB/src/stm32f4xx_tim.c ****   /* Select the External clock mode1 */
2794:./FWLIB/src/stm32f4xx_tim.c ****   tmpsmcr |= TIM_SlaveMode_External1;
2795:./FWLIB/src/stm32f4xx_tim.c **** 
2796:./FWLIB/src/stm32f4xx_tim.c ****   /* Select the Trigger selection : ETRF */
2797:./FWLIB/src/stm32f4xx_tim.c ****   tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
2798:./FWLIB/src/stm32f4xx_tim.c ****   tmpsmcr |= TIM_TS_ETRF;
2799:./FWLIB/src/stm32f4xx_tim.c **** 
2800:./FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx SMCR */
2801:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->SMCR = tmpsmcr;
2802:./FWLIB/src/stm32f4xx_tim.c **** }
2803:./FWLIB/src/stm32f4xx_tim.c **** 
2804:./FWLIB/src/stm32f4xx_tim.c **** /**
2805:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configures the External clock Mode2
2806:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
2807:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ExtTRGPrescaler: The external Trigger Prescaler.
2808:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
2809:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ExtTRGPSC_OFF: ETRP Prescaler OFF.
2810:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV2: ETRP frequency divided by 2.
2811:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV4: ETRP frequency divided by 4.
2812:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV8: ETRP frequency divided by 8.
2813:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ExtTRGPolarity: The external Trigger Polarity.
2814:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
2815:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ExtTRGPolarity_Inverted: active low or falling edge active.
2816:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ExtTRGPolarity_NonInverted: active high or rising edge active.
2817:./FWLIB/src/stm32f4xx_tim.c ****   * @param  ExtTRGFilter: External Trigger Filter.
2818:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter must be a value between 0x00 and 0x0F
2819:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
2820:./FWLIB/src/stm32f4xx_tim.c ****   */
2821:./FWLIB/src/stm32f4xx_tim.c **** void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
2822:./FWLIB/src/stm32f4xx_tim.c ****                              uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
2823:./FWLIB/src/stm32f4xx_tim.c **** {
2824:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2825:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
ARM GAS  /tmp/ccEzGk5p.s 			page 51


2826:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
2827:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
2828:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
2829:./FWLIB/src/stm32f4xx_tim.c **** 
2830:./FWLIB/src/stm32f4xx_tim.c ****   /* Configure the ETR Clock source */
2831:./FWLIB/src/stm32f4xx_tim.c ****   TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
2832:./FWLIB/src/stm32f4xx_tim.c **** 
2833:./FWLIB/src/stm32f4xx_tim.c ****   /* Enable the External clock mode2 */
2834:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->SMCR |= TIM_SMCR_ECE;
2835:./FWLIB/src/stm32f4xx_tim.c **** }
2836:./FWLIB/src/stm32f4xx_tim.c **** /**
2837:./FWLIB/src/stm32f4xx_tim.c ****   * @}
2838:./FWLIB/src/stm32f4xx_tim.c ****   */
2839:./FWLIB/src/stm32f4xx_tim.c **** 
2840:./FWLIB/src/stm32f4xx_tim.c **** /** @defgroup TIM_Group7 Synchronization management functions
2841:./FWLIB/src/stm32f4xx_tim.c ****  *  @brief    Synchronization management functions 
2842:./FWLIB/src/stm32f4xx_tim.c ****  *
2843:./FWLIB/src/stm32f4xx_tim.c **** @verbatim   
2844:./FWLIB/src/stm32f4xx_tim.c ****  ===============================================================================
2845:./FWLIB/src/stm32f4xx_tim.c ****                 ##### Synchronization management functions #####
2846:./FWLIB/src/stm32f4xx_tim.c ****  ===============================================================================  
2847:./FWLIB/src/stm32f4xx_tim.c ****                          
2848:./FWLIB/src/stm32f4xx_tim.c ****           ##### TIM Driver: how to use it in synchronization Mode #####
2849:./FWLIB/src/stm32f4xx_tim.c ****  ===============================================================================
2850:./FWLIB/src/stm32f4xx_tim.c ****     [..] 
2851:./FWLIB/src/stm32f4xx_tim.c ****     
2852:./FWLIB/src/stm32f4xx_tim.c ****     *** Case of two/several Timers ***
2853:./FWLIB/src/stm32f4xx_tim.c ****     ==================================
2854:./FWLIB/src/stm32f4xx_tim.c ****     [..]
2855:./FWLIB/src/stm32f4xx_tim.c ****       (#) Configure the Master Timers using the following functions:
2856:./FWLIB/src/stm32f4xx_tim.c ****         (++) void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource); 
2857:./FWLIB/src/stm32f4xx_tim.c ****         (++) void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode);  
2858:./FWLIB/src/stm32f4xx_tim.c ****       (#) Configure the Slave Timers using the following functions: 
2859:./FWLIB/src/stm32f4xx_tim.c ****         (++) void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource);  
2860:./FWLIB/src/stm32f4xx_tim.c ****         (++) void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode); 
2861:./FWLIB/src/stm32f4xx_tim.c ****           
2862:./FWLIB/src/stm32f4xx_tim.c ****     *** Case of Timers and external trigger(ETR pin) ***
2863:./FWLIB/src/stm32f4xx_tim.c ****     ====================================================
2864:./FWLIB/src/stm32f4xx_tim.c ****     [..]           
2865:./FWLIB/src/stm32f4xx_tim.c ****       (#) Configure the External trigger using this function:
2866:./FWLIB/src/stm32f4xx_tim.c ****         (++) void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTR
2867:./FWLIB/src/stm32f4xx_tim.c ****                                uint16_t ExtTRGFilter);
2868:./FWLIB/src/stm32f4xx_tim.c ****       (#) Configure the Slave Timers using the following functions: 
2869:./FWLIB/src/stm32f4xx_tim.c ****         (++) void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource);  
2870:./FWLIB/src/stm32f4xx_tim.c ****         (++) void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode); 
2871:./FWLIB/src/stm32f4xx_tim.c **** 
2872:./FWLIB/src/stm32f4xx_tim.c **** @endverbatim
2873:./FWLIB/src/stm32f4xx_tim.c ****   * @{
2874:./FWLIB/src/stm32f4xx_tim.c ****   */
2875:./FWLIB/src/stm32f4xx_tim.c **** 
2876:./FWLIB/src/stm32f4xx_tim.c **** /**
2877:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Selects the Input Trigger source
2878:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13 or 14  
2879:./FWLIB/src/stm32f4xx_tim.c ****   *         to select the TIM peripheral.
2880:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_InputTriggerSource: The Input Trigger source.
2881:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
2882:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_TS_ITR0: Internal Trigger 0
ARM GAS  /tmp/ccEzGk5p.s 			page 52


2883:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_TS_ITR1: Internal Trigger 1
2884:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_TS_ITR2: Internal Trigger 2
2885:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_TS_ITR3: Internal Trigger 3
2886:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_TS_TI1F_ED: TI1 Edge Detector
2887:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_TS_TI1FP1: Filtered Timer Input 1
2888:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
2889:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_TS_ETRF: External Trigger input
2890:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
2891:./FWLIB/src/stm32f4xx_tim.c ****   */
2892:./FWLIB/src/stm32f4xx_tim.c **** void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
2893:./FWLIB/src/stm32f4xx_tim.c **** {
2894:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpsmcr = 0;
2895:./FWLIB/src/stm32f4xx_tim.c **** 
2896:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2897:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
2898:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));
2899:./FWLIB/src/stm32f4xx_tim.c **** 
2900:./FWLIB/src/stm32f4xx_tim.c ****   /* Get the TIMx SMCR register value */
2901:./FWLIB/src/stm32f4xx_tim.c ****   tmpsmcr = TIMx->SMCR;
2902:./FWLIB/src/stm32f4xx_tim.c **** 
2903:./FWLIB/src/stm32f4xx_tim.c ****   /* Reset the TS Bits */
2904:./FWLIB/src/stm32f4xx_tim.c ****   tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
2905:./FWLIB/src/stm32f4xx_tim.c **** 
2906:./FWLIB/src/stm32f4xx_tim.c ****   /* Set the Input Trigger source */
2907:./FWLIB/src/stm32f4xx_tim.c ****   tmpsmcr |= TIM_InputTriggerSource;
2908:./FWLIB/src/stm32f4xx_tim.c **** 
2909:./FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx SMCR */
2910:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->SMCR = tmpsmcr;
2911:./FWLIB/src/stm32f4xx_tim.c **** }
2912:./FWLIB/src/stm32f4xx_tim.c **** 
2913:./FWLIB/src/stm32f4xx_tim.c **** /**
2914:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Selects the TIMx Trigger Output Mode.
2915:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the TIM peripheral.
2916:./FWLIB/src/stm32f4xx_tim.c ****   *     
2917:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_TRGOSource: specifies the Trigger Output source.
2918:./FWLIB/src/stm32f4xx_tim.c ****   *   This parameter can be one of the following values:
2919:./FWLIB/src/stm32f4xx_tim.c ****   *
2920:./FWLIB/src/stm32f4xx_tim.c ****   *  - For all TIMx
2921:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_TRGOSource_Reset:  The UG bit in the TIM_EGR register is used as the trigge
2922:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_TRGOSource_Enable: The Counter Enable CEN is used as the trigger output(TRG
2923:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_TRGOSource_Update: The update event is selected as the trigger output(TRGO)
2924:./FWLIB/src/stm32f4xx_tim.c ****   *
2925:./FWLIB/src/stm32f4xx_tim.c ****   *  - For all TIMx except TIM6 and TIM7
2926:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_TRGOSource_OC1: The trigger output sends a positive pulse when the CC1IF fl
2927:./FWLIB/src/stm32f4xx_tim.c ****   *                                     is to be set, as soon as a capture or compare match occurs(
2928:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_TRGOSource_OC1Ref: OC1REF signal is used as the trigger output(TRGO)
2929:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_TRGOSource_OC2Ref: OC2REF signal is used as the trigger output(TRGO)
2930:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_TRGOSource_OC3Ref: OC3REF signal is used as the trigger output(TRGO)
2931:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
2932:./FWLIB/src/stm32f4xx_tim.c ****   *
2933:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
2934:./FWLIB/src/stm32f4xx_tim.c ****   */
2935:./FWLIB/src/stm32f4xx_tim.c **** void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
2936:./FWLIB/src/stm32f4xx_tim.c **** {
2937:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2938:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST5_PERIPH(TIMx));
2939:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));
ARM GAS  /tmp/ccEzGk5p.s 			page 53


2940:./FWLIB/src/stm32f4xx_tim.c **** 
2941:./FWLIB/src/stm32f4xx_tim.c ****   /* Reset the MMS Bits */
2942:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
2943:./FWLIB/src/stm32f4xx_tim.c ****   /* Select the TRGO source */
2944:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CR2 |=  TIM_TRGOSource;
2945:./FWLIB/src/stm32f4xx_tim.c **** }
2946:./FWLIB/src/stm32f4xx_tim.c **** 
2947:./FWLIB/src/stm32f4xx_tim.c **** /**
2948:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Selects the TIMx Slave Mode.
2949:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM peripheral.
2950:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_SlaveMode: specifies the Timer Slave Mode.
2951:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
2952:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_SlaveMode_Reset: Rising edge of the selected trigger signal(TRGI) reinitial
2953:./FWLIB/src/stm32f4xx_tim.c ****   *                                      the counter and triggers an update of the registers
2954:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_SlaveMode_Gated:     The counter clock is enabled when the trigger signal (
2955:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRG
2956:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the 
2957:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
2958:./FWLIB/src/stm32f4xx_tim.c ****   */
2959:./FWLIB/src/stm32f4xx_tim.c **** void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
2960:./FWLIB/src/stm32f4xx_tim.c **** {
2961:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2962:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
2963:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));
2964:./FWLIB/src/stm32f4xx_tim.c **** 
2965:./FWLIB/src/stm32f4xx_tim.c ****   /* Reset the SMS Bits */
2966:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
2967:./FWLIB/src/stm32f4xx_tim.c **** 
2968:./FWLIB/src/stm32f4xx_tim.c ****   /* Select the Slave Mode */
2969:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->SMCR |= TIM_SlaveMode;
2970:./FWLIB/src/stm32f4xx_tim.c **** }
2971:./FWLIB/src/stm32f4xx_tim.c **** 
2972:./FWLIB/src/stm32f4xx_tim.c **** /**
2973:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Sets or Resets the TIMx Master/Slave Mode.
2974:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM peripheral.
2975:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_MasterSlaveMode: specifies the Timer Master Slave Mode.
2976:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
2977:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_MasterSlaveMode_Enable: synchronization between the current timer
2978:./FWLIB/src/stm32f4xx_tim.c ****   *                                             and its slaves (through TRGO)
2979:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_MasterSlaveMode_Disable: No action
2980:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
2981:./FWLIB/src/stm32f4xx_tim.c ****   */
2982:./FWLIB/src/stm32f4xx_tim.c **** void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
2983:./FWLIB/src/stm32f4xx_tim.c **** {
2984:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
2985:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
2986:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));
2987:./FWLIB/src/stm32f4xx_tim.c **** 
2988:./FWLIB/src/stm32f4xx_tim.c ****   /* Reset the MSM Bit */
2989:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
2990:./FWLIB/src/stm32f4xx_tim.c ****   
2991:./FWLIB/src/stm32f4xx_tim.c ****   /* Set or Reset the MSM Bit */
2992:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->SMCR |= TIM_MasterSlaveMode;
2993:./FWLIB/src/stm32f4xx_tim.c **** }
2994:./FWLIB/src/stm32f4xx_tim.c **** 
2995:./FWLIB/src/stm32f4xx_tim.c **** /**
2996:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx External Trigger (ETR).
ARM GAS  /tmp/ccEzGk5p.s 			page 54


2997:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
2998:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ExtTRGPrescaler: The external Trigger Prescaler.
2999:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
3000:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ExtTRGPSC_OFF: ETRP Prescaler OFF.
3001:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV2: ETRP frequency divided by 2.
3002:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV4: ETRP frequency divided by 4.
3003:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV8: ETRP frequency divided by 8.
3004:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ExtTRGPolarity: The external Trigger Polarity.
3005:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
3006:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ExtTRGPolarity_Inverted: active low or falling edge active.
3007:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ExtTRGPolarity_NonInverted: active high or rising edge active.
3008:./FWLIB/src/stm32f4xx_tim.c ****   * @param  ExtTRGFilter: External Trigger Filter.
3009:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter must be a value between 0x00 and 0x0F
3010:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
3011:./FWLIB/src/stm32f4xx_tim.c ****   */
3012:./FWLIB/src/stm32f4xx_tim.c **** void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
3013:./FWLIB/src/stm32f4xx_tim.c ****                    uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
3014:./FWLIB/src/stm32f4xx_tim.c **** {
3015:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpsmcr = 0;
3016:./FWLIB/src/stm32f4xx_tim.c **** 
3017:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
3018:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
3019:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
3020:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
3021:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
3022:./FWLIB/src/stm32f4xx_tim.c **** 
3023:./FWLIB/src/stm32f4xx_tim.c ****   tmpsmcr = TIMx->SMCR;
3024:./FWLIB/src/stm32f4xx_tim.c **** 
3025:./FWLIB/src/stm32f4xx_tim.c ****   /* Reset the ETR Bits */
3026:./FWLIB/src/stm32f4xx_tim.c ****   tmpsmcr &= SMCR_ETR_MASK;
3027:./FWLIB/src/stm32f4xx_tim.c **** 
3028:./FWLIB/src/stm32f4xx_tim.c ****   /* Set the Prescaler, the Filter value and the Polarity */
3029:./FWLIB/src/stm32f4xx_tim.c ****   tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilt
3030:./FWLIB/src/stm32f4xx_tim.c **** 
3031:./FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx SMCR */
3032:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->SMCR = tmpsmcr;
3033:./FWLIB/src/stm32f4xx_tim.c **** }
3034:./FWLIB/src/stm32f4xx_tim.c **** /**
3035:./FWLIB/src/stm32f4xx_tim.c ****   * @}
3036:./FWLIB/src/stm32f4xx_tim.c ****   */
3037:./FWLIB/src/stm32f4xx_tim.c **** 
3038:./FWLIB/src/stm32f4xx_tim.c **** /** @defgroup TIM_Group8 Specific interface management functions
3039:./FWLIB/src/stm32f4xx_tim.c ****  *  @brief    Specific interface management functions 
3040:./FWLIB/src/stm32f4xx_tim.c ****  *
3041:./FWLIB/src/stm32f4xx_tim.c **** @verbatim   
3042:./FWLIB/src/stm32f4xx_tim.c ****  ===============================================================================
3043:./FWLIB/src/stm32f4xx_tim.c ****             ##### Specific interface management functions #####
3044:./FWLIB/src/stm32f4xx_tim.c ****  ===============================================================================  
3045:./FWLIB/src/stm32f4xx_tim.c **** 
3046:./FWLIB/src/stm32f4xx_tim.c **** @endverbatim
3047:./FWLIB/src/stm32f4xx_tim.c ****   * @{
3048:./FWLIB/src/stm32f4xx_tim.c ****   */
3049:./FWLIB/src/stm32f4xx_tim.c **** 
3050:./FWLIB/src/stm32f4xx_tim.c **** /**
3051:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx Encoder Interface.
3052:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
3053:./FWLIB/src/stm32f4xx_tim.c ****   *         peripheral.
ARM GAS  /tmp/ccEzGk5p.s 			page 55


3054:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_EncoderMode: specifies the TIMx Encoder Mode.
3055:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
3056:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_EncoderMode_TI1: Counter counts on TI1FP1 edge depending on TI2FP2 level.
3057:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_EncoderMode_TI2: Counter counts on TI2FP2 edge depending on TI1FP1 level.
3058:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_EncoderMode_TI12: Counter counts on both TI1FP1 and TI2FP2 edges depending
3059:./FWLIB/src/stm32f4xx_tim.c ****   *                                       on the level of the other input.
3060:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_IC1Polarity: specifies the IC1 Polarity
3061:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
3062:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPolarity_Falling: IC Falling edge.
3063:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPolarity_Rising: IC Rising edge.
3064:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_IC2Polarity: specifies the IC2 Polarity
3065:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
3066:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPolarity_Falling: IC Falling edge.
3067:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPolarity_Rising: IC Rising edge.
3068:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
3069:./FWLIB/src/stm32f4xx_tim.c ****   */
3070:./FWLIB/src/stm32f4xx_tim.c **** void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
3071:./FWLIB/src/stm32f4xx_tim.c ****                                 uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
3072:./FWLIB/src/stm32f4xx_tim.c **** {
3073:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpsmcr = 0;
3074:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr1 = 0;
3075:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccer = 0;
3076:./FWLIB/src/stm32f4xx_tim.c ****     
3077:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
3078:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
3079:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
3080:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
3081:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));
3082:./FWLIB/src/stm32f4xx_tim.c **** 
3083:./FWLIB/src/stm32f4xx_tim.c ****   /* Get the TIMx SMCR register value */
3084:./FWLIB/src/stm32f4xx_tim.c ****   tmpsmcr = TIMx->SMCR;
3085:./FWLIB/src/stm32f4xx_tim.c **** 
3086:./FWLIB/src/stm32f4xx_tim.c ****   /* Get the TIMx CCMR1 register value */
3087:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
3088:./FWLIB/src/stm32f4xx_tim.c **** 
3089:./FWLIB/src/stm32f4xx_tim.c ****   /* Get the TIMx CCER register value */
3090:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer = TIMx->CCER;
3091:./FWLIB/src/stm32f4xx_tim.c **** 
3092:./FWLIB/src/stm32f4xx_tim.c ****   /* Set the encoder Mode */
3093:./FWLIB/src/stm32f4xx_tim.c ****   tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
3094:./FWLIB/src/stm32f4xx_tim.c ****   tmpsmcr |= TIM_EncoderMode;
3095:./FWLIB/src/stm32f4xx_tim.c **** 
3096:./FWLIB/src/stm32f4xx_tim.c ****   /* Select the Capture Compare 1 and the Capture Compare 2 as input */
3097:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
3098:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
3099:./FWLIB/src/stm32f4xx_tim.c **** 
3100:./FWLIB/src/stm32f4xx_tim.c ****   /* Set the TI1 and the TI2 Polarities */
3101:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
3102:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
3103:./FWLIB/src/stm32f4xx_tim.c **** 
3104:./FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx SMCR */
3105:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->SMCR = tmpsmcr;
3106:./FWLIB/src/stm32f4xx_tim.c **** 
3107:./FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR1 */
3108:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
3109:./FWLIB/src/stm32f4xx_tim.c **** 
3110:./FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCER */
ARM GAS  /tmp/ccEzGk5p.s 			page 56


3111:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER = tmpccer;
3112:./FWLIB/src/stm32f4xx_tim.c **** }
3113:./FWLIB/src/stm32f4xx_tim.c **** 
3114:./FWLIB/src/stm32f4xx_tim.c **** /**
3115:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Enables or disables the TIMx's Hall sensor interface.
3116:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
3117:./FWLIB/src/stm32f4xx_tim.c ****   *         peripheral.
3118:./FWLIB/src/stm32f4xx_tim.c ****   * @param  NewState: new state of the TIMx Hall sensor interface.
3119:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
3120:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
3121:./FWLIB/src/stm32f4xx_tim.c ****   */
3122:./FWLIB/src/stm32f4xx_tim.c **** void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
3123:./FWLIB/src/stm32f4xx_tim.c **** {
3124:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
3125:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
3126:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
3127:./FWLIB/src/stm32f4xx_tim.c **** 
3128:./FWLIB/src/stm32f4xx_tim.c ****   if (NewState != DISABLE)
3129:./FWLIB/src/stm32f4xx_tim.c ****   {
3130:./FWLIB/src/stm32f4xx_tim.c ****     /* Set the TI1S Bit */
3131:./FWLIB/src/stm32f4xx_tim.c ****     TIMx->CR2 |= TIM_CR2_TI1S;
3132:./FWLIB/src/stm32f4xx_tim.c ****   }
3133:./FWLIB/src/stm32f4xx_tim.c ****   else
3134:./FWLIB/src/stm32f4xx_tim.c ****   {
3135:./FWLIB/src/stm32f4xx_tim.c ****     /* Reset the TI1S Bit */
3136:./FWLIB/src/stm32f4xx_tim.c ****     TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
3137:./FWLIB/src/stm32f4xx_tim.c ****   }
3138:./FWLIB/src/stm32f4xx_tim.c **** }
3139:./FWLIB/src/stm32f4xx_tim.c **** /**
3140:./FWLIB/src/stm32f4xx_tim.c ****   * @}
3141:./FWLIB/src/stm32f4xx_tim.c ****   */
3142:./FWLIB/src/stm32f4xx_tim.c **** 
3143:./FWLIB/src/stm32f4xx_tim.c **** /** @defgroup TIM_Group9 Specific remapping management function
3144:./FWLIB/src/stm32f4xx_tim.c ****  *  @brief   Specific remapping management function
3145:./FWLIB/src/stm32f4xx_tim.c ****  *
3146:./FWLIB/src/stm32f4xx_tim.c **** @verbatim   
3147:./FWLIB/src/stm32f4xx_tim.c ****  ===============================================================================
3148:./FWLIB/src/stm32f4xx_tim.c ****               ##### Specific remapping management function #####
3149:./FWLIB/src/stm32f4xx_tim.c ****  ===============================================================================  
3150:./FWLIB/src/stm32f4xx_tim.c **** 
3151:./FWLIB/src/stm32f4xx_tim.c **** @endverbatim
3152:./FWLIB/src/stm32f4xx_tim.c ****   * @{
3153:./FWLIB/src/stm32f4xx_tim.c ****   */
3154:./FWLIB/src/stm32f4xx_tim.c **** 
3155:./FWLIB/src/stm32f4xx_tim.c **** /**
3156:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configures the TIM2, TIM5 and TIM11 Remapping input capabilities.
3157:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 2, 5 or 11 to select the TIM peripheral.
3158:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_Remap: specifies the TIM input remapping source.
3159:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
3160:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM2_TIM8_TRGO: TIM2 ITR1 input is connected to TIM8 Trigger output(default)
3161:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM2_ETH_PTP:   TIM2 ITR1 input is connected to ETH PTP trogger output.
3162:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM2_USBFS_SOF: TIM2 ITR1 input is connected to USB FS SOF. 
3163:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM2_USBHS_SOF: TIM2 ITR1 input is connected to USB HS SOF. 
3164:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM5_GPIO:      TIM5 CH4 input is connected to dedicated Timer pin(default)
3165:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM5_LSI:       TIM5 CH4 input is connected to LSI clock.
3166:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM5_LSE:       TIM5 CH4 input is connected to LSE clock.
3167:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM5_RTC:       TIM5 CH4 input is connected to RTC Output event.
ARM GAS  /tmp/ccEzGk5p.s 			page 57


3168:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM11_GPIO:     TIM11 CH4 input is connected to dedicated Timer pin(default) 
3169:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM11_HSE:      TIM11 CH4 input is connected to HSE_RTC clock
3170:./FWLIB/src/stm32f4xx_tim.c ****   *                                 (HSE divided by a programmable prescaler)  
3171:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
3172:./FWLIB/src/stm32f4xx_tim.c ****   */
3173:./FWLIB/src/stm32f4xx_tim.c **** void TIM_RemapConfig(TIM_TypeDef* TIMx, uint16_t TIM_Remap)
3174:./FWLIB/src/stm32f4xx_tim.c **** {
3175:./FWLIB/src/stm32f4xx_tim.c ****  /* Check the parameters */
3176:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
3177:./FWLIB/src/stm32f4xx_tim.c ****   assert_param(IS_TIM_REMAP(TIM_Remap));
3178:./FWLIB/src/stm32f4xx_tim.c **** 
3179:./FWLIB/src/stm32f4xx_tim.c ****   /* Set the Timer remapping configuration */
3180:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->OR =  TIM_Remap;
3181:./FWLIB/src/stm32f4xx_tim.c **** }
3182:./FWLIB/src/stm32f4xx_tim.c **** /**
3183:./FWLIB/src/stm32f4xx_tim.c ****   * @}
3184:./FWLIB/src/stm32f4xx_tim.c ****   */
3185:./FWLIB/src/stm32f4xx_tim.c **** 
3186:./FWLIB/src/stm32f4xx_tim.c **** /**
3187:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configure the TI1 as Input.
3188:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13 or 14 
3189:./FWLIB/src/stm32f4xx_tim.c ****   *         to select the TIM peripheral.
3190:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ICPolarity : The Input Polarity.
3191:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
3192:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPolarity_Rising
3193:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPolarity_Falling
3194:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPolarity_BothEdge  
3195:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ICSelection: specifies the input to be used.
3196:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
3197:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICSelection_DirectTI: TIM Input 1 is selected to be connected to IC1.
3198:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICSelection_IndirectTI: TIM Input 1 is selected to be connected to IC2.
3199:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICSelection_TRC: TIM Input 1 is selected to be connected to TRC.
3200:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ICFilter: Specifies the Input Capture Filter.
3201:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter must be a value between 0x00 and 0x0F.
3202:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
3203:./FWLIB/src/stm32f4xx_tim.c ****   */
3204:./FWLIB/src/stm32f4xx_tim.c **** static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
3205:./FWLIB/src/stm32f4xx_tim.c ****                        uint16_t TIM_ICFilter)
3206:./FWLIB/src/stm32f4xx_tim.c **** {
  27              		.loc 1 3206 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
  33 0000 30B4     		push	{r4, r5}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 4, -8
  37              		.cfi_offset 5, -4
  38              	.LVL1:
3207:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr1 = 0, tmpccer = 0;
3208:./FWLIB/src/stm32f4xx_tim.c **** 
3209:./FWLIB/src/stm32f4xx_tim.c ****   /* Disable the Channel 1: Reset the CC1E Bit */
3210:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  39              		.loc 1 3210 0
  40 0002 048C     		ldrh	r4, [r0, #32]
ARM GAS  /tmp/ccEzGk5p.s 			page 58


  41 0004 A4B2     		uxth	r4, r4
  42 0006 24F00104 		bic	r4, r4, #1
  43 000a A4B2     		uxth	r4, r4
  44 000c 0484     		strh	r4, [r0, #32]	@ movhi
3211:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
  45              		.loc 1 3211 0
  46 000e 058B     		ldrh	r5, [r0, #24]
  47 0010 ADB2     		uxth	r5, r5
  48              	.LVL2:
3212:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer = TIMx->CCER;
  49              		.loc 1 3212 0
  50 0012 048C     		ldrh	r4, [r0, #32]
  51 0014 A4B2     		uxth	r4, r4
  52              	.LVL3:
3213:./FWLIB/src/stm32f4xx_tim.c **** 
3214:./FWLIB/src/stm32f4xx_tim.c ****   /* Select the Input and set the filter */
3215:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  53              		.loc 1 3215 0
  54 0016 25F0F305 		bic	r5, r5, #243
  55              	.LVL4:
3216:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
  56              		.loc 1 3216 0
  57 001a 1B01     		lsls	r3, r3, #4
  58              	.LVL5:
  59 001c 9BB2     		uxth	r3, r3
  60 001e 1A43     		orrs	r2, r2, r3
  61              	.LVL6:
  62 0020 1543     		orrs	r5, r5, r2
  63              	.LVL7:
3217:./FWLIB/src/stm32f4xx_tim.c **** 
3218:./FWLIB/src/stm32f4xx_tim.c ****   /* Select the Polarity and set the CC1E Bit */
3219:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  64              		.loc 1 3219 0
  65 0022 24F00A04 		bic	r4, r4, #10
  66              	.LVL8:
3220:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
  67              		.loc 1 3220 0
  68 0026 0C43     		orrs	r4, r4, r1
  69              	.LVL9:
  70 0028 44F00104 		orr	r4, r4, #1
  71              	.LVL10:
3221:./FWLIB/src/stm32f4xx_tim.c **** 
3222:./FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR1 and CCER registers */
3223:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
  72              		.loc 1 3223 0
  73 002c 0583     		strh	r5, [r0, #24]	@ movhi
3224:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER = tmpccer;
  74              		.loc 1 3224 0
  75 002e 0484     		strh	r4, [r0, #32]	@ movhi
3225:./FWLIB/src/stm32f4xx_tim.c **** }
  76              		.loc 1 3225 0
  77 0030 30BC     		pop	{r4, r5}
  78              	.LCFI1:
  79              		.cfi_restore 5
  80              		.cfi_restore 4
  81              		.cfi_def_cfa_offset 0
  82              	.LVL11:
ARM GAS  /tmp/ccEzGk5p.s 			page 59


  83 0032 7047     		bx	lr
  84              		.cfi_endproc
  85              	.LFE200:
  87              		.section	.text.TI2_Config,"ax",%progbits
  88              		.align	1
  89              		.syntax unified
  90              		.thumb
  91              		.thumb_func
  92              		.fpu fpv4-sp-d16
  94              	TI2_Config:
  95              	.LFB201:
3226:./FWLIB/src/stm32f4xx_tim.c **** 
3227:./FWLIB/src/stm32f4xx_tim.c **** /**
3228:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configure the TI2 as Input.
3229:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
3230:./FWLIB/src/stm32f4xx_tim.c ****   *         peripheral.
3231:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ICPolarity : The Input Polarity.
3232:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
3233:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPolarity_Rising
3234:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPolarity_Falling
3235:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPolarity_BothEdge   
3236:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ICSelection: specifies the input to be used.
3237:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
3238:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICSelection_DirectTI: TIM Input 2 is selected to be connected to IC2.
3239:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICSelection_IndirectTI: TIM Input 2 is selected to be connected to IC1.
3240:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICSelection_TRC: TIM Input 2 is selected to be connected to TRC.
3241:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ICFilter: Specifies the Input Capture Filter.
3242:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter must be a value between 0x00 and 0x0F.
3243:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
3244:./FWLIB/src/stm32f4xx_tim.c ****   */
3245:./FWLIB/src/stm32f4xx_tim.c **** static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
3246:./FWLIB/src/stm32f4xx_tim.c ****                        uint16_t TIM_ICFilter)
3247:./FWLIB/src/stm32f4xx_tim.c **** {
  96              		.loc 1 3247 0
  97              		.cfi_startproc
  98              		@ args = 0, pretend = 0, frame = 0
  99              		@ frame_needed = 0, uses_anonymous_args = 0
 100              		@ link register save eliminated.
 101              	.LVL12:
 102 0000 30B4     		push	{r4, r5}
 103              	.LCFI2:
 104              		.cfi_def_cfa_offset 8
 105              		.cfi_offset 4, -8
 106              		.cfi_offset 5, -4
 107              	.LVL13:
3248:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
3249:./FWLIB/src/stm32f4xx_tim.c **** 
3250:./FWLIB/src/stm32f4xx_tim.c ****   /* Disable the Channel 2: Reset the CC2E Bit */
3251:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 108              		.loc 1 3251 0
 109 0002 048C     		ldrh	r4, [r0, #32]
 110 0004 A4B2     		uxth	r4, r4
 111 0006 24F01004 		bic	r4, r4, #16
 112 000a A4B2     		uxth	r4, r4
 113 000c 0484     		strh	r4, [r0, #32]	@ movhi
3252:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 114              		.loc 1 3252 0
ARM GAS  /tmp/ccEzGk5p.s 			page 60


 115 000e 058B     		ldrh	r5, [r0, #24]
 116              	.LVL14:
3253:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer = TIMx->CCER;
 117              		.loc 1 3253 0
 118 0010 048C     		ldrh	r4, [r0, #32]
 119 0012 A4B2     		uxth	r4, r4
 120              	.LVL15:
3254:./FWLIB/src/stm32f4xx_tim.c ****   tmp = (uint16_t)(TIM_ICPolarity << 4);
 121              		.loc 1 3254 0
 122 0014 0901     		lsls	r1, r1, #4
 123              	.LVL16:
 124 0016 89B2     		uxth	r1, r1
 125              	.LVL17:
3255:./FWLIB/src/stm32f4xx_tim.c **** 
3256:./FWLIB/src/stm32f4xx_tim.c ****   /* Select the Input and set the filter */
3257:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 126              		.loc 1 3257 0
 127 0018 25F44075 		bic	r5, r5, #768
 128              	.LVL18:
 129 001c 2D05     		lsls	r5, r5, #20
 130 001e 2D0D     		lsrs	r5, r5, #20
 131              	.LVL19:
3258:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 132              		.loc 1 3258 0
 133 0020 1B03     		lsls	r3, r3, #12
 134              	.LVL20:
 135 0022 9BB2     		uxth	r3, r3
 136 0024 2B43     		orrs	r3, r3, r5
 137              	.LVL21:
3259:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 138              		.loc 1 3259 0
 139 0026 1202     		lsls	r2, r2, #8
 140              	.LVL22:
 141 0028 92B2     		uxth	r2, r2
 142 002a 1A43     		orrs	r2, r2, r3
 143              	.LVL23:
3260:./FWLIB/src/stm32f4xx_tim.c **** 
3261:./FWLIB/src/stm32f4xx_tim.c ****   /* Select the Polarity and set the CC2E Bit */
3262:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 144              		.loc 1 3262 0
 145 002c 24F0A004 		bic	r4, r4, #160
 146              	.LVL24:
3263:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 147              		.loc 1 3263 0
 148 0030 0C43     		orrs	r4, r4, r1
 149              	.LVL25:
 150 0032 44F01004 		orr	r4, r4, #16
 151              	.LVL26:
3264:./FWLIB/src/stm32f4xx_tim.c **** 
3265:./FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR1 and CCER registers */
3266:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR1 = tmpccmr1 ;
 152              		.loc 1 3266 0
 153 0036 0283     		strh	r2, [r0, #24]	@ movhi
3267:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER = tmpccer;
 154              		.loc 1 3267 0
 155 0038 0484     		strh	r4, [r0, #32]	@ movhi
3268:./FWLIB/src/stm32f4xx_tim.c **** }
ARM GAS  /tmp/ccEzGk5p.s 			page 61


 156              		.loc 1 3268 0
 157 003a 30BC     		pop	{r4, r5}
 158              	.LCFI3:
 159              		.cfi_restore 5
 160              		.cfi_restore 4
 161              		.cfi_def_cfa_offset 0
 162              	.LVL27:
 163 003c 7047     		bx	lr
 164              		.cfi_endproc
 165              	.LFE201:
 167              		.section	.text.TI3_Config,"ax",%progbits
 168              		.align	1
 169              		.syntax unified
 170              		.thumb
 171              		.thumb_func
 172              		.fpu fpv4-sp-d16
 174              	TI3_Config:
 175              	.LFB202:
3269:./FWLIB/src/stm32f4xx_tim.c **** 
3270:./FWLIB/src/stm32f4xx_tim.c **** /**
3271:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configure the TI3 as Input.
3272:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
3273:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ICPolarity : The Input Polarity.
3274:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
3275:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPolarity_Rising
3276:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPolarity_Falling
3277:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPolarity_BothEdge         
3278:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ICSelection: specifies the input to be used.
3279:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
3280:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICSelection_DirectTI: TIM Input 3 is selected to be connected to IC3.
3281:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICSelection_IndirectTI: TIM Input 3 is selected to be connected to IC4.
3282:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICSelection_TRC: TIM Input 3 is selected to be connected to TRC.
3283:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ICFilter: Specifies the Input Capture Filter.
3284:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter must be a value between 0x00 and 0x0F.
3285:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
3286:./FWLIB/src/stm32f4xx_tim.c ****   */
3287:./FWLIB/src/stm32f4xx_tim.c **** static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
3288:./FWLIB/src/stm32f4xx_tim.c ****                        uint16_t TIM_ICFilter)
3289:./FWLIB/src/stm32f4xx_tim.c **** {
 176              		.loc 1 3289 0
 177              		.cfi_startproc
 178              		@ args = 0, pretend = 0, frame = 0
 179              		@ frame_needed = 0, uses_anonymous_args = 0
 180              		@ link register save eliminated.
 181              	.LVL28:
 182 0000 30B4     		push	{r4, r5}
 183              	.LCFI4:
 184              		.cfi_def_cfa_offset 8
 185              		.cfi_offset 4, -8
 186              		.cfi_offset 5, -4
 187              	.LVL29:
3290:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
3291:./FWLIB/src/stm32f4xx_tim.c **** 
3292:./FWLIB/src/stm32f4xx_tim.c ****   /* Disable the Channel 3: Reset the CC3E Bit */
3293:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 188              		.loc 1 3293 0
 189 0002 048C     		ldrh	r4, [r0, #32]
ARM GAS  /tmp/ccEzGk5p.s 			page 62


 190 0004 A4B2     		uxth	r4, r4
 191 0006 24F48074 		bic	r4, r4, #256
 192 000a A4B2     		uxth	r4, r4
 193 000c 0484     		strh	r4, [r0, #32]	@ movhi
3294:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 194              		.loc 1 3294 0
 195 000e 858B     		ldrh	r5, [r0, #28]
 196 0010 ADB2     		uxth	r5, r5
 197              	.LVL30:
3295:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer = TIMx->CCER;
 198              		.loc 1 3295 0
 199 0012 048C     		ldrh	r4, [r0, #32]
 200 0014 A4B2     		uxth	r4, r4
 201              	.LVL31:
3296:./FWLIB/src/stm32f4xx_tim.c ****   tmp = (uint16_t)(TIM_ICPolarity << 8);
 202              		.loc 1 3296 0
 203 0016 0902     		lsls	r1, r1, #8
 204              	.LVL32:
 205 0018 89B2     		uxth	r1, r1
 206              	.LVL33:
3297:./FWLIB/src/stm32f4xx_tim.c **** 
3298:./FWLIB/src/stm32f4xx_tim.c ****   /* Select the Input and set the filter */
3299:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 207              		.loc 1 3299 0
 208 001a 25F0F305 		bic	r5, r5, #243
 209              	.LVL34:
3300:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 210              		.loc 1 3300 0
 211 001e 1B01     		lsls	r3, r3, #4
 212              	.LVL35:
 213 0020 9BB2     		uxth	r3, r3
 214 0022 1A43     		orrs	r2, r2, r3
 215              	.LVL36:
 216 0024 1543     		orrs	r5, r5, r2
 217              	.LVL37:
3301:./FWLIB/src/stm32f4xx_tim.c **** 
3302:./FWLIB/src/stm32f4xx_tim.c ****   /* Select the Polarity and set the CC3E Bit */
3303:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 218              		.loc 1 3303 0
 219 0026 24F42064 		bic	r4, r4, #2560
 220              	.LVL38:
3304:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 221              		.loc 1 3304 0
 222 002a 0C43     		orrs	r4, r4, r1
 223              	.LVL39:
 224 002c 44F48074 		orr	r4, r4, #256
 225              	.LVL40:
3305:./FWLIB/src/stm32f4xx_tim.c **** 
3306:./FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR2 and CCER registers */
3307:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 226              		.loc 1 3307 0
 227 0030 8583     		strh	r5, [r0, #28]	@ movhi
3308:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER = tmpccer;
 228              		.loc 1 3308 0
 229 0032 0484     		strh	r4, [r0, #32]	@ movhi
3309:./FWLIB/src/stm32f4xx_tim.c **** }
 230              		.loc 1 3309 0
ARM GAS  /tmp/ccEzGk5p.s 			page 63


 231 0034 30BC     		pop	{r4, r5}
 232              	.LCFI5:
 233              		.cfi_restore 5
 234              		.cfi_restore 4
 235              		.cfi_def_cfa_offset 0
 236              	.LVL41:
 237 0036 7047     		bx	lr
 238              		.cfi_endproc
 239              	.LFE202:
 241              		.section	.text.TI4_Config,"ax",%progbits
 242              		.align	1
 243              		.syntax unified
 244              		.thumb
 245              		.thumb_func
 246              		.fpu fpv4-sp-d16
 248              	TI4_Config:
 249              	.LFB203:
3310:./FWLIB/src/stm32f4xx_tim.c **** 
3311:./FWLIB/src/stm32f4xx_tim.c **** /**
3312:./FWLIB/src/stm32f4xx_tim.c ****   * @brief  Configure the TI4 as Input.
3313:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
3314:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ICPolarity : The Input Polarity.
3315:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
3316:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPolarity_Rising
3317:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPolarity_Falling
3318:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICPolarity_BothEdge     
3319:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ICSelection: specifies the input to be used.
3320:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
3321:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICSelection_DirectTI: TIM Input 4 is selected to be connected to IC4.
3322:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICSelection_IndirectTI: TIM Input 4 is selected to be connected to IC3.
3323:./FWLIB/src/stm32f4xx_tim.c ****   *            @arg TIM_ICSelection_TRC: TIM Input 4 is selected to be connected to TRC.
3324:./FWLIB/src/stm32f4xx_tim.c ****   * @param  TIM_ICFilter: Specifies the Input Capture Filter.
3325:./FWLIB/src/stm32f4xx_tim.c ****   *          This parameter must be a value between 0x00 and 0x0F.
3326:./FWLIB/src/stm32f4xx_tim.c ****   * @retval None
3327:./FWLIB/src/stm32f4xx_tim.c ****   */
3328:./FWLIB/src/stm32f4xx_tim.c **** static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
3329:./FWLIB/src/stm32f4xx_tim.c ****                        uint16_t TIM_ICFilter)
3330:./FWLIB/src/stm32f4xx_tim.c **** {
 250              		.loc 1 3330 0
 251              		.cfi_startproc
 252              		@ args = 0, pretend = 0, frame = 0
 253              		@ frame_needed = 0, uses_anonymous_args = 0
 254              		@ link register save eliminated.
 255              	.LVL42:
 256 0000 30B4     		push	{r4, r5}
 257              	.LCFI6:
 258              		.cfi_def_cfa_offset 8
 259              		.cfi_offset 4, -8
 260              		.cfi_offset 5, -4
 261              	.LVL43:
3331:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
3332:./FWLIB/src/stm32f4xx_tim.c **** 
3333:./FWLIB/src/stm32f4xx_tim.c ****   /* Disable the Channel 4: Reset the CC4E Bit */
3334:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 262              		.loc 1 3334 0
 263 0002 048C     		ldrh	r4, [r0, #32]
 264 0004 A4B2     		uxth	r4, r4
ARM GAS  /tmp/ccEzGk5p.s 			page 64


 265 0006 24F48054 		bic	r4, r4, #4096
 266 000a A4B2     		uxth	r4, r4
 267 000c 0484     		strh	r4, [r0, #32]	@ movhi
3335:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 268              		.loc 1 3335 0
 269 000e 858B     		ldrh	r5, [r0, #28]
 270              	.LVL44:
3336:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer = TIMx->CCER;
 271              		.loc 1 3336 0
 272 0010 048C     		ldrh	r4, [r0, #32]
 273              	.LVL45:
3337:./FWLIB/src/stm32f4xx_tim.c ****   tmp = (uint16_t)(TIM_ICPolarity << 12);
 274              		.loc 1 3337 0
 275 0012 0903     		lsls	r1, r1, #12
 276              	.LVL46:
 277 0014 89B2     		uxth	r1, r1
 278              	.LVL47:
3338:./FWLIB/src/stm32f4xx_tim.c **** 
3339:./FWLIB/src/stm32f4xx_tim.c ****   /* Select the Input and set the filter */
3340:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 279              		.loc 1 3340 0
 280 0016 25F44075 		bic	r5, r5, #768
 281              	.LVL48:
 282 001a 2D05     		lsls	r5, r5, #20
 283 001c 2D0D     		lsrs	r5, r5, #20
 284              	.LVL49:
3341:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 285              		.loc 1 3341 0
 286 001e 1202     		lsls	r2, r2, #8
 287              	.LVL50:
 288 0020 92B2     		uxth	r2, r2
 289 0022 2A43     		orrs	r2, r2, r5
 290              	.LVL51:
3342:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 291              		.loc 1 3342 0
 292 0024 1B03     		lsls	r3, r3, #12
 293              	.LVL52:
 294 0026 9BB2     		uxth	r3, r3
 295 0028 1343     		orrs	r3, r3, r2
 296              	.LVL53:
3343:./FWLIB/src/stm32f4xx_tim.c **** 
3344:./FWLIB/src/stm32f4xx_tim.c ****   /* Select the Polarity and set the CC4E Bit */
3345:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 297              		.loc 1 3345 0
 298 002a 24F40054 		bic	r4, r4, #8192
 299              	.LVL54:
 300 002e 6404     		lsls	r4, r4, #17
 301 0030 640C     		lsrs	r4, r4, #17
 302              	.LVL55:
3346:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 303              		.loc 1 3346 0
 304 0032 2143     		orrs	r1, r1, r4
 305              	.LVL56:
 306 0034 41F48051 		orr	r1, r1, #4096
 307              	.LVL57:
3347:./FWLIB/src/stm32f4xx_tim.c **** 
3348:./FWLIB/src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR2 and CCER registers */
ARM GAS  /tmp/ccEzGk5p.s 			page 65


3349:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 308              		.loc 1 3349 0
 309 0038 8383     		strh	r3, [r0, #28]	@ movhi
3350:./FWLIB/src/stm32f4xx_tim.c ****   TIMx->CCER = tmpccer ;
 310              		.loc 1 3350 0
 311 003a 0184     		strh	r1, [r0, #32]	@ movhi
3351:./FWLIB/src/stm32f4xx_tim.c **** }
 312              		.loc 1 3351 0
 313 003c 30BC     		pop	{r4, r5}
 314              	.LCFI7:
 315              		.cfi_restore 5
 316              		.cfi_restore 4
 317              		.cfi_def_cfa_offset 0
 318 003e 7047     		bx	lr
 319              		.cfi_endproc
 320              	.LFE203:
 322              		.section	.text.TIM_DeInit,"ax",%progbits
 323              		.align	1
 324              		.global	TIM_DeInit
 325              		.syntax unified
 326              		.thumb
 327              		.thumb_func
 328              		.fpu fpv4-sp-d16
 330              	TIM_DeInit:
 331              	.LFB112:
 201:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 332              		.loc 1 201 0
 333              		.cfi_startproc
 334              		@ args = 0, pretend = 0, frame = 0
 335              		@ frame_needed = 0, uses_anonymous_args = 0
 336              	.LVL58:
 337 0000 08B5     		push	{r3, lr}
 338              	.LCFI8:
 339              		.cfi_def_cfa_offset 8
 340              		.cfi_offset 3, -8
 341              		.cfi_offset 14, -4
 205:./FWLIB/src/stm32f4xx_tim.c ****   {
 342              		.loc 1 205 0
 343 0002 584B     		ldr	r3, .L38
 344 0004 9842     		cmp	r0, r3
 345 0006 31D0     		beq	.L25
 210:./FWLIB/src/stm32f4xx_tim.c ****   {     
 346              		.loc 1 210 0
 347 0008 B0F1804F 		cmp	r0, #1073741824
 348 000c 37D0     		beq	.L26
 215:./FWLIB/src/stm32f4xx_tim.c ****   { 
 349              		.loc 1 215 0
 350 000e 564B     		ldr	r3, .L38+4
 351 0010 9842     		cmp	r0, r3
 352 0012 3DD0     		beq	.L27
 220:./FWLIB/src/stm32f4xx_tim.c ****   { 
 353              		.loc 1 220 0
 354 0014 554B     		ldr	r3, .L38+8
 355 0016 9842     		cmp	r0, r3
 356 0018 43D0     		beq	.L28
 225:./FWLIB/src/stm32f4xx_tim.c ****   {      
 357              		.loc 1 225 0
ARM GAS  /tmp/ccEzGk5p.s 			page 66


 358 001a 554B     		ldr	r3, .L38+12
 359 001c 9842     		cmp	r0, r3
 360 001e 49D0     		beq	.L29
 230:./FWLIB/src/stm32f4xx_tim.c ****   {    
 361              		.loc 1 230 0
 362 0020 544B     		ldr	r3, .L38+16
 363 0022 9842     		cmp	r0, r3
 364 0024 4FD0     		beq	.L30
 235:./FWLIB/src/stm32f4xx_tim.c ****   {      
 365              		.loc 1 235 0
 366 0026 544B     		ldr	r3, .L38+20
 367 0028 9842     		cmp	r0, r3
 368 002a 55D0     		beq	.L31
 240:./FWLIB/src/stm32f4xx_tim.c ****   {      
 369              		.loc 1 240 0
 370 002c 534B     		ldr	r3, .L38+24
 371 002e 9842     		cmp	r0, r3
 372 0030 5BD0     		beq	.L32
 245:./FWLIB/src/stm32f4xx_tim.c ****   {      
 373              		.loc 1 245 0
 374 0032 534B     		ldr	r3, .L38+28
 375 0034 9842     		cmp	r0, r3
 376 0036 61D0     		beq	.L33
 250:./FWLIB/src/stm32f4xx_tim.c ****   {      
 377              		.loc 1 250 0
 378 0038 524B     		ldr	r3, .L38+32
 379 003a 9842     		cmp	r0, r3
 380 003c 69D0     		beq	.L34
 255:./FWLIB/src/stm32f4xx_tim.c ****   {     
 381              		.loc 1 255 0
 382 003e 524B     		ldr	r3, .L38+36
 383 0040 9842     		cmp	r0, r3
 384 0042 71D0     		beq	.L35
 260:./FWLIB/src/stm32f4xx_tim.c ****   {      
 385              		.loc 1 260 0
 386 0044 514B     		ldr	r3, .L38+40
 387 0046 9842     		cmp	r0, r3
 388 0048 79D0     		beq	.L36
 265:./FWLIB/src/stm32f4xx_tim.c ****   {       
 389              		.loc 1 265 0
 390 004a 514B     		ldr	r3, .L38+44
 391 004c 9842     		cmp	r0, r3
 392 004e 7FD0     		beq	.L37
 272:./FWLIB/src/stm32f4xx_tim.c ****     {     
 393              		.loc 1 272 0
 394 0050 504B     		ldr	r3, .L38+48
 395 0052 9842     		cmp	r0, r3
 396 0054 12D1     		bne	.L9
 274:./FWLIB/src/stm32f4xx_tim.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 397              		.loc 1 274 0
 398 0056 0121     		movs	r1, #1
 399 0058 4FF48070 		mov	r0, #256
 400              	.LVL59:
 401 005c FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 402              	.LVL60:
 275:./FWLIB/src/stm32f4xx_tim.c ****     }   
 403              		.loc 1 275 0
ARM GAS  /tmp/ccEzGk5p.s 			page 67


 404 0060 0021     		movs	r1, #0
 405 0062 4FF48070 		mov	r0, #256
 406 0066 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 407              	.LVL61:
 278:./FWLIB/src/stm32f4xx_tim.c **** 
 408              		.loc 1 278 0
 409 006a 07E0     		b	.L9
 410              	.LVL62:
 411              	.L25:
 207:./FWLIB/src/stm32f4xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 412              		.loc 1 207 0
 413 006c 0121     		movs	r1, #1
 414 006e 0846     		mov	r0, r1
 415              	.LVL63:
 416 0070 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 417              	.LVL64:
 208:./FWLIB/src/stm32f4xx_tim.c ****   } 
 418              		.loc 1 208 0
 419 0074 0021     		movs	r1, #0
 420 0076 0120     		movs	r0, #1
 421 0078 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 422              	.LVL65:
 423              	.L9:
 278:./FWLIB/src/stm32f4xx_tim.c **** 
 424              		.loc 1 278 0
 425 007c 08BD     		pop	{r3, pc}
 426              	.LVL66:
 427              	.L26:
 212:./FWLIB/src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 428              		.loc 1 212 0
 429 007e 0121     		movs	r1, #1
 430 0080 0846     		mov	r0, r1
 431              	.LVL67:
 432 0082 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 433              	.LVL68:
 213:./FWLIB/src/stm32f4xx_tim.c ****   }  
 434              		.loc 1 213 0
 435 0086 0021     		movs	r1, #0
 436 0088 0120     		movs	r0, #1
 437 008a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 438              	.LVL69:
 439 008e F5E7     		b	.L9
 440              	.LVL70:
 441              	.L27:
 217:./FWLIB/src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 442              		.loc 1 217 0
 443 0090 0121     		movs	r1, #1
 444 0092 0220     		movs	r0, #2
 445              	.LVL71:
 446 0094 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 447              	.LVL72:
 218:./FWLIB/src/stm32f4xx_tim.c ****   }  
 448              		.loc 1 218 0
 449 0098 0021     		movs	r1, #0
 450 009a 0220     		movs	r0, #2
 451 009c FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 452              	.LVL73:
ARM GAS  /tmp/ccEzGk5p.s 			page 68


 453 00a0 ECE7     		b	.L9
 454              	.LVL74:
 455              	.L28:
 222:./FWLIB/src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 456              		.loc 1 222 0
 457 00a2 0121     		movs	r1, #1
 458 00a4 0420     		movs	r0, #4
 459              	.LVL75:
 460 00a6 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 461              	.LVL76:
 223:./FWLIB/src/stm32f4xx_tim.c ****   }  
 462              		.loc 1 223 0
 463 00aa 0021     		movs	r1, #0
 464 00ac 0420     		movs	r0, #4
 465 00ae FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 466              	.LVL77:
 467 00b2 E3E7     		b	.L9
 468              	.LVL78:
 469              	.L29:
 227:./FWLIB/src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 470              		.loc 1 227 0
 471 00b4 0121     		movs	r1, #1
 472 00b6 0820     		movs	r0, #8
 473              	.LVL79:
 474 00b8 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 475              	.LVL80:
 228:./FWLIB/src/stm32f4xx_tim.c ****   }  
 476              		.loc 1 228 0
 477 00bc 0021     		movs	r1, #0
 478 00be 0820     		movs	r0, #8
 479 00c0 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 480              	.LVL81:
 481 00c4 DAE7     		b	.L9
 482              	.LVL82:
 483              	.L30:
 232:./FWLIB/src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 484              		.loc 1 232 0
 485 00c6 0121     		movs	r1, #1
 486 00c8 1020     		movs	r0, #16
 487              	.LVL83:
 488 00ca FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 489              	.LVL84:
 233:./FWLIB/src/stm32f4xx_tim.c ****   }  
 490              		.loc 1 233 0
 491 00ce 0021     		movs	r1, #0
 492 00d0 1020     		movs	r0, #16
 493 00d2 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 494              	.LVL85:
 495 00d6 D1E7     		b	.L9
 496              	.LVL86:
 497              	.L31:
 237:./FWLIB/src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 498              		.loc 1 237 0
 499 00d8 0121     		movs	r1, #1
 500 00da 2020     		movs	r0, #32
 501              	.LVL87:
 502 00dc FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
ARM GAS  /tmp/ccEzGk5p.s 			page 69


 503              	.LVL88:
 238:./FWLIB/src/stm32f4xx_tim.c ****   }  
 504              		.loc 1 238 0
 505 00e0 0021     		movs	r1, #0
 506 00e2 2020     		movs	r0, #32
 507 00e4 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 508              	.LVL89:
 509 00e8 C8E7     		b	.L9
 510              	.LVL90:
 511              	.L32:
 242:./FWLIB/src/stm32f4xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 512              		.loc 1 242 0
 513 00ea 0121     		movs	r1, #1
 514 00ec 0220     		movs	r0, #2
 515              	.LVL91:
 516 00ee FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 517              	.LVL92:
 243:./FWLIB/src/stm32f4xx_tim.c ****   }  
 518              		.loc 1 243 0
 519 00f2 0021     		movs	r1, #0
 520 00f4 0220     		movs	r0, #2
 521 00f6 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 522              	.LVL93:
 523 00fa BFE7     		b	.L9
 524              	.LVL94:
 525              	.L33:
 247:./FWLIB/src/stm32f4xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 526              		.loc 1 247 0
 527 00fc 0121     		movs	r1, #1
 528 00fe 4FF48030 		mov	r0, #65536
 529              	.LVL95:
 530 0102 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 531              	.LVL96:
 248:./FWLIB/src/stm32f4xx_tim.c ****    }  
 532              		.loc 1 248 0
 533 0106 0021     		movs	r1, #0
 534 0108 4FF48030 		mov	r0, #65536
 535 010c FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 536              	.LVL97:
 537 0110 B4E7     		b	.L9
 538              	.LVL98:
 539              	.L34:
 252:./FWLIB/src/stm32f4xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 540              		.loc 1 252 0
 541 0112 0121     		movs	r1, #1
 542 0114 4FF40030 		mov	r0, #131072
 543              	.LVL99:
 544 0118 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 545              	.LVL100:
 253:./FWLIB/src/stm32f4xx_tim.c ****   }  
 546              		.loc 1 253 0
 547 011c 0021     		movs	r1, #0
 548 011e 4FF40030 		mov	r0, #131072
 549 0122 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 550              	.LVL101:
 551 0126 A9E7     		b	.L9
 552              	.LVL102:
ARM GAS  /tmp/ccEzGk5p.s 			page 70


 553              	.L35:
 257:./FWLIB/src/stm32f4xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 554              		.loc 1 257 0
 555 0128 0121     		movs	r1, #1
 556 012a 4FF48020 		mov	r0, #262144
 557              	.LVL103:
 558 012e FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 559              	.LVL104:
 258:./FWLIB/src/stm32f4xx_tim.c ****   }  
 560              		.loc 1 258 0
 561 0132 0021     		movs	r1, #0
 562 0134 4FF48020 		mov	r0, #262144
 563 0138 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 564              	.LVL105:
 565 013c 9EE7     		b	.L9
 566              	.LVL106:
 567              	.L36:
 262:./FWLIB/src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 568              		.loc 1 262 0
 569 013e 0121     		movs	r1, #1
 570 0140 4020     		movs	r0, #64
 571              	.LVL107:
 572 0142 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 573              	.LVL108:
 263:./FWLIB/src/stm32f4xx_tim.c ****   }  
 574              		.loc 1 263 0
 575 0146 0021     		movs	r1, #0
 576 0148 4020     		movs	r0, #64
 577 014a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 578              	.LVL109:
 579 014e 95E7     		b	.L9
 580              	.LVL110:
 581              	.L37:
 267:./FWLIB/src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 582              		.loc 1 267 0
 583 0150 0121     		movs	r1, #1
 584 0152 8020     		movs	r0, #128
 585              	.LVL111:
 586 0154 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 587              	.LVL112:
 268:./FWLIB/src/stm32f4xx_tim.c ****   }  
 588              		.loc 1 268 0
 589 0158 0021     		movs	r1, #0
 590 015a 8020     		movs	r0, #128
 591 015c FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 592              	.LVL113:
 593 0160 8CE7     		b	.L9
 594              	.L39:
 595 0162 00BF     		.align	2
 596              	.L38:
 597 0164 00000140 		.word	1073807360
 598 0168 00040040 		.word	1073742848
 599 016c 00080040 		.word	1073743872
 600 0170 000C0040 		.word	1073744896
 601 0174 00100040 		.word	1073745920
 602 0178 00140040 		.word	1073746944
 603 017c 00040140 		.word	1073808384
ARM GAS  /tmp/ccEzGk5p.s 			page 71


 604 0180 00400140 		.word	1073823744
 605 0184 00440140 		.word	1073824768
 606 0188 00480140 		.word	1073825792
 607 018c 00180040 		.word	1073747968
 608 0190 001C0040 		.word	1073748992
 609 0194 00200040 		.word	1073750016
 610              		.cfi_endproc
 611              	.LFE112:
 613              		.section	.text.TIM_TimeBaseInit,"ax",%progbits
 614              		.align	1
 615              		.global	TIM_TimeBaseInit
 616              		.syntax unified
 617              		.thumb
 618              		.thumb_func
 619              		.fpu fpv4-sp-d16
 621              	TIM_TimeBaseInit:
 622              	.LFB113:
 289:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpcr1 = 0;
 623              		.loc 1 289 0
 624              		.cfi_startproc
 625              		@ args = 0, pretend = 0, frame = 0
 626              		@ frame_needed = 0, uses_anonymous_args = 0
 627              		@ link register save eliminated.
 628              	.LVL114:
 297:./FWLIB/src/stm32f4xx_tim.c **** 
 629              		.loc 1 297 0
 630 0000 0388     		ldrh	r3, [r0]
 631 0002 9BB2     		uxth	r3, r3
 632              	.LVL115:
 299:./FWLIB/src/stm32f4xx_tim.c ****      (TIMx == TIM2) || (TIMx == TIM3)||
 633              		.loc 1 299 0
 634 0004 1B4A     		ldr	r2, .L46
 635 0006 9042     		cmp	r0, r2
 636 0008 12D0     		beq	.L41
 299:./FWLIB/src/stm32f4xx_tim.c ****      (TIMx == TIM2) || (TIMx == TIM3)||
 637              		.loc 1 299 0 is_stmt 0 discriminator 1
 638 000a 02F58062 		add	r2, r2, #1024
 639 000e 9042     		cmp	r0, r2
 640 0010 0ED0     		beq	.L41
 299:./FWLIB/src/stm32f4xx_tim.c ****      (TIMx == TIM2) || (TIMx == TIM3)||
 641              		.loc 1 299 0 discriminator 2
 642 0012 B0F1804F 		cmp	r0, #1073741824
 643 0016 0BD0     		beq	.L41
 300:./FWLIB/src/stm32f4xx_tim.c ****      (TIMx == TIM4) || (TIMx == TIM5)) 
 644              		.loc 1 300 0 is_stmt 1
 645 0018 A2F58032 		sub	r2, r2, #65536
 646 001c 9042     		cmp	r0, r2
 647 001e 07D0     		beq	.L41
 300:./FWLIB/src/stm32f4xx_tim.c ****      (TIMx == TIM4) || (TIMx == TIM5)) 
 648              		.loc 1 300 0 is_stmt 0 discriminator 1
 649 0020 02F58062 		add	r2, r2, #1024
 650 0024 9042     		cmp	r0, r2
 651 0026 03D0     		beq	.L41
 301:./FWLIB/src/stm32f4xx_tim.c ****   {
 652              		.loc 1 301 0 is_stmt 1
 653 0028 02F58062 		add	r2, r2, #1024
 654 002c 9042     		cmp	r0, r2
ARM GAS  /tmp/ccEzGk5p.s 			page 72


 655 002e 03D1     		bne	.L42
 656              	.L41:
 304:./FWLIB/src/stm32f4xx_tim.c ****     tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 657              		.loc 1 304 0
 658 0030 23F07003 		bic	r3, r3, #112
 659              	.LVL116:
 305:./FWLIB/src/stm32f4xx_tim.c ****   }
 660              		.loc 1 305 0
 661 0034 4A88     		ldrh	r2, [r1, #2]
 662 0036 1343     		orrs	r3, r3, r2
 663              	.LVL117:
 664              	.L42:
 308:./FWLIB/src/stm32f4xx_tim.c ****   {
 665              		.loc 1 308 0
 666 0038 0F4A     		ldr	r2, .L46+4
 667 003a 9042     		cmp	r0, r2
 668 003c 08D0     		beq	.L43
 308:./FWLIB/src/stm32f4xx_tim.c ****   {
 669              		.loc 1 308 0 is_stmt 0 discriminator 1
 670 003e 02F58062 		add	r2, r2, #1024
 671 0042 9042     		cmp	r0, r2
 672 0044 04D0     		beq	.L43
 311:./FWLIB/src/stm32f4xx_tim.c ****     tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 673              		.loc 1 311 0 is_stmt 1
 674 0046 23F44073 		bic	r3, r3, #768
 675              	.LVL118:
 676 004a 9BB2     		uxth	r3, r3
 677              	.LVL119:
 312:./FWLIB/src/stm32f4xx_tim.c ****   }
 678              		.loc 1 312 0
 679 004c 0A89     		ldrh	r2, [r1, #8]
 680 004e 1343     		orrs	r3, r3, r2
 681              	.LVL120:
 682              	.L43:
 315:./FWLIB/src/stm32f4xx_tim.c **** 
 683              		.loc 1 315 0
 684 0050 0380     		strh	r3, [r0]	@ movhi
 318:./FWLIB/src/stm32f4xx_tim.c ****  
 685              		.loc 1 318 0
 686 0052 4B68     		ldr	r3, [r1, #4]
 687              	.LVL121:
 688 0054 C362     		str	r3, [r0, #44]
 689              	.LVL122:
 321:./FWLIB/src/stm32f4xx_tim.c ****     
 690              		.loc 1 321 0
 691 0056 0B88     		ldrh	r3, [r1]
 692 0058 0385     		strh	r3, [r0, #40]	@ movhi
 323:./FWLIB/src/stm32f4xx_tim.c ****   {
 693              		.loc 1 323 0
 694 005a 064B     		ldr	r3, .L46
 695 005c 9842     		cmp	r0, r3
 696 005e 03D0     		beq	.L44
 323:./FWLIB/src/stm32f4xx_tim.c ****   {
 697              		.loc 1 323 0 is_stmt 0 discriminator 1
 698 0060 03F58063 		add	r3, r3, #1024
 699 0064 9842     		cmp	r0, r3
 700 0066 01D1     		bne	.L45
ARM GAS  /tmp/ccEzGk5p.s 			page 73


 701              	.L44:
 326:./FWLIB/src/stm32f4xx_tim.c ****   }
 702              		.loc 1 326 0 is_stmt 1
 703 0068 8B7A     		ldrb	r3, [r1, #10]	@ zero_extendqisi2
 704 006a 0386     		strh	r3, [r0, #48]	@ movhi
 705              	.L45:
 331:./FWLIB/src/stm32f4xx_tim.c **** }
 706              		.loc 1 331 0
 707 006c 0123     		movs	r3, #1
 708 006e 8382     		strh	r3, [r0, #20]	@ movhi
 332:./FWLIB/src/stm32f4xx_tim.c **** 
 709              		.loc 1 332 0
 710 0070 7047     		bx	lr
 711              	.L47:
 712 0072 00BF     		.align	2
 713              	.L46:
 714 0074 00000140 		.word	1073807360
 715 0078 00100040 		.word	1073745920
 716              		.cfi_endproc
 717              	.LFE113:
 719              		.section	.text.TIM_TimeBaseStructInit,"ax",%progbits
 720              		.align	1
 721              		.global	TIM_TimeBaseStructInit
 722              		.syntax unified
 723              		.thumb
 724              		.thumb_func
 725              		.fpu fpv4-sp-d16
 727              	TIM_TimeBaseStructInit:
 728              	.LFB114:
 341:./FWLIB/src/stm32f4xx_tim.c ****   /* Set the default configuration */
 729              		.loc 1 341 0
 730              		.cfi_startproc
 731              		@ args = 0, pretend = 0, frame = 0
 732              		@ frame_needed = 0, uses_anonymous_args = 0
 733              		@ link register save eliminated.
 734              	.LVL123:
 343:./FWLIB/src/stm32f4xx_tim.c ****   TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 735              		.loc 1 343 0
 736 0000 4FF0FF33 		mov	r3, #-1
 737 0004 4360     		str	r3, [r0, #4]
 344:./FWLIB/src/stm32f4xx_tim.c ****   TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 738              		.loc 1 344 0
 739 0006 0023     		movs	r3, #0
 740 0008 0380     		strh	r3, [r0]	@ movhi
 345:./FWLIB/src/stm32f4xx_tim.c ****   TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 741              		.loc 1 345 0
 742 000a 0381     		strh	r3, [r0, #8]	@ movhi
 346:./FWLIB/src/stm32f4xx_tim.c ****   TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 743              		.loc 1 346 0
 744 000c 4380     		strh	r3, [r0, #2]	@ movhi
 347:./FWLIB/src/stm32f4xx_tim.c **** }
 745              		.loc 1 347 0
 746 000e 8372     		strb	r3, [r0, #10]
 348:./FWLIB/src/stm32f4xx_tim.c **** 
 747              		.loc 1 348 0
 748 0010 7047     		bx	lr
 749              		.cfi_endproc
ARM GAS  /tmp/ccEzGk5p.s 			page 74


 750              	.LFE114:
 752              		.section	.text.TIM_PrescalerConfig,"ax",%progbits
 753              		.align	1
 754              		.global	TIM_PrescalerConfig
 755              		.syntax unified
 756              		.thumb
 757              		.thumb_func
 758              		.fpu fpv4-sp-d16
 760              	TIM_PrescalerConfig:
 761              	.LFB115:
 361:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 762              		.loc 1 361 0
 763              		.cfi_startproc
 764              		@ args = 0, pretend = 0, frame = 0
 765              		@ frame_needed = 0, uses_anonymous_args = 0
 766              		@ link register save eliminated.
 767              	.LVL124:
 366:./FWLIB/src/stm32f4xx_tim.c ****   /* Set or reset the UG Bit */
 768              		.loc 1 366 0
 769 0000 0185     		strh	r1, [r0, #40]	@ movhi
 368:./FWLIB/src/stm32f4xx_tim.c **** }
 770              		.loc 1 368 0
 771 0002 8282     		strh	r2, [r0, #20]	@ movhi
 369:./FWLIB/src/stm32f4xx_tim.c **** 
 772              		.loc 1 369 0
 773 0004 7047     		bx	lr
 774              		.cfi_endproc
 775              	.LFE115:
 777              		.section	.text.TIM_CounterModeConfig,"ax",%progbits
 778              		.align	1
 779              		.global	TIM_CounterModeConfig
 780              		.syntax unified
 781              		.thumb
 782              		.thumb_func
 783              		.fpu fpv4-sp-d16
 785              	TIM_CounterModeConfig:
 786              	.LFB116:
 384:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpcr1 = 0;
 787              		.loc 1 384 0
 788              		.cfi_startproc
 789              		@ args = 0, pretend = 0, frame = 0
 790              		@ frame_needed = 0, uses_anonymous_args = 0
 791              		@ link register save eliminated.
 792              	.LVL125:
 391:./FWLIB/src/stm32f4xx_tim.c **** 
 793              		.loc 1 391 0
 794 0000 0388     		ldrh	r3, [r0]
 795 0002 9BB2     		uxth	r3, r3
 796              	.LVL126:
 394:./FWLIB/src/stm32f4xx_tim.c **** 
 797              		.loc 1 394 0
 798 0004 23F07003 		bic	r3, r3, #112
 799              	.LVL127:
 397:./FWLIB/src/stm32f4xx_tim.c **** 
 800              		.loc 1 397 0
 801 0008 1943     		orrs	r1, r1, r3
 802              	.LVL128:
ARM GAS  /tmp/ccEzGk5p.s 			page 75


 400:./FWLIB/src/stm32f4xx_tim.c **** }
 803              		.loc 1 400 0
 804 000a 0180     		strh	r1, [r0]	@ movhi
 401:./FWLIB/src/stm32f4xx_tim.c **** 
 805              		.loc 1 401 0
 806 000c 7047     		bx	lr
 807              		.cfi_endproc
 808              	.LFE116:
 810              		.section	.text.TIM_SetCounter,"ax",%progbits
 811              		.align	1
 812              		.global	TIM_SetCounter
 813              		.syntax unified
 814              		.thumb
 815              		.thumb_func
 816              		.fpu fpv4-sp-d16
 818              	TIM_SetCounter:
 819              	.LFB117:
 410:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 820              		.loc 1 410 0
 821              		.cfi_startproc
 822              		@ args = 0, pretend = 0, frame = 0
 823              		@ frame_needed = 0, uses_anonymous_args = 0
 824              		@ link register save eliminated.
 825              	.LVL129:
 415:./FWLIB/src/stm32f4xx_tim.c **** }
 826              		.loc 1 415 0
 827 0000 4162     		str	r1, [r0, #36]
 416:./FWLIB/src/stm32f4xx_tim.c **** 
 828              		.loc 1 416 0
 829 0002 7047     		bx	lr
 830              		.cfi_endproc
 831              	.LFE117:
 833              		.section	.text.TIM_SetAutoreload,"ax",%progbits
 834              		.align	1
 835              		.global	TIM_SetAutoreload
 836              		.syntax unified
 837              		.thumb
 838              		.thumb_func
 839              		.fpu fpv4-sp-d16
 841              	TIM_SetAutoreload:
 842              	.LFB118:
 425:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 843              		.loc 1 425 0
 844              		.cfi_startproc
 845              		@ args = 0, pretend = 0, frame = 0
 846              		@ frame_needed = 0, uses_anonymous_args = 0
 847              		@ link register save eliminated.
 848              	.LVL130:
 430:./FWLIB/src/stm32f4xx_tim.c **** }
 849              		.loc 1 430 0
 850 0000 C162     		str	r1, [r0, #44]
 431:./FWLIB/src/stm32f4xx_tim.c **** 
 851              		.loc 1 431 0
 852 0002 7047     		bx	lr
 853              		.cfi_endproc
 854              	.LFE118:
 856              		.section	.text.TIM_GetCounter,"ax",%progbits
ARM GAS  /tmp/ccEzGk5p.s 			page 76


 857              		.align	1
 858              		.global	TIM_GetCounter
 859              		.syntax unified
 860              		.thumb
 861              		.thumb_func
 862              		.fpu fpv4-sp-d16
 864              	TIM_GetCounter:
 865              	.LFB119:
 439:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 866              		.loc 1 439 0
 867              		.cfi_startproc
 868              		@ args = 0, pretend = 0, frame = 0
 869              		@ frame_needed = 0, uses_anonymous_args = 0
 870              		@ link register save eliminated.
 871              	.LVL131:
 444:./FWLIB/src/stm32f4xx_tim.c **** }
 872              		.loc 1 444 0
 873 0000 406A     		ldr	r0, [r0, #36]
 874              	.LVL132:
 445:./FWLIB/src/stm32f4xx_tim.c **** 
 875              		.loc 1 445 0
 876 0002 7047     		bx	lr
 877              		.cfi_endproc
 878              	.LFE119:
 880              		.section	.text.TIM_GetPrescaler,"ax",%progbits
 881              		.align	1
 882              		.global	TIM_GetPrescaler
 883              		.syntax unified
 884              		.thumb
 885              		.thumb_func
 886              		.fpu fpv4-sp-d16
 888              	TIM_GetPrescaler:
 889              	.LFB120:
 453:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 890              		.loc 1 453 0
 891              		.cfi_startproc
 892              		@ args = 0, pretend = 0, frame = 0
 893              		@ frame_needed = 0, uses_anonymous_args = 0
 894              		@ link register save eliminated.
 895              	.LVL133:
 458:./FWLIB/src/stm32f4xx_tim.c **** }
 896              		.loc 1 458 0
 897 0000 008D     		ldrh	r0, [r0, #40]
 898              	.LVL134:
 459:./FWLIB/src/stm32f4xx_tim.c **** 
 899              		.loc 1 459 0
 900 0002 7047     		bx	lr
 901              		.cfi_endproc
 902              	.LFE120:
 904              		.section	.text.TIM_UpdateDisableConfig,"ax",%progbits
 905              		.align	1
 906              		.global	TIM_UpdateDisableConfig
 907              		.syntax unified
 908              		.thumb
 909              		.thumb_func
 910              		.fpu fpv4-sp-d16
 912              	TIM_UpdateDisableConfig:
ARM GAS  /tmp/ccEzGk5p.s 			page 77


 913              	.LFB121:
 469:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 914              		.loc 1 469 0
 915              		.cfi_startproc
 916              		@ args = 0, pretend = 0, frame = 0
 917              		@ frame_needed = 0, uses_anonymous_args = 0
 918              		@ link register save eliminated.
 919              	.LVL135:
 474:./FWLIB/src/stm32f4xx_tim.c ****   {
 920              		.loc 1 474 0
 921 0000 31B9     		cbnz	r1, .L58
 482:./FWLIB/src/stm32f4xx_tim.c ****   }
 922              		.loc 1 482 0
 923 0002 0388     		ldrh	r3, [r0]
 924 0004 9BB2     		uxth	r3, r3
 925 0006 23F00203 		bic	r3, r3, #2
 926 000a 9BB2     		uxth	r3, r3
 927 000c 0380     		strh	r3, [r0]	@ movhi
 484:./FWLIB/src/stm32f4xx_tim.c **** 
 928              		.loc 1 484 0
 929 000e 7047     		bx	lr
 930              	.L58:
 477:./FWLIB/src/stm32f4xx_tim.c ****   }
 931              		.loc 1 477 0
 932 0010 0388     		ldrh	r3, [r0]
 933 0012 43F00203 		orr	r3, r3, #2
 934 0016 0380     		strh	r3, [r0]	@ movhi
 935 0018 7047     		bx	lr
 936              		.cfi_endproc
 937              	.LFE121:
 939              		.section	.text.TIM_UpdateRequestConfig,"ax",%progbits
 940              		.align	1
 941              		.global	TIM_UpdateRequestConfig
 942              		.syntax unified
 943              		.thumb
 944              		.thumb_func
 945              		.fpu fpv4-sp-d16
 947              	TIM_UpdateRequestConfig:
 948              	.LFB122:
 498:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 949              		.loc 1 498 0
 950              		.cfi_startproc
 951              		@ args = 0, pretend = 0, frame = 0
 952              		@ frame_needed = 0, uses_anonymous_args = 0
 953              		@ link register save eliminated.
 954              	.LVL136:
 503:./FWLIB/src/stm32f4xx_tim.c ****   {
 955              		.loc 1 503 0
 956 0000 31B9     		cbnz	r1, .L62
 511:./FWLIB/src/stm32f4xx_tim.c ****   }
 957              		.loc 1 511 0
 958 0002 0388     		ldrh	r3, [r0]
 959 0004 9BB2     		uxth	r3, r3
 960 0006 23F00403 		bic	r3, r3, #4
 961 000a 9BB2     		uxth	r3, r3
 962 000c 0380     		strh	r3, [r0]	@ movhi
 513:./FWLIB/src/stm32f4xx_tim.c **** 
ARM GAS  /tmp/ccEzGk5p.s 			page 78


 963              		.loc 1 513 0
 964 000e 7047     		bx	lr
 965              	.L62:
 506:./FWLIB/src/stm32f4xx_tim.c ****   }
 966              		.loc 1 506 0
 967 0010 0388     		ldrh	r3, [r0]
 968 0012 43F00403 		orr	r3, r3, #4
 969 0016 0380     		strh	r3, [r0]	@ movhi
 970 0018 7047     		bx	lr
 971              		.cfi_endproc
 972              	.LFE122:
 974              		.section	.text.TIM_ARRPreloadConfig,"ax",%progbits
 975              		.align	1
 976              		.global	TIM_ARRPreloadConfig
 977              		.syntax unified
 978              		.thumb
 979              		.thumb_func
 980              		.fpu fpv4-sp-d16
 982              	TIM_ARRPreloadConfig:
 983              	.LFB123:
 523:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 984              		.loc 1 523 0
 985              		.cfi_startproc
 986              		@ args = 0, pretend = 0, frame = 0
 987              		@ frame_needed = 0, uses_anonymous_args = 0
 988              		@ link register save eliminated.
 989              	.LVL137:
 528:./FWLIB/src/stm32f4xx_tim.c ****   {
 990              		.loc 1 528 0
 991 0000 31B9     		cbnz	r1, .L66
 536:./FWLIB/src/stm32f4xx_tim.c ****   }
 992              		.loc 1 536 0
 993 0002 0388     		ldrh	r3, [r0]
 994 0004 9BB2     		uxth	r3, r3
 995 0006 23F08003 		bic	r3, r3, #128
 996 000a 9BB2     		uxth	r3, r3
 997 000c 0380     		strh	r3, [r0]	@ movhi
 538:./FWLIB/src/stm32f4xx_tim.c **** 
 998              		.loc 1 538 0
 999 000e 7047     		bx	lr
 1000              	.L66:
 531:./FWLIB/src/stm32f4xx_tim.c ****   }
 1001              		.loc 1 531 0
 1002 0010 0388     		ldrh	r3, [r0]
 1003 0012 43F08003 		orr	r3, r3, #128
 1004 0016 0380     		strh	r3, [r0]	@ movhi
 1005 0018 7047     		bx	lr
 1006              		.cfi_endproc
 1007              	.LFE123:
 1009              		.section	.text.TIM_SelectOnePulseMode,"ax",%progbits
 1010              		.align	1
 1011              		.global	TIM_SelectOnePulseMode
 1012              		.syntax unified
 1013              		.thumb
 1014              		.thumb_func
 1015              		.fpu fpv4-sp-d16
 1017              	TIM_SelectOnePulseMode:
ARM GAS  /tmp/ccEzGk5p.s 			page 79


 1018              	.LFB124:
 550:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 1019              		.loc 1 550 0
 1020              		.cfi_startproc
 1021              		@ args = 0, pretend = 0, frame = 0
 1022              		@ frame_needed = 0, uses_anonymous_args = 0
 1023              		@ link register save eliminated.
 1024              	.LVL138:
 556:./FWLIB/src/stm32f4xx_tim.c **** 
 1025              		.loc 1 556 0
 1026 0000 0388     		ldrh	r3, [r0]
 1027 0002 9BB2     		uxth	r3, r3
 1028 0004 23F00803 		bic	r3, r3, #8
 1029 0008 9BB2     		uxth	r3, r3
 1030 000a 0380     		strh	r3, [r0]	@ movhi
 559:./FWLIB/src/stm32f4xx_tim.c **** }
 1031              		.loc 1 559 0
 1032 000c 0388     		ldrh	r3, [r0]
 1033 000e 1943     		orrs	r1, r1, r3
 1034              	.LVL139:
 1035 0010 0180     		strh	r1, [r0]	@ movhi
 560:./FWLIB/src/stm32f4xx_tim.c **** 
 1036              		.loc 1 560 0
 1037 0012 7047     		bx	lr
 1038              		.cfi_endproc
 1039              	.LFE124:
 1041              		.section	.text.TIM_SetClockDivision,"ax",%progbits
 1042              		.align	1
 1043              		.global	TIM_SetClockDivision
 1044              		.syntax unified
 1045              		.thumb
 1046              		.thumb_func
 1047              		.fpu fpv4-sp-d16
 1049              	TIM_SetClockDivision:
 1050              	.LFB125:
 573:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 1051              		.loc 1 573 0
 1052              		.cfi_startproc
 1053              		@ args = 0, pretend = 0, frame = 0
 1054              		@ frame_needed = 0, uses_anonymous_args = 0
 1055              		@ link register save eliminated.
 1056              	.LVL140:
 579:./FWLIB/src/stm32f4xx_tim.c **** 
 1057              		.loc 1 579 0
 1058 0000 0388     		ldrh	r3, [r0]
 1059 0002 9BB2     		uxth	r3, r3
 1060 0004 23F44073 		bic	r3, r3, #768
 1061 0008 9BB2     		uxth	r3, r3
 1062 000a 0380     		strh	r3, [r0]	@ movhi
 582:./FWLIB/src/stm32f4xx_tim.c **** }
 1063              		.loc 1 582 0
 1064 000c 0388     		ldrh	r3, [r0]
 1065 000e 1943     		orrs	r1, r1, r3
 1066              	.LVL141:
 1067 0010 0180     		strh	r1, [r0]	@ movhi
 583:./FWLIB/src/stm32f4xx_tim.c **** 
 1068              		.loc 1 583 0
ARM GAS  /tmp/ccEzGk5p.s 			page 80


 1069 0012 7047     		bx	lr
 1070              		.cfi_endproc
 1071              	.LFE125:
 1073              		.section	.text.TIM_Cmd,"ax",%progbits
 1074              		.align	1
 1075              		.global	TIM_Cmd
 1076              		.syntax unified
 1077              		.thumb
 1078              		.thumb_func
 1079              		.fpu fpv4-sp-d16
 1081              	TIM_Cmd:
 1082              	.LFB126:
 593:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 1083              		.loc 1 593 0
 1084              		.cfi_startproc
 1085              		@ args = 0, pretend = 0, frame = 0
 1086              		@ frame_needed = 0, uses_anonymous_args = 0
 1087              		@ link register save eliminated.
 1088              	.LVL142:
 598:./FWLIB/src/stm32f4xx_tim.c ****   {
 1089              		.loc 1 598 0
 1090 0000 31B9     		cbnz	r1, .L72
 606:./FWLIB/src/stm32f4xx_tim.c ****   }
 1091              		.loc 1 606 0
 1092 0002 0388     		ldrh	r3, [r0]
 1093 0004 9BB2     		uxth	r3, r3
 1094 0006 23F00103 		bic	r3, r3, #1
 1095 000a 9BB2     		uxth	r3, r3
 1096 000c 0380     		strh	r3, [r0]	@ movhi
 608:./FWLIB/src/stm32f4xx_tim.c **** /**
 1097              		.loc 1 608 0
 1098 000e 7047     		bx	lr
 1099              	.L72:
 601:./FWLIB/src/stm32f4xx_tim.c ****   }
 1100              		.loc 1 601 0
 1101 0010 0388     		ldrh	r3, [r0]
 1102 0012 43F00103 		orr	r3, r3, #1
 1103 0016 0380     		strh	r3, [r0]	@ movhi
 1104 0018 7047     		bx	lr
 1105              		.cfi_endproc
 1106              	.LFE126:
 1108              		.section	.text.TIM_OC1Init,"ax",%progbits
 1109              		.align	1
 1110              		.global	TIM_OC1Init
 1111              		.syntax unified
 1112              		.thumb
 1113              		.thumb_func
 1114              		.fpu fpv4-sp-d16
 1116              	TIM_OC1Init:
 1117              	.LFB127:
 674:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 1118              		.loc 1 674 0
 1119              		.cfi_startproc
 1120              		@ args = 0, pretend = 0, frame = 0
 1121              		@ frame_needed = 0, uses_anonymous_args = 0
 1122              		@ link register save eliminated.
 1123              	.LVL143:
ARM GAS  /tmp/ccEzGk5p.s 			page 81


 1124 0000 30B4     		push	{r4, r5}
 1125              	.LCFI9:
 1126              		.cfi_def_cfa_offset 8
 1127              		.cfi_offset 4, -8
 1128              		.cfi_offset 5, -4
 1129              	.LVL144:
 684:./FWLIB/src/stm32f4xx_tim.c ****   
 1130              		.loc 1 684 0
 1131 0002 038C     		ldrh	r3, [r0, #32]
 1132 0004 9BB2     		uxth	r3, r3
 1133 0006 23F00103 		bic	r3, r3, #1
 1134 000a 9BB2     		uxth	r3, r3
 1135 000c 0384     		strh	r3, [r0, #32]	@ movhi
 687:./FWLIB/src/stm32f4xx_tim.c ****   /* Get the TIMx CR2 register value */
 1136              		.loc 1 687 0
 1137 000e 038C     		ldrh	r3, [r0, #32]
 1138 0010 9BB2     		uxth	r3, r3
 1139              	.LVL145:
 689:./FWLIB/src/stm32f4xx_tim.c ****   
 1140              		.loc 1 689 0
 1141 0012 8588     		ldrh	r5, [r0, #4]
 1142 0014 ADB2     		uxth	r5, r5
 1143              	.LVL146:
 692:./FWLIB/src/stm32f4xx_tim.c ****     
 1144              		.loc 1 692 0
 1145 0016 028B     		ldrh	r2, [r0, #24]
 1146 0018 92B2     		uxth	r2, r2
 1147              	.LVL147:
 696:./FWLIB/src/stm32f4xx_tim.c ****   /* Select the Output Compare Mode */
 1148              		.loc 1 696 0
 1149 001a 22F07302 		bic	r2, r2, #115
 1150              	.LVL148:
 698:./FWLIB/src/stm32f4xx_tim.c ****   
 1151              		.loc 1 698 0
 1152 001e 0C88     		ldrh	r4, [r1]
 1153 0020 2243     		orrs	r2, r2, r4
 1154              	.LVL149:
 701:./FWLIB/src/stm32f4xx_tim.c ****   /* Set the Output Compare Polarity */
 1155              		.loc 1 701 0
 1156 0022 23F00203 		bic	r3, r3, #2
 1157              	.LVL150:
 703:./FWLIB/src/stm32f4xx_tim.c ****   
 1158              		.loc 1 703 0
 1159 0026 8C89     		ldrh	r4, [r1, #12]
 1160 0028 1C43     		orrs	r4, r4, r3
 1161              	.LVL151:
 706:./FWLIB/src/stm32f4xx_tim.c ****     
 1162              		.loc 1 706 0
 1163 002a 4B88     		ldrh	r3, [r1, #2]
 1164 002c 2343     		orrs	r3, r3, r4
 1165              	.LVL152:
 708:./FWLIB/src/stm32f4xx_tim.c ****   {
 1166              		.loc 1 708 0
 1167 002e 0E4C     		ldr	r4, .L77
 1168 0030 A042     		cmp	r0, r4
 1169 0032 03D0     		beq	.L74
 708:./FWLIB/src/stm32f4xx_tim.c ****   {
ARM GAS  /tmp/ccEzGk5p.s 			page 82


 1170              		.loc 1 708 0 is_stmt 0 discriminator 1
 1171 0034 04F58064 		add	r4, r4, #1024
 1172 0038 A042     		cmp	r0, r4
 1173 003a 0DD1     		bne	.L75
 1174              	.L74:
 716:./FWLIB/src/stm32f4xx_tim.c ****     /* Set the Output N Polarity */
 1175              		.loc 1 716 0 is_stmt 1
 1176 003c 23F00803 		bic	r3, r3, #8
 1177              	.LVL153:
 718:./FWLIB/src/stm32f4xx_tim.c ****     /* Reset the Output N State */
 1178              		.loc 1 718 0
 1179 0040 CC89     		ldrh	r4, [r1, #14]
 1180 0042 2343     		orrs	r3, r3, r4
 1181              	.LVL154:
 720:./FWLIB/src/stm32f4xx_tim.c ****     
 1182              		.loc 1 720 0
 1183 0044 23F00403 		bic	r3, r3, #4
 1184              	.LVL155:
 723:./FWLIB/src/stm32f4xx_tim.c ****     /* Reset the Output Compare and Output Compare N IDLE State */
 1185              		.loc 1 723 0
 1186 0048 8C88     		ldrh	r4, [r1, #4]
 1187 004a 2343     		orrs	r3, r3, r4
 1188              	.LVL156:
 726:./FWLIB/src/stm32f4xx_tim.c ****     /* Set the Output Idle state */
 1189              		.loc 1 726 0
 1190 004c 25F44075 		bic	r5, r5, #768
 1191              	.LVL157:
 728:./FWLIB/src/stm32f4xx_tim.c ****     /* Set the Output N Idle state */
 1192              		.loc 1 728 0
 1193 0050 0C8A     		ldrh	r4, [r1, #16]
 1194 0052 2543     		orrs	r5, r5, r4
 1195              	.LVL158:
 730:./FWLIB/src/stm32f4xx_tim.c ****   }
 1196              		.loc 1 730 0
 1197 0054 4C8A     		ldrh	r4, [r1, #18]
 1198 0056 2543     		orrs	r5, r5, r4
 1199              	.LVL159:
 1200              	.L75:
 733:./FWLIB/src/stm32f4xx_tim.c ****   
 1201              		.loc 1 733 0
 1202 0058 8580     		strh	r5, [r0, #4]	@ movhi
 736:./FWLIB/src/stm32f4xx_tim.c ****   
 1203              		.loc 1 736 0
 1204 005a 0283     		strh	r2, [r0, #24]	@ movhi
 739:./FWLIB/src/stm32f4xx_tim.c ****   
 1205              		.loc 1 739 0
 1206 005c 8A68     		ldr	r2, [r1, #8]
 1207              	.LVL160:
 1208 005e 4263     		str	r2, [r0, #52]
 1209              	.LVL161:
 742:./FWLIB/src/stm32f4xx_tim.c **** }
 1210              		.loc 1 742 0
 1211 0060 0384     		strh	r3, [r0, #32]	@ movhi
 743:./FWLIB/src/stm32f4xx_tim.c **** 
 1212              		.loc 1 743 0
 1213 0062 30BC     		pop	{r4, r5}
 1214              	.LCFI10:
ARM GAS  /tmp/ccEzGk5p.s 			page 83


 1215              		.cfi_restore 5
 1216              		.cfi_restore 4
 1217              		.cfi_def_cfa_offset 0
 1218              	.LVL162:
 1219 0064 7047     		bx	lr
 1220              	.L78:
 1221 0066 00BF     		.align	2
 1222              	.L77:
 1223 0068 00000140 		.word	1073807360
 1224              		.cfi_endproc
 1225              	.LFE127:
 1227              		.section	.text.TIM_OC2Init,"ax",%progbits
 1228              		.align	1
 1229              		.global	TIM_OC2Init
 1230              		.syntax unified
 1231              		.thumb
 1232              		.thumb_func
 1233              		.fpu fpv4-sp-d16
 1235              	TIM_OC2Init:
 1236              	.LFB128:
 755:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 1237              		.loc 1 755 0
 1238              		.cfi_startproc
 1239              		@ args = 0, pretend = 0, frame = 0
 1240              		@ frame_needed = 0, uses_anonymous_args = 0
 1241              		@ link register save eliminated.
 1242              	.LVL163:
 1243 0000 30B4     		push	{r4, r5}
 1244              	.LCFI11:
 1245              		.cfi_def_cfa_offset 8
 1246              		.cfi_offset 4, -8
 1247              		.cfi_offset 5, -4
 1248              	.LVL164:
 765:./FWLIB/src/stm32f4xx_tim.c ****   
 1249              		.loc 1 765 0
 1250 0002 038C     		ldrh	r3, [r0, #32]
 1251 0004 9BB2     		uxth	r3, r3
 1252 0006 23F01003 		bic	r3, r3, #16
 1253 000a 9BB2     		uxth	r3, r3
 1254 000c 0384     		strh	r3, [r0, #32]	@ movhi
 768:./FWLIB/src/stm32f4xx_tim.c ****   /* Get the TIMx CR2 register value */
 1255              		.loc 1 768 0
 1256 000e 038C     		ldrh	r3, [r0, #32]
 1257 0010 9BB2     		uxth	r3, r3
 1258              	.LVL165:
 770:./FWLIB/src/stm32f4xx_tim.c ****   
 1259              		.loc 1 770 0
 1260 0012 8588     		ldrh	r5, [r0, #4]
 1261 0014 ADB2     		uxth	r5, r5
 1262              	.LVL166:
 773:./FWLIB/src/stm32f4xx_tim.c ****     
 1263              		.loc 1 773 0
 1264 0016 048B     		ldrh	r4, [r0, #24]
 1265 0018 A4B2     		uxth	r4, r4
 1266              	.LVL167:
 777:./FWLIB/src/stm32f4xx_tim.c ****   
 1267              		.loc 1 777 0
ARM GAS  /tmp/ccEzGk5p.s 			page 84


 1268 001a 24F4E644 		bic	r4, r4, #29440
 1269              	.LVL168:
 780:./FWLIB/src/stm32f4xx_tim.c ****   
 1270              		.loc 1 780 0
 1271 001e 0A88     		ldrh	r2, [r1]
 1272 0020 1202     		lsls	r2, r2, #8
 1273 0022 92B2     		uxth	r2, r2
 1274 0024 1443     		orrs	r4, r4, r2
 1275              	.LVL169:
 783:./FWLIB/src/stm32f4xx_tim.c ****   /* Set the Output Compare Polarity */
 1276              		.loc 1 783 0
 1277 0026 23F02003 		bic	r3, r3, #32
 1278              	.LVL170:
 785:./FWLIB/src/stm32f4xx_tim.c ****   
 1279              		.loc 1 785 0
 1280 002a 8A89     		ldrh	r2, [r1, #12]
 1281 002c 1201     		lsls	r2, r2, #4
 1282 002e 92B2     		uxth	r2, r2
 1283 0030 1A43     		orrs	r2, r2, r3
 1284              	.LVL171:
 788:./FWLIB/src/stm32f4xx_tim.c ****     
 1285              		.loc 1 788 0
 1286 0032 4B88     		ldrh	r3, [r1, #2]
 1287 0034 1B01     		lsls	r3, r3, #4
 1288 0036 9BB2     		uxth	r3, r3
 1289 0038 1343     		orrs	r3, r3, r2
 1290              	.LVL172:
 790:./FWLIB/src/stm32f4xx_tim.c ****   {
 1291              		.loc 1 790 0
 1292 003a 124A     		ldr	r2, .L83
 1293 003c 9042     		cmp	r0, r2
 1294 003e 03D0     		beq	.L80
 790:./FWLIB/src/stm32f4xx_tim.c ****   {
 1295              		.loc 1 790 0 is_stmt 0 discriminator 1
 1296 0040 02F58062 		add	r2, r2, #1024
 1297 0044 9042     		cmp	r0, r2
 1298 0046 15D1     		bne	.L81
 1299              	.L80:
 798:./FWLIB/src/stm32f4xx_tim.c ****     /* Set the Output N Polarity */
 1300              		.loc 1 798 0 is_stmt 1
 1301 0048 23F08003 		bic	r3, r3, #128
 1302              	.LVL173:
 800:./FWLIB/src/stm32f4xx_tim.c ****     /* Reset the Output N State */
 1303              		.loc 1 800 0
 1304 004c CA89     		ldrh	r2, [r1, #14]
 1305 004e 1201     		lsls	r2, r2, #4
 1306 0050 92B2     		uxth	r2, r2
 1307 0052 1343     		orrs	r3, r3, r2
 1308              	.LVL174:
 802:./FWLIB/src/stm32f4xx_tim.c ****     
 1309              		.loc 1 802 0
 1310 0054 23F04003 		bic	r3, r3, #64
 1311              	.LVL175:
 805:./FWLIB/src/stm32f4xx_tim.c ****     /* Reset the Output Compare and Output Compare N IDLE State */
 1312              		.loc 1 805 0
 1313 0058 8A88     		ldrh	r2, [r1, #4]
 1314 005a 1201     		lsls	r2, r2, #4
ARM GAS  /tmp/ccEzGk5p.s 			page 85


 1315 005c 92B2     		uxth	r2, r2
 1316 005e 1343     		orrs	r3, r3, r2
 1317              	.LVL176:
 808:./FWLIB/src/stm32f4xx_tim.c ****     /* Set the Output Idle state */
 1318              		.loc 1 808 0
 1319 0060 25F44065 		bic	r5, r5, #3072
 1320              	.LVL177:
 810:./FWLIB/src/stm32f4xx_tim.c ****     /* Set the Output N Idle state */
 1321              		.loc 1 810 0
 1322 0064 0A8A     		ldrh	r2, [r1, #16]
 1323 0066 9200     		lsls	r2, r2, #2
 1324 0068 92B2     		uxth	r2, r2
 1325 006a 1543     		orrs	r5, r5, r2
 1326              	.LVL178:
 812:./FWLIB/src/stm32f4xx_tim.c ****   }
 1327              		.loc 1 812 0
 1328 006c 4A8A     		ldrh	r2, [r1, #18]
 1329 006e 9200     		lsls	r2, r2, #2
 1330 0070 92B2     		uxth	r2, r2
 1331 0072 1543     		orrs	r5, r5, r2
 1332              	.LVL179:
 1333              	.L81:
 815:./FWLIB/src/stm32f4xx_tim.c ****   
 1334              		.loc 1 815 0
 1335 0074 8580     		strh	r5, [r0, #4]	@ movhi
 818:./FWLIB/src/stm32f4xx_tim.c ****   
 1336              		.loc 1 818 0
 1337 0076 0483     		strh	r4, [r0, #24]	@ movhi
 821:./FWLIB/src/stm32f4xx_tim.c ****   
 1338              		.loc 1 821 0
 1339 0078 8A68     		ldr	r2, [r1, #8]
 1340 007a 8263     		str	r2, [r0, #56]
 824:./FWLIB/src/stm32f4xx_tim.c **** }
 1341              		.loc 1 824 0
 1342 007c 0384     		strh	r3, [r0, #32]	@ movhi
 825:./FWLIB/src/stm32f4xx_tim.c **** 
 1343              		.loc 1 825 0
 1344 007e 30BC     		pop	{r4, r5}
 1345              	.LCFI12:
 1346              		.cfi_restore 5
 1347              		.cfi_restore 4
 1348              		.cfi_def_cfa_offset 0
 1349              	.LVL180:
 1350 0080 7047     		bx	lr
 1351              	.L84:
 1352 0082 00BF     		.align	2
 1353              	.L83:
 1354 0084 00000140 		.word	1073807360
 1355              		.cfi_endproc
 1356              	.LFE128:
 1358              		.section	.text.TIM_OC3Init,"ax",%progbits
 1359              		.align	1
 1360              		.global	TIM_OC3Init
 1361              		.syntax unified
 1362              		.thumb
 1363              		.thumb_func
 1364              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccEzGk5p.s 			page 86


 1366              	TIM_OC3Init:
 1367              	.LFB129:
 836:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 1368              		.loc 1 836 0
 1369              		.cfi_startproc
 1370              		@ args = 0, pretend = 0, frame = 0
 1371              		@ frame_needed = 0, uses_anonymous_args = 0
 1372              		@ link register save eliminated.
 1373              	.LVL181:
 1374 0000 30B4     		push	{r4, r5}
 1375              	.LCFI13:
 1376              		.cfi_def_cfa_offset 8
 1377              		.cfi_offset 4, -8
 1378              		.cfi_offset 5, -4
 1379              	.LVL182:
 846:./FWLIB/src/stm32f4xx_tim.c ****   
 1380              		.loc 1 846 0
 1381 0002 038C     		ldrh	r3, [r0, #32]
 1382 0004 9BB2     		uxth	r3, r3
 1383 0006 23F48073 		bic	r3, r3, #256
 1384 000a 9BB2     		uxth	r3, r3
 1385 000c 0384     		strh	r3, [r0, #32]	@ movhi
 849:./FWLIB/src/stm32f4xx_tim.c ****   /* Get the TIMx CR2 register value */
 1386              		.loc 1 849 0
 1387 000e 038C     		ldrh	r3, [r0, #32]
 1388 0010 9BB2     		uxth	r3, r3
 1389              	.LVL183:
 851:./FWLIB/src/stm32f4xx_tim.c ****   
 1390              		.loc 1 851 0
 1391 0012 8588     		ldrh	r5, [r0, #4]
 1392 0014 ADB2     		uxth	r5, r5
 1393              	.LVL184:
 854:./FWLIB/src/stm32f4xx_tim.c ****     
 1394              		.loc 1 854 0
 1395 0016 848B     		ldrh	r4, [r0, #28]
 1396 0018 A4B2     		uxth	r4, r4
 1397              	.LVL185:
 858:./FWLIB/src/stm32f4xx_tim.c ****   /* Select the Output Compare Mode */
 1398              		.loc 1 858 0
 1399 001a 24F07304 		bic	r4, r4, #115
 1400              	.LVL186:
 860:./FWLIB/src/stm32f4xx_tim.c ****   
 1401              		.loc 1 860 0
 1402 001e 0A88     		ldrh	r2, [r1]
 1403 0020 1443     		orrs	r4, r4, r2
 1404              	.LVL187:
 863:./FWLIB/src/stm32f4xx_tim.c ****   /* Set the Output Compare Polarity */
 1405              		.loc 1 863 0
 1406 0022 23F40073 		bic	r3, r3, #512
 1407              	.LVL188:
 865:./FWLIB/src/stm32f4xx_tim.c ****   
 1408              		.loc 1 865 0
 1409 0026 8A89     		ldrh	r2, [r1, #12]
 1410 0028 1202     		lsls	r2, r2, #8
 1411 002a 92B2     		uxth	r2, r2
 1412 002c 1A43     		orrs	r2, r2, r3
 1413              	.LVL189:
ARM GAS  /tmp/ccEzGk5p.s 			page 87


 868:./FWLIB/src/stm32f4xx_tim.c ****     
 1414              		.loc 1 868 0
 1415 002e 4B88     		ldrh	r3, [r1, #2]
 1416 0030 1B02     		lsls	r3, r3, #8
 1417 0032 9BB2     		uxth	r3, r3
 1418 0034 1343     		orrs	r3, r3, r2
 1419              	.LVL190:
 870:./FWLIB/src/stm32f4xx_tim.c ****   {
 1420              		.loc 1 870 0
 1421 0036 124A     		ldr	r2, .L89
 1422 0038 9042     		cmp	r0, r2
 1423 003a 03D0     		beq	.L86
 870:./FWLIB/src/stm32f4xx_tim.c ****   {
 1424              		.loc 1 870 0 is_stmt 0 discriminator 1
 1425 003c 02F58062 		add	r2, r2, #1024
 1426 0040 9042     		cmp	r0, r2
 1427 0042 15D1     		bne	.L87
 1428              	.L86:
 878:./FWLIB/src/stm32f4xx_tim.c ****     /* Set the Output N Polarity */
 1429              		.loc 1 878 0 is_stmt 1
 1430 0044 23F40063 		bic	r3, r3, #2048
 1431              	.LVL191:
 880:./FWLIB/src/stm32f4xx_tim.c ****     /* Reset the Output N State */
 1432              		.loc 1 880 0
 1433 0048 CA89     		ldrh	r2, [r1, #14]
 1434 004a 1202     		lsls	r2, r2, #8
 1435 004c 92B2     		uxth	r2, r2
 1436 004e 1343     		orrs	r3, r3, r2
 1437              	.LVL192:
 882:./FWLIB/src/stm32f4xx_tim.c ****     
 1438              		.loc 1 882 0
 1439 0050 23F48063 		bic	r3, r3, #1024
 1440              	.LVL193:
 885:./FWLIB/src/stm32f4xx_tim.c ****     /* Reset the Output Compare and Output Compare N IDLE State */
 1441              		.loc 1 885 0
 1442 0054 8A88     		ldrh	r2, [r1, #4]
 1443 0056 1202     		lsls	r2, r2, #8
 1444 0058 92B2     		uxth	r2, r2
 1445 005a 1343     		orrs	r3, r3, r2
 1446              	.LVL194:
 888:./FWLIB/src/stm32f4xx_tim.c ****     /* Set the Output Idle state */
 1447              		.loc 1 888 0
 1448 005c 25F44055 		bic	r5, r5, #12288
 1449              	.LVL195:
 890:./FWLIB/src/stm32f4xx_tim.c ****     /* Set the Output N Idle state */
 1450              		.loc 1 890 0
 1451 0060 0A8A     		ldrh	r2, [r1, #16]
 1452 0062 1201     		lsls	r2, r2, #4
 1453 0064 92B2     		uxth	r2, r2
 1454 0066 1543     		orrs	r5, r5, r2
 1455              	.LVL196:
 892:./FWLIB/src/stm32f4xx_tim.c ****   }
 1456              		.loc 1 892 0
 1457 0068 4A8A     		ldrh	r2, [r1, #18]
 1458 006a 1201     		lsls	r2, r2, #4
 1459 006c 92B2     		uxth	r2, r2
 1460 006e 1543     		orrs	r5, r5, r2
ARM GAS  /tmp/ccEzGk5p.s 			page 88


 1461              	.LVL197:
 1462              	.L87:
 895:./FWLIB/src/stm32f4xx_tim.c ****   
 1463              		.loc 1 895 0
 1464 0070 8580     		strh	r5, [r0, #4]	@ movhi
 898:./FWLIB/src/stm32f4xx_tim.c ****   
 1465              		.loc 1 898 0
 1466 0072 8483     		strh	r4, [r0, #28]	@ movhi
 901:./FWLIB/src/stm32f4xx_tim.c ****   
 1467              		.loc 1 901 0
 1468 0074 8A68     		ldr	r2, [r1, #8]
 1469 0076 C263     		str	r2, [r0, #60]
 904:./FWLIB/src/stm32f4xx_tim.c **** }
 1470              		.loc 1 904 0
 1471 0078 0384     		strh	r3, [r0, #32]	@ movhi
 905:./FWLIB/src/stm32f4xx_tim.c **** 
 1472              		.loc 1 905 0
 1473 007a 30BC     		pop	{r4, r5}
 1474              	.LCFI14:
 1475              		.cfi_restore 5
 1476              		.cfi_restore 4
 1477              		.cfi_def_cfa_offset 0
 1478              	.LVL198:
 1479 007c 7047     		bx	lr
 1480              	.L90:
 1481 007e 00BF     		.align	2
 1482              	.L89:
 1483 0080 00000140 		.word	1073807360
 1484              		.cfi_endproc
 1485              	.LFE129:
 1487              		.section	.text.TIM_OC4Init,"ax",%progbits
 1488              		.align	1
 1489              		.global	TIM_OC4Init
 1490              		.syntax unified
 1491              		.thumb
 1492              		.thumb_func
 1493              		.fpu fpv4-sp-d16
 1495              	TIM_OC4Init:
 1496              	.LFB130:
 916:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 1497              		.loc 1 916 0
 1498              		.cfi_startproc
 1499              		@ args = 0, pretend = 0, frame = 0
 1500              		@ frame_needed = 0, uses_anonymous_args = 0
 1501              		@ link register save eliminated.
 1502              	.LVL199:
 1503 0000 30B4     		push	{r4, r5}
 1504              	.LCFI15:
 1505              		.cfi_def_cfa_offset 8
 1506              		.cfi_offset 4, -8
 1507              		.cfi_offset 5, -4
 1508              	.LVL200:
 926:./FWLIB/src/stm32f4xx_tim.c ****   
 1509              		.loc 1 926 0
 1510 0002 038C     		ldrh	r3, [r0, #32]
 1511 0004 9BB2     		uxth	r3, r3
 1512 0006 23F48053 		bic	r3, r3, #4096
ARM GAS  /tmp/ccEzGk5p.s 			page 89


 1513 000a 9BB2     		uxth	r3, r3
 1514 000c 0384     		strh	r3, [r0, #32]	@ movhi
 929:./FWLIB/src/stm32f4xx_tim.c ****   /* Get the TIMx CR2 register value */
 1515              		.loc 1 929 0
 1516 000e 038C     		ldrh	r3, [r0, #32]
 1517 0010 9BB2     		uxth	r3, r3
 1518              	.LVL201:
 931:./FWLIB/src/stm32f4xx_tim.c ****   
 1519              		.loc 1 931 0
 1520 0012 8588     		ldrh	r5, [r0, #4]
 1521 0014 ADB2     		uxth	r5, r5
 1522              	.LVL202:
 934:./FWLIB/src/stm32f4xx_tim.c ****     
 1523              		.loc 1 934 0
 1524 0016 828B     		ldrh	r2, [r0, #28]
 1525 0018 92B2     		uxth	r2, r2
 1526              	.LVL203:
 938:./FWLIB/src/stm32f4xx_tim.c ****   
 1527              		.loc 1 938 0
 1528 001a 22F4E644 		bic	r4, r2, #29440
 1529              	.LVL204:
 941:./FWLIB/src/stm32f4xx_tim.c ****   
 1530              		.loc 1 941 0
 1531 001e 0A88     		ldrh	r2, [r1]
 1532 0020 1202     		lsls	r2, r2, #8
 1533 0022 92B2     		uxth	r2, r2
 1534 0024 2243     		orrs	r2, r2, r4
 1535              	.LVL205:
 944:./FWLIB/src/stm32f4xx_tim.c ****   /* Set the Output Compare Polarity */
 1536              		.loc 1 944 0
 1537 0026 23F40053 		bic	r3, r3, #8192
 1538              	.LVL206:
 946:./FWLIB/src/stm32f4xx_tim.c ****   
 1539              		.loc 1 946 0
 1540 002a 8C89     		ldrh	r4, [r1, #12]
 1541 002c 2403     		lsls	r4, r4, #12
 1542 002e A4B2     		uxth	r4, r4
 1543 0030 1C43     		orrs	r4, r4, r3
 1544              	.LVL207:
 949:./FWLIB/src/stm32f4xx_tim.c ****   
 1545              		.loc 1 949 0
 1546 0032 4B88     		ldrh	r3, [r1, #2]
 1547 0034 1B03     		lsls	r3, r3, #12
 1548 0036 9BB2     		uxth	r3, r3
 1549 0038 2343     		orrs	r3, r3, r4
 1550              	.LVL208:
 951:./FWLIB/src/stm32f4xx_tim.c ****   {
 1551              		.loc 1 951 0
 1552 003a 0A4C     		ldr	r4, .L95
 1553 003c A042     		cmp	r0, r4
 1554 003e 03D0     		beq	.L92
 951:./FWLIB/src/stm32f4xx_tim.c ****   {
 1555              		.loc 1 951 0 is_stmt 0 discriminator 1
 1556 0040 04F58064 		add	r4, r4, #1024
 1557 0044 A042     		cmp	r0, r4
 1558 0046 05D1     		bne	.L93
 1559              	.L92:
ARM GAS  /tmp/ccEzGk5p.s 			page 90


 955:./FWLIB/src/stm32f4xx_tim.c ****     /* Set the Output Idle state */
 1560              		.loc 1 955 0 is_stmt 1
 1561 0048 25F48045 		bic	r5, r5, #16384
 1562              	.LVL209:
 957:./FWLIB/src/stm32f4xx_tim.c ****   }
 1563              		.loc 1 957 0
 1564 004c 0C8A     		ldrh	r4, [r1, #16]
 1565 004e A401     		lsls	r4, r4, #6
 1566 0050 A4B2     		uxth	r4, r4
 1567 0052 2543     		orrs	r5, r5, r4
 1568              	.LVL210:
 1569              	.L93:
 960:./FWLIB/src/stm32f4xx_tim.c ****   
 1570              		.loc 1 960 0
 1571 0054 8580     		strh	r5, [r0, #4]	@ movhi
 963:./FWLIB/src/stm32f4xx_tim.c ****     
 1572              		.loc 1 963 0
 1573 0056 8283     		strh	r2, [r0, #28]	@ movhi
 966:./FWLIB/src/stm32f4xx_tim.c ****   
 1574              		.loc 1 966 0
 1575 0058 8A68     		ldr	r2, [r1, #8]
 1576              	.LVL211:
 1577 005a 0264     		str	r2, [r0, #64]
 1578              	.LVL212:
 969:./FWLIB/src/stm32f4xx_tim.c **** }
 1579              		.loc 1 969 0
 1580 005c 0384     		strh	r3, [r0, #32]	@ movhi
 970:./FWLIB/src/stm32f4xx_tim.c **** 
 1581              		.loc 1 970 0
 1582 005e 30BC     		pop	{r4, r5}
 1583              	.LCFI16:
 1584              		.cfi_restore 5
 1585              		.cfi_restore 4
 1586              		.cfi_def_cfa_offset 0
 1587              	.LVL213:
 1588 0060 7047     		bx	lr
 1589              	.L96:
 1590 0062 00BF     		.align	2
 1591              	.L95:
 1592 0064 00000140 		.word	1073807360
 1593              		.cfi_endproc
 1594              	.LFE130:
 1596              		.section	.text.TIM_OCStructInit,"ax",%progbits
 1597              		.align	1
 1598              		.global	TIM_OCStructInit
 1599              		.syntax unified
 1600              		.thumb
 1601              		.thumb_func
 1602              		.fpu fpv4-sp-d16
 1604              	TIM_OCStructInit:
 1605              	.LFB131:
 979:./FWLIB/src/stm32f4xx_tim.c ****   /* Set the default configuration */
 1606              		.loc 1 979 0
 1607              		.cfi_startproc
 1608              		@ args = 0, pretend = 0, frame = 0
 1609              		@ frame_needed = 0, uses_anonymous_args = 0
 1610              		@ link register save eliminated.
ARM GAS  /tmp/ccEzGk5p.s 			page 91


 1611              	.LVL214:
 981:./FWLIB/src/stm32f4xx_tim.c ****   TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 1612              		.loc 1 981 0
 1613 0000 0023     		movs	r3, #0
 1614 0002 0380     		strh	r3, [r0]	@ movhi
 982:./FWLIB/src/stm32f4xx_tim.c ****   TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 1615              		.loc 1 982 0
 1616 0004 4380     		strh	r3, [r0, #2]	@ movhi
 983:./FWLIB/src/stm32f4xx_tim.c ****   TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 1617              		.loc 1 983 0
 1618 0006 8380     		strh	r3, [r0, #4]	@ movhi
 984:./FWLIB/src/stm32f4xx_tim.c ****   TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 1619              		.loc 1 984 0
 1620 0008 8360     		str	r3, [r0, #8]
 985:./FWLIB/src/stm32f4xx_tim.c ****   TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 1621              		.loc 1 985 0
 1622 000a 8381     		strh	r3, [r0, #12]	@ movhi
 986:./FWLIB/src/stm32f4xx_tim.c ****   TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 1623              		.loc 1 986 0
 1624 000c C381     		strh	r3, [r0, #14]	@ movhi
 987:./FWLIB/src/stm32f4xx_tim.c ****   TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 1625              		.loc 1 987 0
 1626 000e 0382     		strh	r3, [r0, #16]	@ movhi
 988:./FWLIB/src/stm32f4xx_tim.c **** }
 1627              		.loc 1 988 0
 1628 0010 4382     		strh	r3, [r0, #18]	@ movhi
 989:./FWLIB/src/stm32f4xx_tim.c **** 
 1629              		.loc 1 989 0
 1630 0012 7047     		bx	lr
 1631              		.cfi_endproc
 1632              	.LFE131:
 1634              		.section	.text.TIM_SelectOCxM,"ax",%progbits
 1635              		.align	1
 1636              		.global	TIM_SelectOCxM
 1637              		.syntax unified
 1638              		.thumb
 1639              		.thumb_func
 1640              		.fpu fpv4-sp-d16
 1642              	TIM_SelectOCxM:
 1643              	.LFB132:
1015:./FWLIB/src/stm32f4xx_tim.c ****   uint32_t tmp = 0;
 1644              		.loc 1 1015 0
 1645              		.cfi_startproc
 1646              		@ args = 0, pretend = 0, frame = 0
 1647              		@ frame_needed = 0, uses_anonymous_args = 0
 1648              		@ link register save eliminated.
 1649              	.LVL215:
 1650 0000 30B4     		push	{r4, r5}
 1651              	.LCFI17:
 1652              		.cfi_def_cfa_offset 8
 1653              		.cfi_offset 4, -8
 1654              		.cfi_offset 5, -4
 1655              	.LVL216:
1025:./FWLIB/src/stm32f4xx_tim.c **** 
 1656              		.loc 1 1025 0
 1657 0002 00F11804 		add	r4, r0, #24
 1658              	.LVL217:
ARM GAS  /tmp/ccEzGk5p.s 			page 92


1027:./FWLIB/src/stm32f4xx_tim.c **** 
 1659              		.loc 1 1027 0
 1660 0006 0123     		movs	r3, #1
 1661 0008 8B40     		lsls	r3, r3, r1
 1662 000a 9BB2     		uxth	r3, r3
 1663              	.LVL218:
1030:./FWLIB/src/stm32f4xx_tim.c **** 
 1664              		.loc 1 1030 0
 1665 000c 058C     		ldrh	r5, [r0, #32]
 1666 000e 25EA0303 		bic	r3, r5, r3
 1667              	.LVL219:
 1668 0012 0384     		strh	r3, [r0, #32]	@ movhi
1032:./FWLIB/src/stm32f4xx_tim.c ****   {
 1669              		.loc 1 1032 0
 1670 0014 81B1     		cbz	r1, .L99
1032:./FWLIB/src/stm32f4xx_tim.c ****   {
 1671              		.loc 1 1032 0 is_stmt 0 discriminator 1
 1672 0016 0829     		cmp	r1, #8
 1673 0018 0ED0     		beq	.L99
1044:./FWLIB/src/stm32f4xx_tim.c **** 
 1674              		.loc 1 1044 0 is_stmt 1
 1675 001a 0439     		subs	r1, r1, #4
 1676              	.LVL220:
 1677 001c C1F34E01 		ubfx	r1, r1, #1, #15
 1678              	.LVL221:
1047:./FWLIB/src/stm32f4xx_tim.c ****     
 1679              		.loc 1 1047 0
 1680 0020 0B59     		ldr	r3, [r1, r4]
 1681 0022 23F4E043 		bic	r3, r3, #28672
 1682 0026 1B04     		lsls	r3, r3, #16
 1683 0028 1B0C     		lsrs	r3, r3, #16
 1684 002a 0B51     		str	r3, [r1, r4]
1050:./FWLIB/src/stm32f4xx_tim.c ****   }
 1685              		.loc 1 1050 0
 1686 002c 0B59     		ldr	r3, [r1, r4]
 1687 002e 1202     		lsls	r2, r2, #8
 1688              	.LVL222:
 1689 0030 92B2     		uxth	r2, r2
 1690 0032 1A43     		orrs	r2, r2, r3
 1691 0034 0A51     		str	r2, [r1, r4]
1052:./FWLIB/src/stm32f4xx_tim.c **** 
 1692              		.loc 1 1052 0
 1693 0036 09E0     		b	.L98
 1694              	.LVL223:
 1695              	.L99:
1034:./FWLIB/src/stm32f4xx_tim.c **** 
 1696              		.loc 1 1034 0
 1697 0038 4908     		lsrs	r1, r1, #1
 1698              	.LVL224:
1037:./FWLIB/src/stm32f4xx_tim.c ****    
 1699              		.loc 1 1037 0
 1700 003a 0B59     		ldr	r3, [r1, r4]
 1701 003c 23F07003 		bic	r3, r3, #112
 1702 0040 1B04     		lsls	r3, r3, #16
 1703 0042 1B0C     		lsrs	r3, r3, #16
 1704 0044 0B51     		str	r3, [r1, r4]
1040:./FWLIB/src/stm32f4xx_tim.c ****   }
ARM GAS  /tmp/ccEzGk5p.s 			page 93


 1705              		.loc 1 1040 0
 1706 0046 0B59     		ldr	r3, [r1, r4]
 1707 0048 1A43     		orrs	r2, r2, r3
 1708              	.LVL225:
 1709 004a 0A51     		str	r2, [r1, r4]
 1710              	.LVL226:
 1711              	.L98:
1052:./FWLIB/src/stm32f4xx_tim.c **** 
 1712              		.loc 1 1052 0
 1713 004c 30BC     		pop	{r4, r5}
 1714              	.LCFI18:
 1715              		.cfi_restore 5
 1716              		.cfi_restore 4
 1717              		.cfi_def_cfa_offset 0
 1718 004e 7047     		bx	lr
 1719              		.cfi_endproc
 1720              	.LFE132:
 1722              		.section	.text.TIM_SetCompare1,"ax",%progbits
 1723              		.align	1
 1724              		.global	TIM_SetCompare1
 1725              		.syntax unified
 1726              		.thumb
 1727              		.thumb_func
 1728              		.fpu fpv4-sp-d16
 1730              	TIM_SetCompare1:
 1731              	.LFB133:
1061:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 1732              		.loc 1 1061 0
 1733              		.cfi_startproc
 1734              		@ args = 0, pretend = 0, frame = 0
 1735              		@ frame_needed = 0, uses_anonymous_args = 0
 1736              		@ link register save eliminated.
 1737              	.LVL227:
1066:./FWLIB/src/stm32f4xx_tim.c **** }
 1738              		.loc 1 1066 0
 1739 0000 4163     		str	r1, [r0, #52]
1067:./FWLIB/src/stm32f4xx_tim.c **** 
 1740              		.loc 1 1067 0
 1741 0002 7047     		bx	lr
 1742              		.cfi_endproc
 1743              	.LFE133:
 1745              		.section	.text.TIM_SetCompare2,"ax",%progbits
 1746              		.align	1
 1747              		.global	TIM_SetCompare2
 1748              		.syntax unified
 1749              		.thumb
 1750              		.thumb_func
 1751              		.fpu fpv4-sp-d16
 1753              	TIM_SetCompare2:
 1754              	.LFB134:
1077:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 1755              		.loc 1 1077 0
 1756              		.cfi_startproc
 1757              		@ args = 0, pretend = 0, frame = 0
 1758              		@ frame_needed = 0, uses_anonymous_args = 0
 1759              		@ link register save eliminated.
 1760              	.LVL228:
ARM GAS  /tmp/ccEzGk5p.s 			page 94


1082:./FWLIB/src/stm32f4xx_tim.c **** }
 1761              		.loc 1 1082 0
 1762 0000 8163     		str	r1, [r0, #56]
1083:./FWLIB/src/stm32f4xx_tim.c **** 
 1763              		.loc 1 1083 0
 1764 0002 7047     		bx	lr
 1765              		.cfi_endproc
 1766              	.LFE134:
 1768              		.section	.text.TIM_SetCompare3,"ax",%progbits
 1769              		.align	1
 1770              		.global	TIM_SetCompare3
 1771              		.syntax unified
 1772              		.thumb
 1773              		.thumb_func
 1774              		.fpu fpv4-sp-d16
 1776              	TIM_SetCompare3:
 1777              	.LFB135:
1092:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 1778              		.loc 1 1092 0
 1779              		.cfi_startproc
 1780              		@ args = 0, pretend = 0, frame = 0
 1781              		@ frame_needed = 0, uses_anonymous_args = 0
 1782              		@ link register save eliminated.
 1783              	.LVL229:
1097:./FWLIB/src/stm32f4xx_tim.c **** }
 1784              		.loc 1 1097 0
 1785 0000 C163     		str	r1, [r0, #60]
1098:./FWLIB/src/stm32f4xx_tim.c **** 
 1786              		.loc 1 1098 0
 1787 0002 7047     		bx	lr
 1788              		.cfi_endproc
 1789              	.LFE135:
 1791              		.section	.text.TIM_SetCompare4,"ax",%progbits
 1792              		.align	1
 1793              		.global	TIM_SetCompare4
 1794              		.syntax unified
 1795              		.thumb
 1796              		.thumb_func
 1797              		.fpu fpv4-sp-d16
 1799              	TIM_SetCompare4:
 1800              	.LFB136:
1107:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 1801              		.loc 1 1107 0
 1802              		.cfi_startproc
 1803              		@ args = 0, pretend = 0, frame = 0
 1804              		@ frame_needed = 0, uses_anonymous_args = 0
 1805              		@ link register save eliminated.
 1806              	.LVL230:
1112:./FWLIB/src/stm32f4xx_tim.c **** }
 1807              		.loc 1 1112 0
 1808 0000 0164     		str	r1, [r0, #64]
1113:./FWLIB/src/stm32f4xx_tim.c **** 
 1809              		.loc 1 1113 0
 1810 0002 7047     		bx	lr
 1811              		.cfi_endproc
 1812              	.LFE136:
 1814              		.section	.text.TIM_ForcedOC1Config,"ax",%progbits
ARM GAS  /tmp/ccEzGk5p.s 			page 95


 1815              		.align	1
 1816              		.global	TIM_ForcedOC1Config
 1817              		.syntax unified
 1818              		.thumb
 1819              		.thumb_func
 1820              		.fpu fpv4-sp-d16
 1822              	TIM_ForcedOC1Config:
 1823              	.LFB137:
1125:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr1 = 0;
 1824              		.loc 1 1125 0
 1825              		.cfi_startproc
 1826              		@ args = 0, pretend = 0, frame = 0
 1827              		@ frame_needed = 0, uses_anonymous_args = 0
 1828              		@ link register save eliminated.
 1829              	.LVL231:
1131:./FWLIB/src/stm32f4xx_tim.c **** 
 1830              		.loc 1 1131 0
 1831 0000 038B     		ldrh	r3, [r0, #24]
 1832 0002 9BB2     		uxth	r3, r3
 1833              	.LVL232:
1134:./FWLIB/src/stm32f4xx_tim.c **** 
 1834              		.loc 1 1134 0
 1835 0004 23F07003 		bic	r3, r3, #112
 1836              	.LVL233:
1137:./FWLIB/src/stm32f4xx_tim.c **** 
 1837              		.loc 1 1137 0
 1838 0008 1943     		orrs	r1, r1, r3
 1839              	.LVL234:
1140:./FWLIB/src/stm32f4xx_tim.c **** }
 1840              		.loc 1 1140 0
 1841 000a 0183     		strh	r1, [r0, #24]	@ movhi
1141:./FWLIB/src/stm32f4xx_tim.c **** 
 1842              		.loc 1 1141 0
 1843 000c 7047     		bx	lr
 1844              		.cfi_endproc
 1845              	.LFE137:
 1847              		.section	.text.TIM_ForcedOC2Config,"ax",%progbits
 1848              		.align	1
 1849              		.global	TIM_ForcedOC2Config
 1850              		.syntax unified
 1851              		.thumb
 1852              		.thumb_func
 1853              		.fpu fpv4-sp-d16
 1855              	TIM_ForcedOC2Config:
 1856              	.LFB138:
1154:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr1 = 0;
 1857              		.loc 1 1154 0
 1858              		.cfi_startproc
 1859              		@ args = 0, pretend = 0, frame = 0
 1860              		@ frame_needed = 0, uses_anonymous_args = 0
 1861              		@ link register save eliminated.
 1862              	.LVL235:
1160:./FWLIB/src/stm32f4xx_tim.c **** 
 1863              		.loc 1 1160 0
 1864 0000 038B     		ldrh	r3, [r0, #24]
 1865 0002 9BB2     		uxth	r3, r3
 1866              	.LVL236:
ARM GAS  /tmp/ccEzGk5p.s 			page 96


1163:./FWLIB/src/stm32f4xx_tim.c **** 
 1867              		.loc 1 1163 0
 1868 0004 23F4E043 		bic	r3, r3, #28672
 1869              	.LVL237:
1166:./FWLIB/src/stm32f4xx_tim.c **** 
 1870              		.loc 1 1166 0
 1871 0008 0902     		lsls	r1, r1, #8
 1872              	.LVL238:
 1873 000a 89B2     		uxth	r1, r1
 1874 000c 0B43     		orrs	r3, r3, r1
 1875              	.LVL239:
1169:./FWLIB/src/stm32f4xx_tim.c **** }
 1876              		.loc 1 1169 0
 1877 000e 0383     		strh	r3, [r0, #24]	@ movhi
1170:./FWLIB/src/stm32f4xx_tim.c **** 
 1878              		.loc 1 1170 0
 1879 0010 7047     		bx	lr
 1880              		.cfi_endproc
 1881              	.LFE138:
 1883              		.section	.text.TIM_ForcedOC3Config,"ax",%progbits
 1884              		.align	1
 1885              		.global	TIM_ForcedOC3Config
 1886              		.syntax unified
 1887              		.thumb
 1888              		.thumb_func
 1889              		.fpu fpv4-sp-d16
 1891              	TIM_ForcedOC3Config:
 1892              	.LFB139:
1182:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr2 = 0;
 1893              		.loc 1 1182 0
 1894              		.cfi_startproc
 1895              		@ args = 0, pretend = 0, frame = 0
 1896              		@ frame_needed = 0, uses_anonymous_args = 0
 1897              		@ link register save eliminated.
 1898              	.LVL240:
1189:./FWLIB/src/stm32f4xx_tim.c **** 
 1899              		.loc 1 1189 0
 1900 0000 838B     		ldrh	r3, [r0, #28]
 1901 0002 9BB2     		uxth	r3, r3
 1902              	.LVL241:
1192:./FWLIB/src/stm32f4xx_tim.c **** 
 1903              		.loc 1 1192 0
 1904 0004 23F07003 		bic	r3, r3, #112
 1905              	.LVL242:
1195:./FWLIB/src/stm32f4xx_tim.c **** 
 1906              		.loc 1 1195 0
 1907 0008 1943     		orrs	r1, r1, r3
 1908              	.LVL243:
1198:./FWLIB/src/stm32f4xx_tim.c **** }
 1909              		.loc 1 1198 0
 1910 000a 8183     		strh	r1, [r0, #28]	@ movhi
1199:./FWLIB/src/stm32f4xx_tim.c **** 
 1911              		.loc 1 1199 0
 1912 000c 7047     		bx	lr
 1913              		.cfi_endproc
 1914              	.LFE139:
 1916              		.section	.text.TIM_ForcedOC4Config,"ax",%progbits
ARM GAS  /tmp/ccEzGk5p.s 			page 97


 1917              		.align	1
 1918              		.global	TIM_ForcedOC4Config
 1919              		.syntax unified
 1920              		.thumb
 1921              		.thumb_func
 1922              		.fpu fpv4-sp-d16
 1924              	TIM_ForcedOC4Config:
 1925              	.LFB140:
1211:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr2 = 0;
 1926              		.loc 1 1211 0
 1927              		.cfi_startproc
 1928              		@ args = 0, pretend = 0, frame = 0
 1929              		@ frame_needed = 0, uses_anonymous_args = 0
 1930              		@ link register save eliminated.
 1931              	.LVL244:
1217:./FWLIB/src/stm32f4xx_tim.c **** 
 1932              		.loc 1 1217 0
 1933 0000 838B     		ldrh	r3, [r0, #28]
 1934 0002 9BB2     		uxth	r3, r3
 1935              	.LVL245:
1220:./FWLIB/src/stm32f4xx_tim.c **** 
 1936              		.loc 1 1220 0
 1937 0004 23F4E043 		bic	r3, r3, #28672
 1938              	.LVL246:
1223:./FWLIB/src/stm32f4xx_tim.c **** 
 1939              		.loc 1 1223 0
 1940 0008 0902     		lsls	r1, r1, #8
 1941              	.LVL247:
 1942 000a 89B2     		uxth	r1, r1
 1943 000c 0B43     		orrs	r3, r3, r1
 1944              	.LVL248:
1226:./FWLIB/src/stm32f4xx_tim.c **** }
 1945              		.loc 1 1226 0
 1946 000e 8383     		strh	r3, [r0, #28]	@ movhi
1227:./FWLIB/src/stm32f4xx_tim.c **** 
 1947              		.loc 1 1227 0
 1948 0010 7047     		bx	lr
 1949              		.cfi_endproc
 1950              	.LFE140:
 1952              		.section	.text.TIM_OC1PreloadConfig,"ax",%progbits
 1953              		.align	1
 1954              		.global	TIM_OC1PreloadConfig
 1955              		.syntax unified
 1956              		.thumb
 1957              		.thumb_func
 1958              		.fpu fpv4-sp-d16
 1960              	TIM_OC1PreloadConfig:
 1961              	.LFB141:
1239:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr1 = 0;
 1962              		.loc 1 1239 0
 1963              		.cfi_startproc
 1964              		@ args = 0, pretend = 0, frame = 0
 1965              		@ frame_needed = 0, uses_anonymous_args = 0
 1966              		@ link register save eliminated.
 1967              	.LVL249:
1246:./FWLIB/src/stm32f4xx_tim.c **** 
 1968              		.loc 1 1246 0
ARM GAS  /tmp/ccEzGk5p.s 			page 98


 1969 0000 038B     		ldrh	r3, [r0, #24]
 1970 0002 9BB2     		uxth	r3, r3
 1971              	.LVL250:
1249:./FWLIB/src/stm32f4xx_tim.c **** 
 1972              		.loc 1 1249 0
 1973 0004 23F00803 		bic	r3, r3, #8
 1974              	.LVL251:
1252:./FWLIB/src/stm32f4xx_tim.c **** 
 1975              		.loc 1 1252 0
 1976 0008 1943     		orrs	r1, r1, r3
 1977              	.LVL252:
1255:./FWLIB/src/stm32f4xx_tim.c **** }
 1978              		.loc 1 1255 0
 1979 000a 0183     		strh	r1, [r0, #24]	@ movhi
1256:./FWLIB/src/stm32f4xx_tim.c **** 
 1980              		.loc 1 1256 0
 1981 000c 7047     		bx	lr
 1982              		.cfi_endproc
 1983              	.LFE141:
 1985              		.section	.text.TIM_OC2PreloadConfig,"ax",%progbits
 1986              		.align	1
 1987              		.global	TIM_OC2PreloadConfig
 1988              		.syntax unified
 1989              		.thumb
 1990              		.thumb_func
 1991              		.fpu fpv4-sp-d16
 1993              	TIM_OC2PreloadConfig:
 1994              	.LFB142:
1269:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr1 = 0;
 1995              		.loc 1 1269 0
 1996              		.cfi_startproc
 1997              		@ args = 0, pretend = 0, frame = 0
 1998              		@ frame_needed = 0, uses_anonymous_args = 0
 1999              		@ link register save eliminated.
 2000              	.LVL253:
1276:./FWLIB/src/stm32f4xx_tim.c **** 
 2001              		.loc 1 1276 0
 2002 0000 038B     		ldrh	r3, [r0, #24]
 2003 0002 9BB2     		uxth	r3, r3
 2004              	.LVL254:
1279:./FWLIB/src/stm32f4xx_tim.c **** 
 2005              		.loc 1 1279 0
 2006 0004 23F40063 		bic	r3, r3, #2048
 2007              	.LVL255:
1282:./FWLIB/src/stm32f4xx_tim.c **** 
 2008              		.loc 1 1282 0
 2009 0008 0902     		lsls	r1, r1, #8
 2010              	.LVL256:
 2011 000a 89B2     		uxth	r1, r1
 2012 000c 0B43     		orrs	r3, r3, r1
 2013              	.LVL257:
1285:./FWLIB/src/stm32f4xx_tim.c **** }
 2014              		.loc 1 1285 0
 2015 000e 0383     		strh	r3, [r0, #24]	@ movhi
1286:./FWLIB/src/stm32f4xx_tim.c **** 
 2016              		.loc 1 1286 0
 2017 0010 7047     		bx	lr
ARM GAS  /tmp/ccEzGk5p.s 			page 99


 2018              		.cfi_endproc
 2019              	.LFE142:
 2021              		.section	.text.TIM_OC3PreloadConfig,"ax",%progbits
 2022              		.align	1
 2023              		.global	TIM_OC3PreloadConfig
 2024              		.syntax unified
 2025              		.thumb
 2026              		.thumb_func
 2027              		.fpu fpv4-sp-d16
 2029              	TIM_OC3PreloadConfig:
 2030              	.LFB143:
1298:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr2 = 0;
 2031              		.loc 1 1298 0
 2032              		.cfi_startproc
 2033              		@ args = 0, pretend = 0, frame = 0
 2034              		@ frame_needed = 0, uses_anonymous_args = 0
 2035              		@ link register save eliminated.
 2036              	.LVL258:
1305:./FWLIB/src/stm32f4xx_tim.c **** 
 2037              		.loc 1 1305 0
 2038 0000 838B     		ldrh	r3, [r0, #28]
 2039 0002 9BB2     		uxth	r3, r3
 2040              	.LVL259:
1308:./FWLIB/src/stm32f4xx_tim.c **** 
 2041              		.loc 1 1308 0
 2042 0004 23F00803 		bic	r3, r3, #8
 2043              	.LVL260:
1311:./FWLIB/src/stm32f4xx_tim.c **** 
 2044              		.loc 1 1311 0
 2045 0008 1943     		orrs	r1, r1, r3
 2046              	.LVL261:
1314:./FWLIB/src/stm32f4xx_tim.c **** }
 2047              		.loc 1 1314 0
 2048 000a 8183     		strh	r1, [r0, #28]	@ movhi
1315:./FWLIB/src/stm32f4xx_tim.c **** 
 2049              		.loc 1 1315 0
 2050 000c 7047     		bx	lr
 2051              		.cfi_endproc
 2052              	.LFE143:
 2054              		.section	.text.TIM_OC4PreloadConfig,"ax",%progbits
 2055              		.align	1
 2056              		.global	TIM_OC4PreloadConfig
 2057              		.syntax unified
 2058              		.thumb
 2059              		.thumb_func
 2060              		.fpu fpv4-sp-d16
 2062              	TIM_OC4PreloadConfig:
 2063              	.LFB144:
1327:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr2 = 0;
 2064              		.loc 1 1327 0
 2065              		.cfi_startproc
 2066              		@ args = 0, pretend = 0, frame = 0
 2067              		@ frame_needed = 0, uses_anonymous_args = 0
 2068              		@ link register save eliminated.
 2069              	.LVL262:
1334:./FWLIB/src/stm32f4xx_tim.c **** 
 2070              		.loc 1 1334 0
ARM GAS  /tmp/ccEzGk5p.s 			page 100


 2071 0000 838B     		ldrh	r3, [r0, #28]
 2072 0002 9BB2     		uxth	r3, r3
 2073              	.LVL263:
1337:./FWLIB/src/stm32f4xx_tim.c **** 
 2074              		.loc 1 1337 0
 2075 0004 23F40063 		bic	r3, r3, #2048
 2076              	.LVL264:
1340:./FWLIB/src/stm32f4xx_tim.c **** 
 2077              		.loc 1 1340 0
 2078 0008 0902     		lsls	r1, r1, #8
 2079              	.LVL265:
 2080 000a 89B2     		uxth	r1, r1
 2081 000c 0B43     		orrs	r3, r3, r1
 2082              	.LVL266:
1343:./FWLIB/src/stm32f4xx_tim.c **** }
 2083              		.loc 1 1343 0
 2084 000e 8383     		strh	r3, [r0, #28]	@ movhi
1344:./FWLIB/src/stm32f4xx_tim.c **** 
 2085              		.loc 1 1344 0
 2086 0010 7047     		bx	lr
 2087              		.cfi_endproc
 2088              	.LFE144:
 2090              		.section	.text.TIM_OC1FastConfig,"ax",%progbits
 2091              		.align	1
 2092              		.global	TIM_OC1FastConfig
 2093              		.syntax unified
 2094              		.thumb
 2095              		.thumb_func
 2096              		.fpu fpv4-sp-d16
 2098              	TIM_OC1FastConfig:
 2099              	.LFB145:
1356:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr1 = 0;
 2100              		.loc 1 1356 0
 2101              		.cfi_startproc
 2102              		@ args = 0, pretend = 0, frame = 0
 2103              		@ frame_needed = 0, uses_anonymous_args = 0
 2104              		@ link register save eliminated.
 2105              	.LVL267:
1364:./FWLIB/src/stm32f4xx_tim.c **** 
 2106              		.loc 1 1364 0
 2107 0000 038B     		ldrh	r3, [r0, #24]
 2108 0002 9BB2     		uxth	r3, r3
 2109              	.LVL268:
1367:./FWLIB/src/stm32f4xx_tim.c **** 
 2110              		.loc 1 1367 0
 2111 0004 23F00403 		bic	r3, r3, #4
 2112              	.LVL269:
1370:./FWLIB/src/stm32f4xx_tim.c **** 
 2113              		.loc 1 1370 0
 2114 0008 1943     		orrs	r1, r1, r3
 2115              	.LVL270:
1373:./FWLIB/src/stm32f4xx_tim.c **** }
 2116              		.loc 1 1373 0
 2117 000a 0183     		strh	r1, [r0, #24]	@ movhi
1374:./FWLIB/src/stm32f4xx_tim.c **** 
 2118              		.loc 1 1374 0
 2119 000c 7047     		bx	lr
ARM GAS  /tmp/ccEzGk5p.s 			page 101


 2120              		.cfi_endproc
 2121              	.LFE145:
 2123              		.section	.text.TIM_OC2FastConfig,"ax",%progbits
 2124              		.align	1
 2125              		.global	TIM_OC2FastConfig
 2126              		.syntax unified
 2127              		.thumb
 2128              		.thumb_func
 2129              		.fpu fpv4-sp-d16
 2131              	TIM_OC2FastConfig:
 2132              	.LFB146:
1387:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr1 = 0;
 2133              		.loc 1 1387 0
 2134              		.cfi_startproc
 2135              		@ args = 0, pretend = 0, frame = 0
 2136              		@ frame_needed = 0, uses_anonymous_args = 0
 2137              		@ link register save eliminated.
 2138              	.LVL271:
1395:./FWLIB/src/stm32f4xx_tim.c **** 
 2139              		.loc 1 1395 0
 2140 0000 038B     		ldrh	r3, [r0, #24]
 2141 0002 9BB2     		uxth	r3, r3
 2142              	.LVL272:
1398:./FWLIB/src/stm32f4xx_tim.c **** 
 2143              		.loc 1 1398 0
 2144 0004 23F48063 		bic	r3, r3, #1024
 2145              	.LVL273:
1401:./FWLIB/src/stm32f4xx_tim.c **** 
 2146              		.loc 1 1401 0
 2147 0008 0902     		lsls	r1, r1, #8
 2148              	.LVL274:
 2149 000a 89B2     		uxth	r1, r1
 2150 000c 0B43     		orrs	r3, r3, r1
 2151              	.LVL275:
1404:./FWLIB/src/stm32f4xx_tim.c **** }
 2152              		.loc 1 1404 0
 2153 000e 0383     		strh	r3, [r0, #24]	@ movhi
1405:./FWLIB/src/stm32f4xx_tim.c **** 
 2154              		.loc 1 1405 0
 2155 0010 7047     		bx	lr
 2156              		.cfi_endproc
 2157              	.LFE146:
 2159              		.section	.text.TIM_OC3FastConfig,"ax",%progbits
 2160              		.align	1
 2161              		.global	TIM_OC3FastConfig
 2162              		.syntax unified
 2163              		.thumb
 2164              		.thumb_func
 2165              		.fpu fpv4-sp-d16
 2167              	TIM_OC3FastConfig:
 2168              	.LFB147:
1417:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr2 = 0;
 2169              		.loc 1 1417 0
 2170              		.cfi_startproc
 2171              		@ args = 0, pretend = 0, frame = 0
 2172              		@ frame_needed = 0, uses_anonymous_args = 0
 2173              		@ link register save eliminated.
ARM GAS  /tmp/ccEzGk5p.s 			page 102


 2174              	.LVL276:
1425:./FWLIB/src/stm32f4xx_tim.c **** 
 2175              		.loc 1 1425 0
 2176 0000 838B     		ldrh	r3, [r0, #28]
 2177 0002 9BB2     		uxth	r3, r3
 2178              	.LVL277:
1428:./FWLIB/src/stm32f4xx_tim.c **** 
 2179              		.loc 1 1428 0
 2180 0004 23F00403 		bic	r3, r3, #4
 2181              	.LVL278:
1431:./FWLIB/src/stm32f4xx_tim.c **** 
 2182              		.loc 1 1431 0
 2183 0008 1943     		orrs	r1, r1, r3
 2184              	.LVL279:
1434:./FWLIB/src/stm32f4xx_tim.c **** }
 2185              		.loc 1 1434 0
 2186 000a 8183     		strh	r1, [r0, #28]	@ movhi
1435:./FWLIB/src/stm32f4xx_tim.c **** 
 2187              		.loc 1 1435 0
 2188 000c 7047     		bx	lr
 2189              		.cfi_endproc
 2190              	.LFE147:
 2192              		.section	.text.TIM_OC4FastConfig,"ax",%progbits
 2193              		.align	1
 2194              		.global	TIM_OC4FastConfig
 2195              		.syntax unified
 2196              		.thumb
 2197              		.thumb_func
 2198              		.fpu fpv4-sp-d16
 2200              	TIM_OC4FastConfig:
 2201              	.LFB148:
1447:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr2 = 0;
 2202              		.loc 1 1447 0
 2203              		.cfi_startproc
 2204              		@ args = 0, pretend = 0, frame = 0
 2205              		@ frame_needed = 0, uses_anonymous_args = 0
 2206              		@ link register save eliminated.
 2207              	.LVL280:
1455:./FWLIB/src/stm32f4xx_tim.c **** 
 2208              		.loc 1 1455 0
 2209 0000 838B     		ldrh	r3, [r0, #28]
 2210 0002 9BB2     		uxth	r3, r3
 2211              	.LVL281:
1458:./FWLIB/src/stm32f4xx_tim.c **** 
 2212              		.loc 1 1458 0
 2213 0004 23F48063 		bic	r3, r3, #1024
 2214              	.LVL282:
1461:./FWLIB/src/stm32f4xx_tim.c **** 
 2215              		.loc 1 1461 0
 2216 0008 0902     		lsls	r1, r1, #8
 2217              	.LVL283:
 2218 000a 89B2     		uxth	r1, r1
 2219 000c 0B43     		orrs	r3, r3, r1
 2220              	.LVL284:
1464:./FWLIB/src/stm32f4xx_tim.c **** }
 2221              		.loc 1 1464 0
 2222 000e 8383     		strh	r3, [r0, #28]	@ movhi
ARM GAS  /tmp/ccEzGk5p.s 			page 103


1465:./FWLIB/src/stm32f4xx_tim.c **** 
 2223              		.loc 1 1465 0
 2224 0010 7047     		bx	lr
 2225              		.cfi_endproc
 2226              	.LFE148:
 2228              		.section	.text.TIM_ClearOC1Ref,"ax",%progbits
 2229              		.align	1
 2230              		.global	TIM_ClearOC1Ref
 2231              		.syntax unified
 2232              		.thumb
 2233              		.thumb_func
 2234              		.fpu fpv4-sp-d16
 2236              	TIM_ClearOC1Ref:
 2237              	.LFB149:
1477:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr1 = 0;
 2238              		.loc 1 1477 0
 2239              		.cfi_startproc
 2240              		@ args = 0, pretend = 0, frame = 0
 2241              		@ frame_needed = 0, uses_anonymous_args = 0
 2242              		@ link register save eliminated.
 2243              	.LVL285:
1484:./FWLIB/src/stm32f4xx_tim.c **** 
 2244              		.loc 1 1484 0
 2245 0000 038B     		ldrh	r3, [r0, #24]
 2246 0002 9BB2     		uxth	r3, r3
 2247              	.LVL286:
1487:./FWLIB/src/stm32f4xx_tim.c **** 
 2248              		.loc 1 1487 0
 2249 0004 23F08003 		bic	r3, r3, #128
 2250              	.LVL287:
1490:./FWLIB/src/stm32f4xx_tim.c **** 
 2251              		.loc 1 1490 0
 2252 0008 1943     		orrs	r1, r1, r3
 2253              	.LVL288:
1493:./FWLIB/src/stm32f4xx_tim.c **** }
 2254              		.loc 1 1493 0
 2255 000a 0183     		strh	r1, [r0, #24]	@ movhi
1494:./FWLIB/src/stm32f4xx_tim.c **** 
 2256              		.loc 1 1494 0
 2257 000c 7047     		bx	lr
 2258              		.cfi_endproc
 2259              	.LFE149:
 2261              		.section	.text.TIM_ClearOC2Ref,"ax",%progbits
 2262              		.align	1
 2263              		.global	TIM_ClearOC2Ref
 2264              		.syntax unified
 2265              		.thumb
 2266              		.thumb_func
 2267              		.fpu fpv4-sp-d16
 2269              	TIM_ClearOC2Ref:
 2270              	.LFB150:
1507:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr1 = 0;
 2271              		.loc 1 1507 0
 2272              		.cfi_startproc
 2273              		@ args = 0, pretend = 0, frame = 0
 2274              		@ frame_needed = 0, uses_anonymous_args = 0
 2275              		@ link register save eliminated.
ARM GAS  /tmp/ccEzGk5p.s 			page 104


 2276              	.LVL289:
1514:./FWLIB/src/stm32f4xx_tim.c **** 
 2277              		.loc 1 1514 0
 2278 0000 038B     		ldrh	r3, [r0, #24]
 2279              	.LVL290:
1517:./FWLIB/src/stm32f4xx_tim.c **** 
 2280              		.loc 1 1517 0
 2281 0002 C3F30E03 		ubfx	r3, r3, #0, #15
 2282              	.LVL291:
1520:./FWLIB/src/stm32f4xx_tim.c **** 
 2283              		.loc 1 1520 0
 2284 0006 0902     		lsls	r1, r1, #8
 2285              	.LVL292:
 2286 0008 89B2     		uxth	r1, r1
 2287 000a 1943     		orrs	r1, r1, r3
 2288              	.LVL293:
1523:./FWLIB/src/stm32f4xx_tim.c **** }
 2289              		.loc 1 1523 0
 2290 000c 0183     		strh	r1, [r0, #24]	@ movhi
1524:./FWLIB/src/stm32f4xx_tim.c **** 
 2291              		.loc 1 1524 0
 2292 000e 7047     		bx	lr
 2293              		.cfi_endproc
 2294              	.LFE150:
 2296              		.section	.text.TIM_ClearOC3Ref,"ax",%progbits
 2297              		.align	1
 2298              		.global	TIM_ClearOC3Ref
 2299              		.syntax unified
 2300              		.thumb
 2301              		.thumb_func
 2302              		.fpu fpv4-sp-d16
 2304              	TIM_ClearOC3Ref:
 2305              	.LFB151:
1536:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr2 = 0;
 2306              		.loc 1 1536 0
 2307              		.cfi_startproc
 2308              		@ args = 0, pretend = 0, frame = 0
 2309              		@ frame_needed = 0, uses_anonymous_args = 0
 2310              		@ link register save eliminated.
 2311              	.LVL294:
1543:./FWLIB/src/stm32f4xx_tim.c **** 
 2312              		.loc 1 1543 0
 2313 0000 838B     		ldrh	r3, [r0, #28]
 2314 0002 9BB2     		uxth	r3, r3
 2315              	.LVL295:
1546:./FWLIB/src/stm32f4xx_tim.c **** 
 2316              		.loc 1 1546 0
 2317 0004 23F08003 		bic	r3, r3, #128
 2318              	.LVL296:
1549:./FWLIB/src/stm32f4xx_tim.c **** 
 2319              		.loc 1 1549 0
 2320 0008 1943     		orrs	r1, r1, r3
 2321              	.LVL297:
1552:./FWLIB/src/stm32f4xx_tim.c **** }
 2322              		.loc 1 1552 0
 2323 000a 8183     		strh	r1, [r0, #28]	@ movhi
1553:./FWLIB/src/stm32f4xx_tim.c **** 
ARM GAS  /tmp/ccEzGk5p.s 			page 105


 2324              		.loc 1 1553 0
 2325 000c 7047     		bx	lr
 2326              		.cfi_endproc
 2327              	.LFE151:
 2329              		.section	.text.TIM_ClearOC4Ref,"ax",%progbits
 2330              		.align	1
 2331              		.global	TIM_ClearOC4Ref
 2332              		.syntax unified
 2333              		.thumb
 2334              		.thumb_func
 2335              		.fpu fpv4-sp-d16
 2337              	TIM_ClearOC4Ref:
 2338              	.LFB152:
1565:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccmr2 = 0;
 2339              		.loc 1 1565 0
 2340              		.cfi_startproc
 2341              		@ args = 0, pretend = 0, frame = 0
 2342              		@ frame_needed = 0, uses_anonymous_args = 0
 2343              		@ link register save eliminated.
 2344              	.LVL298:
1572:./FWLIB/src/stm32f4xx_tim.c **** 
 2345              		.loc 1 1572 0
 2346 0000 838B     		ldrh	r3, [r0, #28]
 2347              	.LVL299:
1575:./FWLIB/src/stm32f4xx_tim.c **** 
 2348              		.loc 1 1575 0
 2349 0002 C3F30E03 		ubfx	r3, r3, #0, #15
 2350              	.LVL300:
1578:./FWLIB/src/stm32f4xx_tim.c **** 
 2351              		.loc 1 1578 0
 2352 0006 0902     		lsls	r1, r1, #8
 2353              	.LVL301:
 2354 0008 89B2     		uxth	r1, r1
 2355 000a 1943     		orrs	r1, r1, r3
 2356              	.LVL302:
1581:./FWLIB/src/stm32f4xx_tim.c **** }
 2357              		.loc 1 1581 0
 2358 000c 8183     		strh	r1, [r0, #28]	@ movhi
1582:./FWLIB/src/stm32f4xx_tim.c **** 
 2359              		.loc 1 1582 0
 2360 000e 7047     		bx	lr
 2361              		.cfi_endproc
 2362              	.LFE152:
 2364              		.section	.text.TIM_OC1PolarityConfig,"ax",%progbits
 2365              		.align	1
 2366              		.global	TIM_OC1PolarityConfig
 2367              		.syntax unified
 2368              		.thumb
 2369              		.thumb_func
 2370              		.fpu fpv4-sp-d16
 2372              	TIM_OC1PolarityConfig:
 2373              	.LFB153:
1594:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccer = 0;
 2374              		.loc 1 1594 0
 2375              		.cfi_startproc
 2376              		@ args = 0, pretend = 0, frame = 0
 2377              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccEzGk5p.s 			page 106


 2378              		@ link register save eliminated.
 2379              	.LVL303:
1601:./FWLIB/src/stm32f4xx_tim.c **** 
 2380              		.loc 1 1601 0
 2381 0000 038C     		ldrh	r3, [r0, #32]
 2382 0002 9BB2     		uxth	r3, r3
 2383              	.LVL304:
1604:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer |= TIM_OCPolarity;
 2384              		.loc 1 1604 0
 2385 0004 23F00203 		bic	r3, r3, #2
 2386              	.LVL305:
1605:./FWLIB/src/stm32f4xx_tim.c **** 
 2387              		.loc 1 1605 0
 2388 0008 1943     		orrs	r1, r1, r3
 2389              	.LVL306:
1608:./FWLIB/src/stm32f4xx_tim.c **** }
 2390              		.loc 1 1608 0
 2391 000a 0184     		strh	r1, [r0, #32]	@ movhi
1609:./FWLIB/src/stm32f4xx_tim.c **** 
 2392              		.loc 1 1609 0
 2393 000c 7047     		bx	lr
 2394              		.cfi_endproc
 2395              	.LFE153:
 2397              		.section	.text.TIM_OC1NPolarityConfig,"ax",%progbits
 2398              		.align	1
 2399              		.global	TIM_OC1NPolarityConfig
 2400              		.syntax unified
 2401              		.thumb
 2402              		.thumb_func
 2403              		.fpu fpv4-sp-d16
 2405              	TIM_OC1NPolarityConfig:
 2406              	.LFB154:
1621:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccer = 0;
 2407              		.loc 1 1621 0
 2408              		.cfi_startproc
 2409              		@ args = 0, pretend = 0, frame = 0
 2410              		@ frame_needed = 0, uses_anonymous_args = 0
 2411              		@ link register save eliminated.
 2412              	.LVL307:
1627:./FWLIB/src/stm32f4xx_tim.c **** 
 2413              		.loc 1 1627 0
 2414 0000 038C     		ldrh	r3, [r0, #32]
 2415 0002 9BB2     		uxth	r3, r3
 2416              	.LVL308:
1630:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer |= TIM_OCNPolarity;
 2417              		.loc 1 1630 0
 2418 0004 23F00803 		bic	r3, r3, #8
 2419              	.LVL309:
1631:./FWLIB/src/stm32f4xx_tim.c **** 
 2420              		.loc 1 1631 0
 2421 0008 1943     		orrs	r1, r1, r3
 2422              	.LVL310:
1634:./FWLIB/src/stm32f4xx_tim.c **** }
 2423              		.loc 1 1634 0
 2424 000a 0184     		strh	r1, [r0, #32]	@ movhi
1635:./FWLIB/src/stm32f4xx_tim.c **** 
 2425              		.loc 1 1635 0
ARM GAS  /tmp/ccEzGk5p.s 			page 107


 2426 000c 7047     		bx	lr
 2427              		.cfi_endproc
 2428              	.LFE154:
 2430              		.section	.text.TIM_OC2PolarityConfig,"ax",%progbits
 2431              		.align	1
 2432              		.global	TIM_OC2PolarityConfig
 2433              		.syntax unified
 2434              		.thumb
 2435              		.thumb_func
 2436              		.fpu fpv4-sp-d16
 2438              	TIM_OC2PolarityConfig:
 2439              	.LFB155:
1648:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccer = 0;
 2440              		.loc 1 1648 0
 2441              		.cfi_startproc
 2442              		@ args = 0, pretend = 0, frame = 0
 2443              		@ frame_needed = 0, uses_anonymous_args = 0
 2444              		@ link register save eliminated.
 2445              	.LVL311:
1655:./FWLIB/src/stm32f4xx_tim.c **** 
 2446              		.loc 1 1655 0
 2447 0000 038C     		ldrh	r3, [r0, #32]
 2448 0002 9BB2     		uxth	r3, r3
 2449              	.LVL312:
1658:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 2450              		.loc 1 1658 0
 2451 0004 23F02003 		bic	r3, r3, #32
 2452              	.LVL313:
1659:./FWLIB/src/stm32f4xx_tim.c **** 
 2453              		.loc 1 1659 0
 2454 0008 0901     		lsls	r1, r1, #4
 2455              	.LVL314:
 2456 000a 89B2     		uxth	r1, r1
 2457 000c 0B43     		orrs	r3, r3, r1
 2458              	.LVL315:
1662:./FWLIB/src/stm32f4xx_tim.c **** }
 2459              		.loc 1 1662 0
 2460 000e 0384     		strh	r3, [r0, #32]	@ movhi
1663:./FWLIB/src/stm32f4xx_tim.c **** 
 2461              		.loc 1 1663 0
 2462 0010 7047     		bx	lr
 2463              		.cfi_endproc
 2464              	.LFE155:
 2466              		.section	.text.TIM_OC2NPolarityConfig,"ax",%progbits
 2467              		.align	1
 2468              		.global	TIM_OC2NPolarityConfig
 2469              		.syntax unified
 2470              		.thumb
 2471              		.thumb_func
 2472              		.fpu fpv4-sp-d16
 2474              	TIM_OC2NPolarityConfig:
 2475              	.LFB156:
1675:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccer = 0;
 2476              		.loc 1 1675 0
 2477              		.cfi_startproc
 2478              		@ args = 0, pretend = 0, frame = 0
 2479              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccEzGk5p.s 			page 108


 2480              		@ link register save eliminated.
 2481              	.LVL316:
1682:./FWLIB/src/stm32f4xx_tim.c **** 
 2482              		.loc 1 1682 0
 2483 0000 038C     		ldrh	r3, [r0, #32]
 2484 0002 9BB2     		uxth	r3, r3
 2485              	.LVL317:
1685:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 2486              		.loc 1 1685 0
 2487 0004 23F08003 		bic	r3, r3, #128
 2488              	.LVL318:
1686:./FWLIB/src/stm32f4xx_tim.c **** 
 2489              		.loc 1 1686 0
 2490 0008 0901     		lsls	r1, r1, #4
 2491              	.LVL319:
 2492 000a 89B2     		uxth	r1, r1
 2493 000c 0B43     		orrs	r3, r3, r1
 2494              	.LVL320:
1689:./FWLIB/src/stm32f4xx_tim.c **** }
 2495              		.loc 1 1689 0
 2496 000e 0384     		strh	r3, [r0, #32]	@ movhi
1690:./FWLIB/src/stm32f4xx_tim.c **** 
 2497              		.loc 1 1690 0
 2498 0010 7047     		bx	lr
 2499              		.cfi_endproc
 2500              	.LFE156:
 2502              		.section	.text.TIM_OC3PolarityConfig,"ax",%progbits
 2503              		.align	1
 2504              		.global	TIM_OC3PolarityConfig
 2505              		.syntax unified
 2506              		.thumb
 2507              		.thumb_func
 2508              		.fpu fpv4-sp-d16
 2510              	TIM_OC3PolarityConfig:
 2511              	.LFB157:
1702:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccer = 0;
 2512              		.loc 1 1702 0
 2513              		.cfi_startproc
 2514              		@ args = 0, pretend = 0, frame = 0
 2515              		@ frame_needed = 0, uses_anonymous_args = 0
 2516              		@ link register save eliminated.
 2517              	.LVL321:
1709:./FWLIB/src/stm32f4xx_tim.c **** 
 2518              		.loc 1 1709 0
 2519 0000 038C     		ldrh	r3, [r0, #32]
 2520 0002 9BB2     		uxth	r3, r3
 2521              	.LVL322:
1712:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 2522              		.loc 1 1712 0
 2523 0004 23F40073 		bic	r3, r3, #512
 2524              	.LVL323:
1713:./FWLIB/src/stm32f4xx_tim.c **** 
 2525              		.loc 1 1713 0
 2526 0008 0902     		lsls	r1, r1, #8
 2527              	.LVL324:
 2528 000a 89B2     		uxth	r1, r1
 2529 000c 0B43     		orrs	r3, r3, r1
ARM GAS  /tmp/ccEzGk5p.s 			page 109


 2530              	.LVL325:
1716:./FWLIB/src/stm32f4xx_tim.c **** }
 2531              		.loc 1 1716 0
 2532 000e 0384     		strh	r3, [r0, #32]	@ movhi
1717:./FWLIB/src/stm32f4xx_tim.c **** 
 2533              		.loc 1 1717 0
 2534 0010 7047     		bx	lr
 2535              		.cfi_endproc
 2536              	.LFE157:
 2538              		.section	.text.TIM_OC3NPolarityConfig,"ax",%progbits
 2539              		.align	1
 2540              		.global	TIM_OC3NPolarityConfig
 2541              		.syntax unified
 2542              		.thumb
 2543              		.thumb_func
 2544              		.fpu fpv4-sp-d16
 2546              	TIM_OC3NPolarityConfig:
 2547              	.LFB158:
1729:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccer = 0;
 2548              		.loc 1 1729 0
 2549              		.cfi_startproc
 2550              		@ args = 0, pretend = 0, frame = 0
 2551              		@ frame_needed = 0, uses_anonymous_args = 0
 2552              		@ link register save eliminated.
 2553              	.LVL326:
1736:./FWLIB/src/stm32f4xx_tim.c **** 
 2554              		.loc 1 1736 0
 2555 0000 038C     		ldrh	r3, [r0, #32]
 2556 0002 9BB2     		uxth	r3, r3
 2557              	.LVL327:
1739:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 2558              		.loc 1 1739 0
 2559 0004 23F40063 		bic	r3, r3, #2048
 2560              	.LVL328:
1740:./FWLIB/src/stm32f4xx_tim.c **** 
 2561              		.loc 1 1740 0
 2562 0008 0902     		lsls	r1, r1, #8
 2563              	.LVL329:
 2564 000a 89B2     		uxth	r1, r1
 2565 000c 0B43     		orrs	r3, r3, r1
 2566              	.LVL330:
1743:./FWLIB/src/stm32f4xx_tim.c **** }
 2567              		.loc 1 1743 0
 2568 000e 0384     		strh	r3, [r0, #32]	@ movhi
1744:./FWLIB/src/stm32f4xx_tim.c **** 
 2569              		.loc 1 1744 0
 2570 0010 7047     		bx	lr
 2571              		.cfi_endproc
 2572              	.LFE158:
 2574              		.section	.text.TIM_OC4PolarityConfig,"ax",%progbits
 2575              		.align	1
 2576              		.global	TIM_OC4PolarityConfig
 2577              		.syntax unified
 2578              		.thumb
 2579              		.thumb_func
 2580              		.fpu fpv4-sp-d16
 2582              	TIM_OC4PolarityConfig:
ARM GAS  /tmp/ccEzGk5p.s 			page 110


 2583              	.LFB159:
1756:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpccer = 0;
 2584              		.loc 1 1756 0
 2585              		.cfi_startproc
 2586              		@ args = 0, pretend = 0, frame = 0
 2587              		@ frame_needed = 0, uses_anonymous_args = 0
 2588              		@ link register save eliminated.
 2589              	.LVL331:
1763:./FWLIB/src/stm32f4xx_tim.c **** 
 2590              		.loc 1 1763 0
 2591 0000 038C     		ldrh	r3, [r0, #32]
 2592 0002 9BB2     		uxth	r3, r3
 2593              	.LVL332:
1766:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 2594              		.loc 1 1766 0
 2595 0004 23F40053 		bic	r3, r3, #8192
 2596              	.LVL333:
1767:./FWLIB/src/stm32f4xx_tim.c **** 
 2597              		.loc 1 1767 0
 2598 0008 0903     		lsls	r1, r1, #12
 2599              	.LVL334:
 2600 000a 89B2     		uxth	r1, r1
 2601 000c 0B43     		orrs	r3, r3, r1
 2602              	.LVL335:
1770:./FWLIB/src/stm32f4xx_tim.c **** }
 2603              		.loc 1 1770 0
 2604 000e 0384     		strh	r3, [r0, #32]	@ movhi
1771:./FWLIB/src/stm32f4xx_tim.c **** 
 2605              		.loc 1 1771 0
 2606 0010 7047     		bx	lr
 2607              		.cfi_endproc
 2608              	.LFE159:
 2610              		.section	.text.TIM_CCxCmd,"ax",%progbits
 2611              		.align	1
 2612              		.global	TIM_CCxCmd
 2613              		.syntax unified
 2614              		.thumb
 2615              		.thumb_func
 2616              		.fpu fpv4-sp-d16
 2618              	TIM_CCxCmd:
 2619              	.LFB160:
1787:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmp = 0;
 2620              		.loc 1 1787 0
 2621              		.cfi_startproc
 2622              		@ args = 0, pretend = 0, frame = 0
 2623              		@ frame_needed = 0, uses_anonymous_args = 0
 2624              		@ link register save eliminated.
 2625              	.LVL336:
 2626 0000 10B4     		push	{r4}
 2627              	.LCFI19:
 2628              		.cfi_def_cfa_offset 4
 2629              		.cfi_offset 4, -4
 2630              	.LVL337:
1795:./FWLIB/src/stm32f4xx_tim.c **** 
 2631              		.loc 1 1795 0
 2632 0002 0123     		movs	r3, #1
 2633 0004 8B40     		lsls	r3, r3, r1
ARM GAS  /tmp/ccEzGk5p.s 			page 111


 2634 0006 9BB2     		uxth	r3, r3
 2635              	.LVL338:
1798:./FWLIB/src/stm32f4xx_tim.c **** 
 2636              		.loc 1 1798 0
 2637 0008 048C     		ldrh	r4, [r0, #32]
 2638 000a 24EA0303 		bic	r3, r4, r3
 2639              	.LVL339:
 2640 000e 0384     		strh	r3, [r0, #32]	@ movhi
1801:./FWLIB/src/stm32f4xx_tim.c **** }
 2641              		.loc 1 1801 0
 2642 0010 038C     		ldrh	r3, [r0, #32]
 2643 0012 02FA01F1 		lsl	r1, r2, r1
 2644              	.LVL340:
 2645 0016 89B2     		uxth	r1, r1
 2646 0018 1943     		orrs	r1, r1, r3
 2647 001a 0184     		strh	r1, [r0, #32]	@ movhi
1802:./FWLIB/src/stm32f4xx_tim.c **** 
 2648              		.loc 1 1802 0
 2649 001c 5DF8044B 		ldr	r4, [sp], #4
 2650              	.LCFI20:
 2651              		.cfi_restore 4
 2652              		.cfi_def_cfa_offset 0
 2653 0020 7047     		bx	lr
 2654              		.cfi_endproc
 2655              	.LFE160:
 2657              		.section	.text.TIM_CCxNCmd,"ax",%progbits
 2658              		.align	1
 2659              		.global	TIM_CCxNCmd
 2660              		.syntax unified
 2661              		.thumb
 2662              		.thumb_func
 2663              		.fpu fpv4-sp-d16
 2665              	TIM_CCxNCmd:
 2666              	.LFB161:
1817:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmp = 0;
 2667              		.loc 1 1817 0
 2668              		.cfi_startproc
 2669              		@ args = 0, pretend = 0, frame = 0
 2670              		@ frame_needed = 0, uses_anonymous_args = 0
 2671              		@ link register save eliminated.
 2672              	.LVL341:
 2673 0000 10B4     		push	{r4}
 2674              	.LCFI21:
 2675              		.cfi_def_cfa_offset 4
 2676              		.cfi_offset 4, -4
 2677              	.LVL342:
1825:./FWLIB/src/stm32f4xx_tim.c **** 
 2678              		.loc 1 1825 0
 2679 0002 0423     		movs	r3, #4
 2680 0004 8B40     		lsls	r3, r3, r1
 2681 0006 9BB2     		uxth	r3, r3
 2682              	.LVL343:
1828:./FWLIB/src/stm32f4xx_tim.c **** 
 2683              		.loc 1 1828 0
 2684 0008 048C     		ldrh	r4, [r0, #32]
 2685 000a 24EA0303 		bic	r3, r4, r3
 2686              	.LVL344:
ARM GAS  /tmp/ccEzGk5p.s 			page 112


 2687 000e 0384     		strh	r3, [r0, #32]	@ movhi
1831:./FWLIB/src/stm32f4xx_tim.c **** }
 2688              		.loc 1 1831 0
 2689 0010 038C     		ldrh	r3, [r0, #32]
 2690 0012 02FA01F1 		lsl	r1, r2, r1
 2691              	.LVL345:
 2692 0016 89B2     		uxth	r1, r1
 2693 0018 1943     		orrs	r1, r1, r3
 2694 001a 0184     		strh	r1, [r0, #32]	@ movhi
1832:./FWLIB/src/stm32f4xx_tim.c **** /**
 2695              		.loc 1 1832 0
 2696 001c 5DF8044B 		ldr	r4, [sp], #4
 2697              	.LCFI22:
 2698              		.cfi_restore 4
 2699              		.cfi_def_cfa_offset 0
 2700 0020 7047     		bx	lr
 2701              		.cfi_endproc
 2702              	.LFE161:
 2704              		.section	.text.TIM_ICStructInit,"ax",%progbits
 2705              		.align	1
 2706              		.global	TIM_ICStructInit
 2707              		.syntax unified
 2708              		.thumb
 2709              		.thumb_func
 2710              		.fpu fpv4-sp-d16
 2712              	TIM_ICStructInit:
 2713              	.LFB163:
1957:./FWLIB/src/stm32f4xx_tim.c ****   /* Set the default configuration */
 2714              		.loc 1 1957 0
 2715              		.cfi_startproc
 2716              		@ args = 0, pretend = 0, frame = 0
 2717              		@ frame_needed = 0, uses_anonymous_args = 0
 2718              		@ link register save eliminated.
 2719              	.LVL346:
1959:./FWLIB/src/stm32f4xx_tim.c ****   TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 2720              		.loc 1 1959 0
 2721 0000 0023     		movs	r3, #0
 2722 0002 0380     		strh	r3, [r0]	@ movhi
1960:./FWLIB/src/stm32f4xx_tim.c ****   TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 2723              		.loc 1 1960 0
 2724 0004 4380     		strh	r3, [r0, #2]	@ movhi
1961:./FWLIB/src/stm32f4xx_tim.c ****   TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 2725              		.loc 1 1961 0
 2726 0006 0122     		movs	r2, #1
 2727 0008 8280     		strh	r2, [r0, #4]	@ movhi
1962:./FWLIB/src/stm32f4xx_tim.c ****   TIM_ICInitStruct->TIM_ICFilter = 0x00;
 2728              		.loc 1 1962 0
 2729 000a C380     		strh	r3, [r0, #6]	@ movhi
1963:./FWLIB/src/stm32f4xx_tim.c **** }
 2730              		.loc 1 1963 0
 2731 000c 0381     		strh	r3, [r0, #8]	@ movhi
1964:./FWLIB/src/stm32f4xx_tim.c **** 
 2732              		.loc 1 1964 0
 2733 000e 7047     		bx	lr
 2734              		.cfi_endproc
 2735              	.LFE163:
 2737              		.section	.text.TIM_GetCapture1,"ax",%progbits
ARM GAS  /tmp/ccEzGk5p.s 			page 113


 2738              		.align	1
 2739              		.global	TIM_GetCapture1
 2740              		.syntax unified
 2741              		.thumb
 2742              		.thumb_func
 2743              		.fpu fpv4-sp-d16
 2745              	TIM_GetCapture1:
 2746              	.LFB165:
2033:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 2747              		.loc 1 2033 0
 2748              		.cfi_startproc
 2749              		@ args = 0, pretend = 0, frame = 0
 2750              		@ frame_needed = 0, uses_anonymous_args = 0
 2751              		@ link register save eliminated.
 2752              	.LVL347:
2038:./FWLIB/src/stm32f4xx_tim.c **** }
 2753              		.loc 1 2038 0
 2754 0000 406B     		ldr	r0, [r0, #52]
 2755              	.LVL348:
2039:./FWLIB/src/stm32f4xx_tim.c **** 
 2756              		.loc 1 2039 0
 2757 0002 7047     		bx	lr
 2758              		.cfi_endproc
 2759              	.LFE165:
 2761              		.section	.text.TIM_GetCapture2,"ax",%progbits
 2762              		.align	1
 2763              		.global	TIM_GetCapture2
 2764              		.syntax unified
 2765              		.thumb
 2766              		.thumb_func
 2767              		.fpu fpv4-sp-d16
 2769              	TIM_GetCapture2:
 2770              	.LFB166:
2048:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 2771              		.loc 1 2048 0
 2772              		.cfi_startproc
 2773              		@ args = 0, pretend = 0, frame = 0
 2774              		@ frame_needed = 0, uses_anonymous_args = 0
 2775              		@ link register save eliminated.
 2776              	.LVL349:
2053:./FWLIB/src/stm32f4xx_tim.c **** }
 2777              		.loc 1 2053 0
 2778 0000 806B     		ldr	r0, [r0, #56]
 2779              	.LVL350:
2054:./FWLIB/src/stm32f4xx_tim.c **** 
 2780              		.loc 1 2054 0
 2781 0002 7047     		bx	lr
 2782              		.cfi_endproc
 2783              	.LFE166:
 2785              		.section	.text.TIM_GetCapture3,"ax",%progbits
 2786              		.align	1
 2787              		.global	TIM_GetCapture3
 2788              		.syntax unified
 2789              		.thumb
 2790              		.thumb_func
 2791              		.fpu fpv4-sp-d16
 2793              	TIM_GetCapture3:
ARM GAS  /tmp/ccEzGk5p.s 			page 114


 2794              	.LFB167:
2062:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 2795              		.loc 1 2062 0
 2796              		.cfi_startproc
 2797              		@ args = 0, pretend = 0, frame = 0
 2798              		@ frame_needed = 0, uses_anonymous_args = 0
 2799              		@ link register save eliminated.
 2800              	.LVL351:
2067:./FWLIB/src/stm32f4xx_tim.c **** }
 2801              		.loc 1 2067 0
 2802 0000 C06B     		ldr	r0, [r0, #60]
 2803              	.LVL352:
2068:./FWLIB/src/stm32f4xx_tim.c **** 
 2804              		.loc 1 2068 0
 2805 0002 7047     		bx	lr
 2806              		.cfi_endproc
 2807              	.LFE167:
 2809              		.section	.text.TIM_GetCapture4,"ax",%progbits
 2810              		.align	1
 2811              		.global	TIM_GetCapture4
 2812              		.syntax unified
 2813              		.thumb
 2814              		.thumb_func
 2815              		.fpu fpv4-sp-d16
 2817              	TIM_GetCapture4:
 2818              	.LFB168:
2076:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 2819              		.loc 1 2076 0
 2820              		.cfi_startproc
 2821              		@ args = 0, pretend = 0, frame = 0
 2822              		@ frame_needed = 0, uses_anonymous_args = 0
 2823              		@ link register save eliminated.
 2824              	.LVL353:
2081:./FWLIB/src/stm32f4xx_tim.c **** }
 2825              		.loc 1 2081 0
 2826 0000 006C     		ldr	r0, [r0, #64]
 2827              	.LVL354:
2082:./FWLIB/src/stm32f4xx_tim.c **** 
 2828              		.loc 1 2082 0
 2829 0002 7047     		bx	lr
 2830              		.cfi_endproc
 2831              	.LFE168:
 2833              		.section	.text.TIM_SetIC1Prescaler,"ax",%progbits
 2834              		.align	1
 2835              		.global	TIM_SetIC1Prescaler
 2836              		.syntax unified
 2837              		.thumb
 2838              		.thumb_func
 2839              		.fpu fpv4-sp-d16
 2841              	TIM_SetIC1Prescaler:
 2842              	.LFB169:
2096:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 2843              		.loc 1 2096 0
 2844              		.cfi_startproc
 2845              		@ args = 0, pretend = 0, frame = 0
 2846              		@ frame_needed = 0, uses_anonymous_args = 0
 2847              		@ link register save eliminated.
ARM GAS  /tmp/ccEzGk5p.s 			page 115


 2848              	.LVL355:
2102:./FWLIB/src/stm32f4xx_tim.c **** 
 2849              		.loc 1 2102 0
 2850 0000 038B     		ldrh	r3, [r0, #24]
 2851 0002 9BB2     		uxth	r3, r3
 2852 0004 23F00C03 		bic	r3, r3, #12
 2853 0008 9BB2     		uxth	r3, r3
 2854 000a 0383     		strh	r3, [r0, #24]	@ movhi
2105:./FWLIB/src/stm32f4xx_tim.c **** }
 2855              		.loc 1 2105 0
 2856 000c 038B     		ldrh	r3, [r0, #24]
 2857 000e 1943     		orrs	r1, r1, r3
 2858              	.LVL356:
 2859 0010 0183     		strh	r1, [r0, #24]	@ movhi
2106:./FWLIB/src/stm32f4xx_tim.c **** 
 2860              		.loc 1 2106 0
 2861 0012 7047     		bx	lr
 2862              		.cfi_endproc
 2863              	.LFE169:
 2865              		.section	.text.TIM_SetIC2Prescaler,"ax",%progbits
 2866              		.align	1
 2867              		.global	TIM_SetIC2Prescaler
 2868              		.syntax unified
 2869              		.thumb
 2870              		.thumb_func
 2871              		.fpu fpv4-sp-d16
 2873              	TIM_SetIC2Prescaler:
 2874              	.LFB170:
2121:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 2875              		.loc 1 2121 0
 2876              		.cfi_startproc
 2877              		@ args = 0, pretend = 0, frame = 0
 2878              		@ frame_needed = 0, uses_anonymous_args = 0
 2879              		@ link register save eliminated.
 2880              	.LVL357:
2127:./FWLIB/src/stm32f4xx_tim.c **** 
 2881              		.loc 1 2127 0
 2882 0000 038B     		ldrh	r3, [r0, #24]
 2883 0002 9BB2     		uxth	r3, r3
 2884 0004 23F44063 		bic	r3, r3, #3072
 2885 0008 9BB2     		uxth	r3, r3
 2886 000a 0383     		strh	r3, [r0, #24]	@ movhi
2130:./FWLIB/src/stm32f4xx_tim.c **** }
 2887              		.loc 1 2130 0
 2888 000c 038B     		ldrh	r3, [r0, #24]
 2889 000e 0902     		lsls	r1, r1, #8
 2890              	.LVL358:
 2891 0010 89B2     		uxth	r1, r1
 2892 0012 1943     		orrs	r1, r1, r3
 2893 0014 0183     		strh	r1, [r0, #24]	@ movhi
2131:./FWLIB/src/stm32f4xx_tim.c **** 
 2894              		.loc 1 2131 0
 2895 0016 7047     		bx	lr
 2896              		.cfi_endproc
 2897              	.LFE170:
 2899              		.section	.text.TIM_PWMIConfig,"ax",%progbits
 2900              		.align	1
ARM GAS  /tmp/ccEzGk5p.s 			page 116


 2901              		.global	TIM_PWMIConfig
 2902              		.syntax unified
 2903              		.thumb
 2904              		.thumb_func
 2905              		.fpu fpv4-sp-d16
 2907              	TIM_PWMIConfig:
 2908              	.LFB164:
1976:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
 2909              		.loc 1 1976 0
 2910              		.cfi_startproc
 2911              		@ args = 0, pretend = 0, frame = 0
 2912              		@ frame_needed = 0, uses_anonymous_args = 0
 2913              	.LVL359:
 2914 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2915              	.LCFI23:
 2916              		.cfi_def_cfa_offset 24
 2917              		.cfi_offset 3, -24
 2918              		.cfi_offset 4, -20
 2919              		.cfi_offset 5, -16
 2920              		.cfi_offset 6, -12
 2921              		.cfi_offset 7, -8
 2922              		.cfi_offset 14, -4
 2923 0002 0546     		mov	r5, r0
 2924 0004 0C46     		mov	r4, r1
 2925              	.LVL360:
1984:./FWLIB/src/stm32f4xx_tim.c ****   {
 2926              		.loc 1 1984 0
 2927 0006 4988     		ldrh	r1, [r1, #2]
 2928              	.LVL361:
 2929 0008 C9B9     		cbnz	r1, .L146
1986:./FWLIB/src/stm32f4xx_tim.c ****   }
 2930              		.loc 1 1986 0
 2931 000a 0226     		movs	r6, #2
 2932              	.L142:
 2933              	.LVL362:
1993:./FWLIB/src/stm32f4xx_tim.c ****   {
 2934              		.loc 1 1993 0
 2935 000c A288     		ldrh	r2, [r4, #4]
 2936 000e 012A     		cmp	r2, #1
 2937 0010 17D0     		beq	.L149
1999:./FWLIB/src/stm32f4xx_tim.c ****   }
 2938              		.loc 1 1999 0
 2939 0012 0127     		movs	r7, #1
 2940              	.L143:
 2941              	.LVL363:
2001:./FWLIB/src/stm32f4xx_tim.c ****   {
 2942              		.loc 1 2001 0
 2943 0014 2388     		ldrh	r3, [r4]
 2944 0016 B3B1     		cbz	r3, .L150
2016:./FWLIB/src/stm32f4xx_tim.c ****                TIM_ICInitStruct->TIM_ICFilter);
 2945              		.loc 1 2016 0
 2946 0018 2389     		ldrh	r3, [r4, #8]
 2947 001a 2846     		mov	r0, r5
 2948              	.LVL364:
 2949 001c FFF7FEFF 		bl	TI2_Config
 2950              	.LVL365:
2019:./FWLIB/src/stm32f4xx_tim.c ****     /* TI1 Configuration */
ARM GAS  /tmp/ccEzGk5p.s 			page 117


 2951              		.loc 1 2019 0
 2952 0020 E188     		ldrh	r1, [r4, #6]
 2953 0022 2846     		mov	r0, r5
 2954 0024 FFF7FEFF 		bl	TIM_SetIC2Prescaler
 2955              	.LVL366:
2021:./FWLIB/src/stm32f4xx_tim.c ****     /* Set the Input Capture Prescaler value */
 2956              		.loc 1 2021 0
 2957 0028 2389     		ldrh	r3, [r4, #8]
 2958 002a 3A46     		mov	r2, r7
 2959 002c 3146     		mov	r1, r6
 2960 002e 2846     		mov	r0, r5
 2961 0030 FFF7FEFF 		bl	TI1_Config
 2962              	.LVL367:
2023:./FWLIB/src/stm32f4xx_tim.c ****   }
 2963              		.loc 1 2023 0
 2964 0034 E188     		ldrh	r1, [r4, #6]
 2965 0036 2846     		mov	r0, r5
 2966 0038 FFF7FEFF 		bl	TIM_SetIC1Prescaler
 2967              	.LVL368:
 2968              	.L141:
2025:./FWLIB/src/stm32f4xx_tim.c **** 
 2969              		.loc 1 2025 0
 2970 003c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2971              	.LVL369:
 2972              	.L146:
1990:./FWLIB/src/stm32f4xx_tim.c ****   }
 2973              		.loc 1 1990 0
 2974 003e 0026     		movs	r6, #0
 2975 0040 E4E7     		b	.L142
 2976              	.LVL370:
 2977              	.L149:
1995:./FWLIB/src/stm32f4xx_tim.c ****   }
 2978              		.loc 1 1995 0
 2979 0042 0227     		movs	r7, #2
 2980 0044 E6E7     		b	.L143
 2981              	.LVL371:
 2982              	.L150:
2004:./FWLIB/src/stm32f4xx_tim.c ****                TIM_ICInitStruct->TIM_ICFilter);
 2983              		.loc 1 2004 0
 2984 0046 2389     		ldrh	r3, [r4, #8]
 2985 0048 2846     		mov	r0, r5
 2986              	.LVL372:
 2987 004a FFF7FEFF 		bl	TI1_Config
 2988              	.LVL373:
2007:./FWLIB/src/stm32f4xx_tim.c ****     /* TI2 Configuration */
 2989              		.loc 1 2007 0
 2990 004e E188     		ldrh	r1, [r4, #6]
 2991 0050 2846     		mov	r0, r5
 2992 0052 FFF7FEFF 		bl	TIM_SetIC1Prescaler
 2993              	.LVL374:
2009:./FWLIB/src/stm32f4xx_tim.c ****     /* Set the Input Capture Prescaler value */
 2994              		.loc 1 2009 0
 2995 0056 2389     		ldrh	r3, [r4, #8]
 2996 0058 3A46     		mov	r2, r7
 2997 005a 3146     		mov	r1, r6
 2998 005c 2846     		mov	r0, r5
 2999 005e FFF7FEFF 		bl	TI2_Config
ARM GAS  /tmp/ccEzGk5p.s 			page 118


 3000              	.LVL375:
2011:./FWLIB/src/stm32f4xx_tim.c ****   }
 3001              		.loc 1 2011 0
 3002 0062 E188     		ldrh	r1, [r4, #6]
 3003 0064 2846     		mov	r0, r5
 3004 0066 FFF7FEFF 		bl	TIM_SetIC2Prescaler
 3005              	.LVL376:
 3006 006a E7E7     		b	.L141
 3007              		.cfi_endproc
 3008              	.LFE164:
 3010              		.section	.text.TIM_SetIC3Prescaler,"ax",%progbits
 3011              		.align	1
 3012              		.global	TIM_SetIC3Prescaler
 3013              		.syntax unified
 3014              		.thumb
 3015              		.thumb_func
 3016              		.fpu fpv4-sp-d16
 3018              	TIM_SetIC3Prescaler:
 3019              	.LFB171:
2145:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 3020              		.loc 1 2145 0
 3021              		.cfi_startproc
 3022              		@ args = 0, pretend = 0, frame = 0
 3023              		@ frame_needed = 0, uses_anonymous_args = 0
 3024              		@ link register save eliminated.
 3025              	.LVL377:
2151:./FWLIB/src/stm32f4xx_tim.c **** 
 3026              		.loc 1 2151 0
 3027 0000 838B     		ldrh	r3, [r0, #28]
 3028 0002 9BB2     		uxth	r3, r3
 3029 0004 23F00C03 		bic	r3, r3, #12
 3030 0008 9BB2     		uxth	r3, r3
 3031 000a 8383     		strh	r3, [r0, #28]	@ movhi
2154:./FWLIB/src/stm32f4xx_tim.c **** }
 3032              		.loc 1 2154 0
 3033 000c 838B     		ldrh	r3, [r0, #28]
 3034 000e 1943     		orrs	r1, r1, r3
 3035              	.LVL378:
 3036 0010 8183     		strh	r1, [r0, #28]	@ movhi
2155:./FWLIB/src/stm32f4xx_tim.c **** 
 3037              		.loc 1 2155 0
 3038 0012 7047     		bx	lr
 3039              		.cfi_endproc
 3040              	.LFE171:
 3042              		.section	.text.TIM_SetIC4Prescaler,"ax",%progbits
 3043              		.align	1
 3044              		.global	TIM_SetIC4Prescaler
 3045              		.syntax unified
 3046              		.thumb
 3047              		.thumb_func
 3048              		.fpu fpv4-sp-d16
 3050              	TIM_SetIC4Prescaler:
 3051              	.LFB172:
2169:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 3052              		.loc 1 2169 0
 3053              		.cfi_startproc
 3054              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccEzGk5p.s 			page 119


 3055              		@ frame_needed = 0, uses_anonymous_args = 0
 3056              		@ link register save eliminated.
 3057              	.LVL379:
2175:./FWLIB/src/stm32f4xx_tim.c **** 
 3058              		.loc 1 2175 0
 3059 0000 838B     		ldrh	r3, [r0, #28]
 3060 0002 9BB2     		uxth	r3, r3
 3061 0004 23F44063 		bic	r3, r3, #3072
 3062 0008 9BB2     		uxth	r3, r3
 3063 000a 8383     		strh	r3, [r0, #28]	@ movhi
2178:./FWLIB/src/stm32f4xx_tim.c **** }
 3064              		.loc 1 2178 0
 3065 000c 838B     		ldrh	r3, [r0, #28]
 3066 000e 0902     		lsls	r1, r1, #8
 3067              	.LVL380:
 3068 0010 89B2     		uxth	r1, r1
 3069 0012 1943     		orrs	r1, r1, r3
 3070 0014 8183     		strh	r1, [r0, #28]	@ movhi
2179:./FWLIB/src/stm32f4xx_tim.c **** /**
 3071              		.loc 1 2179 0
 3072 0016 7047     		bx	lr
 3073              		.cfi_endproc
 3074              	.LFE172:
 3076              		.section	.text.TIM_ICInit,"ax",%progbits
 3077              		.align	1
 3078              		.global	TIM_ICInit
 3079              		.syntax unified
 3080              		.thumb
 3081              		.thumb_func
 3082              		.fpu fpv4-sp-d16
 3084              	TIM_ICInit:
 3085              	.LFB162:
1901:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 3086              		.loc 1 1901 0
 3087              		.cfi_startproc
 3088              		@ args = 0, pretend = 0, frame = 0
 3089              		@ frame_needed = 0, uses_anonymous_args = 0
 3090              	.LVL381:
 3091 0000 38B5     		push	{r3, r4, r5, lr}
 3092              	.LCFI24:
 3093              		.cfi_def_cfa_offset 16
 3094              		.cfi_offset 3, -16
 3095              		.cfi_offset 4, -12
 3096              		.cfi_offset 5, -8
 3097              		.cfi_offset 14, -4
 3098 0002 0546     		mov	r5, r0
 3099 0004 0C46     		mov	r4, r1
1909:./FWLIB/src/stm32f4xx_tim.c ****   {
 3100              		.loc 1 1909 0
 3101 0006 0B88     		ldrh	r3, [r1]
 3102 0008 6BB1     		cbz	r3, .L159
1918:./FWLIB/src/stm32f4xx_tim.c ****   {
 3103              		.loc 1 1918 0
 3104 000a 042B     		cmp	r3, #4
 3105 000c 15D0     		beq	.L160
1928:./FWLIB/src/stm32f4xx_tim.c ****   {
 3106              		.loc 1 1928 0
ARM GAS  /tmp/ccEzGk5p.s 			page 120


 3107 000e 082B     		cmp	r3, #8
 3108 0010 1DD0     		beq	.L161
1942:./FWLIB/src/stm32f4xx_tim.c ****                TIM_ICInitStruct->TIM_ICSelection,
 3109              		.loc 1 1942 0
 3110 0012 0B89     		ldrh	r3, [r1, #8]
 3111 0014 8A88     		ldrh	r2, [r1, #4]
 3112 0016 4988     		ldrh	r1, [r1, #2]
 3113              	.LVL382:
 3114 0018 FFF7FEFF 		bl	TI4_Config
 3115              	.LVL383:
1946:./FWLIB/src/stm32f4xx_tim.c ****   }
 3116              		.loc 1 1946 0
 3117 001c E188     		ldrh	r1, [r4, #6]
 3118 001e 2846     		mov	r0, r5
 3119 0020 FFF7FEFF 		bl	TIM_SetIC4Prescaler
 3120              	.LVL384:
 3121              	.L153:
1948:./FWLIB/src/stm32f4xx_tim.c **** 
 3122              		.loc 1 1948 0
 3123 0024 38BD     		pop	{r3, r4, r5, pc}
 3124              	.LVL385:
 3125              	.L159:
1912:./FWLIB/src/stm32f4xx_tim.c ****                TIM_ICInitStruct->TIM_ICSelection,
 3126              		.loc 1 1912 0
 3127 0026 0B89     		ldrh	r3, [r1, #8]
 3128 0028 8A88     		ldrh	r2, [r1, #4]
 3129 002a 4988     		ldrh	r1, [r1, #2]
 3130              	.LVL386:
 3131 002c FFF7FEFF 		bl	TI1_Config
 3132              	.LVL387:
1916:./FWLIB/src/stm32f4xx_tim.c ****   }
 3133              		.loc 1 1916 0
 3134 0030 E188     		ldrh	r1, [r4, #6]
 3135 0032 2846     		mov	r0, r5
 3136 0034 FFF7FEFF 		bl	TIM_SetIC1Prescaler
 3137              	.LVL388:
 3138 0038 F4E7     		b	.L153
 3139              	.LVL389:
 3140              	.L160:
1922:./FWLIB/src/stm32f4xx_tim.c ****                TIM_ICInitStruct->TIM_ICSelection,
 3141              		.loc 1 1922 0
 3142 003a 0B89     		ldrh	r3, [r1, #8]
 3143 003c 8A88     		ldrh	r2, [r1, #4]
 3144 003e 4988     		ldrh	r1, [r1, #2]
 3145              	.LVL390:
 3146 0040 FFF7FEFF 		bl	TI2_Config
 3147              	.LVL391:
1926:./FWLIB/src/stm32f4xx_tim.c ****   }
 3148              		.loc 1 1926 0
 3149 0044 E188     		ldrh	r1, [r4, #6]
 3150 0046 2846     		mov	r0, r5
 3151 0048 FFF7FEFF 		bl	TIM_SetIC2Prescaler
 3152              	.LVL392:
 3153 004c EAE7     		b	.L153
 3154              	.LVL393:
 3155              	.L161:
1932:./FWLIB/src/stm32f4xx_tim.c ****                TIM_ICInitStruct->TIM_ICSelection,
ARM GAS  /tmp/ccEzGk5p.s 			page 121


 3156              		.loc 1 1932 0
 3157 004e 0B89     		ldrh	r3, [r1, #8]
 3158 0050 8A88     		ldrh	r2, [r1, #4]
 3159 0052 4988     		ldrh	r1, [r1, #2]
 3160              	.LVL394:
 3161 0054 FFF7FEFF 		bl	TI3_Config
 3162              	.LVL395:
1936:./FWLIB/src/stm32f4xx_tim.c ****   }
 3163              		.loc 1 1936 0
 3164 0058 E188     		ldrh	r1, [r4, #6]
 3165 005a 2846     		mov	r0, r5
 3166 005c FFF7FEFF 		bl	TIM_SetIC3Prescaler
 3167              	.LVL396:
 3168 0060 E0E7     		b	.L153
 3169              		.cfi_endproc
 3170              	.LFE162:
 3172              		.section	.text.TIM_BDTRConfig,"ax",%progbits
 3173              		.align	1
 3174              		.global	TIM_BDTRConfig
 3175              		.syntax unified
 3176              		.thumb
 3177              		.thumb_func
 3178              		.fpu fpv4-sp-d16
 3180              	TIM_BDTRConfig:
 3181              	.LFB173:
2222:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 3182              		.loc 1 2222 0
 3183              		.cfi_startproc
 3184              		@ args = 0, pretend = 0, frame = 0
 3185              		@ frame_needed = 0, uses_anonymous_args = 0
 3186              		@ link register save eliminated.
 3187              	.LVL397:
 3188 0000 F0B4     		push	{r4, r5, r6, r7}
 3189              	.LCFI25:
 3190              		.cfi_def_cfa_offset 16
 3191              		.cfi_offset 4, -16
 3192              		.cfi_offset 5, -12
 3193              		.cfi_offset 6, -8
 3194              		.cfi_offset 7, -4
2234:./FWLIB/src/stm32f4xx_tim.c ****              TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 3195              		.loc 1 2234 0
 3196 0002 0F88     		ldrh	r7, [r1]
 3197 0004 B1F802C0 		ldrh	ip, [r1, #2]
2235:./FWLIB/src/stm32f4xx_tim.c ****              TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 3198              		.loc 1 2235 0
 3199 0008 8E88     		ldrh	r6, [r1, #4]
 3200 000a CD88     		ldrh	r5, [r1, #6]
2236:./FWLIB/src/stm32f4xx_tim.c ****              TIM_BDTRInitStruct->TIM_AutomaticOutput;
 3201              		.loc 1 2236 0
 3202 000c 0C89     		ldrh	r4, [r1, #8]
 3203 000e 4A89     		ldrh	r2, [r1, #10]
2237:./FWLIB/src/stm32f4xx_tim.c **** }
 3204              		.loc 1 2237 0
 3205 0010 8B89     		ldrh	r3, [r1, #12]
2234:./FWLIB/src/stm32f4xx_tim.c ****              TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 3206              		.loc 1 2234 0
 3207 0012 47EA0C01 		orr	r1, r7, ip
ARM GAS  /tmp/ccEzGk5p.s 			page 122


 3208              	.LVL398:
 3209 0016 3143     		orrs	r1, r1, r6
 3210 0018 2943     		orrs	r1, r1, r5
 3211 001a 2143     		orrs	r1, r1, r4
 3212 001c 0A43     		orrs	r2, r2, r1
 3213 001e 1343     		orrs	r3, r3, r2
 3214 0020 A0F84430 		strh	r3, [r0, #68]	@ movhi
2238:./FWLIB/src/stm32f4xx_tim.c **** 
 3215              		.loc 1 2238 0
 3216 0024 F0BC     		pop	{r4, r5, r6, r7}
 3217              	.LCFI26:
 3218              		.cfi_restore 7
 3219              		.cfi_restore 6
 3220              		.cfi_restore 5
 3221              		.cfi_restore 4
 3222              		.cfi_def_cfa_offset 0
 3223 0026 7047     		bx	lr
 3224              		.cfi_endproc
 3225              	.LFE173:
 3227              		.section	.text.TIM_BDTRStructInit,"ax",%progbits
 3228              		.align	1
 3229              		.global	TIM_BDTRStructInit
 3230              		.syntax unified
 3231              		.thumb
 3232              		.thumb_func
 3233              		.fpu fpv4-sp-d16
 3235              	TIM_BDTRStructInit:
 3236              	.LFB174:
2247:./FWLIB/src/stm32f4xx_tim.c ****   /* Set the default configuration */
 3237              		.loc 1 2247 0
 3238              		.cfi_startproc
 3239              		@ args = 0, pretend = 0, frame = 0
 3240              		@ frame_needed = 0, uses_anonymous_args = 0
 3241              		@ link register save eliminated.
 3242              	.LVL399:
2249:./FWLIB/src/stm32f4xx_tim.c ****   TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 3243              		.loc 1 2249 0
 3244 0000 0023     		movs	r3, #0
 3245 0002 0380     		strh	r3, [r0]	@ movhi
2250:./FWLIB/src/stm32f4xx_tim.c ****   TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 3246              		.loc 1 2250 0
 3247 0004 4380     		strh	r3, [r0, #2]	@ movhi
2251:./FWLIB/src/stm32f4xx_tim.c ****   TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 3248              		.loc 1 2251 0
 3249 0006 8380     		strh	r3, [r0, #4]	@ movhi
2252:./FWLIB/src/stm32f4xx_tim.c ****   TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 3250              		.loc 1 2252 0
 3251 0008 C380     		strh	r3, [r0, #6]	@ movhi
2253:./FWLIB/src/stm32f4xx_tim.c ****   TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 3252              		.loc 1 2253 0
 3253 000a 0381     		strh	r3, [r0, #8]	@ movhi
2254:./FWLIB/src/stm32f4xx_tim.c ****   TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 3254              		.loc 1 2254 0
 3255 000c 4381     		strh	r3, [r0, #10]	@ movhi
2255:./FWLIB/src/stm32f4xx_tim.c **** }
 3256              		.loc 1 2255 0
 3257 000e 8381     		strh	r3, [r0, #12]	@ movhi
ARM GAS  /tmp/ccEzGk5p.s 			page 123


2256:./FWLIB/src/stm32f4xx_tim.c **** 
 3258              		.loc 1 2256 0
 3259 0010 7047     		bx	lr
 3260              		.cfi_endproc
 3261              	.LFE174:
 3263              		.section	.text.TIM_CtrlPWMOutputs,"ax",%progbits
 3264              		.align	1
 3265              		.global	TIM_CtrlPWMOutputs
 3266              		.syntax unified
 3267              		.thumb
 3268              		.thumb_func
 3269              		.fpu fpv4-sp-d16
 3271              	TIM_CtrlPWMOutputs:
 3272              	.LFB175:
2266:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 3273              		.loc 1 2266 0
 3274              		.cfi_startproc
 3275              		@ args = 0, pretend = 0, frame = 0
 3276              		@ frame_needed = 0, uses_anonymous_args = 0
 3277              		@ link register save eliminated.
 3278              	.LVL400:
2271:./FWLIB/src/stm32f4xx_tim.c ****   {
 3279              		.loc 1 2271 0
 3280 0000 31B9     		cbnz	r1, .L168
2279:./FWLIB/src/stm32f4xx_tim.c ****   }  
 3281              		.loc 1 2279 0
 3282 0002 B0F84430 		ldrh	r3, [r0, #68]
 3283 0006 C3F30E03 		ubfx	r3, r3, #0, #15
 3284 000a A0F84430 		strh	r3, [r0, #68]	@ movhi
2281:./FWLIB/src/stm32f4xx_tim.c **** 
 3285              		.loc 1 2281 0
 3286 000e 7047     		bx	lr
 3287              	.L168:
2274:./FWLIB/src/stm32f4xx_tim.c ****   }
 3288              		.loc 1 2274 0
 3289 0010 B0F84430 		ldrh	r3, [r0, #68]
 3290 0014 43F40043 		orr	r3, r3, #32768
 3291 0018 A0F84430 		strh	r3, [r0, #68]	@ movhi
 3292 001c 7047     		bx	lr
 3293              		.cfi_endproc
 3294              	.LFE175:
 3296              		.section	.text.TIM_SelectCOM,"ax",%progbits
 3297              		.align	1
 3298              		.global	TIM_SelectCOM
 3299              		.syntax unified
 3300              		.thumb
 3301              		.thumb_func
 3302              		.fpu fpv4-sp-d16
 3304              	TIM_SelectCOM:
 3305              	.LFB176:
2291:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 3306              		.loc 1 2291 0
 3307              		.cfi_startproc
 3308              		@ args = 0, pretend = 0, frame = 0
 3309              		@ frame_needed = 0, uses_anonymous_args = 0
 3310              		@ link register save eliminated.
 3311              	.LVL401:
ARM GAS  /tmp/ccEzGk5p.s 			page 124


2296:./FWLIB/src/stm32f4xx_tim.c ****   {
 3312              		.loc 1 2296 0
 3313 0000 31B9     		cbnz	r1, .L172
2304:./FWLIB/src/stm32f4xx_tim.c ****   }
 3314              		.loc 1 2304 0
 3315 0002 8388     		ldrh	r3, [r0, #4]
 3316 0004 9BB2     		uxth	r3, r3
 3317 0006 23F00403 		bic	r3, r3, #4
 3318 000a 9BB2     		uxth	r3, r3
 3319 000c 8380     		strh	r3, [r0, #4]	@ movhi
2306:./FWLIB/src/stm32f4xx_tim.c **** 
 3320              		.loc 1 2306 0
 3321 000e 7047     		bx	lr
 3322              	.L172:
2299:./FWLIB/src/stm32f4xx_tim.c ****   }
 3323              		.loc 1 2299 0
 3324 0010 8388     		ldrh	r3, [r0, #4]
 3325 0012 43F00403 		orr	r3, r3, #4
 3326 0016 8380     		strh	r3, [r0, #4]	@ movhi
 3327 0018 7047     		bx	lr
 3328              		.cfi_endproc
 3329              	.LFE176:
 3331              		.section	.text.TIM_CCPreloadControl,"ax",%progbits
 3332              		.align	1
 3333              		.global	TIM_CCPreloadControl
 3334              		.syntax unified
 3335              		.thumb
 3336              		.thumb_func
 3337              		.fpu fpv4-sp-d16
 3339              	TIM_CCPreloadControl:
 3340              	.LFB177:
2316:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 3341              		.loc 1 2316 0
 3342              		.cfi_startproc
 3343              		@ args = 0, pretend = 0, frame = 0
 3344              		@ frame_needed = 0, uses_anonymous_args = 0
 3345              		@ link register save eliminated.
 3346              	.LVL402:
2320:./FWLIB/src/stm32f4xx_tim.c ****   {
 3347              		.loc 1 2320 0
 3348 0000 31B9     		cbnz	r1, .L176
2328:./FWLIB/src/stm32f4xx_tim.c ****   }
 3349              		.loc 1 2328 0
 3350 0002 8388     		ldrh	r3, [r0, #4]
 3351 0004 9BB2     		uxth	r3, r3
 3352 0006 23F00103 		bic	r3, r3, #1
 3353 000a 9BB2     		uxth	r3, r3
 3354 000c 8380     		strh	r3, [r0, #4]	@ movhi
2330:./FWLIB/src/stm32f4xx_tim.c **** /**
 3355              		.loc 1 2330 0
 3356 000e 7047     		bx	lr
 3357              	.L176:
2323:./FWLIB/src/stm32f4xx_tim.c ****   }
 3358              		.loc 1 2323 0
 3359 0010 8388     		ldrh	r3, [r0, #4]
 3360 0012 43F00103 		orr	r3, r3, #1
 3361 0016 8380     		strh	r3, [r0, #4]	@ movhi
ARM GAS  /tmp/ccEzGk5p.s 			page 125


 3362 0018 7047     		bx	lr
 3363              		.cfi_endproc
 3364              	.LFE177:
 3366              		.section	.text.TIM_ITConfig,"ax",%progbits
 3367              		.align	1
 3368              		.global	TIM_ITConfig
 3369              		.syntax unified
 3370              		.thumb
 3371              		.thumb_func
 3372              		.fpu fpv4-sp-d16
 3374              	TIM_ITConfig:
 3375              	.LFB178:
2373:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 3376              		.loc 1 2373 0
 3377              		.cfi_startproc
 3378              		@ args = 0, pretend = 0, frame = 0
 3379              		@ frame_needed = 0, uses_anonymous_args = 0
 3380              		@ link register save eliminated.
 3381              	.LVL403:
2379:./FWLIB/src/stm32f4xx_tim.c ****   {
 3382              		.loc 1 2379 0
 3383 0000 22B9     		cbnz	r2, .L180
2387:./FWLIB/src/stm32f4xx_tim.c ****   }
 3384              		.loc 1 2387 0
 3385 0002 8389     		ldrh	r3, [r0, #12]
 3386 0004 23EA0101 		bic	r1, r3, r1
 3387              	.LVL404:
 3388 0008 8181     		strh	r1, [r0, #12]	@ movhi
2389:./FWLIB/src/stm32f4xx_tim.c **** 
 3389              		.loc 1 2389 0
 3390 000a 7047     		bx	lr
 3391              	.LVL405:
 3392              	.L180:
2382:./FWLIB/src/stm32f4xx_tim.c ****   }
 3393              		.loc 1 2382 0
 3394 000c 8389     		ldrh	r3, [r0, #12]
 3395 000e 1943     		orrs	r1, r1, r3
 3396              	.LVL406:
 3397 0010 8181     		strh	r1, [r0, #12]	@ movhi
 3398 0012 7047     		bx	lr
 3399              		.cfi_endproc
 3400              	.LFE178:
 3402              		.section	.text.TIM_GenerateEvent,"ax",%progbits
 3403              		.align	1
 3404              		.global	TIM_GenerateEvent
 3405              		.syntax unified
 3406              		.thumb
 3407              		.thumb_func
 3408              		.fpu fpv4-sp-d16
 3410              	TIM_GenerateEvent:
 3411              	.LFB179:
2411:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 3412              		.loc 1 2411 0
 3413              		.cfi_startproc
 3414              		@ args = 0, pretend = 0, frame = 0
 3415              		@ frame_needed = 0, uses_anonymous_args = 0
 3416              		@ link register save eliminated.
ARM GAS  /tmp/ccEzGk5p.s 			page 126


 3417              	.LVL407:
2417:./FWLIB/src/stm32f4xx_tim.c **** }
 3418              		.loc 1 2417 0
 3419 0000 8182     		strh	r1, [r0, #20]	@ movhi
2418:./FWLIB/src/stm32f4xx_tim.c **** 
 3420              		.loc 1 2418 0
 3421 0002 7047     		bx	lr
 3422              		.cfi_endproc
 3423              	.LFE179:
 3425              		.section	.text.TIM_GetFlagStatus,"ax",%progbits
 3426              		.align	1
 3427              		.global	TIM_GetFlagStatus
 3428              		.syntax unified
 3429              		.thumb
 3430              		.thumb_func
 3431              		.fpu fpv4-sp-d16
 3433              	TIM_GetFlagStatus:
 3434              	.LFB180:
2444:./FWLIB/src/stm32f4xx_tim.c ****   ITStatus bitstatus = RESET;  
 3435              		.loc 1 2444 0
 3436              		.cfi_startproc
 3437              		@ args = 0, pretend = 0, frame = 0
 3438              		@ frame_needed = 0, uses_anonymous_args = 0
 3439              		@ link register save eliminated.
 3440              	.LVL408:
2451:./FWLIB/src/stm32f4xx_tim.c ****   {
 3441              		.loc 1 2451 0
 3442 0000 038A     		ldrh	r3, [r0, #16]
 3443 0002 1942     		tst	r1, r3
 3444 0004 01D1     		bne	.L185
2457:./FWLIB/src/stm32f4xx_tim.c ****   }
 3445              		.loc 1 2457 0
 3446 0006 0020     		movs	r0, #0
 3447              	.LVL409:
2460:./FWLIB/src/stm32f4xx_tim.c **** 
 3448              		.loc 1 2460 0
 3449 0008 7047     		bx	lr
 3450              	.LVL410:
 3451              	.L185:
2453:./FWLIB/src/stm32f4xx_tim.c ****   }
 3452              		.loc 1 2453 0
 3453 000a 0120     		movs	r0, #1
 3454              	.LVL411:
 3455 000c 7047     		bx	lr
 3456              		.cfi_endproc
 3457              	.LFE180:
 3459              		.section	.text.TIM_ClearFlag,"ax",%progbits
 3460              		.align	1
 3461              		.global	TIM_ClearFlag
 3462              		.syntax unified
 3463              		.thumb
 3464              		.thumb_func
 3465              		.fpu fpv4-sp-d16
 3467              	TIM_ClearFlag:
 3468              	.LFB181:
2486:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 3469              		.loc 1 2486 0
ARM GAS  /tmp/ccEzGk5p.s 			page 127


 3470              		.cfi_startproc
 3471              		@ args = 0, pretend = 0, frame = 0
 3472              		@ frame_needed = 0, uses_anonymous_args = 0
 3473              		@ link register save eliminated.
 3474              	.LVL412:
2491:./FWLIB/src/stm32f4xx_tim.c **** }
 3475              		.loc 1 2491 0
 3476 0000 C943     		mvns	r1, r1
 3477              	.LVL413:
 3478 0002 89B2     		uxth	r1, r1
 3479 0004 0182     		strh	r1, [r0, #16]	@ movhi
2492:./FWLIB/src/stm32f4xx_tim.c **** 
 3480              		.loc 1 2492 0
 3481 0006 7047     		bx	lr
 3482              		.cfi_endproc
 3483              	.LFE181:
 3485              		.section	.text.TIM_GetITStatus,"ax",%progbits
 3486              		.align	1
 3487              		.global	TIM_GetITStatus
 3488              		.syntax unified
 3489              		.thumb
 3490              		.thumb_func
 3491              		.fpu fpv4-sp-d16
 3493              	TIM_GetITStatus:
 3494              	.LFB182:
2514:./FWLIB/src/stm32f4xx_tim.c ****   ITStatus bitstatus = RESET;  
 3495              		.loc 1 2514 0
 3496              		.cfi_startproc
 3497              		@ args = 0, pretend = 0, frame = 0
 3498              		@ frame_needed = 0, uses_anonymous_args = 0
 3499              		@ link register save eliminated.
 3500              	.LVL414:
2521:./FWLIB/src/stm32f4xx_tim.c ****   
 3501              		.loc 1 2521 0
 3502 0000 028A     		ldrh	r2, [r0, #16]
 3503              	.LVL415:
2523:./FWLIB/src/stm32f4xx_tim.c ****   if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 3504              		.loc 1 2523 0
 3505 0002 8389     		ldrh	r3, [r0, #12]
 3506 0004 0B40     		ands	r3, r3, r1
 3507              	.LVL416:
2524:./FWLIB/src/stm32f4xx_tim.c ****   {
 3508              		.loc 1 2524 0
 3509 0006 1142     		tst	r1, r2
 3510 0008 02D0     		beq	.L189
2524:./FWLIB/src/stm32f4xx_tim.c ****   {
 3511              		.loc 1 2524 0 is_stmt 0 discriminator 1
 3512 000a 1BB9     		cbnz	r3, .L190
2530:./FWLIB/src/stm32f4xx_tim.c ****   }
 3513              		.loc 1 2530 0 is_stmt 1
 3514 000c 0020     		movs	r0, #0
 3515              	.LVL417:
 3516 000e 7047     		bx	lr
 3517              	.LVL418:
 3518              	.L189:
 3519 0010 0020     		movs	r0, #0
 3520              	.LVL419:
ARM GAS  /tmp/ccEzGk5p.s 			page 128


 3521 0012 7047     		bx	lr
 3522              	.LVL420:
 3523              	.L190:
2526:./FWLIB/src/stm32f4xx_tim.c ****   }
 3524              		.loc 1 2526 0
 3525 0014 0120     		movs	r0, #1
 3526              	.LVL421:
2533:./FWLIB/src/stm32f4xx_tim.c **** 
 3527              		.loc 1 2533 0
 3528 0016 7047     		bx	lr
 3529              		.cfi_endproc
 3530              	.LFE182:
 3532              		.section	.text.TIM_ClearITPendingBit,"ax",%progbits
 3533              		.align	1
 3534              		.global	TIM_ClearITPendingBit
 3535              		.syntax unified
 3536              		.thumb
 3537              		.thumb_func
 3538              		.fpu fpv4-sp-d16
 3540              	TIM_ClearITPendingBit:
 3541              	.LFB183:
2555:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 3542              		.loc 1 2555 0
 3543              		.cfi_startproc
 3544              		@ args = 0, pretend = 0, frame = 0
 3545              		@ frame_needed = 0, uses_anonymous_args = 0
 3546              		@ link register save eliminated.
 3547              	.LVL422:
2560:./FWLIB/src/stm32f4xx_tim.c **** }
 3548              		.loc 1 2560 0
 3549 0000 C943     		mvns	r1, r1
 3550              	.LVL423:
 3551 0002 89B2     		uxth	r1, r1
 3552 0004 0182     		strh	r1, [r0, #16]	@ movhi
2561:./FWLIB/src/stm32f4xx_tim.c **** 
 3553              		.loc 1 2561 0
 3554 0006 7047     		bx	lr
 3555              		.cfi_endproc
 3556              	.LFE183:
 3558              		.section	.text.TIM_DMAConfig,"ax",%progbits
 3559              		.align	1
 3560              		.global	TIM_DMAConfig
 3561              		.syntax unified
 3562              		.thumb
 3563              		.thumb_func
 3564              		.fpu fpv4-sp-d16
 3566              	TIM_DMAConfig:
 3567              	.LFB184:
2592:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 3568              		.loc 1 2592 0
 3569              		.cfi_startproc
 3570              		@ args = 0, pretend = 0, frame = 0
 3571              		@ frame_needed = 0, uses_anonymous_args = 0
 3572              		@ link register save eliminated.
 3573              	.LVL424:
2599:./FWLIB/src/stm32f4xx_tim.c **** }
 3574              		.loc 1 2599 0
ARM GAS  /tmp/ccEzGk5p.s 			page 129


 3575 0000 0A43     		orrs	r2, r2, r1
 3576              	.LVL425:
 3577 0002 A0F84820 		strh	r2, [r0, #72]	@ movhi
2600:./FWLIB/src/stm32f4xx_tim.c **** 
 3578              		.loc 1 2600 0
 3579 0006 7047     		bx	lr
 3580              		.cfi_endproc
 3581              	.LFE184:
 3583              		.section	.text.TIM_DMACmd,"ax",%progbits
 3584              		.align	1
 3585              		.global	TIM_DMACmd
 3586              		.syntax unified
 3587              		.thumb
 3588              		.thumb_func
 3589              		.fpu fpv4-sp-d16
 3591              	TIM_DMACmd:
 3592              	.LFB185:
2619:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 3593              		.loc 1 2619 0
 3594              		.cfi_startproc
 3595              		@ args = 0, pretend = 0, frame = 0
 3596              		@ frame_needed = 0, uses_anonymous_args = 0
 3597              		@ link register save eliminated.
 3598              	.LVL426:
2625:./FWLIB/src/stm32f4xx_tim.c ****   {
 3599              		.loc 1 2625 0
 3600 0000 22B9     		cbnz	r2, .L196
2633:./FWLIB/src/stm32f4xx_tim.c ****   }
 3601              		.loc 1 2633 0
 3602 0002 8389     		ldrh	r3, [r0, #12]
 3603 0004 23EA0101 		bic	r1, r3, r1
 3604              	.LVL427:
 3605 0008 8181     		strh	r1, [r0, #12]	@ movhi
2635:./FWLIB/src/stm32f4xx_tim.c **** 
 3606              		.loc 1 2635 0
 3607 000a 7047     		bx	lr
 3608              	.LVL428:
 3609              	.L196:
2628:./FWLIB/src/stm32f4xx_tim.c ****   }
 3610              		.loc 1 2628 0
 3611 000c 8389     		ldrh	r3, [r0, #12]
 3612 000e 1943     		orrs	r1, r1, r3
 3613              	.LVL429:
 3614 0010 8181     		strh	r1, [r0, #12]	@ movhi
 3615 0012 7047     		bx	lr
 3616              		.cfi_endproc
 3617              	.LFE185:
 3619              		.section	.text.TIM_SelectCCDMA,"ax",%progbits
 3620              		.align	1
 3621              		.global	TIM_SelectCCDMA
 3622              		.syntax unified
 3623              		.thumb
 3624              		.thumb_func
 3625              		.fpu fpv4-sp-d16
 3627              	TIM_SelectCCDMA:
 3628              	.LFB186:
2645:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
ARM GAS  /tmp/ccEzGk5p.s 			page 130


 3629              		.loc 1 2645 0
 3630              		.cfi_startproc
 3631              		@ args = 0, pretend = 0, frame = 0
 3632              		@ frame_needed = 0, uses_anonymous_args = 0
 3633              		@ link register save eliminated.
 3634              	.LVL430:
2650:./FWLIB/src/stm32f4xx_tim.c ****   {
 3635              		.loc 1 2650 0
 3636 0000 31B9     		cbnz	r1, .L200
2658:./FWLIB/src/stm32f4xx_tim.c ****   }
 3637              		.loc 1 2658 0
 3638 0002 8388     		ldrh	r3, [r0, #4]
 3639 0004 9BB2     		uxth	r3, r3
 3640 0006 23F00803 		bic	r3, r3, #8
 3641 000a 9BB2     		uxth	r3, r3
 3642 000c 8380     		strh	r3, [r0, #4]	@ movhi
2660:./FWLIB/src/stm32f4xx_tim.c **** /**
 3643              		.loc 1 2660 0
 3644 000e 7047     		bx	lr
 3645              	.L200:
2653:./FWLIB/src/stm32f4xx_tim.c ****   }
 3646              		.loc 1 2653 0
 3647 0010 8388     		ldrh	r3, [r0, #4]
 3648 0012 43F00803 		orr	r3, r3, #8
 3649 0016 8380     		strh	r3, [r0, #4]	@ movhi
 3650 0018 7047     		bx	lr
 3651              		.cfi_endproc
 3652              	.LFE186:
 3654              		.section	.text.TIM_InternalClockConfig,"ax",%progbits
 3655              		.align	1
 3656              		.global	TIM_InternalClockConfig
 3657              		.syntax unified
 3658              		.thumb
 3659              		.thumb_func
 3660              		.fpu fpv4-sp-d16
 3662              	TIM_InternalClockConfig:
 3663              	.LFB187:
2684:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 3664              		.loc 1 2684 0
 3665              		.cfi_startproc
 3666              		@ args = 0, pretend = 0, frame = 0
 3667              		@ frame_needed = 0, uses_anonymous_args = 0
 3668              		@ link register save eliminated.
 3669              	.LVL431:
2689:./FWLIB/src/stm32f4xx_tim.c **** }
 3670              		.loc 1 2689 0
 3671 0000 0389     		ldrh	r3, [r0, #8]
 3672 0002 9BB2     		uxth	r3, r3
 3673 0004 23F00703 		bic	r3, r3, #7
 3674 0008 9BB2     		uxth	r3, r3
 3675 000a 0381     		strh	r3, [r0, #8]	@ movhi
2690:./FWLIB/src/stm32f4xx_tim.c **** 
 3676              		.loc 1 2690 0
 3677 000c 7047     		bx	lr
 3678              		.cfi_endproc
 3679              	.LFE187:
 3681              		.section	.text.TIM_SelectInputTrigger,"ax",%progbits
ARM GAS  /tmp/ccEzGk5p.s 			page 131


 3682              		.align	1
 3683              		.global	TIM_SelectInputTrigger
 3684              		.syntax unified
 3685              		.thumb
 3686              		.thumb_func
 3687              		.fpu fpv4-sp-d16
 3689              	TIM_SelectInputTrigger:
 3690              	.LFB192:
2893:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpsmcr = 0;
 3691              		.loc 1 2893 0
 3692              		.cfi_startproc
 3693              		@ args = 0, pretend = 0, frame = 0
 3694              		@ frame_needed = 0, uses_anonymous_args = 0
 3695              		@ link register save eliminated.
 3696              	.LVL432:
2901:./FWLIB/src/stm32f4xx_tim.c **** 
 3697              		.loc 1 2901 0
 3698 0000 0389     		ldrh	r3, [r0, #8]
 3699 0002 9BB2     		uxth	r3, r3
 3700              	.LVL433:
2904:./FWLIB/src/stm32f4xx_tim.c **** 
 3701              		.loc 1 2904 0
 3702 0004 23F07003 		bic	r3, r3, #112
 3703              	.LVL434:
2907:./FWLIB/src/stm32f4xx_tim.c **** 
 3704              		.loc 1 2907 0
 3705 0008 1943     		orrs	r1, r1, r3
 3706              	.LVL435:
2910:./FWLIB/src/stm32f4xx_tim.c **** }
 3707              		.loc 1 2910 0
 3708 000a 0181     		strh	r1, [r0, #8]	@ movhi
2911:./FWLIB/src/stm32f4xx_tim.c **** 
 3709              		.loc 1 2911 0
 3710 000c 7047     		bx	lr
 3711              		.cfi_endproc
 3712              	.LFE192:
 3714              		.section	.text.TIM_ITRxExternalClockConfig,"ax",%progbits
 3715              		.align	1
 3716              		.global	TIM_ITRxExternalClockConfig
 3717              		.syntax unified
 3718              		.thumb
 3719              		.thumb_func
 3720              		.fpu fpv4-sp-d16
 3722              	TIM_ITRxExternalClockConfig:
 3723              	.LFB188:
2705:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 3724              		.loc 1 2705 0
 3725              		.cfi_startproc
 3726              		@ args = 0, pretend = 0, frame = 0
 3727              		@ frame_needed = 0, uses_anonymous_args = 0
 3728              	.LVL436:
 3729 0000 10B5     		push	{r4, lr}
 3730              	.LCFI27:
 3731              		.cfi_def_cfa_offset 8
 3732              		.cfi_offset 4, -8
 3733              		.cfi_offset 14, -4
 3734 0002 0446     		mov	r4, r0
ARM GAS  /tmp/ccEzGk5p.s 			page 132


2711:./FWLIB/src/stm32f4xx_tim.c **** 
 3735              		.loc 1 2711 0
 3736 0004 FFF7FEFF 		bl	TIM_SelectInputTrigger
 3737              	.LVL437:
2714:./FWLIB/src/stm32f4xx_tim.c **** }
 3738              		.loc 1 2714 0
 3739 0008 2389     		ldrh	r3, [r4, #8]
 3740 000a 43F00703 		orr	r3, r3, #7
 3741 000e 2381     		strh	r3, [r4, #8]	@ movhi
2715:./FWLIB/src/stm32f4xx_tim.c **** 
 3742              		.loc 1 2715 0
 3743 0010 10BD     		pop	{r4, pc}
 3744              		.cfi_endproc
 3745              	.LFE188:
 3747              		.section	.text.TIM_TIxExternalClockConfig,"ax",%progbits
 3748              		.align	1
 3749              		.global	TIM_TIxExternalClockConfig
 3750              		.syntax unified
 3751              		.thumb
 3752              		.thumb_func
 3753              		.fpu fpv4-sp-d16
 3755              	TIM_TIxExternalClockConfig:
 3756              	.LFB189:
2736:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 3757              		.loc 1 2736 0
 3758              		.cfi_startproc
 3759              		@ args = 0, pretend = 0, frame = 0
 3760              		@ frame_needed = 0, uses_anonymous_args = 0
 3761              	.LVL438:
 3762 0000 38B5     		push	{r3, r4, r5, lr}
 3763              	.LCFI28:
 3764              		.cfi_def_cfa_offset 16
 3765              		.cfi_offset 3, -16
 3766              		.cfi_offset 4, -12
 3767              		.cfi_offset 5, -8
 3768              		.cfi_offset 14, -4
 3769 0002 0446     		mov	r4, r0
 3770 0004 0D46     		mov	r5, r1
 3771 0006 1146     		mov	r1, r2
 3772              	.LVL439:
2743:./FWLIB/src/stm32f4xx_tim.c ****   {
 3773              		.loc 1 2743 0
 3774 0008 602D     		cmp	r5, #96
 3775 000a 0BD0     		beq	.L209
2749:./FWLIB/src/stm32f4xx_tim.c ****   }
 3776              		.loc 1 2749 0
 3777 000c 0122     		movs	r2, #1
 3778              	.LVL440:
 3779 000e FFF7FEFF 		bl	TI1_Config
 3780              	.LVL441:
 3781              	.L207:
2752:./FWLIB/src/stm32f4xx_tim.c ****   /* Select the External clock mode1 */
 3782              		.loc 1 2752 0
 3783 0012 2946     		mov	r1, r5
 3784 0014 2046     		mov	r0, r4
 3785 0016 FFF7FEFF 		bl	TIM_SelectInputTrigger
 3786              	.LVL442:
ARM GAS  /tmp/ccEzGk5p.s 			page 133


2754:./FWLIB/src/stm32f4xx_tim.c **** }
 3787              		.loc 1 2754 0
 3788 001a 2389     		ldrh	r3, [r4, #8]
 3789 001c 43F00703 		orr	r3, r3, #7
 3790 0020 2381     		strh	r3, [r4, #8]	@ movhi
2755:./FWLIB/src/stm32f4xx_tim.c **** 
 3791              		.loc 1 2755 0
 3792 0022 38BD     		pop	{r3, r4, r5, pc}
 3793              	.LVL443:
 3794              	.L209:
2745:./FWLIB/src/stm32f4xx_tim.c ****   }
 3795              		.loc 1 2745 0
 3796 0024 0122     		movs	r2, #1
 3797              	.LVL444:
 3798 0026 FFF7FEFF 		bl	TI2_Config
 3799              	.LVL445:
 3800 002a F2E7     		b	.L207
 3801              		.cfi_endproc
 3802              	.LFE189:
 3804              		.section	.text.TIM_SelectOutputTrigger,"ax",%progbits
 3805              		.align	1
 3806              		.global	TIM_SelectOutputTrigger
 3807              		.syntax unified
 3808              		.thumb
 3809              		.thumb_func
 3810              		.fpu fpv4-sp-d16
 3812              	TIM_SelectOutputTrigger:
 3813              	.LFB193:
2936:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 3814              		.loc 1 2936 0
 3815              		.cfi_startproc
 3816              		@ args = 0, pretend = 0, frame = 0
 3817              		@ frame_needed = 0, uses_anonymous_args = 0
 3818              		@ link register save eliminated.
 3819              	.LVL446:
2942:./FWLIB/src/stm32f4xx_tim.c ****   /* Select the TRGO source */
 3820              		.loc 1 2942 0
 3821 0000 8388     		ldrh	r3, [r0, #4]
 3822 0002 9BB2     		uxth	r3, r3
 3823 0004 23F07003 		bic	r3, r3, #112
 3824 0008 9BB2     		uxth	r3, r3
 3825 000a 8380     		strh	r3, [r0, #4]	@ movhi
2944:./FWLIB/src/stm32f4xx_tim.c **** }
 3826              		.loc 1 2944 0
 3827 000c 8388     		ldrh	r3, [r0, #4]
 3828 000e 1943     		orrs	r1, r1, r3
 3829              	.LVL447:
 3830 0010 8180     		strh	r1, [r0, #4]	@ movhi
2945:./FWLIB/src/stm32f4xx_tim.c **** 
 3831              		.loc 1 2945 0
 3832 0012 7047     		bx	lr
 3833              		.cfi_endproc
 3834              	.LFE193:
 3836              		.section	.text.TIM_SelectSlaveMode,"ax",%progbits
 3837              		.align	1
 3838              		.global	TIM_SelectSlaveMode
 3839              		.syntax unified
ARM GAS  /tmp/ccEzGk5p.s 			page 134


 3840              		.thumb
 3841              		.thumb_func
 3842              		.fpu fpv4-sp-d16
 3844              	TIM_SelectSlaveMode:
 3845              	.LFB194:
2960:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 3846              		.loc 1 2960 0
 3847              		.cfi_startproc
 3848              		@ args = 0, pretend = 0, frame = 0
 3849              		@ frame_needed = 0, uses_anonymous_args = 0
 3850              		@ link register save eliminated.
 3851              	.LVL448:
2966:./FWLIB/src/stm32f4xx_tim.c **** 
 3852              		.loc 1 2966 0
 3853 0000 0389     		ldrh	r3, [r0, #8]
 3854 0002 9BB2     		uxth	r3, r3
 3855 0004 23F00703 		bic	r3, r3, #7
 3856 0008 9BB2     		uxth	r3, r3
 3857 000a 0381     		strh	r3, [r0, #8]	@ movhi
2969:./FWLIB/src/stm32f4xx_tim.c **** }
 3858              		.loc 1 2969 0
 3859 000c 0389     		ldrh	r3, [r0, #8]
 3860 000e 1943     		orrs	r1, r1, r3
 3861              	.LVL449:
 3862 0010 0181     		strh	r1, [r0, #8]	@ movhi
2970:./FWLIB/src/stm32f4xx_tim.c **** 
 3863              		.loc 1 2970 0
 3864 0012 7047     		bx	lr
 3865              		.cfi_endproc
 3866              	.LFE194:
 3868              		.section	.text.TIM_SelectMasterSlaveMode,"ax",%progbits
 3869              		.align	1
 3870              		.global	TIM_SelectMasterSlaveMode
 3871              		.syntax unified
 3872              		.thumb
 3873              		.thumb_func
 3874              		.fpu fpv4-sp-d16
 3876              	TIM_SelectMasterSlaveMode:
 3877              	.LFB195:
2983:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 3878              		.loc 1 2983 0
 3879              		.cfi_startproc
 3880              		@ args = 0, pretend = 0, frame = 0
 3881              		@ frame_needed = 0, uses_anonymous_args = 0
 3882              		@ link register save eliminated.
 3883              	.LVL450:
2989:./FWLIB/src/stm32f4xx_tim.c ****   
 3884              		.loc 1 2989 0
 3885 0000 0389     		ldrh	r3, [r0, #8]
 3886 0002 9BB2     		uxth	r3, r3
 3887 0004 23F08003 		bic	r3, r3, #128
 3888 0008 9BB2     		uxth	r3, r3
 3889 000a 0381     		strh	r3, [r0, #8]	@ movhi
2992:./FWLIB/src/stm32f4xx_tim.c **** }
 3890              		.loc 1 2992 0
 3891 000c 0389     		ldrh	r3, [r0, #8]
 3892 000e 1943     		orrs	r1, r1, r3
ARM GAS  /tmp/ccEzGk5p.s 			page 135


 3893              	.LVL451:
 3894 0010 0181     		strh	r1, [r0, #8]	@ movhi
2993:./FWLIB/src/stm32f4xx_tim.c **** 
 3895              		.loc 1 2993 0
 3896 0012 7047     		bx	lr
 3897              		.cfi_endproc
 3898              	.LFE195:
 3900              		.section	.text.TIM_ETRConfig,"ax",%progbits
 3901              		.align	1
 3902              		.global	TIM_ETRConfig
 3903              		.syntax unified
 3904              		.thumb
 3905              		.thumb_func
 3906              		.fpu fpv4-sp-d16
 3908              	TIM_ETRConfig:
 3909              	.LFB196:
3014:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpsmcr = 0;
 3910              		.loc 1 3014 0
 3911              		.cfi_startproc
 3912              		@ args = 0, pretend = 0, frame = 0
 3913              		@ frame_needed = 0, uses_anonymous_args = 0
 3914              		@ link register save eliminated.
 3915              	.LVL452:
 3916 0000 10B4     		push	{r4}
 3917              	.LCFI29:
 3918              		.cfi_def_cfa_offset 4
 3919              		.cfi_offset 4, -4
 3920              	.LVL453:
3023:./FWLIB/src/stm32f4xx_tim.c **** 
 3921              		.loc 1 3023 0
 3922 0002 0489     		ldrh	r4, [r0, #8]
 3923              	.LVL454:
3026:./FWLIB/src/stm32f4xx_tim.c **** 
 3924              		.loc 1 3026 0
 3925 0004 E4B2     		uxtb	r4, r4
 3926              	.LVL455:
3029:./FWLIB/src/stm32f4xx_tim.c **** 
 3927              		.loc 1 3029 0
 3928 0006 1B02     		lsls	r3, r3, #8
 3929              	.LVL456:
 3930 0008 9BB2     		uxth	r3, r3
 3931 000a 1343     		orrs	r3, r3, r2
 3932 000c 0B43     		orrs	r3, r3, r1
 3933 000e 2343     		orrs	r3, r3, r4
 3934              	.LVL457:
3032:./FWLIB/src/stm32f4xx_tim.c **** }
 3935              		.loc 1 3032 0
 3936 0010 0381     		strh	r3, [r0, #8]	@ movhi
3033:./FWLIB/src/stm32f4xx_tim.c **** /**
 3937              		.loc 1 3033 0
 3938 0012 5DF8044B 		ldr	r4, [sp], #4
 3939              	.LCFI30:
 3940              		.cfi_restore 4
 3941              		.cfi_def_cfa_offset 0
 3942 0016 7047     		bx	lr
 3943              		.cfi_endproc
 3944              	.LFE196:
ARM GAS  /tmp/ccEzGk5p.s 			page 136


 3946              		.section	.text.TIM_ETRClockMode1Config,"ax",%progbits
 3947              		.align	1
 3948              		.global	TIM_ETRClockMode1Config
 3949              		.syntax unified
 3950              		.thumb
 3951              		.thumb_func
 3952              		.fpu fpv4-sp-d16
 3954              	TIM_ETRClockMode1Config:
 3955              	.LFB190:
2776:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpsmcr = 0;
 3956              		.loc 1 2776 0
 3957              		.cfi_startproc
 3958              		@ args = 0, pretend = 0, frame = 0
 3959              		@ frame_needed = 0, uses_anonymous_args = 0
 3960              	.LVL458:
 3961 0000 10B5     		push	{r4, lr}
 3962              	.LCFI31:
 3963              		.cfi_def_cfa_offset 8
 3964              		.cfi_offset 4, -8
 3965              		.cfi_offset 14, -4
 3966 0002 0446     		mov	r4, r0
 3967              	.LVL459:
2785:./FWLIB/src/stm32f4xx_tim.c ****   
 3968              		.loc 1 2785 0
 3969 0004 FFF7FEFF 		bl	TIM_ETRConfig
 3970              	.LVL460:
2788:./FWLIB/src/stm32f4xx_tim.c **** 
 3971              		.loc 1 2788 0
 3972 0008 2389     		ldrh	r3, [r4, #8]
 3973              	.LVL461:
2798:./FWLIB/src/stm32f4xx_tim.c **** 
 3974              		.loc 1 2798 0
 3975 000a 43F07703 		orr	r3, r3, #119
 3976              	.LVL462:
2801:./FWLIB/src/stm32f4xx_tim.c **** }
 3977              		.loc 1 2801 0
 3978 000e 2381     		strh	r3, [r4, #8]	@ movhi
2802:./FWLIB/src/stm32f4xx_tim.c **** 
 3979              		.loc 1 2802 0
 3980 0010 10BD     		pop	{r4, pc}
 3981              		.cfi_endproc
 3982              	.LFE190:
 3984              		.section	.text.TIM_ETRClockMode2Config,"ax",%progbits
 3985              		.align	1
 3986              		.global	TIM_ETRClockMode2Config
 3987              		.syntax unified
 3988              		.thumb
 3989              		.thumb_func
 3990              		.fpu fpv4-sp-d16
 3992              	TIM_ETRClockMode2Config:
 3993              	.LFB191:
2823:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 3994              		.loc 1 2823 0
 3995              		.cfi_startproc
 3996              		@ args = 0, pretend = 0, frame = 0
 3997              		@ frame_needed = 0, uses_anonymous_args = 0
 3998              	.LVL463:
ARM GAS  /tmp/ccEzGk5p.s 			page 137


 3999 0000 10B5     		push	{r4, lr}
 4000              	.LCFI32:
 4001              		.cfi_def_cfa_offset 8
 4002              		.cfi_offset 4, -8
 4003              		.cfi_offset 14, -4
 4004 0002 0446     		mov	r4, r0
2831:./FWLIB/src/stm32f4xx_tim.c **** 
 4005              		.loc 1 2831 0
 4006 0004 FFF7FEFF 		bl	TIM_ETRConfig
 4007              	.LVL464:
2834:./FWLIB/src/stm32f4xx_tim.c **** }
 4008              		.loc 1 2834 0
 4009 0008 2389     		ldrh	r3, [r4, #8]
 4010 000a 43F48043 		orr	r3, r3, #16384
 4011 000e 2381     		strh	r3, [r4, #8]	@ movhi
2835:./FWLIB/src/stm32f4xx_tim.c **** /**
 4012              		.loc 1 2835 0
 4013 0010 10BD     		pop	{r4, pc}
 4014              		.cfi_endproc
 4015              	.LFE191:
 4017              		.section	.text.TIM_EncoderInterfaceConfig,"ax",%progbits
 4018              		.align	1
 4019              		.global	TIM_EncoderInterfaceConfig
 4020              		.syntax unified
 4021              		.thumb
 4022              		.thumb_func
 4023              		.fpu fpv4-sp-d16
 4025              	TIM_EncoderInterfaceConfig:
 4026              	.LFB197:
3072:./FWLIB/src/stm32f4xx_tim.c ****   uint16_t tmpsmcr = 0;
 4027              		.loc 1 3072 0
 4028              		.cfi_startproc
 4029              		@ args = 0, pretend = 0, frame = 0
 4030              		@ frame_needed = 0, uses_anonymous_args = 0
 4031              		@ link register save eliminated.
 4032              	.LVL465:
 4033 0000 70B4     		push	{r4, r5, r6}
 4034              	.LCFI33:
 4035              		.cfi_def_cfa_offset 12
 4036              		.cfi_offset 4, -12
 4037              		.cfi_offset 5, -8
 4038              		.cfi_offset 6, -4
 4039              	.LVL466:
3084:./FWLIB/src/stm32f4xx_tim.c **** 
 4040              		.loc 1 3084 0
 4041 0002 0689     		ldrh	r6, [r0, #8]
 4042 0004 B6B2     		uxth	r6, r6
 4043              	.LVL467:
3087:./FWLIB/src/stm32f4xx_tim.c **** 
 4044              		.loc 1 3087 0
 4045 0006 048B     		ldrh	r4, [r0, #24]
 4046 0008 A4B2     		uxth	r4, r4
 4047              	.LVL468:
3090:./FWLIB/src/stm32f4xx_tim.c **** 
 4048              		.loc 1 3090 0
 4049 000a 058C     		ldrh	r5, [r0, #32]
 4050 000c ADB2     		uxth	r5, r5
ARM GAS  /tmp/ccEzGk5p.s 			page 138


 4051              	.LVL469:
3093:./FWLIB/src/stm32f4xx_tim.c ****   tmpsmcr |= TIM_EncoderMode;
 4052              		.loc 1 3093 0
 4053 000e 26F00706 		bic	r6, r6, #7
 4054              	.LVL470:
3094:./FWLIB/src/stm32f4xx_tim.c **** 
 4055              		.loc 1 3094 0
 4056 0012 3143     		orrs	r1, r1, r6
 4057              	.LVL471:
3097:./FWLIB/src/stm32f4xx_tim.c ****   tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 4058              		.loc 1 3097 0
 4059 0014 24F44074 		bic	r4, r4, #768
 4060              	.LVL472:
 4061 0018 24F00304 		bic	r4, r4, #3
 4062              	.LVL473:
3098:./FWLIB/src/stm32f4xx_tim.c **** 
 4063              		.loc 1 3098 0
 4064 001c 44F48074 		orr	r4, r4, #256
 4065              	.LVL474:
 4066 0020 44F00104 		orr	r4, r4, #1
 4067              	.LVL475:
3101:./FWLIB/src/stm32f4xx_tim.c ****   tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 4068              		.loc 1 3101 0
 4069 0024 25F02205 		bic	r5, r5, #34
 4070              	.LVL476:
3102:./FWLIB/src/stm32f4xx_tim.c **** 
 4071              		.loc 1 3102 0
 4072 0028 1B01     		lsls	r3, r3, #4
 4073              	.LVL477:
 4074 002a 9BB2     		uxth	r3, r3
 4075 002c 1A43     		orrs	r2, r2, r3
 4076              	.LVL478:
 4077 002e 1543     		orrs	r5, r5, r2
 4078              	.LVL479:
3105:./FWLIB/src/stm32f4xx_tim.c **** 
 4079              		.loc 1 3105 0
 4080 0030 0181     		strh	r1, [r0, #8]	@ movhi
3108:./FWLIB/src/stm32f4xx_tim.c **** 
 4081              		.loc 1 3108 0
 4082 0032 0483     		strh	r4, [r0, #24]	@ movhi
3111:./FWLIB/src/stm32f4xx_tim.c **** }
 4083              		.loc 1 3111 0
 4084 0034 0584     		strh	r5, [r0, #32]	@ movhi
3112:./FWLIB/src/stm32f4xx_tim.c **** 
 4085              		.loc 1 3112 0
 4086 0036 70BC     		pop	{r4, r5, r6}
 4087              	.LCFI34:
 4088              		.cfi_restore 6
 4089              		.cfi_restore 5
 4090              		.cfi_restore 4
 4091              		.cfi_def_cfa_offset 0
 4092              	.LVL480:
 4093 0038 7047     		bx	lr
 4094              		.cfi_endproc
 4095              	.LFE197:
 4097              		.section	.text.TIM_SelectHallSensor,"ax",%progbits
 4098              		.align	1
ARM GAS  /tmp/ccEzGk5p.s 			page 139


 4099              		.global	TIM_SelectHallSensor
 4100              		.syntax unified
 4101              		.thumb
 4102              		.thumb_func
 4103              		.fpu fpv4-sp-d16
 4105              	TIM_SelectHallSensor:
 4106              	.LFB198:
3123:./FWLIB/src/stm32f4xx_tim.c ****   /* Check the parameters */
 4107              		.loc 1 3123 0
 4108              		.cfi_startproc
 4109              		@ args = 0, pretend = 0, frame = 0
 4110              		@ frame_needed = 0, uses_anonymous_args = 0
 4111              		@ link register save eliminated.
 4112              	.LVL481:
3128:./FWLIB/src/stm32f4xx_tim.c ****   {
 4113              		.loc 1 3128 0
 4114 0000 31B9     		cbnz	r1, .L224
3136:./FWLIB/src/stm32f4xx_tim.c ****   }
 4115              		.loc 1 3136 0
 4116 0002 8388     		ldrh	r3, [r0, #4]
 4117 0004 9BB2     		uxth	r3, r3
 4118 0006 23F08003 		bic	r3, r3, #128
 4119 000a 9BB2     		uxth	r3, r3
 4120 000c 8380     		strh	r3, [r0, #4]	@ movhi
3138:./FWLIB/src/stm32f4xx_tim.c **** /**
 4121              		.loc 1 3138 0
 4122 000e 7047     		bx	lr
 4123              	.L224:
3131:./FWLIB/src/stm32f4xx_tim.c ****   }
 4124              		.loc 1 3131 0
 4125 0010 8388     		ldrh	r3, [r0, #4]
 4126 0012 43F08003 		orr	r3, r3, #128
 4127 0016 8380     		strh	r3, [r0, #4]	@ movhi
 4128 0018 7047     		bx	lr
 4129              		.cfi_endproc
 4130              	.LFE198:
 4132              		.section	.text.TIM_RemapConfig,"ax",%progbits
 4133              		.align	1
 4134              		.global	TIM_RemapConfig
 4135              		.syntax unified
 4136              		.thumb
 4137              		.thumb_func
 4138              		.fpu fpv4-sp-d16
 4140              	TIM_RemapConfig:
 4141              	.LFB199:
3174:./FWLIB/src/stm32f4xx_tim.c ****  /* Check the parameters */
 4142              		.loc 1 3174 0
 4143              		.cfi_startproc
 4144              		@ args = 0, pretend = 0, frame = 0
 4145              		@ frame_needed = 0, uses_anonymous_args = 0
 4146              		@ link register save eliminated.
 4147              	.LVL482:
3180:./FWLIB/src/stm32f4xx_tim.c **** }
 4148              		.loc 1 3180 0
 4149 0000 A0F85010 		strh	r1, [r0, #80]	@ movhi
3181:./FWLIB/src/stm32f4xx_tim.c **** /**
 4150              		.loc 1 3181 0
ARM GAS  /tmp/ccEzGk5p.s 			page 140


 4151 0004 7047     		bx	lr
 4152              		.cfi_endproc
 4153              	.LFE199:
 4155              		.text
 4156              	.Letext0:
 4157              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 4158              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 4159              		.file 4 "build/lnInclude/core_cm4.h"
 4160              		.file 5 "build/lnInclude/system_stm32f4xx.h"
 4161              		.file 6 "build/lnInclude/stm32f4xx.h"
 4162              		.file 7 "build/lnInclude/stm32f4xx_tim.h"
 4163              		.file 8 "build/lnInclude/stm32f4xx_rcc.h"
ARM GAS  /tmp/ccEzGk5p.s 			page 141


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_tim.c
     /tmp/ccEzGk5p.s:18     .text.TI1_Config:0000000000000000 $t
     /tmp/ccEzGk5p.s:24     .text.TI1_Config:0000000000000000 TI1_Config
     /tmp/ccEzGk5p.s:88     .text.TI2_Config:0000000000000000 $t
     /tmp/ccEzGk5p.s:94     .text.TI2_Config:0000000000000000 TI2_Config
     /tmp/ccEzGk5p.s:168    .text.TI3_Config:0000000000000000 $t
     /tmp/ccEzGk5p.s:174    .text.TI3_Config:0000000000000000 TI3_Config
     /tmp/ccEzGk5p.s:242    .text.TI4_Config:0000000000000000 $t
     /tmp/ccEzGk5p.s:248    .text.TI4_Config:0000000000000000 TI4_Config
     /tmp/ccEzGk5p.s:323    .text.TIM_DeInit:0000000000000000 $t
     /tmp/ccEzGk5p.s:330    .text.TIM_DeInit:0000000000000000 TIM_DeInit
     /tmp/ccEzGk5p.s:597    .text.TIM_DeInit:0000000000000164 $d
     /tmp/ccEzGk5p.s:614    .text.TIM_TimeBaseInit:0000000000000000 $t
     /tmp/ccEzGk5p.s:621    .text.TIM_TimeBaseInit:0000000000000000 TIM_TimeBaseInit
     /tmp/ccEzGk5p.s:714    .text.TIM_TimeBaseInit:0000000000000074 $d
     /tmp/ccEzGk5p.s:720    .text.TIM_TimeBaseStructInit:0000000000000000 $t
     /tmp/ccEzGk5p.s:727    .text.TIM_TimeBaseStructInit:0000000000000000 TIM_TimeBaseStructInit
     /tmp/ccEzGk5p.s:753    .text.TIM_PrescalerConfig:0000000000000000 $t
     /tmp/ccEzGk5p.s:760    .text.TIM_PrescalerConfig:0000000000000000 TIM_PrescalerConfig
     /tmp/ccEzGk5p.s:778    .text.TIM_CounterModeConfig:0000000000000000 $t
     /tmp/ccEzGk5p.s:785    .text.TIM_CounterModeConfig:0000000000000000 TIM_CounterModeConfig
     /tmp/ccEzGk5p.s:811    .text.TIM_SetCounter:0000000000000000 $t
     /tmp/ccEzGk5p.s:818    .text.TIM_SetCounter:0000000000000000 TIM_SetCounter
     /tmp/ccEzGk5p.s:834    .text.TIM_SetAutoreload:0000000000000000 $t
     /tmp/ccEzGk5p.s:841    .text.TIM_SetAutoreload:0000000000000000 TIM_SetAutoreload
     /tmp/ccEzGk5p.s:857    .text.TIM_GetCounter:0000000000000000 $t
     /tmp/ccEzGk5p.s:864    .text.TIM_GetCounter:0000000000000000 TIM_GetCounter
     /tmp/ccEzGk5p.s:881    .text.TIM_GetPrescaler:0000000000000000 $t
     /tmp/ccEzGk5p.s:888    .text.TIM_GetPrescaler:0000000000000000 TIM_GetPrescaler
     /tmp/ccEzGk5p.s:905    .text.TIM_UpdateDisableConfig:0000000000000000 $t
     /tmp/ccEzGk5p.s:912    .text.TIM_UpdateDisableConfig:0000000000000000 TIM_UpdateDisableConfig
     /tmp/ccEzGk5p.s:940    .text.TIM_UpdateRequestConfig:0000000000000000 $t
     /tmp/ccEzGk5p.s:947    .text.TIM_UpdateRequestConfig:0000000000000000 TIM_UpdateRequestConfig
     /tmp/ccEzGk5p.s:975    .text.TIM_ARRPreloadConfig:0000000000000000 $t
     /tmp/ccEzGk5p.s:982    .text.TIM_ARRPreloadConfig:0000000000000000 TIM_ARRPreloadConfig
     /tmp/ccEzGk5p.s:1010   .text.TIM_SelectOnePulseMode:0000000000000000 $t
     /tmp/ccEzGk5p.s:1017   .text.TIM_SelectOnePulseMode:0000000000000000 TIM_SelectOnePulseMode
     /tmp/ccEzGk5p.s:1042   .text.TIM_SetClockDivision:0000000000000000 $t
     /tmp/ccEzGk5p.s:1049   .text.TIM_SetClockDivision:0000000000000000 TIM_SetClockDivision
     /tmp/ccEzGk5p.s:1074   .text.TIM_Cmd:0000000000000000 $t
     /tmp/ccEzGk5p.s:1081   .text.TIM_Cmd:0000000000000000 TIM_Cmd
     /tmp/ccEzGk5p.s:1109   .text.TIM_OC1Init:0000000000000000 $t
     /tmp/ccEzGk5p.s:1116   .text.TIM_OC1Init:0000000000000000 TIM_OC1Init
     /tmp/ccEzGk5p.s:1223   .text.TIM_OC1Init:0000000000000068 $d
     /tmp/ccEzGk5p.s:1228   .text.TIM_OC2Init:0000000000000000 $t
     /tmp/ccEzGk5p.s:1235   .text.TIM_OC2Init:0000000000000000 TIM_OC2Init
     /tmp/ccEzGk5p.s:1354   .text.TIM_OC2Init:0000000000000084 $d
     /tmp/ccEzGk5p.s:1359   .text.TIM_OC3Init:0000000000000000 $t
     /tmp/ccEzGk5p.s:1366   .text.TIM_OC3Init:0000000000000000 TIM_OC3Init
     /tmp/ccEzGk5p.s:1483   .text.TIM_OC3Init:0000000000000080 $d
     /tmp/ccEzGk5p.s:1488   .text.TIM_OC4Init:0000000000000000 $t
     /tmp/ccEzGk5p.s:1495   .text.TIM_OC4Init:0000000000000000 TIM_OC4Init
     /tmp/ccEzGk5p.s:1592   .text.TIM_OC4Init:0000000000000064 $d
     /tmp/ccEzGk5p.s:1597   .text.TIM_OCStructInit:0000000000000000 $t
     /tmp/ccEzGk5p.s:1604   .text.TIM_OCStructInit:0000000000000000 TIM_OCStructInit
     /tmp/ccEzGk5p.s:1635   .text.TIM_SelectOCxM:0000000000000000 $t
ARM GAS  /tmp/ccEzGk5p.s 			page 142


     /tmp/ccEzGk5p.s:1642   .text.TIM_SelectOCxM:0000000000000000 TIM_SelectOCxM
     /tmp/ccEzGk5p.s:1723   .text.TIM_SetCompare1:0000000000000000 $t
     /tmp/ccEzGk5p.s:1730   .text.TIM_SetCompare1:0000000000000000 TIM_SetCompare1
     /tmp/ccEzGk5p.s:1746   .text.TIM_SetCompare2:0000000000000000 $t
     /tmp/ccEzGk5p.s:1753   .text.TIM_SetCompare2:0000000000000000 TIM_SetCompare2
     /tmp/ccEzGk5p.s:1769   .text.TIM_SetCompare3:0000000000000000 $t
     /tmp/ccEzGk5p.s:1776   .text.TIM_SetCompare3:0000000000000000 TIM_SetCompare3
     /tmp/ccEzGk5p.s:1792   .text.TIM_SetCompare4:0000000000000000 $t
     /tmp/ccEzGk5p.s:1799   .text.TIM_SetCompare4:0000000000000000 TIM_SetCompare4
     /tmp/ccEzGk5p.s:1815   .text.TIM_ForcedOC1Config:0000000000000000 $t
     /tmp/ccEzGk5p.s:1822   .text.TIM_ForcedOC1Config:0000000000000000 TIM_ForcedOC1Config
     /tmp/ccEzGk5p.s:1848   .text.TIM_ForcedOC2Config:0000000000000000 $t
     /tmp/ccEzGk5p.s:1855   .text.TIM_ForcedOC2Config:0000000000000000 TIM_ForcedOC2Config
     /tmp/ccEzGk5p.s:1884   .text.TIM_ForcedOC3Config:0000000000000000 $t
     /tmp/ccEzGk5p.s:1891   .text.TIM_ForcedOC3Config:0000000000000000 TIM_ForcedOC3Config
     /tmp/ccEzGk5p.s:1917   .text.TIM_ForcedOC4Config:0000000000000000 $t
     /tmp/ccEzGk5p.s:1924   .text.TIM_ForcedOC4Config:0000000000000000 TIM_ForcedOC4Config
     /tmp/ccEzGk5p.s:1953   .text.TIM_OC1PreloadConfig:0000000000000000 $t
     /tmp/ccEzGk5p.s:1960   .text.TIM_OC1PreloadConfig:0000000000000000 TIM_OC1PreloadConfig
     /tmp/ccEzGk5p.s:1986   .text.TIM_OC2PreloadConfig:0000000000000000 $t
     /tmp/ccEzGk5p.s:1993   .text.TIM_OC2PreloadConfig:0000000000000000 TIM_OC2PreloadConfig
     /tmp/ccEzGk5p.s:2022   .text.TIM_OC3PreloadConfig:0000000000000000 $t
     /tmp/ccEzGk5p.s:2029   .text.TIM_OC3PreloadConfig:0000000000000000 TIM_OC3PreloadConfig
     /tmp/ccEzGk5p.s:2055   .text.TIM_OC4PreloadConfig:0000000000000000 $t
     /tmp/ccEzGk5p.s:2062   .text.TIM_OC4PreloadConfig:0000000000000000 TIM_OC4PreloadConfig
     /tmp/ccEzGk5p.s:2091   .text.TIM_OC1FastConfig:0000000000000000 $t
     /tmp/ccEzGk5p.s:2098   .text.TIM_OC1FastConfig:0000000000000000 TIM_OC1FastConfig
     /tmp/ccEzGk5p.s:2124   .text.TIM_OC2FastConfig:0000000000000000 $t
     /tmp/ccEzGk5p.s:2131   .text.TIM_OC2FastConfig:0000000000000000 TIM_OC2FastConfig
     /tmp/ccEzGk5p.s:2160   .text.TIM_OC3FastConfig:0000000000000000 $t
     /tmp/ccEzGk5p.s:2167   .text.TIM_OC3FastConfig:0000000000000000 TIM_OC3FastConfig
     /tmp/ccEzGk5p.s:2193   .text.TIM_OC4FastConfig:0000000000000000 $t
     /tmp/ccEzGk5p.s:2200   .text.TIM_OC4FastConfig:0000000000000000 TIM_OC4FastConfig
     /tmp/ccEzGk5p.s:2229   .text.TIM_ClearOC1Ref:0000000000000000 $t
     /tmp/ccEzGk5p.s:2236   .text.TIM_ClearOC1Ref:0000000000000000 TIM_ClearOC1Ref
     /tmp/ccEzGk5p.s:2262   .text.TIM_ClearOC2Ref:0000000000000000 $t
     /tmp/ccEzGk5p.s:2269   .text.TIM_ClearOC2Ref:0000000000000000 TIM_ClearOC2Ref
     /tmp/ccEzGk5p.s:2297   .text.TIM_ClearOC3Ref:0000000000000000 $t
     /tmp/ccEzGk5p.s:2304   .text.TIM_ClearOC3Ref:0000000000000000 TIM_ClearOC3Ref
     /tmp/ccEzGk5p.s:2330   .text.TIM_ClearOC4Ref:0000000000000000 $t
     /tmp/ccEzGk5p.s:2337   .text.TIM_ClearOC4Ref:0000000000000000 TIM_ClearOC4Ref
     /tmp/ccEzGk5p.s:2365   .text.TIM_OC1PolarityConfig:0000000000000000 $t
     /tmp/ccEzGk5p.s:2372   .text.TIM_OC1PolarityConfig:0000000000000000 TIM_OC1PolarityConfig
     /tmp/ccEzGk5p.s:2398   .text.TIM_OC1NPolarityConfig:0000000000000000 $t
     /tmp/ccEzGk5p.s:2405   .text.TIM_OC1NPolarityConfig:0000000000000000 TIM_OC1NPolarityConfig
     /tmp/ccEzGk5p.s:2431   .text.TIM_OC2PolarityConfig:0000000000000000 $t
     /tmp/ccEzGk5p.s:2438   .text.TIM_OC2PolarityConfig:0000000000000000 TIM_OC2PolarityConfig
     /tmp/ccEzGk5p.s:2467   .text.TIM_OC2NPolarityConfig:0000000000000000 $t
     /tmp/ccEzGk5p.s:2474   .text.TIM_OC2NPolarityConfig:0000000000000000 TIM_OC2NPolarityConfig
     /tmp/ccEzGk5p.s:2503   .text.TIM_OC3PolarityConfig:0000000000000000 $t
     /tmp/ccEzGk5p.s:2510   .text.TIM_OC3PolarityConfig:0000000000000000 TIM_OC3PolarityConfig
     /tmp/ccEzGk5p.s:2539   .text.TIM_OC3NPolarityConfig:0000000000000000 $t
     /tmp/ccEzGk5p.s:2546   .text.TIM_OC3NPolarityConfig:0000000000000000 TIM_OC3NPolarityConfig
     /tmp/ccEzGk5p.s:2575   .text.TIM_OC4PolarityConfig:0000000000000000 $t
     /tmp/ccEzGk5p.s:2582   .text.TIM_OC4PolarityConfig:0000000000000000 TIM_OC4PolarityConfig
     /tmp/ccEzGk5p.s:2611   .text.TIM_CCxCmd:0000000000000000 $t
     /tmp/ccEzGk5p.s:2618   .text.TIM_CCxCmd:0000000000000000 TIM_CCxCmd
ARM GAS  /tmp/ccEzGk5p.s 			page 143


     /tmp/ccEzGk5p.s:2658   .text.TIM_CCxNCmd:0000000000000000 $t
     /tmp/ccEzGk5p.s:2665   .text.TIM_CCxNCmd:0000000000000000 TIM_CCxNCmd
     /tmp/ccEzGk5p.s:2705   .text.TIM_ICStructInit:0000000000000000 $t
     /tmp/ccEzGk5p.s:2712   .text.TIM_ICStructInit:0000000000000000 TIM_ICStructInit
     /tmp/ccEzGk5p.s:2738   .text.TIM_GetCapture1:0000000000000000 $t
     /tmp/ccEzGk5p.s:2745   .text.TIM_GetCapture1:0000000000000000 TIM_GetCapture1
     /tmp/ccEzGk5p.s:2762   .text.TIM_GetCapture2:0000000000000000 $t
     /tmp/ccEzGk5p.s:2769   .text.TIM_GetCapture2:0000000000000000 TIM_GetCapture2
     /tmp/ccEzGk5p.s:2786   .text.TIM_GetCapture3:0000000000000000 $t
     /tmp/ccEzGk5p.s:2793   .text.TIM_GetCapture3:0000000000000000 TIM_GetCapture3
     /tmp/ccEzGk5p.s:2810   .text.TIM_GetCapture4:0000000000000000 $t
     /tmp/ccEzGk5p.s:2817   .text.TIM_GetCapture4:0000000000000000 TIM_GetCapture4
     /tmp/ccEzGk5p.s:2834   .text.TIM_SetIC1Prescaler:0000000000000000 $t
     /tmp/ccEzGk5p.s:2841   .text.TIM_SetIC1Prescaler:0000000000000000 TIM_SetIC1Prescaler
     /tmp/ccEzGk5p.s:2866   .text.TIM_SetIC2Prescaler:0000000000000000 $t
     /tmp/ccEzGk5p.s:2873   .text.TIM_SetIC2Prescaler:0000000000000000 TIM_SetIC2Prescaler
     /tmp/ccEzGk5p.s:2900   .text.TIM_PWMIConfig:0000000000000000 $t
     /tmp/ccEzGk5p.s:2907   .text.TIM_PWMIConfig:0000000000000000 TIM_PWMIConfig
     /tmp/ccEzGk5p.s:3011   .text.TIM_SetIC3Prescaler:0000000000000000 $t
     /tmp/ccEzGk5p.s:3018   .text.TIM_SetIC3Prescaler:0000000000000000 TIM_SetIC3Prescaler
     /tmp/ccEzGk5p.s:3043   .text.TIM_SetIC4Prescaler:0000000000000000 $t
     /tmp/ccEzGk5p.s:3050   .text.TIM_SetIC4Prescaler:0000000000000000 TIM_SetIC4Prescaler
     /tmp/ccEzGk5p.s:3077   .text.TIM_ICInit:0000000000000000 $t
     /tmp/ccEzGk5p.s:3084   .text.TIM_ICInit:0000000000000000 TIM_ICInit
     /tmp/ccEzGk5p.s:3173   .text.TIM_BDTRConfig:0000000000000000 $t
     /tmp/ccEzGk5p.s:3180   .text.TIM_BDTRConfig:0000000000000000 TIM_BDTRConfig
     /tmp/ccEzGk5p.s:3228   .text.TIM_BDTRStructInit:0000000000000000 $t
     /tmp/ccEzGk5p.s:3235   .text.TIM_BDTRStructInit:0000000000000000 TIM_BDTRStructInit
     /tmp/ccEzGk5p.s:3264   .text.TIM_CtrlPWMOutputs:0000000000000000 $t
     /tmp/ccEzGk5p.s:3271   .text.TIM_CtrlPWMOutputs:0000000000000000 TIM_CtrlPWMOutputs
     /tmp/ccEzGk5p.s:3297   .text.TIM_SelectCOM:0000000000000000 $t
     /tmp/ccEzGk5p.s:3304   .text.TIM_SelectCOM:0000000000000000 TIM_SelectCOM
     /tmp/ccEzGk5p.s:3332   .text.TIM_CCPreloadControl:0000000000000000 $t
     /tmp/ccEzGk5p.s:3339   .text.TIM_CCPreloadControl:0000000000000000 TIM_CCPreloadControl
     /tmp/ccEzGk5p.s:3367   .text.TIM_ITConfig:0000000000000000 $t
     /tmp/ccEzGk5p.s:3374   .text.TIM_ITConfig:0000000000000000 TIM_ITConfig
     /tmp/ccEzGk5p.s:3403   .text.TIM_GenerateEvent:0000000000000000 $t
     /tmp/ccEzGk5p.s:3410   .text.TIM_GenerateEvent:0000000000000000 TIM_GenerateEvent
     /tmp/ccEzGk5p.s:3426   .text.TIM_GetFlagStatus:0000000000000000 $t
     /tmp/ccEzGk5p.s:3433   .text.TIM_GetFlagStatus:0000000000000000 TIM_GetFlagStatus
     /tmp/ccEzGk5p.s:3460   .text.TIM_ClearFlag:0000000000000000 $t
     /tmp/ccEzGk5p.s:3467   .text.TIM_ClearFlag:0000000000000000 TIM_ClearFlag
     /tmp/ccEzGk5p.s:3486   .text.TIM_GetITStatus:0000000000000000 $t
     /tmp/ccEzGk5p.s:3493   .text.TIM_GetITStatus:0000000000000000 TIM_GetITStatus
     /tmp/ccEzGk5p.s:3533   .text.TIM_ClearITPendingBit:0000000000000000 $t
     /tmp/ccEzGk5p.s:3540   .text.TIM_ClearITPendingBit:0000000000000000 TIM_ClearITPendingBit
     /tmp/ccEzGk5p.s:3559   .text.TIM_DMAConfig:0000000000000000 $t
     /tmp/ccEzGk5p.s:3566   .text.TIM_DMAConfig:0000000000000000 TIM_DMAConfig
     /tmp/ccEzGk5p.s:3584   .text.TIM_DMACmd:0000000000000000 $t
     /tmp/ccEzGk5p.s:3591   .text.TIM_DMACmd:0000000000000000 TIM_DMACmd
     /tmp/ccEzGk5p.s:3620   .text.TIM_SelectCCDMA:0000000000000000 $t
     /tmp/ccEzGk5p.s:3627   .text.TIM_SelectCCDMA:0000000000000000 TIM_SelectCCDMA
     /tmp/ccEzGk5p.s:3655   .text.TIM_InternalClockConfig:0000000000000000 $t
     /tmp/ccEzGk5p.s:3662   .text.TIM_InternalClockConfig:0000000000000000 TIM_InternalClockConfig
     /tmp/ccEzGk5p.s:3682   .text.TIM_SelectInputTrigger:0000000000000000 $t
     /tmp/ccEzGk5p.s:3689   .text.TIM_SelectInputTrigger:0000000000000000 TIM_SelectInputTrigger
     /tmp/ccEzGk5p.s:3715   .text.TIM_ITRxExternalClockConfig:0000000000000000 $t
ARM GAS  /tmp/ccEzGk5p.s 			page 144


     /tmp/ccEzGk5p.s:3722   .text.TIM_ITRxExternalClockConfig:0000000000000000 TIM_ITRxExternalClockConfig
     /tmp/ccEzGk5p.s:3748   .text.TIM_TIxExternalClockConfig:0000000000000000 $t
     /tmp/ccEzGk5p.s:3755   .text.TIM_TIxExternalClockConfig:0000000000000000 TIM_TIxExternalClockConfig
     /tmp/ccEzGk5p.s:3805   .text.TIM_SelectOutputTrigger:0000000000000000 $t
     /tmp/ccEzGk5p.s:3812   .text.TIM_SelectOutputTrigger:0000000000000000 TIM_SelectOutputTrigger
     /tmp/ccEzGk5p.s:3837   .text.TIM_SelectSlaveMode:0000000000000000 $t
     /tmp/ccEzGk5p.s:3844   .text.TIM_SelectSlaveMode:0000000000000000 TIM_SelectSlaveMode
     /tmp/ccEzGk5p.s:3869   .text.TIM_SelectMasterSlaveMode:0000000000000000 $t
     /tmp/ccEzGk5p.s:3876   .text.TIM_SelectMasterSlaveMode:0000000000000000 TIM_SelectMasterSlaveMode
     /tmp/ccEzGk5p.s:3901   .text.TIM_ETRConfig:0000000000000000 $t
     /tmp/ccEzGk5p.s:3908   .text.TIM_ETRConfig:0000000000000000 TIM_ETRConfig
     /tmp/ccEzGk5p.s:3947   .text.TIM_ETRClockMode1Config:0000000000000000 $t
     /tmp/ccEzGk5p.s:3954   .text.TIM_ETRClockMode1Config:0000000000000000 TIM_ETRClockMode1Config
     /tmp/ccEzGk5p.s:3985   .text.TIM_ETRClockMode2Config:0000000000000000 $t
     /tmp/ccEzGk5p.s:3992   .text.TIM_ETRClockMode2Config:0000000000000000 TIM_ETRClockMode2Config
     /tmp/ccEzGk5p.s:4018   .text.TIM_EncoderInterfaceConfig:0000000000000000 $t
     /tmp/ccEzGk5p.s:4025   .text.TIM_EncoderInterfaceConfig:0000000000000000 TIM_EncoderInterfaceConfig
     /tmp/ccEzGk5p.s:4098   .text.TIM_SelectHallSensor:0000000000000000 $t
     /tmp/ccEzGk5p.s:4105   .text.TIM_SelectHallSensor:0000000000000000 TIM_SelectHallSensor
     /tmp/ccEzGk5p.s:4133   .text.TIM_RemapConfig:0000000000000000 $t
     /tmp/ccEzGk5p.s:4140   .text.TIM_RemapConfig:0000000000000000 TIM_RemapConfig

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
RCC_APB2PeriphResetCmd
