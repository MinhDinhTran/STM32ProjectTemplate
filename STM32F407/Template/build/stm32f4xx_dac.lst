ARM GAS  /tmp/cctx72nX.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_dac.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.DAC_DeInit,"ax",%progbits
  18              		.align	1
  19              		.global	DAC_DeInit
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	DAC_DeInit:
  26              	.LFB112:
  27              		.file 1 "./FWLIB/src/stm32f4xx_dac.c"
   1:./FWLIB/src/stm32f4xx_dac.c **** /**
   2:./FWLIB/src/stm32f4xx_dac.c ****   ******************************************************************************
   3:./FWLIB/src/stm32f4xx_dac.c ****   * @file    stm32f4xx_dac.c
   4:./FWLIB/src/stm32f4xx_dac.c ****   * @author  MCD Application Team
   5:./FWLIB/src/stm32f4xx_dac.c ****   * @version V1.4.0
   6:./FWLIB/src/stm32f4xx_dac.c ****   * @date    04-August-2014
   7:./FWLIB/src/stm32f4xx_dac.c ****    * @brief   This file provides firmware functions to manage the following 
   8:./FWLIB/src/stm32f4xx_dac.c ****   *          functionalities of the Digital-to-Analog Converter (DAC) peripheral: 
   9:./FWLIB/src/stm32f4xx_dac.c ****   *           + DAC channels configuration: trigger, output buffer, data format
  10:./FWLIB/src/stm32f4xx_dac.c ****   *           + DMA management      
  11:./FWLIB/src/stm32f4xx_dac.c ****   *           + Interrupts and flags management
  12:./FWLIB/src/stm32f4xx_dac.c ****   *
  13:./FWLIB/src/stm32f4xx_dac.c ****  @verbatim      
  14:./FWLIB/src/stm32f4xx_dac.c ****  ===============================================================================
  15:./FWLIB/src/stm32f4xx_dac.c ****                       ##### DAC Peripheral features #####
  16:./FWLIB/src/stm32f4xx_dac.c ****  ===============================================================================
  17:./FWLIB/src/stm32f4xx_dac.c ****     [..]        
  18:./FWLIB/src/stm32f4xx_dac.c ****       *** DAC Channels ***
  19:./FWLIB/src/stm32f4xx_dac.c ****       ====================  
  20:./FWLIB/src/stm32f4xx_dac.c ****     [..]  
  21:./FWLIB/src/stm32f4xx_dac.c ****     The device integrates two 12-bit Digital Analog Converters that can 
  22:./FWLIB/src/stm32f4xx_dac.c ****     be used independently or simultaneously (dual mode):
  23:./FWLIB/src/stm32f4xx_dac.c ****       (#) DAC channel1 with DAC_OUT1 (PA4) as output
  24:./FWLIB/src/stm32f4xx_dac.c ****       (#) DAC channel2 with DAC_OUT2 (PA5) as output
  25:./FWLIB/src/stm32f4xx_dac.c ****   
  26:./FWLIB/src/stm32f4xx_dac.c ****       *** DAC Triggers ***
  27:./FWLIB/src/stm32f4xx_dac.c ****       ====================
  28:./FWLIB/src/stm32f4xx_dac.c ****     [..]
  29:./FWLIB/src/stm32f4xx_dac.c ****     Digital to Analog conversion can be non-triggered using DAC_Trigger_None
  30:./FWLIB/src/stm32f4xx_dac.c ****     and DAC_OUT1/DAC_OUT2 is available once writing to DHRx register 
  31:./FWLIB/src/stm32f4xx_dac.c ****     using DAC_SetChannel1Data() / DAC_SetChannel2Data() functions.
ARM GAS  /tmp/cctx72nX.s 			page 2


  32:./FWLIB/src/stm32f4xx_dac.c ****     [..] 
  33:./FWLIB/src/stm32f4xx_dac.c ****     Digital to Analog conversion can be triggered by:
  34:./FWLIB/src/stm32f4xx_dac.c ****       (#) External event: EXTI Line 9 (any GPIOx_Pin9) using DAC_Trigger_Ext_IT9.
  35:./FWLIB/src/stm32f4xx_dac.c ****           The used pin (GPIOx_Pin9) must be configured in input mode.
  36:./FWLIB/src/stm32f4xx_dac.c ****   
  37:./FWLIB/src/stm32f4xx_dac.c ****       (#) Timers TRGO: TIM2, TIM4, TIM5, TIM6, TIM7 and TIM8 
  38:./FWLIB/src/stm32f4xx_dac.c ****           (DAC_Trigger_T2_TRGO, DAC_Trigger_T4_TRGO...)
  39:./FWLIB/src/stm32f4xx_dac.c ****           The timer TRGO event should be selected using TIM_SelectOutputTrigger()
  40:./FWLIB/src/stm32f4xx_dac.c ****   
  41:./FWLIB/src/stm32f4xx_dac.c ****       (#) Software using DAC_Trigger_Software
  42:./FWLIB/src/stm32f4xx_dac.c ****   
  43:./FWLIB/src/stm32f4xx_dac.c ****       *** DAC Buffer mode feature ***
  44:./FWLIB/src/stm32f4xx_dac.c ****       =============================== 
  45:./FWLIB/src/stm32f4xx_dac.c ****       [..] 
  46:./FWLIB/src/stm32f4xx_dac.c ****       Each DAC channel integrates an output buffer that can be used to 
  47:./FWLIB/src/stm32f4xx_dac.c ****       reduce the output impedance, and to drive external loads directly
  48:./FWLIB/src/stm32f4xx_dac.c ****       without having to add an external operational amplifier.
  49:./FWLIB/src/stm32f4xx_dac.c ****       To enable, the output buffer use  
  50:./FWLIB/src/stm32f4xx_dac.c ****       DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
  51:./FWLIB/src/stm32f4xx_dac.c ****       [..]           
  52:./FWLIB/src/stm32f4xx_dac.c ****       (@) Refer to the device datasheet for more details about output 
  53:./FWLIB/src/stm32f4xx_dac.c ****           impedance value with and without output buffer.
  54:./FWLIB/src/stm32f4xx_dac.c ****             
  55:./FWLIB/src/stm32f4xx_dac.c ****        *** DAC wave generation feature ***
  56:./FWLIB/src/stm32f4xx_dac.c ****        =================================== 
  57:./FWLIB/src/stm32f4xx_dac.c ****        [..]     
  58:./FWLIB/src/stm32f4xx_dac.c ****        Both DAC channels can be used to generate
  59:./FWLIB/src/stm32f4xx_dac.c ****          (#) Noise wave using DAC_WaveGeneration_Noise
  60:./FWLIB/src/stm32f4xx_dac.c ****          (#) Triangle wave using DAC_WaveGeneration_Triangle
  61:./FWLIB/src/stm32f4xx_dac.c ****           
  62:./FWLIB/src/stm32f4xx_dac.c ****           -@-  Wave generation can be disabled using DAC_WaveGeneration_None
  63:./FWLIB/src/stm32f4xx_dac.c ****   
  64:./FWLIB/src/stm32f4xx_dac.c ****        *** DAC data format ***
  65:./FWLIB/src/stm32f4xx_dac.c ****        =======================
  66:./FWLIB/src/stm32f4xx_dac.c ****        [..]   
  67:./FWLIB/src/stm32f4xx_dac.c ****        The DAC data format can be:
  68:./FWLIB/src/stm32f4xx_dac.c ****          (#) 8-bit right alignment using DAC_Align_8b_R
  69:./FWLIB/src/stm32f4xx_dac.c ****          (#) 12-bit left alignment using DAC_Align_12b_L
  70:./FWLIB/src/stm32f4xx_dac.c ****          (#) 12-bit right alignment using DAC_Align_12b_R
  71:./FWLIB/src/stm32f4xx_dac.c ****   
  72:./FWLIB/src/stm32f4xx_dac.c ****        *** DAC data value to voltage correspondence ***  
  73:./FWLIB/src/stm32f4xx_dac.c ****        ================================================ 
  74:./FWLIB/src/stm32f4xx_dac.c ****        [..] 
  75:./FWLIB/src/stm32f4xx_dac.c ****        The analog output voltage on each DAC channel pin is determined
  76:./FWLIB/src/stm32f4xx_dac.c ****        by the following equation: 
  77:./FWLIB/src/stm32f4xx_dac.c ****        DAC_OUTx = VREF+ * DOR / 4095
  78:./FWLIB/src/stm32f4xx_dac.c ****        with  DOR is the Data Output Register
  79:./FWLIB/src/stm32f4xx_dac.c ****           VEF+ is the input voltage reference (refer to the device datasheet)
  80:./FWLIB/src/stm32f4xx_dac.c ****         e.g. To set DAC_OUT1 to 0.7V, use
  81:./FWLIB/src/stm32f4xx_dac.c ****           DAC_SetChannel1Data(DAC_Align_12b_R, 868);
  82:./FWLIB/src/stm32f4xx_dac.c ****           Assuming that VREF+ = 3.3V, DAC_OUT1 = (3.3 * 868) / 4095 = 0.7V
  83:./FWLIB/src/stm32f4xx_dac.c ****   
  84:./FWLIB/src/stm32f4xx_dac.c ****        *** DMA requests  ***
  85:./FWLIB/src/stm32f4xx_dac.c ****        =====================
  86:./FWLIB/src/stm32f4xx_dac.c ****        [..]    
  87:./FWLIB/src/stm32f4xx_dac.c ****        A DMA1 request can be generated when an external trigger (but not
  88:./FWLIB/src/stm32f4xx_dac.c ****        a software trigger) occurs if DMA1 requests are enabled using
ARM GAS  /tmp/cctx72nX.s 			page 3


  89:./FWLIB/src/stm32f4xx_dac.c ****        DAC_DMACmd()
  90:./FWLIB/src/stm32f4xx_dac.c ****        [..]
  91:./FWLIB/src/stm32f4xx_dac.c ****        DMA1 requests are mapped as following:
  92:./FWLIB/src/stm32f4xx_dac.c ****          (#) DAC channel1 : mapped on DMA1 Stream5 channel7 which must be 
  93:./FWLIB/src/stm32f4xx_dac.c ****              already configured
  94:./FWLIB/src/stm32f4xx_dac.c ****          (#) DAC channel2 : mapped on DMA1 Stream6 channel7 which must be 
  95:./FWLIB/src/stm32f4xx_dac.c ****              already configured
  96:./FWLIB/src/stm32f4xx_dac.c ****   
  97:./FWLIB/src/stm32f4xx_dac.c ****       
  98:./FWLIB/src/stm32f4xx_dac.c ****                       ##### How to use this driver #####
  99:./FWLIB/src/stm32f4xx_dac.c ****  ===============================================================================
 100:./FWLIB/src/stm32f4xx_dac.c ****     [..]          
 101:./FWLIB/src/stm32f4xx_dac.c ****       (+) DAC APB clock must be enabled to get write access to DAC
 102:./FWLIB/src/stm32f4xx_dac.c ****           registers using
 103:./FWLIB/src/stm32f4xx_dac.c ****           RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE)
 104:./FWLIB/src/stm32f4xx_dac.c ****       (+) Configure DAC_OUTx (DAC_OUT1: PA4, DAC_OUT2: PA5) in analog mode.
 105:./FWLIB/src/stm32f4xx_dac.c ****       (+) Configure the DAC channel using DAC_Init() function
 106:./FWLIB/src/stm32f4xx_dac.c ****       (+) Enable the DAC channel using DAC_Cmd() function
 107:./FWLIB/src/stm32f4xx_dac.c ****    
 108:./FWLIB/src/stm32f4xx_dac.c ****  @endverbatim    
 109:./FWLIB/src/stm32f4xx_dac.c ****   ******************************************************************************
 110:./FWLIB/src/stm32f4xx_dac.c ****   * @attention
 111:./FWLIB/src/stm32f4xx_dac.c ****   *
 112:./FWLIB/src/stm32f4xx_dac.c ****   * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
 113:./FWLIB/src/stm32f4xx_dac.c ****   *
 114:./FWLIB/src/stm32f4xx_dac.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
 115:./FWLIB/src/stm32f4xx_dac.c ****   * You may not use this file except in compliance with the License.
 116:./FWLIB/src/stm32f4xx_dac.c ****   * You may obtain a copy of the License at:
 117:./FWLIB/src/stm32f4xx_dac.c ****   *
 118:./FWLIB/src/stm32f4xx_dac.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
 119:./FWLIB/src/stm32f4xx_dac.c ****   *
 120:./FWLIB/src/stm32f4xx_dac.c ****   * Unless required by applicable law or agreed to in writing, software 
 121:./FWLIB/src/stm32f4xx_dac.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
 122:./FWLIB/src/stm32f4xx_dac.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 123:./FWLIB/src/stm32f4xx_dac.c ****   * See the License for the specific language governing permissions and
 124:./FWLIB/src/stm32f4xx_dac.c ****   * limitations under the License.
 125:./FWLIB/src/stm32f4xx_dac.c ****   *
 126:./FWLIB/src/stm32f4xx_dac.c ****   ******************************************************************************  
 127:./FWLIB/src/stm32f4xx_dac.c ****   */ 
 128:./FWLIB/src/stm32f4xx_dac.c **** 
 129:./FWLIB/src/stm32f4xx_dac.c **** 
 130:./FWLIB/src/stm32f4xx_dac.c **** /* Includes ------------------------------------------------------------------*/
 131:./FWLIB/src/stm32f4xx_dac.c **** #include "stm32f4xx_dac.h"
 132:./FWLIB/src/stm32f4xx_dac.c **** #include "stm32f4xx_rcc.h"
 133:./FWLIB/src/stm32f4xx_dac.c **** 
 134:./FWLIB/src/stm32f4xx_dac.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 135:./FWLIB/src/stm32f4xx_dac.c ****   * @{
 136:./FWLIB/src/stm32f4xx_dac.c ****   */
 137:./FWLIB/src/stm32f4xx_dac.c **** 
 138:./FWLIB/src/stm32f4xx_dac.c **** /** @defgroup DAC 
 139:./FWLIB/src/stm32f4xx_dac.c ****   * @brief DAC driver modules
 140:./FWLIB/src/stm32f4xx_dac.c ****   * @{
 141:./FWLIB/src/stm32f4xx_dac.c ****   */ 
 142:./FWLIB/src/stm32f4xx_dac.c **** 
 143:./FWLIB/src/stm32f4xx_dac.c **** /* Private typedef -----------------------------------------------------------*/
 144:./FWLIB/src/stm32f4xx_dac.c **** /* Private define ------------------------------------------------------------*/
 145:./FWLIB/src/stm32f4xx_dac.c **** 
ARM GAS  /tmp/cctx72nX.s 			page 4


 146:./FWLIB/src/stm32f4xx_dac.c **** /* CR register Mask */
 147:./FWLIB/src/stm32f4xx_dac.c **** #define CR_CLEAR_MASK              ((uint32_t)0x00000FFE)
 148:./FWLIB/src/stm32f4xx_dac.c **** 
 149:./FWLIB/src/stm32f4xx_dac.c **** /* DAC Dual Channels SWTRIG masks */
 150:./FWLIB/src/stm32f4xx_dac.c **** #define DUAL_SWTRIG_SET            ((uint32_t)0x00000003)
 151:./FWLIB/src/stm32f4xx_dac.c **** #define DUAL_SWTRIG_RESET          ((uint32_t)0xFFFFFFFC)
 152:./FWLIB/src/stm32f4xx_dac.c **** 
 153:./FWLIB/src/stm32f4xx_dac.c **** /* DHR registers offsets */
 154:./FWLIB/src/stm32f4xx_dac.c **** #define DHR12R1_OFFSET             ((uint32_t)0x00000008)
 155:./FWLIB/src/stm32f4xx_dac.c **** #define DHR12R2_OFFSET             ((uint32_t)0x00000014)
 156:./FWLIB/src/stm32f4xx_dac.c **** #define DHR12RD_OFFSET             ((uint32_t)0x00000020)
 157:./FWLIB/src/stm32f4xx_dac.c **** 
 158:./FWLIB/src/stm32f4xx_dac.c **** /* DOR register offset */
 159:./FWLIB/src/stm32f4xx_dac.c **** #define DOR_OFFSET                 ((uint32_t)0x0000002C)
 160:./FWLIB/src/stm32f4xx_dac.c **** 
 161:./FWLIB/src/stm32f4xx_dac.c **** /* Private macro -------------------------------------------------------------*/
 162:./FWLIB/src/stm32f4xx_dac.c **** /* Private variables ---------------------------------------------------------*/
 163:./FWLIB/src/stm32f4xx_dac.c **** /* Private function prototypes -----------------------------------------------*/
 164:./FWLIB/src/stm32f4xx_dac.c **** /* Private functions ---------------------------------------------------------*/
 165:./FWLIB/src/stm32f4xx_dac.c **** 
 166:./FWLIB/src/stm32f4xx_dac.c **** /** @defgroup DAC_Private_Functions
 167:./FWLIB/src/stm32f4xx_dac.c ****   * @{
 168:./FWLIB/src/stm32f4xx_dac.c ****   */
 169:./FWLIB/src/stm32f4xx_dac.c **** 
 170:./FWLIB/src/stm32f4xx_dac.c **** /** @defgroup DAC_Group1 DAC channels configuration
 171:./FWLIB/src/stm32f4xx_dac.c ****  *  @brief   DAC channels configuration: trigger, output buffer, data format 
 172:./FWLIB/src/stm32f4xx_dac.c ****  *
 173:./FWLIB/src/stm32f4xx_dac.c **** @verbatim   
 174:./FWLIB/src/stm32f4xx_dac.c ****  ===============================================================================
 175:./FWLIB/src/stm32f4xx_dac.c ****    ##### DAC channels configuration: trigger, output buffer, data format #####
 176:./FWLIB/src/stm32f4xx_dac.c ****  ===============================================================================  
 177:./FWLIB/src/stm32f4xx_dac.c **** 
 178:./FWLIB/src/stm32f4xx_dac.c **** @endverbatim
 179:./FWLIB/src/stm32f4xx_dac.c ****   * @{
 180:./FWLIB/src/stm32f4xx_dac.c ****   */
 181:./FWLIB/src/stm32f4xx_dac.c **** 
 182:./FWLIB/src/stm32f4xx_dac.c **** /**
 183:./FWLIB/src/stm32f4xx_dac.c ****   * @brief  Deinitializes the DAC peripheral registers to their default reset values.
 184:./FWLIB/src/stm32f4xx_dac.c ****   * @param  None
 185:./FWLIB/src/stm32f4xx_dac.c ****   * @retval None
 186:./FWLIB/src/stm32f4xx_dac.c ****   */
 187:./FWLIB/src/stm32f4xx_dac.c **** void DAC_DeInit(void)
 188:./FWLIB/src/stm32f4xx_dac.c **** {
  28              		.loc 1 188 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 08B5     		push	{r3, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 3, -8
  36              		.cfi_offset 14, -4
 189:./FWLIB/src/stm32f4xx_dac.c ****   /* Enable DAC reset state */
 190:./FWLIB/src/stm32f4xx_dac.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
  37              		.loc 1 190 0
  38 0002 0121     		movs	r1, #1
  39 0004 4FF00050 		mov	r0, #536870912
ARM GAS  /tmp/cctx72nX.s 			page 5


  40 0008 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  41              	.LVL0:
 191:./FWLIB/src/stm32f4xx_dac.c ****   /* Release DAC from reset state */
 192:./FWLIB/src/stm32f4xx_dac.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
  42              		.loc 1 192 0
  43 000c 0021     		movs	r1, #0
  44 000e 4FF00050 		mov	r0, #536870912
  45 0012 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  46              	.LVL1:
 193:./FWLIB/src/stm32f4xx_dac.c **** }
  47              		.loc 1 193 0
  48 0016 08BD     		pop	{r3, pc}
  49              		.cfi_endproc
  50              	.LFE112:
  52              		.section	.text.DAC_Init,"ax",%progbits
  53              		.align	1
  54              		.global	DAC_Init
  55              		.syntax unified
  56              		.thumb
  57              		.thumb_func
  58              		.fpu fpv4-sp-d16
  60              	DAC_Init:
  61              	.LFB113:
 194:./FWLIB/src/stm32f4xx_dac.c **** 
 195:./FWLIB/src/stm32f4xx_dac.c **** /**
 196:./FWLIB/src/stm32f4xx_dac.c ****   * @brief  Initializes the DAC peripheral according to the specified parameters
 197:./FWLIB/src/stm32f4xx_dac.c ****   *         in the DAC_InitStruct.
 198:./FWLIB/src/stm32f4xx_dac.c ****   * @param  DAC_Channel: the selected DAC channel. 
 199:./FWLIB/src/stm32f4xx_dac.c ****   *          This parameter can be one of the following values:
 200:./FWLIB/src/stm32f4xx_dac.c ****   *            @arg DAC_Channel_1: DAC Channel1 selected
 201:./FWLIB/src/stm32f4xx_dac.c ****   *            @arg DAC_Channel_2: DAC Channel2 selected
 202:./FWLIB/src/stm32f4xx_dac.c ****   * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
 203:./FWLIB/src/stm32f4xx_dac.c ****   *         the configuration information for the  specified DAC channel.
 204:./FWLIB/src/stm32f4xx_dac.c ****   * @retval None
 205:./FWLIB/src/stm32f4xx_dac.c ****   */
 206:./FWLIB/src/stm32f4xx_dac.c **** void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
 207:./FWLIB/src/stm32f4xx_dac.c **** {
  62              		.loc 1 207 0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 0, uses_anonymous_args = 0
  66              		@ link register save eliminated.
  67              	.LVL2:
  68 0000 30B4     		push	{r4, r5}
  69              	.LCFI1:
  70              		.cfi_def_cfa_offset 8
  71              		.cfi_offset 4, -8
  72              		.cfi_offset 5, -4
  73              	.LVL3:
 208:./FWLIB/src/stm32f4xx_dac.c ****   uint32_t tmpreg1 = 0, tmpreg2 = 0;
 209:./FWLIB/src/stm32f4xx_dac.c **** 
 210:./FWLIB/src/stm32f4xx_dac.c ****   /* Check the DAC parameters */
 211:./FWLIB/src/stm32f4xx_dac.c ****   assert_param(IS_DAC_TRIGGER(DAC_InitStruct->DAC_Trigger));
 212:./FWLIB/src/stm32f4xx_dac.c ****   assert_param(IS_DAC_GENERATE_WAVE(DAC_InitStruct->DAC_WaveGeneration));
 213:./FWLIB/src/stm32f4xx_dac.c ****   assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitu
 214:./FWLIB/src/stm32f4xx_dac.c ****   assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));
 215:./FWLIB/src/stm32f4xx_dac.c **** 
ARM GAS  /tmp/cctx72nX.s 			page 6


 216:./FWLIB/src/stm32f4xx_dac.c **** /*---------------------------- DAC CR Configuration --------------------------*/
 217:./FWLIB/src/stm32f4xx_dac.c ****   /* Get the DAC CR value */
 218:./FWLIB/src/stm32f4xx_dac.c ****   tmpreg1 = DAC->CR;
  74              		.loc 1 218 0
  75 0002 0A4C     		ldr	r4, .L5
  76 0004 2268     		ldr	r2, [r4]
  77              	.LVL4:
 219:./FWLIB/src/stm32f4xx_dac.c ****   /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
 220:./FWLIB/src/stm32f4xx_dac.c ****   tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
  78              		.loc 1 220 0
  79 0006 40F6FE73 		movw	r3, #4094
  80 000a 8340     		lsls	r3, r3, r0
  81 000c 22EA0302 		bic	r2, r2, r3
  82              	.LVL5:
 221:./FWLIB/src/stm32f4xx_dac.c ****   /* Configure for the selected DAC channel: buffer output, trigger, 
 222:./FWLIB/src/stm32f4xx_dac.c ****      wave generation, mask/amplitude for wave generation */
 223:./FWLIB/src/stm32f4xx_dac.c ****   /* Set TSELx and TENx bits according to DAC_Trigger value */
 224:./FWLIB/src/stm32f4xx_dac.c ****   /* Set WAVEx bits according to DAC_WaveGeneration value */
 225:./FWLIB/src/stm32f4xx_dac.c ****   /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
 226:./FWLIB/src/stm32f4xx_dac.c ****   /* Set BOFFx bit according to DAC_OutputBuffer value */   
 227:./FWLIB/src/stm32f4xx_dac.c ****   tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
  83              		.loc 1 227 0
  84 0010 0B68     		ldr	r3, [r1]
  85 0012 4D68     		ldr	r5, [r1, #4]
  86 0014 2B43     		orrs	r3, r3, r5
 228:./FWLIB/src/stm32f4xx_dac.c ****              DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
  87              		.loc 1 228 0
  88 0016 8D68     		ldr	r5, [r1, #8]
 227:./FWLIB/src/stm32f4xx_dac.c ****              DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
  89              		.loc 1 227 0
  90 0018 2B43     		orrs	r3, r3, r5
 229:./FWLIB/src/stm32f4xx_dac.c ****              DAC_InitStruct->DAC_OutputBuffer);
  91              		.loc 1 229 0
  92 001a C968     		ldr	r1, [r1, #12]
  93              	.LVL6:
 227:./FWLIB/src/stm32f4xx_dac.c ****              DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
  94              		.loc 1 227 0
  95 001c 0B43     		orrs	r3, r3, r1
  96              	.LVL7:
 230:./FWLIB/src/stm32f4xx_dac.c ****   /* Calculate CR register value depending on DAC_Channel */
 231:./FWLIB/src/stm32f4xx_dac.c ****   tmpreg1 |= tmpreg2 << DAC_Channel;
  97              		.loc 1 231 0
  98 001e 03FA00F0 		lsl	r0, r3, r0
  99              	.LVL8:
 100 0022 1043     		orrs	r0, r0, r2
 101              	.LVL9:
 232:./FWLIB/src/stm32f4xx_dac.c ****   /* Write to DAC CR */
 233:./FWLIB/src/stm32f4xx_dac.c ****   DAC->CR = tmpreg1;
 102              		.loc 1 233 0
 103 0024 2060     		str	r0, [r4]
 234:./FWLIB/src/stm32f4xx_dac.c **** }
 104              		.loc 1 234 0
 105 0026 30BC     		pop	{r4, r5}
 106              	.LCFI2:
 107              		.cfi_restore 5
 108              		.cfi_restore 4
 109              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/cctx72nX.s 			page 7


 110 0028 7047     		bx	lr
 111              	.L6:
 112 002a 00BF     		.align	2
 113              	.L5:
 114 002c 00740040 		.word	1073771520
 115              		.cfi_endproc
 116              	.LFE113:
 118              		.section	.text.DAC_StructInit,"ax",%progbits
 119              		.align	1
 120              		.global	DAC_StructInit
 121              		.syntax unified
 122              		.thumb
 123              		.thumb_func
 124              		.fpu fpv4-sp-d16
 126              	DAC_StructInit:
 127              	.LFB114:
 235:./FWLIB/src/stm32f4xx_dac.c **** 
 236:./FWLIB/src/stm32f4xx_dac.c **** /**
 237:./FWLIB/src/stm32f4xx_dac.c ****   * @brief  Fills each DAC_InitStruct member with its default value.
 238:./FWLIB/src/stm32f4xx_dac.c ****   * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure which will 
 239:./FWLIB/src/stm32f4xx_dac.c ****   *         be initialized.
 240:./FWLIB/src/stm32f4xx_dac.c ****   * @retval None
 241:./FWLIB/src/stm32f4xx_dac.c ****   */
 242:./FWLIB/src/stm32f4xx_dac.c **** void DAC_StructInit(DAC_InitTypeDef* DAC_InitStruct)
 243:./FWLIB/src/stm32f4xx_dac.c **** {
 128              		.loc 1 243 0
 129              		.cfi_startproc
 130              		@ args = 0, pretend = 0, frame = 0
 131              		@ frame_needed = 0, uses_anonymous_args = 0
 132              		@ link register save eliminated.
 133              	.LVL10:
 244:./FWLIB/src/stm32f4xx_dac.c **** /*--------------- Reset DAC init structure parameters values -----------------*/
 245:./FWLIB/src/stm32f4xx_dac.c ****   /* Initialize the DAC_Trigger member */
 246:./FWLIB/src/stm32f4xx_dac.c ****   DAC_InitStruct->DAC_Trigger = DAC_Trigger_None;
 134              		.loc 1 246 0
 135 0000 0023     		movs	r3, #0
 136 0002 0360     		str	r3, [r0]
 247:./FWLIB/src/stm32f4xx_dac.c ****   /* Initialize the DAC_WaveGeneration member */
 248:./FWLIB/src/stm32f4xx_dac.c ****   DAC_InitStruct->DAC_WaveGeneration = DAC_WaveGeneration_None;
 137              		.loc 1 248 0
 138 0004 4360     		str	r3, [r0, #4]
 249:./FWLIB/src/stm32f4xx_dac.c ****   /* Initialize the DAC_LFSRUnmask_TriangleAmplitude member */
 250:./FWLIB/src/stm32f4xx_dac.c ****   DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude = DAC_LFSRUnmask_Bit0;
 139              		.loc 1 250 0
 140 0006 8360     		str	r3, [r0, #8]
 251:./FWLIB/src/stm32f4xx_dac.c ****   /* Initialize the DAC_OutputBuffer member */
 252:./FWLIB/src/stm32f4xx_dac.c ****   DAC_InitStruct->DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 141              		.loc 1 252 0
 142 0008 C360     		str	r3, [r0, #12]
 253:./FWLIB/src/stm32f4xx_dac.c **** }
 143              		.loc 1 253 0
 144 000a 7047     		bx	lr
 145              		.cfi_endproc
 146              	.LFE114:
 148              		.section	.text.DAC_Cmd,"ax",%progbits
 149              		.align	1
 150              		.global	DAC_Cmd
ARM GAS  /tmp/cctx72nX.s 			page 8


 151              		.syntax unified
 152              		.thumb
 153              		.thumb_func
 154              		.fpu fpv4-sp-d16
 156              	DAC_Cmd:
 157              	.LFB115:
 254:./FWLIB/src/stm32f4xx_dac.c **** 
 255:./FWLIB/src/stm32f4xx_dac.c **** /**
 256:./FWLIB/src/stm32f4xx_dac.c ****   * @brief  Enables or disables the specified DAC channel.
 257:./FWLIB/src/stm32f4xx_dac.c ****   * @param  DAC_Channel: The selected DAC channel. 
 258:./FWLIB/src/stm32f4xx_dac.c ****   *          This parameter can be one of the following values:
 259:./FWLIB/src/stm32f4xx_dac.c ****   *            @arg DAC_Channel_1: DAC Channel1 selected
 260:./FWLIB/src/stm32f4xx_dac.c ****   *            @arg DAC_Channel_2: DAC Channel2 selected
 261:./FWLIB/src/stm32f4xx_dac.c ****   * @param  NewState: new state of the DAC channel. 
 262:./FWLIB/src/stm32f4xx_dac.c ****   *          This parameter can be: ENABLE or DISABLE.
 263:./FWLIB/src/stm32f4xx_dac.c ****   * @note   When the DAC channel is enabled the trigger source can no more be modified.
 264:./FWLIB/src/stm32f4xx_dac.c ****   * @retval None
 265:./FWLIB/src/stm32f4xx_dac.c ****   */
 266:./FWLIB/src/stm32f4xx_dac.c **** void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
 267:./FWLIB/src/stm32f4xx_dac.c **** {
 158              		.loc 1 267 0
 159              		.cfi_startproc
 160              		@ args = 0, pretend = 0, frame = 0
 161              		@ frame_needed = 0, uses_anonymous_args = 0
 162              		@ link register save eliminated.
 163              	.LVL11:
 268:./FWLIB/src/stm32f4xx_dac.c ****   /* Check the parameters */
 269:./FWLIB/src/stm32f4xx_dac.c ****   assert_param(IS_DAC_CHANNEL(DAC_Channel));
 270:./FWLIB/src/stm32f4xx_dac.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 271:./FWLIB/src/stm32f4xx_dac.c **** 
 272:./FWLIB/src/stm32f4xx_dac.c ****   if (NewState != DISABLE)
 164              		.loc 1 272 0
 165 0000 41B9     		cbnz	r1, .L11
 273:./FWLIB/src/stm32f4xx_dac.c ****   {
 274:./FWLIB/src/stm32f4xx_dac.c ****     /* Enable the selected DAC channel */
 275:./FWLIB/src/stm32f4xx_dac.c ****     DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 276:./FWLIB/src/stm32f4xx_dac.c ****   }
 277:./FWLIB/src/stm32f4xx_dac.c ****   else
 278:./FWLIB/src/stm32f4xx_dac.c ****   {
 279:./FWLIB/src/stm32f4xx_dac.c ****     /* Disable the selected DAC channel */
 280:./FWLIB/src/stm32f4xx_dac.c ****     DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 166              		.loc 1 280 0
 167 0002 0849     		ldr	r1, .L12
 168              	.LVL12:
 169 0004 0B68     		ldr	r3, [r1]
 170 0006 0122     		movs	r2, #1
 171 0008 02FA00F0 		lsl	r0, r2, r0
 172              	.LVL13:
 173 000c 23EA0000 		bic	r0, r3, r0
 174 0010 0860     		str	r0, [r1]
 281:./FWLIB/src/stm32f4xx_dac.c ****   }
 282:./FWLIB/src/stm32f4xx_dac.c **** }
 175              		.loc 1 282 0
 176 0012 7047     		bx	lr
 177              	.LVL14:
 178              	.L11:
 275:./FWLIB/src/stm32f4xx_dac.c ****   }
ARM GAS  /tmp/cctx72nX.s 			page 9


 179              		.loc 1 275 0
 180 0014 0349     		ldr	r1, .L12
 181              	.LVL15:
 182 0016 0B68     		ldr	r3, [r1]
 183 0018 0122     		movs	r2, #1
 184 001a 02FA00F0 		lsl	r0, r2, r0
 185              	.LVL16:
 186 001e 1843     		orrs	r0, r0, r3
 187 0020 0860     		str	r0, [r1]
 188 0022 7047     		bx	lr
 189              	.L13:
 190              		.align	2
 191              	.L12:
 192 0024 00740040 		.word	1073771520
 193              		.cfi_endproc
 194              	.LFE115:
 196              		.section	.text.DAC_SoftwareTriggerCmd,"ax",%progbits
 197              		.align	1
 198              		.global	DAC_SoftwareTriggerCmd
 199              		.syntax unified
 200              		.thumb
 201              		.thumb_func
 202              		.fpu fpv4-sp-d16
 204              	DAC_SoftwareTriggerCmd:
 205              	.LFB116:
 283:./FWLIB/src/stm32f4xx_dac.c **** 
 284:./FWLIB/src/stm32f4xx_dac.c **** /**
 285:./FWLIB/src/stm32f4xx_dac.c ****   * @brief  Enables or disables the selected DAC channel software trigger.
 286:./FWLIB/src/stm32f4xx_dac.c ****   * @param  DAC_Channel: The selected DAC channel. 
 287:./FWLIB/src/stm32f4xx_dac.c ****   *          This parameter can be one of the following values:
 288:./FWLIB/src/stm32f4xx_dac.c ****   *            @arg DAC_Channel_1: DAC Channel1 selected
 289:./FWLIB/src/stm32f4xx_dac.c ****   *            @arg DAC_Channel_2: DAC Channel2 selected
 290:./FWLIB/src/stm32f4xx_dac.c ****   * @param  NewState: new state of the selected DAC channel software trigger.
 291:./FWLIB/src/stm32f4xx_dac.c ****   *          This parameter can be: ENABLE or DISABLE.
 292:./FWLIB/src/stm32f4xx_dac.c ****   * @retval None
 293:./FWLIB/src/stm32f4xx_dac.c ****   */
 294:./FWLIB/src/stm32f4xx_dac.c **** void DAC_SoftwareTriggerCmd(uint32_t DAC_Channel, FunctionalState NewState)
 295:./FWLIB/src/stm32f4xx_dac.c **** {
 206              		.loc 1 295 0
 207              		.cfi_startproc
 208              		@ args = 0, pretend = 0, frame = 0
 209              		@ frame_needed = 0, uses_anonymous_args = 0
 210              		@ link register save eliminated.
 211              	.LVL17:
 296:./FWLIB/src/stm32f4xx_dac.c ****   /* Check the parameters */
 297:./FWLIB/src/stm32f4xx_dac.c ****   assert_param(IS_DAC_CHANNEL(DAC_Channel));
 298:./FWLIB/src/stm32f4xx_dac.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 299:./FWLIB/src/stm32f4xx_dac.c **** 
 300:./FWLIB/src/stm32f4xx_dac.c ****   if (NewState != DISABLE)
 212              		.loc 1 300 0
 213 0000 49B9     		cbnz	r1, .L17
 301:./FWLIB/src/stm32f4xx_dac.c ****   {
 302:./FWLIB/src/stm32f4xx_dac.c ****     /* Enable software trigger for the selected DAC channel */
 303:./FWLIB/src/stm32f4xx_dac.c ****     DAC->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4);
 304:./FWLIB/src/stm32f4xx_dac.c ****   }
 305:./FWLIB/src/stm32f4xx_dac.c ****   else
 306:./FWLIB/src/stm32f4xx_dac.c ****   {
ARM GAS  /tmp/cctx72nX.s 			page 10


 307:./FWLIB/src/stm32f4xx_dac.c ****     /* Disable software trigger for the selected DAC channel */
 308:./FWLIB/src/stm32f4xx_dac.c ****     DAC->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
 214              		.loc 1 308 0
 215 0002 0949     		ldr	r1, .L18
 216              	.LVL18:
 217 0004 4B68     		ldr	r3, [r1, #4]
 218 0006 0009     		lsrs	r0, r0, #4
 219              	.LVL19:
 220 0008 0122     		movs	r2, #1
 221 000a 02FA00F0 		lsl	r0, r2, r0
 222 000e 23EA0000 		bic	r0, r3, r0
 223 0012 4860     		str	r0, [r1, #4]
 309:./FWLIB/src/stm32f4xx_dac.c ****   }
 310:./FWLIB/src/stm32f4xx_dac.c **** }
 224              		.loc 1 310 0
 225 0014 7047     		bx	lr
 226              	.LVL20:
 227              	.L17:
 303:./FWLIB/src/stm32f4xx_dac.c ****   }
 228              		.loc 1 303 0
 229 0016 0449     		ldr	r1, .L18
 230              	.LVL21:
 231 0018 4B68     		ldr	r3, [r1, #4]
 232 001a 0009     		lsrs	r0, r0, #4
 233              	.LVL22:
 234 001c 0122     		movs	r2, #1
 235 001e 02FA00F0 		lsl	r0, r2, r0
 236 0022 1843     		orrs	r0, r0, r3
 237 0024 4860     		str	r0, [r1, #4]
 238 0026 7047     		bx	lr
 239              	.L19:
 240              		.align	2
 241              	.L18:
 242 0028 00740040 		.word	1073771520
 243              		.cfi_endproc
 244              	.LFE116:
 246              		.section	.text.DAC_DualSoftwareTriggerCmd,"ax",%progbits
 247              		.align	1
 248              		.global	DAC_DualSoftwareTriggerCmd
 249              		.syntax unified
 250              		.thumb
 251              		.thumb_func
 252              		.fpu fpv4-sp-d16
 254              	DAC_DualSoftwareTriggerCmd:
 255              	.LFB117:
 311:./FWLIB/src/stm32f4xx_dac.c **** 
 312:./FWLIB/src/stm32f4xx_dac.c **** /**
 313:./FWLIB/src/stm32f4xx_dac.c ****   * @brief  Enables or disables simultaneously the two DAC channels software triggers.
 314:./FWLIB/src/stm32f4xx_dac.c ****   * @param  NewState: new state of the DAC channels software triggers.
 315:./FWLIB/src/stm32f4xx_dac.c ****   *          This parameter can be: ENABLE or DISABLE.
 316:./FWLIB/src/stm32f4xx_dac.c ****   * @retval None
 317:./FWLIB/src/stm32f4xx_dac.c ****   */
 318:./FWLIB/src/stm32f4xx_dac.c **** void DAC_DualSoftwareTriggerCmd(FunctionalState NewState)
 319:./FWLIB/src/stm32f4xx_dac.c **** {
 256              		.loc 1 319 0
 257              		.cfi_startproc
 258              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cctx72nX.s 			page 11


 259              		@ frame_needed = 0, uses_anonymous_args = 0
 260              		@ link register save eliminated.
 261              	.LVL23:
 320:./FWLIB/src/stm32f4xx_dac.c ****   /* Check the parameters */
 321:./FWLIB/src/stm32f4xx_dac.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 322:./FWLIB/src/stm32f4xx_dac.c **** 
 323:./FWLIB/src/stm32f4xx_dac.c ****   if (NewState != DISABLE)
 262              		.loc 1 323 0
 263 0000 28B9     		cbnz	r0, .L23
 324:./FWLIB/src/stm32f4xx_dac.c ****   {
 325:./FWLIB/src/stm32f4xx_dac.c ****     /* Enable software trigger for both DAC channels */
 326:./FWLIB/src/stm32f4xx_dac.c ****     DAC->SWTRIGR |= DUAL_SWTRIG_SET;
 327:./FWLIB/src/stm32f4xx_dac.c ****   }
 328:./FWLIB/src/stm32f4xx_dac.c ****   else
 329:./FWLIB/src/stm32f4xx_dac.c ****   {
 330:./FWLIB/src/stm32f4xx_dac.c ****     /* Disable software trigger for both DAC channels */
 331:./FWLIB/src/stm32f4xx_dac.c ****     DAC->SWTRIGR &= DUAL_SWTRIG_RESET;
 264              		.loc 1 331 0
 265 0002 064A     		ldr	r2, .L24
 266 0004 5368     		ldr	r3, [r2, #4]
 267 0006 23F00303 		bic	r3, r3, #3
 268 000a 5360     		str	r3, [r2, #4]
 332:./FWLIB/src/stm32f4xx_dac.c ****   }
 333:./FWLIB/src/stm32f4xx_dac.c **** }
 269              		.loc 1 333 0
 270 000c 7047     		bx	lr
 271              	.L23:
 326:./FWLIB/src/stm32f4xx_dac.c ****   }
 272              		.loc 1 326 0
 273 000e 034A     		ldr	r2, .L24
 274 0010 5368     		ldr	r3, [r2, #4]
 275 0012 43F00303 		orr	r3, r3, #3
 276 0016 5360     		str	r3, [r2, #4]
 277 0018 7047     		bx	lr
 278              	.L25:
 279 001a 00BF     		.align	2
 280              	.L24:
 281 001c 00740040 		.word	1073771520
 282              		.cfi_endproc
 283              	.LFE117:
 285              		.section	.text.DAC_WaveGenerationCmd,"ax",%progbits
 286              		.align	1
 287              		.global	DAC_WaveGenerationCmd
 288              		.syntax unified
 289              		.thumb
 290              		.thumb_func
 291              		.fpu fpv4-sp-d16
 293              	DAC_WaveGenerationCmd:
 294              	.LFB118:
 334:./FWLIB/src/stm32f4xx_dac.c **** 
 335:./FWLIB/src/stm32f4xx_dac.c **** /**
 336:./FWLIB/src/stm32f4xx_dac.c ****   * @brief  Enables or disables the selected DAC channel wave generation.
 337:./FWLIB/src/stm32f4xx_dac.c ****   * @param  DAC_Channel: The selected DAC channel. 
 338:./FWLIB/src/stm32f4xx_dac.c ****   *          This parameter can be one of the following values:
 339:./FWLIB/src/stm32f4xx_dac.c ****   *            @arg DAC_Channel_1: DAC Channel1 selected
 340:./FWLIB/src/stm32f4xx_dac.c ****   *            @arg DAC_Channel_2: DAC Channel2 selected
 341:./FWLIB/src/stm32f4xx_dac.c ****   * @param  DAC_Wave: specifies the wave type to enable or disable.
ARM GAS  /tmp/cctx72nX.s 			page 12


 342:./FWLIB/src/stm32f4xx_dac.c ****   *          This parameter can be one of the following values:
 343:./FWLIB/src/stm32f4xx_dac.c ****   *            @arg DAC_Wave_Noise: noise wave generation
 344:./FWLIB/src/stm32f4xx_dac.c ****   *            @arg DAC_Wave_Triangle: triangle wave generation
 345:./FWLIB/src/stm32f4xx_dac.c ****   * @param  NewState: new state of the selected DAC channel wave generation.
 346:./FWLIB/src/stm32f4xx_dac.c ****   *          This parameter can be: ENABLE or DISABLE.  
 347:./FWLIB/src/stm32f4xx_dac.c ****   * @retval None
 348:./FWLIB/src/stm32f4xx_dac.c ****   */
 349:./FWLIB/src/stm32f4xx_dac.c **** void DAC_WaveGenerationCmd(uint32_t DAC_Channel, uint32_t DAC_Wave, FunctionalState NewState)
 350:./FWLIB/src/stm32f4xx_dac.c **** {
 295              		.loc 1 350 0
 296              		.cfi_startproc
 297              		@ args = 0, pretend = 0, frame = 0
 298              		@ frame_needed = 0, uses_anonymous_args = 0
 299              		@ link register save eliminated.
 300              	.LVL24:
 351:./FWLIB/src/stm32f4xx_dac.c ****   /* Check the parameters */
 352:./FWLIB/src/stm32f4xx_dac.c ****   assert_param(IS_DAC_CHANNEL(DAC_Channel));
 353:./FWLIB/src/stm32f4xx_dac.c ****   assert_param(IS_DAC_WAVE(DAC_Wave)); 
 354:./FWLIB/src/stm32f4xx_dac.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 355:./FWLIB/src/stm32f4xx_dac.c **** 
 356:./FWLIB/src/stm32f4xx_dac.c ****   if (NewState != DISABLE)
 301              		.loc 1 356 0
 302 0000 32B9     		cbnz	r2, .L29
 357:./FWLIB/src/stm32f4xx_dac.c ****   {
 358:./FWLIB/src/stm32f4xx_dac.c ****     /* Enable the selected wave generation for the selected DAC channel */
 359:./FWLIB/src/stm32f4xx_dac.c ****     DAC->CR |= DAC_Wave << DAC_Channel;
 360:./FWLIB/src/stm32f4xx_dac.c ****   }
 361:./FWLIB/src/stm32f4xx_dac.c ****   else
 362:./FWLIB/src/stm32f4xx_dac.c ****   {
 363:./FWLIB/src/stm32f4xx_dac.c ****     /* Disable the selected wave generation for the selected DAC channel */
 364:./FWLIB/src/stm32f4xx_dac.c ****     DAC->CR &= ~(DAC_Wave << DAC_Channel);
 303              		.loc 1 364 0
 304 0002 064A     		ldr	r2, .L30
 305              	.LVL25:
 306 0004 1368     		ldr	r3, [r2]
 307 0006 8140     		lsls	r1, r1, r0
 308              	.LVL26:
 309 0008 23EA0101 		bic	r1, r3, r1
 310 000c 1160     		str	r1, [r2]
 365:./FWLIB/src/stm32f4xx_dac.c ****   }
 366:./FWLIB/src/stm32f4xx_dac.c **** }
 311              		.loc 1 366 0
 312 000e 7047     		bx	lr
 313              	.LVL27:
 314              	.L29:
 359:./FWLIB/src/stm32f4xx_dac.c ****   }
 315              		.loc 1 359 0
 316 0010 024A     		ldr	r2, .L30
 317              	.LVL28:
 318 0012 1368     		ldr	r3, [r2]
 319 0014 8140     		lsls	r1, r1, r0
 320              	.LVL29:
 321 0016 1943     		orrs	r1, r1, r3
 322 0018 1160     		str	r1, [r2]
 323 001a 7047     		bx	lr
 324              	.L31:
 325              		.align	2
ARM GAS  /tmp/cctx72nX.s 			page 13


 326              	.L30:
 327 001c 00740040 		.word	1073771520
 328              		.cfi_endproc
 329              	.LFE118:
 331              		.section	.text.DAC_SetChannel1Data,"ax",%progbits
 332              		.align	1
 333              		.global	DAC_SetChannel1Data
 334              		.syntax unified
 335              		.thumb
 336              		.thumb_func
 337              		.fpu fpv4-sp-d16
 339              	DAC_SetChannel1Data:
 340              	.LFB119:
 367:./FWLIB/src/stm32f4xx_dac.c **** 
 368:./FWLIB/src/stm32f4xx_dac.c **** /**
 369:./FWLIB/src/stm32f4xx_dac.c ****   * @brief  Set the specified data holding register value for DAC channel1.
 370:./FWLIB/src/stm32f4xx_dac.c ****   * @param  DAC_Align: Specifies the data alignment for DAC channel1.
 371:./FWLIB/src/stm32f4xx_dac.c ****   *          This parameter can be one of the following values:
 372:./FWLIB/src/stm32f4xx_dac.c ****   *            @arg DAC_Align_8b_R: 8bit right data alignment selected
 373:./FWLIB/src/stm32f4xx_dac.c ****   *            @arg DAC_Align_12b_L: 12bit left data alignment selected
 374:./FWLIB/src/stm32f4xx_dac.c ****   *            @arg DAC_Align_12b_R: 12bit right data alignment selected
 375:./FWLIB/src/stm32f4xx_dac.c ****   * @param  Data: Data to be loaded in the selected data holding register.
 376:./FWLIB/src/stm32f4xx_dac.c ****   * @retval None
 377:./FWLIB/src/stm32f4xx_dac.c ****   */
 378:./FWLIB/src/stm32f4xx_dac.c **** void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
 379:./FWLIB/src/stm32f4xx_dac.c **** {  
 341              		.loc 1 379 0
 342              		.cfi_startproc
 343              		@ args = 0, pretend = 0, frame = 8
 344              		@ frame_needed = 0, uses_anonymous_args = 0
 345              		@ link register save eliminated.
 346              	.LVL30:
 347 0000 82B0     		sub	sp, sp, #8
 348              	.LCFI3:
 349              		.cfi_def_cfa_offset 8
 380:./FWLIB/src/stm32f4xx_dac.c ****   __IO uint32_t tmp = 0;
 350              		.loc 1 380 0
 351 0002 0023     		movs	r3, #0
 352 0004 0193     		str	r3, [sp, #4]
 381:./FWLIB/src/stm32f4xx_dac.c ****   
 382:./FWLIB/src/stm32f4xx_dac.c ****   /* Check the parameters */
 383:./FWLIB/src/stm32f4xx_dac.c ****   assert_param(IS_DAC_ALIGN(DAC_Align));
 384:./FWLIB/src/stm32f4xx_dac.c ****   assert_param(IS_DAC_DATA(Data));
 385:./FWLIB/src/stm32f4xx_dac.c ****   
 386:./FWLIB/src/stm32f4xx_dac.c ****   tmp = (uint32_t)DAC_BASE; 
 353              		.loc 1 386 0
 354 0006 054B     		ldr	r3, .L34
 355 0008 0193     		str	r3, [sp, #4]
 387:./FWLIB/src/stm32f4xx_dac.c ****   tmp += DHR12R1_OFFSET + DAC_Align;
 356              		.loc 1 387 0
 357 000a 019B     		ldr	r3, [sp, #4]
 358 000c 1844     		add	r0, r0, r3
 359              	.LVL31:
 360 000e 0830     		adds	r0, r0, #8
 361 0010 0190     		str	r0, [sp, #4]
 388:./FWLIB/src/stm32f4xx_dac.c **** 
 389:./FWLIB/src/stm32f4xx_dac.c ****   /* Set the DAC channel1 selected data holding register */
ARM GAS  /tmp/cctx72nX.s 			page 14


 390:./FWLIB/src/stm32f4xx_dac.c ****   *(__IO uint32_t *) tmp = Data;
 362              		.loc 1 390 0
 363 0012 019B     		ldr	r3, [sp, #4]
 364 0014 1960     		str	r1, [r3]
 391:./FWLIB/src/stm32f4xx_dac.c **** }
 365              		.loc 1 391 0
 366 0016 02B0     		add	sp, sp, #8
 367              	.LCFI4:
 368              		.cfi_def_cfa_offset 0
 369              		@ sp needed
 370 0018 7047     		bx	lr
 371              	.L35:
 372 001a 00BF     		.align	2
 373              	.L34:
 374 001c 00740040 		.word	1073771520
 375              		.cfi_endproc
 376              	.LFE119:
 378              		.section	.text.DAC_SetChannel2Data,"ax",%progbits
 379              		.align	1
 380              		.global	DAC_SetChannel2Data
 381              		.syntax unified
 382              		.thumb
 383              		.thumb_func
 384              		.fpu fpv4-sp-d16
 386              	DAC_SetChannel2Data:
 387              	.LFB120:
 392:./FWLIB/src/stm32f4xx_dac.c **** 
 393:./FWLIB/src/stm32f4xx_dac.c **** /**
 394:./FWLIB/src/stm32f4xx_dac.c ****   * @brief  Set the specified data holding register value for DAC channel2.
 395:./FWLIB/src/stm32f4xx_dac.c ****   * @param  DAC_Align: Specifies the data alignment for DAC channel2.
 396:./FWLIB/src/stm32f4xx_dac.c ****   *          This parameter can be one of the following values:
 397:./FWLIB/src/stm32f4xx_dac.c ****   *            @arg DAC_Align_8b_R: 8bit right data alignment selected
 398:./FWLIB/src/stm32f4xx_dac.c ****   *            @arg DAC_Align_12b_L: 12bit left data alignment selected
 399:./FWLIB/src/stm32f4xx_dac.c ****   *            @arg DAC_Align_12b_R: 12bit right data alignment selected
 400:./FWLIB/src/stm32f4xx_dac.c ****   * @param  Data: Data to be loaded in the selected data holding register.
 401:./FWLIB/src/stm32f4xx_dac.c ****   * @retval None
 402:./FWLIB/src/stm32f4xx_dac.c ****   */
 403:./FWLIB/src/stm32f4xx_dac.c **** void DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data)
 404:./FWLIB/src/stm32f4xx_dac.c **** {
 388              		.loc 1 404 0
 389              		.cfi_startproc
 390              		@ args = 0, pretend = 0, frame = 8
 391              		@ frame_needed = 0, uses_anonymous_args = 0
 392              		@ link register save eliminated.
 393              	.LVL32:
 394 0000 82B0     		sub	sp, sp, #8
 395              	.LCFI5:
 396              		.cfi_def_cfa_offset 8
 405:./FWLIB/src/stm32f4xx_dac.c ****   __IO uint32_t tmp = 0;
 397              		.loc 1 405 0
 398 0002 0023     		movs	r3, #0
 399 0004 0193     		str	r3, [sp, #4]
 406:./FWLIB/src/stm32f4xx_dac.c **** 
 407:./FWLIB/src/stm32f4xx_dac.c ****   /* Check the parameters */
 408:./FWLIB/src/stm32f4xx_dac.c ****   assert_param(IS_DAC_ALIGN(DAC_Align));
 409:./FWLIB/src/stm32f4xx_dac.c ****   assert_param(IS_DAC_DATA(Data));
 410:./FWLIB/src/stm32f4xx_dac.c ****   
ARM GAS  /tmp/cctx72nX.s 			page 15


 411:./FWLIB/src/stm32f4xx_dac.c ****   tmp = (uint32_t)DAC_BASE;
 400              		.loc 1 411 0
 401 0006 054B     		ldr	r3, .L38
 402 0008 0193     		str	r3, [sp, #4]
 412:./FWLIB/src/stm32f4xx_dac.c ****   tmp += DHR12R2_OFFSET + DAC_Align;
 403              		.loc 1 412 0
 404 000a 019B     		ldr	r3, [sp, #4]
 405 000c 1844     		add	r0, r0, r3
 406              	.LVL33:
 407 000e 1430     		adds	r0, r0, #20
 408 0010 0190     		str	r0, [sp, #4]
 413:./FWLIB/src/stm32f4xx_dac.c **** 
 414:./FWLIB/src/stm32f4xx_dac.c ****   /* Set the DAC channel2 selected data holding register */
 415:./FWLIB/src/stm32f4xx_dac.c ****   *(__IO uint32_t *)tmp = Data;
 409              		.loc 1 415 0
 410 0012 019B     		ldr	r3, [sp, #4]
 411 0014 1960     		str	r1, [r3]
 416:./FWLIB/src/stm32f4xx_dac.c **** }
 412              		.loc 1 416 0
 413 0016 02B0     		add	sp, sp, #8
 414              	.LCFI6:
 415              		.cfi_def_cfa_offset 0
 416              		@ sp needed
 417 0018 7047     		bx	lr
 418              	.L39:
 419 001a 00BF     		.align	2
 420              	.L38:
 421 001c 00740040 		.word	1073771520
 422              		.cfi_endproc
 423              	.LFE120:
 425              		.section	.text.DAC_SetDualChannelData,"ax",%progbits
 426              		.align	1
 427              		.global	DAC_SetDualChannelData
 428              		.syntax unified
 429              		.thumb
 430              		.thumb_func
 431              		.fpu fpv4-sp-d16
 433              	DAC_SetDualChannelData:
 434              	.LFB121:
 417:./FWLIB/src/stm32f4xx_dac.c **** 
 418:./FWLIB/src/stm32f4xx_dac.c **** /**
 419:./FWLIB/src/stm32f4xx_dac.c ****   * @brief  Set the specified data holding register value for dual channel DAC.
 420:./FWLIB/src/stm32f4xx_dac.c ****   * @param  DAC_Align: Specifies the data alignment for dual channel DAC.
 421:./FWLIB/src/stm32f4xx_dac.c ****   *          This parameter can be one of the following values:
 422:./FWLIB/src/stm32f4xx_dac.c ****   *            @arg DAC_Align_8b_R: 8bit right data alignment selected
 423:./FWLIB/src/stm32f4xx_dac.c ****   *            @arg DAC_Align_12b_L: 12bit left data alignment selected
 424:./FWLIB/src/stm32f4xx_dac.c ****   *            @arg DAC_Align_12b_R: 12bit right data alignment selected
 425:./FWLIB/src/stm32f4xx_dac.c ****   * @param  Data2: Data for DAC Channel2 to be loaded in the selected data holding register.
 426:./FWLIB/src/stm32f4xx_dac.c ****   * @param  Data1: Data for DAC Channel1 to be loaded in the selected data  holding register.
 427:./FWLIB/src/stm32f4xx_dac.c ****   * @note   In dual mode, a unique register access is required to write in both
 428:./FWLIB/src/stm32f4xx_dac.c ****   *          DAC channels at the same time.
 429:./FWLIB/src/stm32f4xx_dac.c ****   * @retval None
 430:./FWLIB/src/stm32f4xx_dac.c ****   */
 431:./FWLIB/src/stm32f4xx_dac.c **** void DAC_SetDualChannelData(uint32_t DAC_Align, uint16_t Data2, uint16_t Data1)
 432:./FWLIB/src/stm32f4xx_dac.c **** {
 435              		.loc 1 432 0
 436              		.cfi_startproc
ARM GAS  /tmp/cctx72nX.s 			page 16


 437              		@ args = 0, pretend = 0, frame = 0
 438              		@ frame_needed = 0, uses_anonymous_args = 0
 439              		@ link register save eliminated.
 440              	.LVL34:
 433:./FWLIB/src/stm32f4xx_dac.c ****   uint32_t data = 0, tmp = 0;
 434:./FWLIB/src/stm32f4xx_dac.c ****   
 435:./FWLIB/src/stm32f4xx_dac.c ****   /* Check the parameters */
 436:./FWLIB/src/stm32f4xx_dac.c ****   assert_param(IS_DAC_ALIGN(DAC_Align));
 437:./FWLIB/src/stm32f4xx_dac.c ****   assert_param(IS_DAC_DATA(Data1));
 438:./FWLIB/src/stm32f4xx_dac.c ****   assert_param(IS_DAC_DATA(Data2));
 439:./FWLIB/src/stm32f4xx_dac.c ****   
 440:./FWLIB/src/stm32f4xx_dac.c ****   /* Calculate and set dual DAC data holding register value */
 441:./FWLIB/src/stm32f4xx_dac.c ****   if (DAC_Align == DAC_Align_8b_R)
 441              		.loc 1 441 0
 442 0000 0828     		cmp	r0, #8
 443 0002 04D0     		beq	.L43
 442:./FWLIB/src/stm32f4xx_dac.c ****   {
 443:./FWLIB/src/stm32f4xx_dac.c ****     data = ((uint32_t)Data2 << 8) | Data1; 
 444:./FWLIB/src/stm32f4xx_dac.c ****   }
 445:./FWLIB/src/stm32f4xx_dac.c ****   else
 446:./FWLIB/src/stm32f4xx_dac.c ****   {
 447:./FWLIB/src/stm32f4xx_dac.c ****     data = ((uint32_t)Data2 << 16) | Data1;
 444              		.loc 1 447 0
 445 0004 42EA0142 		orr	r2, r2, r1, lsl #16
 446              	.LVL35:
 447              	.L42:
 448:./FWLIB/src/stm32f4xx_dac.c ****   }
 449:./FWLIB/src/stm32f4xx_dac.c ****   
 450:./FWLIB/src/stm32f4xx_dac.c ****   tmp = (uint32_t)DAC_BASE;
 451:./FWLIB/src/stm32f4xx_dac.c ****   tmp += DHR12RD_OFFSET + DAC_Align;
 448              		.loc 1 451 0
 449 0008 024B     		ldr	r3, .L44
 450              	.LVL36:
 452:./FWLIB/src/stm32f4xx_dac.c **** 
 453:./FWLIB/src/stm32f4xx_dac.c ****   /* Set the dual DAC selected data holding register */
 454:./FWLIB/src/stm32f4xx_dac.c ****   *(__IO uint32_t *)tmp = data;
 451              		.loc 1 454 0
 452 000a C250     		str	r2, [r0, r3]
 455:./FWLIB/src/stm32f4xx_dac.c **** }
 453              		.loc 1 455 0
 454 000c 7047     		bx	lr
 455              	.LVL37:
 456              	.L43:
 443:./FWLIB/src/stm32f4xx_dac.c ****   }
 457              		.loc 1 443 0
 458 000e 42EA0122 		orr	r2, r2, r1, lsl #8
 459              	.LVL38:
 460 0012 F9E7     		b	.L42
 461              	.L45:
 462              		.align	2
 463              	.L44:
 464 0014 20740040 		.word	1073771552
 465              		.cfi_endproc
 466              	.LFE121:
 468              		.section	.text.DAC_GetDataOutputValue,"ax",%progbits
 469              		.align	1
 470              		.global	DAC_GetDataOutputValue
ARM GAS  /tmp/cctx72nX.s 			page 17


 471              		.syntax unified
 472              		.thumb
 473              		.thumb_func
 474              		.fpu fpv4-sp-d16
 476              	DAC_GetDataOutputValue:
 477              	.LFB122:
 456:./FWLIB/src/stm32f4xx_dac.c **** 
 457:./FWLIB/src/stm32f4xx_dac.c **** /**
 458:./FWLIB/src/stm32f4xx_dac.c ****   * @brief  Returns the last data output value of the selected DAC channel.
 459:./FWLIB/src/stm32f4xx_dac.c ****   * @param  DAC_Channel: The selected DAC channel. 
 460:./FWLIB/src/stm32f4xx_dac.c ****   *          This parameter can be one of the following values:
 461:./FWLIB/src/stm32f4xx_dac.c ****   *            @arg DAC_Channel_1: DAC Channel1 selected
 462:./FWLIB/src/stm32f4xx_dac.c ****   *            @arg DAC_Channel_2: DAC Channel2 selected
 463:./FWLIB/src/stm32f4xx_dac.c ****   * @retval The selected DAC channel data output value.
 464:./FWLIB/src/stm32f4xx_dac.c ****   */
 465:./FWLIB/src/stm32f4xx_dac.c **** uint16_t DAC_GetDataOutputValue(uint32_t DAC_Channel)
 466:./FWLIB/src/stm32f4xx_dac.c **** {
 478              		.loc 1 466 0
 479              		.cfi_startproc
 480              		@ args = 0, pretend = 0, frame = 8
 481              		@ frame_needed = 0, uses_anonymous_args = 0
 482              		@ link register save eliminated.
 483              	.LVL39:
 484 0000 82B0     		sub	sp, sp, #8
 485              	.LCFI7:
 486              		.cfi_def_cfa_offset 8
 467:./FWLIB/src/stm32f4xx_dac.c ****   __IO uint32_t tmp = 0;
 487              		.loc 1 467 0
 488 0002 0023     		movs	r3, #0
 489 0004 0193     		str	r3, [sp, #4]
 468:./FWLIB/src/stm32f4xx_dac.c ****   
 469:./FWLIB/src/stm32f4xx_dac.c ****   /* Check the parameters */
 470:./FWLIB/src/stm32f4xx_dac.c ****   assert_param(IS_DAC_CHANNEL(DAC_Channel));
 471:./FWLIB/src/stm32f4xx_dac.c ****   
 472:./FWLIB/src/stm32f4xx_dac.c ****   tmp = (uint32_t) DAC_BASE ;
 490              		.loc 1 472 0
 491 0006 064B     		ldr	r3, .L48
 492 0008 0193     		str	r3, [sp, #4]
 473:./FWLIB/src/stm32f4xx_dac.c ****   tmp += DOR_OFFSET + ((uint32_t)DAC_Channel >> 2);
 493              		.loc 1 473 0
 494 000a 019B     		ldr	r3, [sp, #4]
 495 000c 03EB9000 		add	r0, r3, r0, lsr #2
 496              	.LVL40:
 497 0010 2C30     		adds	r0, r0, #44
 498 0012 0190     		str	r0, [sp, #4]
 474:./FWLIB/src/stm32f4xx_dac.c ****   
 475:./FWLIB/src/stm32f4xx_dac.c ****   /* Returns the DAC channel data output register value */
 476:./FWLIB/src/stm32f4xx_dac.c ****   return (uint16_t) (*(__IO uint32_t*) tmp);
 499              		.loc 1 476 0
 500 0014 019B     		ldr	r3, [sp, #4]
 501 0016 1868     		ldr	r0, [r3]
 477:./FWLIB/src/stm32f4xx_dac.c **** }
 502              		.loc 1 477 0
 503 0018 80B2     		uxth	r0, r0
 504 001a 02B0     		add	sp, sp, #8
 505              	.LCFI8:
 506              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/cctx72nX.s 			page 18


 507              		@ sp needed
 508 001c 7047     		bx	lr
 509              	.L49:
 510 001e 00BF     		.align	2
 511              	.L48:
 512 0020 00740040 		.word	1073771520
 513              		.cfi_endproc
 514              	.LFE122:
 516              		.section	.text.DAC_DMACmd,"ax",%progbits
 517              		.align	1
 518              		.global	DAC_DMACmd
 519              		.syntax unified
 520              		.thumb
 521              		.thumb_func
 522              		.fpu fpv4-sp-d16
 524              	DAC_DMACmd:
 525              	.LFB123:
 478:./FWLIB/src/stm32f4xx_dac.c **** /**
 479:./FWLIB/src/stm32f4xx_dac.c ****   * @}
 480:./FWLIB/src/stm32f4xx_dac.c ****   */
 481:./FWLIB/src/stm32f4xx_dac.c **** 
 482:./FWLIB/src/stm32f4xx_dac.c **** /** @defgroup DAC_Group2 DMA management functions
 483:./FWLIB/src/stm32f4xx_dac.c ****  *  @brief   DMA management functions
 484:./FWLIB/src/stm32f4xx_dac.c ****  *
 485:./FWLIB/src/stm32f4xx_dac.c **** @verbatim   
 486:./FWLIB/src/stm32f4xx_dac.c ****  ===============================================================================
 487:./FWLIB/src/stm32f4xx_dac.c ****                        ##### DMA management functions #####
 488:./FWLIB/src/stm32f4xx_dac.c ****  ===============================================================================  
 489:./FWLIB/src/stm32f4xx_dac.c **** 
 490:./FWLIB/src/stm32f4xx_dac.c **** @endverbatim
 491:./FWLIB/src/stm32f4xx_dac.c ****   * @{
 492:./FWLIB/src/stm32f4xx_dac.c ****   */
 493:./FWLIB/src/stm32f4xx_dac.c **** 
 494:./FWLIB/src/stm32f4xx_dac.c **** /**
 495:./FWLIB/src/stm32f4xx_dac.c ****   * @brief  Enables or disables the specified DAC channel DMA request.
 496:./FWLIB/src/stm32f4xx_dac.c ****   * @note   When enabled DMA1 is generated when an external trigger (EXTI Line9,
 497:./FWLIB/src/stm32f4xx_dac.c ****   *         TIM2, TIM4, TIM5, TIM6, TIM7 or TIM8  but not a software trigger) occurs.
 498:./FWLIB/src/stm32f4xx_dac.c ****   * @param  DAC_Channel: The selected DAC channel. 
 499:./FWLIB/src/stm32f4xx_dac.c ****   *          This parameter can be one of the following values:
 500:./FWLIB/src/stm32f4xx_dac.c ****   *            @arg DAC_Channel_1: DAC Channel1 selected
 501:./FWLIB/src/stm32f4xx_dac.c ****   *            @arg DAC_Channel_2: DAC Channel2 selected
 502:./FWLIB/src/stm32f4xx_dac.c ****   * @param  NewState: new state of the selected DAC channel DMA request.
 503:./FWLIB/src/stm32f4xx_dac.c ****   *          This parameter can be: ENABLE or DISABLE.
 504:./FWLIB/src/stm32f4xx_dac.c ****   * @note   The DAC channel1 is mapped on DMA1 Stream 5 channel7 which must be
 505:./FWLIB/src/stm32f4xx_dac.c ****   *          already configured.
 506:./FWLIB/src/stm32f4xx_dac.c ****   * @note   The DAC channel2 is mapped on DMA1 Stream 6 channel7 which must be
 507:./FWLIB/src/stm32f4xx_dac.c ****   *          already configured.    
 508:./FWLIB/src/stm32f4xx_dac.c ****   * @retval None
 509:./FWLIB/src/stm32f4xx_dac.c ****   */
 510:./FWLIB/src/stm32f4xx_dac.c **** void DAC_DMACmd(uint32_t DAC_Channel, FunctionalState NewState)
 511:./FWLIB/src/stm32f4xx_dac.c **** {
 526              		.loc 1 511 0
 527              		.cfi_startproc
 528              		@ args = 0, pretend = 0, frame = 0
 529              		@ frame_needed = 0, uses_anonymous_args = 0
 530              		@ link register save eliminated.
 531              	.LVL41:
ARM GAS  /tmp/cctx72nX.s 			page 19


 512:./FWLIB/src/stm32f4xx_dac.c ****   /* Check the parameters */
 513:./FWLIB/src/stm32f4xx_dac.c ****   assert_param(IS_DAC_CHANNEL(DAC_Channel));
 514:./FWLIB/src/stm32f4xx_dac.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 515:./FWLIB/src/stm32f4xx_dac.c **** 
 516:./FWLIB/src/stm32f4xx_dac.c ****   if (NewState != DISABLE)
 532              		.loc 1 516 0
 533 0000 49B9     		cbnz	r1, .L53
 517:./FWLIB/src/stm32f4xx_dac.c ****   {
 518:./FWLIB/src/stm32f4xx_dac.c ****     /* Enable the selected DAC channel DMA request */
 519:./FWLIB/src/stm32f4xx_dac.c ****     DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
 520:./FWLIB/src/stm32f4xx_dac.c ****   }
 521:./FWLIB/src/stm32f4xx_dac.c ****   else
 522:./FWLIB/src/stm32f4xx_dac.c ****   {
 523:./FWLIB/src/stm32f4xx_dac.c ****     /* Disable the selected DAC channel DMA request */
 524:./FWLIB/src/stm32f4xx_dac.c ****     DAC->CR &= (~(DAC_CR_DMAEN1 << DAC_Channel));
 534              		.loc 1 524 0
 535 0002 0949     		ldr	r1, .L54
 536              	.LVL42:
 537 0004 0B68     		ldr	r3, [r1]
 538 0006 4FF48052 		mov	r2, #4096
 539 000a 02FA00F0 		lsl	r0, r2, r0
 540              	.LVL43:
 541 000e 23EA0000 		bic	r0, r3, r0
 542 0012 0860     		str	r0, [r1]
 525:./FWLIB/src/stm32f4xx_dac.c ****   }
 526:./FWLIB/src/stm32f4xx_dac.c **** }
 543              		.loc 1 526 0
 544 0014 7047     		bx	lr
 545              	.LVL44:
 546              	.L53:
 519:./FWLIB/src/stm32f4xx_dac.c ****   }
 547              		.loc 1 519 0
 548 0016 0449     		ldr	r1, .L54
 549              	.LVL45:
 550 0018 0B68     		ldr	r3, [r1]
 551 001a 4FF48052 		mov	r2, #4096
 552 001e 02FA00F0 		lsl	r0, r2, r0
 553              	.LVL46:
 554 0022 1843     		orrs	r0, r0, r3
 555 0024 0860     		str	r0, [r1]
 556 0026 7047     		bx	lr
 557              	.L55:
 558              		.align	2
 559              	.L54:
 560 0028 00740040 		.word	1073771520
 561              		.cfi_endproc
 562              	.LFE123:
 564              		.section	.text.DAC_ITConfig,"ax",%progbits
 565              		.align	1
 566              		.global	DAC_ITConfig
 567              		.syntax unified
 568              		.thumb
 569              		.thumb_func
 570              		.fpu fpv4-sp-d16
 572              	DAC_ITConfig:
 573              	.LFB124:
 527:./FWLIB/src/stm32f4xx_dac.c **** /**
ARM GAS  /tmp/cctx72nX.s 			page 20


 528:./FWLIB/src/stm32f4xx_dac.c ****   * @}
 529:./FWLIB/src/stm32f4xx_dac.c ****   */
 530:./FWLIB/src/stm32f4xx_dac.c **** 
 531:./FWLIB/src/stm32f4xx_dac.c **** /** @defgroup DAC_Group3 Interrupts and flags management functions
 532:./FWLIB/src/stm32f4xx_dac.c ****  *  @brief   Interrupts and flags management functions
 533:./FWLIB/src/stm32f4xx_dac.c ****  *
 534:./FWLIB/src/stm32f4xx_dac.c **** @verbatim   
 535:./FWLIB/src/stm32f4xx_dac.c ****  ===============================================================================
 536:./FWLIB/src/stm32f4xx_dac.c ****              ##### Interrupts and flags management functions #####
 537:./FWLIB/src/stm32f4xx_dac.c ****  ===============================================================================  
 538:./FWLIB/src/stm32f4xx_dac.c **** 
 539:./FWLIB/src/stm32f4xx_dac.c **** @endverbatim
 540:./FWLIB/src/stm32f4xx_dac.c ****   * @{
 541:./FWLIB/src/stm32f4xx_dac.c ****   */
 542:./FWLIB/src/stm32f4xx_dac.c **** 
 543:./FWLIB/src/stm32f4xx_dac.c **** /**
 544:./FWLIB/src/stm32f4xx_dac.c ****   * @brief  Enables or disables the specified DAC interrupts.
 545:./FWLIB/src/stm32f4xx_dac.c ****   * @param  DAC_Channel: The selected DAC channel. 
 546:./FWLIB/src/stm32f4xx_dac.c ****   *          This parameter can be one of the following values:
 547:./FWLIB/src/stm32f4xx_dac.c ****   *            @arg DAC_Channel_1: DAC Channel1 selected
 548:./FWLIB/src/stm32f4xx_dac.c ****   *            @arg DAC_Channel_2: DAC Channel2 selected
 549:./FWLIB/src/stm32f4xx_dac.c ****   * @param  DAC_IT: specifies the DAC interrupt sources to be enabled or disabled. 
 550:./FWLIB/src/stm32f4xx_dac.c ****   *          This parameter can be the following values:
 551:./FWLIB/src/stm32f4xx_dac.c ****   *            @arg DAC_IT_DMAUDR: DMA underrun interrupt mask
 552:./FWLIB/src/stm32f4xx_dac.c ****   * @note   The DMA underrun occurs when a second external trigger arrives before the 
 553:./FWLIB/src/stm32f4xx_dac.c ****   *         acknowledgement for the first external trigger is received (first request).
 554:./FWLIB/src/stm32f4xx_dac.c ****   * @param  NewState: new state of the specified DAC interrupts.
 555:./FWLIB/src/stm32f4xx_dac.c ****   *          This parameter can be: ENABLE or DISABLE.
 556:./FWLIB/src/stm32f4xx_dac.c ****   * @retval None
 557:./FWLIB/src/stm32f4xx_dac.c ****   */ 
 558:./FWLIB/src/stm32f4xx_dac.c **** void DAC_ITConfig(uint32_t DAC_Channel, uint32_t DAC_IT, FunctionalState NewState)  
 559:./FWLIB/src/stm32f4xx_dac.c **** {
 574              		.loc 1 559 0
 575              		.cfi_startproc
 576              		@ args = 0, pretend = 0, frame = 0
 577              		@ frame_needed = 0, uses_anonymous_args = 0
 578              		@ link register save eliminated.
 579              	.LVL47:
 560:./FWLIB/src/stm32f4xx_dac.c ****   /* Check the parameters */
 561:./FWLIB/src/stm32f4xx_dac.c ****   assert_param(IS_DAC_CHANNEL(DAC_Channel));
 562:./FWLIB/src/stm32f4xx_dac.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 563:./FWLIB/src/stm32f4xx_dac.c ****   assert_param(IS_DAC_IT(DAC_IT)); 
 564:./FWLIB/src/stm32f4xx_dac.c **** 
 565:./FWLIB/src/stm32f4xx_dac.c ****   if (NewState != DISABLE)
 580              		.loc 1 565 0
 581 0000 32B9     		cbnz	r2, .L59
 566:./FWLIB/src/stm32f4xx_dac.c ****   {
 567:./FWLIB/src/stm32f4xx_dac.c ****     /* Enable the selected DAC interrupts */
 568:./FWLIB/src/stm32f4xx_dac.c ****     DAC->CR |=  (DAC_IT << DAC_Channel);
 569:./FWLIB/src/stm32f4xx_dac.c ****   }
 570:./FWLIB/src/stm32f4xx_dac.c ****   else
 571:./FWLIB/src/stm32f4xx_dac.c ****   {
 572:./FWLIB/src/stm32f4xx_dac.c ****     /* Disable the selected DAC interrupts */
 573:./FWLIB/src/stm32f4xx_dac.c ****     DAC->CR &= (~(uint32_t)(DAC_IT << DAC_Channel));
 582              		.loc 1 573 0
 583 0002 064A     		ldr	r2, .L60
 584              	.LVL48:
ARM GAS  /tmp/cctx72nX.s 			page 21


 585 0004 1368     		ldr	r3, [r2]
 586 0006 8140     		lsls	r1, r1, r0
 587              	.LVL49:
 588 0008 23EA0101 		bic	r1, r3, r1
 589 000c 1160     		str	r1, [r2]
 574:./FWLIB/src/stm32f4xx_dac.c ****   }
 575:./FWLIB/src/stm32f4xx_dac.c **** }
 590              		.loc 1 575 0
 591 000e 7047     		bx	lr
 592              	.LVL50:
 593              	.L59:
 568:./FWLIB/src/stm32f4xx_dac.c ****   }
 594              		.loc 1 568 0
 595 0010 024A     		ldr	r2, .L60
 596              	.LVL51:
 597 0012 1368     		ldr	r3, [r2]
 598 0014 8140     		lsls	r1, r1, r0
 599              	.LVL52:
 600 0016 1943     		orrs	r1, r1, r3
 601 0018 1160     		str	r1, [r2]
 602 001a 7047     		bx	lr
 603              	.L61:
 604              		.align	2
 605              	.L60:
 606 001c 00740040 		.word	1073771520
 607              		.cfi_endproc
 608              	.LFE124:
 610              		.section	.text.DAC_GetFlagStatus,"ax",%progbits
 611              		.align	1
 612              		.global	DAC_GetFlagStatus
 613              		.syntax unified
 614              		.thumb
 615              		.thumb_func
 616              		.fpu fpv4-sp-d16
 618              	DAC_GetFlagStatus:
 619              	.LFB125:
 576:./FWLIB/src/stm32f4xx_dac.c **** 
 577:./FWLIB/src/stm32f4xx_dac.c **** /**
 578:./FWLIB/src/stm32f4xx_dac.c ****   * @brief  Checks whether the specified DAC flag is set or not.
 579:./FWLIB/src/stm32f4xx_dac.c ****   * @param  DAC_Channel: The selected DAC channel. 
 580:./FWLIB/src/stm32f4xx_dac.c ****   *          This parameter can be one of the following values:
 581:./FWLIB/src/stm32f4xx_dac.c ****   *            @arg DAC_Channel_1: DAC Channel1 selected
 582:./FWLIB/src/stm32f4xx_dac.c ****   *            @arg DAC_Channel_2: DAC Channel2 selected
 583:./FWLIB/src/stm32f4xx_dac.c ****   * @param  DAC_FLAG: specifies the flag to check. 
 584:./FWLIB/src/stm32f4xx_dac.c ****   *          This parameter can be only of the following value:
 585:./FWLIB/src/stm32f4xx_dac.c ****   *            @arg DAC_FLAG_DMAUDR: DMA underrun flag
 586:./FWLIB/src/stm32f4xx_dac.c ****   * @note   The DMA underrun occurs when a second external trigger arrives before the 
 587:./FWLIB/src/stm32f4xx_dac.c ****   *         acknowledgement for the first external trigger is received (first request).
 588:./FWLIB/src/stm32f4xx_dac.c ****   * @retval The new state of DAC_FLAG (SET or RESET).
 589:./FWLIB/src/stm32f4xx_dac.c ****   */
 590:./FWLIB/src/stm32f4xx_dac.c **** FlagStatus DAC_GetFlagStatus(uint32_t DAC_Channel, uint32_t DAC_FLAG)
 591:./FWLIB/src/stm32f4xx_dac.c **** {
 620              		.loc 1 591 0
 621              		.cfi_startproc
 622              		@ args = 0, pretend = 0, frame = 0
 623              		@ frame_needed = 0, uses_anonymous_args = 0
 624              		@ link register save eliminated.
ARM GAS  /tmp/cctx72nX.s 			page 22


 625              	.LVL53:
 592:./FWLIB/src/stm32f4xx_dac.c ****   FlagStatus bitstatus = RESET;
 593:./FWLIB/src/stm32f4xx_dac.c ****   /* Check the parameters */
 594:./FWLIB/src/stm32f4xx_dac.c ****   assert_param(IS_DAC_CHANNEL(DAC_Channel));
 595:./FWLIB/src/stm32f4xx_dac.c ****   assert_param(IS_DAC_FLAG(DAC_FLAG));
 596:./FWLIB/src/stm32f4xx_dac.c **** 
 597:./FWLIB/src/stm32f4xx_dac.c ****   /* Check the status of the specified DAC flag */
 598:./FWLIB/src/stm32f4xx_dac.c ****   if ((DAC->SR & (DAC_FLAG << DAC_Channel)) != (uint8_t)RESET)
 626              		.loc 1 598 0
 627 0000 044B     		ldr	r3, .L66
 628 0002 5B6B     		ldr	r3, [r3, #52]
 629 0004 8140     		lsls	r1, r1, r0
 630              	.LVL54:
 631 0006 0B42     		tst	r3, r1
 632 0008 01D1     		bne	.L65
 599:./FWLIB/src/stm32f4xx_dac.c ****   {
 600:./FWLIB/src/stm32f4xx_dac.c ****     /* DAC_FLAG is set */
 601:./FWLIB/src/stm32f4xx_dac.c ****     bitstatus = SET;
 602:./FWLIB/src/stm32f4xx_dac.c ****   }
 603:./FWLIB/src/stm32f4xx_dac.c ****   else
 604:./FWLIB/src/stm32f4xx_dac.c ****   {
 605:./FWLIB/src/stm32f4xx_dac.c ****     /* DAC_FLAG is reset */
 606:./FWLIB/src/stm32f4xx_dac.c ****     bitstatus = RESET;
 633              		.loc 1 606 0
 634 000a 0020     		movs	r0, #0
 635              	.LVL55:
 607:./FWLIB/src/stm32f4xx_dac.c ****   }
 608:./FWLIB/src/stm32f4xx_dac.c ****   /* Return the DAC_FLAG status */
 609:./FWLIB/src/stm32f4xx_dac.c ****   return  bitstatus;
 610:./FWLIB/src/stm32f4xx_dac.c **** }
 636              		.loc 1 610 0
 637 000c 7047     		bx	lr
 638              	.LVL56:
 639              	.L65:
 601:./FWLIB/src/stm32f4xx_dac.c ****   }
 640              		.loc 1 601 0
 641 000e 0120     		movs	r0, #1
 642              	.LVL57:
 643 0010 7047     		bx	lr
 644              	.L67:
 645 0012 00BF     		.align	2
 646              	.L66:
 647 0014 00740040 		.word	1073771520
 648              		.cfi_endproc
 649              	.LFE125:
 651              		.section	.text.DAC_ClearFlag,"ax",%progbits
 652              		.align	1
 653              		.global	DAC_ClearFlag
 654              		.syntax unified
 655              		.thumb
 656              		.thumb_func
 657              		.fpu fpv4-sp-d16
 659              	DAC_ClearFlag:
 660              	.LFB126:
 611:./FWLIB/src/stm32f4xx_dac.c **** 
 612:./FWLIB/src/stm32f4xx_dac.c **** /**
 613:./FWLIB/src/stm32f4xx_dac.c ****   * @brief  Clears the DAC channel's pending flags.
ARM GAS  /tmp/cctx72nX.s 			page 23


 614:./FWLIB/src/stm32f4xx_dac.c ****   * @param  DAC_Channel: The selected DAC channel. 
 615:./FWLIB/src/stm32f4xx_dac.c ****   *          This parameter can be one of the following values:
 616:./FWLIB/src/stm32f4xx_dac.c ****   *            @arg DAC_Channel_1: DAC Channel1 selected
 617:./FWLIB/src/stm32f4xx_dac.c ****   *            @arg DAC_Channel_2: DAC Channel2 selected
 618:./FWLIB/src/stm32f4xx_dac.c ****   * @param  DAC_FLAG: specifies the flag to clear. 
 619:./FWLIB/src/stm32f4xx_dac.c ****   *          This parameter can be of the following value:
 620:./FWLIB/src/stm32f4xx_dac.c ****   *            @arg DAC_FLAG_DMAUDR: DMA underrun flag 
 621:./FWLIB/src/stm32f4xx_dac.c ****   * @note   The DMA underrun occurs when a second external trigger arrives before the 
 622:./FWLIB/src/stm32f4xx_dac.c ****   *         acknowledgement for the first external trigger is received (first request).            
 623:./FWLIB/src/stm32f4xx_dac.c ****   * @retval None
 624:./FWLIB/src/stm32f4xx_dac.c ****   */
 625:./FWLIB/src/stm32f4xx_dac.c **** void DAC_ClearFlag(uint32_t DAC_Channel, uint32_t DAC_FLAG)
 626:./FWLIB/src/stm32f4xx_dac.c **** {
 661              		.loc 1 626 0
 662              		.cfi_startproc
 663              		@ args = 0, pretend = 0, frame = 0
 664              		@ frame_needed = 0, uses_anonymous_args = 0
 665              		@ link register save eliminated.
 666              	.LVL58:
 627:./FWLIB/src/stm32f4xx_dac.c ****   /* Check the parameters */
 628:./FWLIB/src/stm32f4xx_dac.c ****   assert_param(IS_DAC_CHANNEL(DAC_Channel));
 629:./FWLIB/src/stm32f4xx_dac.c ****   assert_param(IS_DAC_FLAG(DAC_FLAG));
 630:./FWLIB/src/stm32f4xx_dac.c **** 
 631:./FWLIB/src/stm32f4xx_dac.c ****   /* Clear the selected DAC flags */
 632:./FWLIB/src/stm32f4xx_dac.c ****   DAC->SR = (DAC_FLAG << DAC_Channel);
 667              		.loc 1 632 0
 668 0000 8140     		lsls	r1, r1, r0
 669              	.LVL59:
 670 0002 014B     		ldr	r3, .L69
 671 0004 5963     		str	r1, [r3, #52]
 633:./FWLIB/src/stm32f4xx_dac.c **** }
 672              		.loc 1 633 0
 673 0006 7047     		bx	lr
 674              	.L70:
 675              		.align	2
 676              	.L69:
 677 0008 00740040 		.word	1073771520
 678              		.cfi_endproc
 679              	.LFE126:
 681              		.section	.text.DAC_GetITStatus,"ax",%progbits
 682              		.align	1
 683              		.global	DAC_GetITStatus
 684              		.syntax unified
 685              		.thumb
 686              		.thumb_func
 687              		.fpu fpv4-sp-d16
 689              	DAC_GetITStatus:
 690              	.LFB127:
 634:./FWLIB/src/stm32f4xx_dac.c **** 
 635:./FWLIB/src/stm32f4xx_dac.c **** /**
 636:./FWLIB/src/stm32f4xx_dac.c ****   * @brief  Checks whether the specified DAC interrupt has occurred or not.
 637:./FWLIB/src/stm32f4xx_dac.c ****   * @param  DAC_Channel: The selected DAC channel. 
 638:./FWLIB/src/stm32f4xx_dac.c ****   *          This parameter can be one of the following values:
 639:./FWLIB/src/stm32f4xx_dac.c ****   *            @arg DAC_Channel_1: DAC Channel1 selected
 640:./FWLIB/src/stm32f4xx_dac.c ****   *            @arg DAC_Channel_2: DAC Channel2 selected
 641:./FWLIB/src/stm32f4xx_dac.c ****   * @param  DAC_IT: specifies the DAC interrupt source to check. 
 642:./FWLIB/src/stm32f4xx_dac.c ****   *          This parameter can be the following values:
ARM GAS  /tmp/cctx72nX.s 			page 24


 643:./FWLIB/src/stm32f4xx_dac.c ****   *            @arg DAC_IT_DMAUDR: DMA underrun interrupt mask
 644:./FWLIB/src/stm32f4xx_dac.c ****   * @note   The DMA underrun occurs when a second external trigger arrives before the 
 645:./FWLIB/src/stm32f4xx_dac.c ****   *         acknowledgement for the first external trigger is received (first request).
 646:./FWLIB/src/stm32f4xx_dac.c ****   * @retval The new state of DAC_IT (SET or RESET).
 647:./FWLIB/src/stm32f4xx_dac.c ****   */
 648:./FWLIB/src/stm32f4xx_dac.c **** ITStatus DAC_GetITStatus(uint32_t DAC_Channel, uint32_t DAC_IT)
 649:./FWLIB/src/stm32f4xx_dac.c **** {
 691              		.loc 1 649 0
 692              		.cfi_startproc
 693              		@ args = 0, pretend = 0, frame = 0
 694              		@ frame_needed = 0, uses_anonymous_args = 0
 695              		@ link register save eliminated.
 696              	.LVL60:
 650:./FWLIB/src/stm32f4xx_dac.c ****   ITStatus bitstatus = RESET;
 651:./FWLIB/src/stm32f4xx_dac.c ****   uint32_t enablestatus = 0;
 652:./FWLIB/src/stm32f4xx_dac.c ****   
 653:./FWLIB/src/stm32f4xx_dac.c ****   /* Check the parameters */
 654:./FWLIB/src/stm32f4xx_dac.c ****   assert_param(IS_DAC_CHANNEL(DAC_Channel));
 655:./FWLIB/src/stm32f4xx_dac.c ****   assert_param(IS_DAC_IT(DAC_IT));
 656:./FWLIB/src/stm32f4xx_dac.c **** 
 657:./FWLIB/src/stm32f4xx_dac.c ****   /* Get the DAC_IT enable bit status */
 658:./FWLIB/src/stm32f4xx_dac.c ****   enablestatus = (DAC->CR & (DAC_IT << DAC_Channel)) ;
 697              		.loc 1 658 0
 698 0000 064A     		ldr	r2, .L75
 699 0002 1368     		ldr	r3, [r2]
 700 0004 8140     		lsls	r1, r1, r0
 701              	.LVL61:
 702 0006 0B40     		ands	r3, r3, r1
 703              	.LVL62:
 659:./FWLIB/src/stm32f4xx_dac.c ****   
 660:./FWLIB/src/stm32f4xx_dac.c ****   /* Check the status of the specified DAC interrupt */
 661:./FWLIB/src/stm32f4xx_dac.c ****   if (((DAC->SR & (DAC_IT << DAC_Channel)) != (uint32_t)RESET) && enablestatus)
 704              		.loc 1 661 0
 705 0008 526B     		ldr	r2, [r2, #52]
 706 000a 1142     		tst	r1, r2
 707 000c 02D0     		beq	.L73
 708              		.loc 1 661 0 is_stmt 0 discriminator 1
 709 000e 1BB9     		cbnz	r3, .L74
 662:./FWLIB/src/stm32f4xx_dac.c ****   {
 663:./FWLIB/src/stm32f4xx_dac.c ****     /* DAC_IT is set */
 664:./FWLIB/src/stm32f4xx_dac.c ****     bitstatus = SET;
 665:./FWLIB/src/stm32f4xx_dac.c ****   }
 666:./FWLIB/src/stm32f4xx_dac.c ****   else
 667:./FWLIB/src/stm32f4xx_dac.c ****   {
 668:./FWLIB/src/stm32f4xx_dac.c ****     /* DAC_IT is reset */
 669:./FWLIB/src/stm32f4xx_dac.c ****     bitstatus = RESET;
 710              		.loc 1 669 0 is_stmt 1
 711 0010 0020     		movs	r0, #0
 712              	.LVL63:
 713 0012 7047     		bx	lr
 714              	.LVL64:
 715              	.L73:
 716 0014 0020     		movs	r0, #0
 717              	.LVL65:
 718 0016 7047     		bx	lr
 719              	.LVL66:
 720              	.L74:
ARM GAS  /tmp/cctx72nX.s 			page 25


 664:./FWLIB/src/stm32f4xx_dac.c ****   }
 721              		.loc 1 664 0
 722 0018 0120     		movs	r0, #1
 723              	.LVL67:
 670:./FWLIB/src/stm32f4xx_dac.c ****   }
 671:./FWLIB/src/stm32f4xx_dac.c ****   /* Return the DAC_IT status */
 672:./FWLIB/src/stm32f4xx_dac.c ****   return  bitstatus;
 673:./FWLIB/src/stm32f4xx_dac.c **** }
 724              		.loc 1 673 0
 725 001a 7047     		bx	lr
 726              	.L76:
 727              		.align	2
 728              	.L75:
 729 001c 00740040 		.word	1073771520
 730              		.cfi_endproc
 731              	.LFE127:
 733              		.section	.text.DAC_ClearITPendingBit,"ax",%progbits
 734              		.align	1
 735              		.global	DAC_ClearITPendingBit
 736              		.syntax unified
 737              		.thumb
 738              		.thumb_func
 739              		.fpu fpv4-sp-d16
 741              	DAC_ClearITPendingBit:
 742              	.LFB128:
 674:./FWLIB/src/stm32f4xx_dac.c **** 
 675:./FWLIB/src/stm32f4xx_dac.c **** /**
 676:./FWLIB/src/stm32f4xx_dac.c ****   * @brief  Clears the DAC channel's interrupt pending bits.
 677:./FWLIB/src/stm32f4xx_dac.c ****   * @param  DAC_Channel: The selected DAC channel. 
 678:./FWLIB/src/stm32f4xx_dac.c ****   *          This parameter can be one of the following values:
 679:./FWLIB/src/stm32f4xx_dac.c ****   *            @arg DAC_Channel_1: DAC Channel1 selected
 680:./FWLIB/src/stm32f4xx_dac.c ****   *            @arg DAC_Channel_2: DAC Channel2 selected
 681:./FWLIB/src/stm32f4xx_dac.c ****   * @param  DAC_IT: specifies the DAC interrupt pending bit to clear.
 682:./FWLIB/src/stm32f4xx_dac.c ****   *          This parameter can be the following values:
 683:./FWLIB/src/stm32f4xx_dac.c ****   *            @arg DAC_IT_DMAUDR: DMA underrun interrupt mask                         
 684:./FWLIB/src/stm32f4xx_dac.c ****   * @note   The DMA underrun occurs when a second external trigger arrives before the 
 685:./FWLIB/src/stm32f4xx_dac.c ****   *         acknowledgement for the first external trigger is received (first request).            
 686:./FWLIB/src/stm32f4xx_dac.c ****   * @retval None
 687:./FWLIB/src/stm32f4xx_dac.c ****   */
 688:./FWLIB/src/stm32f4xx_dac.c **** void DAC_ClearITPendingBit(uint32_t DAC_Channel, uint32_t DAC_IT)
 689:./FWLIB/src/stm32f4xx_dac.c **** {
 743              		.loc 1 689 0
 744              		.cfi_startproc
 745              		@ args = 0, pretend = 0, frame = 0
 746              		@ frame_needed = 0, uses_anonymous_args = 0
 747              		@ link register save eliminated.
 748              	.LVL68:
 690:./FWLIB/src/stm32f4xx_dac.c ****   /* Check the parameters */
 691:./FWLIB/src/stm32f4xx_dac.c ****   assert_param(IS_DAC_CHANNEL(DAC_Channel));
 692:./FWLIB/src/stm32f4xx_dac.c ****   assert_param(IS_DAC_IT(DAC_IT)); 
 693:./FWLIB/src/stm32f4xx_dac.c **** 
 694:./FWLIB/src/stm32f4xx_dac.c ****   /* Clear the selected DAC interrupt pending bits */
 695:./FWLIB/src/stm32f4xx_dac.c ****   DAC->SR = (DAC_IT << DAC_Channel);
 749              		.loc 1 695 0
 750 0000 8140     		lsls	r1, r1, r0
 751              	.LVL69:
 752 0002 014B     		ldr	r3, .L78
ARM GAS  /tmp/cctx72nX.s 			page 26


 753 0004 5963     		str	r1, [r3, #52]
 696:./FWLIB/src/stm32f4xx_dac.c **** }
 754              		.loc 1 696 0
 755 0006 7047     		bx	lr
 756              	.L79:
 757              		.align	2
 758              	.L78:
 759 0008 00740040 		.word	1073771520
 760              		.cfi_endproc
 761              	.LFE128:
 763              		.text
 764              	.Letext0:
 765              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 766              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 767              		.file 4 "build/lnInclude/core_cm4.h"
 768              		.file 5 "build/lnInclude/system_stm32f4xx.h"
 769              		.file 6 "build/lnInclude/stm32f4xx.h"
 770              		.file 7 "build/lnInclude/stm32f4xx_dac.h"
 771              		.file 8 "build/lnInclude/stm32f4xx_rcc.h"
ARM GAS  /tmp/cctx72nX.s 			page 27


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_dac.c
     /tmp/cctx72nX.s:18     .text.DAC_DeInit:0000000000000000 $t
     /tmp/cctx72nX.s:25     .text.DAC_DeInit:0000000000000000 DAC_DeInit
     /tmp/cctx72nX.s:53     .text.DAC_Init:0000000000000000 $t
     /tmp/cctx72nX.s:60     .text.DAC_Init:0000000000000000 DAC_Init
     /tmp/cctx72nX.s:114    .text.DAC_Init:000000000000002c $d
     /tmp/cctx72nX.s:119    .text.DAC_StructInit:0000000000000000 $t
     /tmp/cctx72nX.s:126    .text.DAC_StructInit:0000000000000000 DAC_StructInit
     /tmp/cctx72nX.s:149    .text.DAC_Cmd:0000000000000000 $t
     /tmp/cctx72nX.s:156    .text.DAC_Cmd:0000000000000000 DAC_Cmd
     /tmp/cctx72nX.s:192    .text.DAC_Cmd:0000000000000024 $d
     /tmp/cctx72nX.s:197    .text.DAC_SoftwareTriggerCmd:0000000000000000 $t
     /tmp/cctx72nX.s:204    .text.DAC_SoftwareTriggerCmd:0000000000000000 DAC_SoftwareTriggerCmd
     /tmp/cctx72nX.s:242    .text.DAC_SoftwareTriggerCmd:0000000000000028 $d
     /tmp/cctx72nX.s:247    .text.DAC_DualSoftwareTriggerCmd:0000000000000000 $t
     /tmp/cctx72nX.s:254    .text.DAC_DualSoftwareTriggerCmd:0000000000000000 DAC_DualSoftwareTriggerCmd
     /tmp/cctx72nX.s:281    .text.DAC_DualSoftwareTriggerCmd:000000000000001c $d
     /tmp/cctx72nX.s:286    .text.DAC_WaveGenerationCmd:0000000000000000 $t
     /tmp/cctx72nX.s:293    .text.DAC_WaveGenerationCmd:0000000000000000 DAC_WaveGenerationCmd
     /tmp/cctx72nX.s:327    .text.DAC_WaveGenerationCmd:000000000000001c $d
     /tmp/cctx72nX.s:332    .text.DAC_SetChannel1Data:0000000000000000 $t
     /tmp/cctx72nX.s:339    .text.DAC_SetChannel1Data:0000000000000000 DAC_SetChannel1Data
     /tmp/cctx72nX.s:374    .text.DAC_SetChannel1Data:000000000000001c $d
     /tmp/cctx72nX.s:379    .text.DAC_SetChannel2Data:0000000000000000 $t
     /tmp/cctx72nX.s:386    .text.DAC_SetChannel2Data:0000000000000000 DAC_SetChannel2Data
     /tmp/cctx72nX.s:421    .text.DAC_SetChannel2Data:000000000000001c $d
     /tmp/cctx72nX.s:426    .text.DAC_SetDualChannelData:0000000000000000 $t
     /tmp/cctx72nX.s:433    .text.DAC_SetDualChannelData:0000000000000000 DAC_SetDualChannelData
     /tmp/cctx72nX.s:464    .text.DAC_SetDualChannelData:0000000000000014 $d
     /tmp/cctx72nX.s:469    .text.DAC_GetDataOutputValue:0000000000000000 $t
     /tmp/cctx72nX.s:476    .text.DAC_GetDataOutputValue:0000000000000000 DAC_GetDataOutputValue
     /tmp/cctx72nX.s:512    .text.DAC_GetDataOutputValue:0000000000000020 $d
     /tmp/cctx72nX.s:517    .text.DAC_DMACmd:0000000000000000 $t
     /tmp/cctx72nX.s:524    .text.DAC_DMACmd:0000000000000000 DAC_DMACmd
     /tmp/cctx72nX.s:560    .text.DAC_DMACmd:0000000000000028 $d
     /tmp/cctx72nX.s:565    .text.DAC_ITConfig:0000000000000000 $t
     /tmp/cctx72nX.s:572    .text.DAC_ITConfig:0000000000000000 DAC_ITConfig
     /tmp/cctx72nX.s:606    .text.DAC_ITConfig:000000000000001c $d
     /tmp/cctx72nX.s:611    .text.DAC_GetFlagStatus:0000000000000000 $t
     /tmp/cctx72nX.s:618    .text.DAC_GetFlagStatus:0000000000000000 DAC_GetFlagStatus
     /tmp/cctx72nX.s:647    .text.DAC_GetFlagStatus:0000000000000014 $d
     /tmp/cctx72nX.s:652    .text.DAC_ClearFlag:0000000000000000 $t
     /tmp/cctx72nX.s:659    .text.DAC_ClearFlag:0000000000000000 DAC_ClearFlag
     /tmp/cctx72nX.s:677    .text.DAC_ClearFlag:0000000000000008 $d
     /tmp/cctx72nX.s:682    .text.DAC_GetITStatus:0000000000000000 $t
     /tmp/cctx72nX.s:689    .text.DAC_GetITStatus:0000000000000000 DAC_GetITStatus
     /tmp/cctx72nX.s:729    .text.DAC_GetITStatus:000000000000001c $d
     /tmp/cctx72nX.s:734    .text.DAC_ClearITPendingBit:0000000000000000 $t
     /tmp/cctx72nX.s:741    .text.DAC_ClearITPendingBit:0000000000000000 DAC_ClearITPendingBit
     /tmp/cctx72nX.s:759    .text.DAC_ClearITPendingBit:0000000000000008 $d

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
