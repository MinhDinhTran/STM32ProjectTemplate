ARM GAS  /tmp/ccwrLD3d.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_fsmc.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.FSMC_NORSRAMDeInit,"ax",%progbits
  18              		.align	1
  19              		.global	FSMC_NORSRAMDeInit
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	FSMC_NORSRAMDeInit:
  26              	.LFB112:
  27              		.file 1 "./FWLIB/src/stm32f4xx_fsmc.c"
   1:./FWLIB/src/stm32f4xx_fsmc.c **** /**
   2:./FWLIB/src/stm32f4xx_fsmc.c ****   ******************************************************************************
   3:./FWLIB/src/stm32f4xx_fsmc.c ****   * @file    stm32f4xx_fsmc.c
   4:./FWLIB/src/stm32f4xx_fsmc.c ****   * @author  MCD Application Team
   5:./FWLIB/src/stm32f4xx_fsmc.c ****   * @version V1.4.0
   6:./FWLIB/src/stm32f4xx_fsmc.c ****   * @date    04-August-2014
   7:./FWLIB/src/stm32f4xx_fsmc.c ****  * @brief    This file provides firmware functions to manage the following 
   8:./FWLIB/src/stm32f4xx_fsmc.c ****   *          functionalities of the FSMC peripheral:           
   9:./FWLIB/src/stm32f4xx_fsmc.c ****   *           + Interface with SRAM, PSRAM, NOR and OneNAND memories
  10:./FWLIB/src/stm32f4xx_fsmc.c ****   *           + Interface with NAND memories
  11:./FWLIB/src/stm32f4xx_fsmc.c ****   *           + Interface with 16-bit PC Card compatible memories  
  12:./FWLIB/src/stm32f4xx_fsmc.c ****   *           + Interrupts and flags management   
  13:./FWLIB/src/stm32f4xx_fsmc.c ****   *           
  14:./FWLIB/src/stm32f4xx_fsmc.c ****   ******************************************************************************
  15:./FWLIB/src/stm32f4xx_fsmc.c ****   * @attention
  16:./FWLIB/src/stm32f4xx_fsmc.c ****   *
  17:./FWLIB/src/stm32f4xx_fsmc.c ****   * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
  18:./FWLIB/src/stm32f4xx_fsmc.c ****   *
  19:./FWLIB/src/stm32f4xx_fsmc.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  20:./FWLIB/src/stm32f4xx_fsmc.c ****   * You may not use this file except in compliance with the License.
  21:./FWLIB/src/stm32f4xx_fsmc.c ****   * You may obtain a copy of the License at:
  22:./FWLIB/src/stm32f4xx_fsmc.c ****   *
  23:./FWLIB/src/stm32f4xx_fsmc.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  24:./FWLIB/src/stm32f4xx_fsmc.c ****   *
  25:./FWLIB/src/stm32f4xx_fsmc.c ****   * Unless required by applicable law or agreed to in writing, software 
  26:./FWLIB/src/stm32f4xx_fsmc.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  27:./FWLIB/src/stm32f4xx_fsmc.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  28:./FWLIB/src/stm32f4xx_fsmc.c ****   * See the License for the specific language governing permissions and
  29:./FWLIB/src/stm32f4xx_fsmc.c ****   * limitations under the License.
  30:./FWLIB/src/stm32f4xx_fsmc.c ****   *
  31:./FWLIB/src/stm32f4xx_fsmc.c ****   ******************************************************************************
ARM GAS  /tmp/ccwrLD3d.s 			page 2


  32:./FWLIB/src/stm32f4xx_fsmc.c ****   */
  33:./FWLIB/src/stm32f4xx_fsmc.c **** 
  34:./FWLIB/src/stm32f4xx_fsmc.c **** /* Includes ------------------------------------------------------------------*/
  35:./FWLIB/src/stm32f4xx_fsmc.c **** #include "stm32f4xx_fsmc.h"
  36:./FWLIB/src/stm32f4xx_fsmc.c **** #include "stm32f4xx_rcc.h"
  37:./FWLIB/src/stm32f4xx_fsmc.c **** 
  38:./FWLIB/src/stm32f4xx_fsmc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  39:./FWLIB/src/stm32f4xx_fsmc.c ****   * @{
  40:./FWLIB/src/stm32f4xx_fsmc.c ****   */
  41:./FWLIB/src/stm32f4xx_fsmc.c **** 
  42:./FWLIB/src/stm32f4xx_fsmc.c **** /** @defgroup FSMC 
  43:./FWLIB/src/stm32f4xx_fsmc.c ****   * @brief FSMC driver modules
  44:./FWLIB/src/stm32f4xx_fsmc.c ****   * @{
  45:./FWLIB/src/stm32f4xx_fsmc.c ****   */ 
  46:./FWLIB/src/stm32f4xx_fsmc.c **** 
  47:./FWLIB/src/stm32f4xx_fsmc.c **** /* Private typedef -----------------------------------------------------------*/
  48:./FWLIB/src/stm32f4xx_fsmc.c **** const FSMC_NORSRAMTimingInitTypeDef FSMC_DefaultTimingStruct = {0x0F, /* FSMC_AddressSetupTime */
  49:./FWLIB/src/stm32f4xx_fsmc.c ****                                                                 0x0F, /* FSMC_AddressHoldTime */
  50:./FWLIB/src/stm32f4xx_fsmc.c ****                                                                 0xFF, /* FSMC_DataSetupTime */
  51:./FWLIB/src/stm32f4xx_fsmc.c ****                                                                 0x0F, /* FSMC_BusTurnAroundDuration
  52:./FWLIB/src/stm32f4xx_fsmc.c ****                                                                 0x0F, /* FSMC_CLKDivision */
  53:./FWLIB/src/stm32f4xx_fsmc.c ****                                                                 0x0F, /* FSMC_DataLatency */
  54:./FWLIB/src/stm32f4xx_fsmc.c ****                                                                 FSMC_AccessMode_A /* FSMC_AccessMod
  55:./FWLIB/src/stm32f4xx_fsmc.c ****                                                                };
  56:./FWLIB/src/stm32f4xx_fsmc.c **** /* Private define ------------------------------------------------------------*/
  57:./FWLIB/src/stm32f4xx_fsmc.c **** 
  58:./FWLIB/src/stm32f4xx_fsmc.c **** /* --------------------- FSMC registers bit mask ---------------------------- */
  59:./FWLIB/src/stm32f4xx_fsmc.c **** /* FSMC BCRx Mask */
  60:./FWLIB/src/stm32f4xx_fsmc.c **** #define BCR_MBKEN_SET          ((uint32_t)0x00000001)
  61:./FWLIB/src/stm32f4xx_fsmc.c **** #define BCR_MBKEN_RESET        ((uint32_t)0x000FFFFE)
  62:./FWLIB/src/stm32f4xx_fsmc.c **** #define BCR_FACCEN_SET         ((uint32_t)0x00000040)
  63:./FWLIB/src/stm32f4xx_fsmc.c **** 
  64:./FWLIB/src/stm32f4xx_fsmc.c **** /* FSMC PCRx Mask */
  65:./FWLIB/src/stm32f4xx_fsmc.c **** #define PCR_PBKEN_SET          ((uint32_t)0x00000004)
  66:./FWLIB/src/stm32f4xx_fsmc.c **** #define PCR_PBKEN_RESET        ((uint32_t)0x000FFFFB)
  67:./FWLIB/src/stm32f4xx_fsmc.c **** #define PCR_ECCEN_SET          ((uint32_t)0x00000040)
  68:./FWLIB/src/stm32f4xx_fsmc.c **** #define PCR_ECCEN_RESET        ((uint32_t)0x000FFFBF)
  69:./FWLIB/src/stm32f4xx_fsmc.c **** #define PCR_MEMORYTYPE_NAND    ((uint32_t)0x00000008)
  70:./FWLIB/src/stm32f4xx_fsmc.c **** 
  71:./FWLIB/src/stm32f4xx_fsmc.c **** /* Private macro -------------------------------------------------------------*/
  72:./FWLIB/src/stm32f4xx_fsmc.c **** /* Private variables ---------------------------------------------------------*/
  73:./FWLIB/src/stm32f4xx_fsmc.c **** /* Private function prototypes -----------------------------------------------*/
  74:./FWLIB/src/stm32f4xx_fsmc.c **** /* Private functions ---------------------------------------------------------*/
  75:./FWLIB/src/stm32f4xx_fsmc.c **** 
  76:./FWLIB/src/stm32f4xx_fsmc.c **** /** @defgroup FSMC_Private_Functions
  77:./FWLIB/src/stm32f4xx_fsmc.c ****   * @{
  78:./FWLIB/src/stm32f4xx_fsmc.c ****   */
  79:./FWLIB/src/stm32f4xx_fsmc.c **** 
  80:./FWLIB/src/stm32f4xx_fsmc.c **** /** @defgroup FSMC_Group1 NOR/SRAM Controller functions
  81:./FWLIB/src/stm32f4xx_fsmc.c ****  *  @brief   NOR/SRAM Controller functions 
  82:./FWLIB/src/stm32f4xx_fsmc.c ****  *
  83:./FWLIB/src/stm32f4xx_fsmc.c **** @verbatim   
  84:./FWLIB/src/stm32f4xx_fsmc.c ****  ===============================================================================
  85:./FWLIB/src/stm32f4xx_fsmc.c ****                     ##### NOR and SRAM Controller functions #####
  86:./FWLIB/src/stm32f4xx_fsmc.c ****  ===============================================================================  
  87:./FWLIB/src/stm32f4xx_fsmc.c **** 
  88:./FWLIB/src/stm32f4xx_fsmc.c ****  [..] The following sequence should be followed to configure the FSMC to interface
ARM GAS  /tmp/ccwrLD3d.s 			page 3


  89:./FWLIB/src/stm32f4xx_fsmc.c ****       with SRAM, PSRAM, NOR or OneNAND memory connected to the NOR/SRAM Bank:
  90:./FWLIB/src/stm32f4xx_fsmc.c ****  
  91:./FWLIB/src/stm32f4xx_fsmc.c ****    (#) Enable the clock for the FSMC and associated GPIOs using the following functions:
  92:./FWLIB/src/stm32f4xx_fsmc.c ****           RCC_AHB3PeriphClockCmd(RCC_AHB3Periph_FSMC, ENABLE);
  93:./FWLIB/src/stm32f4xx_fsmc.c ****           RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOx, ENABLE);
  94:./FWLIB/src/stm32f4xx_fsmc.c **** 
  95:./FWLIB/src/stm32f4xx_fsmc.c ****    (#) FSMC pins configuration 
  96:./FWLIB/src/stm32f4xx_fsmc.c ****        (++) Connect the involved FSMC pins to AF12 using the following function 
  97:./FWLIB/src/stm32f4xx_fsmc.c ****             GPIO_PinAFConfig(GPIOx, GPIO_PinSourcex, GPIO_AF_FSMC); 
  98:./FWLIB/src/stm32f4xx_fsmc.c ****        (++) Configure these FSMC pins in alternate function mode by calling the function
  99:./FWLIB/src/stm32f4xx_fsmc.c ****             GPIO_Init();    
 100:./FWLIB/src/stm32f4xx_fsmc.c ****        
 101:./FWLIB/src/stm32f4xx_fsmc.c ****    (#) Declare a FSMC_NORSRAMInitTypeDef structure, for example:
 102:./FWLIB/src/stm32f4xx_fsmc.c ****           FSMC_NORSRAMInitTypeDef  FSMC_NORSRAMInitStructure;
 103:./FWLIB/src/stm32f4xx_fsmc.c ****       and fill the FSMC_NORSRAMInitStructure variable with the allowed values of
 104:./FWLIB/src/stm32f4xx_fsmc.c ****       the structure member.
 105:./FWLIB/src/stm32f4xx_fsmc.c ****       
 106:./FWLIB/src/stm32f4xx_fsmc.c ****    (#) Initialize the NOR/SRAM Controller by calling the function
 107:./FWLIB/src/stm32f4xx_fsmc.c ****           FSMC_NORSRAMInit(&FSMC_NORSRAMInitStructure); 
 108:./FWLIB/src/stm32f4xx_fsmc.c **** 
 109:./FWLIB/src/stm32f4xx_fsmc.c ****    (#) Then enable the NOR/SRAM Bank, for example:
 110:./FWLIB/src/stm32f4xx_fsmc.c ****           FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM2, ENABLE);  
 111:./FWLIB/src/stm32f4xx_fsmc.c **** 
 112:./FWLIB/src/stm32f4xx_fsmc.c ****    (#) At this stage you can read/write from/to the memory connected to the NOR/SRAM Bank. 
 113:./FWLIB/src/stm32f4xx_fsmc.c ****    
 114:./FWLIB/src/stm32f4xx_fsmc.c **** @endverbatim
 115:./FWLIB/src/stm32f4xx_fsmc.c ****   * @{
 116:./FWLIB/src/stm32f4xx_fsmc.c ****   */
 117:./FWLIB/src/stm32f4xx_fsmc.c **** 
 118:./FWLIB/src/stm32f4xx_fsmc.c **** /**
 119:./FWLIB/src/stm32f4xx_fsmc.c ****   * @brief  De-initializes the FSMC NOR/SRAM Banks registers to their default 
 120:./FWLIB/src/stm32f4xx_fsmc.c ****   *   reset values.
 121:./FWLIB/src/stm32f4xx_fsmc.c ****   * @param  FSMC_Bank: specifies the FSMC Bank to be used
 122:./FWLIB/src/stm32f4xx_fsmc.c ****   *          This parameter can be one of the following values:
 123:./FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank1_NORSRAM1: FSMC Bank1 NOR/SRAM1  
 124:./FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank1_NORSRAM2: FSMC Bank1 NOR/SRAM2 
 125:./FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank1_NORSRAM3: FSMC Bank1 NOR/SRAM3 
 126:./FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank1_NORSRAM4: FSMC Bank1 NOR/SRAM4 
 127:./FWLIB/src/stm32f4xx_fsmc.c ****   * @retval None
 128:./FWLIB/src/stm32f4xx_fsmc.c ****   */
 129:./FWLIB/src/stm32f4xx_fsmc.c **** void FSMC_NORSRAMDeInit(uint32_t FSMC_Bank)
 130:./FWLIB/src/stm32f4xx_fsmc.c **** {
  28              		.loc 1 130 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
 131:./FWLIB/src/stm32f4xx_fsmc.c ****   /* Check the parameter */
 132:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
 133:./FWLIB/src/stm32f4xx_fsmc.c ****   
 134:./FWLIB/src/stm32f4xx_fsmc.c ****   /* FSMC_Bank1_NORSRAM1 */
 135:./FWLIB/src/stm32f4xx_fsmc.c ****   if(FSMC_Bank == FSMC_Bank1_NORSRAM1)
  34              		.loc 1 135 0
  35 0000 0346     		mov	r3, r0
  36 0002 88B1     		cbz	r0, .L4
 136:./FWLIB/src/stm32f4xx_fsmc.c ****   {
ARM GAS  /tmp/ccwrLD3d.s 			page 4


 137:./FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030DB;    
 138:./FWLIB/src/stm32f4xx_fsmc.c ****   }
 139:./FWLIB/src/stm32f4xx_fsmc.c ****   /* FSMC_Bank1_NORSRAM2,  FSMC_Bank1_NORSRAM3 or FSMC_Bank1_NORSRAM4 */
 140:./FWLIB/src/stm32f4xx_fsmc.c ****   else
 141:./FWLIB/src/stm32f4xx_fsmc.c ****   {   
 142:./FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030D2; 
  37              		.loc 1 142 0
  38 0004 4FF02042 		mov	r2, #-1610612736
  39 0008 43F2D201 		movw	r1, #12498
  40 000c 42F82010 		str	r1, [r2, r0, lsl #2]
  41              	.L3:
 143:./FWLIB/src/stm32f4xx_fsmc.c ****   }
 144:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_Bank1->BTCR[FSMC_Bank + 1] = 0x0FFFFFFF;
  42              		.loc 1 144 0
  43 0010 581C     		adds	r0, r3, #1
  44              	.LVL1:
  45 0012 6FF07042 		mvn	r2, #-268435456
  46 0016 4FF02041 		mov	r1, #-1610612736
  47 001a 41F82020 		str	r2, [r1, r0, lsl #2]
 145:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_Bank1E->BWTR[FSMC_Bank] = 0x0FFFFFFF;  
  48              		.loc 1 145 0
  49 001e 01F58271 		add	r1, r1, #260
  50 0022 41F82320 		str	r2, [r1, r3, lsl #2]
 146:./FWLIB/src/stm32f4xx_fsmc.c **** }
  51              		.loc 1 146 0
  52 0026 7047     		bx	lr
  53              	.LVL2:
  54              	.L4:
 137:./FWLIB/src/stm32f4xx_fsmc.c ****   }
  55              		.loc 1 137 0
  56 0028 4FF02042 		mov	r2, #-1610612736
  57 002c 43F2DB01 		movw	r1, #12507
  58 0030 42F82010 		str	r1, [r2, r0, lsl #2]
  59 0034 ECE7     		b	.L3
  60              		.cfi_endproc
  61              	.LFE112:
  63              		.section	.text.FSMC_NORSRAMInit,"ax",%progbits
  64              		.align	1
  65              		.global	FSMC_NORSRAMInit
  66              		.syntax unified
  67              		.thumb
  68              		.thumb_func
  69              		.fpu fpv4-sp-d16
  71              	FSMC_NORSRAMInit:
  72              	.LFB113:
 147:./FWLIB/src/stm32f4xx_fsmc.c **** 
 148:./FWLIB/src/stm32f4xx_fsmc.c **** /**
 149:./FWLIB/src/stm32f4xx_fsmc.c ****   * @brief  Initializes the FSMC NOR/SRAM Banks according to the specified
 150:./FWLIB/src/stm32f4xx_fsmc.c ****   *         parameters in the FSMC_NORSRAMInitStruct.
 151:./FWLIB/src/stm32f4xx_fsmc.c ****   * @param  FSMC_NORSRAMInitStruct : pointer to a FSMC_NORSRAMInitTypeDef structure
 152:./FWLIB/src/stm32f4xx_fsmc.c ****   *         that contains the configuration information for the FSMC NOR/SRAM 
 153:./FWLIB/src/stm32f4xx_fsmc.c ****   *         specified Banks.                       
 154:./FWLIB/src/stm32f4xx_fsmc.c ****   * @retval None
 155:./FWLIB/src/stm32f4xx_fsmc.c ****   */
 156:./FWLIB/src/stm32f4xx_fsmc.c **** void FSMC_NORSRAMInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
 157:./FWLIB/src/stm32f4xx_fsmc.c **** { 
  73              		.loc 1 157 0
ARM GAS  /tmp/ccwrLD3d.s 			page 5


  74              		.cfi_startproc
  75              		@ args = 0, pretend = 0, frame = 0
  76              		@ frame_needed = 0, uses_anonymous_args = 0
  77              		@ link register save eliminated.
  78              	.LVL3:
 158:./FWLIB/src/stm32f4xx_fsmc.c ****   /* Check the parameters */
 159:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_NORSRAM_BANK(FSMC_NORSRAMInitStruct->FSMC_Bank));
 160:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_MUX(FSMC_NORSRAMInitStruct->FSMC_DataAddressMux));
 161:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_MEMORY(FSMC_NORSRAMInitStruct->FSMC_MemoryType));
 162:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_MEMORY_WIDTH(FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth));
 163:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_BURSTMODE(FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode));
 164:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_ASYNWAIT(FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait));
 165:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_WAIT_POLARITY(FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity));
 166:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_WRAP_MODE(FSMC_NORSRAMInitStruct->FSMC_WrapMode));
 167:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_WAIT_SIGNAL_ACTIVE(FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive));
 168:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_WRITE_OPERATION(FSMC_NORSRAMInitStruct->FSMC_WriteOperation));
 169:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_WAITE_SIGNAL(FSMC_NORSRAMInitStruct->FSMC_WaitSignal));
 170:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_EXTENDED_MODE(FSMC_NORSRAMInitStruct->FSMC_ExtendedMode));
 171:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_WRITE_BURST(FSMC_NORSRAMInitStruct->FSMC_WriteBurst));  
 172:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_ADDRESS_SETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_
 173:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_ADDRESS_HOLD_TIME(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_A
 174:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_Data
 175:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_TURNAROUND_TIME(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_Bus
 176:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision
 177:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLa
 178:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessM
 179:./FWLIB/src/stm32f4xx_fsmc.c ****   
 180:./FWLIB/src/stm32f4xx_fsmc.c ****   /* Bank1 NOR/SRAM control register configuration */ 
 181:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 182:./FWLIB/src/stm32f4xx_fsmc.c ****             (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
  79              		.loc 1 182 0
  80 0000 4368     		ldr	r3, [r0, #4]
 183:./FWLIB/src/stm32f4xx_fsmc.c ****             FSMC_NORSRAMInitStruct->FSMC_MemoryType |
  81              		.loc 1 183 0
  82 0002 8268     		ldr	r2, [r0, #8]
 182:./FWLIB/src/stm32f4xx_fsmc.c ****             FSMC_NORSRAMInitStruct->FSMC_MemoryType |
  83              		.loc 1 182 0
  84 0004 1343     		orrs	r3, r3, r2
 184:./FWLIB/src/stm32f4xx_fsmc.c ****             FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
  85              		.loc 1 184 0
  86 0006 C268     		ldr	r2, [r0, #12]
 183:./FWLIB/src/stm32f4xx_fsmc.c ****             FSMC_NORSRAMInitStruct->FSMC_MemoryType |
  87              		.loc 1 183 0
  88 0008 1343     		orrs	r3, r3, r2
 185:./FWLIB/src/stm32f4xx_fsmc.c ****             FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
  89              		.loc 1 185 0
  90 000a 0269     		ldr	r2, [r0, #16]
 184:./FWLIB/src/stm32f4xx_fsmc.c ****             FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
  91              		.loc 1 184 0
  92 000c 1343     		orrs	r3, r3, r2
 186:./FWLIB/src/stm32f4xx_fsmc.c ****             FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
  93              		.loc 1 186 0
  94 000e 4269     		ldr	r2, [r0, #20]
 185:./FWLIB/src/stm32f4xx_fsmc.c ****             FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
  95              		.loc 1 185 0
  96 0010 1343     		orrs	r3, r3, r2
 187:./FWLIB/src/stm32f4xx_fsmc.c ****             FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
ARM GAS  /tmp/ccwrLD3d.s 			page 6


  97              		.loc 1 187 0
  98 0012 8269     		ldr	r2, [r0, #24]
 186:./FWLIB/src/stm32f4xx_fsmc.c ****             FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
  99              		.loc 1 186 0
 100 0014 1343     		orrs	r3, r3, r2
 188:./FWLIB/src/stm32f4xx_fsmc.c ****             FSMC_NORSRAMInitStruct->FSMC_WrapMode |
 101              		.loc 1 188 0
 102 0016 C269     		ldr	r2, [r0, #28]
 187:./FWLIB/src/stm32f4xx_fsmc.c ****             FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
 103              		.loc 1 187 0
 104 0018 1343     		orrs	r3, r3, r2
 189:./FWLIB/src/stm32f4xx_fsmc.c ****             FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
 105              		.loc 1 189 0
 106 001a 026A     		ldr	r2, [r0, #32]
 188:./FWLIB/src/stm32f4xx_fsmc.c ****             FSMC_NORSRAMInitStruct->FSMC_WrapMode |
 107              		.loc 1 188 0
 108 001c 1343     		orrs	r3, r3, r2
 190:./FWLIB/src/stm32f4xx_fsmc.c ****             FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
 109              		.loc 1 190 0
 110 001e 426A     		ldr	r2, [r0, #36]
 189:./FWLIB/src/stm32f4xx_fsmc.c ****             FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
 111              		.loc 1 189 0
 112 0020 1343     		orrs	r3, r3, r2
 191:./FWLIB/src/stm32f4xx_fsmc.c ****             FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
 113              		.loc 1 191 0
 114 0022 826A     		ldr	r2, [r0, #40]
 190:./FWLIB/src/stm32f4xx_fsmc.c ****             FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
 115              		.loc 1 190 0
 116 0024 1343     		orrs	r3, r3, r2
 192:./FWLIB/src/stm32f4xx_fsmc.c ****             FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 117              		.loc 1 192 0
 118 0026 C26A     		ldr	r2, [r0, #44]
 191:./FWLIB/src/stm32f4xx_fsmc.c ****             FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
 119              		.loc 1 191 0
 120 0028 1343     		orrs	r3, r3, r2
 193:./FWLIB/src/stm32f4xx_fsmc.c ****             FSMC_NORSRAMInitStruct->FSMC_WriteBurst;
 121              		.loc 1 193 0
 122 002a 026B     		ldr	r2, [r0, #48]
 181:./FWLIB/src/stm32f4xx_fsmc.c ****             (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
 123              		.loc 1 181 0
 124 002c 0168     		ldr	r1, [r0]
 192:./FWLIB/src/stm32f4xx_fsmc.c ****             FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 125              		.loc 1 192 0
 126 002e 1343     		orrs	r3, r3, r2
 181:./FWLIB/src/stm32f4xx_fsmc.c ****             (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
 127              		.loc 1 181 0
 128 0030 4FF02042 		mov	r2, #-1610612736
 129 0034 42F82130 		str	r3, [r2, r1, lsl #2]
 194:./FWLIB/src/stm32f4xx_fsmc.c ****   if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
 130              		.loc 1 194 0
 131 0038 8368     		ldr	r3, [r0, #8]
 132 003a 082B     		cmp	r3, #8
 133 003c 23D0     		beq	.L9
 134              	.L6:
 195:./FWLIB/src/stm32f4xx_fsmc.c ****   {
 196:./FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
 197:./FWLIB/src/stm32f4xx_fsmc.c ****   }
ARM GAS  /tmp/ccwrLD3d.s 			page 7


 198:./FWLIB/src/stm32f4xx_fsmc.c ****   /* Bank1 NOR/SRAM timing register configuration */
 199:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
 200:./FWLIB/src/stm32f4xx_fsmc.c ****             (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
 135              		.loc 1 200 0
 136 003e 426B     		ldr	r2, [r0, #52]
 137 0040 1368     		ldr	r3, [r2]
 201:./FWLIB/src/stm32f4xx_fsmc.c ****             (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
 138              		.loc 1 201 0
 139 0042 5168     		ldr	r1, [r2, #4]
 200:./FWLIB/src/stm32f4xx_fsmc.c ****             (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
 140              		.loc 1 200 0
 141 0044 43EA0113 		orr	r3, r3, r1, lsl #4
 202:./FWLIB/src/stm32f4xx_fsmc.c ****             (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
 142              		.loc 1 202 0
 143 0048 9168     		ldr	r1, [r2, #8]
 201:./FWLIB/src/stm32f4xx_fsmc.c ****             (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
 144              		.loc 1 201 0
 145 004a 43EA0123 		orr	r3, r3, r1, lsl #8
 203:./FWLIB/src/stm32f4xx_fsmc.c ****             (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) 
 146              		.loc 1 203 0
 147 004e D168     		ldr	r1, [r2, #12]
 202:./FWLIB/src/stm32f4xx_fsmc.c ****             (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
 148              		.loc 1 202 0
 149 0050 43EA0143 		orr	r3, r3, r1, lsl #16
 204:./FWLIB/src/stm32f4xx_fsmc.c ****             (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
 150              		.loc 1 204 0
 151 0054 1169     		ldr	r1, [r2, #16]
 203:./FWLIB/src/stm32f4xx_fsmc.c ****             (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) 
 152              		.loc 1 203 0
 153 0056 43EA0153 		orr	r3, r3, r1, lsl #20
 205:./FWLIB/src/stm32f4xx_fsmc.c ****             (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
 154              		.loc 1 205 0
 155 005a 5169     		ldr	r1, [r2, #20]
 204:./FWLIB/src/stm32f4xx_fsmc.c ****             (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
 156              		.loc 1 204 0
 157 005c 43EA0163 		orr	r3, r3, r1, lsl #24
 206:./FWLIB/src/stm32f4xx_fsmc.c ****              FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode;
 158              		.loc 1 206 0
 159 0060 9169     		ldr	r1, [r2, #24]
 199:./FWLIB/src/stm32f4xx_fsmc.c ****             (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
 160              		.loc 1 199 0
 161 0062 0268     		ldr	r2, [r0]
 162 0064 0132     		adds	r2, r2, #1
 205:./FWLIB/src/stm32f4xx_fsmc.c ****             (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
 163              		.loc 1 205 0
 164 0066 0B43     		orrs	r3, r3, r1
 199:./FWLIB/src/stm32f4xx_fsmc.c ****             (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
 165              		.loc 1 199 0
 166 0068 4FF02041 		mov	r1, #-1610612736
 167 006c 41F82230 		str	r3, [r1, r2, lsl #2]
 207:./FWLIB/src/stm32f4xx_fsmc.c ****             
 208:./FWLIB/src/stm32f4xx_fsmc.c ****     
 209:./FWLIB/src/stm32f4xx_fsmc.c ****   /* Bank1 NOR/SRAM timing register for write configuration, if extended mode is used */
 210:./FWLIB/src/stm32f4xx_fsmc.c ****   if(FSMC_NORSRAMInitStruct->FSMC_ExtendedMode == FSMC_ExtendedMode_Enable)
 168              		.loc 1 210 0
 169 0070 C36A     		ldr	r3, [r0, #44]
 170 0072 B3F5804F 		cmp	r3, #16384
ARM GAS  /tmp/ccwrLD3d.s 			page 8


 171 0076 0ED0     		beq	.L10
 211:./FWLIB/src/stm32f4xx_fsmc.c ****   {
 212:./FWLIB/src/stm32f4xx_fsmc.c ****     assert_param(IS_FSMC_ADDRESS_SETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_Ad
 213:./FWLIB/src/stm32f4xx_fsmc.c ****     assert_param(IS_FSMC_ADDRESS_HOLD_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_Add
 214:./FWLIB/src/stm32f4xx_fsmc.c ****     assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSe
 215:./FWLIB/src/stm32f4xx_fsmc.c ****     assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision))
 216:./FWLIB/src/stm32f4xx_fsmc.c ****     assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLate
 217:./FWLIB/src/stm32f4xx_fsmc.c ****     assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMod
 218:./FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 219:./FWLIB/src/stm32f4xx_fsmc.c ****               (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
 220:./FWLIB/src/stm32f4xx_fsmc.c ****               (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
 221:./FWLIB/src/stm32f4xx_fsmc.c ****               (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
 222:./FWLIB/src/stm32f4xx_fsmc.c ****               (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
 223:./FWLIB/src/stm32f4xx_fsmc.c ****               (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
 224:./FWLIB/src/stm32f4xx_fsmc.c ****                FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode;
 225:./FWLIB/src/stm32f4xx_fsmc.c ****   }
 226:./FWLIB/src/stm32f4xx_fsmc.c ****   else
 227:./FWLIB/src/stm32f4xx_fsmc.c ****   {
 228:./FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 0x0FFFFFFF;
 172              		.loc 1 228 0
 173 0078 0268     		ldr	r2, [r0]
 174 007a 114B     		ldr	r3, .L11
 175 007c 6FF07041 		mvn	r1, #-268435456
 176 0080 43F82210 		str	r1, [r3, r2, lsl #2]
 229:./FWLIB/src/stm32f4xx_fsmc.c ****   }
 230:./FWLIB/src/stm32f4xx_fsmc.c **** }
 177              		.loc 1 230 0
 178 0084 7047     		bx	lr
 179              	.L9:
 196:./FWLIB/src/stm32f4xx_fsmc.c ****   }
 180              		.loc 1 196 0
 181 0086 0168     		ldr	r1, [r0]
 182 0088 52F82130 		ldr	r3, [r2, r1, lsl #2]
 183 008c 43F04003 		orr	r3, r3, #64
 184 0090 42F82130 		str	r3, [r2, r1, lsl #2]
 185 0094 D3E7     		b	.L6
 186              	.L10:
 219:./FWLIB/src/stm32f4xx_fsmc.c ****               (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
 187              		.loc 1 219 0
 188 0096 826B     		ldr	r2, [r0, #56]
 189 0098 1368     		ldr	r3, [r2]
 220:./FWLIB/src/stm32f4xx_fsmc.c ****               (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
 190              		.loc 1 220 0
 191 009a 5168     		ldr	r1, [r2, #4]
 219:./FWLIB/src/stm32f4xx_fsmc.c ****               (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
 192              		.loc 1 219 0
 193 009c 43EA0113 		orr	r3, r3, r1, lsl #4
 221:./FWLIB/src/stm32f4xx_fsmc.c ****               (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
 194              		.loc 1 221 0
 195 00a0 9168     		ldr	r1, [r2, #8]
 220:./FWLIB/src/stm32f4xx_fsmc.c ****               (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
 196              		.loc 1 220 0
 197 00a2 43EA0123 		orr	r3, r3, r1, lsl #8
 222:./FWLIB/src/stm32f4xx_fsmc.c ****               (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
 198              		.loc 1 222 0
 199 00a6 1169     		ldr	r1, [r2, #16]
 221:./FWLIB/src/stm32f4xx_fsmc.c ****               (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
ARM GAS  /tmp/ccwrLD3d.s 			page 9


 200              		.loc 1 221 0
 201 00a8 43EA0153 		orr	r3, r3, r1, lsl #20
 223:./FWLIB/src/stm32f4xx_fsmc.c ****                FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode;
 202              		.loc 1 223 0
 203 00ac 5169     		ldr	r1, [r2, #20]
 222:./FWLIB/src/stm32f4xx_fsmc.c ****               (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
 204              		.loc 1 222 0
 205 00ae 43EA0163 		orr	r3, r3, r1, lsl #24
 224:./FWLIB/src/stm32f4xx_fsmc.c ****   }
 206              		.loc 1 224 0
 207 00b2 9269     		ldr	r2, [r2, #24]
 218:./FWLIB/src/stm32f4xx_fsmc.c ****               (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
 208              		.loc 1 218 0
 209 00b4 0168     		ldr	r1, [r0]
 223:./FWLIB/src/stm32f4xx_fsmc.c ****                FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode;
 210              		.loc 1 223 0
 211 00b6 1343     		orrs	r3, r3, r2
 218:./FWLIB/src/stm32f4xx_fsmc.c ****               (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
 212              		.loc 1 218 0
 213 00b8 014A     		ldr	r2, .L11
 214 00ba 42F82130 		str	r3, [r2, r1, lsl #2]
 215 00be 7047     		bx	lr
 216              	.L12:
 217              		.align	2
 218              	.L11:
 219 00c0 040100A0 		.word	-1610612476
 220              		.cfi_endproc
 221              	.LFE113:
 223              		.section	.text.FSMC_NORSRAMStructInit,"ax",%progbits
 224              		.align	1
 225              		.global	FSMC_NORSRAMStructInit
 226              		.syntax unified
 227              		.thumb
 228              		.thumb_func
 229              		.fpu fpv4-sp-d16
 231              	FSMC_NORSRAMStructInit:
 232              	.LFB114:
 231:./FWLIB/src/stm32f4xx_fsmc.c **** 
 232:./FWLIB/src/stm32f4xx_fsmc.c **** /**
 233:./FWLIB/src/stm32f4xx_fsmc.c ****   * @brief  Fills each FSMC_NORSRAMInitStruct member with its default value.
 234:./FWLIB/src/stm32f4xx_fsmc.c ****   * @param  FSMC_NORSRAMInitStruct: pointer to a FSMC_NORSRAMInitTypeDef structure 
 235:./FWLIB/src/stm32f4xx_fsmc.c ****   *         which will be initialized.
 236:./FWLIB/src/stm32f4xx_fsmc.c ****   * @retval None
 237:./FWLIB/src/stm32f4xx_fsmc.c ****   */
 238:./FWLIB/src/stm32f4xx_fsmc.c **** void FSMC_NORSRAMStructInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
 239:./FWLIB/src/stm32f4xx_fsmc.c **** {  
 233              		.loc 1 239 0
 234              		.cfi_startproc
 235              		@ args = 0, pretend = 0, frame = 0
 236              		@ frame_needed = 0, uses_anonymous_args = 0
 237              		@ link register save eliminated.
 238              	.LVL4:
 240:./FWLIB/src/stm32f4xx_fsmc.c ****   /* Reset NOR/SRAM Init structure parameters values */
 241:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NORSRAMInitStruct->FSMC_Bank = FSMC_Bank1_NORSRAM1;
 239              		.loc 1 241 0
 240 0000 0023     		movs	r3, #0
 241 0002 0360     		str	r3, [r0]
ARM GAS  /tmp/ccwrLD3d.s 			page 10


 242:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NORSRAMInitStruct->FSMC_DataAddressMux = FSMC_DataAddressMux_Enable;
 242              		.loc 1 242 0
 243 0004 0222     		movs	r2, #2
 244 0006 4260     		str	r2, [r0, #4]
 243:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NORSRAMInitStruct->FSMC_MemoryType = FSMC_MemoryType_SRAM;
 245              		.loc 1 243 0
 246 0008 8360     		str	r3, [r0, #8]
 244:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
 247              		.loc 1 244 0
 248 000a C360     		str	r3, [r0, #12]
 245:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
 249              		.loc 1 245 0
 250 000c 0361     		str	r3, [r0, #16]
 246:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
 251              		.loc 1 246 0
 252 000e 4361     		str	r3, [r0, #20]
 247:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
 253              		.loc 1 247 0
 254 0010 8361     		str	r3, [r0, #24]
 248:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NORSRAMInitStruct->FSMC_WrapMode = FSMC_WrapMode_Disable;
 255              		.loc 1 248 0
 256 0012 C361     		str	r3, [r0, #28]
 249:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
 257              		.loc 1 249 0
 258 0014 0362     		str	r3, [r0, #32]
 250:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NORSRAMInitStruct->FSMC_WriteOperation = FSMC_WriteOperation_Enable;
 259              		.loc 1 250 0
 260 0016 4FF48052 		mov	r2, #4096
 261 001a 4262     		str	r2, [r0, #36]
 251:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NORSRAMInitStruct->FSMC_WaitSignal = FSMC_WaitSignal_Enable;
 262              		.loc 1 251 0
 263 001c 4FF40052 		mov	r2, #8192
 264 0020 8262     		str	r2, [r0, #40]
 252:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NORSRAMInitStruct->FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
 265              		.loc 1 252 0
 266 0022 C362     		str	r3, [r0, #44]
 253:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NORSRAMInitStruct->FSMC_WriteBurst = FSMC_WriteBurst_Disable;
 267              		.loc 1 253 0
 268 0024 0363     		str	r3, [r0, #48]
 254:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct = (FSMC_NORSRAMTimingInitTypeDef*)&FSMC_Defaul
 269              		.loc 1 254 0
 270 0026 024B     		ldr	r3, .L14
 271 0028 4363     		str	r3, [r0, #52]
 255:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct = (FSMC_NORSRAMTimingInitTypeDef*)&FSMC_DefaultTim
 272              		.loc 1 255 0
 273 002a 8363     		str	r3, [r0, #56]
 256:./FWLIB/src/stm32f4xx_fsmc.c **** }
 274              		.loc 1 256 0
 275 002c 7047     		bx	lr
 276              	.L15:
 277 002e 00BF     		.align	2
 278              	.L14:
 279 0030 00000000 		.word	.LANCHOR0
 280              		.cfi_endproc
 281              	.LFE114:
 283              		.section	.text.FSMC_NORSRAMCmd,"ax",%progbits
 284              		.align	1
ARM GAS  /tmp/ccwrLD3d.s 			page 11


 285              		.global	FSMC_NORSRAMCmd
 286              		.syntax unified
 287              		.thumb
 288              		.thumb_func
 289              		.fpu fpv4-sp-d16
 291              	FSMC_NORSRAMCmd:
 292              	.LFB115:
 257:./FWLIB/src/stm32f4xx_fsmc.c **** 
 258:./FWLIB/src/stm32f4xx_fsmc.c **** /**
 259:./FWLIB/src/stm32f4xx_fsmc.c ****   * @brief  Enables or disables the specified NOR/SRAM Memory Bank.
 260:./FWLIB/src/stm32f4xx_fsmc.c ****   * @param  FSMC_Bank: specifies the FSMC Bank to be used
 261:./FWLIB/src/stm32f4xx_fsmc.c ****   *          This parameter can be one of the following values:
 262:./FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank1_NORSRAM1: FSMC Bank1 NOR/SRAM1  
 263:./FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank1_NORSRAM2: FSMC Bank1 NOR/SRAM2 
 264:./FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank1_NORSRAM3: FSMC Bank1 NOR/SRAM3 
 265:./FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank1_NORSRAM4: FSMC Bank1 NOR/SRAM4 
 266:./FWLIB/src/stm32f4xx_fsmc.c ****   * @param  NewState: new state of the FSMC_Bank. This parameter can be: ENABLE or DISABLE.
 267:./FWLIB/src/stm32f4xx_fsmc.c ****   * @retval None
 268:./FWLIB/src/stm32f4xx_fsmc.c ****   */
 269:./FWLIB/src/stm32f4xx_fsmc.c **** void FSMC_NORSRAMCmd(uint32_t FSMC_Bank, FunctionalState NewState)
 270:./FWLIB/src/stm32f4xx_fsmc.c **** {
 293              		.loc 1 270 0
 294              		.cfi_startproc
 295              		@ args = 0, pretend = 0, frame = 0
 296              		@ frame_needed = 0, uses_anonymous_args = 0
 297              		@ link register save eliminated.
 298              	.LVL5:
 271:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
 272:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 273:./FWLIB/src/stm32f4xx_fsmc.c ****   
 274:./FWLIB/src/stm32f4xx_fsmc.c ****   if (NewState != DISABLE)
 299              		.loc 1 274 0
 300 0000 41B9     		cbnz	r1, .L19
 275:./FWLIB/src/stm32f4xx_fsmc.c ****   {
 276:./FWLIB/src/stm32f4xx_fsmc.c ****     /* Enable the selected NOR/SRAM Bank by setting the PBKEN bit in the BCRx register */
 277:./FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank1->BTCR[FSMC_Bank] |= BCR_MBKEN_SET;
 278:./FWLIB/src/stm32f4xx_fsmc.c ****   }
 279:./FWLIB/src/stm32f4xx_fsmc.c ****   else
 280:./FWLIB/src/stm32f4xx_fsmc.c ****   {
 281:./FWLIB/src/stm32f4xx_fsmc.c ****     /* Disable the selected NOR/SRAM Bank by clearing the PBKEN bit in the BCRx register */
 282:./FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank1->BTCR[FSMC_Bank] &= BCR_MBKEN_RESET;
 301              		.loc 1 282 0
 302 0002 4FF02042 		mov	r2, #-1610612736
 303 0006 52F82010 		ldr	r1, [r2, r0, lsl #2]
 304              	.LVL6:
 305 000a 074B     		ldr	r3, .L20
 306 000c 0B40     		ands	r3, r3, r1
 307 000e 42F82030 		str	r3, [r2, r0, lsl #2]
 283:./FWLIB/src/stm32f4xx_fsmc.c ****   }
 284:./FWLIB/src/stm32f4xx_fsmc.c **** }
 308              		.loc 1 284 0
 309 0012 7047     		bx	lr
 310              	.LVL7:
 311              	.L19:
 277:./FWLIB/src/stm32f4xx_fsmc.c ****   }
 312              		.loc 1 277 0
 313 0014 4FF02042 		mov	r2, #-1610612736
ARM GAS  /tmp/ccwrLD3d.s 			page 12


 314 0018 52F82030 		ldr	r3, [r2, r0, lsl #2]
 315 001c 43F00103 		orr	r3, r3, #1
 316 0020 42F82030 		str	r3, [r2, r0, lsl #2]
 317 0024 7047     		bx	lr
 318              	.L21:
 319 0026 00BF     		.align	2
 320              	.L20:
 321 0028 FEFF0F00 		.word	1048574
 322              		.cfi_endproc
 323              	.LFE115:
 325              		.section	.text.FSMC_NANDDeInit,"ax",%progbits
 326              		.align	1
 327              		.global	FSMC_NANDDeInit
 328              		.syntax unified
 329              		.thumb
 330              		.thumb_func
 331              		.fpu fpv4-sp-d16
 333              	FSMC_NANDDeInit:
 334              	.LFB116:
 285:./FWLIB/src/stm32f4xx_fsmc.c **** /**
 286:./FWLIB/src/stm32f4xx_fsmc.c ****   * @}
 287:./FWLIB/src/stm32f4xx_fsmc.c ****   */
 288:./FWLIB/src/stm32f4xx_fsmc.c **** 
 289:./FWLIB/src/stm32f4xx_fsmc.c **** /** @defgroup FSMC_Group2 NAND Controller functions
 290:./FWLIB/src/stm32f4xx_fsmc.c ****  *  @brief   NAND Controller functions 
 291:./FWLIB/src/stm32f4xx_fsmc.c ****  *
 292:./FWLIB/src/stm32f4xx_fsmc.c **** @verbatim   
 293:./FWLIB/src/stm32f4xx_fsmc.c ****  ===============================================================================
 294:./FWLIB/src/stm32f4xx_fsmc.c ****                     ##### NAND Controller functions #####
 295:./FWLIB/src/stm32f4xx_fsmc.c ****  ===============================================================================  
 296:./FWLIB/src/stm32f4xx_fsmc.c **** 
 297:./FWLIB/src/stm32f4xx_fsmc.c ****  [..]  The following sequence should be followed to configure the FSMC to interface 
 298:./FWLIB/src/stm32f4xx_fsmc.c ****        with 8-bit or 16-bit NAND memory connected to the NAND Bank:
 299:./FWLIB/src/stm32f4xx_fsmc.c ****  
 300:./FWLIB/src/stm32f4xx_fsmc.c ****   (#) Enable the clock for the FSMC and associated GPIOs using the following functions:
 301:./FWLIB/src/stm32f4xx_fsmc.c ****       (++)  RCC_AHB3PeriphClockCmd(RCC_AHB3Periph_FSMC, ENABLE);
 302:./FWLIB/src/stm32f4xx_fsmc.c ****       (++)  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOx, ENABLE);
 303:./FWLIB/src/stm32f4xx_fsmc.c **** 
 304:./FWLIB/src/stm32f4xx_fsmc.c ****   (#) FSMC pins configuration 
 305:./FWLIB/src/stm32f4xx_fsmc.c ****       (++) Connect the involved FSMC pins to AF12 using the following function 
 306:./FWLIB/src/stm32f4xx_fsmc.c ****            GPIO_PinAFConfig(GPIOx, GPIO_PinSourcex, GPIO_AF_FSMC); 
 307:./FWLIB/src/stm32f4xx_fsmc.c ****       (++) Configure these FSMC pins in alternate function mode by calling the function
 308:./FWLIB/src/stm32f4xx_fsmc.c ****            GPIO_Init();    
 309:./FWLIB/src/stm32f4xx_fsmc.c ****        
 310:./FWLIB/src/stm32f4xx_fsmc.c ****   (#) Declare a FSMC_NANDInitTypeDef structure, for example:
 311:./FWLIB/src/stm32f4xx_fsmc.c ****       FSMC_NANDInitTypeDef  FSMC_NANDInitStructure;
 312:./FWLIB/src/stm32f4xx_fsmc.c ****       and fill the FSMC_NANDInitStructure variable with the allowed values of
 313:./FWLIB/src/stm32f4xx_fsmc.c ****       the structure member.
 314:./FWLIB/src/stm32f4xx_fsmc.c ****       
 315:./FWLIB/src/stm32f4xx_fsmc.c ****   (#) Initialize the NAND Controller by calling the function
 316:./FWLIB/src/stm32f4xx_fsmc.c ****       FSMC_NANDInit(&FSMC_NANDInitStructure); 
 317:./FWLIB/src/stm32f4xx_fsmc.c **** 
 318:./FWLIB/src/stm32f4xx_fsmc.c ****   (#) Then enable the NAND Bank, for example:
 319:./FWLIB/src/stm32f4xx_fsmc.c ****       FSMC_NANDCmd(FSMC_Bank3_NAND, ENABLE);  
 320:./FWLIB/src/stm32f4xx_fsmc.c **** 
 321:./FWLIB/src/stm32f4xx_fsmc.c ****   (#) At this stage you can read/write from/to the memory connected to the NAND Bank. 
 322:./FWLIB/src/stm32f4xx_fsmc.c ****    
ARM GAS  /tmp/ccwrLD3d.s 			page 13


 323:./FWLIB/src/stm32f4xx_fsmc.c ****  [..]
 324:./FWLIB/src/stm32f4xx_fsmc.c ****   (@) To enable the Error Correction Code (ECC), you have to use the function
 325:./FWLIB/src/stm32f4xx_fsmc.c ****       FSMC_NANDECCCmd(FSMC_Bank3_NAND, ENABLE);  
 326:./FWLIB/src/stm32f4xx_fsmc.c ****  [..]
 327:./FWLIB/src/stm32f4xx_fsmc.c ****   (@) and to get the current ECC value you have to use the function
 328:./FWLIB/src/stm32f4xx_fsmc.c ****       ECCval = FSMC_GetECC(FSMC_Bank3_NAND); 
 329:./FWLIB/src/stm32f4xx_fsmc.c **** 
 330:./FWLIB/src/stm32f4xx_fsmc.c **** @endverbatim
 331:./FWLIB/src/stm32f4xx_fsmc.c ****   * @{
 332:./FWLIB/src/stm32f4xx_fsmc.c ****   */
 333:./FWLIB/src/stm32f4xx_fsmc.c ****   
 334:./FWLIB/src/stm32f4xx_fsmc.c **** /**
 335:./FWLIB/src/stm32f4xx_fsmc.c ****   * @brief  De-initializes the FSMC NAND Banks registers to their default reset values.
 336:./FWLIB/src/stm32f4xx_fsmc.c ****   * @param  FSMC_Bank: specifies the FSMC Bank to be used
 337:./FWLIB/src/stm32f4xx_fsmc.c ****   *          This parameter can be one of the following values:
 338:./FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank2_NAND: FSMC Bank2 NAND 
 339:./FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank3_NAND: FSMC Bank3 NAND 
 340:./FWLIB/src/stm32f4xx_fsmc.c ****   * @retval None
 341:./FWLIB/src/stm32f4xx_fsmc.c ****   */
 342:./FWLIB/src/stm32f4xx_fsmc.c **** void FSMC_NANDDeInit(uint32_t FSMC_Bank)
 343:./FWLIB/src/stm32f4xx_fsmc.c **** {
 335              		.loc 1 343 0
 336              		.cfi_startproc
 337              		@ args = 0, pretend = 0, frame = 0
 338              		@ frame_needed = 0, uses_anonymous_args = 0
 339              		@ link register save eliminated.
 340              	.LVL8:
 344:./FWLIB/src/stm32f4xx_fsmc.c ****   /* Check the parameter */
 345:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
 346:./FWLIB/src/stm32f4xx_fsmc.c ****   
 347:./FWLIB/src/stm32f4xx_fsmc.c ****   if(FSMC_Bank == FSMC_Bank2_NAND)
 341              		.loc 1 347 0
 342 0000 1028     		cmp	r0, #16
 343 0002 09D0     		beq	.L25
 348:./FWLIB/src/stm32f4xx_fsmc.c ****   {
 349:./FWLIB/src/stm32f4xx_fsmc.c ****     /* Set the FSMC_Bank2 registers to their reset values */
 350:./FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank2->PCR2 = 0x00000018;
 351:./FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank2->SR2 = 0x00000040;
 352:./FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank2->PMEM2 = 0xFCFCFCFC;
 353:./FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank2->PATT2 = 0xFCFCFCFC;  
 354:./FWLIB/src/stm32f4xx_fsmc.c ****   }
 355:./FWLIB/src/stm32f4xx_fsmc.c ****   /* FSMC_Bank3_NAND */  
 356:./FWLIB/src/stm32f4xx_fsmc.c ****   else
 357:./FWLIB/src/stm32f4xx_fsmc.c ****   {
 358:./FWLIB/src/stm32f4xx_fsmc.c ****     /* Set the FSMC_Bank3 registers to their reset values */
 359:./FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank3->PCR3 = 0x00000018;
 344              		.loc 1 359 0
 345 0004 094B     		ldr	r3, .L26
 346 0006 1822     		movs	r2, #24
 347 0008 1A60     		str	r2, [r3]
 360:./FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank3->SR3 = 0x00000040;
 348              		.loc 1 360 0
 349 000a 4022     		movs	r2, #64
 350 000c 5A60     		str	r2, [r3, #4]
 361:./FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank3->PMEM3 = 0xFCFCFCFC;
 351              		.loc 1 361 0
 352 000e 4FF0FC32 		mov	r2, #-50529028
ARM GAS  /tmp/ccwrLD3d.s 			page 14


 353 0012 9A60     		str	r2, [r3, #8]
 362:./FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank3->PATT3 = 0xFCFCFCFC; 
 354              		.loc 1 362 0
 355 0014 DA60     		str	r2, [r3, #12]
 363:./FWLIB/src/stm32f4xx_fsmc.c ****   }  
 364:./FWLIB/src/stm32f4xx_fsmc.c **** }
 356              		.loc 1 364 0
 357 0016 7047     		bx	lr
 358              	.L25:
 350:./FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank2->SR2 = 0x00000040;
 359              		.loc 1 350 0
 360 0018 054B     		ldr	r3, .L26+4
 361 001a 1822     		movs	r2, #24
 362 001c 1A60     		str	r2, [r3]
 351:./FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank2->PMEM2 = 0xFCFCFCFC;
 363              		.loc 1 351 0
 364 001e 4022     		movs	r2, #64
 365 0020 5A60     		str	r2, [r3, #4]
 352:./FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank2->PATT2 = 0xFCFCFCFC;  
 366              		.loc 1 352 0
 367 0022 4FF0FC32 		mov	r2, #-50529028
 368 0026 9A60     		str	r2, [r3, #8]
 353:./FWLIB/src/stm32f4xx_fsmc.c ****   }
 369              		.loc 1 353 0
 370 0028 DA60     		str	r2, [r3, #12]
 371 002a 7047     		bx	lr
 372              	.L27:
 373              		.align	2
 374              	.L26:
 375 002c 800000A0 		.word	-1610612608
 376 0030 600000A0 		.word	-1610612640
 377              		.cfi_endproc
 378              	.LFE116:
 380              		.section	.text.FSMC_NANDInit,"ax",%progbits
 381              		.align	1
 382              		.global	FSMC_NANDInit
 383              		.syntax unified
 384              		.thumb
 385              		.thumb_func
 386              		.fpu fpv4-sp-d16
 388              	FSMC_NANDInit:
 389              	.LFB117:
 365:./FWLIB/src/stm32f4xx_fsmc.c **** 
 366:./FWLIB/src/stm32f4xx_fsmc.c **** /**
 367:./FWLIB/src/stm32f4xx_fsmc.c ****   * @brief  Initializes the FSMC NAND Banks according to the specified parameters
 368:./FWLIB/src/stm32f4xx_fsmc.c ****   *         in the FSMC_NANDInitStruct.
 369:./FWLIB/src/stm32f4xx_fsmc.c ****   * @param  FSMC_NANDInitStruct : pointer to a FSMC_NANDInitTypeDef structure that
 370:./FWLIB/src/stm32f4xx_fsmc.c ****   *         contains the configuration information for the FSMC NAND specified Banks.              
 371:./FWLIB/src/stm32f4xx_fsmc.c ****   * @retval None
 372:./FWLIB/src/stm32f4xx_fsmc.c ****   */
 373:./FWLIB/src/stm32f4xx_fsmc.c **** void FSMC_NANDInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
 374:./FWLIB/src/stm32f4xx_fsmc.c **** {
 390              		.loc 1 374 0
 391              		.cfi_startproc
 392              		@ args = 0, pretend = 0, frame = 0
 393              		@ frame_needed = 0, uses_anonymous_args = 0
 394              		@ link register save eliminated.
ARM GAS  /tmp/ccwrLD3d.s 			page 15


 395              	.LVL9:
 396 0000 30B4     		push	{r4, r5}
 397              	.LCFI0:
 398              		.cfi_def_cfa_offset 8
 399              		.cfi_offset 4, -8
 400              		.cfi_offset 5, -4
 401              	.LVL10:
 375:./FWLIB/src/stm32f4xx_fsmc.c ****   uint32_t tmppcr = 0x00000000, tmppmem = 0x00000000, tmppatt = 0x00000000; 
 376:./FWLIB/src/stm32f4xx_fsmc.c ****     
 377:./FWLIB/src/stm32f4xx_fsmc.c ****   /* Check the parameters */
 378:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param( IS_FSMC_NAND_BANK(FSMC_NANDInitStruct->FSMC_Bank));
 379:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param( IS_FSMC_WAIT_FEATURE(FSMC_NANDInitStruct->FSMC_Waitfeature));
 380:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param( IS_FSMC_MEMORY_WIDTH(FSMC_NANDInitStruct->FSMC_MemoryDataWidth));
 381:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param( IS_FSMC_ECC_STATE(FSMC_NANDInitStruct->FSMC_ECC));
 382:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param( IS_FSMC_ECCPAGE_SIZE(FSMC_NANDInitStruct->FSMC_ECCPageSize));
 383:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param( IS_FSMC_TCLR_TIME(FSMC_NANDInitStruct->FSMC_TCLRSetupTime));
 384:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param( IS_FSMC_TAR_TIME(FSMC_NANDInitStruct->FSMC_TARSetupTime));
 385:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_SETUP_TIME(FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime
 386:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupT
 387:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupT
 388:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTim
 389:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_SETUP_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupT
 390:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSet
 391:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSet
 392:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetup
 393:./FWLIB/src/stm32f4xx_fsmc.c ****   
 394:./FWLIB/src/stm32f4xx_fsmc.c ****   /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
 395:./FWLIB/src/stm32f4xx_fsmc.c ****   tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
 402              		.loc 1 395 0
 403 0002 4368     		ldr	r3, [r0, #4]
 396:./FWLIB/src/stm32f4xx_fsmc.c ****             PCR_MEMORYTYPE_NAND |
 397:./FWLIB/src/stm32f4xx_fsmc.c ****             FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
 404              		.loc 1 397 0
 405 0004 8268     		ldr	r2, [r0, #8]
 396:./FWLIB/src/stm32f4xx_fsmc.c ****             PCR_MEMORYTYPE_NAND |
 406              		.loc 1 396 0
 407 0006 1343     		orrs	r3, r3, r2
 398:./FWLIB/src/stm32f4xx_fsmc.c ****             FSMC_NANDInitStruct->FSMC_ECC |
 408              		.loc 1 398 0
 409 0008 C268     		ldr	r2, [r0, #12]
 397:./FWLIB/src/stm32f4xx_fsmc.c ****             FSMC_NANDInitStruct->FSMC_ECC |
 410              		.loc 1 397 0
 411 000a 1343     		orrs	r3, r3, r2
 399:./FWLIB/src/stm32f4xx_fsmc.c ****             FSMC_NANDInitStruct->FSMC_ECCPageSize |
 412              		.loc 1 399 0
 413 000c 0269     		ldr	r2, [r0, #16]
 398:./FWLIB/src/stm32f4xx_fsmc.c ****             FSMC_NANDInitStruct->FSMC_ECC |
 414              		.loc 1 398 0
 415 000e 1343     		orrs	r3, r3, r2
 400:./FWLIB/src/stm32f4xx_fsmc.c ****             (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
 416              		.loc 1 400 0
 417 0010 4269     		ldr	r2, [r0, #20]
 399:./FWLIB/src/stm32f4xx_fsmc.c ****             FSMC_NANDInitStruct->FSMC_ECCPageSize |
 418              		.loc 1 399 0
 419 0012 43EA4223 		orr	r3, r3, r2, lsl #9
 401:./FWLIB/src/stm32f4xx_fsmc.c ****             (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
 420              		.loc 1 401 0
ARM GAS  /tmp/ccwrLD3d.s 			page 16


 421 0016 8269     		ldr	r2, [r0, #24]
 400:./FWLIB/src/stm32f4xx_fsmc.c ****             (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
 422              		.loc 1 400 0
 423 0018 43EA4233 		orr	r3, r3, r2, lsl #13
 395:./FWLIB/src/stm32f4xx_fsmc.c ****             PCR_MEMORYTYPE_NAND |
 424              		.loc 1 395 0
 425 001c 43F00803 		orr	r3, r3, #8
 426              	.LVL11:
 402:./FWLIB/src/stm32f4xx_fsmc.c ****             
 403:./FWLIB/src/stm32f4xx_fsmc.c ****   /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
 404:./FWLIB/src/stm32f4xx_fsmc.c ****   tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 427              		.loc 1 404 0
 428 0020 C469     		ldr	r4, [r0, #28]
 429 0022 2268     		ldr	r2, [r4]
 405:./FWLIB/src/stm32f4xx_fsmc.c ****             (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 430              		.loc 1 405 0
 431 0024 6168     		ldr	r1, [r4, #4]
 404:./FWLIB/src/stm32f4xx_fsmc.c ****             (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 432              		.loc 1 404 0
 433 0026 42EA0121 		orr	r1, r2, r1, lsl #8
 406:./FWLIB/src/stm32f4xx_fsmc.c ****             (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 434              		.loc 1 406 0
 435 002a A268     		ldr	r2, [r4, #8]
 405:./FWLIB/src/stm32f4xx_fsmc.c ****             (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 436              		.loc 1 405 0
 437 002c 41EA0241 		orr	r1, r1, r2, lsl #16
 407:./FWLIB/src/stm32f4xx_fsmc.c ****             (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
 438              		.loc 1 407 0
 439 0030 E268     		ldr	r2, [r4, #12]
 404:./FWLIB/src/stm32f4xx_fsmc.c ****             (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 440              		.loc 1 404 0
 441 0032 41EA0261 		orr	r1, r1, r2, lsl #24
 442              	.LVL12:
 408:./FWLIB/src/stm32f4xx_fsmc.c ****             
 409:./FWLIB/src/stm32f4xx_fsmc.c ****   /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
 410:./FWLIB/src/stm32f4xx_fsmc.c ****   tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 443              		.loc 1 410 0
 444 0036 046A     		ldr	r4, [r0, #32]
 445 0038 2268     		ldr	r2, [r4]
 411:./FWLIB/src/stm32f4xx_fsmc.c ****             (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 446              		.loc 1 411 0
 447 003a 6568     		ldr	r5, [r4, #4]
 410:./FWLIB/src/stm32f4xx_fsmc.c ****             (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 448              		.loc 1 410 0
 449 003c 42EA0522 		orr	r2, r2, r5, lsl #8
 412:./FWLIB/src/stm32f4xx_fsmc.c ****             (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 450              		.loc 1 412 0
 451 0040 A568     		ldr	r5, [r4, #8]
 411:./FWLIB/src/stm32f4xx_fsmc.c ****             (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 452              		.loc 1 411 0
 453 0042 42EA0542 		orr	r2, r2, r5, lsl #16
 413:./FWLIB/src/stm32f4xx_fsmc.c ****             (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);
 454              		.loc 1 413 0
 455 0046 E468     		ldr	r4, [r4, #12]
 410:./FWLIB/src/stm32f4xx_fsmc.c ****             (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 456              		.loc 1 410 0
 457 0048 42EA0462 		orr	r2, r2, r4, lsl #24
ARM GAS  /tmp/ccwrLD3d.s 			page 17


 458              	.LVL13:
 414:./FWLIB/src/stm32f4xx_fsmc.c ****   
 415:./FWLIB/src/stm32f4xx_fsmc.c ****   if(FSMC_NANDInitStruct->FSMC_Bank == FSMC_Bank2_NAND)
 459              		.loc 1 415 0
 460 004c 0068     		ldr	r0, [r0]
 461              	.LVL14:
 462 004e 1028     		cmp	r0, #16
 463 0050 05D0     		beq	.L32
 416:./FWLIB/src/stm32f4xx_fsmc.c ****   {
 417:./FWLIB/src/stm32f4xx_fsmc.c ****     /* FSMC_Bank2_NAND registers configuration */
 418:./FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank2->PCR2 = tmppcr;
 419:./FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank2->PMEM2 = tmppmem;
 420:./FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank2->PATT2 = tmppatt;
 421:./FWLIB/src/stm32f4xx_fsmc.c ****   }
 422:./FWLIB/src/stm32f4xx_fsmc.c ****   else
 423:./FWLIB/src/stm32f4xx_fsmc.c ****   {
 424:./FWLIB/src/stm32f4xx_fsmc.c ****     /* FSMC_Bank3_NAND registers configuration */
 425:./FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank3->PCR3 = tmppcr;
 464              		.loc 1 425 0
 465 0052 0548     		ldr	r0, .L33
 466 0054 0360     		str	r3, [r0]
 426:./FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank3->PMEM3 = tmppmem;
 467              		.loc 1 426 0
 468 0056 8160     		str	r1, [r0, #8]
 427:./FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank3->PATT3 = tmppatt;
 469              		.loc 1 427 0
 470 0058 C260     		str	r2, [r0, #12]
 471              	.L28:
 428:./FWLIB/src/stm32f4xx_fsmc.c ****   }
 429:./FWLIB/src/stm32f4xx_fsmc.c **** }
 472              		.loc 1 429 0
 473 005a 30BC     		pop	{r4, r5}
 474              	.LCFI1:
 475              		.cfi_remember_state
 476              		.cfi_restore 5
 477              		.cfi_restore 4
 478              		.cfi_def_cfa_offset 0
 479 005c 7047     		bx	lr
 480              	.L32:
 481              	.LCFI2:
 482              		.cfi_restore_state
 418:./FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank2->PMEM2 = tmppmem;
 483              		.loc 1 418 0
 484 005e 0348     		ldr	r0, .L33+4
 485 0060 0360     		str	r3, [r0]
 419:./FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank2->PATT2 = tmppatt;
 486              		.loc 1 419 0
 487 0062 8160     		str	r1, [r0, #8]
 420:./FWLIB/src/stm32f4xx_fsmc.c ****   }
 488              		.loc 1 420 0
 489 0064 C260     		str	r2, [r0, #12]
 490 0066 F8E7     		b	.L28
 491              	.L34:
 492              		.align	2
 493              	.L33:
 494 0068 800000A0 		.word	-1610612608
 495 006c 600000A0 		.word	-1610612640
ARM GAS  /tmp/ccwrLD3d.s 			page 18


 496              		.cfi_endproc
 497              	.LFE117:
 499              		.section	.text.FSMC_NANDStructInit,"ax",%progbits
 500              		.align	1
 501              		.global	FSMC_NANDStructInit
 502              		.syntax unified
 503              		.thumb
 504              		.thumb_func
 505              		.fpu fpv4-sp-d16
 507              	FSMC_NANDStructInit:
 508              	.LFB118:
 430:./FWLIB/src/stm32f4xx_fsmc.c **** 
 431:./FWLIB/src/stm32f4xx_fsmc.c **** 
 432:./FWLIB/src/stm32f4xx_fsmc.c **** /**
 433:./FWLIB/src/stm32f4xx_fsmc.c ****   * @brief  Fills each FSMC_NANDInitStruct member with its default value.
 434:./FWLIB/src/stm32f4xx_fsmc.c ****   * @param  FSMC_NANDInitStruct: pointer to a FSMC_NANDInitTypeDef structure which
 435:./FWLIB/src/stm32f4xx_fsmc.c ****   *         will be initialized.
 436:./FWLIB/src/stm32f4xx_fsmc.c ****   * @retval None
 437:./FWLIB/src/stm32f4xx_fsmc.c ****   */
 438:./FWLIB/src/stm32f4xx_fsmc.c **** void FSMC_NANDStructInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
 439:./FWLIB/src/stm32f4xx_fsmc.c **** { 
 509              		.loc 1 439 0
 510              		.cfi_startproc
 511              		@ args = 0, pretend = 0, frame = 0
 512              		@ frame_needed = 0, uses_anonymous_args = 0
 513              		@ link register save eliminated.
 514              	.LVL15:
 440:./FWLIB/src/stm32f4xx_fsmc.c ****   /* Reset NAND Init structure parameters values */
 441:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NANDInitStruct->FSMC_Bank = FSMC_Bank2_NAND;
 515              		.loc 1 441 0
 516 0000 1023     		movs	r3, #16
 517 0002 0360     		str	r3, [r0]
 442:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NANDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
 518              		.loc 1 442 0
 519 0004 0023     		movs	r3, #0
 520 0006 4360     		str	r3, [r0, #4]
 443:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NANDInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
 521              		.loc 1 443 0
 522 0008 8360     		str	r3, [r0, #8]
 444:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NANDInitStruct->FSMC_ECC = FSMC_ECC_Disable;
 523              		.loc 1 444 0
 524 000a C360     		str	r3, [r0, #12]
 445:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NANDInitStruct->FSMC_ECCPageSize = FSMC_ECCPageSize_256Bytes;
 525              		.loc 1 445 0
 526 000c 0361     		str	r3, [r0, #16]
 446:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NANDInitStruct->FSMC_TCLRSetupTime = 0x0;
 527              		.loc 1 446 0
 528 000e 4361     		str	r3, [r0, #20]
 447:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NANDInitStruct->FSMC_TARSetupTime = 0x0;
 529              		.loc 1 447 0
 530 0010 8361     		str	r3, [r0, #24]
 448:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 531              		.loc 1 448 0
 532 0012 C269     		ldr	r2, [r0, #28]
 533 0014 FC23     		movs	r3, #252
 534 0016 1360     		str	r3, [r2]
 449:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
ARM GAS  /tmp/ccwrLD3d.s 			page 19


 535              		.loc 1 449 0
 536 0018 C269     		ldr	r2, [r0, #28]
 537 001a 5360     		str	r3, [r2, #4]
 450:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 538              		.loc 1 450 0
 539 001c C269     		ldr	r2, [r0, #28]
 540 001e 9360     		str	r3, [r2, #8]
 451:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 541              		.loc 1 451 0
 542 0020 C269     		ldr	r2, [r0, #28]
 543 0022 D360     		str	r3, [r2, #12]
 452:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 544              		.loc 1 452 0
 545 0024 026A     		ldr	r2, [r0, #32]
 546 0026 1360     		str	r3, [r2]
 453:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 547              		.loc 1 453 0
 548 0028 026A     		ldr	r2, [r0, #32]
 549 002a 5360     		str	r3, [r2, #4]
 454:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 550              		.loc 1 454 0
 551 002c 026A     		ldr	r2, [r0, #32]
 552 002e 9360     		str	r3, [r2, #8]
 455:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	  
 553              		.loc 1 455 0
 554 0030 026A     		ldr	r2, [r0, #32]
 555 0032 D360     		str	r3, [r2, #12]
 456:./FWLIB/src/stm32f4xx_fsmc.c **** }
 556              		.loc 1 456 0
 557 0034 7047     		bx	lr
 558              		.cfi_endproc
 559              	.LFE118:
 561              		.section	.text.FSMC_NANDCmd,"ax",%progbits
 562              		.align	1
 563              		.global	FSMC_NANDCmd
 564              		.syntax unified
 565              		.thumb
 566              		.thumb_func
 567              		.fpu fpv4-sp-d16
 569              	FSMC_NANDCmd:
 570              	.LFB119:
 457:./FWLIB/src/stm32f4xx_fsmc.c **** 
 458:./FWLIB/src/stm32f4xx_fsmc.c **** /**
 459:./FWLIB/src/stm32f4xx_fsmc.c ****   * @brief  Enables or disables the specified NAND Memory Bank.
 460:./FWLIB/src/stm32f4xx_fsmc.c ****   * @param  FSMC_Bank: specifies the FSMC Bank to be used
 461:./FWLIB/src/stm32f4xx_fsmc.c ****   *          This parameter can be one of the following values:
 462:./FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank2_NAND: FSMC Bank2 NAND 
 463:./FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank3_NAND: FSMC Bank3 NAND
 464:./FWLIB/src/stm32f4xx_fsmc.c ****   * @param  NewState: new state of the FSMC_Bank. This parameter can be: ENABLE or DISABLE.
 465:./FWLIB/src/stm32f4xx_fsmc.c ****   * @retval None
 466:./FWLIB/src/stm32f4xx_fsmc.c ****   */
 467:./FWLIB/src/stm32f4xx_fsmc.c **** void FSMC_NANDCmd(uint32_t FSMC_Bank, FunctionalState NewState)
 468:./FWLIB/src/stm32f4xx_fsmc.c **** {
 571              		.loc 1 468 0
 572              		.cfi_startproc
 573              		@ args = 0, pretend = 0, frame = 0
 574              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccwrLD3d.s 			page 20


 575              		@ link register save eliminated.
 576              	.LVL16:
 469:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
 470:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 471:./FWLIB/src/stm32f4xx_fsmc.c ****   
 472:./FWLIB/src/stm32f4xx_fsmc.c ****   if (NewState != DISABLE)
 577              		.loc 1 472 0
 578 0000 69B1     		cbz	r1, .L37
 473:./FWLIB/src/stm32f4xx_fsmc.c ****   {
 474:./FWLIB/src/stm32f4xx_fsmc.c ****     /* Enable the selected NAND Bank by setting the PBKEN bit in the PCRx register */
 475:./FWLIB/src/stm32f4xx_fsmc.c ****     if(FSMC_Bank == FSMC_Bank2_NAND)
 579              		.loc 1 475 0
 580 0002 1028     		cmp	r0, #16
 581 0004 05D0     		beq	.L41
 476:./FWLIB/src/stm32f4xx_fsmc.c ****     {
 477:./FWLIB/src/stm32f4xx_fsmc.c ****       FSMC_Bank2->PCR2 |= PCR_PBKEN_SET;
 478:./FWLIB/src/stm32f4xx_fsmc.c ****     }
 479:./FWLIB/src/stm32f4xx_fsmc.c ****     else
 480:./FWLIB/src/stm32f4xx_fsmc.c ****     {
 481:./FWLIB/src/stm32f4xx_fsmc.c ****       FSMC_Bank3->PCR3 |= PCR_PBKEN_SET;
 582              		.loc 1 481 0
 583 0006 0D4A     		ldr	r2, .L43
 584 0008 1368     		ldr	r3, [r2]
 585 000a 43F00403 		orr	r3, r3, #4
 586 000e 1360     		str	r3, [r2]
 587 0010 7047     		bx	lr
 588              	.L41:
 477:./FWLIB/src/stm32f4xx_fsmc.c ****     }
 589              		.loc 1 477 0
 590 0012 0B4A     		ldr	r2, .L43+4
 591 0014 1368     		ldr	r3, [r2]
 592 0016 43F00403 		orr	r3, r3, #4
 593 001a 1360     		str	r3, [r2]
 594 001c 7047     		bx	lr
 595              	.L37:
 482:./FWLIB/src/stm32f4xx_fsmc.c ****     }
 483:./FWLIB/src/stm32f4xx_fsmc.c ****   }
 484:./FWLIB/src/stm32f4xx_fsmc.c ****   else
 485:./FWLIB/src/stm32f4xx_fsmc.c ****   {
 486:./FWLIB/src/stm32f4xx_fsmc.c ****     /* Disable the selected NAND Bank by clearing the PBKEN bit in the PCRx register */
 487:./FWLIB/src/stm32f4xx_fsmc.c ****     if(FSMC_Bank == FSMC_Bank2_NAND)
 596              		.loc 1 487 0
 597 001e 1028     		cmp	r0, #16
 598 0020 05D0     		beq	.L42
 488:./FWLIB/src/stm32f4xx_fsmc.c ****     {
 489:./FWLIB/src/stm32f4xx_fsmc.c ****       FSMC_Bank2->PCR2 &= PCR_PBKEN_RESET;
 490:./FWLIB/src/stm32f4xx_fsmc.c ****     }
 491:./FWLIB/src/stm32f4xx_fsmc.c ****     else
 492:./FWLIB/src/stm32f4xx_fsmc.c ****     {
 493:./FWLIB/src/stm32f4xx_fsmc.c ****       FSMC_Bank3->PCR3 &= PCR_PBKEN_RESET;
 599              		.loc 1 493 0
 600 0022 064A     		ldr	r2, .L43
 601 0024 1168     		ldr	r1, [r2]
 602              	.LVL17:
 603 0026 074B     		ldr	r3, .L43+8
 604 0028 0B40     		ands	r3, r3, r1
 605 002a 1360     		str	r3, [r2]
ARM GAS  /tmp/ccwrLD3d.s 			page 21


 494:./FWLIB/src/stm32f4xx_fsmc.c ****     }
 495:./FWLIB/src/stm32f4xx_fsmc.c ****   }
 496:./FWLIB/src/stm32f4xx_fsmc.c **** }
 606              		.loc 1 496 0
 607 002c 7047     		bx	lr
 608              	.LVL18:
 609              	.L42:
 489:./FWLIB/src/stm32f4xx_fsmc.c ****     }
 610              		.loc 1 489 0
 611 002e 044A     		ldr	r2, .L43+4
 612 0030 1168     		ldr	r1, [r2]
 613              	.LVL19:
 614 0032 044B     		ldr	r3, .L43+8
 615 0034 0B40     		ands	r3, r3, r1
 616 0036 1360     		str	r3, [r2]
 617 0038 7047     		bx	lr
 618              	.L44:
 619 003a 00BF     		.align	2
 620              	.L43:
 621 003c 800000A0 		.word	-1610612608
 622 0040 600000A0 		.word	-1610612640
 623 0044 FBFF0F00 		.word	1048571
 624              		.cfi_endproc
 625              	.LFE119:
 627              		.section	.text.FSMC_NANDECCCmd,"ax",%progbits
 628              		.align	1
 629              		.global	FSMC_NANDECCCmd
 630              		.syntax unified
 631              		.thumb
 632              		.thumb_func
 633              		.fpu fpv4-sp-d16
 635              	FSMC_NANDECCCmd:
 636              	.LFB120:
 497:./FWLIB/src/stm32f4xx_fsmc.c **** /**
 498:./FWLIB/src/stm32f4xx_fsmc.c ****   * @brief  Enables or disables the FSMC NAND ECC feature.
 499:./FWLIB/src/stm32f4xx_fsmc.c ****   * @param  FSMC_Bank: specifies the FSMC Bank to be used
 500:./FWLIB/src/stm32f4xx_fsmc.c ****   *          This parameter can be one of the following values:
 501:./FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank2_NAND: FSMC Bank2 NAND 
 502:./FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank3_NAND: FSMC Bank3 NAND
 503:./FWLIB/src/stm32f4xx_fsmc.c ****   * @param  NewState: new state of the FSMC NAND ECC feature.  
 504:./FWLIB/src/stm32f4xx_fsmc.c ****   *          This parameter can be: ENABLE or DISABLE.
 505:./FWLIB/src/stm32f4xx_fsmc.c ****   * @retval None
 506:./FWLIB/src/stm32f4xx_fsmc.c ****   */
 507:./FWLIB/src/stm32f4xx_fsmc.c **** void FSMC_NANDECCCmd(uint32_t FSMC_Bank, FunctionalState NewState)
 508:./FWLIB/src/stm32f4xx_fsmc.c **** {
 637              		.loc 1 508 0
 638              		.cfi_startproc
 639              		@ args = 0, pretend = 0, frame = 0
 640              		@ frame_needed = 0, uses_anonymous_args = 0
 641              		@ link register save eliminated.
 642              	.LVL20:
 509:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
 510:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 511:./FWLIB/src/stm32f4xx_fsmc.c ****   
 512:./FWLIB/src/stm32f4xx_fsmc.c ****   if (NewState != DISABLE)
 643              		.loc 1 512 0
 644 0000 69B1     		cbz	r1, .L46
ARM GAS  /tmp/ccwrLD3d.s 			page 22


 513:./FWLIB/src/stm32f4xx_fsmc.c ****   {
 514:./FWLIB/src/stm32f4xx_fsmc.c ****     /* Enable the selected NAND Bank ECC function by setting the ECCEN bit in the PCRx register */
 515:./FWLIB/src/stm32f4xx_fsmc.c ****     if(FSMC_Bank == FSMC_Bank2_NAND)
 645              		.loc 1 515 0
 646 0002 1028     		cmp	r0, #16
 647 0004 05D0     		beq	.L50
 516:./FWLIB/src/stm32f4xx_fsmc.c ****     {
 517:./FWLIB/src/stm32f4xx_fsmc.c ****       FSMC_Bank2->PCR2 |= PCR_ECCEN_SET;
 518:./FWLIB/src/stm32f4xx_fsmc.c ****     }
 519:./FWLIB/src/stm32f4xx_fsmc.c ****     else
 520:./FWLIB/src/stm32f4xx_fsmc.c ****     {
 521:./FWLIB/src/stm32f4xx_fsmc.c ****       FSMC_Bank3->PCR3 |= PCR_ECCEN_SET;
 648              		.loc 1 521 0
 649 0006 0D4A     		ldr	r2, .L52
 650 0008 1368     		ldr	r3, [r2]
 651 000a 43F04003 		orr	r3, r3, #64
 652 000e 1360     		str	r3, [r2]
 653 0010 7047     		bx	lr
 654              	.L50:
 517:./FWLIB/src/stm32f4xx_fsmc.c ****     }
 655              		.loc 1 517 0
 656 0012 0B4A     		ldr	r2, .L52+4
 657 0014 1368     		ldr	r3, [r2]
 658 0016 43F04003 		orr	r3, r3, #64
 659 001a 1360     		str	r3, [r2]
 660 001c 7047     		bx	lr
 661              	.L46:
 522:./FWLIB/src/stm32f4xx_fsmc.c ****     }
 523:./FWLIB/src/stm32f4xx_fsmc.c ****   }
 524:./FWLIB/src/stm32f4xx_fsmc.c ****   else
 525:./FWLIB/src/stm32f4xx_fsmc.c ****   {
 526:./FWLIB/src/stm32f4xx_fsmc.c ****     /* Disable the selected NAND Bank ECC function by clearing the ECCEN bit in the PCRx register *
 527:./FWLIB/src/stm32f4xx_fsmc.c ****     if(FSMC_Bank == FSMC_Bank2_NAND)
 662              		.loc 1 527 0
 663 001e 1028     		cmp	r0, #16
 664 0020 05D0     		beq	.L51
 528:./FWLIB/src/stm32f4xx_fsmc.c ****     {
 529:./FWLIB/src/stm32f4xx_fsmc.c ****       FSMC_Bank2->PCR2 &= PCR_ECCEN_RESET;
 530:./FWLIB/src/stm32f4xx_fsmc.c ****     }
 531:./FWLIB/src/stm32f4xx_fsmc.c ****     else
 532:./FWLIB/src/stm32f4xx_fsmc.c ****     {
 533:./FWLIB/src/stm32f4xx_fsmc.c ****       FSMC_Bank3->PCR3 &= PCR_ECCEN_RESET;
 665              		.loc 1 533 0
 666 0022 064A     		ldr	r2, .L52
 667 0024 1168     		ldr	r1, [r2]
 668              	.LVL21:
 669 0026 074B     		ldr	r3, .L52+8
 670 0028 0B40     		ands	r3, r3, r1
 671 002a 1360     		str	r3, [r2]
 534:./FWLIB/src/stm32f4xx_fsmc.c ****     }
 535:./FWLIB/src/stm32f4xx_fsmc.c ****   }
 536:./FWLIB/src/stm32f4xx_fsmc.c **** }
 672              		.loc 1 536 0
 673 002c 7047     		bx	lr
 674              	.LVL22:
 675              	.L51:
 529:./FWLIB/src/stm32f4xx_fsmc.c ****     }
ARM GAS  /tmp/ccwrLD3d.s 			page 23


 676              		.loc 1 529 0
 677 002e 044A     		ldr	r2, .L52+4
 678 0030 1168     		ldr	r1, [r2]
 679              	.LVL23:
 680 0032 044B     		ldr	r3, .L52+8
 681 0034 0B40     		ands	r3, r3, r1
 682 0036 1360     		str	r3, [r2]
 683 0038 7047     		bx	lr
 684              	.L53:
 685 003a 00BF     		.align	2
 686              	.L52:
 687 003c 800000A0 		.word	-1610612608
 688 0040 600000A0 		.word	-1610612640
 689 0044 BFFF0F00 		.word	1048511
 690              		.cfi_endproc
 691              	.LFE120:
 693              		.section	.text.FSMC_GetECC,"ax",%progbits
 694              		.align	1
 695              		.global	FSMC_GetECC
 696              		.syntax unified
 697              		.thumb
 698              		.thumb_func
 699              		.fpu fpv4-sp-d16
 701              	FSMC_GetECC:
 702              	.LFB121:
 537:./FWLIB/src/stm32f4xx_fsmc.c **** 
 538:./FWLIB/src/stm32f4xx_fsmc.c **** /**
 539:./FWLIB/src/stm32f4xx_fsmc.c ****   * @brief  Returns the error correction code register value.
 540:./FWLIB/src/stm32f4xx_fsmc.c ****   * @param  FSMC_Bank: specifies the FSMC Bank to be used
 541:./FWLIB/src/stm32f4xx_fsmc.c ****   *          This parameter can be one of the following values:
 542:./FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank2_NAND: FSMC Bank2 NAND 
 543:./FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank3_NAND: FSMC Bank3 NAND
 544:./FWLIB/src/stm32f4xx_fsmc.c ****   * @retval The Error Correction Code (ECC) value.
 545:./FWLIB/src/stm32f4xx_fsmc.c ****   */
 546:./FWLIB/src/stm32f4xx_fsmc.c **** uint32_t FSMC_GetECC(uint32_t FSMC_Bank)
 547:./FWLIB/src/stm32f4xx_fsmc.c **** {
 703              		.loc 1 547 0
 704              		.cfi_startproc
 705              		@ args = 0, pretend = 0, frame = 0
 706              		@ frame_needed = 0, uses_anonymous_args = 0
 707              		@ link register save eliminated.
 708              	.LVL24:
 548:./FWLIB/src/stm32f4xx_fsmc.c ****   uint32_t eccval = 0x00000000;
 549:./FWLIB/src/stm32f4xx_fsmc.c ****   
 550:./FWLIB/src/stm32f4xx_fsmc.c ****   if(FSMC_Bank == FSMC_Bank2_NAND)
 709              		.loc 1 550 0
 710 0000 1028     		cmp	r0, #16
 711 0002 02D0     		beq	.L57
 551:./FWLIB/src/stm32f4xx_fsmc.c ****   {
 552:./FWLIB/src/stm32f4xx_fsmc.c ****     /* Get the ECCR2 register value */
 553:./FWLIB/src/stm32f4xx_fsmc.c ****     eccval = FSMC_Bank2->ECCR2;
 554:./FWLIB/src/stm32f4xx_fsmc.c ****   }
 555:./FWLIB/src/stm32f4xx_fsmc.c ****   else
 556:./FWLIB/src/stm32f4xx_fsmc.c ****   {
 557:./FWLIB/src/stm32f4xx_fsmc.c ****     /* Get the ECCR3 register value */
 558:./FWLIB/src/stm32f4xx_fsmc.c ****     eccval = FSMC_Bank3->ECCR3;
 712              		.loc 1 558 0
ARM GAS  /tmp/ccwrLD3d.s 			page 24


 713 0004 024B     		ldr	r3, .L58
 714 0006 5869     		ldr	r0, [r3, #20]
 715              	.LVL25:
 559:./FWLIB/src/stm32f4xx_fsmc.c ****   }
 560:./FWLIB/src/stm32f4xx_fsmc.c ****   /* Return the error correction code value */
 561:./FWLIB/src/stm32f4xx_fsmc.c ****   return(eccval);
 562:./FWLIB/src/stm32f4xx_fsmc.c **** }
 716              		.loc 1 562 0
 717 0008 7047     		bx	lr
 718              	.LVL26:
 719              	.L57:
 553:./FWLIB/src/stm32f4xx_fsmc.c ****   }
 720              		.loc 1 553 0
 721 000a 024B     		ldr	r3, .L58+4
 722 000c 5869     		ldr	r0, [r3, #20]
 723              	.LVL27:
 724 000e 7047     		bx	lr
 725              	.L59:
 726              		.align	2
 727              	.L58:
 728 0010 800000A0 		.word	-1610612608
 729 0014 600000A0 		.word	-1610612640
 730              		.cfi_endproc
 731              	.LFE121:
 733              		.section	.text.FSMC_PCCARDDeInit,"ax",%progbits
 734              		.align	1
 735              		.global	FSMC_PCCARDDeInit
 736              		.syntax unified
 737              		.thumb
 738              		.thumb_func
 739              		.fpu fpv4-sp-d16
 741              	FSMC_PCCARDDeInit:
 742              	.LFB122:
 563:./FWLIB/src/stm32f4xx_fsmc.c **** /**
 564:./FWLIB/src/stm32f4xx_fsmc.c ****   * @}
 565:./FWLIB/src/stm32f4xx_fsmc.c ****   */
 566:./FWLIB/src/stm32f4xx_fsmc.c **** 
 567:./FWLIB/src/stm32f4xx_fsmc.c **** /** @defgroup FSMC_Group3 PCCARD Controller functions
 568:./FWLIB/src/stm32f4xx_fsmc.c ****  *  @brief   PCCARD Controller functions 
 569:./FWLIB/src/stm32f4xx_fsmc.c ****  *
 570:./FWLIB/src/stm32f4xx_fsmc.c **** @verbatim   
 571:./FWLIB/src/stm32f4xx_fsmc.c ****  ===============================================================================
 572:./FWLIB/src/stm32f4xx_fsmc.c ****                     ##### PCCARD Controller functions #####
 573:./FWLIB/src/stm32f4xx_fsmc.c ****  ===============================================================================  
 574:./FWLIB/src/stm32f4xx_fsmc.c **** 
 575:./FWLIB/src/stm32f4xx_fsmc.c ****  [..]  he following sequence should be followed to configure the FSMC to interface 
 576:./FWLIB/src/stm32f4xx_fsmc.c ****        with 16-bit PC Card compatible memory connected to the PCCARD Bank:
 577:./FWLIB/src/stm32f4xx_fsmc.c ****  
 578:./FWLIB/src/stm32f4xx_fsmc.c ****   (#)  Enable the clock for the FSMC and associated GPIOs using the following functions:
 579:./FWLIB/src/stm32f4xx_fsmc.c ****        (++)  RCC_AHB3PeriphClockCmd(RCC_AHB3Periph_FSMC, ENABLE);
 580:./FWLIB/src/stm32f4xx_fsmc.c ****        (++)  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOx, ENABLE);
 581:./FWLIB/src/stm32f4xx_fsmc.c **** 
 582:./FWLIB/src/stm32f4xx_fsmc.c ****   (#) FSMC pins configuration 
 583:./FWLIB/src/stm32f4xx_fsmc.c ****        (++) Connect the involved FSMC pins to AF12 using the following function 
 584:./FWLIB/src/stm32f4xx_fsmc.c ****             GPIO_PinAFConfig(GPIOx, GPIO_PinSourcex, GPIO_AF_FSMC); 
 585:./FWLIB/src/stm32f4xx_fsmc.c ****        (++) Configure these FSMC pins in alternate function mode by calling the function
 586:./FWLIB/src/stm32f4xx_fsmc.c ****             GPIO_Init();    
ARM GAS  /tmp/ccwrLD3d.s 			page 25


 587:./FWLIB/src/stm32f4xx_fsmc.c ****        
 588:./FWLIB/src/stm32f4xx_fsmc.c ****   (#) Declare a FSMC_PCCARDInitTypeDef structure, for example:
 589:./FWLIB/src/stm32f4xx_fsmc.c ****       FSMC_PCCARDInitTypeDef  FSMC_PCCARDInitStructure;
 590:./FWLIB/src/stm32f4xx_fsmc.c ****       and fill the FSMC_PCCARDInitStructure variable with the allowed values of
 591:./FWLIB/src/stm32f4xx_fsmc.c ****       the structure member.
 592:./FWLIB/src/stm32f4xx_fsmc.c ****       
 593:./FWLIB/src/stm32f4xx_fsmc.c ****   (#) Initialize the PCCARD Controller by calling the function
 594:./FWLIB/src/stm32f4xx_fsmc.c ****       FSMC_PCCARDInit(&FSMC_PCCARDInitStructure); 
 595:./FWLIB/src/stm32f4xx_fsmc.c **** 
 596:./FWLIB/src/stm32f4xx_fsmc.c ****   (#) Then enable the PCCARD Bank:
 597:./FWLIB/src/stm32f4xx_fsmc.c ****       FSMC_PCCARDCmd(ENABLE);  
 598:./FWLIB/src/stm32f4xx_fsmc.c **** 
 599:./FWLIB/src/stm32f4xx_fsmc.c ****   (#) At this stage you can read/write from/to the memory connected to the PCCARD Bank. 
 600:./FWLIB/src/stm32f4xx_fsmc.c ****  
 601:./FWLIB/src/stm32f4xx_fsmc.c **** @endverbatim
 602:./FWLIB/src/stm32f4xx_fsmc.c ****   * @{
 603:./FWLIB/src/stm32f4xx_fsmc.c ****   */
 604:./FWLIB/src/stm32f4xx_fsmc.c **** 
 605:./FWLIB/src/stm32f4xx_fsmc.c **** /**
 606:./FWLIB/src/stm32f4xx_fsmc.c ****   * @brief  De-initializes the FSMC PCCARD Bank registers to their default reset values.
 607:./FWLIB/src/stm32f4xx_fsmc.c ****   * @param  None                       
 608:./FWLIB/src/stm32f4xx_fsmc.c ****   * @retval None
 609:./FWLIB/src/stm32f4xx_fsmc.c ****   */
 610:./FWLIB/src/stm32f4xx_fsmc.c **** void FSMC_PCCARDDeInit(void)
 611:./FWLIB/src/stm32f4xx_fsmc.c **** {
 743              		.loc 1 611 0
 744              		.cfi_startproc
 745              		@ args = 0, pretend = 0, frame = 0
 746              		@ frame_needed = 0, uses_anonymous_args = 0
 747              		@ link register save eliminated.
 612:./FWLIB/src/stm32f4xx_fsmc.c ****   /* Set the FSMC_Bank4 registers to their reset values */
 613:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_Bank4->PCR4 = 0x00000018; 
 748              		.loc 1 613 0
 749 0000 054B     		ldr	r3, .L61
 750 0002 1822     		movs	r2, #24
 751 0004 1A60     		str	r2, [r3]
 614:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_Bank4->SR4 = 0x00000000;	
 752              		.loc 1 614 0
 753 0006 0022     		movs	r2, #0
 754 0008 5A60     		str	r2, [r3, #4]
 615:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_Bank4->PMEM4 = 0xFCFCFCFC;
 755              		.loc 1 615 0
 756 000a 4FF0FC32 		mov	r2, #-50529028
 757 000e 9A60     		str	r2, [r3, #8]
 616:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_Bank4->PATT4 = 0xFCFCFCFC;
 758              		.loc 1 616 0
 759 0010 DA60     		str	r2, [r3, #12]
 617:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_Bank4->PIO4 = 0xFCFCFCFC;
 760              		.loc 1 617 0
 761 0012 1A61     		str	r2, [r3, #16]
 618:./FWLIB/src/stm32f4xx_fsmc.c **** }
 762              		.loc 1 618 0
 763 0014 7047     		bx	lr
 764              	.L62:
 765 0016 00BF     		.align	2
 766              	.L61:
 767 0018 A00000A0 		.word	-1610612576
ARM GAS  /tmp/ccwrLD3d.s 			page 26


 768              		.cfi_endproc
 769              	.LFE122:
 771              		.section	.text.FSMC_PCCARDInit,"ax",%progbits
 772              		.align	1
 773              		.global	FSMC_PCCARDInit
 774              		.syntax unified
 775              		.thumb
 776              		.thumb_func
 777              		.fpu fpv4-sp-d16
 779              	FSMC_PCCARDInit:
 780              	.LFB123:
 619:./FWLIB/src/stm32f4xx_fsmc.c **** 
 620:./FWLIB/src/stm32f4xx_fsmc.c **** /**
 621:./FWLIB/src/stm32f4xx_fsmc.c ****   * @brief  Initializes the FSMC PCCARD Bank according to the specified parameters
 622:./FWLIB/src/stm32f4xx_fsmc.c ****   *         in the FSMC_PCCARDInitStruct.
 623:./FWLIB/src/stm32f4xx_fsmc.c ****   * @param  FSMC_PCCARDInitStruct : pointer to a FSMC_PCCARDInitTypeDef structure
 624:./FWLIB/src/stm32f4xx_fsmc.c ****   *         that contains the configuration information for the FSMC PCCARD Bank.                  
 625:./FWLIB/src/stm32f4xx_fsmc.c ****   * @retval None
 626:./FWLIB/src/stm32f4xx_fsmc.c ****   */
 627:./FWLIB/src/stm32f4xx_fsmc.c **** void FSMC_PCCARDInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
 628:./FWLIB/src/stm32f4xx_fsmc.c **** {
 781              		.loc 1 628 0
 782              		.cfi_startproc
 783              		@ args = 0, pretend = 0, frame = 0
 784              		@ frame_needed = 0, uses_anonymous_args = 0
 785              		@ link register save eliminated.
 786              	.LVL28:
 787 0000 10B4     		push	{r4}
 788              	.LCFI3:
 789              		.cfi_def_cfa_offset 4
 790              		.cfi_offset 4, -4
 629:./FWLIB/src/stm32f4xx_fsmc.c ****   /* Check the parameters */
 630:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_WAIT_FEATURE(FSMC_PCCARDInitStruct->FSMC_Waitfeature));
 631:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_TCLR_TIME(FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime));
 632:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_TAR_TIME(FSMC_PCCARDInitStruct->FSMC_TARSetupTime));
 633:./FWLIB/src/stm32f4xx_fsmc.c ****  
 634:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_SETUP_TIME(FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTi
 635:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetu
 636:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetu
 637:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupT
 638:./FWLIB/src/stm32f4xx_fsmc.c ****   
 639:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_SETUP_TIME(FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_Setu
 640:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitS
 641:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldS
 642:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSet
 643:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_SETUP_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime))
 644:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTim
 645:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTim
 646:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime)
 647:./FWLIB/src/stm32f4xx_fsmc.c ****   
 648:./FWLIB/src/stm32f4xx_fsmc.c ****   /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
 649:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
 791              		.loc 1 649 0
 792 0002 0368     		ldr	r3, [r0]
 650:./FWLIB/src/stm32f4xx_fsmc.c ****                      FSMC_MemoryDataWidth_16b |  
 651:./FWLIB/src/stm32f4xx_fsmc.c ****                      (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
 793              		.loc 1 651 0
ARM GAS  /tmp/ccwrLD3d.s 			page 27


 794 0004 4268     		ldr	r2, [r0, #4]
 650:./FWLIB/src/stm32f4xx_fsmc.c ****                      FSMC_MemoryDataWidth_16b |  
 795              		.loc 1 650 0
 796 0006 43EA4223 		orr	r3, r3, r2, lsl #9
 652:./FWLIB/src/stm32f4xx_fsmc.c ****                      (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
 797              		.loc 1 652 0
 798 000a 8268     		ldr	r2, [r0, #8]
 651:./FWLIB/src/stm32f4xx_fsmc.c ****                      (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
 799              		.loc 1 651 0
 800 000c 43EA4233 		orr	r3, r3, r2, lsl #13
 801 0010 43F01003 		orr	r3, r3, #16
 649:./FWLIB/src/stm32f4xx_fsmc.c ****                      FSMC_MemoryDataWidth_16b |  
 802              		.loc 1 649 0
 803 0014 144A     		ldr	r2, .L65
 804 0016 1360     		str	r3, [r2]
 653:./FWLIB/src/stm32f4xx_fsmc.c ****             
 654:./FWLIB/src/stm32f4xx_fsmc.c ****   /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
 655:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime
 805              		.loc 1 655 0
 806 0018 C168     		ldr	r1, [r0, #12]
 807 001a 0B68     		ldr	r3, [r1]
 656:./FWLIB/src/stm32f4xx_fsmc.c ****                       (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8
 808              		.loc 1 656 0
 809 001c 4C68     		ldr	r4, [r1, #4]
 655:./FWLIB/src/stm32f4xx_fsmc.c ****                       (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8
 810              		.loc 1 655 0
 811 001e 43EA0423 		orr	r3, r3, r4, lsl #8
 657:./FWLIB/src/stm32f4xx_fsmc.c ****                       (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 1
 812              		.loc 1 657 0
 813 0022 8C68     		ldr	r4, [r1, #8]
 656:./FWLIB/src/stm32f4xx_fsmc.c ****                       (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8
 814              		.loc 1 656 0
 815 0024 43EA0443 		orr	r3, r3, r4, lsl #16
 658:./FWLIB/src/stm32f4xx_fsmc.c ****                       (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24
 816              		.loc 1 658 0
 817 0028 C968     		ldr	r1, [r1, #12]
 657:./FWLIB/src/stm32f4xx_fsmc.c ****                       (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 1
 818              		.loc 1 657 0
 819 002a 43EA0163 		orr	r3, r3, r1, lsl #24
 655:./FWLIB/src/stm32f4xx_fsmc.c ****                       (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8
 820              		.loc 1 655 0
 821 002e 9360     		str	r3, [r2, #8]
 659:./FWLIB/src/stm32f4xx_fsmc.c ****             
 660:./FWLIB/src/stm32f4xx_fsmc.c ****   /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
 661:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupT
 822              		.loc 1 661 0
 823 0030 0169     		ldr	r1, [r0, #16]
 824 0032 0B68     		ldr	r3, [r1]
 662:./FWLIB/src/stm32f4xx_fsmc.c ****                       (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime <
 825              		.loc 1 662 0
 826 0034 4C68     		ldr	r4, [r1, #4]
 661:./FWLIB/src/stm32f4xx_fsmc.c ****                       (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime <
 827              		.loc 1 661 0
 828 0036 43EA0423 		orr	r3, r3, r4, lsl #8
 663:./FWLIB/src/stm32f4xx_fsmc.c ****                       (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime <
 829              		.loc 1 663 0
 830 003a 8C68     		ldr	r4, [r1, #8]
ARM GAS  /tmp/ccwrLD3d.s 			page 28


 662:./FWLIB/src/stm32f4xx_fsmc.c ****                       (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime <
 831              		.loc 1 662 0
 832 003c 43EA0443 		orr	r3, r3, r4, lsl #16
 664:./FWLIB/src/stm32f4xx_fsmc.c ****                       (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime <<
 833              		.loc 1 664 0
 834 0040 C968     		ldr	r1, [r1, #12]
 663:./FWLIB/src/stm32f4xx_fsmc.c ****                       (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime <
 835              		.loc 1 663 0
 836 0042 43EA0163 		orr	r3, r3, r1, lsl #24
 661:./FWLIB/src/stm32f4xx_fsmc.c ****                       (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime <
 837              		.loc 1 661 0
 838 0046 D360     		str	r3, [r2, #12]
 665:./FWLIB/src/stm32f4xx_fsmc.c ****             
 666:./FWLIB/src/stm32f4xx_fsmc.c ****   /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
 667:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
 839              		.loc 1 667 0
 840 0048 4169     		ldr	r1, [r0, #20]
 841 004a 0B68     		ldr	r3, [r1]
 668:./FWLIB/src/stm32f4xx_fsmc.c ****                      (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 842              		.loc 1 668 0
 843 004c 4868     		ldr	r0, [r1, #4]
 844              	.LVL29:
 667:./FWLIB/src/stm32f4xx_fsmc.c ****                      (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 845              		.loc 1 667 0
 846 004e 43EA0023 		orr	r3, r3, r0, lsl #8
 669:./FWLIB/src/stm32f4xx_fsmc.c ****                      (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 847              		.loc 1 669 0
 848 0052 8868     		ldr	r0, [r1, #8]
 668:./FWLIB/src/stm32f4xx_fsmc.c ****                      (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 849              		.loc 1 668 0
 850 0054 43EA0043 		orr	r3, r3, r0, lsl #16
 670:./FWLIB/src/stm32f4xx_fsmc.c ****                      (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime << 24);   
 851              		.loc 1 670 0
 852 0058 C968     		ldr	r1, [r1, #12]
 669:./FWLIB/src/stm32f4xx_fsmc.c ****                      (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 853              		.loc 1 669 0
 854 005a 43EA0163 		orr	r3, r3, r1, lsl #24
 667:./FWLIB/src/stm32f4xx_fsmc.c ****                      (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 855              		.loc 1 667 0
 856 005e 1361     		str	r3, [r2, #16]
 671:./FWLIB/src/stm32f4xx_fsmc.c **** }
 857              		.loc 1 671 0
 858 0060 5DF8044B 		ldr	r4, [sp], #4
 859              	.LCFI4:
 860              		.cfi_restore 4
 861              		.cfi_def_cfa_offset 0
 862 0064 7047     		bx	lr
 863              	.L66:
 864 0066 00BF     		.align	2
 865              	.L65:
 866 0068 A00000A0 		.word	-1610612576
 867              		.cfi_endproc
 868              	.LFE123:
 870              		.section	.text.FSMC_PCCARDStructInit,"ax",%progbits
 871              		.align	1
 872              		.global	FSMC_PCCARDStructInit
 873              		.syntax unified
ARM GAS  /tmp/ccwrLD3d.s 			page 29


 874              		.thumb
 875              		.thumb_func
 876              		.fpu fpv4-sp-d16
 878              	FSMC_PCCARDStructInit:
 879              	.LFB124:
 672:./FWLIB/src/stm32f4xx_fsmc.c **** 
 673:./FWLIB/src/stm32f4xx_fsmc.c **** /**
 674:./FWLIB/src/stm32f4xx_fsmc.c ****   * @brief  Fills each FSMC_PCCARDInitStruct member with its default value.
 675:./FWLIB/src/stm32f4xx_fsmc.c ****   * @param  FSMC_PCCARDInitStruct: pointer to a FSMC_PCCARDInitTypeDef structure
 676:./FWLIB/src/stm32f4xx_fsmc.c ****   *         which will be initialized.
 677:./FWLIB/src/stm32f4xx_fsmc.c ****   * @retval None
 678:./FWLIB/src/stm32f4xx_fsmc.c ****   */
 679:./FWLIB/src/stm32f4xx_fsmc.c **** void FSMC_PCCARDStructInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
 680:./FWLIB/src/stm32f4xx_fsmc.c **** {
 880              		.loc 1 680 0
 881              		.cfi_startproc
 882              		@ args = 0, pretend = 0, frame = 0
 883              		@ frame_needed = 0, uses_anonymous_args = 0
 884              		@ link register save eliminated.
 885              	.LVL30:
 681:./FWLIB/src/stm32f4xx_fsmc.c ****   /* Reset PCCARD Init structure parameters values */
 682:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_PCCARDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
 886              		.loc 1 682 0
 887 0000 0023     		movs	r3, #0
 888 0002 0360     		str	r3, [r0]
 683:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime = 0x0;
 889              		.loc 1 683 0
 890 0004 4360     		str	r3, [r0, #4]
 684:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_PCCARDInitStruct->FSMC_TARSetupTime = 0x0;
 891              		.loc 1 684 0
 892 0006 8360     		str	r3, [r0, #8]
 685:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 893              		.loc 1 685 0
 894 0008 C268     		ldr	r2, [r0, #12]
 895 000a FC23     		movs	r3, #252
 896 000c 1360     		str	r3, [r2]
 686:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 897              		.loc 1 686 0
 898 000e C268     		ldr	r2, [r0, #12]
 899 0010 5360     		str	r3, [r2, #4]
 687:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 900              		.loc 1 687 0
 901 0012 C268     		ldr	r2, [r0, #12]
 902 0014 9360     		str	r3, [r2, #8]
 688:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 903              		.loc 1 688 0
 904 0016 C268     		ldr	r2, [r0, #12]
 905 0018 D360     		str	r3, [r2, #12]
 689:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 906              		.loc 1 689 0
 907 001a 0269     		ldr	r2, [r0, #16]
 908 001c 1360     		str	r3, [r2]
 690:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 909              		.loc 1 690 0
 910 001e 0269     		ldr	r2, [r0, #16]
 911 0020 5360     		str	r3, [r2, #4]
 691:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
ARM GAS  /tmp/ccwrLD3d.s 			page 30


 912              		.loc 1 691 0
 913 0022 0269     		ldr	r2, [r0, #16]
 914 0024 9360     		str	r3, [r2, #8]
 692:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	
 915              		.loc 1 692 0
 916 0026 0269     		ldr	r2, [r0, #16]
 917 0028 D360     		str	r3, [r2, #12]
 693:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 918              		.loc 1 693 0
 919 002a 4269     		ldr	r2, [r0, #20]
 920 002c 1360     		str	r3, [r2]
 694:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 921              		.loc 1 694 0
 922 002e 4269     		ldr	r2, [r0, #20]
 923 0030 5360     		str	r3, [r2, #4]
 695:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 924              		.loc 1 695 0
 925 0032 4269     		ldr	r2, [r0, #20]
 926 0034 9360     		str	r3, [r2, #8]
 696:./FWLIB/src/stm32f4xx_fsmc.c ****   FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 927              		.loc 1 696 0
 928 0036 4269     		ldr	r2, [r0, #20]
 929 0038 D360     		str	r3, [r2, #12]
 697:./FWLIB/src/stm32f4xx_fsmc.c **** }
 930              		.loc 1 697 0
 931 003a 7047     		bx	lr
 932              		.cfi_endproc
 933              	.LFE124:
 935              		.section	.text.FSMC_PCCARDCmd,"ax",%progbits
 936              		.align	1
 937              		.global	FSMC_PCCARDCmd
 938              		.syntax unified
 939              		.thumb
 940              		.thumb_func
 941              		.fpu fpv4-sp-d16
 943              	FSMC_PCCARDCmd:
 944              	.LFB125:
 698:./FWLIB/src/stm32f4xx_fsmc.c **** 
 699:./FWLIB/src/stm32f4xx_fsmc.c **** /**
 700:./FWLIB/src/stm32f4xx_fsmc.c ****   * @brief  Enables or disables the PCCARD Memory Bank.
 701:./FWLIB/src/stm32f4xx_fsmc.c ****   * @param  NewState: new state of the PCCARD Memory Bank.  
 702:./FWLIB/src/stm32f4xx_fsmc.c ****   *          This parameter can be: ENABLE or DISABLE.
 703:./FWLIB/src/stm32f4xx_fsmc.c ****   * @retval None
 704:./FWLIB/src/stm32f4xx_fsmc.c ****   */
 705:./FWLIB/src/stm32f4xx_fsmc.c **** void FSMC_PCCARDCmd(FunctionalState NewState)
 706:./FWLIB/src/stm32f4xx_fsmc.c **** {
 945              		.loc 1 706 0
 946              		.cfi_startproc
 947              		@ args = 0, pretend = 0, frame = 0
 948              		@ frame_needed = 0, uses_anonymous_args = 0
 949              		@ link register save eliminated.
 950              	.LVL31:
 707:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 708:./FWLIB/src/stm32f4xx_fsmc.c ****   
 709:./FWLIB/src/stm32f4xx_fsmc.c ****   if (NewState != DISABLE)
 951              		.loc 1 709 0
 952 0000 28B9     		cbnz	r0, .L71
ARM GAS  /tmp/ccwrLD3d.s 			page 31


 710:./FWLIB/src/stm32f4xx_fsmc.c ****   {
 711:./FWLIB/src/stm32f4xx_fsmc.c ****     /* Enable the PCCARD Bank by setting the PBKEN bit in the PCR4 register */
 712:./FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank4->PCR4 |= PCR_PBKEN_SET;
 713:./FWLIB/src/stm32f4xx_fsmc.c ****   }
 714:./FWLIB/src/stm32f4xx_fsmc.c ****   else
 715:./FWLIB/src/stm32f4xx_fsmc.c ****   {
 716:./FWLIB/src/stm32f4xx_fsmc.c ****     /* Disable the PCCARD Bank by clearing the PBKEN bit in the PCR4 register */
 717:./FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank4->PCR4 &= PCR_PBKEN_RESET;
 953              		.loc 1 717 0
 954 0002 064A     		ldr	r2, .L72
 955 0004 1168     		ldr	r1, [r2]
 956 0006 064B     		ldr	r3, .L72+4
 957 0008 0B40     		ands	r3, r3, r1
 958 000a 1360     		str	r3, [r2]
 718:./FWLIB/src/stm32f4xx_fsmc.c ****   }
 719:./FWLIB/src/stm32f4xx_fsmc.c **** }
 959              		.loc 1 719 0
 960 000c 7047     		bx	lr
 961              	.L71:
 712:./FWLIB/src/stm32f4xx_fsmc.c ****   }
 962              		.loc 1 712 0
 963 000e 034A     		ldr	r2, .L72
 964 0010 1368     		ldr	r3, [r2]
 965 0012 43F00403 		orr	r3, r3, #4
 966 0016 1360     		str	r3, [r2]
 967 0018 7047     		bx	lr
 968              	.L73:
 969 001a 00BF     		.align	2
 970              	.L72:
 971 001c A00000A0 		.word	-1610612576
 972 0020 FBFF0F00 		.word	1048571
 973              		.cfi_endproc
 974              	.LFE125:
 976              		.section	.text.FSMC_ITConfig,"ax",%progbits
 977              		.align	1
 978              		.global	FSMC_ITConfig
 979              		.syntax unified
 980              		.thumb
 981              		.thumb_func
 982              		.fpu fpv4-sp-d16
 984              	FSMC_ITConfig:
 985              	.LFB126:
 720:./FWLIB/src/stm32f4xx_fsmc.c **** /**
 721:./FWLIB/src/stm32f4xx_fsmc.c ****   * @}
 722:./FWLIB/src/stm32f4xx_fsmc.c ****   */
 723:./FWLIB/src/stm32f4xx_fsmc.c **** 
 724:./FWLIB/src/stm32f4xx_fsmc.c **** /** @defgroup FSMC_Group4  Interrupts and flags management functions
 725:./FWLIB/src/stm32f4xx_fsmc.c ****  *  @brief    Interrupts and flags management functions
 726:./FWLIB/src/stm32f4xx_fsmc.c ****  *
 727:./FWLIB/src/stm32f4xx_fsmc.c **** @verbatim   
 728:./FWLIB/src/stm32f4xx_fsmc.c ****  ===============================================================================
 729:./FWLIB/src/stm32f4xx_fsmc.c ****              ##### Interrupts and flags management functions #####
 730:./FWLIB/src/stm32f4xx_fsmc.c ****  ===============================================================================   
 731:./FWLIB/src/stm32f4xx_fsmc.c **** 
 732:./FWLIB/src/stm32f4xx_fsmc.c **** @endverbatim
 733:./FWLIB/src/stm32f4xx_fsmc.c ****   * @{
 734:./FWLIB/src/stm32f4xx_fsmc.c ****   */
ARM GAS  /tmp/ccwrLD3d.s 			page 32


 735:./FWLIB/src/stm32f4xx_fsmc.c **** 
 736:./FWLIB/src/stm32f4xx_fsmc.c **** /**
 737:./FWLIB/src/stm32f4xx_fsmc.c ****   * @brief  Enables or disables the specified FSMC interrupts.
 738:./FWLIB/src/stm32f4xx_fsmc.c ****   * @param  FSMC_Bank: specifies the FSMC Bank to be used
 739:./FWLIB/src/stm32f4xx_fsmc.c ****   *          This parameter can be one of the following values:
 740:./FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank2_NAND: FSMC Bank2 NAND 
 741:./FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank3_NAND: FSMC Bank3 NAND
 742:./FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank4_PCCARD: FSMC Bank4 PCCARD
 743:./FWLIB/src/stm32f4xx_fsmc.c ****   * @param  FSMC_IT: specifies the FSMC interrupt sources to be enabled or disabled.
 744:./FWLIB/src/stm32f4xx_fsmc.c ****   *          This parameter can be any combination of the following values:
 745:./FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_IT_RisingEdge: Rising edge detection interrupt. 
 746:./FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_IT_Level: Level edge detection interrupt.
 747:./FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_IT_FallingEdge: Falling edge detection interrupt.
 748:./FWLIB/src/stm32f4xx_fsmc.c ****   * @param  NewState: new state of the specified FSMC interrupts.
 749:./FWLIB/src/stm32f4xx_fsmc.c ****   *          This parameter can be: ENABLE or DISABLE.
 750:./FWLIB/src/stm32f4xx_fsmc.c ****   * @retval None
 751:./FWLIB/src/stm32f4xx_fsmc.c ****   */
 752:./FWLIB/src/stm32f4xx_fsmc.c **** void FSMC_ITConfig(uint32_t FSMC_Bank, uint32_t FSMC_IT, FunctionalState NewState)
 753:./FWLIB/src/stm32f4xx_fsmc.c **** {
 986              		.loc 1 753 0
 987              		.cfi_startproc
 988              		@ args = 0, pretend = 0, frame = 0
 989              		@ frame_needed = 0, uses_anonymous_args = 0
 990              		@ link register save eliminated.
 991              	.LVL32:
 754:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
 755:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_IT(FSMC_IT));	
 756:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 757:./FWLIB/src/stm32f4xx_fsmc.c ****   
 758:./FWLIB/src/stm32f4xx_fsmc.c ****   if (NewState != DISABLE)
 992              		.loc 1 758 0
 993 0000 9AB1     		cbz	r2, .L75
 759:./FWLIB/src/stm32f4xx_fsmc.c ****   {
 760:./FWLIB/src/stm32f4xx_fsmc.c ****     /* Enable the selected FSMC_Bank2 interrupts */
 761:./FWLIB/src/stm32f4xx_fsmc.c ****     if(FSMC_Bank == FSMC_Bank2_NAND)
 994              		.loc 1 761 0
 995 0002 1028     		cmp	r0, #16
 996 0004 07D0     		beq	.L81
 762:./FWLIB/src/stm32f4xx_fsmc.c ****     {
 763:./FWLIB/src/stm32f4xx_fsmc.c ****       FSMC_Bank2->SR2 |= FSMC_IT;
 764:./FWLIB/src/stm32f4xx_fsmc.c ****     }
 765:./FWLIB/src/stm32f4xx_fsmc.c ****     /* Enable the selected FSMC_Bank3 interrupts */
 766:./FWLIB/src/stm32f4xx_fsmc.c ****     else if (FSMC_Bank == FSMC_Bank3_NAND)
 997              		.loc 1 766 0
 998 0006 B0F5807F 		cmp	r0, #256
 999 000a 09D0     		beq	.L82
 767:./FWLIB/src/stm32f4xx_fsmc.c ****     {
 768:./FWLIB/src/stm32f4xx_fsmc.c ****       FSMC_Bank3->SR3 |= FSMC_IT;
 769:./FWLIB/src/stm32f4xx_fsmc.c ****     }
 770:./FWLIB/src/stm32f4xx_fsmc.c ****     /* Enable the selected FSMC_Bank4 interrupts */
 771:./FWLIB/src/stm32f4xx_fsmc.c ****     else
 772:./FWLIB/src/stm32f4xx_fsmc.c ****     {
 773:./FWLIB/src/stm32f4xx_fsmc.c ****       FSMC_Bank4->SR4 |= FSMC_IT;    
 1000              		.loc 1 773 0
 1001 000c 124A     		ldr	r2, .L85
 1002              	.LVL33:
 1003 000e 5368     		ldr	r3, [r2, #4]
ARM GAS  /tmp/ccwrLD3d.s 			page 33


 1004 0010 1943     		orrs	r1, r1, r3
 1005              	.LVL34:
 1006 0012 5160     		str	r1, [r2, #4]
 1007 0014 7047     		bx	lr
 1008              	.LVL35:
 1009              	.L81:
 763:./FWLIB/src/stm32f4xx_fsmc.c ****     }
 1010              		.loc 1 763 0
 1011 0016 114A     		ldr	r2, .L85+4
 1012              	.LVL36:
 1013 0018 5368     		ldr	r3, [r2, #4]
 1014 001a 1943     		orrs	r1, r1, r3
 1015              	.LVL37:
 1016 001c 5160     		str	r1, [r2, #4]
 1017 001e 7047     		bx	lr
 1018              	.LVL38:
 1019              	.L82:
 768:./FWLIB/src/stm32f4xx_fsmc.c ****     }
 1020              		.loc 1 768 0
 1021 0020 0F4A     		ldr	r2, .L85+8
 1022              	.LVL39:
 1023 0022 5368     		ldr	r3, [r2, #4]
 1024 0024 1943     		orrs	r1, r1, r3
 1025              	.LVL40:
 1026 0026 5160     		str	r1, [r2, #4]
 1027 0028 7047     		bx	lr
 1028              	.LVL41:
 1029              	.L75:
 774:./FWLIB/src/stm32f4xx_fsmc.c ****     }
 775:./FWLIB/src/stm32f4xx_fsmc.c ****   }
 776:./FWLIB/src/stm32f4xx_fsmc.c ****   else
 777:./FWLIB/src/stm32f4xx_fsmc.c ****   {
 778:./FWLIB/src/stm32f4xx_fsmc.c ****     /* Disable the selected FSMC_Bank2 interrupts */
 779:./FWLIB/src/stm32f4xx_fsmc.c ****     if(FSMC_Bank == FSMC_Bank2_NAND)
 1030              		.loc 1 779 0
 1031 002a 1028     		cmp	r0, #16
 1032 002c 08D0     		beq	.L83
 780:./FWLIB/src/stm32f4xx_fsmc.c ****     {
 781:./FWLIB/src/stm32f4xx_fsmc.c ****       
 782:./FWLIB/src/stm32f4xx_fsmc.c ****       FSMC_Bank2->SR2 &= (uint32_t)~FSMC_IT;
 783:./FWLIB/src/stm32f4xx_fsmc.c ****     }
 784:./FWLIB/src/stm32f4xx_fsmc.c ****     /* Disable the selected FSMC_Bank3 interrupts */
 785:./FWLIB/src/stm32f4xx_fsmc.c ****     else if (FSMC_Bank == FSMC_Bank3_NAND)
 1033              		.loc 1 785 0
 1034 002e B0F5807F 		cmp	r0, #256
 1035 0032 0BD0     		beq	.L84
 786:./FWLIB/src/stm32f4xx_fsmc.c ****     {
 787:./FWLIB/src/stm32f4xx_fsmc.c ****       FSMC_Bank3->SR3 &= (uint32_t)~FSMC_IT;
 788:./FWLIB/src/stm32f4xx_fsmc.c ****     }
 789:./FWLIB/src/stm32f4xx_fsmc.c ****     /* Disable the selected FSMC_Bank4 interrupts */
 790:./FWLIB/src/stm32f4xx_fsmc.c ****     else
 791:./FWLIB/src/stm32f4xx_fsmc.c ****     {
 792:./FWLIB/src/stm32f4xx_fsmc.c ****       FSMC_Bank4->SR4 &= (uint32_t)~FSMC_IT;    
 1036              		.loc 1 792 0
 1037 0034 084A     		ldr	r2, .L85
 1038              	.LVL42:
 1039 0036 5368     		ldr	r3, [r2, #4]
ARM GAS  /tmp/ccwrLD3d.s 			page 34


 1040 0038 23EA0101 		bic	r1, r3, r1
 1041              	.LVL43:
 1042 003c 5160     		str	r1, [r2, #4]
 793:./FWLIB/src/stm32f4xx_fsmc.c ****     }
 794:./FWLIB/src/stm32f4xx_fsmc.c ****   }
 795:./FWLIB/src/stm32f4xx_fsmc.c **** }
 1043              		.loc 1 795 0
 1044 003e 7047     		bx	lr
 1045              	.LVL44:
 1046              	.L83:
 782:./FWLIB/src/stm32f4xx_fsmc.c ****     }
 1047              		.loc 1 782 0
 1048 0040 064A     		ldr	r2, .L85+4
 1049              	.LVL45:
 1050 0042 5368     		ldr	r3, [r2, #4]
 1051 0044 23EA0101 		bic	r1, r3, r1
 1052              	.LVL46:
 1053 0048 5160     		str	r1, [r2, #4]
 1054 004a 7047     		bx	lr
 1055              	.LVL47:
 1056              	.L84:
 787:./FWLIB/src/stm32f4xx_fsmc.c ****     }
 1057              		.loc 1 787 0
 1058 004c 044A     		ldr	r2, .L85+8
 1059              	.LVL48:
 1060 004e 5368     		ldr	r3, [r2, #4]
 1061 0050 23EA0101 		bic	r1, r3, r1
 1062              	.LVL49:
 1063 0054 5160     		str	r1, [r2, #4]
 1064 0056 7047     		bx	lr
 1065              	.L86:
 1066              		.align	2
 1067              	.L85:
 1068 0058 A00000A0 		.word	-1610612576
 1069 005c 600000A0 		.word	-1610612640
 1070 0060 800000A0 		.word	-1610612608
 1071              		.cfi_endproc
 1072              	.LFE126:
 1074              		.section	.text.FSMC_GetFlagStatus,"ax",%progbits
 1075              		.align	1
 1076              		.global	FSMC_GetFlagStatus
 1077              		.syntax unified
 1078              		.thumb
 1079              		.thumb_func
 1080              		.fpu fpv4-sp-d16
 1082              	FSMC_GetFlagStatus:
 1083              	.LFB127:
 796:./FWLIB/src/stm32f4xx_fsmc.c **** 
 797:./FWLIB/src/stm32f4xx_fsmc.c **** /**
 798:./FWLIB/src/stm32f4xx_fsmc.c ****   * @brief  Checks whether the specified FSMC flag is set or not.
 799:./FWLIB/src/stm32f4xx_fsmc.c ****   * @param  FSMC_Bank: specifies the FSMC Bank to be used
 800:./FWLIB/src/stm32f4xx_fsmc.c ****   *          This parameter can be one of the following values:
 801:./FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank2_NAND: FSMC Bank2 NAND 
 802:./FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank3_NAND: FSMC Bank3 NAND
 803:./FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank4_PCCARD: FSMC Bank4 PCCARD
 804:./FWLIB/src/stm32f4xx_fsmc.c ****   * @param  FSMC_FLAG: specifies the flag to check.
 805:./FWLIB/src/stm32f4xx_fsmc.c ****   *          This parameter can be one of the following values:
ARM GAS  /tmp/ccwrLD3d.s 			page 35


 806:./FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_FLAG_RisingEdge: Rising edge detection Flag.
 807:./FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_FLAG_Level: Level detection Flag.
 808:./FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_FLAG_FallingEdge: Falling edge detection Flag.
 809:./FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_FLAG_FEMPT: Fifo empty Flag. 
 810:./FWLIB/src/stm32f4xx_fsmc.c ****   * @retval The new state of FSMC_FLAG (SET or RESET).
 811:./FWLIB/src/stm32f4xx_fsmc.c ****   */
 812:./FWLIB/src/stm32f4xx_fsmc.c **** FlagStatus FSMC_GetFlagStatus(uint32_t FSMC_Bank, uint32_t FSMC_FLAG)
 813:./FWLIB/src/stm32f4xx_fsmc.c **** {
 1084              		.loc 1 813 0
 1085              		.cfi_startproc
 1086              		@ args = 0, pretend = 0, frame = 0
 1087              		@ frame_needed = 0, uses_anonymous_args = 0
 1088              		@ link register save eliminated.
 1089              	.LVL50:
 814:./FWLIB/src/stm32f4xx_fsmc.c ****   FlagStatus bitstatus = RESET;
 815:./FWLIB/src/stm32f4xx_fsmc.c ****   uint32_t tmpsr = 0x00000000;
 816:./FWLIB/src/stm32f4xx_fsmc.c ****   
 817:./FWLIB/src/stm32f4xx_fsmc.c ****   /* Check the parameters */
 818:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
 819:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_GET_FLAG(FSMC_FLAG));
 820:./FWLIB/src/stm32f4xx_fsmc.c ****   
 821:./FWLIB/src/stm32f4xx_fsmc.c ****   if(FSMC_Bank == FSMC_Bank2_NAND)
 1090              		.loc 1 821 0
 1091 0000 1028     		cmp	r0, #16
 1092 0002 08D0     		beq	.L93
 822:./FWLIB/src/stm32f4xx_fsmc.c ****   {
 823:./FWLIB/src/stm32f4xx_fsmc.c ****     tmpsr = FSMC_Bank2->SR2;
 824:./FWLIB/src/stm32f4xx_fsmc.c ****   }  
 825:./FWLIB/src/stm32f4xx_fsmc.c ****   else if(FSMC_Bank == FSMC_Bank3_NAND)
 1093              		.loc 1 825 0
 1094 0004 B0F5807F 		cmp	r0, #256
 1095 0008 08D0     		beq	.L94
 826:./FWLIB/src/stm32f4xx_fsmc.c ****   {
 827:./FWLIB/src/stm32f4xx_fsmc.c ****     tmpsr = FSMC_Bank3->SR3;
 828:./FWLIB/src/stm32f4xx_fsmc.c ****   }
 829:./FWLIB/src/stm32f4xx_fsmc.c ****   /* FSMC_Bank4_PCCARD*/
 830:./FWLIB/src/stm32f4xx_fsmc.c ****   else
 831:./FWLIB/src/stm32f4xx_fsmc.c ****   {
 832:./FWLIB/src/stm32f4xx_fsmc.c ****     tmpsr = FSMC_Bank4->SR4;
 1096              		.loc 1 832 0
 1097 000a 074B     		ldr	r3, .L96
 1098 000c 5B68     		ldr	r3, [r3, #4]
 1099              	.LVL51:
 1100              	.L89:
 833:./FWLIB/src/stm32f4xx_fsmc.c ****   } 
 834:./FWLIB/src/stm32f4xx_fsmc.c ****   
 835:./FWLIB/src/stm32f4xx_fsmc.c ****   /* Get the flag status */
 836:./FWLIB/src/stm32f4xx_fsmc.c ****   if ((tmpsr & FSMC_FLAG) != (uint16_t)RESET )
 1101              		.loc 1 836 0
 1102 000e 0B42     		tst	r3, r1
 1103 0010 07D1     		bne	.L95
 837:./FWLIB/src/stm32f4xx_fsmc.c ****   {
 838:./FWLIB/src/stm32f4xx_fsmc.c ****     bitstatus = SET;
 839:./FWLIB/src/stm32f4xx_fsmc.c ****   }
 840:./FWLIB/src/stm32f4xx_fsmc.c ****   else
 841:./FWLIB/src/stm32f4xx_fsmc.c ****   {
 842:./FWLIB/src/stm32f4xx_fsmc.c ****     bitstatus = RESET;
ARM GAS  /tmp/ccwrLD3d.s 			page 36


 1104              		.loc 1 842 0
 1105 0012 0020     		movs	r0, #0
 1106              	.LVL52:
 843:./FWLIB/src/stm32f4xx_fsmc.c ****   }
 844:./FWLIB/src/stm32f4xx_fsmc.c ****   /* Return the flag status */
 845:./FWLIB/src/stm32f4xx_fsmc.c ****   return bitstatus;
 846:./FWLIB/src/stm32f4xx_fsmc.c **** }
 1107              		.loc 1 846 0
 1108 0014 7047     		bx	lr
 1109              	.LVL53:
 1110              	.L93:
 823:./FWLIB/src/stm32f4xx_fsmc.c ****   }  
 1111              		.loc 1 823 0
 1112 0016 054B     		ldr	r3, .L96+4
 1113 0018 5B68     		ldr	r3, [r3, #4]
 1114              	.LVL54:
 1115 001a F8E7     		b	.L89
 1116              	.LVL55:
 1117              	.L94:
 827:./FWLIB/src/stm32f4xx_fsmc.c ****   }
 1118              		.loc 1 827 0
 1119 001c 044B     		ldr	r3, .L96+8
 1120 001e 5B68     		ldr	r3, [r3, #4]
 1121              	.LVL56:
 1122 0020 F5E7     		b	.L89
 1123              	.L95:
 838:./FWLIB/src/stm32f4xx_fsmc.c ****   }
 1124              		.loc 1 838 0
 1125 0022 0120     		movs	r0, #1
 1126              	.LVL57:
 1127 0024 7047     		bx	lr
 1128              	.L97:
 1129 0026 00BF     		.align	2
 1130              	.L96:
 1131 0028 A00000A0 		.word	-1610612576
 1132 002c 600000A0 		.word	-1610612640
 1133 0030 800000A0 		.word	-1610612608
 1134              		.cfi_endproc
 1135              	.LFE127:
 1137              		.section	.text.FSMC_ClearFlag,"ax",%progbits
 1138              		.align	1
 1139              		.global	FSMC_ClearFlag
 1140              		.syntax unified
 1141              		.thumb
 1142              		.thumb_func
 1143              		.fpu fpv4-sp-d16
 1145              	FSMC_ClearFlag:
 1146              	.LFB128:
 847:./FWLIB/src/stm32f4xx_fsmc.c **** 
 848:./FWLIB/src/stm32f4xx_fsmc.c **** /**
 849:./FWLIB/src/stm32f4xx_fsmc.c ****   * @brief  Clears the FSMC's pending flags.
 850:./FWLIB/src/stm32f4xx_fsmc.c ****   * @param  FSMC_Bank: specifies the FSMC Bank to be used
 851:./FWLIB/src/stm32f4xx_fsmc.c ****   *          This parameter can be one of the following values:
 852:./FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank2_NAND: FSMC Bank2 NAND 
 853:./FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank3_NAND: FSMC Bank3 NAND
 854:./FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank4_PCCARD: FSMC Bank4 PCCARD
 855:./FWLIB/src/stm32f4xx_fsmc.c ****   * @param  FSMC_FLAG: specifies the flag to clear.
ARM GAS  /tmp/ccwrLD3d.s 			page 37


 856:./FWLIB/src/stm32f4xx_fsmc.c ****   *          This parameter can be any combination of the following values:
 857:./FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_FLAG_RisingEdge: Rising edge detection Flag.
 858:./FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_FLAG_Level: Level detection Flag.
 859:./FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_FLAG_FallingEdge: Falling edge detection Flag.
 860:./FWLIB/src/stm32f4xx_fsmc.c ****   * @retval None
 861:./FWLIB/src/stm32f4xx_fsmc.c ****   */
 862:./FWLIB/src/stm32f4xx_fsmc.c **** void FSMC_ClearFlag(uint32_t FSMC_Bank, uint32_t FSMC_FLAG)
 863:./FWLIB/src/stm32f4xx_fsmc.c **** {
 1147              		.loc 1 863 0
 1148              		.cfi_startproc
 1149              		@ args = 0, pretend = 0, frame = 0
 1150              		@ frame_needed = 0, uses_anonymous_args = 0
 1151              		@ link register save eliminated.
 1152              	.LVL58:
 864:./FWLIB/src/stm32f4xx_fsmc.c ****  /* Check the parameters */
 865:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
 866:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_CLEAR_FLAG(FSMC_FLAG)) ;
 867:./FWLIB/src/stm32f4xx_fsmc.c ****     
 868:./FWLIB/src/stm32f4xx_fsmc.c ****   if(FSMC_Bank == FSMC_Bank2_NAND)
 1153              		.loc 1 868 0
 1154 0000 1028     		cmp	r0, #16
 1155 0002 08D0     		beq	.L102
 869:./FWLIB/src/stm32f4xx_fsmc.c ****   {
 870:./FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank2->SR2 &= ~FSMC_FLAG; 
 871:./FWLIB/src/stm32f4xx_fsmc.c ****   }  
 872:./FWLIB/src/stm32f4xx_fsmc.c ****   else if(FSMC_Bank == FSMC_Bank3_NAND)
 1156              		.loc 1 872 0
 1157 0004 B0F5807F 		cmp	r0, #256
 1158 0008 0BD0     		beq	.L103
 873:./FWLIB/src/stm32f4xx_fsmc.c ****   {
 874:./FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank3->SR3 &= ~FSMC_FLAG;
 875:./FWLIB/src/stm32f4xx_fsmc.c ****   }
 876:./FWLIB/src/stm32f4xx_fsmc.c ****   /* FSMC_Bank4_PCCARD*/
 877:./FWLIB/src/stm32f4xx_fsmc.c ****   else
 878:./FWLIB/src/stm32f4xx_fsmc.c ****   {
 879:./FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank4->SR4 &= ~FSMC_FLAG;
 1159              		.loc 1 879 0
 1160 000a 094A     		ldr	r2, .L104
 1161 000c 5368     		ldr	r3, [r2, #4]
 1162 000e 23EA0101 		bic	r1, r3, r1
 1163              	.LVL59:
 1164 0012 5160     		str	r1, [r2, #4]
 880:./FWLIB/src/stm32f4xx_fsmc.c ****   }
 881:./FWLIB/src/stm32f4xx_fsmc.c **** }
 1165              		.loc 1 881 0
 1166 0014 7047     		bx	lr
 1167              	.LVL60:
 1168              	.L102:
 870:./FWLIB/src/stm32f4xx_fsmc.c ****   }  
 1169              		.loc 1 870 0
 1170 0016 074A     		ldr	r2, .L104+4
 1171 0018 5368     		ldr	r3, [r2, #4]
 1172 001a 23EA0101 		bic	r1, r3, r1
 1173              	.LVL61:
 1174 001e 5160     		str	r1, [r2, #4]
 1175 0020 7047     		bx	lr
 1176              	.LVL62:
ARM GAS  /tmp/ccwrLD3d.s 			page 38


 1177              	.L103:
 874:./FWLIB/src/stm32f4xx_fsmc.c ****   }
 1178              		.loc 1 874 0
 1179 0022 054A     		ldr	r2, .L104+8
 1180 0024 5368     		ldr	r3, [r2, #4]
 1181 0026 23EA0101 		bic	r1, r3, r1
 1182              	.LVL63:
 1183 002a 5160     		str	r1, [r2, #4]
 1184 002c 7047     		bx	lr
 1185              	.L105:
 1186 002e 00BF     		.align	2
 1187              	.L104:
 1188 0030 A00000A0 		.word	-1610612576
 1189 0034 600000A0 		.word	-1610612640
 1190 0038 800000A0 		.word	-1610612608
 1191              		.cfi_endproc
 1192              	.LFE128:
 1194              		.section	.text.FSMC_GetITStatus,"ax",%progbits
 1195              		.align	1
 1196              		.global	FSMC_GetITStatus
 1197              		.syntax unified
 1198              		.thumb
 1199              		.thumb_func
 1200              		.fpu fpv4-sp-d16
 1202              	FSMC_GetITStatus:
 1203              	.LFB129:
 882:./FWLIB/src/stm32f4xx_fsmc.c **** 
 883:./FWLIB/src/stm32f4xx_fsmc.c **** /**
 884:./FWLIB/src/stm32f4xx_fsmc.c ****   * @brief  Checks whether the specified FSMC interrupt has occurred or not.
 885:./FWLIB/src/stm32f4xx_fsmc.c ****   * @param  FSMC_Bank: specifies the FSMC Bank to be used
 886:./FWLIB/src/stm32f4xx_fsmc.c ****   *          This parameter can be one of the following values:
 887:./FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank2_NAND: FSMC Bank2 NAND 
 888:./FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank3_NAND: FSMC Bank3 NAND
 889:./FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank4_PCCARD: FSMC Bank4 PCCARD
 890:./FWLIB/src/stm32f4xx_fsmc.c ****   * @param  FSMC_IT: specifies the FSMC interrupt source to check.
 891:./FWLIB/src/stm32f4xx_fsmc.c ****   *          This parameter can be one of the following values:
 892:./FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_IT_RisingEdge: Rising edge detection interrupt. 
 893:./FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_IT_Level: Level edge detection interrupt.
 894:./FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_IT_FallingEdge: Falling edge detection interrupt. 
 895:./FWLIB/src/stm32f4xx_fsmc.c ****   * @retval The new state of FSMC_IT (SET or RESET).
 896:./FWLIB/src/stm32f4xx_fsmc.c ****   */
 897:./FWLIB/src/stm32f4xx_fsmc.c **** ITStatus FSMC_GetITStatus(uint32_t FSMC_Bank, uint32_t FSMC_IT)
 898:./FWLIB/src/stm32f4xx_fsmc.c **** {
 1204              		.loc 1 898 0
 1205              		.cfi_startproc
 1206              		@ args = 0, pretend = 0, frame = 0
 1207              		@ frame_needed = 0, uses_anonymous_args = 0
 1208              		@ link register save eliminated.
 1209              	.LVL64:
 899:./FWLIB/src/stm32f4xx_fsmc.c ****   ITStatus bitstatus = RESET;
 900:./FWLIB/src/stm32f4xx_fsmc.c ****   uint32_t tmpsr = 0x0, itstatus = 0x0, itenable = 0x0; 
 901:./FWLIB/src/stm32f4xx_fsmc.c ****   
 902:./FWLIB/src/stm32f4xx_fsmc.c ****   /* Check the parameters */
 903:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
 904:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_GET_IT(FSMC_IT));
 905:./FWLIB/src/stm32f4xx_fsmc.c ****   
 906:./FWLIB/src/stm32f4xx_fsmc.c ****   if(FSMC_Bank == FSMC_Bank2_NAND)
ARM GAS  /tmp/ccwrLD3d.s 			page 39


 1210              		.loc 1 906 0
 1211 0000 1028     		cmp	r0, #16
 1212 0002 0BD0     		beq	.L113
 907:./FWLIB/src/stm32f4xx_fsmc.c ****   {
 908:./FWLIB/src/stm32f4xx_fsmc.c ****     tmpsr = FSMC_Bank2->SR2;
 909:./FWLIB/src/stm32f4xx_fsmc.c ****   }  
 910:./FWLIB/src/stm32f4xx_fsmc.c ****   else if(FSMC_Bank == FSMC_Bank3_NAND)
 1213              		.loc 1 910 0
 1214 0004 B0F5807F 		cmp	r0, #256
 1215 0008 0BD0     		beq	.L114
 911:./FWLIB/src/stm32f4xx_fsmc.c ****   {
 912:./FWLIB/src/stm32f4xx_fsmc.c ****     tmpsr = FSMC_Bank3->SR3;
 913:./FWLIB/src/stm32f4xx_fsmc.c ****   }
 914:./FWLIB/src/stm32f4xx_fsmc.c ****   /* FSMC_Bank4_PCCARD*/
 915:./FWLIB/src/stm32f4xx_fsmc.c ****   else
 916:./FWLIB/src/stm32f4xx_fsmc.c ****   {
 917:./FWLIB/src/stm32f4xx_fsmc.c ****     tmpsr = FSMC_Bank4->SR4;
 1216              		.loc 1 917 0
 1217 000a 094B     		ldr	r3, .L115
 1218 000c 5B68     		ldr	r3, [r3, #4]
 1219              	.LVL65:
 1220              	.L108:
 918:./FWLIB/src/stm32f4xx_fsmc.c ****   } 
 919:./FWLIB/src/stm32f4xx_fsmc.c ****   
 920:./FWLIB/src/stm32f4xx_fsmc.c ****   itstatus = tmpsr & FSMC_IT;
 921:./FWLIB/src/stm32f4xx_fsmc.c ****   
 922:./FWLIB/src/stm32f4xx_fsmc.c ****   itenable = tmpsr & (FSMC_IT >> 3);
 1221              		.loc 1 922 0
 1222 000e 03EAD102 		and	r2, r3, r1, lsr #3
 1223              	.LVL66:
 923:./FWLIB/src/stm32f4xx_fsmc.c ****   if ((itstatus != (uint32_t)RESET)  && (itenable != (uint32_t)RESET))
 1224              		.loc 1 923 0
 1225 0012 0B42     		tst	r3, r1
 1226 0014 08D0     		beq	.L111
 1227              		.loc 1 923 0 is_stmt 0 discriminator 1
 1228 0016 4AB9     		cbnz	r2, .L112
 924:./FWLIB/src/stm32f4xx_fsmc.c ****   {
 925:./FWLIB/src/stm32f4xx_fsmc.c ****     bitstatus = SET;
 926:./FWLIB/src/stm32f4xx_fsmc.c ****   }
 927:./FWLIB/src/stm32f4xx_fsmc.c ****   else
 928:./FWLIB/src/stm32f4xx_fsmc.c ****   {
 929:./FWLIB/src/stm32f4xx_fsmc.c ****     bitstatus = RESET;
 1229              		.loc 1 929 0 is_stmt 1
 1230 0018 0020     		movs	r0, #0
 1231              	.LVL67:
 1232 001a 7047     		bx	lr
 1233              	.LVL68:
 1234              	.L113:
 908:./FWLIB/src/stm32f4xx_fsmc.c ****   }  
 1235              		.loc 1 908 0
 1236 001c 054B     		ldr	r3, .L115+4
 1237 001e 5B68     		ldr	r3, [r3, #4]
 1238              	.LVL69:
 1239 0020 F5E7     		b	.L108
 1240              	.LVL70:
 1241              	.L114:
 912:./FWLIB/src/stm32f4xx_fsmc.c ****   }
ARM GAS  /tmp/ccwrLD3d.s 			page 40


 1242              		.loc 1 912 0
 1243 0022 054B     		ldr	r3, .L115+8
 1244 0024 5B68     		ldr	r3, [r3, #4]
 1245              	.LVL71:
 1246 0026 F2E7     		b	.L108
 1247              	.LVL72:
 1248              	.L111:
 1249              		.loc 1 929 0
 1250 0028 0020     		movs	r0, #0
 1251              	.LVL73:
 1252 002a 7047     		bx	lr
 1253              	.LVL74:
 1254              	.L112:
 925:./FWLIB/src/stm32f4xx_fsmc.c ****   }
 1255              		.loc 1 925 0
 1256 002c 0120     		movs	r0, #1
 1257              	.LVL75:
 930:./FWLIB/src/stm32f4xx_fsmc.c ****   }
 931:./FWLIB/src/stm32f4xx_fsmc.c ****   return bitstatus; 
 932:./FWLIB/src/stm32f4xx_fsmc.c **** }
 1258              		.loc 1 932 0
 1259 002e 7047     		bx	lr
 1260              	.L116:
 1261              		.align	2
 1262              	.L115:
 1263 0030 A00000A0 		.word	-1610612576
 1264 0034 600000A0 		.word	-1610612640
 1265 0038 800000A0 		.word	-1610612608
 1266              		.cfi_endproc
 1267              	.LFE129:
 1269              		.section	.text.FSMC_ClearITPendingBit,"ax",%progbits
 1270              		.align	1
 1271              		.global	FSMC_ClearITPendingBit
 1272              		.syntax unified
 1273              		.thumb
 1274              		.thumb_func
 1275              		.fpu fpv4-sp-d16
 1277              	FSMC_ClearITPendingBit:
 1278              	.LFB130:
 933:./FWLIB/src/stm32f4xx_fsmc.c **** 
 934:./FWLIB/src/stm32f4xx_fsmc.c **** /**
 935:./FWLIB/src/stm32f4xx_fsmc.c ****   * @brief  Clears the FSMC's interrupt pending bits.
 936:./FWLIB/src/stm32f4xx_fsmc.c ****   * @param  FSMC_Bank: specifies the FSMC Bank to be used
 937:./FWLIB/src/stm32f4xx_fsmc.c ****   *          This parameter can be one of the following values:
 938:./FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank2_NAND: FSMC Bank2 NAND 
 939:./FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank3_NAND: FSMC Bank3 NAND
 940:./FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_Bank4_PCCARD: FSMC Bank4 PCCARD
 941:./FWLIB/src/stm32f4xx_fsmc.c ****   * @param  FSMC_IT: specifies the interrupt pending bit to clear.
 942:./FWLIB/src/stm32f4xx_fsmc.c ****   *          This parameter can be any combination of the following values:
 943:./FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_IT_RisingEdge: Rising edge detection interrupt. 
 944:./FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_IT_Level: Level edge detection interrupt.
 945:./FWLIB/src/stm32f4xx_fsmc.c ****   *            @arg FSMC_IT_FallingEdge: Falling edge detection interrupt.
 946:./FWLIB/src/stm32f4xx_fsmc.c ****   * @retval None
 947:./FWLIB/src/stm32f4xx_fsmc.c ****   */
 948:./FWLIB/src/stm32f4xx_fsmc.c **** void FSMC_ClearITPendingBit(uint32_t FSMC_Bank, uint32_t FSMC_IT)
 949:./FWLIB/src/stm32f4xx_fsmc.c **** {
 1279              		.loc 1 949 0
ARM GAS  /tmp/ccwrLD3d.s 			page 41


 1280              		.cfi_startproc
 1281              		@ args = 0, pretend = 0, frame = 0
 1282              		@ frame_needed = 0, uses_anonymous_args = 0
 1283              		@ link register save eliminated.
 1284              	.LVL76:
 950:./FWLIB/src/stm32f4xx_fsmc.c ****   /* Check the parameters */
 951:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
 952:./FWLIB/src/stm32f4xx_fsmc.c ****   assert_param(IS_FSMC_IT(FSMC_IT));
 953:./FWLIB/src/stm32f4xx_fsmc.c ****     
 954:./FWLIB/src/stm32f4xx_fsmc.c ****   if(FSMC_Bank == FSMC_Bank2_NAND)
 1285              		.loc 1 954 0
 1286 0000 1028     		cmp	r0, #16
 1287 0002 08D0     		beq	.L121
 955:./FWLIB/src/stm32f4xx_fsmc.c ****   {
 956:./FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank2->SR2 &= ~(FSMC_IT >> 3); 
 957:./FWLIB/src/stm32f4xx_fsmc.c ****   }  
 958:./FWLIB/src/stm32f4xx_fsmc.c ****   else if(FSMC_Bank == FSMC_Bank3_NAND)
 1288              		.loc 1 958 0
 1289 0004 B0F5807F 		cmp	r0, #256
 1290 0008 0BD0     		beq	.L122
 959:./FWLIB/src/stm32f4xx_fsmc.c ****   {
 960:./FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank3->SR3 &= ~(FSMC_IT >> 3);
 961:./FWLIB/src/stm32f4xx_fsmc.c ****   }
 962:./FWLIB/src/stm32f4xx_fsmc.c ****   /* FSMC_Bank4_PCCARD*/
 963:./FWLIB/src/stm32f4xx_fsmc.c ****   else
 964:./FWLIB/src/stm32f4xx_fsmc.c ****   {
 965:./FWLIB/src/stm32f4xx_fsmc.c ****     FSMC_Bank4->SR4 &= ~(FSMC_IT >> 3);
 1291              		.loc 1 965 0
 1292 000a 094A     		ldr	r2, .L123
 1293 000c 5368     		ldr	r3, [r2, #4]
 1294 000e 23EAD101 		bic	r1, r3, r1, lsr #3
 1295              	.LVL77:
 1296 0012 5160     		str	r1, [r2, #4]
 966:./FWLIB/src/stm32f4xx_fsmc.c ****   }
 967:./FWLIB/src/stm32f4xx_fsmc.c **** }
 1297              		.loc 1 967 0
 1298 0014 7047     		bx	lr
 1299              	.LVL78:
 1300              	.L121:
 956:./FWLIB/src/stm32f4xx_fsmc.c ****   }  
 1301              		.loc 1 956 0
 1302 0016 074A     		ldr	r2, .L123+4
 1303 0018 5368     		ldr	r3, [r2, #4]
 1304 001a 23EAD101 		bic	r1, r3, r1, lsr #3
 1305              	.LVL79:
 1306 001e 5160     		str	r1, [r2, #4]
 1307 0020 7047     		bx	lr
 1308              	.LVL80:
 1309              	.L122:
 960:./FWLIB/src/stm32f4xx_fsmc.c ****   }
 1310              		.loc 1 960 0
 1311 0022 054A     		ldr	r2, .L123+8
 1312 0024 5368     		ldr	r3, [r2, #4]
 1313 0026 23EAD101 		bic	r1, r3, r1, lsr #3
 1314              	.LVL81:
 1315 002a 5160     		str	r1, [r2, #4]
 1316 002c 7047     		bx	lr
ARM GAS  /tmp/ccwrLD3d.s 			page 42


 1317              	.L124:
 1318 002e 00BF     		.align	2
 1319              	.L123:
 1320 0030 A00000A0 		.word	-1610612576
 1321 0034 600000A0 		.word	-1610612640
 1322 0038 800000A0 		.word	-1610612608
 1323              		.cfi_endproc
 1324              	.LFE130:
 1326              		.global	FSMC_DefaultTimingStruct
 1327              		.section	.rodata.FSMC_DefaultTimingStruct,"a",%progbits
 1328              		.align	2
 1329              		.set	.LANCHOR0,. + 0
 1332              	FSMC_DefaultTimingStruct:
 1333 0000 0F000000 		.word	15
 1334 0004 0F000000 		.word	15
 1335 0008 FF000000 		.word	255
 1336 000c 0F000000 		.word	15
 1337 0010 0F000000 		.word	15
 1338 0014 0F000000 		.word	15
 1339 0018 00000000 		.word	0
 1340              		.text
 1341              	.Letext0:
 1342              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1343              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1344              		.file 4 "build/lnInclude/core_cm4.h"
 1345              		.file 5 "build/lnInclude/system_stm32f4xx.h"
 1346              		.file 6 "build/lnInclude/stm32f4xx.h"
 1347              		.file 7 "build/lnInclude/stm32f4xx_fsmc.h"
ARM GAS  /tmp/ccwrLD3d.s 			page 43


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_fsmc.c
     /tmp/ccwrLD3d.s:18     .text.FSMC_NORSRAMDeInit:0000000000000000 $t
     /tmp/ccwrLD3d.s:25     .text.FSMC_NORSRAMDeInit:0000000000000000 FSMC_NORSRAMDeInit
     /tmp/ccwrLD3d.s:64     .text.FSMC_NORSRAMInit:0000000000000000 $t
     /tmp/ccwrLD3d.s:71     .text.FSMC_NORSRAMInit:0000000000000000 FSMC_NORSRAMInit
     /tmp/ccwrLD3d.s:219    .text.FSMC_NORSRAMInit:00000000000000c0 $d
     /tmp/ccwrLD3d.s:224    .text.FSMC_NORSRAMStructInit:0000000000000000 $t
     /tmp/ccwrLD3d.s:231    .text.FSMC_NORSRAMStructInit:0000000000000000 FSMC_NORSRAMStructInit
     /tmp/ccwrLD3d.s:279    .text.FSMC_NORSRAMStructInit:0000000000000030 $d
     /tmp/ccwrLD3d.s:284    .text.FSMC_NORSRAMCmd:0000000000000000 $t
     /tmp/ccwrLD3d.s:291    .text.FSMC_NORSRAMCmd:0000000000000000 FSMC_NORSRAMCmd
     /tmp/ccwrLD3d.s:321    .text.FSMC_NORSRAMCmd:0000000000000028 $d
     /tmp/ccwrLD3d.s:326    .text.FSMC_NANDDeInit:0000000000000000 $t
     /tmp/ccwrLD3d.s:333    .text.FSMC_NANDDeInit:0000000000000000 FSMC_NANDDeInit
     /tmp/ccwrLD3d.s:375    .text.FSMC_NANDDeInit:000000000000002c $d
     /tmp/ccwrLD3d.s:381    .text.FSMC_NANDInit:0000000000000000 $t
     /tmp/ccwrLD3d.s:388    .text.FSMC_NANDInit:0000000000000000 FSMC_NANDInit
     /tmp/ccwrLD3d.s:494    .text.FSMC_NANDInit:0000000000000068 $d
     /tmp/ccwrLD3d.s:500    .text.FSMC_NANDStructInit:0000000000000000 $t
     /tmp/ccwrLD3d.s:507    .text.FSMC_NANDStructInit:0000000000000000 FSMC_NANDStructInit
     /tmp/ccwrLD3d.s:562    .text.FSMC_NANDCmd:0000000000000000 $t
     /tmp/ccwrLD3d.s:569    .text.FSMC_NANDCmd:0000000000000000 FSMC_NANDCmd
     /tmp/ccwrLD3d.s:621    .text.FSMC_NANDCmd:000000000000003c $d
     /tmp/ccwrLD3d.s:628    .text.FSMC_NANDECCCmd:0000000000000000 $t
     /tmp/ccwrLD3d.s:635    .text.FSMC_NANDECCCmd:0000000000000000 FSMC_NANDECCCmd
     /tmp/ccwrLD3d.s:687    .text.FSMC_NANDECCCmd:000000000000003c $d
     /tmp/ccwrLD3d.s:694    .text.FSMC_GetECC:0000000000000000 $t
     /tmp/ccwrLD3d.s:701    .text.FSMC_GetECC:0000000000000000 FSMC_GetECC
     /tmp/ccwrLD3d.s:728    .text.FSMC_GetECC:0000000000000010 $d
     /tmp/ccwrLD3d.s:734    .text.FSMC_PCCARDDeInit:0000000000000000 $t
     /tmp/ccwrLD3d.s:741    .text.FSMC_PCCARDDeInit:0000000000000000 FSMC_PCCARDDeInit
     /tmp/ccwrLD3d.s:767    .text.FSMC_PCCARDDeInit:0000000000000018 $d
     /tmp/ccwrLD3d.s:772    .text.FSMC_PCCARDInit:0000000000000000 $t
     /tmp/ccwrLD3d.s:779    .text.FSMC_PCCARDInit:0000000000000000 FSMC_PCCARDInit
     /tmp/ccwrLD3d.s:866    .text.FSMC_PCCARDInit:0000000000000068 $d
     /tmp/ccwrLD3d.s:871    .text.FSMC_PCCARDStructInit:0000000000000000 $t
     /tmp/ccwrLD3d.s:878    .text.FSMC_PCCARDStructInit:0000000000000000 FSMC_PCCARDStructInit
     /tmp/ccwrLD3d.s:936    .text.FSMC_PCCARDCmd:0000000000000000 $t
     /tmp/ccwrLD3d.s:943    .text.FSMC_PCCARDCmd:0000000000000000 FSMC_PCCARDCmd
     /tmp/ccwrLD3d.s:971    .text.FSMC_PCCARDCmd:000000000000001c $d
     /tmp/ccwrLD3d.s:977    .text.FSMC_ITConfig:0000000000000000 $t
     /tmp/ccwrLD3d.s:984    .text.FSMC_ITConfig:0000000000000000 FSMC_ITConfig
     /tmp/ccwrLD3d.s:1068   .text.FSMC_ITConfig:0000000000000058 $d
     /tmp/ccwrLD3d.s:1075   .text.FSMC_GetFlagStatus:0000000000000000 $t
     /tmp/ccwrLD3d.s:1082   .text.FSMC_GetFlagStatus:0000000000000000 FSMC_GetFlagStatus
     /tmp/ccwrLD3d.s:1131   .text.FSMC_GetFlagStatus:0000000000000028 $d
     /tmp/ccwrLD3d.s:1138   .text.FSMC_ClearFlag:0000000000000000 $t
     /tmp/ccwrLD3d.s:1145   .text.FSMC_ClearFlag:0000000000000000 FSMC_ClearFlag
     /tmp/ccwrLD3d.s:1188   .text.FSMC_ClearFlag:0000000000000030 $d
     /tmp/ccwrLD3d.s:1195   .text.FSMC_GetITStatus:0000000000000000 $t
     /tmp/ccwrLD3d.s:1202   .text.FSMC_GetITStatus:0000000000000000 FSMC_GetITStatus
     /tmp/ccwrLD3d.s:1263   .text.FSMC_GetITStatus:0000000000000030 $d
     /tmp/ccwrLD3d.s:1270   .text.FSMC_ClearITPendingBit:0000000000000000 $t
     /tmp/ccwrLD3d.s:1277   .text.FSMC_ClearITPendingBit:0000000000000000 FSMC_ClearITPendingBit
     /tmp/ccwrLD3d.s:1320   .text.FSMC_ClearITPendingBit:0000000000000030 $d
     /tmp/ccwrLD3d.s:1332   .rodata.FSMC_DefaultTimingStruct:0000000000000000 FSMC_DefaultTimingStruct
ARM GAS  /tmp/ccwrLD3d.s 			page 44


     /tmp/ccwrLD3d.s:1328   .rodata.FSMC_DefaultTimingStruct:0000000000000000 $d

NO UNDEFINED SYMBOLS
