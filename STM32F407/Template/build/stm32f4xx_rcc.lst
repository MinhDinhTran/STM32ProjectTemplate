ARM GAS  /tmp/ccqlGgFJ.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_rcc.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.RCC_DeInit,"ax",%progbits
  18              		.align	1
  19              		.global	RCC_DeInit
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	RCC_DeInit:
  26              	.LFB112:
  27              		.file 1 "./FWLIB/src/stm32f4xx_rcc.c"
   1:./FWLIB/src/stm32f4xx_rcc.c **** /**
   2:./FWLIB/src/stm32f4xx_rcc.c ****   ******************************************************************************
   3:./FWLIB/src/stm32f4xx_rcc.c ****   * @file    stm32f4xx_rcc.c
   4:./FWLIB/src/stm32f4xx_rcc.c ****   * @author  MCD Application Team
   5:./FWLIB/src/stm32f4xx_rcc.c ****   * @version V1.4.0
   6:./FWLIB/src/stm32f4xx_rcc.c ****   * @date    04-August-2014
   7:./FWLIB/src/stm32f4xx_rcc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:./FWLIB/src/stm32f4xx_rcc.c ****   *          functionalities of the Reset and clock control (RCC) peripheral:
   9:./FWLIB/src/stm32f4xx_rcc.c ****   *           + Internal/external clocks, PLL, CSS and MCO configuration
  10:./FWLIB/src/stm32f4xx_rcc.c ****   *           + System, AHB and APB busses clocks configuration
  11:./FWLIB/src/stm32f4xx_rcc.c ****   *           + Peripheral clocks configuration
  12:./FWLIB/src/stm32f4xx_rcc.c ****   *           + Interrupts and flags management
  13:./FWLIB/src/stm32f4xx_rcc.c ****   *
  14:./FWLIB/src/stm32f4xx_rcc.c ****  @verbatim                
  15:./FWLIB/src/stm32f4xx_rcc.c ****  ===============================================================================
  16:./FWLIB/src/stm32f4xx_rcc.c ****                       ##### RCC specific features #####
  17:./FWLIB/src/stm32f4xx_rcc.c ****  ===============================================================================
  18:./FWLIB/src/stm32f4xx_rcc.c ****     [..]  
  19:./FWLIB/src/stm32f4xx_rcc.c ****       After reset the device is running from Internal High Speed oscillator 
  20:./FWLIB/src/stm32f4xx_rcc.c ****       (HSI 16MHz) with Flash 0 wait state, Flash prefetch buffer, D-Cache 
  21:./FWLIB/src/stm32f4xx_rcc.c ****       and I-Cache are disabled, and all peripherals are off except internal
  22:./FWLIB/src/stm32f4xx_rcc.c ****       SRAM, Flash and JTAG.
  23:./FWLIB/src/stm32f4xx_rcc.c ****       (+) There is no prescaler on High speed (AHB) and Low speed (APB) busses;
  24:./FWLIB/src/stm32f4xx_rcc.c ****           all peripherals mapped on these busses are running at HSI speed.
  25:./FWLIB/src/stm32f4xx_rcc.c ****       (+) The clock for all peripherals is switched off, except the SRAM and FLASH.
  26:./FWLIB/src/stm32f4xx_rcc.c ****       (+) All GPIOs are in input floating state, except the JTAG pins which
  27:./FWLIB/src/stm32f4xx_rcc.c ****           are assigned to be used for debug purpose.
  28:./FWLIB/src/stm32f4xx_rcc.c ****     [..]          
  29:./FWLIB/src/stm32f4xx_rcc.c ****       Once the device started from reset, the user application has to:        
  30:./FWLIB/src/stm32f4xx_rcc.c ****       (+) Configure the clock source to be used to drive the System clock
  31:./FWLIB/src/stm32f4xx_rcc.c ****           (if the application needs higher frequency/performance)
ARM GAS  /tmp/ccqlGgFJ.s 			page 2


  32:./FWLIB/src/stm32f4xx_rcc.c ****       (+) Configure the System clock frequency and Flash settings  
  33:./FWLIB/src/stm32f4xx_rcc.c ****       (+) Configure the AHB and APB busses prescalers
  34:./FWLIB/src/stm32f4xx_rcc.c ****       (+) Enable the clock for the peripheral(s) to be used
  35:./FWLIB/src/stm32f4xx_rcc.c ****       (+) Configure the clock source(s) for peripherals which clocks are not
  36:./FWLIB/src/stm32f4xx_rcc.c ****           derived from the System clock (I2S, RTC, ADC, USB OTG FS/SDIO/RNG)                       
  37:./FWLIB/src/stm32f4xx_rcc.c ****  @endverbatim    
  38:./FWLIB/src/stm32f4xx_rcc.c ****   ******************************************************************************
  39:./FWLIB/src/stm32f4xx_rcc.c ****   * @attention
  40:./FWLIB/src/stm32f4xx_rcc.c ****   *
  41:./FWLIB/src/stm32f4xx_rcc.c ****   * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
  42:./FWLIB/src/stm32f4xx_rcc.c ****   *
  43:./FWLIB/src/stm32f4xx_rcc.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  44:./FWLIB/src/stm32f4xx_rcc.c ****   * You may not use this file except in compliance with the License.
  45:./FWLIB/src/stm32f4xx_rcc.c ****   * You may obtain a copy of the License at:
  46:./FWLIB/src/stm32f4xx_rcc.c ****   *
  47:./FWLIB/src/stm32f4xx_rcc.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  48:./FWLIB/src/stm32f4xx_rcc.c ****   *
  49:./FWLIB/src/stm32f4xx_rcc.c ****   * Unless required by applicable law or agreed to in writing, software 
  50:./FWLIB/src/stm32f4xx_rcc.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  51:./FWLIB/src/stm32f4xx_rcc.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  52:./FWLIB/src/stm32f4xx_rcc.c ****   * See the License for the specific language governing permissions and
  53:./FWLIB/src/stm32f4xx_rcc.c ****   * limitations under the License.
  54:./FWLIB/src/stm32f4xx_rcc.c ****   *
  55:./FWLIB/src/stm32f4xx_rcc.c ****   ******************************************************************************
  56:./FWLIB/src/stm32f4xx_rcc.c ****   */
  57:./FWLIB/src/stm32f4xx_rcc.c **** 
  58:./FWLIB/src/stm32f4xx_rcc.c **** /* Includes ------------------------------------------------------------------*/
  59:./FWLIB/src/stm32f4xx_rcc.c **** #include "stm32f4xx_rcc.h"
  60:./FWLIB/src/stm32f4xx_rcc.c **** 
  61:./FWLIB/src/stm32f4xx_rcc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  62:./FWLIB/src/stm32f4xx_rcc.c ****   * @{
  63:./FWLIB/src/stm32f4xx_rcc.c ****   */
  64:./FWLIB/src/stm32f4xx_rcc.c **** 
  65:./FWLIB/src/stm32f4xx_rcc.c **** /** @defgroup RCC 
  66:./FWLIB/src/stm32f4xx_rcc.c ****   * @brief RCC driver modules
  67:./FWLIB/src/stm32f4xx_rcc.c ****   * @{
  68:./FWLIB/src/stm32f4xx_rcc.c ****   */ 
  69:./FWLIB/src/stm32f4xx_rcc.c **** 
  70:./FWLIB/src/stm32f4xx_rcc.c **** /* Private typedef -----------------------------------------------------------*/
  71:./FWLIB/src/stm32f4xx_rcc.c **** /* Private define ------------------------------------------------------------*/
  72:./FWLIB/src/stm32f4xx_rcc.c **** /* ------------ RCC registers bit address in the alias region ----------- */
  73:./FWLIB/src/stm32f4xx_rcc.c **** #define RCC_OFFSET                (RCC_BASE - PERIPH_BASE)
  74:./FWLIB/src/stm32f4xx_rcc.c **** /* --- CR Register ---*/
  75:./FWLIB/src/stm32f4xx_rcc.c **** /* Alias word address of HSION bit */
  76:./FWLIB/src/stm32f4xx_rcc.c **** #define CR_OFFSET                 (RCC_OFFSET + 0x00)
  77:./FWLIB/src/stm32f4xx_rcc.c **** #define HSION_BitNumber           0x00
  78:./FWLIB/src/stm32f4xx_rcc.c **** #define CR_HSION_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (HSION_BitNumber * 4))
  79:./FWLIB/src/stm32f4xx_rcc.c **** /* Alias word address of CSSON bit */
  80:./FWLIB/src/stm32f4xx_rcc.c **** #define CSSON_BitNumber           0x13
  81:./FWLIB/src/stm32f4xx_rcc.c **** #define CR_CSSON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (CSSON_BitNumber * 4))
  82:./FWLIB/src/stm32f4xx_rcc.c **** /* Alias word address of PLLON bit */
  83:./FWLIB/src/stm32f4xx_rcc.c **** #define PLLON_BitNumber           0x18
  84:./FWLIB/src/stm32f4xx_rcc.c **** #define CR_PLLON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLON_BitNumber * 4))
  85:./FWLIB/src/stm32f4xx_rcc.c **** /* Alias word address of PLLI2SON bit */
  86:./FWLIB/src/stm32f4xx_rcc.c **** #define PLLI2SON_BitNumber        0x1A
  87:./FWLIB/src/stm32f4xx_rcc.c **** #define CR_PLLI2SON_BB            (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLI2SON_BitNumber * 4))
  88:./FWLIB/src/stm32f4xx_rcc.c **** 
ARM GAS  /tmp/ccqlGgFJ.s 			page 3


  89:./FWLIB/src/stm32f4xx_rcc.c **** /* Alias word address of PLLSAION bit */
  90:./FWLIB/src/stm32f4xx_rcc.c **** #define PLLSAION_BitNumber        0x1C
  91:./FWLIB/src/stm32f4xx_rcc.c **** #define CR_PLLSAION_BB            (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLSAION_BitNumber * 4))
  92:./FWLIB/src/stm32f4xx_rcc.c **** 
  93:./FWLIB/src/stm32f4xx_rcc.c **** /* --- CFGR Register ---*/
  94:./FWLIB/src/stm32f4xx_rcc.c **** /* Alias word address of I2SSRC bit */
  95:./FWLIB/src/stm32f4xx_rcc.c **** #define CFGR_OFFSET               (RCC_OFFSET + 0x08)
  96:./FWLIB/src/stm32f4xx_rcc.c **** #define I2SSRC_BitNumber          0x17
  97:./FWLIB/src/stm32f4xx_rcc.c **** #define CFGR_I2SSRC_BB            (PERIPH_BB_BASE + (CFGR_OFFSET * 32) + (I2SSRC_BitNumber * 4))
  98:./FWLIB/src/stm32f4xx_rcc.c **** 
  99:./FWLIB/src/stm32f4xx_rcc.c **** /* --- BDCR Register ---*/
 100:./FWLIB/src/stm32f4xx_rcc.c **** /* Alias word address of RTCEN bit */
 101:./FWLIB/src/stm32f4xx_rcc.c **** #define BDCR_OFFSET               (RCC_OFFSET + 0x70)
 102:./FWLIB/src/stm32f4xx_rcc.c **** #define RTCEN_BitNumber           0x0F
 103:./FWLIB/src/stm32f4xx_rcc.c **** #define BDCR_RTCEN_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (RTCEN_BitNumber * 4))
 104:./FWLIB/src/stm32f4xx_rcc.c **** /* Alias word address of BDRST bit */
 105:./FWLIB/src/stm32f4xx_rcc.c **** #define BDRST_BitNumber           0x10
 106:./FWLIB/src/stm32f4xx_rcc.c **** #define BDCR_BDRST_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (BDRST_BitNumber * 4))
 107:./FWLIB/src/stm32f4xx_rcc.c **** 
 108:./FWLIB/src/stm32f4xx_rcc.c **** /* --- CSR Register ---*/
 109:./FWLIB/src/stm32f4xx_rcc.c **** /* Alias word address of LSION bit */
 110:./FWLIB/src/stm32f4xx_rcc.c **** #define CSR_OFFSET                (RCC_OFFSET + 0x74)
 111:./FWLIB/src/stm32f4xx_rcc.c **** #define LSION_BitNumber           0x00
 112:./FWLIB/src/stm32f4xx_rcc.c **** #define CSR_LSION_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (LSION_BitNumber * 4))
 113:./FWLIB/src/stm32f4xx_rcc.c **** 
 114:./FWLIB/src/stm32f4xx_rcc.c **** /* --- DCKCFGR Register ---*/
 115:./FWLIB/src/stm32f4xx_rcc.c **** /* Alias word address of TIMPRE bit */
 116:./FWLIB/src/stm32f4xx_rcc.c **** #define DCKCFGR_OFFSET            (RCC_OFFSET + 0x8C)
 117:./FWLIB/src/stm32f4xx_rcc.c **** #define TIMPRE_BitNumber          0x18
 118:./FWLIB/src/stm32f4xx_rcc.c **** #define DCKCFGR_TIMPRE_BB         (PERIPH_BB_BASE + (DCKCFGR_OFFSET * 32) + (TIMPRE_BitNumber * 4))
 119:./FWLIB/src/stm32f4xx_rcc.c **** /* ---------------------- RCC registers bit mask ------------------------ */
 120:./FWLIB/src/stm32f4xx_rcc.c **** /* CFGR register bit mask */
 121:./FWLIB/src/stm32f4xx_rcc.c **** #define CFGR_MCO2_RESET_MASK      ((uint32_t)0x07FFFFFF)
 122:./FWLIB/src/stm32f4xx_rcc.c **** #define CFGR_MCO1_RESET_MASK      ((uint32_t)0xF89FFFFF)
 123:./FWLIB/src/stm32f4xx_rcc.c **** 
 124:./FWLIB/src/stm32f4xx_rcc.c **** /* RCC Flag Mask */
 125:./FWLIB/src/stm32f4xx_rcc.c **** #define FLAG_MASK                 ((uint8_t)0x1F)
 126:./FWLIB/src/stm32f4xx_rcc.c **** 
 127:./FWLIB/src/stm32f4xx_rcc.c **** /* CR register byte 3 (Bits[23:16]) base address */
 128:./FWLIB/src/stm32f4xx_rcc.c **** #define CR_BYTE3_ADDRESS          ((uint32_t)0x40023802)
 129:./FWLIB/src/stm32f4xx_rcc.c **** 
 130:./FWLIB/src/stm32f4xx_rcc.c **** /* CIR register byte 2 (Bits[15:8]) base address */
 131:./FWLIB/src/stm32f4xx_rcc.c **** #define CIR_BYTE2_ADDRESS         ((uint32_t)(RCC_BASE + 0x0C + 0x01))
 132:./FWLIB/src/stm32f4xx_rcc.c **** 
 133:./FWLIB/src/stm32f4xx_rcc.c **** /* CIR register byte 3 (Bits[23:16]) base address */
 134:./FWLIB/src/stm32f4xx_rcc.c **** #define CIR_BYTE3_ADDRESS         ((uint32_t)(RCC_BASE + 0x0C + 0x02))
 135:./FWLIB/src/stm32f4xx_rcc.c **** 
 136:./FWLIB/src/stm32f4xx_rcc.c **** /* BDCR register base address */
 137:./FWLIB/src/stm32f4xx_rcc.c **** #define BDCR_ADDRESS              (PERIPH_BASE + BDCR_OFFSET)
 138:./FWLIB/src/stm32f4xx_rcc.c **** 
 139:./FWLIB/src/stm32f4xx_rcc.c **** /* Private macro -------------------------------------------------------------*/
 140:./FWLIB/src/stm32f4xx_rcc.c **** /* Private variables ---------------------------------------------------------*/
 141:./FWLIB/src/stm32f4xx_rcc.c **** static __I uint8_t APBAHBPrescTable[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};
 142:./FWLIB/src/stm32f4xx_rcc.c **** 
 143:./FWLIB/src/stm32f4xx_rcc.c **** /* Private function prototypes -----------------------------------------------*/
 144:./FWLIB/src/stm32f4xx_rcc.c **** /* Private functions ---------------------------------------------------------*/
 145:./FWLIB/src/stm32f4xx_rcc.c **** 
ARM GAS  /tmp/ccqlGgFJ.s 			page 4


 146:./FWLIB/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Private_Functions
 147:./FWLIB/src/stm32f4xx_rcc.c ****   * @{
 148:./FWLIB/src/stm32f4xx_rcc.c ****   */ 
 149:./FWLIB/src/stm32f4xx_rcc.c **** 
 150:./FWLIB/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group1 Internal and external clocks, PLL, CSS and MCO configuration functions
 151:./FWLIB/src/stm32f4xx_rcc.c ****  *  @brief   Internal and external clocks, PLL, CSS and MCO configuration functions 
 152:./FWLIB/src/stm32f4xx_rcc.c ****  *
 153:./FWLIB/src/stm32f4xx_rcc.c **** @verbatim   
 154:./FWLIB/src/stm32f4xx_rcc.c ****  ===================================================================================
 155:./FWLIB/src/stm32f4xx_rcc.c ****  ##### Internal and  external clocks, PLL, CSS and MCO configuration functions #####
 156:./FWLIB/src/stm32f4xx_rcc.c ****  ===================================================================================  
 157:./FWLIB/src/stm32f4xx_rcc.c ****     [..]
 158:./FWLIB/src/stm32f4xx_rcc.c ****       This section provide functions allowing to configure the internal/external clocks,
 159:./FWLIB/src/stm32f4xx_rcc.c ****       PLLs, CSS and MCO pins.
 160:./FWLIB/src/stm32f4xx_rcc.c ****   
 161:./FWLIB/src/stm32f4xx_rcc.c ****       (#) HSI (high-speed internal), 16 MHz factory-trimmed RC used directly or through
 162:./FWLIB/src/stm32f4xx_rcc.c ****           the PLL as System clock source.
 163:./FWLIB/src/stm32f4xx_rcc.c **** 
 164:./FWLIB/src/stm32f4xx_rcc.c ****       (#) LSI (low-speed internal), 32 KHz low consumption RC used as IWDG and/or RTC
 165:./FWLIB/src/stm32f4xx_rcc.c ****           clock source.
 166:./FWLIB/src/stm32f4xx_rcc.c **** 
 167:./FWLIB/src/stm32f4xx_rcc.c ****       (#) HSE (high-speed external), 4 to 26 MHz crystal oscillator used directly or
 168:./FWLIB/src/stm32f4xx_rcc.c ****           through the PLL as System clock source. Can be used also as RTC clock source.
 169:./FWLIB/src/stm32f4xx_rcc.c **** 
 170:./FWLIB/src/stm32f4xx_rcc.c ****       (#) LSE (low-speed external), 32 KHz oscillator used as RTC clock source.   
 171:./FWLIB/src/stm32f4xx_rcc.c **** 
 172:./FWLIB/src/stm32f4xx_rcc.c ****       (#) PLL (clocked by HSI or HSE), featuring two different output clocks:
 173:./FWLIB/src/stm32f4xx_rcc.c ****         (++) The first output is used to generate the high speed system clock (up to 168 MHz)
 174:./FWLIB/src/stm32f4xx_rcc.c ****         (++) The second output is used to generate the clock for the USB OTG FS (48 MHz),
 175:./FWLIB/src/stm32f4xx_rcc.c ****              the random analog generator (<=48 MHz) and the SDIO (<= 48 MHz).
 176:./FWLIB/src/stm32f4xx_rcc.c **** 
 177:./FWLIB/src/stm32f4xx_rcc.c ****       (#) PLLI2S (clocked by HSI or HSE), used to generate an accurate clock to achieve 
 178:./FWLIB/src/stm32f4xx_rcc.c ****           high-quality audio performance on the I2S interface or SAI interface in case 
 179:./FWLIB/src/stm32f4xx_rcc.c ****           of STM32F429x/439x devices.
 180:./FWLIB/src/stm32f4xx_rcc.c ****      
 181:./FWLIB/src/stm32f4xx_rcc.c ****       (#) PLLSAI clocked by (HSI or HSE), used to generate an accurate clock to SAI 
 182:./FWLIB/src/stm32f4xx_rcc.c ****           interface and LCD TFT controller available only for STM32F42xxx/43xxx devices.
 183:./FWLIB/src/stm32f4xx_rcc.c ****   
 184:./FWLIB/src/stm32f4xx_rcc.c ****       (#) CSS (Clock security system), once enable and if a HSE clock failure occurs 
 185:./FWLIB/src/stm32f4xx_rcc.c ****          (HSE used directly or through PLL as System clock source), the System clock
 186:./FWLIB/src/stm32f4xx_rcc.c ****          is automatically switched to HSI and an interrupt is generated if enabled. 
 187:./FWLIB/src/stm32f4xx_rcc.c ****          The interrupt is linked to the Cortex-M4 NMI (Non-Maskable Interrupt) 
 188:./FWLIB/src/stm32f4xx_rcc.c ****          exception vector.   
 189:./FWLIB/src/stm32f4xx_rcc.c **** 
 190:./FWLIB/src/stm32f4xx_rcc.c ****       (#) MCO1 (microcontroller clock output), used to output HSI, LSE, HSE or PLL
 191:./FWLIB/src/stm32f4xx_rcc.c ****           clock (through a configurable prescaler) on PA8 pin.
 192:./FWLIB/src/stm32f4xx_rcc.c **** 
 193:./FWLIB/src/stm32f4xx_rcc.c ****       (#) MCO2 (microcontroller clock output), used to output HSE, PLL, SYSCLK or PLLI2S
 194:./FWLIB/src/stm32f4xx_rcc.c ****           clock (through a configurable prescaler) on PC9 pin.
 195:./FWLIB/src/stm32f4xx_rcc.c ****  @endverbatim
 196:./FWLIB/src/stm32f4xx_rcc.c ****   * @{
 197:./FWLIB/src/stm32f4xx_rcc.c ****   */
 198:./FWLIB/src/stm32f4xx_rcc.c **** 
 199:./FWLIB/src/stm32f4xx_rcc.c **** /**
 200:./FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 201:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   The default reset state of the clock configuration is given below:
 202:./FWLIB/src/stm32f4xx_rcc.c ****   *            - HSI ON and used as system clock source
ARM GAS  /tmp/ccqlGgFJ.s 			page 5


 203:./FWLIB/src/stm32f4xx_rcc.c ****   *            - HSE, PLL and PLLI2S OFF
 204:./FWLIB/src/stm32f4xx_rcc.c ****   *            - AHB, APB1 and APB2 prescaler set to 1.
 205:./FWLIB/src/stm32f4xx_rcc.c ****   *            - CSS, MCO1 and MCO2 OFF
 206:./FWLIB/src/stm32f4xx_rcc.c ****   *            - All interrupts disabled
 207:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function doesn't modify the configuration of the
 208:./FWLIB/src/stm32f4xx_rcc.c ****   *            - Peripheral clocks  
 209:./FWLIB/src/stm32f4xx_rcc.c ****   *            - LSI, LSE and RTC clocks 
 210:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  None
 211:./FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 212:./FWLIB/src/stm32f4xx_rcc.c ****   */
 213:./FWLIB/src/stm32f4xx_rcc.c **** void RCC_DeInit(void)
 214:./FWLIB/src/stm32f4xx_rcc.c **** {
  28              		.loc 1 214 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
 215:./FWLIB/src/stm32f4xx_rcc.c ****   /* Set HSION bit */
 216:./FWLIB/src/stm32f4xx_rcc.c ****   RCC->CR |= (uint32_t)0x00000001;
  33              		.loc 1 216 0
  34 0000 0E4B     		ldr	r3, .L2
  35 0002 1A68     		ldr	r2, [r3]
  36 0004 42F00102 		orr	r2, r2, #1
  37 0008 1A60     		str	r2, [r3]
 217:./FWLIB/src/stm32f4xx_rcc.c **** 
 218:./FWLIB/src/stm32f4xx_rcc.c ****   /* Reset CFGR register */
 219:./FWLIB/src/stm32f4xx_rcc.c ****   RCC->CFGR = 0x00000000;
  38              		.loc 1 219 0
  39 000a 0021     		movs	r1, #0
  40 000c 9960     		str	r1, [r3, #8]
 220:./FWLIB/src/stm32f4xx_rcc.c **** 
 221:./FWLIB/src/stm32f4xx_rcc.c ****   /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42/43xxx devices) bits */
 222:./FWLIB/src/stm32f4xx_rcc.c ****   RCC->CR &= (uint32_t)0xEAF6FFFF;
  41              		.loc 1 222 0
  42 000e 1A68     		ldr	r2, [r3]
  43 0010 22F0A852 		bic	r2, r2, #352321536
  44 0014 22F41022 		bic	r2, r2, #589824
  45 0018 1A60     		str	r2, [r3]
 223:./FWLIB/src/stm32f4xx_rcc.c **** 
 224:./FWLIB/src/stm32f4xx_rcc.c ****   /* Reset PLLCFGR register */
 225:./FWLIB/src/stm32f4xx_rcc.c ****   RCC->PLLCFGR = 0x24003010;
  46              		.loc 1 225 0
  47 001a 094A     		ldr	r2, .L2+4
  48 001c 5A60     		str	r2, [r3, #4]
 226:./FWLIB/src/stm32f4xx_rcc.c **** 
 227:./FWLIB/src/stm32f4xx_rcc.c ****   /* Reset PLLI2SCFGR register */
 228:./FWLIB/src/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR = 0x20003000;
  49              		.loc 1 228 0
  50 001e 094A     		ldr	r2, .L2+8
  51 0020 C3F88420 		str	r2, [r3, #132]
 229:./FWLIB/src/stm32f4xx_rcc.c **** 
 230:./FWLIB/src/stm32f4xx_rcc.c ****   /* Reset PLLSAICFGR register, only available for STM32F42/43xxx devices */
 231:./FWLIB/src/stm32f4xx_rcc.c ****   RCC->PLLSAICFGR = 0x24003000;
  52              		.loc 1 231 0
  53 0024 02F18062 		add	r2, r2, #67108864
  54 0028 C3F88820 		str	r2, [r3, #136]
 232:./FWLIB/src/stm32f4xx_rcc.c ****  
ARM GAS  /tmp/ccqlGgFJ.s 			page 6


 233:./FWLIB/src/stm32f4xx_rcc.c ****   /* Reset HSEBYP bit */
 234:./FWLIB/src/stm32f4xx_rcc.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
  55              		.loc 1 234 0
  56 002c 1A68     		ldr	r2, [r3]
  57 002e 22F48022 		bic	r2, r2, #262144
  58 0032 1A60     		str	r2, [r3]
 235:./FWLIB/src/stm32f4xx_rcc.c **** 
 236:./FWLIB/src/stm32f4xx_rcc.c ****   /* Disable all interrupts */
 237:./FWLIB/src/stm32f4xx_rcc.c ****   RCC->CIR = 0x00000000;
  59              		.loc 1 237 0
  60 0034 D960     		str	r1, [r3, #12]
 238:./FWLIB/src/stm32f4xx_rcc.c **** 
 239:./FWLIB/src/stm32f4xx_rcc.c ****   /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx devices */
 240:./FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = 0x00000000; 
  61              		.loc 1 240 0
  62 0036 C3F88C10 		str	r1, [r3, #140]
 241:./FWLIB/src/stm32f4xx_rcc.c **** }
  63              		.loc 1 241 0
  64 003a 7047     		bx	lr
  65              	.L3:
  66              		.align	2
  67              	.L2:
  68 003c 00380240 		.word	1073887232
  69 0040 10300024 		.word	603992080
  70 0044 00300020 		.word	536883200
  71              		.cfi_endproc
  72              	.LFE112:
  74              		.section	.text.RCC_HSEConfig,"ax",%progbits
  75              		.align	1
  76              		.global	RCC_HSEConfig
  77              		.syntax unified
  78              		.thumb
  79              		.thumb_func
  80              		.fpu fpv4-sp-d16
  82              	RCC_HSEConfig:
  83              	.LFB113:
 242:./FWLIB/src/stm32f4xx_rcc.c **** 
 243:./FWLIB/src/stm32f4xx_rcc.c **** /**
 244:./FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the External High Speed oscillator (HSE).
 245:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   After enabling the HSE (RCC_HSE_ON or RCC_HSE_Bypass), the application
 246:./FWLIB/src/stm32f4xx_rcc.c ****   *         software should wait on HSERDY flag to be set indicating that HSE clock
 247:./FWLIB/src/stm32f4xx_rcc.c ****   *         is stable and can be used to clock the PLL and/or system clock.
 248:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   HSE state can not be changed if it is used directly or through the
 249:./FWLIB/src/stm32f4xx_rcc.c ****   *         PLL as system clock. In this case, you have to select another source
 250:./FWLIB/src/stm32f4xx_rcc.c ****   *         of the system clock then change the HSE state (ex. disable it).
 251:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   The HSE is stopped by hardware when entering STOP and STANDBY modes.  
 252:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function reset the CSSON bit, so if the Clock security system(CSS)
 253:./FWLIB/src/stm32f4xx_rcc.c ****   *         was previously enabled you have to enable it again after calling this
 254:./FWLIB/src/stm32f4xx_rcc.c ****   *         function.    
 255:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_HSE: specifies the new state of the HSE.
 256:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 257:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_OFF: turn OFF the HSE oscillator, HSERDY flag goes low after
 258:./FWLIB/src/stm32f4xx_rcc.c ****   *                              6 HSE oscillator clock cycles.
 259:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_ON: turn ON the HSE oscillator
 260:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
 261:./FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 262:./FWLIB/src/stm32f4xx_rcc.c ****   */
ARM GAS  /tmp/ccqlGgFJ.s 			page 7


 263:./FWLIB/src/stm32f4xx_rcc.c **** void RCC_HSEConfig(uint8_t RCC_HSE)
 264:./FWLIB/src/stm32f4xx_rcc.c **** {
  84              		.loc 1 264 0
  85              		.cfi_startproc
  86              		@ args = 0, pretend = 0, frame = 0
  87              		@ frame_needed = 0, uses_anonymous_args = 0
  88              		@ link register save eliminated.
  89              	.LVL0:
 265:./FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 266:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_HSE(RCC_HSE));
 267:./FWLIB/src/stm32f4xx_rcc.c **** 
 268:./FWLIB/src/stm32f4xx_rcc.c ****   /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
 269:./FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
  90              		.loc 1 269 0
  91 0000 024B     		ldr	r3, .L5
  92 0002 0022     		movs	r2, #0
  93 0004 1A70     		strb	r2, [r3]
 270:./FWLIB/src/stm32f4xx_rcc.c **** 
 271:./FWLIB/src/stm32f4xx_rcc.c ****   /* Set the new HSE configuration -------------------------------------------*/
 272:./FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
  94              		.loc 1 272 0
  95 0006 1870     		strb	r0, [r3]
 273:./FWLIB/src/stm32f4xx_rcc.c **** }
  96              		.loc 1 273 0
  97 0008 7047     		bx	lr
  98              	.L6:
  99 000a 00BF     		.align	2
 100              	.L5:
 101 000c 02380240 		.word	1073887234
 102              		.cfi_endproc
 103              	.LFE113:
 105              		.section	.text.RCC_AdjustHSICalibrationValue,"ax",%progbits
 106              		.align	1
 107              		.global	RCC_AdjustHSICalibrationValue
 108              		.syntax unified
 109              		.thumb
 110              		.thumb_func
 111              		.fpu fpv4-sp-d16
 113              	RCC_AdjustHSICalibrationValue:
 114              	.LFB115:
 274:./FWLIB/src/stm32f4xx_rcc.c **** 
 275:./FWLIB/src/stm32f4xx_rcc.c **** /**
 276:./FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Waits for HSE start-up.
 277:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   This functions waits on HSERDY flag to be set and return SUCCESS if 
 278:./FWLIB/src/stm32f4xx_rcc.c ****   *         this flag is set, otherwise returns ERROR if the timeout is reached 
 279:./FWLIB/src/stm32f4xx_rcc.c ****   *         and this flag is not set. The timeout value is defined by the constant
 280:./FWLIB/src/stm32f4xx_rcc.c ****   *         HSE_STARTUP_TIMEOUT in stm32f4xx.h file. You can tailor it depending
 281:./FWLIB/src/stm32f4xx_rcc.c ****   *         on the HSE crystal used in your application. 
 282:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  None
 283:./FWLIB/src/stm32f4xx_rcc.c ****   * @retval An ErrorStatus enumeration value:
 284:./FWLIB/src/stm32f4xx_rcc.c ****   *          - SUCCESS: HSE oscillator is stable and ready to use
 285:./FWLIB/src/stm32f4xx_rcc.c ****   *          - ERROR: HSE oscillator not yet ready
 286:./FWLIB/src/stm32f4xx_rcc.c ****   */
 287:./FWLIB/src/stm32f4xx_rcc.c **** ErrorStatus RCC_WaitForHSEStartUp(void)
 288:./FWLIB/src/stm32f4xx_rcc.c **** {
 289:./FWLIB/src/stm32f4xx_rcc.c ****   __IO uint32_t startupcounter = 0;
 290:./FWLIB/src/stm32f4xx_rcc.c ****   ErrorStatus status = ERROR;
ARM GAS  /tmp/ccqlGgFJ.s 			page 8


 291:./FWLIB/src/stm32f4xx_rcc.c ****   FlagStatus hsestatus = RESET;
 292:./FWLIB/src/stm32f4xx_rcc.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 293:./FWLIB/src/stm32f4xx_rcc.c ****   do
 294:./FWLIB/src/stm32f4xx_rcc.c ****   {
 295:./FWLIB/src/stm32f4xx_rcc.c ****     hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 296:./FWLIB/src/stm32f4xx_rcc.c ****     startupcounter++;
 297:./FWLIB/src/stm32f4xx_rcc.c ****   } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 298:./FWLIB/src/stm32f4xx_rcc.c **** 
 299:./FWLIB/src/stm32f4xx_rcc.c ****   if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 300:./FWLIB/src/stm32f4xx_rcc.c ****   {
 301:./FWLIB/src/stm32f4xx_rcc.c ****     status = SUCCESS;
 302:./FWLIB/src/stm32f4xx_rcc.c ****   }
 303:./FWLIB/src/stm32f4xx_rcc.c ****   else
 304:./FWLIB/src/stm32f4xx_rcc.c ****   {
 305:./FWLIB/src/stm32f4xx_rcc.c ****     status = ERROR;
 306:./FWLIB/src/stm32f4xx_rcc.c ****   }
 307:./FWLIB/src/stm32f4xx_rcc.c ****   return (status);
 308:./FWLIB/src/stm32f4xx_rcc.c **** }
 309:./FWLIB/src/stm32f4xx_rcc.c **** 
 310:./FWLIB/src/stm32f4xx_rcc.c **** /**
 311:./FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Adjusts the Internal High Speed oscillator (HSI) calibration value.
 312:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   The calibration is used to compensate for the variations in voltage
 313:./FWLIB/src/stm32f4xx_rcc.c ****   *         and temperature that influence the frequency of the internal HSI RC.
 314:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  HSICalibrationValue: specifies the calibration trimming value.
 315:./FWLIB/src/stm32f4xx_rcc.c ****   *         This parameter must be a number between 0 and 0x1F.
 316:./FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 317:./FWLIB/src/stm32f4xx_rcc.c ****   */
 318:./FWLIB/src/stm32f4xx_rcc.c **** void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
 319:./FWLIB/src/stm32f4xx_rcc.c **** {
 115              		.loc 1 319 0
 116              		.cfi_startproc
 117              		@ args = 0, pretend = 0, frame = 0
 118              		@ frame_needed = 0, uses_anonymous_args = 0
 119              		@ link register save eliminated.
 120              	.LVL1:
 320:./FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 321:./FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 322:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
 323:./FWLIB/src/stm32f4xx_rcc.c **** 
 324:./FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CR;
 121              		.loc 1 324 0
 122 0000 034A     		ldr	r2, .L8
 123 0002 1368     		ldr	r3, [r2]
 124              	.LVL2:
 325:./FWLIB/src/stm32f4xx_rcc.c **** 
 326:./FWLIB/src/stm32f4xx_rcc.c ****   /* Clear HSITRIM[4:0] bits */
 327:./FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CR_HSITRIM;
 125              		.loc 1 327 0
 126 0004 23F0F803 		bic	r3, r3, #248
 127              	.LVL3:
 328:./FWLIB/src/stm32f4xx_rcc.c **** 
 329:./FWLIB/src/stm32f4xx_rcc.c ****   /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
 330:./FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= (uint32_t)HSICalibrationValue << 3;
 128              		.loc 1 330 0
 129 0008 43EAC000 		orr	r0, r3, r0, lsl #3
 130              	.LVL4:
 331:./FWLIB/src/stm32f4xx_rcc.c **** 
ARM GAS  /tmp/ccqlGgFJ.s 			page 9


 332:./FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
 333:./FWLIB/src/stm32f4xx_rcc.c ****   RCC->CR = tmpreg;
 131              		.loc 1 333 0
 132 000c 1060     		str	r0, [r2]
 334:./FWLIB/src/stm32f4xx_rcc.c **** }
 133              		.loc 1 334 0
 134 000e 7047     		bx	lr
 135              	.L9:
 136              		.align	2
 137              	.L8:
 138 0010 00380240 		.word	1073887232
 139              		.cfi_endproc
 140              	.LFE115:
 142              		.section	.text.RCC_HSICmd,"ax",%progbits
 143              		.align	1
 144              		.global	RCC_HSICmd
 145              		.syntax unified
 146              		.thumb
 147              		.thumb_func
 148              		.fpu fpv4-sp-d16
 150              	RCC_HSICmd:
 151              	.LFB116:
 335:./FWLIB/src/stm32f4xx_rcc.c **** 
 336:./FWLIB/src/stm32f4xx_rcc.c **** /**
 337:./FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Internal High Speed oscillator (HSI).
 338:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   The HSI is stopped by hardware when entering STOP and STANDBY modes.
 339:./FWLIB/src/stm32f4xx_rcc.c ****   *         It is used (enabled by hardware) as system clock source after startup
 340:./FWLIB/src/stm32f4xx_rcc.c ****   *         from Reset, wakeup from STOP and STANDBY mode, or in case of failure
 341:./FWLIB/src/stm32f4xx_rcc.c ****   *         of the HSE used directly or indirectly as system clock (if the Clock
 342:./FWLIB/src/stm32f4xx_rcc.c ****   *         Security System CSS is enabled).             
 343:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   HSI can not be stopped if it is used as system clock source. In this case,
 344:./FWLIB/src/stm32f4xx_rcc.c ****   *         you have to select another source of the system clock then stop the HSI.  
 345:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   After enabling the HSI, the application software should wait on HSIRDY
 346:./FWLIB/src/stm32f4xx_rcc.c ****   *         flag to be set indicating that HSI clock is stable and can be used as
 347:./FWLIB/src/stm32f4xx_rcc.c ****   *         system clock source.  
 348:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the HSI.
 349:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 350:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
 351:./FWLIB/src/stm32f4xx_rcc.c ****   *         clock cycles.  
 352:./FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 353:./FWLIB/src/stm32f4xx_rcc.c ****   */
 354:./FWLIB/src/stm32f4xx_rcc.c **** void RCC_HSICmd(FunctionalState NewState)
 355:./FWLIB/src/stm32f4xx_rcc.c **** {
 152              		.loc 1 355 0
 153              		.cfi_startproc
 154              		@ args = 0, pretend = 0, frame = 0
 155              		@ frame_needed = 0, uses_anonymous_args = 0
 156              		@ link register save eliminated.
 157              	.LVL5:
 356:./FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 357:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 358:./FWLIB/src/stm32f4xx_rcc.c **** 
 359:./FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 158              		.loc 1 359 0
 159 0000 014B     		ldr	r3, .L11
 160 0002 1860     		str	r0, [r3]
 360:./FWLIB/src/stm32f4xx_rcc.c **** }
ARM GAS  /tmp/ccqlGgFJ.s 			page 10


 161              		.loc 1 360 0
 162 0004 7047     		bx	lr
 163              	.L12:
 164 0006 00BF     		.align	2
 165              	.L11:
 166 0008 00004742 		.word	1111949312
 167              		.cfi_endproc
 168              	.LFE116:
 170              		.section	.text.RCC_LSEConfig,"ax",%progbits
 171              		.align	1
 172              		.global	RCC_LSEConfig
 173              		.syntax unified
 174              		.thumb
 175              		.thumb_func
 176              		.fpu fpv4-sp-d16
 178              	RCC_LSEConfig:
 179              	.LFB117:
 361:./FWLIB/src/stm32f4xx_rcc.c **** 
 362:./FWLIB/src/stm32f4xx_rcc.c **** /**
 363:./FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the External Low Speed oscillator (LSE).
 364:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   As the LSE is in the Backup domain and write access is denied to
 365:./FWLIB/src/stm32f4xx_rcc.c ****   *         this domain after reset, you have to enable write access using 
 366:./FWLIB/src/stm32f4xx_rcc.c ****   *         PWR_BackupAccessCmd(ENABLE) function before to configure the LSE
 367:./FWLIB/src/stm32f4xx_rcc.c ****   *         (to be done once after reset).  
 368:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   After enabling the LSE (RCC_LSE_ON or RCC_LSE_Bypass), the application
 369:./FWLIB/src/stm32f4xx_rcc.c ****   *         software should wait on LSERDY flag to be set indicating that LSE clock
 370:./FWLIB/src/stm32f4xx_rcc.c ****   *         is stable and can be used to clock the RTC.
 371:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_LSE: specifies the new state of the LSE.
 372:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 373:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_OFF: turn OFF the LSE oscillator, LSERDY flag goes low after
 374:./FWLIB/src/stm32f4xx_rcc.c ****   *                              6 LSE oscillator clock cycles.
 375:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_ON: turn ON the LSE oscillator
 376:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
 377:./FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 378:./FWLIB/src/stm32f4xx_rcc.c ****   */
 379:./FWLIB/src/stm32f4xx_rcc.c **** void RCC_LSEConfig(uint8_t RCC_LSE)
 380:./FWLIB/src/stm32f4xx_rcc.c **** {
 180              		.loc 1 380 0
 181              		.cfi_startproc
 182              		@ args = 0, pretend = 0, frame = 0
 183              		@ frame_needed = 0, uses_anonymous_args = 0
 184              		@ link register save eliminated.
 185              	.LVL6:
 381:./FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 382:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_LSE(RCC_LSE));
 383:./FWLIB/src/stm32f4xx_rcc.c **** 
 384:./FWLIB/src/stm32f4xx_rcc.c ****   /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
 385:./FWLIB/src/stm32f4xx_rcc.c ****   /* Reset LSEON bit */
 386:./FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 186              		.loc 1 386 0
 187 0000 084B     		ldr	r3, .L17
 188 0002 0022     		movs	r2, #0
 189 0004 1A70     		strb	r2, [r3]
 387:./FWLIB/src/stm32f4xx_rcc.c **** 
 388:./FWLIB/src/stm32f4xx_rcc.c ****   /* Reset LSEBYP bit */
 389:./FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 190              		.loc 1 389 0
ARM GAS  /tmp/ccqlGgFJ.s 			page 11


 191 0006 1A70     		strb	r2, [r3]
 390:./FWLIB/src/stm32f4xx_rcc.c **** 
 391:./FWLIB/src/stm32f4xx_rcc.c ****   /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
 392:./FWLIB/src/stm32f4xx_rcc.c ****   switch (RCC_LSE)
 192              		.loc 1 392 0
 193 0008 0128     		cmp	r0, #1
 194 000a 02D0     		beq	.L15
 195 000c 0428     		cmp	r0, #4
 196 000e 04D0     		beq	.L16
 197 0010 7047     		bx	lr
 198              	.L15:
 393:./FWLIB/src/stm32f4xx_rcc.c ****   {
 394:./FWLIB/src/stm32f4xx_rcc.c ****     case RCC_LSE_ON:
 395:./FWLIB/src/stm32f4xx_rcc.c ****       /* Set LSEON bit */
 396:./FWLIB/src/stm32f4xx_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 199              		.loc 1 396 0
 200 0012 044B     		ldr	r3, .L17
 201 0014 0122     		movs	r2, #1
 202 0016 1A70     		strb	r2, [r3]
 397:./FWLIB/src/stm32f4xx_rcc.c ****       break;
 203              		.loc 1 397 0
 204 0018 7047     		bx	lr
 205              	.L16:
 398:./FWLIB/src/stm32f4xx_rcc.c ****     case RCC_LSE_Bypass:
 399:./FWLIB/src/stm32f4xx_rcc.c ****       /* Set LSEBYP and LSEON bits */
 400:./FWLIB/src/stm32f4xx_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 206              		.loc 1 400 0
 207 001a 024B     		ldr	r3, .L17
 208 001c 0522     		movs	r2, #5
 209 001e 1A70     		strb	r2, [r3]
 401:./FWLIB/src/stm32f4xx_rcc.c ****       break;
 402:./FWLIB/src/stm32f4xx_rcc.c ****     default:
 403:./FWLIB/src/stm32f4xx_rcc.c ****       break;
 404:./FWLIB/src/stm32f4xx_rcc.c ****   }
 405:./FWLIB/src/stm32f4xx_rcc.c **** }
 210              		.loc 1 405 0
 211 0020 7047     		bx	lr
 212              	.L18:
 213 0022 00BF     		.align	2
 214              	.L17:
 215 0024 70380240 		.word	1073887344
 216              		.cfi_endproc
 217              	.LFE117:
 219              		.section	.text.RCC_LSICmd,"ax",%progbits
 220              		.align	1
 221              		.global	RCC_LSICmd
 222              		.syntax unified
 223              		.thumb
 224              		.thumb_func
 225              		.fpu fpv4-sp-d16
 227              	RCC_LSICmd:
 228              	.LFB118:
 406:./FWLIB/src/stm32f4xx_rcc.c **** 
 407:./FWLIB/src/stm32f4xx_rcc.c **** /**
 408:./FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Internal Low Speed oscillator (LSI).
 409:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   After enabling the LSI, the application software should wait on 
 410:./FWLIB/src/stm32f4xx_rcc.c ****   *         LSIRDY flag to be set indicating that LSI clock is stable and can
ARM GAS  /tmp/ccqlGgFJ.s 			page 12


 411:./FWLIB/src/stm32f4xx_rcc.c ****   *         be used to clock the IWDG and/or the RTC.
 412:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   LSI can not be disabled if the IWDG is running.  
 413:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the LSI.
 414:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 415:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
 416:./FWLIB/src/stm32f4xx_rcc.c ****   *         clock cycles. 
 417:./FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 418:./FWLIB/src/stm32f4xx_rcc.c ****   */
 419:./FWLIB/src/stm32f4xx_rcc.c **** void RCC_LSICmd(FunctionalState NewState)
 420:./FWLIB/src/stm32f4xx_rcc.c **** {
 229              		.loc 1 420 0
 230              		.cfi_startproc
 231              		@ args = 0, pretend = 0, frame = 0
 232              		@ frame_needed = 0, uses_anonymous_args = 0
 233              		@ link register save eliminated.
 234              	.LVL7:
 421:./FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 422:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 423:./FWLIB/src/stm32f4xx_rcc.c **** 
 424:./FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 235              		.loc 1 424 0
 236 0000 014B     		ldr	r3, .L20
 237 0002 1860     		str	r0, [r3]
 425:./FWLIB/src/stm32f4xx_rcc.c **** }
 238              		.loc 1 425 0
 239 0004 7047     		bx	lr
 240              	.L21:
 241 0006 00BF     		.align	2
 242              	.L20:
 243 0008 800E4742 		.word	1111953024
 244              		.cfi_endproc
 245              	.LFE118:
 247              		.section	.text.RCC_PLLConfig,"ax",%progbits
 248              		.align	1
 249              		.global	RCC_PLLConfig
 250              		.syntax unified
 251              		.thumb
 252              		.thumb_func
 253              		.fpu fpv4-sp-d16
 255              	RCC_PLLConfig:
 256              	.LFB119:
 426:./FWLIB/src/stm32f4xx_rcc.c **** 
 427:./FWLIB/src/stm32f4xx_rcc.c **** /**
 428:./FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the main PLL clock source, multiplication and division factors.
 429:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the main PLL is disabled.
 430:./FWLIB/src/stm32f4xx_rcc.c ****   *  
 431:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_PLLSource: specifies the PLL entry clock source.
 432:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 433:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSource_HSI: HSI oscillator clock selected as PLL clock entry
 434:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSource_HSE: HSE oscillator clock selected as PLL clock entry
 435:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   This clock source (RCC_PLLSource) is common for the main PLL and PLLI2S.  
 436:./FWLIB/src/stm32f4xx_rcc.c ****   *  
 437:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLM: specifies the division factor for PLL VCO input clock
 438:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 0 and 63.
 439:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLM parameter correctly to ensure that the VCO input
 440:./FWLIB/src/stm32f4xx_rcc.c ****   *         frequency ranges from 1 to 2 MHz. It is recommended to select a frequency
 441:./FWLIB/src/stm32f4xx_rcc.c ****   *         of 2 MHz to limit PLL jitter.
ARM GAS  /tmp/ccqlGgFJ.s 			page 13


 442:./FWLIB/src/stm32f4xx_rcc.c ****   *  
 443:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLN: specifies the multiplication factor for PLL VCO output clock
 444:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 192 and 432.
 445:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLN parameter correctly to ensure that the VCO
 446:./FWLIB/src/stm32f4xx_rcc.c ****   *         output frequency is between 192 and 432 MHz.
 447:./FWLIB/src/stm32f4xx_rcc.c ****   *   
 448:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLP: specifies the division factor for main system clock (SYSCLK)
 449:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number in the range {2, 4, 6, or 8}.
 450:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLP parameter correctly to not exceed 168 MHz on
 451:./FWLIB/src/stm32f4xx_rcc.c ****   *         the System clock frequency.
 452:./FWLIB/src/stm32f4xx_rcc.c ****   *  
 453:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLQ: specifies the division factor for OTG FS, SDIO and RNG clocks
 454:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 4 and 15.
 455:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   If the USB OTG FS is used in your application, you have to set the
 456:./FWLIB/src/stm32f4xx_rcc.c ****   *         PLLQ parameter correctly to have 48 MHz clock for the USB. However,
 457:./FWLIB/src/stm32f4xx_rcc.c ****   *         the SDIO and RNG need a frequency lower than or equal to 48 MHz to work
 458:./FWLIB/src/stm32f4xx_rcc.c ****   *         correctly.
 459:./FWLIB/src/stm32f4xx_rcc.c ****   *   
 460:./FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 461:./FWLIB/src/stm32f4xx_rcc.c ****   */
 462:./FWLIB/src/stm32f4xx_rcc.c **** void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PL
 463:./FWLIB/src/stm32f4xx_rcc.c **** {
 257              		.loc 1 463 0
 258              		.cfi_startproc
 259              		@ args = 4, pretend = 0, frame = 0
 260              		@ frame_needed = 0, uses_anonymous_args = 0
 261              		@ link register save eliminated.
 262              	.LVL8:
 464:./FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 465:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
 466:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLM_VALUE(PLLM));
 467:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLN_VALUE(PLLN));
 468:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLP_VALUE(PLLP));
 469:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
 470:./FWLIB/src/stm32f4xx_rcc.c **** 
 471:./FWLIB/src/stm32f4xx_rcc.c ****   RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 263              		.loc 1 471 0
 264 0000 41EA8211 		orr	r1, r1, r2, lsl #6
 265              	.LVL9:
 266 0004 5B08     		lsrs	r3, r3, #1
 267              	.LVL10:
 268 0006 013B     		subs	r3, r3, #1
 269 0008 41EA0341 		orr	r1, r1, r3, lsl #16
 270 000c 0143     		orrs	r1, r1, r0
 271 000e 0098     		ldr	r0, [sp]
 272              	.LVL11:
 273 0010 41EA0061 		orr	r1, r1, r0, lsl #24
 274 0014 014B     		ldr	r3, .L23
 275 0016 5960     		str	r1, [r3, #4]
 276              	.LVL12:
 472:./FWLIB/src/stm32f4xx_rcc.c ****                  (PLLQ << 24);
 473:./FWLIB/src/stm32f4xx_rcc.c **** }
 277              		.loc 1 473 0
 278 0018 7047     		bx	lr
 279              	.L24:
 280 001a 00BF     		.align	2
 281              	.L23:
ARM GAS  /tmp/ccqlGgFJ.s 			page 14


 282 001c 00380240 		.word	1073887232
 283              		.cfi_endproc
 284              	.LFE119:
 286              		.section	.text.RCC_PLLCmd,"ax",%progbits
 287              		.align	1
 288              		.global	RCC_PLLCmd
 289              		.syntax unified
 290              		.thumb
 291              		.thumb_func
 292              		.fpu fpv4-sp-d16
 294              	RCC_PLLCmd:
 295              	.LFB120:
 474:./FWLIB/src/stm32f4xx_rcc.c **** 
 475:./FWLIB/src/stm32f4xx_rcc.c **** /**
 476:./FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the main PLL.
 477:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   After enabling the main PLL, the application software should wait on 
 478:./FWLIB/src/stm32f4xx_rcc.c ****   *         PLLRDY flag to be set indicating that PLL clock is stable and can
 479:./FWLIB/src/stm32f4xx_rcc.c ****   *         be used as system clock source.
 480:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   The main PLL can not be disabled if it is used as system clock source
 481:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
 482:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
 483:./FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 484:./FWLIB/src/stm32f4xx_rcc.c ****   */
 485:./FWLIB/src/stm32f4xx_rcc.c **** void RCC_PLLCmd(FunctionalState NewState)
 486:./FWLIB/src/stm32f4xx_rcc.c **** {
 296              		.loc 1 486 0
 297              		.cfi_startproc
 298              		@ args = 0, pretend = 0, frame = 0
 299              		@ frame_needed = 0, uses_anonymous_args = 0
 300              		@ link register save eliminated.
 301              	.LVL13:
 487:./FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 488:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 489:./FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 302              		.loc 1 489 0
 303 0000 014B     		ldr	r3, .L26
 304 0002 1860     		str	r0, [r3]
 490:./FWLIB/src/stm32f4xx_rcc.c **** }
 305              		.loc 1 490 0
 306 0004 7047     		bx	lr
 307              	.L27:
 308 0006 00BF     		.align	2
 309              	.L26:
 310 0008 60004742 		.word	1111949408
 311              		.cfi_endproc
 312              	.LFE120:
 314              		.section	.text.RCC_PLLI2SConfig,"ax",%progbits
 315              		.align	1
 316              		.global	RCC_PLLI2SConfig
 317              		.syntax unified
 318              		.thumb
 319              		.thumb_func
 320              		.fpu fpv4-sp-d16
 322              	RCC_PLLI2SConfig:
 323              	.LFB121:
 491:./FWLIB/src/stm32f4xx_rcc.c **** 
 492:./FWLIB/src/stm32f4xx_rcc.c **** #if defined (STM32F40_41xxx) || defined (STM32F401xx)
ARM GAS  /tmp/ccqlGgFJ.s 			page 15


 493:./FWLIB/src/stm32f4xx_rcc.c **** /**
 494:./FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLI2S clock multiplication and division factors.
 495:./FWLIB/src/stm32f4xx_rcc.c ****   *  
 496:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F405xx/407xx, STM32F415xx/417xx 
 497:./FWLIB/src/stm32f4xx_rcc.c ****   *         or STM32F401xx devices. 
 498:./FWLIB/src/stm32f4xx_rcc.c ****   *    
 499:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLI2S is disabled.
 500:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   PLLI2S clock source is common with the main PLL (configured in 
 501:./FWLIB/src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 502:./FWLIB/src/stm32f4xx_rcc.c ****   *             
 503:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLI2SN: specifies the multiplication factor for PLLI2S VCO output clock
 504:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 192 and 432.
 505:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SN parameter correctly to ensure that the VCO 
 506:./FWLIB/src/stm32f4xx_rcc.c ****   *         output frequency is between 192 and 432 MHz.
 507:./FWLIB/src/stm32f4xx_rcc.c ****   *    
 508:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLI2SR: specifies the division factor for I2S clock
 509:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 510:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SR parameter correctly to not exceed 192 MHz
 511:./FWLIB/src/stm32f4xx_rcc.c ****   *         on the I2S clock frequency.
 512:./FWLIB/src/stm32f4xx_rcc.c ****   *   
 513:./FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 514:./FWLIB/src/stm32f4xx_rcc.c ****   */
 515:./FWLIB/src/stm32f4xx_rcc.c **** void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
 516:./FWLIB/src/stm32f4xx_rcc.c **** {
 324              		.loc 1 516 0
 325              		.cfi_startproc
 326              		@ args = 0, pretend = 0, frame = 0
 327              		@ frame_needed = 0, uses_anonymous_args = 0
 328              		@ link register save eliminated.
 329              	.LVL14:
 517:./FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 518:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
 519:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
 520:./FWLIB/src/stm32f4xx_rcc.c **** 
 521:./FWLIB/src/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 330              		.loc 1 521 0
 331 0000 0907     		lsls	r1, r1, #28
 332              	.LVL15:
 333 0002 41EA8011 		orr	r1, r1, r0, lsl #6
 334 0006 024B     		ldr	r3, .L29
 335 0008 C3F88410 		str	r1, [r3, #132]
 522:./FWLIB/src/stm32f4xx_rcc.c **** }
 336              		.loc 1 522 0
 337 000c 7047     		bx	lr
 338              	.L30:
 339 000e 00BF     		.align	2
 340              	.L29:
 341 0010 00380240 		.word	1073887232
 342              		.cfi_endproc
 343              	.LFE121:
 345              		.section	.text.RCC_PLLI2SCmd,"ax",%progbits
 346              		.align	1
 347              		.global	RCC_PLLI2SCmd
 348              		.syntax unified
 349              		.thumb
 350              		.thumb_func
 351              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccqlGgFJ.s 			page 16


 353              	RCC_PLLI2SCmd:
 354              	.LFB122:
 523:./FWLIB/src/stm32f4xx_rcc.c **** 
 524:./FWLIB/src/stm32f4xx_rcc.c **** #elif defined (STM32F411xE)
 525:./FWLIB/src/stm32f4xx_rcc.c **** /**
 526:./FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLI2S clock multiplication and division factors.
 527:./FWLIB/src/stm32f4xx_rcc.c ****   *  
 528:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F411xE devices. 
 529:./FWLIB/src/stm32f4xx_rcc.c ****   *    
 530:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLI2S is disabled.
 531:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   PLLI2S clock source is common with the main PLL (configured in 
 532:./FWLIB/src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 533:./FWLIB/src/stm32f4xx_rcc.c ****   *
 534:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLI2SM: specifies the division factor for PLLI2S VCO input clock
 535:./FWLIB/src/stm32f4xx_rcc.c ****   *         This parameter must be a number between Min_Data = 2 and Max_Data = 63.
 536:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SM parameter correctly to ensure that the VCO input
 537:./FWLIB/src/stm32f4xx_rcc.c ****   *         frequency ranges from 1 to 2 MHz. It is recommended to select a frequency
 538:./FWLIB/src/stm32f4xx_rcc.c ****   *         of 2 MHz to limit PLLI2S jitter.
 539:./FWLIB/src/stm32f4xx_rcc.c ****   *
 540:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLI2SN: specifies the multiplication factor for PLLI2S VCO output clock
 541:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 192 and 432.
 542:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SN parameter correctly to ensure that the VCO 
 543:./FWLIB/src/stm32f4xx_rcc.c ****   *         output frequency is between 192 and 432 MHz.
 544:./FWLIB/src/stm32f4xx_rcc.c ****   *    
 545:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLI2SR: specifies the division factor for I2S clock
 546:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 547:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SR parameter correctly to not exceed 192 MHz
 548:./FWLIB/src/stm32f4xx_rcc.c ****   *         on the I2S clock frequency.
 549:./FWLIB/src/stm32f4xx_rcc.c ****   *   
 550:./FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 551:./FWLIB/src/stm32f4xx_rcc.c ****   */
 552:./FWLIB/src/stm32f4xx_rcc.c **** void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR, uint32_t PLLI2SM)
 553:./FWLIB/src/stm32f4xx_rcc.c **** {
 554:./FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 555:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
 556:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SM_VALUE(PLLI2SM));
 557:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
 558:./FWLIB/src/stm32f4xx_rcc.c **** 
 559:./FWLIB/src/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28) | PLLI2SM;
 560:./FWLIB/src/stm32f4xx_rcc.c **** }
 561:./FWLIB/src/stm32f4xx_rcc.c **** 
 562:./FWLIB/src/stm32f4xx_rcc.c **** #elif defined (STM32F427_437xx) || defined (STM32F429_439xx)
 563:./FWLIB/src/stm32f4xx_rcc.c **** /**
 564:./FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLI2S clock multiplication and division factors.
 565:./FWLIB/src/stm32f4xx_rcc.c ****   * 
 566:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices 
 567:./FWLIB/src/stm32f4xx_rcc.c ****   *         
 568:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLI2S is disabled.
 569:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   PLLI2S clock source is common with the main PLL (configured in 
 570:./FWLIB/src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 571:./FWLIB/src/stm32f4xx_rcc.c ****   *             
 572:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLI2SN: specifies the multiplication factor for PLLI2S VCO output clock
 573:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 192 and 432.
 574:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SN parameter correctly to ensure that the VCO 
 575:./FWLIB/src/stm32f4xx_rcc.c ****   *         output frequency is between 192 and 432 MHz.
 576:./FWLIB/src/stm32f4xx_rcc.c ****   * 
 577:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLI2SQ: specifies the division factor for SAI1 clock
ARM GAS  /tmp/ccqlGgFJ.s 			page 17


 578:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 15.
 579:./FWLIB/src/stm32f4xx_rcc.c ****   *                 
 580:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLI2SR: specifies the division factor for I2S clock
 581:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 582:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SR parameter correctly to not exceed 192 MHz
 583:./FWLIB/src/stm32f4xx_rcc.c ****   *         on the I2S clock frequency.
 584:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   the PLLI2SR parameter is only available with STM32F42xxx/43xxx devices.  
 585:./FWLIB/src/stm32f4xx_rcc.c ****   *   
 586:./FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 587:./FWLIB/src/stm32f4xx_rcc.c ****   */
 588:./FWLIB/src/stm32f4xx_rcc.c **** void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SQ, uint32_t PLLI2SR)
 589:./FWLIB/src/stm32f4xx_rcc.c **** {
 590:./FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 591:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
 592:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SQ));
 593:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
 594:./FWLIB/src/stm32f4xx_rcc.c **** 
 595:./FWLIB/src/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SQ << 24) | (PLLI2SR << 28);
 596:./FWLIB/src/stm32f4xx_rcc.c **** }
 597:./FWLIB/src/stm32f4xx_rcc.c **** #else
 598:./FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F401xx */
 599:./FWLIB/src/stm32f4xx_rcc.c **** 
 600:./FWLIB/src/stm32f4xx_rcc.c **** /**
 601:./FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the PLLI2S. 
 602:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
 603:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
 604:./FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 605:./FWLIB/src/stm32f4xx_rcc.c ****   */
 606:./FWLIB/src/stm32f4xx_rcc.c **** void RCC_PLLI2SCmd(FunctionalState NewState)
 607:./FWLIB/src/stm32f4xx_rcc.c **** {
 355              		.loc 1 607 0
 356              		.cfi_startproc
 357              		@ args = 0, pretend = 0, frame = 0
 358              		@ frame_needed = 0, uses_anonymous_args = 0
 359              		@ link register save eliminated.
 360              	.LVL16:
 608:./FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 609:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 610:./FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 361              		.loc 1 610 0
 362 0000 014B     		ldr	r3, .L32
 363 0002 1860     		str	r0, [r3]
 611:./FWLIB/src/stm32f4xx_rcc.c **** }
 364              		.loc 1 611 0
 365 0004 7047     		bx	lr
 366              	.L33:
 367 0006 00BF     		.align	2
 368              	.L32:
 369 0008 68004742 		.word	1111949416
 370              		.cfi_endproc
 371              	.LFE122:
 373              		.section	.text.RCC_PLLSAIConfig,"ax",%progbits
 374              		.align	1
 375              		.global	RCC_PLLSAIConfig
 376              		.syntax unified
 377              		.thumb
 378              		.thumb_func
ARM GAS  /tmp/ccqlGgFJ.s 			page 18


 379              		.fpu fpv4-sp-d16
 381              	RCC_PLLSAIConfig:
 382              	.LFB123:
 612:./FWLIB/src/stm32f4xx_rcc.c **** 
 613:./FWLIB/src/stm32f4xx_rcc.c **** /**
 614:./FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLSAI clock multiplication and division factors.
 615:./FWLIB/src/stm32f4xx_rcc.c ****   *
 616:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices 
 617:./FWLIB/src/stm32f4xx_rcc.c ****   *        
 618:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLSAI is disabled.
 619:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   PLLSAI clock source is common with the main PLL (configured in 
 620:./FWLIB/src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 621:./FWLIB/src/stm32f4xx_rcc.c ****   *             
 622:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLSAIN: specifies the multiplication factor for PLLSAI VCO output clock
 623:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 192 and 432.
 624:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLSAIN parameter correctly to ensure that the VCO 
 625:./FWLIB/src/stm32f4xx_rcc.c ****   *         output frequency is between 192 and 432 MHz.
 626:./FWLIB/src/stm32f4xx_rcc.c ****   *           
 627:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLSAIQ: specifies the division factor for SAI1 clock
 628:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 15.
 629:./FWLIB/src/stm32f4xx_rcc.c ****   *            
 630:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLSAIR: specifies the division factor for LTDC clock
 631:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 632:./FWLIB/src/stm32f4xx_rcc.c ****   *   
 633:./FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 634:./FWLIB/src/stm32f4xx_rcc.c ****   */
 635:./FWLIB/src/stm32f4xx_rcc.c **** void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
 636:./FWLIB/src/stm32f4xx_rcc.c **** {
 383              		.loc 1 636 0
 384              		.cfi_startproc
 385              		@ args = 0, pretend = 0, frame = 0
 386              		@ frame_needed = 0, uses_anonymous_args = 0
 387              		@ link register save eliminated.
 388              	.LVL17:
 637:./FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 638:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
 639:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));
 640:./FWLIB/src/stm32f4xx_rcc.c **** 
 641:./FWLIB/src/stm32f4xx_rcc.c ****   RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
 389              		.loc 1 641 0
 390 0000 0906     		lsls	r1, r1, #24
 391              	.LVL18:
 392 0002 41EA8011 		orr	r1, r1, r0, lsl #6
 393 0006 41EA0271 		orr	r1, r1, r2, lsl #28
 394 000a 024B     		ldr	r3, .L35
 395 000c C3F88810 		str	r1, [r3, #136]
 642:./FWLIB/src/stm32f4xx_rcc.c **** }
 396              		.loc 1 642 0
 397 0010 7047     		bx	lr
 398              	.L36:
 399 0012 00BF     		.align	2
 400              	.L35:
 401 0014 00380240 		.word	1073887232
 402              		.cfi_endproc
 403              	.LFE123:
 405              		.section	.text.RCC_PLLSAICmd,"ax",%progbits
 406              		.align	1
ARM GAS  /tmp/ccqlGgFJ.s 			page 19


 407              		.global	RCC_PLLSAICmd
 408              		.syntax unified
 409              		.thumb
 410              		.thumb_func
 411              		.fpu fpv4-sp-d16
 413              	RCC_PLLSAICmd:
 414              	.LFB124:
 643:./FWLIB/src/stm32f4xx_rcc.c **** 
 644:./FWLIB/src/stm32f4xx_rcc.c **** /**
 645:./FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the PLLSAI. 
 646:./FWLIB/src/stm32f4xx_rcc.c ****   * 
 647:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices 
 648:./FWLIB/src/stm32f4xx_rcc.c ****   *       
 649:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   The PLLSAI is disabled by hardware when entering STOP and STANDBY modes.  
 650:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the PLLSAI. This parameter can be: ENABLE or DISABLE.
 651:./FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 652:./FWLIB/src/stm32f4xx_rcc.c ****   */
 653:./FWLIB/src/stm32f4xx_rcc.c **** void RCC_PLLSAICmd(FunctionalState NewState)
 654:./FWLIB/src/stm32f4xx_rcc.c **** {
 415              		.loc 1 654 0
 416              		.cfi_startproc
 417              		@ args = 0, pretend = 0, frame = 0
 418              		@ frame_needed = 0, uses_anonymous_args = 0
 419              		@ link register save eliminated.
 420              	.LVL19:
 655:./FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 656:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 657:./FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
 421              		.loc 1 657 0
 422 0000 014B     		ldr	r3, .L38
 423 0002 1860     		str	r0, [r3]
 658:./FWLIB/src/stm32f4xx_rcc.c **** }
 424              		.loc 1 658 0
 425 0004 7047     		bx	lr
 426              	.L39:
 427 0006 00BF     		.align	2
 428              	.L38:
 429 0008 70004742 		.word	1111949424
 430              		.cfi_endproc
 431              	.LFE124:
 433              		.section	.text.RCC_ClockSecuritySystemCmd,"ax",%progbits
 434              		.align	1
 435              		.global	RCC_ClockSecuritySystemCmd
 436              		.syntax unified
 437              		.thumb
 438              		.thumb_func
 439              		.fpu fpv4-sp-d16
 441              	RCC_ClockSecuritySystemCmd:
 442              	.LFB125:
 659:./FWLIB/src/stm32f4xx_rcc.c **** 
 660:./FWLIB/src/stm32f4xx_rcc.c **** /**
 661:./FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Clock Security System.
 662:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   If a failure is detected on the HSE oscillator clock, this oscillator
 663:./FWLIB/src/stm32f4xx_rcc.c ****   *         is automatically disabled and an interrupt is generated to inform the
 664:./FWLIB/src/stm32f4xx_rcc.c ****   *         software about the failure (Clock Security System Interrupt, CSSI),
 665:./FWLIB/src/stm32f4xx_rcc.c ****   *         allowing the MCU to perform rescue operations. The CSSI is linked to 
 666:./FWLIB/src/stm32f4xx_rcc.c ****   *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.  
ARM GAS  /tmp/ccqlGgFJ.s 			page 20


 667:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the Clock Security System.
 668:./FWLIB/src/stm32f4xx_rcc.c ****   *         This parameter can be: ENABLE or DISABLE.
 669:./FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 670:./FWLIB/src/stm32f4xx_rcc.c ****   */
 671:./FWLIB/src/stm32f4xx_rcc.c **** void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
 672:./FWLIB/src/stm32f4xx_rcc.c **** {
 443              		.loc 1 672 0
 444              		.cfi_startproc
 445              		@ args = 0, pretend = 0, frame = 0
 446              		@ frame_needed = 0, uses_anonymous_args = 0
 447              		@ link register save eliminated.
 448              	.LVL20:
 673:./FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 674:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 675:./FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 449              		.loc 1 675 0
 450 0000 014B     		ldr	r3, .L41
 451 0002 1860     		str	r0, [r3]
 676:./FWLIB/src/stm32f4xx_rcc.c **** }
 452              		.loc 1 676 0
 453 0004 7047     		bx	lr
 454              	.L42:
 455 0006 00BF     		.align	2
 456              	.L41:
 457 0008 4C004742 		.word	1111949388
 458              		.cfi_endproc
 459              	.LFE125:
 461              		.section	.text.RCC_MCO1Config,"ax",%progbits
 462              		.align	1
 463              		.global	RCC_MCO1Config
 464              		.syntax unified
 465              		.thumb
 466              		.thumb_func
 467              		.fpu fpv4-sp-d16
 469              	RCC_MCO1Config:
 470              	.LFB126:
 677:./FWLIB/src/stm32f4xx_rcc.c **** 
 678:./FWLIB/src/stm32f4xx_rcc.c **** /**
 679:./FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Selects the clock source to output on MCO1 pin(PA8).
 680:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   PA8 should be configured in alternate function mode.
 681:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO1Source: specifies the clock source to output.
 682:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 683:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_HSI: HSI clock selected as MCO1 source
 684:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_LSE: LSE clock selected as MCO1 source
 685:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_HSE: HSE clock selected as MCO1 source
 686:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_PLLCLK: main PLL clock selected as MCO1 source
 687:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO1Div: specifies the MCO1 prescaler.
 688:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 689:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_1: no division applied to MCO1 clock
 690:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_2: division by 2 applied to MCO1 clock
 691:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_3: division by 3 applied to MCO1 clock
 692:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
 693:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
 694:./FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 695:./FWLIB/src/stm32f4xx_rcc.c ****   */
 696:./FWLIB/src/stm32f4xx_rcc.c **** void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
 697:./FWLIB/src/stm32f4xx_rcc.c **** {
ARM GAS  /tmp/ccqlGgFJ.s 			page 21


 471              		.loc 1 697 0
 472              		.cfi_startproc
 473              		@ args = 0, pretend = 0, frame = 0
 474              		@ frame_needed = 0, uses_anonymous_args = 0
 475              		@ link register save eliminated.
 476              	.LVL21:
 698:./FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 699:./FWLIB/src/stm32f4xx_rcc.c ****   
 700:./FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 701:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
 702:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  
 703:./FWLIB/src/stm32f4xx_rcc.c **** 
 704:./FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 477              		.loc 1 704 0
 478 0000 034A     		ldr	r2, .L44
 479 0002 9368     		ldr	r3, [r2, #8]
 480              	.LVL22:
 705:./FWLIB/src/stm32f4xx_rcc.c **** 
 706:./FWLIB/src/stm32f4xx_rcc.c ****   /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
 707:./FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= CFGR_MCO1_RESET_MASK;
 481              		.loc 1 707 0
 482 0004 23F0EC63 		bic	r3, r3, #123731968
 483              	.LVL23:
 708:./FWLIB/src/stm32f4xx_rcc.c **** 
 709:./FWLIB/src/stm32f4xx_rcc.c ****   /* Select MCO1 clock source and prescaler */
 710:./FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 484              		.loc 1 710 0
 485 0008 0143     		orrs	r1, r1, r0
 486              	.LVL24:
 487 000a 1943     		orrs	r1, r1, r3
 488              	.LVL25:
 711:./FWLIB/src/stm32f4xx_rcc.c **** 
 712:./FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
 713:./FWLIB/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;  
 489              		.loc 1 713 0
 490 000c 9160     		str	r1, [r2, #8]
 714:./FWLIB/src/stm32f4xx_rcc.c **** }
 491              		.loc 1 714 0
 492 000e 7047     		bx	lr
 493              	.L45:
 494              		.align	2
 495              	.L44:
 496 0010 00380240 		.word	1073887232
 497              		.cfi_endproc
 498              	.LFE126:
 500              		.section	.text.RCC_MCO2Config,"ax",%progbits
 501              		.align	1
 502              		.global	RCC_MCO2Config
 503              		.syntax unified
 504              		.thumb
 505              		.thumb_func
 506              		.fpu fpv4-sp-d16
 508              	RCC_MCO2Config:
 509              	.LFB127:
 715:./FWLIB/src/stm32f4xx_rcc.c **** 
 716:./FWLIB/src/stm32f4xx_rcc.c **** /**
 717:./FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Selects the clock source to output on MCO2 pin(PC9).
ARM GAS  /tmp/ccqlGgFJ.s 			page 22


 718:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   PC9 should be configured in alternate function mode.
 719:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO2Source: specifies the clock source to output.
 720:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 721:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_SYSCLK: System clock (SYSCLK) selected as MCO2 source
 722:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_PLLI2SCLK: PLLI2S clock selected as MCO2 source
 723:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_HSE: HSE clock selected as MCO2 source
 724:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_PLLCLK: main PLL clock selected as MCO2 source
 725:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO2Div: specifies the MCO2 prescaler.
 726:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 727:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_1: no division applied to MCO2 clock
 728:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_2: division by 2 applied to MCO2 clock
 729:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_3: division by 3 applied to MCO2 clock
 730:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
 731:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
 732:./FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 733:./FWLIB/src/stm32f4xx_rcc.c ****   */
 734:./FWLIB/src/stm32f4xx_rcc.c **** void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
 735:./FWLIB/src/stm32f4xx_rcc.c **** {
 510              		.loc 1 735 0
 511              		.cfi_startproc
 512              		@ args = 0, pretend = 0, frame = 0
 513              		@ frame_needed = 0, uses_anonymous_args = 0
 514              		@ link register save eliminated.
 515              	.LVL26:
 736:./FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 737:./FWLIB/src/stm32f4xx_rcc.c ****   
 738:./FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 739:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
 740:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
 741:./FWLIB/src/stm32f4xx_rcc.c ****   
 742:./FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 516              		.loc 1 742 0
 517 0000 034A     		ldr	r2, .L47
 518 0002 9368     		ldr	r3, [r2, #8]
 519              	.LVL27:
 743:./FWLIB/src/stm32f4xx_rcc.c ****   
 744:./FWLIB/src/stm32f4xx_rcc.c ****   /* Clear MCO2 and MCO2PRE[2:0] bits */
 745:./FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= CFGR_MCO2_RESET_MASK;
 520              		.loc 1 745 0
 521 0004 23F07843 		bic	r3, r3, #-134217728
 522              	.LVL28:
 746:./FWLIB/src/stm32f4xx_rcc.c **** 
 747:./FWLIB/src/stm32f4xx_rcc.c ****   /* Select MCO2 clock source and prescaler */
 748:./FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 523              		.loc 1 748 0
 524 0008 0143     		orrs	r1, r1, r0
 525              	.LVL29:
 526 000a 1943     		orrs	r1, r1, r3
 527              	.LVL30:
 749:./FWLIB/src/stm32f4xx_rcc.c **** 
 750:./FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
 751:./FWLIB/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;  
 528              		.loc 1 751 0
 529 000c 9160     		str	r1, [r2, #8]
 752:./FWLIB/src/stm32f4xx_rcc.c **** }
 530              		.loc 1 752 0
 531 000e 7047     		bx	lr
ARM GAS  /tmp/ccqlGgFJ.s 			page 23


 532              	.L48:
 533              		.align	2
 534              	.L47:
 535 0010 00380240 		.word	1073887232
 536              		.cfi_endproc
 537              	.LFE127:
 539              		.section	.text.RCC_SYSCLKConfig,"ax",%progbits
 540              		.align	1
 541              		.global	RCC_SYSCLKConfig
 542              		.syntax unified
 543              		.thumb
 544              		.thumb_func
 545              		.fpu fpv4-sp-d16
 547              	RCC_SYSCLKConfig:
 548              	.LFB128:
 753:./FWLIB/src/stm32f4xx_rcc.c **** 
 754:./FWLIB/src/stm32f4xx_rcc.c **** /**
 755:./FWLIB/src/stm32f4xx_rcc.c ****   * @}
 756:./FWLIB/src/stm32f4xx_rcc.c ****   */
 757:./FWLIB/src/stm32f4xx_rcc.c **** 
 758:./FWLIB/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group2 System AHB and APB busses clocks configuration functions
 759:./FWLIB/src/stm32f4xx_rcc.c ****  *  @brief   System, AHB and APB busses clocks configuration functions
 760:./FWLIB/src/stm32f4xx_rcc.c ****  *
 761:./FWLIB/src/stm32f4xx_rcc.c **** @verbatim   
 762:./FWLIB/src/stm32f4xx_rcc.c ****  ===============================================================================
 763:./FWLIB/src/stm32f4xx_rcc.c ****       ##### System, AHB and APB busses clocks configuration functions #####
 764:./FWLIB/src/stm32f4xx_rcc.c ****  ===============================================================================  
 765:./FWLIB/src/stm32f4xx_rcc.c ****     [..]
 766:./FWLIB/src/stm32f4xx_rcc.c ****       This section provide functions allowing to configure the System, AHB, APB1 and 
 767:./FWLIB/src/stm32f4xx_rcc.c ****       APB2 busses clocks.
 768:./FWLIB/src/stm32f4xx_rcc.c ****   
 769:./FWLIB/src/stm32f4xx_rcc.c ****       (#) Several clock sources can be used to drive the System clock (SYSCLK): HSI,
 770:./FWLIB/src/stm32f4xx_rcc.c ****           HSE and PLL.
 771:./FWLIB/src/stm32f4xx_rcc.c ****           The AHB clock (HCLK) is derived from System clock through configurable 
 772:./FWLIB/src/stm32f4xx_rcc.c ****           prescaler and used to clock the CPU, memory and peripherals mapped 
 773:./FWLIB/src/stm32f4xx_rcc.c ****           on AHB bus (DMA, GPIO...). APB1 (PCLK1) and APB2 (PCLK2) clocks are derived 
 774:./FWLIB/src/stm32f4xx_rcc.c ****           from AHB clock through configurable prescalers and used to clock 
 775:./FWLIB/src/stm32f4xx_rcc.c ****           the peripherals mapped on these busses. You can use 
 776:./FWLIB/src/stm32f4xx_rcc.c ****           "RCC_GetClocksFreq()" function to retrieve the frequencies of these clocks.  
 777:./FWLIB/src/stm32f4xx_rcc.c **** 
 778:./FWLIB/src/stm32f4xx_rcc.c ****       -@- All the peripheral clocks are derived from the System clock (SYSCLK) except:
 779:./FWLIB/src/stm32f4xx_rcc.c ****         (+@) I2S: the I2S clock can be derived either from a specific PLL (PLLI2S) or
 780:./FWLIB/src/stm32f4xx_rcc.c ****              from an external clock mapped on the I2S_CKIN pin. 
 781:./FWLIB/src/stm32f4xx_rcc.c ****              You have to use RCC_I2SCLKConfig() function to configure this clock. 
 782:./FWLIB/src/stm32f4xx_rcc.c ****         (+@) RTC: the RTC clock can be derived either from the LSI, LSE or HSE clock
 783:./FWLIB/src/stm32f4xx_rcc.c ****              divided by 2 to 31. You have to use RCC_RTCCLKConfig() and RCC_RTCCLKCmd()
 784:./FWLIB/src/stm32f4xx_rcc.c ****              functions to configure this clock. 
 785:./FWLIB/src/stm32f4xx_rcc.c ****         (+@) USB OTG FS, SDIO and RTC: USB OTG FS require a frequency equal to 48 MHz
 786:./FWLIB/src/stm32f4xx_rcc.c ****              to work correctly, while the SDIO require a frequency equal or lower than
 787:./FWLIB/src/stm32f4xx_rcc.c ****              to 48. This clock is derived of the main PLL through PLLQ divider.
 788:./FWLIB/src/stm32f4xx_rcc.c ****         (+@) IWDG clock which is always the LSI clock.
 789:./FWLIB/src/stm32f4xx_rcc.c ****        
 790:./FWLIB/src/stm32f4xx_rcc.c ****       (#) For STM32F405xx/407xx and STM32F415xx/417xx devices, the maximum frequency 
 791:./FWLIB/src/stm32f4xx_rcc.c ****          of the SYSCLK and HCLK is 168 MHz, PCLK2 84 MHz and PCLK1 42 MHz. Depending 
 792:./FWLIB/src/stm32f4xx_rcc.c ****          on the device voltage range, the maximum frequency should be adapted accordingly:
 793:./FWLIB/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+     
 794:./FWLIB/src/stm32f4xx_rcc.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
ARM GAS  /tmp/ccqlGgFJ.s 			page 24


 795:./FWLIB/src/stm32f4xx_rcc.c ****  |               |---------------------------------------------------------------------|     
 796:./FWLIB/src/stm32f4xx_rcc.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 797:./FWLIB/src/stm32f4xx_rcc.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 798:./FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|           
 799:./FWLIB/src/stm32f4xx_rcc.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 22   |0 < HCLK <= 20   |
 800:./FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|   
 801:./FWLIB/src/stm32f4xx_rcc.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |22 < HCLK <= 44  |20 < HCLK <= 40  | 
 802:./FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|   
 803:./FWLIB/src/stm32f4xx_rcc.c ****  |2WS(3CPU cycle)|60 < HCLK <= 90 |48 < HCLK <= 72 |44 < HCLK <= 66  |40 < HCLK <= 60  |
 804:./FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 805:./FWLIB/src/stm32f4xx_rcc.c ****  |3WS(4CPU cycle)|90 < HCLK <= 120|72 < HCLK <= 96 |66 < HCLK <= 88  |60 < HCLK <= 80  |
 806:./FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 807:./FWLIB/src/stm32f4xx_rcc.c ****  |4WS(5CPU cycle)|120< HCLK <= 150|96 < HCLK <= 120|88 < HCLK <= 110 |80 < HCLK <= 100 |
 808:./FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 809:./FWLIB/src/stm32f4xx_rcc.c ****  |5WS(6CPU cycle)|150< HCLK <= 168|120< HCLK <= 144|110 < HCLK <= 132|100 < HCLK <= 120| 
 810:./FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 811:./FWLIB/src/stm32f4xx_rcc.c ****  |6WS(7CPU cycle)|      NA        |144< HCLK <= 168|132 < HCLK <= 154|120 < HCLK <= 140| 
 812:./FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 813:./FWLIB/src/stm32f4xx_rcc.c ****  |7WS(8CPU cycle)|      NA        |      NA        |154 < HCLK <= 168|140 < HCLK <= 160|
 814:./FWLIB/src/stm32f4xx_rcc.c ****  +---------------|----------------|----------------|-----------------|-----------------+ 
 815:./FWLIB/src/stm32f4xx_rcc.c ****       (#) For STM32F42xxx/43xxx devices, the maximum frequency of the SYSCLK and HCLK is 180 MHz, 
 816:./FWLIB/src/stm32f4xx_rcc.c ****           PCLK2 90 MHz and PCLK1 45 MHz. Depending on the device voltage range, the maximum 
 817:./FWLIB/src/stm32f4xx_rcc.c ****           frequency should be adapted accordingly:
 818:./FWLIB/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+     
 819:./FWLIB/src/stm32f4xx_rcc.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 820:./FWLIB/src/stm32f4xx_rcc.c ****  |               |---------------------------------------------------------------------|     
 821:./FWLIB/src/stm32f4xx_rcc.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 822:./FWLIB/src/stm32f4xx_rcc.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 823:./FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|           
 824:./FWLIB/src/stm32f4xx_rcc.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 22   |0 < HCLK <= 20   |
 825:./FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|   
 826:./FWLIB/src/stm32f4xx_rcc.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |22 < HCLK <= 44  |20 < HCLK <= 40  | 
 827:./FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|   
 828:./FWLIB/src/stm32f4xx_rcc.c ****  |2WS(3CPU cycle)|60 < HCLK <= 90 |48 < HCLK <= 72 |44 < HCLK <= 66  |40 < HCLK <= 60  |
 829:./FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 830:./FWLIB/src/stm32f4xx_rcc.c ****  |3WS(4CPU cycle)|90 < HCLK <= 120|72 < HCLK <= 96 |66 < HCLK <= 88  |60 < HCLK <= 80  |
 831:./FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 832:./FWLIB/src/stm32f4xx_rcc.c ****  |4WS(5CPU cycle)|120< HCLK <= 150|96 < HCLK <= 120|88 < HCLK <= 110 |80 < HCLK <= 100 |
 833:./FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 834:./FWLIB/src/stm32f4xx_rcc.c ****  |5WS(6CPU cycle)|120< HCLK <= 180|120< HCLK <= 144|110 < HCLK <= 132|100 < HCLK <= 120| 
 835:./FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 836:./FWLIB/src/stm32f4xx_rcc.c ****  |6WS(7CPU cycle)|      NA        |144< HCLK <= 168|132 < HCLK <= 154|120 < HCLK <= 140| 
 837:./FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 838:./FWLIB/src/stm32f4xx_rcc.c ****  |7WS(8CPU cycle)|      NA        |168< HCLK <= 180|154 < HCLK <= 176|140 < HCLK <= 160|
 839:./FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 840:./FWLIB/src/stm32f4xx_rcc.c ****  |8WS(9CPU cycle)|      NA        |      NA        |176 < HCLK <= 180|160 < HCLK <= 168|
 841:./FWLIB/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
 842:./FWLIB/src/stm32f4xx_rcc.c ****    
 843:./FWLIB/src/stm32f4xx_rcc.c ****       (#) For STM32F401xx devices, the maximum frequency of the SYSCLK and HCLK is 84 MHz, 
 844:./FWLIB/src/stm32f4xx_rcc.c ****           PCLK2 84 MHz and PCLK1 42 MHz. Depending on the device voltage range, the maximum 
 845:./FWLIB/src/stm32f4xx_rcc.c ****           frequency should be adapted accordingly:
 846:./FWLIB/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+     
 847:./FWLIB/src/stm32f4xx_rcc.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 848:./FWLIB/src/stm32f4xx_rcc.c ****  |               |---------------------------------------------------------------------|     
 849:./FWLIB/src/stm32f4xx_rcc.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 850:./FWLIB/src/stm32f4xx_rcc.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 851:./FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|           
ARM GAS  /tmp/ccqlGgFJ.s 			page 25


 852:./FWLIB/src/stm32f4xx_rcc.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 22   |0 < HCLK <= 20   |
 853:./FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|   
 854:./FWLIB/src/stm32f4xx_rcc.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |22 < HCLK <= 44  |20 < HCLK <= 40  | 
 855:./FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|   
 856:./FWLIB/src/stm32f4xx_rcc.c ****  |2WS(3CPU cycle)|60 < HCLK <= 84 |48 < HCLK <= 72 |44 < HCLK <= 66  |40 < HCLK <= 60  |
 857:./FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 858:./FWLIB/src/stm32f4xx_rcc.c ****  |3WS(4CPU cycle)|      NA        |72 < HCLK <= 84 |66 < HCLK <= 84  |60 < HCLK <= 80  |
 859:./FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 860:./FWLIB/src/stm32f4xx_rcc.c ****  |4WS(5CPU cycle)|      NA        |      NA        |      NA         |80 < HCLK <= 84  | 
 861:./FWLIB/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
 862:./FWLIB/src/stm32f4xx_rcc.c **** 
 863:./FWLIB/src/stm32f4xx_rcc.c ****       (#) For STM32F411xE devices, the maximum frequency of the SYSCLK and HCLK is 100 MHz, 
 864:./FWLIB/src/stm32f4xx_rcc.c ****           PCLK2 100 MHz and PCLK1 50 MHz. Depending on the device voltage range, the maximum 
 865:./FWLIB/src/stm32f4xx_rcc.c ****           frequency should be adapted accordingly:
 866:./FWLIB/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
 867:./FWLIB/src/stm32f4xx_rcc.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 868:./FWLIB/src/stm32f4xx_rcc.c ****  |               |---------------------------------------------------------------------|
 869:./FWLIB/src/stm32f4xx_rcc.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 870:./FWLIB/src/stm32f4xx_rcc.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 871:./FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 872:./FWLIB/src/stm32f4xx_rcc.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 18   |0 < HCLK <= 16   |
 873:./FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 874:./FWLIB/src/stm32f4xx_rcc.c ****  |1WS(2CPU cycle)|30 < HCLK <= 64 |24 < HCLK <= 48 |18 < HCLK <= 36  |16 < HCLK <= 32  |
 875:./FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 876:./FWLIB/src/stm32f4xx_rcc.c ****  |2WS(3CPU cycle)|64 < HCLK <= 90 |48 < HCLK <= 72 |36 < HCLK <= 54  |32 < HCLK <= 48  |
 877:./FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 878:./FWLIB/src/stm32f4xx_rcc.c ****  |3WS(4CPU cycle)|90 < HCLK <= 100|72 < HCLK <= 96 |54 < HCLK <= 72  |48 < HCLK <= 64  |
 879:./FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 880:./FWLIB/src/stm32f4xx_rcc.c ****  |4WS(5CPU cycle)|      NA        |96 < HCLK <= 100|72 < HCLK <= 90  |64 < HCLK <= 80  |
 881:./FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 882:./FWLIB/src/stm32f4xx_rcc.c ****  |5WS(6CPU cycle)|      NA        |       NA       |90 < HCLK <= 100 |80 < HCLK <= 96  |
 883:./FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 884:./FWLIB/src/stm32f4xx_rcc.c ****  |6WS(7CPU cycle)|      NA        |       NA       |        NA       |96 < HCLK <= 100 |
 885:./FWLIB/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
 886:./FWLIB/src/stm32f4xx_rcc.c ****   
 887:./FWLIB/src/stm32f4xx_rcc.c ****       -@- On STM32F405xx/407xx and STM32F415xx/417xx devices: 
 888:./FWLIB/src/stm32f4xx_rcc.c ****            (++) when VOS = '0', the maximum value of fHCLK = 144MHz. 
 889:./FWLIB/src/stm32f4xx_rcc.c ****            (++) when VOS = '1', the maximum value of fHCLK = 168MHz. 
 890:./FWLIB/src/stm32f4xx_rcc.c ****           [..] 
 891:./FWLIB/src/stm32f4xx_rcc.c ****           On STM32F42xxx/43xxx devices:
 892:./FWLIB/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x01', the maximum value of fHCLK is 120MHz.
 893:./FWLIB/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x10', the maximum value of fHCLK is 144MHz.
 894:./FWLIB/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x11', the maximum value of f  is 168MHz 
 895:./FWLIB/src/stm32f4xx_rcc.c ****           [..]  
 896:./FWLIB/src/stm32f4xx_rcc.c ****           On STM32F401x devices:
 897:./FWLIB/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x01', the maximum value of fHCLK is 64MHz.
 898:./FWLIB/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x10', the maximum value of fHCLK is 84MHz.
 899:./FWLIB/src/stm32f4xx_rcc.c ****           On STM32F411xE devices:
 900:./FWLIB/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x01' the maximum value of fHCLK is 64MHz.
 901:./FWLIB/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x10' the maximum value of fHCLK is 84MHz.
 902:./FWLIB/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x11' the maximum value of fHCLK is 100MHz.
 903:./FWLIB/src/stm32f4xx_rcc.c **** 
 904:./FWLIB/src/stm32f4xx_rcc.c ****        You can use PWR_MainRegulatorModeConfig() function to control VOS bits.
 905:./FWLIB/src/stm32f4xx_rcc.c **** 
 906:./FWLIB/src/stm32f4xx_rcc.c **** @endverbatim
 907:./FWLIB/src/stm32f4xx_rcc.c ****   * @{
 908:./FWLIB/src/stm32f4xx_rcc.c ****   */
ARM GAS  /tmp/ccqlGgFJ.s 			page 26


 909:./FWLIB/src/stm32f4xx_rcc.c **** 
 910:./FWLIB/src/stm32f4xx_rcc.c **** /**
 911:./FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the system clock (SYSCLK).
 912:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   The HSI is used (enabled by hardware) as system clock source after
 913:./FWLIB/src/stm32f4xx_rcc.c ****   *         startup from Reset, wake-up from STOP and STANDBY mode, or in case
 914:./FWLIB/src/stm32f4xx_rcc.c ****   *         of failure of the HSE used directly or indirectly as system clock
 915:./FWLIB/src/stm32f4xx_rcc.c ****   *         (if the Clock Security System CSS is enabled).
 916:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   A switch from one clock source to another occurs only if the target
 917:./FWLIB/src/stm32f4xx_rcc.c ****   *         clock source is ready (clock stable after startup delay or PLL locked). 
 918:./FWLIB/src/stm32f4xx_rcc.c ****   *         If a clock source which is not yet ready is selected, the switch will
 919:./FWLIB/src/stm32f4xx_rcc.c ****   *         occur when the clock source will be ready. 
 920:./FWLIB/src/stm32f4xx_rcc.c ****   *         You can use RCC_GetSYSCLKSource() function to know which clock is
 921:./FWLIB/src/stm32f4xx_rcc.c ****   *         currently used as system clock source. 
 922:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_SYSCLKSource: specifies the clock source used as system clock.
 923:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 924:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_HSI:    HSI selected as system clock source
 925:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
 926:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
 927:./FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 928:./FWLIB/src/stm32f4xx_rcc.c ****   */
 929:./FWLIB/src/stm32f4xx_rcc.c **** void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
 930:./FWLIB/src/stm32f4xx_rcc.c **** {
 549              		.loc 1 930 0
 550              		.cfi_startproc
 551              		@ args = 0, pretend = 0, frame = 0
 552              		@ frame_needed = 0, uses_anonymous_args = 0
 553              		@ link register save eliminated.
 554              	.LVL31:
 931:./FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 932:./FWLIB/src/stm32f4xx_rcc.c **** 
 933:./FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 934:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
 935:./FWLIB/src/stm32f4xx_rcc.c **** 
 936:./FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 555              		.loc 1 936 0
 556 0000 034A     		ldr	r2, .L50
 557 0002 9368     		ldr	r3, [r2, #8]
 558              	.LVL32:
 937:./FWLIB/src/stm32f4xx_rcc.c **** 
 938:./FWLIB/src/stm32f4xx_rcc.c ****   /* Clear SW[1:0] bits */
 939:./FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_SW;
 559              		.loc 1 939 0
 560 0004 23F00303 		bic	r3, r3, #3
 561              	.LVL33:
 940:./FWLIB/src/stm32f4xx_rcc.c **** 
 941:./FWLIB/src/stm32f4xx_rcc.c ****   /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
 942:./FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SYSCLKSource;
 562              		.loc 1 942 0
 563 0008 1843     		orrs	r0, r0, r3
 564              	.LVL34:
 943:./FWLIB/src/stm32f4xx_rcc.c **** 
 944:./FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
 945:./FWLIB/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 565              		.loc 1 945 0
 566 000a 9060     		str	r0, [r2, #8]
 946:./FWLIB/src/stm32f4xx_rcc.c **** }
 567              		.loc 1 946 0
ARM GAS  /tmp/ccqlGgFJ.s 			page 27


 568 000c 7047     		bx	lr
 569              	.L51:
 570 000e 00BF     		.align	2
 571              	.L50:
 572 0010 00380240 		.word	1073887232
 573              		.cfi_endproc
 574              	.LFE128:
 576              		.section	.text.RCC_GetSYSCLKSource,"ax",%progbits
 577              		.align	1
 578              		.global	RCC_GetSYSCLKSource
 579              		.syntax unified
 580              		.thumb
 581              		.thumb_func
 582              		.fpu fpv4-sp-d16
 584              	RCC_GetSYSCLKSource:
 585              	.LFB129:
 947:./FWLIB/src/stm32f4xx_rcc.c **** 
 948:./FWLIB/src/stm32f4xx_rcc.c **** /**
 949:./FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Returns the clock source used as system clock.
 950:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  None
 951:./FWLIB/src/stm32f4xx_rcc.c ****   * @retval The clock source used as system clock. The returned value can be one
 952:./FWLIB/src/stm32f4xx_rcc.c ****   *         of the following:
 953:./FWLIB/src/stm32f4xx_rcc.c ****   *              - 0x00: HSI used as system clock
 954:./FWLIB/src/stm32f4xx_rcc.c ****   *              - 0x04: HSE used as system clock
 955:./FWLIB/src/stm32f4xx_rcc.c ****   *              - 0x08: PLL used as system clock
 956:./FWLIB/src/stm32f4xx_rcc.c ****   */
 957:./FWLIB/src/stm32f4xx_rcc.c **** uint8_t RCC_GetSYSCLKSource(void)
 958:./FWLIB/src/stm32f4xx_rcc.c **** {
 586              		.loc 1 958 0
 587              		.cfi_startproc
 588              		@ args = 0, pretend = 0, frame = 0
 589              		@ frame_needed = 0, uses_anonymous_args = 0
 590              		@ link register save eliminated.
 959:./FWLIB/src/stm32f4xx_rcc.c ****   return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 591              		.loc 1 959 0
 592 0000 024B     		ldr	r3, .L53
 593 0002 9868     		ldr	r0, [r3, #8]
 960:./FWLIB/src/stm32f4xx_rcc.c **** }
 594              		.loc 1 960 0
 595 0004 00F00C00 		and	r0, r0, #12
 596 0008 7047     		bx	lr
 597              	.L54:
 598 000a 00BF     		.align	2
 599              	.L53:
 600 000c 00380240 		.word	1073887232
 601              		.cfi_endproc
 602              	.LFE129:
 604              		.section	.text.RCC_HCLKConfig,"ax",%progbits
 605              		.align	1
 606              		.global	RCC_HCLKConfig
 607              		.syntax unified
 608              		.thumb
 609              		.thumb_func
 610              		.fpu fpv4-sp-d16
 612              	RCC_HCLKConfig:
 613              	.LFB130:
 961:./FWLIB/src/stm32f4xx_rcc.c **** 
ARM GAS  /tmp/ccqlGgFJ.s 			page 28


 962:./FWLIB/src/stm32f4xx_rcc.c **** /**
 963:./FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the AHB clock (HCLK).
 964:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   Depending on the device voltage range, the software has to set correctly
 965:./FWLIB/src/stm32f4xx_rcc.c ****   *         these bits to ensure that HCLK not exceed the maximum allowed frequency
 966:./FWLIB/src/stm32f4xx_rcc.c ****   *         (for more details refer to section above
 967:./FWLIB/src/stm32f4xx_rcc.c ****   *           "CPU, AHB and APB busses clocks configuration functions")
 968:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_SYSCLK: defines the AHB clock divider. This clock is derived from 
 969:./FWLIB/src/stm32f4xx_rcc.c ****   *         the system clock (SYSCLK).
 970:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 971:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div1: AHB clock = SYSCLK
 972:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div2: AHB clock = SYSCLK/2
 973:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div4: AHB clock = SYSCLK/4
 974:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div8: AHB clock = SYSCLK/8
 975:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div16: AHB clock = SYSCLK/16
 976:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div64: AHB clock = SYSCLK/64
 977:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div128: AHB clock = SYSCLK/128
 978:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
 979:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
 980:./FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 981:./FWLIB/src/stm32f4xx_rcc.c ****   */
 982:./FWLIB/src/stm32f4xx_rcc.c **** void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
 983:./FWLIB/src/stm32f4xx_rcc.c **** {
 614              		.loc 1 983 0
 615              		.cfi_startproc
 616              		@ args = 0, pretend = 0, frame = 0
 617              		@ frame_needed = 0, uses_anonymous_args = 0
 618              		@ link register save eliminated.
 619              	.LVL35:
 984:./FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 985:./FWLIB/src/stm32f4xx_rcc.c ****   
 986:./FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 987:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_HCLK(RCC_SYSCLK));
 988:./FWLIB/src/stm32f4xx_rcc.c **** 
 989:./FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 620              		.loc 1 989 0
 621 0000 034A     		ldr	r2, .L56
 622 0002 9368     		ldr	r3, [r2, #8]
 623              	.LVL36:
 990:./FWLIB/src/stm32f4xx_rcc.c **** 
 991:./FWLIB/src/stm32f4xx_rcc.c ****   /* Clear HPRE[3:0] bits */
 992:./FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_HPRE;
 624              		.loc 1 992 0
 625 0004 23F0F003 		bic	r3, r3, #240
 626              	.LVL37:
 993:./FWLIB/src/stm32f4xx_rcc.c **** 
 994:./FWLIB/src/stm32f4xx_rcc.c ****   /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
 995:./FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SYSCLK;
 627              		.loc 1 995 0
 628 0008 1843     		orrs	r0, r0, r3
 629              	.LVL38:
 996:./FWLIB/src/stm32f4xx_rcc.c **** 
 997:./FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
 998:./FWLIB/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 630              		.loc 1 998 0
 631 000a 9060     		str	r0, [r2, #8]
 999:./FWLIB/src/stm32f4xx_rcc.c **** }
 632              		.loc 1 999 0
ARM GAS  /tmp/ccqlGgFJ.s 			page 29


 633 000c 7047     		bx	lr
 634              	.L57:
 635 000e 00BF     		.align	2
 636              	.L56:
 637 0010 00380240 		.word	1073887232
 638              		.cfi_endproc
 639              	.LFE130:
 641              		.section	.text.RCC_PCLK1Config,"ax",%progbits
 642              		.align	1
 643              		.global	RCC_PCLK1Config
 644              		.syntax unified
 645              		.thumb
 646              		.thumb_func
 647              		.fpu fpv4-sp-d16
 649              	RCC_PCLK1Config:
 650              	.LFB131:
1000:./FWLIB/src/stm32f4xx_rcc.c **** 
1001:./FWLIB/src/stm32f4xx_rcc.c **** 
1002:./FWLIB/src/stm32f4xx_rcc.c **** /**
1003:./FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the Low Speed APB clock (PCLK1).
1004:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_HCLK: defines the APB1 clock divider. This clock is derived from 
1005:./FWLIB/src/stm32f4xx_rcc.c ****   *         the AHB clock (HCLK).
1006:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1007:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div1:  APB1 clock = HCLK
1008:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div2:  APB1 clock = HCLK/2
1009:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div4:  APB1 clock = HCLK/4
1010:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
1011:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
1012:./FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1013:./FWLIB/src/stm32f4xx_rcc.c ****   */
1014:./FWLIB/src/stm32f4xx_rcc.c **** void RCC_PCLK1Config(uint32_t RCC_HCLK)
1015:./FWLIB/src/stm32f4xx_rcc.c **** {
 651              		.loc 1 1015 0
 652              		.cfi_startproc
 653              		@ args = 0, pretend = 0, frame = 0
 654              		@ frame_needed = 0, uses_anonymous_args = 0
 655              		@ link register save eliminated.
 656              	.LVL39:
1016:./FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1017:./FWLIB/src/stm32f4xx_rcc.c **** 
1018:./FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1019:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
1020:./FWLIB/src/stm32f4xx_rcc.c **** 
1021:./FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 657              		.loc 1 1021 0
 658 0000 034A     		ldr	r2, .L59
 659 0002 9368     		ldr	r3, [r2, #8]
 660              	.LVL40:
1022:./FWLIB/src/stm32f4xx_rcc.c **** 
1023:./FWLIB/src/stm32f4xx_rcc.c ****   /* Clear PPRE1[2:0] bits */
1024:./FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_PPRE1;
 661              		.loc 1 1024 0
 662 0004 23F4E053 		bic	r3, r3, #7168
 663              	.LVL41:
1025:./FWLIB/src/stm32f4xx_rcc.c **** 
1026:./FWLIB/src/stm32f4xx_rcc.c ****   /* Set PPRE1[2:0] bits according to RCC_HCLK value */
1027:./FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_HCLK;
ARM GAS  /tmp/ccqlGgFJ.s 			page 30


 664              		.loc 1 1027 0
 665 0008 1843     		orrs	r0, r0, r3
 666              	.LVL42:
1028:./FWLIB/src/stm32f4xx_rcc.c **** 
1029:./FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
1030:./FWLIB/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 667              		.loc 1 1030 0
 668 000a 9060     		str	r0, [r2, #8]
1031:./FWLIB/src/stm32f4xx_rcc.c **** }
 669              		.loc 1 1031 0
 670 000c 7047     		bx	lr
 671              	.L60:
 672 000e 00BF     		.align	2
 673              	.L59:
 674 0010 00380240 		.word	1073887232
 675              		.cfi_endproc
 676              	.LFE131:
 678              		.section	.text.RCC_PCLK2Config,"ax",%progbits
 679              		.align	1
 680              		.global	RCC_PCLK2Config
 681              		.syntax unified
 682              		.thumb
 683              		.thumb_func
 684              		.fpu fpv4-sp-d16
 686              	RCC_PCLK2Config:
 687              	.LFB132:
1032:./FWLIB/src/stm32f4xx_rcc.c **** 
1033:./FWLIB/src/stm32f4xx_rcc.c **** /**
1034:./FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the High Speed APB clock (PCLK2).
1035:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_HCLK: defines the APB2 clock divider. This clock is derived from 
1036:./FWLIB/src/stm32f4xx_rcc.c ****   *         the AHB clock (HCLK).
1037:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1038:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div1:  APB2 clock = HCLK
1039:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div2:  APB2 clock = HCLK/2
1040:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div4:  APB2 clock = HCLK/4
1041:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
1042:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
1043:./FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1044:./FWLIB/src/stm32f4xx_rcc.c ****   */
1045:./FWLIB/src/stm32f4xx_rcc.c **** void RCC_PCLK2Config(uint32_t RCC_HCLK)
1046:./FWLIB/src/stm32f4xx_rcc.c **** {
 688              		.loc 1 1046 0
 689              		.cfi_startproc
 690              		@ args = 0, pretend = 0, frame = 0
 691              		@ frame_needed = 0, uses_anonymous_args = 0
 692              		@ link register save eliminated.
 693              	.LVL43:
1047:./FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1048:./FWLIB/src/stm32f4xx_rcc.c **** 
1049:./FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1050:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
1051:./FWLIB/src/stm32f4xx_rcc.c **** 
1052:./FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 694              		.loc 1 1052 0
 695 0000 034A     		ldr	r2, .L62
 696 0002 9368     		ldr	r3, [r2, #8]
 697              	.LVL44:
ARM GAS  /tmp/ccqlGgFJ.s 			page 31


1053:./FWLIB/src/stm32f4xx_rcc.c **** 
1054:./FWLIB/src/stm32f4xx_rcc.c ****   /* Clear PPRE2[2:0] bits */
1055:./FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_PPRE2;
 698              		.loc 1 1055 0
 699 0004 23F46043 		bic	r3, r3, #57344
 700              	.LVL45:
1056:./FWLIB/src/stm32f4xx_rcc.c **** 
1057:./FWLIB/src/stm32f4xx_rcc.c ****   /* Set PPRE2[2:0] bits according to RCC_HCLK value */
1058:./FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_HCLK << 3;
 701              		.loc 1 1058 0
 702 0008 43EAC000 		orr	r0, r3, r0, lsl #3
 703              	.LVL46:
1059:./FWLIB/src/stm32f4xx_rcc.c **** 
1060:./FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
1061:./FWLIB/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 704              		.loc 1 1061 0
 705 000c 9060     		str	r0, [r2, #8]
1062:./FWLIB/src/stm32f4xx_rcc.c **** }
 706              		.loc 1 1062 0
 707 000e 7047     		bx	lr
 708              	.L63:
 709              		.align	2
 710              	.L62:
 711 0010 00380240 		.word	1073887232
 712              		.cfi_endproc
 713              	.LFE132:
 715              		.section	.text.RCC_GetClocksFreq,"ax",%progbits
 716              		.align	1
 717              		.global	RCC_GetClocksFreq
 718              		.syntax unified
 719              		.thumb
 720              		.thumb_func
 721              		.fpu fpv4-sp-d16
 723              	RCC_GetClocksFreq:
 724              	.LFB133:
1063:./FWLIB/src/stm32f4xx_rcc.c **** 
1064:./FWLIB/src/stm32f4xx_rcc.c **** /**
1065:./FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Returns the frequencies of different on chip clocks; SYSCLK, HCLK, 
1066:./FWLIB/src/stm32f4xx_rcc.c ****   *         PCLK1 and PCLK2.       
1067:./FWLIB/src/stm32f4xx_rcc.c ****   * 
1068:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   The system frequency computed by this function is not the real 
1069:./FWLIB/src/stm32f4xx_rcc.c ****   *         frequency in the chip. It is calculated based on the predefined 
1070:./FWLIB/src/stm32f4xx_rcc.c ****   *         constant and the selected clock source:
1071:./FWLIB/src/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is HSI, function returns values based on HSI_VALUE(*)
1072:./FWLIB/src/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is HSE, function returns values based on HSE_VALUE(**)
1073:./FWLIB/src/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is PLL, function returns values based on HSE_VALUE(**) 
1074:./FWLIB/src/stm32f4xx_rcc.c ****   *           or HSI_VALUE(*) multiplied/divided by the PLL factors.         
1075:./FWLIB/src/stm32f4xx_rcc.c ****   * @note     (*) HSI_VALUE is a constant defined in stm32f4xx.h file (default value
1076:./FWLIB/src/stm32f4xx_rcc.c ****   *               16 MHz) but the real value may vary depending on the variations
1077:./FWLIB/src/stm32f4xx_rcc.c ****   *               in voltage and temperature.
1078:./FWLIB/src/stm32f4xx_rcc.c ****   * @note     (**) HSE_VALUE is a constant defined in stm32f4xx.h file (default value
1079:./FWLIB/src/stm32f4xx_rcc.c ****   *                25 MHz), user has to ensure that HSE_VALUE is same as the real
1080:./FWLIB/src/stm32f4xx_rcc.c ****   *                frequency of the crystal used. Otherwise, this function may
1081:./FWLIB/src/stm32f4xx_rcc.c ****   *                have wrong result.
1082:./FWLIB/src/stm32f4xx_rcc.c ****   *                
1083:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   The result of this function could be not correct when using fractional
1084:./FWLIB/src/stm32f4xx_rcc.c ****   *         value for HSE crystal.
ARM GAS  /tmp/ccqlGgFJ.s 			page 32


1085:./FWLIB/src/stm32f4xx_rcc.c ****   *   
1086:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_Clocks: pointer to a RCC_ClocksTypeDef structure which will hold
1087:./FWLIB/src/stm32f4xx_rcc.c ****   *          the clocks frequencies.
1088:./FWLIB/src/stm32f4xx_rcc.c ****   *     
1089:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used by the user application to compute the 
1090:./FWLIB/src/stm32f4xx_rcc.c ****   *         baudrate for the communication peripherals or configure other parameters.
1091:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   Each time SYSCLK, HCLK, PCLK1 and/or PCLK2 clock changes, this function
1092:./FWLIB/src/stm32f4xx_rcc.c ****   *         must be called to update the structure's field. Otherwise, any
1093:./FWLIB/src/stm32f4xx_rcc.c ****   *         configuration based on this function will be incorrect.
1094:./FWLIB/src/stm32f4xx_rcc.c ****   *    
1095:./FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1096:./FWLIB/src/stm32f4xx_rcc.c ****   */
1097:./FWLIB/src/stm32f4xx_rcc.c **** void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
1098:./FWLIB/src/stm32f4xx_rcc.c **** {
 725              		.loc 1 1098 0
 726              		.cfi_startproc
 727              		@ args = 0, pretend = 0, frame = 0
 728              		@ frame_needed = 0, uses_anonymous_args = 0
 729              		@ link register save eliminated.
 730              	.LVL47:
 731 0000 10B4     		push	{r4}
 732              	.LCFI0:
 733              		.cfi_def_cfa_offset 4
 734              		.cfi_offset 4, -4
 735              	.LVL48:
1099:./FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
1100:./FWLIB/src/stm32f4xx_rcc.c **** 
1101:./FWLIB/src/stm32f4xx_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
1102:./FWLIB/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 736              		.loc 1 1102 0
 737 0002 294B     		ldr	r3, .L75
 738 0004 9B68     		ldr	r3, [r3, #8]
 739 0006 03F00C03 		and	r3, r3, #12
 740              	.LVL49:
1103:./FWLIB/src/stm32f4xx_rcc.c **** 
1104:./FWLIB/src/stm32f4xx_rcc.c ****   switch (tmp)
 741              		.loc 1 1104 0
 742 000a 042B     		cmp	r3, #4
 743 000c 23D0     		beq	.L66
 744 000e 082B     		cmp	r3, #8
 745 0010 24D0     		beq	.L67
 746 0012 13B1     		cbz	r3, .L74
1105:./FWLIB/src/stm32f4xx_rcc.c ****   {
1106:./FWLIB/src/stm32f4xx_rcc.c ****     case 0x00:  /* HSI used as system clock source */
1107:./FWLIB/src/stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
1108:./FWLIB/src/stm32f4xx_rcc.c ****       break;
1109:./FWLIB/src/stm32f4xx_rcc.c ****     case 0x04:  /* HSE used as system clock  source */
1110:./FWLIB/src/stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
1111:./FWLIB/src/stm32f4xx_rcc.c ****       break;
1112:./FWLIB/src/stm32f4xx_rcc.c ****     case 0x08:  /* PLL used as system clock  source */
1113:./FWLIB/src/stm32f4xx_rcc.c **** 
1114:./FWLIB/src/stm32f4xx_rcc.c ****       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
1115:./FWLIB/src/stm32f4xx_rcc.c ****          SYSCLK = PLL_VCO / PLLP
1116:./FWLIB/src/stm32f4xx_rcc.c ****          */    
1117:./FWLIB/src/stm32f4xx_rcc.c ****       pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
1118:./FWLIB/src/stm32f4xx_rcc.c ****       pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
1119:./FWLIB/src/stm32f4xx_rcc.c ****       
ARM GAS  /tmp/ccqlGgFJ.s 			page 33


1120:./FWLIB/src/stm32f4xx_rcc.c ****       if (pllsource != 0)
1121:./FWLIB/src/stm32f4xx_rcc.c ****       {
1122:./FWLIB/src/stm32f4xx_rcc.c ****         /* HSE used as PLL clock source */
1123:./FWLIB/src/stm32f4xx_rcc.c ****         pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
1124:./FWLIB/src/stm32f4xx_rcc.c ****       }
1125:./FWLIB/src/stm32f4xx_rcc.c ****       else
1126:./FWLIB/src/stm32f4xx_rcc.c ****       {
1127:./FWLIB/src/stm32f4xx_rcc.c ****         /* HSI used as PLL clock source */
1128:./FWLIB/src/stm32f4xx_rcc.c ****         pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
1129:./FWLIB/src/stm32f4xx_rcc.c ****       }
1130:./FWLIB/src/stm32f4xx_rcc.c **** 
1131:./FWLIB/src/stm32f4xx_rcc.c ****       pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
1132:./FWLIB/src/stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
1133:./FWLIB/src/stm32f4xx_rcc.c ****       break;
1134:./FWLIB/src/stm32f4xx_rcc.c ****     default:
1135:./FWLIB/src/stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 747              		.loc 1 1135 0
 748 0014 254B     		ldr	r3, .L75+4
 749              	.LVL50:
 750 0016 0360     		str	r3, [r0]
1136:./FWLIB/src/stm32f4xx_rcc.c ****       break;
 751              		.loc 1 1136 0
 752 0018 01E0     		b	.L69
 753              	.LVL51:
 754              	.L74:
1107:./FWLIB/src/stm32f4xx_rcc.c ****       break;
 755              		.loc 1 1107 0
 756 001a 244B     		ldr	r3, .L75+4
 757              	.LVL52:
 758 001c 0360     		str	r3, [r0]
 759              	.LVL53:
 760              	.L69:
1137:./FWLIB/src/stm32f4xx_rcc.c ****   }
1138:./FWLIB/src/stm32f4xx_rcc.c ****   /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
1139:./FWLIB/src/stm32f4xx_rcc.c **** 
1140:./FWLIB/src/stm32f4xx_rcc.c ****   /* Get HCLK prescaler */
1141:./FWLIB/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_HPRE;
 761              		.loc 1 1141 0
 762 001e 224C     		ldr	r4, .L75
 763 0020 A368     		ldr	r3, [r4, #8]
 764              	.LVL54:
1142:./FWLIB/src/stm32f4xx_rcc.c ****   tmp = tmp >> 4;
 765              		.loc 1 1142 0
 766 0022 C3F30313 		ubfx	r3, r3, #4, #4
 767              	.LVL55:
1143:./FWLIB/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 768              		.loc 1 1143 0
 769 0026 2249     		ldr	r1, .L75+8
 770 0028 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 771              	.LVL56:
 772 002a DAB2     		uxtb	r2, r3
 773              	.LVL57:
1144:./FWLIB/src/stm32f4xx_rcc.c ****   /* HCLK clock frequency */
1145:./FWLIB/src/stm32f4xx_rcc.c ****   RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 774              		.loc 1 1145 0
 775 002c 0368     		ldr	r3, [r0]
 776 002e D340     		lsrs	r3, r3, r2
ARM GAS  /tmp/ccqlGgFJ.s 			page 34


 777 0030 4360     		str	r3, [r0, #4]
1146:./FWLIB/src/stm32f4xx_rcc.c **** 
1147:./FWLIB/src/stm32f4xx_rcc.c ****   /* Get PCLK1 prescaler */
1148:./FWLIB/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 778              		.loc 1 1148 0
 779 0032 A268     		ldr	r2, [r4, #8]
 780              	.LVL58:
1149:./FWLIB/src/stm32f4xx_rcc.c ****   tmp = tmp >> 10;
 781              		.loc 1 1149 0
 782 0034 C2F38222 		ubfx	r2, r2, #10, #3
 783              	.LVL59:
1150:./FWLIB/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 784              		.loc 1 1150 0
 785 0038 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 786              	.LVL60:
 787 003a D2B2     		uxtb	r2, r2
 788              	.LVL61:
1151:./FWLIB/src/stm32f4xx_rcc.c ****   /* PCLK1 clock frequency */
1152:./FWLIB/src/stm32f4xx_rcc.c ****   RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 789              		.loc 1 1152 0
 790 003c 23FA02F2 		lsr	r2, r3, r2
 791              	.LVL62:
 792 0040 8260     		str	r2, [r0, #8]
1153:./FWLIB/src/stm32f4xx_rcc.c **** 
1154:./FWLIB/src/stm32f4xx_rcc.c ****   /* Get PCLK2 prescaler */
1155:./FWLIB/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 793              		.loc 1 1155 0
 794 0042 A268     		ldr	r2, [r4, #8]
 795              	.LVL63:
1156:./FWLIB/src/stm32f4xx_rcc.c ****   tmp = tmp >> 13;
 796              		.loc 1 1156 0
 797 0044 C2F34232 		ubfx	r2, r2, #13, #3
 798              	.LVL64:
1157:./FWLIB/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 799              		.loc 1 1157 0
 800 0048 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 801              	.LVL65:
 802 004a D2B2     		uxtb	r2, r2
 803              	.LVL66:
1158:./FWLIB/src/stm32f4xx_rcc.c ****   /* PCLK2 clock frequency */
1159:./FWLIB/src/stm32f4xx_rcc.c ****   RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 804              		.loc 1 1159 0
 805 004c D340     		lsrs	r3, r3, r2
 806 004e C360     		str	r3, [r0, #12]
1160:./FWLIB/src/stm32f4xx_rcc.c **** }
 807              		.loc 1 1160 0
 808 0050 5DF8044B 		ldr	r4, [sp], #4
 809              	.LCFI1:
 810              		.cfi_remember_state
 811              		.cfi_restore 4
 812              		.cfi_def_cfa_offset 0
 813 0054 7047     		bx	lr
 814              	.LVL67:
 815              	.L66:
 816              	.LCFI2:
 817              		.cfi_restore_state
1110:./FWLIB/src/stm32f4xx_rcc.c ****       break;
ARM GAS  /tmp/ccqlGgFJ.s 			page 35


 818              		.loc 1 1110 0
 819 0056 174B     		ldr	r3, .L75+12
 820              	.LVL68:
 821 0058 0360     		str	r3, [r0]
1111:./FWLIB/src/stm32f4xx_rcc.c ****     case 0x08:  /* PLL used as system clock  source */
 822              		.loc 1 1111 0
 823 005a E0E7     		b	.L69
 824              	.LVL69:
 825              	.L67:
1117:./FWLIB/src/stm32f4xx_rcc.c ****       pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 826              		.loc 1 1117 0
 827 005c 124B     		ldr	r3, .L75
 828              	.LVL70:
 829 005e 5A68     		ldr	r2, [r3, #4]
 830              	.LVL71:
1118:./FWLIB/src/stm32f4xx_rcc.c ****       
 831              		.loc 1 1118 0
 832 0060 5B68     		ldr	r3, [r3, #4]
 833 0062 03F03F03 		and	r3, r3, #63
 834              	.LVL72:
1120:./FWLIB/src/stm32f4xx_rcc.c ****       {
 835              		.loc 1 1120 0
 836 0066 12F4800F 		tst	r2, #4194304
 837 006a 12D0     		beq	.L70
1123:./FWLIB/src/stm32f4xx_rcc.c ****       }
 838              		.loc 1 1123 0
 839 006c 114A     		ldr	r2, .L75+12
 840              	.LVL73:
 841 006e B2FBF3F2 		udiv	r2, r2, r3
 842 0072 0D4B     		ldr	r3, .L75
 843              	.LVL74:
 844 0074 5B68     		ldr	r3, [r3, #4]
 845 0076 C3F38813 		ubfx	r3, r3, #6, #9
 846 007a 03FB02F3 		mul	r3, r3, r2
 847              	.LVL75:
 848              	.L71:
1131:./FWLIB/src/stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 849              		.loc 1 1131 0
 850 007e 0A4A     		ldr	r2, .L75
 851 0080 5268     		ldr	r2, [r2, #4]
 852 0082 C2F30142 		ubfx	r2, r2, #16, #2
 853 0086 0132     		adds	r2, r2, #1
 854 0088 5200     		lsls	r2, r2, #1
 855              	.LVL76:
1132:./FWLIB/src/stm32f4xx_rcc.c ****       break;
 856              		.loc 1 1132 0
 857 008a B3FBF2F3 		udiv	r3, r3, r2
 858              	.LVL77:
 859 008e 0360     		str	r3, [r0]
1133:./FWLIB/src/stm32f4xx_rcc.c ****     default:
 860              		.loc 1 1133 0
 861 0090 C5E7     		b	.L69
 862              	.LVL78:
 863              	.L70:
1128:./FWLIB/src/stm32f4xx_rcc.c ****       }
 864              		.loc 1 1128 0
 865 0092 064A     		ldr	r2, .L75+4
ARM GAS  /tmp/ccqlGgFJ.s 			page 36


 866              	.LVL79:
 867 0094 B2FBF3F2 		udiv	r2, r2, r3
 868 0098 034B     		ldr	r3, .L75
 869              	.LVL80:
 870 009a 5B68     		ldr	r3, [r3, #4]
 871 009c C3F38813 		ubfx	r3, r3, #6, #9
 872 00a0 03FB02F3 		mul	r3, r3, r2
 873              	.LVL81:
 874 00a4 EBE7     		b	.L71
 875              	.L76:
 876 00a6 00BF     		.align	2
 877              	.L75:
 878 00a8 00380240 		.word	1073887232
 879 00ac 0024F400 		.word	16000000
 880 00b0 00000000 		.word	.LANCHOR0
 881 00b4 00127A00 		.word	8000000
 882              		.cfi_endproc
 883              	.LFE133:
 885              		.section	.text.RCC_RTCCLKConfig,"ax",%progbits
 886              		.align	1
 887              		.global	RCC_RTCCLKConfig
 888              		.syntax unified
 889              		.thumb
 890              		.thumb_func
 891              		.fpu fpv4-sp-d16
 893              	RCC_RTCCLKConfig:
 894              	.LFB134:
1161:./FWLIB/src/stm32f4xx_rcc.c **** 
1162:./FWLIB/src/stm32f4xx_rcc.c **** /**
1163:./FWLIB/src/stm32f4xx_rcc.c ****   * @}
1164:./FWLIB/src/stm32f4xx_rcc.c ****   */
1165:./FWLIB/src/stm32f4xx_rcc.c **** 
1166:./FWLIB/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group3 Peripheral clocks configuration functions
1167:./FWLIB/src/stm32f4xx_rcc.c ****  *  @brief   Peripheral clocks configuration functions 
1168:./FWLIB/src/stm32f4xx_rcc.c ****  *
1169:./FWLIB/src/stm32f4xx_rcc.c **** @verbatim   
1170:./FWLIB/src/stm32f4xx_rcc.c ****  ===============================================================================
1171:./FWLIB/src/stm32f4xx_rcc.c ****               ##### Peripheral clocks configuration functions #####
1172:./FWLIB/src/stm32f4xx_rcc.c ****  ===============================================================================  
1173:./FWLIB/src/stm32f4xx_rcc.c ****     [..] This section provide functions allowing to configure the Peripheral clocks. 
1174:./FWLIB/src/stm32f4xx_rcc.c ****   
1175:./FWLIB/src/stm32f4xx_rcc.c ****       (#) The RTC clock which is derived from the LSI, LSE or HSE clock divided 
1176:./FWLIB/src/stm32f4xx_rcc.c ****           by 2 to 31.
1177:./FWLIB/src/stm32f4xx_rcc.c ****      
1178:./FWLIB/src/stm32f4xx_rcc.c ****       (#) After restart from Reset or wakeup from STANDBY, all peripherals are off
1179:./FWLIB/src/stm32f4xx_rcc.c ****           except internal SRAM, Flash and JTAG. Before to start using a peripheral 
1180:./FWLIB/src/stm32f4xx_rcc.c ****           you have to enable its interface clock. You can do this using 
1181:./FWLIB/src/stm32f4xx_rcc.c ****           RCC_AHBPeriphClockCmd(), RCC_APB2PeriphClockCmd() and RCC_APB1PeriphClockCmd() functions.
1182:./FWLIB/src/stm32f4xx_rcc.c **** 
1183:./FWLIB/src/stm32f4xx_rcc.c ****       (#) To reset the peripherals configuration (to the default state after device reset)
1184:./FWLIB/src/stm32f4xx_rcc.c ****           you can use RCC_AHBPeriphResetCmd(), RCC_APB2PeriphResetCmd() and 
1185:./FWLIB/src/stm32f4xx_rcc.c ****           RCC_APB1PeriphResetCmd() functions.
1186:./FWLIB/src/stm32f4xx_rcc.c ****      
1187:./FWLIB/src/stm32f4xx_rcc.c ****       (#) To further reduce power consumption in SLEEP mode the peripheral clocks 
1188:./FWLIB/src/stm32f4xx_rcc.c ****           can be disabled prior to executing the WFI or WFE instructions. 
1189:./FWLIB/src/stm32f4xx_rcc.c ****           You can do this using RCC_AHBPeriphClockLPModeCmd(), 
1190:./FWLIB/src/stm32f4xx_rcc.c ****           RCC_APB2PeriphClockLPModeCmd() and RCC_APB1PeriphClockLPModeCmd() functions.  
ARM GAS  /tmp/ccqlGgFJ.s 			page 37


1191:./FWLIB/src/stm32f4xx_rcc.c **** 
1192:./FWLIB/src/stm32f4xx_rcc.c **** @endverbatim
1193:./FWLIB/src/stm32f4xx_rcc.c ****   * @{
1194:./FWLIB/src/stm32f4xx_rcc.c ****   */
1195:./FWLIB/src/stm32f4xx_rcc.c **** 
1196:./FWLIB/src/stm32f4xx_rcc.c **** /**
1197:./FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the RTC clock (RTCCLK).
1198:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   As the RTC clock configuration bits are in the Backup domain and write
1199:./FWLIB/src/stm32f4xx_rcc.c ****   *         access is denied to this domain after reset, you have to enable write
1200:./FWLIB/src/stm32f4xx_rcc.c ****   *         access using PWR_BackupAccessCmd(ENABLE) function before to configure
1201:./FWLIB/src/stm32f4xx_rcc.c ****   *         the RTC clock source (to be done once after reset).    
1202:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   Once the RTC clock is configured it can't be changed unless the  
1203:./FWLIB/src/stm32f4xx_rcc.c ****   *         Backup domain is reset using RCC_BackupResetCmd() function, or by
1204:./FWLIB/src/stm32f4xx_rcc.c ****   *         a Power On Reset (POR).
1205:./FWLIB/src/stm32f4xx_rcc.c ****   *    
1206:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_RTCCLKSource: specifies the RTC clock source.
1207:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1208:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_LSE: LSE selected as RTC clock
1209:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
1210:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_HSE_Divx: HSE clock divided by x selected
1211:./FWLIB/src/stm32f4xx_rcc.c ****   *                                            as RTC clock, where x:[2,31]
1212:./FWLIB/src/stm32f4xx_rcc.c ****   *  
1213:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   If the LSE or LSI is used as RTC clock source, the RTC continues to
1214:./FWLIB/src/stm32f4xx_rcc.c ****   *         work in STOP and STANDBY modes, and can be used as wakeup source.
1215:./FWLIB/src/stm32f4xx_rcc.c ****   *         However, when the HSE clock is used as RTC clock source, the RTC
1216:./FWLIB/src/stm32f4xx_rcc.c ****   *         cannot be used in STOP and STANDBY modes.    
1217:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   The maximum input clock frequency for RTC is 1MHz (when using HSE as
1218:./FWLIB/src/stm32f4xx_rcc.c ****   *         RTC clock source).
1219:./FWLIB/src/stm32f4xx_rcc.c ****   *  
1220:./FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1221:./FWLIB/src/stm32f4xx_rcc.c ****   */
1222:./FWLIB/src/stm32f4xx_rcc.c **** void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
1223:./FWLIB/src/stm32f4xx_rcc.c **** {
 895              		.loc 1 1223 0
 896              		.cfi_startproc
 897              		@ args = 0, pretend = 0, frame = 0
 898              		@ frame_needed = 0, uses_anonymous_args = 0
 899              		@ link register save eliminated.
 900              	.LVL82:
1224:./FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1225:./FWLIB/src/stm32f4xx_rcc.c **** 
1226:./FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1227:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
1228:./FWLIB/src/stm32f4xx_rcc.c **** 
1229:./FWLIB/src/stm32f4xx_rcc.c ****   if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 901              		.loc 1 1229 0
 902 0000 00F44073 		and	r3, r0, #768
 903 0004 B3F5407F 		cmp	r3, #768
 904 0008 06D0     		beq	.L79
 905              	.LVL83:
 906              	.L78:
1230:./FWLIB/src/stm32f4xx_rcc.c ****   { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
1231:./FWLIB/src/stm32f4xx_rcc.c ****     tmpreg = RCC->CFGR;
1232:./FWLIB/src/stm32f4xx_rcc.c **** 
1233:./FWLIB/src/stm32f4xx_rcc.c ****     /* Clear RTCPRE[4:0] bits */
1234:./FWLIB/src/stm32f4xx_rcc.c ****     tmpreg &= ~RCC_CFGR_RTCPRE;
1235:./FWLIB/src/stm32f4xx_rcc.c **** 
ARM GAS  /tmp/ccqlGgFJ.s 			page 38


1236:./FWLIB/src/stm32f4xx_rcc.c ****     /* Configure HSE division factor for RTC clock */
1237:./FWLIB/src/stm32f4xx_rcc.c ****     tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
1238:./FWLIB/src/stm32f4xx_rcc.c **** 
1239:./FWLIB/src/stm32f4xx_rcc.c ****     /* Store the new value */
1240:./FWLIB/src/stm32f4xx_rcc.c ****     RCC->CFGR = tmpreg;
1241:./FWLIB/src/stm32f4xx_rcc.c ****   }
1242:./FWLIB/src/stm32f4xx_rcc.c ****     
1243:./FWLIB/src/stm32f4xx_rcc.c ****   /* Select the RTC clock source */
1244:./FWLIB/src/stm32f4xx_rcc.c ****   RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 907              		.loc 1 1244 0
 908 000a 094A     		ldr	r2, .L80
 909 000c 136F     		ldr	r3, [r2, #112]
 910 000e C0F30B00 		ubfx	r0, r0, #0, #12
 911              	.LVL84:
 912 0012 1843     		orrs	r0, r0, r3
 913 0014 1067     		str	r0, [r2, #112]
1245:./FWLIB/src/stm32f4xx_rcc.c **** }
 914              		.loc 1 1245 0
 915 0016 7047     		bx	lr
 916              	.LVL85:
 917              	.L79:
1231:./FWLIB/src/stm32f4xx_rcc.c **** 
 918              		.loc 1 1231 0
 919 0018 0549     		ldr	r1, .L80
 920 001a 8A68     		ldr	r2, [r1, #8]
 921              	.LVL86:
1234:./FWLIB/src/stm32f4xx_rcc.c **** 
 922              		.loc 1 1234 0
 923 001c 22F4F812 		bic	r2, r2, #2031616
 924              	.LVL87:
1237:./FWLIB/src/stm32f4xx_rcc.c **** 
 925              		.loc 1 1237 0
 926 0020 20F07043 		bic	r3, r0, #-268435456
 927 0024 23F44073 		bic	r3, r3, #768
 928 0028 1343     		orrs	r3, r3, r2
 929              	.LVL88:
1240:./FWLIB/src/stm32f4xx_rcc.c ****   }
 930              		.loc 1 1240 0
 931 002a 8B60     		str	r3, [r1, #8]
 932 002c EDE7     		b	.L78
 933              	.L81:
 934 002e 00BF     		.align	2
 935              	.L80:
 936 0030 00380240 		.word	1073887232
 937              		.cfi_endproc
 938              	.LFE134:
 940              		.section	.text.RCC_RTCCLKCmd,"ax",%progbits
 941              		.align	1
 942              		.global	RCC_RTCCLKCmd
 943              		.syntax unified
 944              		.thumb
 945              		.thumb_func
 946              		.fpu fpv4-sp-d16
 948              	RCC_RTCCLKCmd:
 949              	.LFB135:
1246:./FWLIB/src/stm32f4xx_rcc.c **** 
1247:./FWLIB/src/stm32f4xx_rcc.c **** /**
ARM GAS  /tmp/ccqlGgFJ.s 			page 39


1248:./FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the RTC clock.
1249:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be used only after the RTC clock source was selected
1250:./FWLIB/src/stm32f4xx_rcc.c ****   *         using the RCC_RTCCLKConfig function.
1251:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
1252:./FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1253:./FWLIB/src/stm32f4xx_rcc.c ****   */
1254:./FWLIB/src/stm32f4xx_rcc.c **** void RCC_RTCCLKCmd(FunctionalState NewState)
1255:./FWLIB/src/stm32f4xx_rcc.c **** {
 950              		.loc 1 1255 0
 951              		.cfi_startproc
 952              		@ args = 0, pretend = 0, frame = 0
 953              		@ frame_needed = 0, uses_anonymous_args = 0
 954              		@ link register save eliminated.
 955              	.LVL89:
1256:./FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1257:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1258:./FWLIB/src/stm32f4xx_rcc.c **** 
1259:./FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 956              		.loc 1 1259 0
 957 0000 014B     		ldr	r3, .L83
 958 0002 1860     		str	r0, [r3]
1260:./FWLIB/src/stm32f4xx_rcc.c **** }
 959              		.loc 1 1260 0
 960 0004 7047     		bx	lr
 961              	.L84:
 962 0006 00BF     		.align	2
 963              	.L83:
 964 0008 3C0E4742 		.word	1111952956
 965              		.cfi_endproc
 966              	.LFE135:
 968              		.section	.text.RCC_BackupResetCmd,"ax",%progbits
 969              		.align	1
 970              		.global	RCC_BackupResetCmd
 971              		.syntax unified
 972              		.thumb
 973              		.thumb_func
 974              		.fpu fpv4-sp-d16
 976              	RCC_BackupResetCmd:
 977              	.LFB136:
1261:./FWLIB/src/stm32f4xx_rcc.c **** 
1262:./FWLIB/src/stm32f4xx_rcc.c **** /**
1263:./FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases the Backup domain reset.
1264:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function resets the RTC peripheral (including the backup registers)
1265:./FWLIB/src/stm32f4xx_rcc.c ****   *         and the RTC clock source selection in RCC_CSR register.
1266:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   The BKPSRAM is not affected by this reset.    
1267:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the Backup domain reset.
1268:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1269:./FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1270:./FWLIB/src/stm32f4xx_rcc.c ****   */
1271:./FWLIB/src/stm32f4xx_rcc.c **** void RCC_BackupResetCmd(FunctionalState NewState)
1272:./FWLIB/src/stm32f4xx_rcc.c **** {
 978              		.loc 1 1272 0
 979              		.cfi_startproc
 980              		@ args = 0, pretend = 0, frame = 0
 981              		@ frame_needed = 0, uses_anonymous_args = 0
 982              		@ link register save eliminated.
 983              	.LVL90:
ARM GAS  /tmp/ccqlGgFJ.s 			page 40


1273:./FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1274:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1275:./FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 984              		.loc 1 1275 0
 985 0000 014B     		ldr	r3, .L86
 986 0002 1860     		str	r0, [r3]
1276:./FWLIB/src/stm32f4xx_rcc.c **** }
 987              		.loc 1 1276 0
 988 0004 7047     		bx	lr
 989              	.L87:
 990 0006 00BF     		.align	2
 991              	.L86:
 992 0008 400E4742 		.word	1111952960
 993              		.cfi_endproc
 994              	.LFE136:
 996              		.section	.text.RCC_I2SCLKConfig,"ax",%progbits
 997              		.align	1
 998              		.global	RCC_I2SCLKConfig
 999              		.syntax unified
 1000              		.thumb
 1001              		.thumb_func
 1002              		.fpu fpv4-sp-d16
 1004              	RCC_I2SCLKConfig:
 1005              	.LFB137:
1277:./FWLIB/src/stm32f4xx_rcc.c **** 
1278:./FWLIB/src/stm32f4xx_rcc.c **** /**
1279:./FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the I2S clock source (I2SCLK).
1280:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the I2S APB clock.
1281:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_I2SCLKSource: specifies the I2S clock source.
1282:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1283:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2S2CLKSource_PLLI2S: PLLI2S clock used as I2S clock source
1284:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
1285:./FWLIB/src/stm32f4xx_rcc.c ****   *                                        used as I2S clock source
1286:./FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1287:./FWLIB/src/stm32f4xx_rcc.c ****   */
1288:./FWLIB/src/stm32f4xx_rcc.c **** void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
1289:./FWLIB/src/stm32f4xx_rcc.c **** {
 1006              		.loc 1 1289 0
 1007              		.cfi_startproc
 1008              		@ args = 0, pretend = 0, frame = 0
 1009              		@ frame_needed = 0, uses_anonymous_args = 0
 1010              		@ link register save eliminated.
 1011              	.LVL91:
1290:./FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1291:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));
1292:./FWLIB/src/stm32f4xx_rcc.c **** 
1293:./FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 1012              		.loc 1 1293 0
 1013 0000 014B     		ldr	r3, .L89
 1014 0002 1860     		str	r0, [r3]
1294:./FWLIB/src/stm32f4xx_rcc.c **** }
 1015              		.loc 1 1294 0
 1016 0004 7047     		bx	lr
 1017              	.L90:
 1018 0006 00BF     		.align	2
 1019              	.L89:
 1020 0008 5C014742 		.word	1111949660
ARM GAS  /tmp/ccqlGgFJ.s 			page 41


 1021              		.cfi_endproc
 1022              	.LFE137:
 1024              		.section	.text.RCC_SAIPLLI2SClkDivConfig,"ax",%progbits
 1025              		.align	1
 1026              		.global	RCC_SAIPLLI2SClkDivConfig
 1027              		.syntax unified
 1028              		.thumb
 1029              		.thumb_func
 1030              		.fpu fpv4-sp-d16
 1032              	RCC_SAIPLLI2SClkDivConfig:
 1033              	.LFB138:
1295:./FWLIB/src/stm32f4xx_rcc.c **** 
1296:./FWLIB/src/stm32f4xx_rcc.c **** /**
1297:./FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the SAI clock Divider coming from PLLI2S.
1298:./FWLIB/src/stm32f4xx_rcc.c ****   * 
1299:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
1300:./FWLIB/src/stm32f4xx_rcc.c ****   *   
1301:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the PLLI2S.
1302:./FWLIB/src/stm32f4xx_rcc.c ****   *              
1303:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_PLLI2SDivQ: specifies the PLLI2S division factor for SAI1 clock .
1304:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 1 and 32.
1305:./FWLIB/src/stm32f4xx_rcc.c ****   *          SAI1 clock frequency = f(PLLI2S_Q) / RCC_PLLI2SDivQ 
1306:./FWLIB/src/stm32f4xx_rcc.c ****   *              
1307:./FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1308:./FWLIB/src/stm32f4xx_rcc.c ****   */
1309:./FWLIB/src/stm32f4xx_rcc.c **** void RCC_SAIPLLI2SClkDivConfig(uint32_t RCC_PLLI2SDivQ)  
1310:./FWLIB/src/stm32f4xx_rcc.c **** {
 1034              		.loc 1 1310 0
 1035              		.cfi_startproc
 1036              		@ args = 0, pretend = 0, frame = 0
 1037              		@ frame_needed = 0, uses_anonymous_args = 0
 1038              		@ link register save eliminated.
 1039              	.LVL92:
1311:./FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1312:./FWLIB/src/stm32f4xx_rcc.c ****   
1313:./FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1314:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
1315:./FWLIB/src/stm32f4xx_rcc.c ****   
1316:./FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
 1040              		.loc 1 1316 0
 1041 0000 044A     		ldr	r2, .L92
 1042 0002 D2F88C30 		ldr	r3, [r2, #140]
 1043              	.LVL93:
1317:./FWLIB/src/stm32f4xx_rcc.c **** 
1318:./FWLIB/src/stm32f4xx_rcc.c ****   /* Clear PLLI2SDIVQ[4:0] bits */
1319:./FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
 1044              		.loc 1 1319 0
 1045 0006 23F01F03 		bic	r3, r3, #31
 1046              	.LVL94:
1320:./FWLIB/src/stm32f4xx_rcc.c **** 
1321:./FWLIB/src/stm32f4xx_rcc.c ****   /* Set PLLI2SDIVQ values */
1322:./FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= (RCC_PLLI2SDivQ - 1);
 1047              		.loc 1 1322 0
 1048 000a 0138     		subs	r0, r0, #1
 1049              	.LVL95:
 1050 000c 1843     		orrs	r0, r0, r3
 1051              	.LVL96:
ARM GAS  /tmp/ccqlGgFJ.s 			page 42


1323:./FWLIB/src/stm32f4xx_rcc.c **** 
1324:./FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
1325:./FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
 1052              		.loc 1 1325 0
 1053 000e C2F88C00 		str	r0, [r2, #140]
1326:./FWLIB/src/stm32f4xx_rcc.c **** }
 1054              		.loc 1 1326 0
 1055 0012 7047     		bx	lr
 1056              	.L93:
 1057              		.align	2
 1058              	.L92:
 1059 0014 00380240 		.word	1073887232
 1060              		.cfi_endproc
 1061              	.LFE138:
 1063              		.section	.text.RCC_SAIPLLSAIClkDivConfig,"ax",%progbits
 1064              		.align	1
 1065              		.global	RCC_SAIPLLSAIClkDivConfig
 1066              		.syntax unified
 1067              		.thumb
 1068              		.thumb_func
 1069              		.fpu fpv4-sp-d16
 1071              	RCC_SAIPLLSAIClkDivConfig:
 1072              	.LFB139:
1327:./FWLIB/src/stm32f4xx_rcc.c **** 
1328:./FWLIB/src/stm32f4xx_rcc.c **** /**
1329:./FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the SAI clock Divider coming from PLLSAI.
1330:./FWLIB/src/stm32f4xx_rcc.c ****   * 
1331:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
1332:./FWLIB/src/stm32f4xx_rcc.c ****   *        
1333:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the PLLSAI.
1334:./FWLIB/src/stm32f4xx_rcc.c ****   *   
1335:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_PLLSAIDivQ: specifies the PLLSAI division factor for SAI1 clock .
1336:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 1 and 32.
1337:./FWLIB/src/stm32f4xx_rcc.c ****   *          SAI1 clock frequency = f(PLLSAI_Q) / RCC_PLLSAIDivQ  
1338:./FWLIB/src/stm32f4xx_rcc.c ****   *              
1339:./FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1340:./FWLIB/src/stm32f4xx_rcc.c ****   */
1341:./FWLIB/src/stm32f4xx_rcc.c **** void RCC_SAIPLLSAIClkDivConfig(uint32_t RCC_PLLSAIDivQ)  
1342:./FWLIB/src/stm32f4xx_rcc.c **** {
 1073              		.loc 1 1342 0
 1074              		.cfi_startproc
 1075              		@ args = 0, pretend = 0, frame = 0
 1076              		@ frame_needed = 0, uses_anonymous_args = 0
 1077              		@ link register save eliminated.
 1078              	.LVL97:
1343:./FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1344:./FWLIB/src/stm32f4xx_rcc.c ****   
1345:./FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1346:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
1347:./FWLIB/src/stm32f4xx_rcc.c ****   
1348:./FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
 1079              		.loc 1 1348 0
 1080 0000 054A     		ldr	r2, .L95
 1081 0002 D2F88C30 		ldr	r3, [r2, #140]
 1082              	.LVL98:
1349:./FWLIB/src/stm32f4xx_rcc.c **** 
1350:./FWLIB/src/stm32f4xx_rcc.c ****   /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
ARM GAS  /tmp/ccqlGgFJ.s 			page 43


1351:./FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
 1083              		.loc 1 1351 0
 1084 0006 23F4F853 		bic	r3, r3, #7936
 1085              	.LVL99:
1352:./FWLIB/src/stm32f4xx_rcc.c **** 
1353:./FWLIB/src/stm32f4xx_rcc.c ****   /* Set PLLSAIDIVQ values */
1354:./FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
 1086              		.loc 1 1354 0
 1087 000a 0138     		subs	r0, r0, #1
 1088              	.LVL100:
 1089 000c 43EA0023 		orr	r3, r3, r0, lsl #8
 1090              	.LVL101:
1355:./FWLIB/src/stm32f4xx_rcc.c **** 
1356:./FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
1357:./FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
 1091              		.loc 1 1357 0
 1092 0010 C2F88C30 		str	r3, [r2, #140]
1358:./FWLIB/src/stm32f4xx_rcc.c **** }
 1093              		.loc 1 1358 0
 1094 0014 7047     		bx	lr
 1095              	.L96:
 1096 0016 00BF     		.align	2
 1097              	.L95:
 1098 0018 00380240 		.word	1073887232
 1099              		.cfi_endproc
 1100              	.LFE139:
 1102              		.section	.text.RCC_SAIBlockACLKConfig,"ax",%progbits
 1103              		.align	1
 1104              		.global	RCC_SAIBlockACLKConfig
 1105              		.syntax unified
 1106              		.thumb
 1107              		.thumb_func
 1108              		.fpu fpv4-sp-d16
 1110              	RCC_SAIBlockACLKConfig:
 1111              	.LFB140:
1359:./FWLIB/src/stm32f4xx_rcc.c **** 
1360:./FWLIB/src/stm32f4xx_rcc.c **** /**
1361:./FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures SAI1BlockA clock source selection.
1362:./FWLIB/src/stm32f4xx_rcc.c ****   * 
1363:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
1364:./FWLIB/src/stm32f4xx_rcc.c ****   *       
1365:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling PLLSAI, PLLI2S and  
1366:./FWLIB/src/stm32f4xx_rcc.c ****   *         the SAI clock.
1367:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_SAIBlockACLKSource: specifies the SAI Block A clock source.
1368:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1369:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIACLKSource_PLLI2S: PLLI2S_Q clock divided by PLLI2SDIVQ used 
1370:./FWLIB/src/stm32f4xx_rcc.c ****   *                                           as SAI1 Block A clock 
1371:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIACLKSource_PLLSAI: PLLISAI_Q clock divided by PLLSAIDIVQ used 
1372:./FWLIB/src/stm32f4xx_rcc.c ****   *                                           as SAI1 Block A clock 
1373:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIACLKSource_Ext: External clock mapped on the I2S_CKIN pin
1374:./FWLIB/src/stm32f4xx_rcc.c ****   *                                        used as SAI1 Block A clock
1375:./FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1376:./FWLIB/src/stm32f4xx_rcc.c ****   */
1377:./FWLIB/src/stm32f4xx_rcc.c **** void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
1378:./FWLIB/src/stm32f4xx_rcc.c **** {
 1112              		.loc 1 1378 0
 1113              		.cfi_startproc
ARM GAS  /tmp/ccqlGgFJ.s 			page 44


 1114              		@ args = 0, pretend = 0, frame = 0
 1115              		@ frame_needed = 0, uses_anonymous_args = 0
 1116              		@ link register save eliminated.
 1117              	.LVL102:
1379:./FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1380:./FWLIB/src/stm32f4xx_rcc.c ****   
1381:./FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1382:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
1383:./FWLIB/src/stm32f4xx_rcc.c ****   
1384:./FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
 1118              		.loc 1 1384 0
 1119 0000 044A     		ldr	r2, .L98
 1120 0002 D2F88C30 		ldr	r3, [r2, #140]
 1121              	.LVL103:
1385:./FWLIB/src/stm32f4xx_rcc.c **** 
1386:./FWLIB/src/stm32f4xx_rcc.c ****   /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
1387:./FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
 1122              		.loc 1 1387 0
 1123 0006 23F44013 		bic	r3, r3, #3145728
 1124              	.LVL104:
1388:./FWLIB/src/stm32f4xx_rcc.c **** 
1389:./FWLIB/src/stm32f4xx_rcc.c ****   /* Set SAI Block A source selection value */
1390:./FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SAIBlockACLKSource;
 1125              		.loc 1 1390 0
 1126 000a 1843     		orrs	r0, r0, r3
 1127              	.LVL105:
1391:./FWLIB/src/stm32f4xx_rcc.c **** 
1392:./FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
1393:./FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
 1128              		.loc 1 1393 0
 1129 000c C2F88C00 		str	r0, [r2, #140]
1394:./FWLIB/src/stm32f4xx_rcc.c **** }
 1130              		.loc 1 1394 0
 1131 0010 7047     		bx	lr
 1132              	.L99:
 1133 0012 00BF     		.align	2
 1134              	.L98:
 1135 0014 00380240 		.word	1073887232
 1136              		.cfi_endproc
 1137              	.LFE140:
 1139              		.section	.text.RCC_SAIBlockBCLKConfig,"ax",%progbits
 1140              		.align	1
 1141              		.global	RCC_SAIBlockBCLKConfig
 1142              		.syntax unified
 1143              		.thumb
 1144              		.thumb_func
 1145              		.fpu fpv4-sp-d16
 1147              	RCC_SAIBlockBCLKConfig:
 1148              	.LFB141:
1395:./FWLIB/src/stm32f4xx_rcc.c **** 
1396:./FWLIB/src/stm32f4xx_rcc.c **** /**
1397:./FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures SAI1BlockB clock source selection.
1398:./FWLIB/src/stm32f4xx_rcc.c ****   * 
1399:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
1400:./FWLIB/src/stm32f4xx_rcc.c ****   *       
1401:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling PLLSAI, PLLI2S and  
1402:./FWLIB/src/stm32f4xx_rcc.c ****   *         the SAI clock.
ARM GAS  /tmp/ccqlGgFJ.s 			page 45


1403:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_SAIBlockBCLKSource: specifies the SAI Block B clock source.
1404:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1405:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIBCLKSource_PLLI2S: PLLI2S_Q clock divided by PLLI2SDIVQ used 
1406:./FWLIB/src/stm32f4xx_rcc.c ****   *                                           as SAI1 Block B clock 
1407:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIBCLKSource_PLLSAI: PLLISAI_Q clock divided by PLLSAIDIVQ used 
1408:./FWLIB/src/stm32f4xx_rcc.c ****   *                                           as SAI1 Block B clock 
1409:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIBCLKSource_Ext: External clock mapped on the I2S_CKIN pin
1410:./FWLIB/src/stm32f4xx_rcc.c ****   *                                        used as SAI1 Block B clock
1411:./FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1412:./FWLIB/src/stm32f4xx_rcc.c ****   */
1413:./FWLIB/src/stm32f4xx_rcc.c **** void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
1414:./FWLIB/src/stm32f4xx_rcc.c **** {
 1149              		.loc 1 1414 0
 1150              		.cfi_startproc
 1151              		@ args = 0, pretend = 0, frame = 0
 1152              		@ frame_needed = 0, uses_anonymous_args = 0
 1153              		@ link register save eliminated.
 1154              	.LVL106:
1415:./FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1416:./FWLIB/src/stm32f4xx_rcc.c ****   
1417:./FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1418:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
1419:./FWLIB/src/stm32f4xx_rcc.c ****   
1420:./FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
 1155              		.loc 1 1420 0
 1156 0000 044A     		ldr	r2, .L101
 1157 0002 D2F88C30 		ldr	r3, [r2, #140]
 1158              	.LVL107:
1421:./FWLIB/src/stm32f4xx_rcc.c **** 
1422:./FWLIB/src/stm32f4xx_rcc.c ****   /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
1423:./FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
 1159              		.loc 1 1423 0
 1160 0006 23F44003 		bic	r3, r3, #12582912
 1161              	.LVL108:
1424:./FWLIB/src/stm32f4xx_rcc.c **** 
1425:./FWLIB/src/stm32f4xx_rcc.c ****   /* Set SAI Block B source selection value */
1426:./FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SAIBlockBCLKSource;
 1162              		.loc 1 1426 0
 1163 000a 1843     		orrs	r0, r0, r3
 1164              	.LVL109:
1427:./FWLIB/src/stm32f4xx_rcc.c **** 
1428:./FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
1429:./FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
 1165              		.loc 1 1429 0
 1166 000c C2F88C00 		str	r0, [r2, #140]
1430:./FWLIB/src/stm32f4xx_rcc.c **** }
 1167              		.loc 1 1430 0
 1168 0010 7047     		bx	lr
 1169              	.L102:
 1170 0012 00BF     		.align	2
 1171              	.L101:
 1172 0014 00380240 		.word	1073887232
 1173              		.cfi_endproc
 1174              	.LFE141:
 1176              		.section	.text.RCC_LTDCCLKDivConfig,"ax",%progbits
 1177              		.align	1
 1178              		.global	RCC_LTDCCLKDivConfig
ARM GAS  /tmp/ccqlGgFJ.s 			page 46


 1179              		.syntax unified
 1180              		.thumb
 1181              		.thumb_func
 1182              		.fpu fpv4-sp-d16
 1184              	RCC_LTDCCLKDivConfig:
 1185              	.LFB142:
1431:./FWLIB/src/stm32f4xx_rcc.c **** 
1432:./FWLIB/src/stm32f4xx_rcc.c **** 
1433:./FWLIB/src/stm32f4xx_rcc.c **** /**
1434:./FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the LTDC clock Divider coming from PLLSAI.
1435:./FWLIB/src/stm32f4xx_rcc.c ****   * 
1436:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   The LTDC peripheral is only available with STM32F429xx/439xx Devices.
1437:./FWLIB/src/stm32f4xx_rcc.c ****   *      
1438:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the PLLSAI.
1439:./FWLIB/src/stm32f4xx_rcc.c ****   *   
1440:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_PLLSAIDivR: specifies the PLLSAI division factor for LTDC clock .
1441:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 16.
1442:./FWLIB/src/stm32f4xx_rcc.c ****   *          LTDC clock frequency = f(PLLSAI_R) / RCC_PLLSAIDivR  
1443:./FWLIB/src/stm32f4xx_rcc.c ****   *            
1444:./FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1445:./FWLIB/src/stm32f4xx_rcc.c ****   */
1446:./FWLIB/src/stm32f4xx_rcc.c **** void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
1447:./FWLIB/src/stm32f4xx_rcc.c **** {
 1186              		.loc 1 1447 0
 1187              		.cfi_startproc
 1188              		@ args = 0, pretend = 0, frame = 0
 1189              		@ frame_needed = 0, uses_anonymous_args = 0
 1190              		@ link register save eliminated.
 1191              	.LVL110:
1448:./FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1449:./FWLIB/src/stm32f4xx_rcc.c ****   
1450:./FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1451:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
1452:./FWLIB/src/stm32f4xx_rcc.c ****   
1453:./FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
 1192              		.loc 1 1453 0
 1193 0000 044A     		ldr	r2, .L104
 1194 0002 D2F88C30 		ldr	r3, [r2, #140]
 1195              	.LVL111:
1454:./FWLIB/src/stm32f4xx_rcc.c **** 
1455:./FWLIB/src/stm32f4xx_rcc.c ****   /* Clear PLLSAIDIVR[2:0] bits */
1456:./FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
 1196              		.loc 1 1456 0
 1197 0006 23F44033 		bic	r3, r3, #196608
 1198              	.LVL112:
1457:./FWLIB/src/stm32f4xx_rcc.c **** 
1458:./FWLIB/src/stm32f4xx_rcc.c ****   /* Set PLLSAIDIVR values */
1459:./FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_PLLSAIDivR;
 1199              		.loc 1 1459 0
 1200 000a 1843     		orrs	r0, r0, r3
 1201              	.LVL113:
1460:./FWLIB/src/stm32f4xx_rcc.c **** 
1461:./FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
1462:./FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
 1202              		.loc 1 1462 0
 1203 000c C2F88C00 		str	r0, [r2, #140]
1463:./FWLIB/src/stm32f4xx_rcc.c **** }
ARM GAS  /tmp/ccqlGgFJ.s 			page 47


 1204              		.loc 1 1463 0
 1205 0010 7047     		bx	lr
 1206              	.L105:
 1207 0012 00BF     		.align	2
 1208              	.L104:
 1209 0014 00380240 		.word	1073887232
 1210              		.cfi_endproc
 1211              	.LFE142:
 1213              		.section	.text.RCC_TIMCLKPresConfig,"ax",%progbits
 1214              		.align	1
 1215              		.global	RCC_TIMCLKPresConfig
 1216              		.syntax unified
 1217              		.thumb
 1218              		.thumb_func
 1219              		.fpu fpv4-sp-d16
 1221              	RCC_TIMCLKPresConfig:
 1222              	.LFB143:
1464:./FWLIB/src/stm32f4xx_rcc.c **** 
1465:./FWLIB/src/stm32f4xx_rcc.c **** /**
1466:./FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the Timers clocks prescalers selection.
1467:./FWLIB/src/stm32f4xx_rcc.c ****   * 
1468:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx and STM32F401xx/411xE devices. 
1469:./FWLIB/src/stm32f4xx_rcc.c ****   *   
1470:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_TIMCLKPrescaler : specifies the Timers clocks prescalers selection
1471:./FWLIB/src/stm32f4xx_rcc.c ****   *         This parameter can be one of the following values:
1472:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_TIMPrescDesactivated: The Timers kernels clocks prescaler is 
1473:./FWLIB/src/stm32f4xx_rcc.c ****   *                 equal to HPRE if PPREx is corresponding to division by 1 or 2, 
1474:./FWLIB/src/stm32f4xx_rcc.c ****   *                 else it is equal to [(HPRE * PPREx) / 2] if PPREx is corresponding to 
1475:./FWLIB/src/stm32f4xx_rcc.c ****   *                 division by 4 or more.
1476:./FWLIB/src/stm32f4xx_rcc.c ****   *                   
1477:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_TIMPrescActivated: The Timers kernels clocks prescaler is 
1478:./FWLIB/src/stm32f4xx_rcc.c ****   *                 equal to HPRE if PPREx is corresponding to division by 1, 2 or 4, 
1479:./FWLIB/src/stm32f4xx_rcc.c ****   *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
1480:./FWLIB/src/stm32f4xx_rcc.c ****   *                 to division by 8 or more.
1481:./FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1482:./FWLIB/src/stm32f4xx_rcc.c ****   */
1483:./FWLIB/src/stm32f4xx_rcc.c **** void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
1484:./FWLIB/src/stm32f4xx_rcc.c **** {
 1223              		.loc 1 1484 0
 1224              		.cfi_startproc
 1225              		@ args = 0, pretend = 0, frame = 0
 1226              		@ frame_needed = 0, uses_anonymous_args = 0
 1227              		@ link register save eliminated.
 1228              	.LVL114:
1485:./FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1486:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));
1487:./FWLIB/src/stm32f4xx_rcc.c **** 
1488:./FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
 1229              		.loc 1 1488 0
 1230 0000 014B     		ldr	r3, .L107
 1231 0002 1860     		str	r0, [r3]
1489:./FWLIB/src/stm32f4xx_rcc.c ****   
1490:./FWLIB/src/stm32f4xx_rcc.c **** }
 1232              		.loc 1 1490 0
 1233 0004 7047     		bx	lr
 1234              	.L108:
 1235 0006 00BF     		.align	2
ARM GAS  /tmp/ccqlGgFJ.s 			page 48


 1236              	.L107:
 1237 0008 E0114742 		.word	1111953888
 1238              		.cfi_endproc
 1239              	.LFE143:
 1241              		.section	.text.RCC_AHB1PeriphClockCmd,"ax",%progbits
 1242              		.align	1
 1243              		.global	RCC_AHB1PeriphClockCmd
 1244              		.syntax unified
 1245              		.thumb
 1246              		.thumb_func
 1247              		.fpu fpv4-sp-d16
 1249              	RCC_AHB1PeriphClockCmd:
 1250              	.LFB144:
1491:./FWLIB/src/stm32f4xx_rcc.c **** 
1492:./FWLIB/src/stm32f4xx_rcc.c **** /**
1493:./FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB1 peripheral clock.
1494:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1495:./FWLIB/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1496:./FWLIB/src/stm32f4xx_rcc.c ****   *         using it.   
1497:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB1 peripheral to gates its clock.
1498:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1499:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:       GPIOA clock
1500:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:       GPIOB clock 
1501:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:       GPIOC clock
1502:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:       GPIOD clock
1503:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:       GPIOE clock
1504:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:       GPIOF clock
1505:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1506:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1507:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:       GPIOI clock
1508:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOJ:       GPIOJ clock (STM32F42xxx/43xxx devices) 
1509:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOK:       GPIOK clock (STM32F42xxx/43xxx devices)  
1510:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:         CRC clock
1511:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_BKPSRAM:     BKPSRAM interface clock
1512:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CCMDATARAMEN CCM data RAM interface clock
1513:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:        DMA1 clock
1514:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:        DMA2 clock
1515:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2D:       DMA2D clock (STM32F429xx/439xx devices)  
1516:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC:     Ethernet MAC clock
1517:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Tx:  Ethernet Transmission clock
1518:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Rx:  Ethernet Reception clock
1519:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_PTP: Ethernet PTP clock
1520:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:      USB OTG HS clock
1521:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS_ULPI: USB OTG HS ULPI clock
1522:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1523:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1524:./FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1525:./FWLIB/src/stm32f4xx_rcc.c ****   */
1526:./FWLIB/src/stm32f4xx_rcc.c **** void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
1527:./FWLIB/src/stm32f4xx_rcc.c **** {
 1251              		.loc 1 1527 0
 1252              		.cfi_startproc
 1253              		@ args = 0, pretend = 0, frame = 0
 1254              		@ frame_needed = 0, uses_anonymous_args = 0
 1255              		@ link register save eliminated.
 1256              	.LVL115:
1528:./FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
ARM GAS  /tmp/ccqlGgFJ.s 			page 49


1529:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));
1530:./FWLIB/src/stm32f4xx_rcc.c **** 
1531:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1532:./FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1257              		.loc 1 1532 0
 1258 0000 29B9     		cbnz	r1, .L112
1533:./FWLIB/src/stm32f4xx_rcc.c ****   {
1534:./FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB1ENR |= RCC_AHB1Periph;
1535:./FWLIB/src/stm32f4xx_rcc.c ****   }
1536:./FWLIB/src/stm32f4xx_rcc.c ****   else
1537:./FWLIB/src/stm32f4xx_rcc.c ****   {
1538:./FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB1ENR &= ~RCC_AHB1Periph;
 1259              		.loc 1 1538 0
 1260 0002 054A     		ldr	r2, .L113
 1261 0004 136B     		ldr	r3, [r2, #48]
 1262 0006 23EA0000 		bic	r0, r3, r0
 1263              	.LVL116:
 1264 000a 1063     		str	r0, [r2, #48]
1539:./FWLIB/src/stm32f4xx_rcc.c ****   }
1540:./FWLIB/src/stm32f4xx_rcc.c **** }
 1265              		.loc 1 1540 0
 1266 000c 7047     		bx	lr
 1267              	.LVL117:
 1268              	.L112:
1534:./FWLIB/src/stm32f4xx_rcc.c ****   }
 1269              		.loc 1 1534 0
 1270 000e 024A     		ldr	r2, .L113
 1271 0010 136B     		ldr	r3, [r2, #48]
 1272 0012 1843     		orrs	r0, r0, r3
 1273              	.LVL118:
 1274 0014 1063     		str	r0, [r2, #48]
 1275 0016 7047     		bx	lr
 1276              	.L114:
 1277              		.align	2
 1278              	.L113:
 1279 0018 00380240 		.word	1073887232
 1280              		.cfi_endproc
 1281              	.LFE144:
 1283              		.section	.text.RCC_AHB2PeriphClockCmd,"ax",%progbits
 1284              		.align	1
 1285              		.global	RCC_AHB2PeriphClockCmd
 1286              		.syntax unified
 1287              		.thumb
 1288              		.thumb_func
 1289              		.fpu fpv4-sp-d16
 1291              	RCC_AHB2PeriphClockCmd:
 1292              	.LFB145:
1541:./FWLIB/src/stm32f4xx_rcc.c **** 
1542:./FWLIB/src/stm32f4xx_rcc.c **** /**
1543:./FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB2 peripheral clock.
1544:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1545:./FWLIB/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1546:./FWLIB/src/stm32f4xx_rcc.c ****   *         using it. 
1547:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB2 peripheral to gates its clock.
1548:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1549:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
1550:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
ARM GAS  /tmp/ccqlGgFJ.s 			page 50


1551:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
1552:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
1553:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock
1554:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1555:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1556:./FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1557:./FWLIB/src/stm32f4xx_rcc.c ****   */
1558:./FWLIB/src/stm32f4xx_rcc.c **** void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
1559:./FWLIB/src/stm32f4xx_rcc.c **** {
 1293              		.loc 1 1559 0
 1294              		.cfi_startproc
 1295              		@ args = 0, pretend = 0, frame = 0
 1296              		@ frame_needed = 0, uses_anonymous_args = 0
 1297              		@ link register save eliminated.
 1298              	.LVL119:
1560:./FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1561:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
1562:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1563:./FWLIB/src/stm32f4xx_rcc.c **** 
1564:./FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1299              		.loc 1 1564 0
 1300 0000 29B9     		cbnz	r1, .L118
1565:./FWLIB/src/stm32f4xx_rcc.c ****   {
1566:./FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB2ENR |= RCC_AHB2Periph;
1567:./FWLIB/src/stm32f4xx_rcc.c ****   }
1568:./FWLIB/src/stm32f4xx_rcc.c ****   else
1569:./FWLIB/src/stm32f4xx_rcc.c ****   {
1570:./FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB2ENR &= ~RCC_AHB2Periph;
 1301              		.loc 1 1570 0
 1302 0002 054A     		ldr	r2, .L119
 1303 0004 536B     		ldr	r3, [r2, #52]
 1304 0006 23EA0000 		bic	r0, r3, r0
 1305              	.LVL120:
 1306 000a 5063     		str	r0, [r2, #52]
1571:./FWLIB/src/stm32f4xx_rcc.c ****   }
1572:./FWLIB/src/stm32f4xx_rcc.c **** }
 1307              		.loc 1 1572 0
 1308 000c 7047     		bx	lr
 1309              	.LVL121:
 1310              	.L118:
1566:./FWLIB/src/stm32f4xx_rcc.c ****   }
 1311              		.loc 1 1566 0
 1312 000e 024A     		ldr	r2, .L119
 1313 0010 536B     		ldr	r3, [r2, #52]
 1314 0012 1843     		orrs	r0, r0, r3
 1315              	.LVL122:
 1316 0014 5063     		str	r0, [r2, #52]
 1317 0016 7047     		bx	lr
 1318              	.L120:
 1319              		.align	2
 1320              	.L119:
 1321 0018 00380240 		.word	1073887232
 1322              		.cfi_endproc
 1323              	.LFE145:
 1325              		.section	.text.RCC_AHB3PeriphClockCmd,"ax",%progbits
 1326              		.align	1
 1327              		.global	RCC_AHB3PeriphClockCmd
ARM GAS  /tmp/ccqlGgFJ.s 			page 51


 1328              		.syntax unified
 1329              		.thumb
 1330              		.thumb_func
 1331              		.fpu fpv4-sp-d16
 1333              	RCC_AHB3PeriphClockCmd:
 1334              	.LFB146:
1573:./FWLIB/src/stm32f4xx_rcc.c **** 
1574:./FWLIB/src/stm32f4xx_rcc.c **** /**
1575:./FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB3 peripheral clock.
1576:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1577:./FWLIB/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1578:./FWLIB/src/stm32f4xx_rcc.c ****   *         using it. 
1579:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB3 peripheral to gates its clock.
1580:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be: RCC_AHB3Periph_FSMC
1581:./FWLIB/src/stm32f4xx_rcc.c ****   *                                  or RCC_AHB3Periph_FMC (STM32F42xxx/43xxx devices)  
1582:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1583:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1584:./FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1585:./FWLIB/src/stm32f4xx_rcc.c ****   */
1586:./FWLIB/src/stm32f4xx_rcc.c **** void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
1587:./FWLIB/src/stm32f4xx_rcc.c **** {
 1335              		.loc 1 1587 0
 1336              		.cfi_startproc
 1337              		@ args = 0, pretend = 0, frame = 0
 1338              		@ frame_needed = 0, uses_anonymous_args = 0
 1339              		@ link register save eliminated.
 1340              	.LVL123:
1588:./FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1589:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
1590:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1591:./FWLIB/src/stm32f4xx_rcc.c **** 
1592:./FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1341              		.loc 1 1592 0
 1342 0000 29B9     		cbnz	r1, .L124
1593:./FWLIB/src/stm32f4xx_rcc.c ****   {
1594:./FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB3ENR |= RCC_AHB3Periph;
1595:./FWLIB/src/stm32f4xx_rcc.c ****   }
1596:./FWLIB/src/stm32f4xx_rcc.c ****   else
1597:./FWLIB/src/stm32f4xx_rcc.c ****   {
1598:./FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB3ENR &= ~RCC_AHB3Periph;
 1343              		.loc 1 1598 0
 1344 0002 054A     		ldr	r2, .L125
 1345 0004 936B     		ldr	r3, [r2, #56]
 1346 0006 23EA0000 		bic	r0, r3, r0
 1347              	.LVL124:
 1348 000a 9063     		str	r0, [r2, #56]
1599:./FWLIB/src/stm32f4xx_rcc.c ****   }
1600:./FWLIB/src/stm32f4xx_rcc.c **** }
 1349              		.loc 1 1600 0
 1350 000c 7047     		bx	lr
 1351              	.LVL125:
 1352              	.L124:
1594:./FWLIB/src/stm32f4xx_rcc.c ****   }
 1353              		.loc 1 1594 0
 1354 000e 024A     		ldr	r2, .L125
 1355 0010 936B     		ldr	r3, [r2, #56]
 1356 0012 1843     		orrs	r0, r0, r3
ARM GAS  /tmp/ccqlGgFJ.s 			page 52


 1357              	.LVL126:
 1358 0014 9063     		str	r0, [r2, #56]
 1359 0016 7047     		bx	lr
 1360              	.L126:
 1361              		.align	2
 1362              	.L125:
 1363 0018 00380240 		.word	1073887232
 1364              		.cfi_endproc
 1365              	.LFE146:
 1367              		.section	.text.RCC_APB1PeriphClockCmd,"ax",%progbits
 1368              		.align	1
 1369              		.global	RCC_APB1PeriphClockCmd
 1370              		.syntax unified
 1371              		.thumb
 1372              		.thumb_func
 1373              		.fpu fpv4-sp-d16
 1375              	RCC_APB1PeriphClockCmd:
 1376              	.LFB147:
1601:./FWLIB/src/stm32f4xx_rcc.c **** 
1602:./FWLIB/src/stm32f4xx_rcc.c **** /**
1603:./FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Low Speed APB (APB1) peripheral clock.
1604:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1605:./FWLIB/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1606:./FWLIB/src/stm32f4xx_rcc.c ****   *         using it. 
1607:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
1608:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1609:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
1610:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
1611:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
1612:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
1613:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
1614:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
1615:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
1616:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
1617:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
1618:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
1619:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
1620:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
1621:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
1622:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
1623:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
1624:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
1625:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
1626:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
1627:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
1628:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
1629:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
1630:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
1631:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
1632:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART7:  UART7 clock
1633:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART8:  UART8 clock
1634:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1635:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1636:./FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1637:./FWLIB/src/stm32f4xx_rcc.c ****   */
1638:./FWLIB/src/stm32f4xx_rcc.c **** void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1639:./FWLIB/src/stm32f4xx_rcc.c **** {
ARM GAS  /tmp/ccqlGgFJ.s 			page 53


 1377              		.loc 1 1639 0
 1378              		.cfi_startproc
 1379              		@ args = 0, pretend = 0, frame = 0
 1380              		@ frame_needed = 0, uses_anonymous_args = 0
 1381              		@ link register save eliminated.
 1382              	.LVL127:
1640:./FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1641:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
1642:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1643:./FWLIB/src/stm32f4xx_rcc.c **** 
1644:./FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1383              		.loc 1 1644 0
 1384 0000 29B9     		cbnz	r1, .L130
1645:./FWLIB/src/stm32f4xx_rcc.c ****   {
1646:./FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB1ENR |= RCC_APB1Periph;
1647:./FWLIB/src/stm32f4xx_rcc.c ****   }
1648:./FWLIB/src/stm32f4xx_rcc.c ****   else
1649:./FWLIB/src/stm32f4xx_rcc.c ****   {
1650:./FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB1ENR &= ~RCC_APB1Periph;
 1385              		.loc 1 1650 0
 1386 0002 054A     		ldr	r2, .L131
 1387 0004 136C     		ldr	r3, [r2, #64]
 1388 0006 23EA0000 		bic	r0, r3, r0
 1389              	.LVL128:
 1390 000a 1064     		str	r0, [r2, #64]
1651:./FWLIB/src/stm32f4xx_rcc.c ****   }
1652:./FWLIB/src/stm32f4xx_rcc.c **** }
 1391              		.loc 1 1652 0
 1392 000c 7047     		bx	lr
 1393              	.LVL129:
 1394              	.L130:
1646:./FWLIB/src/stm32f4xx_rcc.c ****   }
 1395              		.loc 1 1646 0
 1396 000e 024A     		ldr	r2, .L131
 1397 0010 136C     		ldr	r3, [r2, #64]
 1398 0012 1843     		orrs	r0, r0, r3
 1399              	.LVL130:
 1400 0014 1064     		str	r0, [r2, #64]
 1401 0016 7047     		bx	lr
 1402              	.L132:
 1403              		.align	2
 1404              	.L131:
 1405 0018 00380240 		.word	1073887232
 1406              		.cfi_endproc
 1407              	.LFE147:
 1409              		.section	.text.RCC_APB2PeriphClockCmd,"ax",%progbits
 1410              		.align	1
 1411              		.global	RCC_APB2PeriphClockCmd
 1412              		.syntax unified
 1413              		.thumb
 1414              		.thumb_func
 1415              		.fpu fpv4-sp-d16
 1417              	RCC_APB2PeriphClockCmd:
 1418              	.LFB148:
1653:./FWLIB/src/stm32f4xx_rcc.c **** 
1654:./FWLIB/src/stm32f4xx_rcc.c **** /**
1655:./FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the High Speed APB (APB2) peripheral clock.
ARM GAS  /tmp/ccqlGgFJ.s 			page 54


1656:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1657:./FWLIB/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1658:./FWLIB/src/stm32f4xx_rcc.c ****   *         using it.
1659:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
1660:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1661:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
1662:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
1663:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
1664:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
1665:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
1666:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
1667:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
1668:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
1669:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
1670:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI4:   SPI4 clock
1671:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
1672:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
1673:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
1674:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
1675:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI5:   SPI5 clock
1676:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI6:   SPI6 clock
1677:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SAI1:   SAI1 clock (STM32F42xxx/43xxx devices) 
1678:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_LTDC:   LTDC clock (STM32F429xx/439xx devices) 
1679:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1680:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1681:./FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1682:./FWLIB/src/stm32f4xx_rcc.c ****   */
1683:./FWLIB/src/stm32f4xx_rcc.c **** void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1684:./FWLIB/src/stm32f4xx_rcc.c **** {
 1419              		.loc 1 1684 0
 1420              		.cfi_startproc
 1421              		@ args = 0, pretend = 0, frame = 0
 1422              		@ frame_needed = 0, uses_anonymous_args = 0
 1423              		@ link register save eliminated.
 1424              	.LVL131:
1685:./FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1686:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
1687:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1688:./FWLIB/src/stm32f4xx_rcc.c **** 
1689:./FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1425              		.loc 1 1689 0
 1426 0000 29B9     		cbnz	r1, .L136
1690:./FWLIB/src/stm32f4xx_rcc.c ****   {
1691:./FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB2ENR |= RCC_APB2Periph;
1692:./FWLIB/src/stm32f4xx_rcc.c ****   }
1693:./FWLIB/src/stm32f4xx_rcc.c ****   else
1694:./FWLIB/src/stm32f4xx_rcc.c ****   {
1695:./FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB2ENR &= ~RCC_APB2Periph;
 1427              		.loc 1 1695 0
 1428 0002 054A     		ldr	r2, .L137
 1429 0004 536C     		ldr	r3, [r2, #68]
 1430 0006 23EA0000 		bic	r0, r3, r0
 1431              	.LVL132:
 1432 000a 5064     		str	r0, [r2, #68]
1696:./FWLIB/src/stm32f4xx_rcc.c ****   }
1697:./FWLIB/src/stm32f4xx_rcc.c **** }
 1433              		.loc 1 1697 0
ARM GAS  /tmp/ccqlGgFJ.s 			page 55


 1434 000c 7047     		bx	lr
 1435              	.LVL133:
 1436              	.L136:
1691:./FWLIB/src/stm32f4xx_rcc.c ****   }
 1437              		.loc 1 1691 0
 1438 000e 024A     		ldr	r2, .L137
 1439 0010 536C     		ldr	r3, [r2, #68]
 1440 0012 1843     		orrs	r0, r0, r3
 1441              	.LVL134:
 1442 0014 5064     		str	r0, [r2, #68]
 1443 0016 7047     		bx	lr
 1444              	.L138:
 1445              		.align	2
 1446              	.L137:
 1447 0018 00380240 		.word	1073887232
 1448              		.cfi_endproc
 1449              	.LFE148:
 1451              		.section	.text.RCC_AHB1PeriphResetCmd,"ax",%progbits
 1452              		.align	1
 1453              		.global	RCC_AHB1PeriphResetCmd
 1454              		.syntax unified
 1455              		.thumb
 1456              		.thumb_func
 1457              		.fpu fpv4-sp-d16
 1459              	RCC_AHB1PeriphResetCmd:
 1460              	.LFB149:
1698:./FWLIB/src/stm32f4xx_rcc.c **** 
1699:./FWLIB/src/stm32f4xx_rcc.c **** /**
1700:./FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB1 peripheral reset.
1701:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_AHB1Periph: specifies the AHB1 peripheral to reset.
1702:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1703:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:   GPIOA clock
1704:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:   GPIOB clock 
1705:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:   GPIOC clock
1706:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:   GPIOD clock
1707:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:   GPIOE clock
1708:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:   GPIOF clock
1709:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:   GPIOG clock
1710:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:   GPIOG clock
1711:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:   GPIOI clock
1712:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOJ:   GPIOJ clock (STM32F42xxx/43xxx devices) 
1713:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOK:   GPIOK clock (STM32F42xxx/43xxxdevices)   
1714:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:     CRC clock
1715:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:    DMA1 clock
1716:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:    DMA2 clock
1717:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2D:   DMA2D clock (STM32F429xx/439xx devices)   
1718:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC: Ethernet MAC clock
1719:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:  USB OTG HS clock
1720:./FWLIB/src/stm32f4xx_rcc.c ****   *                  
1721:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1722:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1723:./FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1724:./FWLIB/src/stm32f4xx_rcc.c ****   */
1725:./FWLIB/src/stm32f4xx_rcc.c **** void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
1726:./FWLIB/src/stm32f4xx_rcc.c **** {
 1461              		.loc 1 1726 0
 1462              		.cfi_startproc
ARM GAS  /tmp/ccqlGgFJ.s 			page 56


 1463              		@ args = 0, pretend = 0, frame = 0
 1464              		@ frame_needed = 0, uses_anonymous_args = 0
 1465              		@ link register save eliminated.
 1466              	.LVL135:
1727:./FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1728:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
1729:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1730:./FWLIB/src/stm32f4xx_rcc.c **** 
1731:./FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1467              		.loc 1 1731 0
 1468 0000 29B9     		cbnz	r1, .L142
1732:./FWLIB/src/stm32f4xx_rcc.c ****   {
1733:./FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB1RSTR |= RCC_AHB1Periph;
1734:./FWLIB/src/stm32f4xx_rcc.c ****   }
1735:./FWLIB/src/stm32f4xx_rcc.c ****   else
1736:./FWLIB/src/stm32f4xx_rcc.c ****   {
1737:./FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 1469              		.loc 1 1737 0
 1470 0002 054A     		ldr	r2, .L143
 1471 0004 1369     		ldr	r3, [r2, #16]
 1472 0006 23EA0000 		bic	r0, r3, r0
 1473              	.LVL136:
 1474 000a 1061     		str	r0, [r2, #16]
1738:./FWLIB/src/stm32f4xx_rcc.c ****   }
1739:./FWLIB/src/stm32f4xx_rcc.c **** }
 1475              		.loc 1 1739 0
 1476 000c 7047     		bx	lr
 1477              	.LVL137:
 1478              	.L142:
1733:./FWLIB/src/stm32f4xx_rcc.c ****   }
 1479              		.loc 1 1733 0
 1480 000e 024A     		ldr	r2, .L143
 1481 0010 1369     		ldr	r3, [r2, #16]
 1482 0012 1843     		orrs	r0, r0, r3
 1483              	.LVL138:
 1484 0014 1061     		str	r0, [r2, #16]
 1485 0016 7047     		bx	lr
 1486              	.L144:
 1487              		.align	2
 1488              	.L143:
 1489 0018 00380240 		.word	1073887232
 1490              		.cfi_endproc
 1491              	.LFE149:
 1493              		.section	.text.RCC_AHB2PeriphResetCmd,"ax",%progbits
 1494              		.align	1
 1495              		.global	RCC_AHB2PeriphResetCmd
 1496              		.syntax unified
 1497              		.thumb
 1498              		.thumb_func
 1499              		.fpu fpv4-sp-d16
 1501              	RCC_AHB2PeriphResetCmd:
 1502              	.LFB150:
1740:./FWLIB/src/stm32f4xx_rcc.c **** 
1741:./FWLIB/src/stm32f4xx_rcc.c **** /**
1742:./FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB2 peripheral reset.
1743:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_AHB2Periph: specifies the AHB2 peripheral to reset.
1744:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
ARM GAS  /tmp/ccqlGgFJ.s 			page 57


1745:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
1746:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
1747:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
1748:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
1749:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock
1750:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1751:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1752:./FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1753:./FWLIB/src/stm32f4xx_rcc.c ****   */
1754:./FWLIB/src/stm32f4xx_rcc.c **** void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
1755:./FWLIB/src/stm32f4xx_rcc.c **** {
 1503              		.loc 1 1755 0
 1504              		.cfi_startproc
 1505              		@ args = 0, pretend = 0, frame = 0
 1506              		@ frame_needed = 0, uses_anonymous_args = 0
 1507              		@ link register save eliminated.
 1508              	.LVL139:
1756:./FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1757:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
1758:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1759:./FWLIB/src/stm32f4xx_rcc.c **** 
1760:./FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1509              		.loc 1 1760 0
 1510 0000 29B9     		cbnz	r1, .L148
1761:./FWLIB/src/stm32f4xx_rcc.c ****   {
1762:./FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB2RSTR |= RCC_AHB2Periph;
1763:./FWLIB/src/stm32f4xx_rcc.c ****   }
1764:./FWLIB/src/stm32f4xx_rcc.c ****   else
1765:./FWLIB/src/stm32f4xx_rcc.c ****   {
1766:./FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 1511              		.loc 1 1766 0
 1512 0002 054A     		ldr	r2, .L149
 1513 0004 5369     		ldr	r3, [r2, #20]
 1514 0006 23EA0000 		bic	r0, r3, r0
 1515              	.LVL140:
 1516 000a 5061     		str	r0, [r2, #20]
1767:./FWLIB/src/stm32f4xx_rcc.c ****   }
1768:./FWLIB/src/stm32f4xx_rcc.c **** }
 1517              		.loc 1 1768 0
 1518 000c 7047     		bx	lr
 1519              	.LVL141:
 1520              	.L148:
1762:./FWLIB/src/stm32f4xx_rcc.c ****   }
 1521              		.loc 1 1762 0
 1522 000e 024A     		ldr	r2, .L149
 1523 0010 5369     		ldr	r3, [r2, #20]
 1524 0012 1843     		orrs	r0, r0, r3
 1525              	.LVL142:
 1526 0014 5061     		str	r0, [r2, #20]
 1527 0016 7047     		bx	lr
 1528              	.L150:
 1529              		.align	2
 1530              	.L149:
 1531 0018 00380240 		.word	1073887232
 1532              		.cfi_endproc
 1533              	.LFE150:
 1535              		.section	.text.RCC_AHB3PeriphResetCmd,"ax",%progbits
ARM GAS  /tmp/ccqlGgFJ.s 			page 58


 1536              		.align	1
 1537              		.global	RCC_AHB3PeriphResetCmd
 1538              		.syntax unified
 1539              		.thumb
 1540              		.thumb_func
 1541              		.fpu fpv4-sp-d16
 1543              	RCC_AHB3PeriphResetCmd:
 1544              	.LFB151:
1769:./FWLIB/src/stm32f4xx_rcc.c **** 
1770:./FWLIB/src/stm32f4xx_rcc.c **** /**
1771:./FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB3 peripheral reset.
1772:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_AHB3Periph: specifies the AHB3 peripheral to reset.
1773:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be: RCC_AHB3Periph_FSMC
1774:./FWLIB/src/stm32f4xx_rcc.c ****   *                                  or RCC_AHB3Periph_FMC (STM32F42xxx/43xxx devices)  
1775:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1776:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1777:./FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1778:./FWLIB/src/stm32f4xx_rcc.c ****   */
1779:./FWLIB/src/stm32f4xx_rcc.c **** void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
1780:./FWLIB/src/stm32f4xx_rcc.c **** {
 1545              		.loc 1 1780 0
 1546              		.cfi_startproc
 1547              		@ args = 0, pretend = 0, frame = 0
 1548              		@ frame_needed = 0, uses_anonymous_args = 0
 1549              		@ link register save eliminated.
 1550              	.LVL143:
1781:./FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1782:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
1783:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1784:./FWLIB/src/stm32f4xx_rcc.c **** 
1785:./FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1551              		.loc 1 1785 0
 1552 0000 29B9     		cbnz	r1, .L154
1786:./FWLIB/src/stm32f4xx_rcc.c ****   {
1787:./FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB3RSTR |= RCC_AHB3Periph;
1788:./FWLIB/src/stm32f4xx_rcc.c ****   }
1789:./FWLIB/src/stm32f4xx_rcc.c ****   else
1790:./FWLIB/src/stm32f4xx_rcc.c ****   {
1791:./FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 1553              		.loc 1 1791 0
 1554 0002 054A     		ldr	r2, .L155
 1555 0004 9369     		ldr	r3, [r2, #24]
 1556 0006 23EA0000 		bic	r0, r3, r0
 1557              	.LVL144:
 1558 000a 9061     		str	r0, [r2, #24]
1792:./FWLIB/src/stm32f4xx_rcc.c ****   }
1793:./FWLIB/src/stm32f4xx_rcc.c **** }
 1559              		.loc 1 1793 0
 1560 000c 7047     		bx	lr
 1561              	.LVL145:
 1562              	.L154:
1787:./FWLIB/src/stm32f4xx_rcc.c ****   }
 1563              		.loc 1 1787 0
 1564 000e 024A     		ldr	r2, .L155
 1565 0010 9369     		ldr	r3, [r2, #24]
 1566 0012 1843     		orrs	r0, r0, r3
 1567              	.LVL146:
ARM GAS  /tmp/ccqlGgFJ.s 			page 59


 1568 0014 9061     		str	r0, [r2, #24]
 1569 0016 7047     		bx	lr
 1570              	.L156:
 1571              		.align	2
 1572              	.L155:
 1573 0018 00380240 		.word	1073887232
 1574              		.cfi_endproc
 1575              	.LFE151:
 1577              		.section	.text.RCC_APB1PeriphResetCmd,"ax",%progbits
 1578              		.align	1
 1579              		.global	RCC_APB1PeriphResetCmd
 1580              		.syntax unified
 1581              		.thumb
 1582              		.thumb_func
 1583              		.fpu fpv4-sp-d16
 1585              	RCC_APB1PeriphResetCmd:
 1586              	.LFB152:
1794:./FWLIB/src/stm32f4xx_rcc.c **** 
1795:./FWLIB/src/stm32f4xx_rcc.c **** /**
1796:./FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases Low Speed APB (APB1) peripheral reset.
1797:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to reset.
1798:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1799:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
1800:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
1801:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
1802:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
1803:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
1804:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
1805:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
1806:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
1807:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
1808:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
1809:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
1810:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
1811:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
1812:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
1813:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
1814:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
1815:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
1816:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
1817:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
1818:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
1819:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
1820:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
1821:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
1822:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART7:  UART7 clock
1823:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART8:  UART8 clock  
1824:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1825:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1826:./FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1827:./FWLIB/src/stm32f4xx_rcc.c ****   */
1828:./FWLIB/src/stm32f4xx_rcc.c **** void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1829:./FWLIB/src/stm32f4xx_rcc.c **** {
 1587              		.loc 1 1829 0
 1588              		.cfi_startproc
 1589              		@ args = 0, pretend = 0, frame = 0
 1590              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccqlGgFJ.s 			page 60


 1591              		@ link register save eliminated.
 1592              	.LVL147:
1830:./FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1831:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
1832:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1833:./FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1593              		.loc 1 1833 0
 1594 0000 29B9     		cbnz	r1, .L160
1834:./FWLIB/src/stm32f4xx_rcc.c ****   {
1835:./FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB1RSTR |= RCC_APB1Periph;
1836:./FWLIB/src/stm32f4xx_rcc.c ****   }
1837:./FWLIB/src/stm32f4xx_rcc.c ****   else
1838:./FWLIB/src/stm32f4xx_rcc.c ****   {
1839:./FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB1RSTR &= ~RCC_APB1Periph;
 1595              		.loc 1 1839 0
 1596 0002 054A     		ldr	r2, .L161
 1597 0004 136A     		ldr	r3, [r2, #32]
 1598 0006 23EA0000 		bic	r0, r3, r0
 1599              	.LVL148:
 1600 000a 1062     		str	r0, [r2, #32]
1840:./FWLIB/src/stm32f4xx_rcc.c ****   }
1841:./FWLIB/src/stm32f4xx_rcc.c **** }
 1601              		.loc 1 1841 0
 1602 000c 7047     		bx	lr
 1603              	.LVL149:
 1604              	.L160:
1835:./FWLIB/src/stm32f4xx_rcc.c ****   }
 1605              		.loc 1 1835 0
 1606 000e 024A     		ldr	r2, .L161
 1607 0010 136A     		ldr	r3, [r2, #32]
 1608 0012 1843     		orrs	r0, r0, r3
 1609              	.LVL150:
 1610 0014 1062     		str	r0, [r2, #32]
 1611 0016 7047     		bx	lr
 1612              	.L162:
 1613              		.align	2
 1614              	.L161:
 1615 0018 00380240 		.word	1073887232
 1616              		.cfi_endproc
 1617              	.LFE152:
 1619              		.section	.text.RCC_APB2PeriphResetCmd,"ax",%progbits
 1620              		.align	1
 1621              		.global	RCC_APB2PeriphResetCmd
 1622              		.syntax unified
 1623              		.thumb
 1624              		.thumb_func
 1625              		.fpu fpv4-sp-d16
 1627              	RCC_APB2PeriphResetCmd:
 1628              	.LFB153:
1842:./FWLIB/src/stm32f4xx_rcc.c **** 
1843:./FWLIB/src/stm32f4xx_rcc.c **** /**
1844:./FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases High Speed APB (APB2) peripheral reset.
1845:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to reset.
1846:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1847:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
1848:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
1849:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
ARM GAS  /tmp/ccqlGgFJ.s 			page 61


1850:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
1851:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
1852:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
1853:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
1854:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
1855:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
1856:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI4:   SPI4 clock  
1857:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
1858:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
1859:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
1860:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
1861:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI5:   SPI5 clock
1862:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI6:   SPI6 clock
1863:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SAI1:   SAI1 clock (STM32F42xxx/43xxx devices) 
1864:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_LTDC:   LTDC clock (STM32F429xx/439xx devices)   
1865:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1866:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1867:./FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1868:./FWLIB/src/stm32f4xx_rcc.c ****   */
1869:./FWLIB/src/stm32f4xx_rcc.c **** void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1870:./FWLIB/src/stm32f4xx_rcc.c **** {
 1629              		.loc 1 1870 0
 1630              		.cfi_startproc
 1631              		@ args = 0, pretend = 0, frame = 0
 1632              		@ frame_needed = 0, uses_anonymous_args = 0
 1633              		@ link register save eliminated.
 1634              	.LVL151:
1871:./FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1872:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
1873:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1874:./FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1635              		.loc 1 1874 0
 1636 0000 29B9     		cbnz	r1, .L166
1875:./FWLIB/src/stm32f4xx_rcc.c ****   {
1876:./FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB2RSTR |= RCC_APB2Periph;
1877:./FWLIB/src/stm32f4xx_rcc.c ****   }
1878:./FWLIB/src/stm32f4xx_rcc.c ****   else
1879:./FWLIB/src/stm32f4xx_rcc.c ****   {
1880:./FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB2RSTR &= ~RCC_APB2Periph;
 1637              		.loc 1 1880 0
 1638 0002 054A     		ldr	r2, .L167
 1639 0004 536A     		ldr	r3, [r2, #36]
 1640 0006 23EA0000 		bic	r0, r3, r0
 1641              	.LVL152:
 1642 000a 5062     		str	r0, [r2, #36]
1881:./FWLIB/src/stm32f4xx_rcc.c ****   }
1882:./FWLIB/src/stm32f4xx_rcc.c **** }
 1643              		.loc 1 1882 0
 1644 000c 7047     		bx	lr
 1645              	.LVL153:
 1646              	.L166:
1876:./FWLIB/src/stm32f4xx_rcc.c ****   }
 1647              		.loc 1 1876 0
 1648 000e 024A     		ldr	r2, .L167
 1649 0010 536A     		ldr	r3, [r2, #36]
 1650 0012 1843     		orrs	r0, r0, r3
 1651              	.LVL154:
ARM GAS  /tmp/ccqlGgFJ.s 			page 62


 1652 0014 5062     		str	r0, [r2, #36]
 1653 0016 7047     		bx	lr
 1654              	.L168:
 1655              		.align	2
 1656              	.L167:
 1657 0018 00380240 		.word	1073887232
 1658              		.cfi_endproc
 1659              	.LFE153:
 1661              		.section	.text.RCC_AHB1PeriphClockLPModeCmd,"ax",%progbits
 1662              		.align	1
 1663              		.global	RCC_AHB1PeriphClockLPModeCmd
 1664              		.syntax unified
 1665              		.thumb
 1666              		.thumb_func
 1667              		.fpu fpv4-sp-d16
 1669              	RCC_AHB1PeriphClockLPModeCmd:
 1670              	.LFB154:
1883:./FWLIB/src/stm32f4xx_rcc.c **** 
1884:./FWLIB/src/stm32f4xx_rcc.c **** /**
1885:./FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB1 peripheral clock during Low Power (Sleep) mode.
1886:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1887:./FWLIB/src/stm32f4xx_rcc.c ****   *         power consumption.
1888:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1889:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1890:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB1 peripheral to gates its clock.
1891:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1892:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:       GPIOA clock
1893:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:       GPIOB clock 
1894:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:       GPIOC clock
1895:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:       GPIOD clock
1896:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:       GPIOE clock
1897:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:       GPIOF clock
1898:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1899:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1900:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:       GPIOI clock
1901:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOJ:       GPIOJ clock (STM32F42xxx/43xxx devices) 
1902:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOK:       GPIOK clock (STM32F42xxx/43xxx devices)   
1903:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:         CRC clock
1904:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_BKPSRAM:     BKPSRAM interface clock
1905:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:        DMA1 clock
1906:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:        DMA2 clock
1907:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2D:       DMA2D clock (STM32F429xx/439xx devices) 
1908:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC:     Ethernet MAC clock
1909:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Tx:  Ethernet Transmission clock
1910:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Rx:  Ethernet Reception clock
1911:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_PTP: Ethernet PTP clock
1912:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:      USB OTG HS clock
1913:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS_ULPI: USB OTG HS ULPI clock
1914:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1915:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1916:./FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1917:./FWLIB/src/stm32f4xx_rcc.c ****   */
1918:./FWLIB/src/stm32f4xx_rcc.c **** void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
1919:./FWLIB/src/stm32f4xx_rcc.c **** {
 1671              		.loc 1 1919 0
 1672              		.cfi_startproc
 1673              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccqlGgFJ.s 			page 63


 1674              		@ frame_needed = 0, uses_anonymous_args = 0
 1675              		@ link register save eliminated.
 1676              	.LVL155:
1920:./FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1921:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
1922:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1923:./FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1677              		.loc 1 1923 0
 1678 0000 29B9     		cbnz	r1, .L172
1924:./FWLIB/src/stm32f4xx_rcc.c ****   {
1925:./FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB1LPENR |= RCC_AHB1Periph;
1926:./FWLIB/src/stm32f4xx_rcc.c ****   }
1927:./FWLIB/src/stm32f4xx_rcc.c ****   else
1928:./FWLIB/src/stm32f4xx_rcc.c ****   {
1929:./FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 1679              		.loc 1 1929 0
 1680 0002 054A     		ldr	r2, .L173
 1681 0004 136D     		ldr	r3, [r2, #80]
 1682 0006 23EA0000 		bic	r0, r3, r0
 1683              	.LVL156:
 1684 000a 1065     		str	r0, [r2, #80]
1930:./FWLIB/src/stm32f4xx_rcc.c ****   }
1931:./FWLIB/src/stm32f4xx_rcc.c **** }
 1685              		.loc 1 1931 0
 1686 000c 7047     		bx	lr
 1687              	.LVL157:
 1688              	.L172:
1925:./FWLIB/src/stm32f4xx_rcc.c ****   }
 1689              		.loc 1 1925 0
 1690 000e 024A     		ldr	r2, .L173
 1691 0010 136D     		ldr	r3, [r2, #80]
 1692 0012 1843     		orrs	r0, r0, r3
 1693              	.LVL158:
 1694 0014 1065     		str	r0, [r2, #80]
 1695 0016 7047     		bx	lr
 1696              	.L174:
 1697              		.align	2
 1698              	.L173:
 1699 0018 00380240 		.word	1073887232
 1700              		.cfi_endproc
 1701              	.LFE154:
 1703              		.section	.text.RCC_AHB2PeriphClockLPModeCmd,"ax",%progbits
 1704              		.align	1
 1705              		.global	RCC_AHB2PeriphClockLPModeCmd
 1706              		.syntax unified
 1707              		.thumb
 1708              		.thumb_func
 1709              		.fpu fpv4-sp-d16
 1711              	RCC_AHB2PeriphClockLPModeCmd:
 1712              	.LFB155:
1932:./FWLIB/src/stm32f4xx_rcc.c **** 
1933:./FWLIB/src/stm32f4xx_rcc.c **** /**
1934:./FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB2 peripheral clock during Low Power (Sleep) mode.
1935:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1936:./FWLIB/src/stm32f4xx_rcc.c ****   *           power consumption.
1937:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1938:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
ARM GAS  /tmp/ccqlGgFJ.s 			page 64


1939:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB2 peripheral to gates its clock.
1940:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1941:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
1942:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
1943:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
1944:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
1945:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock  
1946:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1947:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1948:./FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1949:./FWLIB/src/stm32f4xx_rcc.c ****   */
1950:./FWLIB/src/stm32f4xx_rcc.c **** void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
1951:./FWLIB/src/stm32f4xx_rcc.c **** {
 1713              		.loc 1 1951 0
 1714              		.cfi_startproc
 1715              		@ args = 0, pretend = 0, frame = 0
 1716              		@ frame_needed = 0, uses_anonymous_args = 0
 1717              		@ link register save eliminated.
 1718              	.LVL159:
1952:./FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1953:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
1954:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1955:./FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1719              		.loc 1 1955 0
 1720 0000 29B9     		cbnz	r1, .L178
1956:./FWLIB/src/stm32f4xx_rcc.c ****   {
1957:./FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB2LPENR |= RCC_AHB2Periph;
1958:./FWLIB/src/stm32f4xx_rcc.c ****   }
1959:./FWLIB/src/stm32f4xx_rcc.c ****   else
1960:./FWLIB/src/stm32f4xx_rcc.c ****   {
1961:./FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 1721              		.loc 1 1961 0
 1722 0002 054A     		ldr	r2, .L179
 1723 0004 536D     		ldr	r3, [r2, #84]
 1724 0006 23EA0000 		bic	r0, r3, r0
 1725              	.LVL160:
 1726 000a 5065     		str	r0, [r2, #84]
1962:./FWLIB/src/stm32f4xx_rcc.c ****   }
1963:./FWLIB/src/stm32f4xx_rcc.c **** }
 1727              		.loc 1 1963 0
 1728 000c 7047     		bx	lr
 1729              	.LVL161:
 1730              	.L178:
1957:./FWLIB/src/stm32f4xx_rcc.c ****   }
 1731              		.loc 1 1957 0
 1732 000e 024A     		ldr	r2, .L179
 1733 0010 536D     		ldr	r3, [r2, #84]
 1734 0012 1843     		orrs	r0, r0, r3
 1735              	.LVL162:
 1736 0014 5065     		str	r0, [r2, #84]
 1737 0016 7047     		bx	lr
 1738              	.L180:
 1739              		.align	2
 1740              	.L179:
 1741 0018 00380240 		.word	1073887232
 1742              		.cfi_endproc
 1743              	.LFE155:
ARM GAS  /tmp/ccqlGgFJ.s 			page 65


 1745              		.section	.text.RCC_AHB3PeriphClockLPModeCmd,"ax",%progbits
 1746              		.align	1
 1747              		.global	RCC_AHB3PeriphClockLPModeCmd
 1748              		.syntax unified
 1749              		.thumb
 1750              		.thumb_func
 1751              		.fpu fpv4-sp-d16
 1753              	RCC_AHB3PeriphClockLPModeCmd:
 1754              	.LFB156:
1964:./FWLIB/src/stm32f4xx_rcc.c **** 
1965:./FWLIB/src/stm32f4xx_rcc.c **** /**
1966:./FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB3 peripheral clock during Low Power (Sleep) mode.
1967:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1968:./FWLIB/src/stm32f4xx_rcc.c ****   *         power consumption.
1969:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1970:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1971:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB3 peripheral to gates its clock.
1972:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be: RCC_AHB3Periph_FSMC
1973:./FWLIB/src/stm32f4xx_rcc.c ****   *                                  or RCC_AHB3Periph_FMC (STM32F429x/439x devices) 
1974:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1975:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1976:./FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1977:./FWLIB/src/stm32f4xx_rcc.c ****   */
1978:./FWLIB/src/stm32f4xx_rcc.c **** void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
1979:./FWLIB/src/stm32f4xx_rcc.c **** {
 1755              		.loc 1 1979 0
 1756              		.cfi_startproc
 1757              		@ args = 0, pretend = 0, frame = 0
 1758              		@ frame_needed = 0, uses_anonymous_args = 0
 1759              		@ link register save eliminated.
 1760              	.LVL163:
1980:./FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1981:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
1982:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1983:./FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1761              		.loc 1 1983 0
 1762 0000 29B9     		cbnz	r1, .L184
1984:./FWLIB/src/stm32f4xx_rcc.c ****   {
1985:./FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB3LPENR |= RCC_AHB3Periph;
1986:./FWLIB/src/stm32f4xx_rcc.c ****   }
1987:./FWLIB/src/stm32f4xx_rcc.c ****   else
1988:./FWLIB/src/stm32f4xx_rcc.c ****   {
1989:./FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 1763              		.loc 1 1989 0
 1764 0002 054A     		ldr	r2, .L185
 1765 0004 936D     		ldr	r3, [r2, #88]
 1766 0006 23EA0000 		bic	r0, r3, r0
 1767              	.LVL164:
 1768 000a 9065     		str	r0, [r2, #88]
1990:./FWLIB/src/stm32f4xx_rcc.c ****   }
1991:./FWLIB/src/stm32f4xx_rcc.c **** }
 1769              		.loc 1 1991 0
 1770 000c 7047     		bx	lr
 1771              	.LVL165:
 1772              	.L184:
1985:./FWLIB/src/stm32f4xx_rcc.c ****   }
 1773              		.loc 1 1985 0
ARM GAS  /tmp/ccqlGgFJ.s 			page 66


 1774 000e 024A     		ldr	r2, .L185
 1775 0010 936D     		ldr	r3, [r2, #88]
 1776 0012 1843     		orrs	r0, r0, r3
 1777              	.LVL166:
 1778 0014 9065     		str	r0, [r2, #88]
 1779 0016 7047     		bx	lr
 1780              	.L186:
 1781              		.align	2
 1782              	.L185:
 1783 0018 00380240 		.word	1073887232
 1784              		.cfi_endproc
 1785              	.LFE156:
 1787              		.section	.text.RCC_APB1PeriphClockLPModeCmd,"ax",%progbits
 1788              		.align	1
 1789              		.global	RCC_APB1PeriphClockLPModeCmd
 1790              		.syntax unified
 1791              		.thumb
 1792              		.thumb_func
 1793              		.fpu fpv4-sp-d16
 1795              	RCC_APB1PeriphClockLPModeCmd:
 1796              	.LFB157:
1992:./FWLIB/src/stm32f4xx_rcc.c **** 
1993:./FWLIB/src/stm32f4xx_rcc.c **** /**
1994:./FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the APB1 peripheral clock during Low Power (Sleep) mode.
1995:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1996:./FWLIB/src/stm32f4xx_rcc.c ****   *         power consumption.
1997:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1998:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1999:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
2000:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2001:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
2002:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
2003:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
2004:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
2005:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
2006:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
2007:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
2008:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
2009:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
2010:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
2011:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
2012:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
2013:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
2014:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
2015:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
2016:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
2017:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
2018:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
2019:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
2020:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
2021:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
2022:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
2023:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
2024:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART7:  UART7 clock
2025:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART8:  UART8 clock
2026:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2027:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
ARM GAS  /tmp/ccqlGgFJ.s 			page 67


2028:./FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2029:./FWLIB/src/stm32f4xx_rcc.c ****   */
2030:./FWLIB/src/stm32f4xx_rcc.c **** void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
2031:./FWLIB/src/stm32f4xx_rcc.c **** {
 1797              		.loc 1 2031 0
 1798              		.cfi_startproc
 1799              		@ args = 0, pretend = 0, frame = 0
 1800              		@ frame_needed = 0, uses_anonymous_args = 0
 1801              		@ link register save eliminated.
 1802              	.LVL167:
2032:./FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2033:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
2034:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2035:./FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1803              		.loc 1 2035 0
 1804 0000 29B9     		cbnz	r1, .L190
2036:./FWLIB/src/stm32f4xx_rcc.c ****   {
2037:./FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB1LPENR |= RCC_APB1Periph;
2038:./FWLIB/src/stm32f4xx_rcc.c ****   }
2039:./FWLIB/src/stm32f4xx_rcc.c ****   else
2040:./FWLIB/src/stm32f4xx_rcc.c ****   {
2041:./FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB1LPENR &= ~RCC_APB1Periph;
 1805              		.loc 1 2041 0
 1806 0002 054A     		ldr	r2, .L191
 1807 0004 136E     		ldr	r3, [r2, #96]
 1808 0006 23EA0000 		bic	r0, r3, r0
 1809              	.LVL168:
 1810 000a 1066     		str	r0, [r2, #96]
2042:./FWLIB/src/stm32f4xx_rcc.c ****   }
2043:./FWLIB/src/stm32f4xx_rcc.c **** }
 1811              		.loc 1 2043 0
 1812 000c 7047     		bx	lr
 1813              	.LVL169:
 1814              	.L190:
2037:./FWLIB/src/stm32f4xx_rcc.c ****   }
 1815              		.loc 1 2037 0
 1816 000e 024A     		ldr	r2, .L191
 1817 0010 136E     		ldr	r3, [r2, #96]
 1818 0012 1843     		orrs	r0, r0, r3
 1819              	.LVL170:
 1820 0014 1066     		str	r0, [r2, #96]
 1821 0016 7047     		bx	lr
 1822              	.L192:
 1823              		.align	2
 1824              	.L191:
 1825 0018 00380240 		.word	1073887232
 1826              		.cfi_endproc
 1827              	.LFE157:
 1829              		.section	.text.RCC_APB2PeriphClockLPModeCmd,"ax",%progbits
 1830              		.align	1
 1831              		.global	RCC_APB2PeriphClockLPModeCmd
 1832              		.syntax unified
 1833              		.thumb
 1834              		.thumb_func
 1835              		.fpu fpv4-sp-d16
 1837              	RCC_APB2PeriphClockLPModeCmd:
 1838              	.LFB158:
ARM GAS  /tmp/ccqlGgFJ.s 			page 68


2044:./FWLIB/src/stm32f4xx_rcc.c **** 
2045:./FWLIB/src/stm32f4xx_rcc.c **** /**
2046:./FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the APB2 peripheral clock during Low Power (Sleep) mode.
2047:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
2048:./FWLIB/src/stm32f4xx_rcc.c ****   *         power consumption.
2049:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
2050:./FWLIB/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
2051:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
2052:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2053:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
2054:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
2055:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
2056:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
2057:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
2058:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
2059:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
2060:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
2061:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
2062:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI4:   SPI4 clock
2063:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
2064:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
2065:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
2066:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
2067:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI5:   SPI5 clock
2068:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI6:   SPI6 clock
2069:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SAI1:   SAI1 clock (STM32F42xxx/43xxx devices) 
2070:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_LTDC:   LTDC clock (STM32F429xx/439xx devices)   
2071:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2072:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2073:./FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2074:./FWLIB/src/stm32f4xx_rcc.c ****   */
2075:./FWLIB/src/stm32f4xx_rcc.c **** void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
2076:./FWLIB/src/stm32f4xx_rcc.c **** {
 1839              		.loc 1 2076 0
 1840              		.cfi_startproc
 1841              		@ args = 0, pretend = 0, frame = 0
 1842              		@ frame_needed = 0, uses_anonymous_args = 0
 1843              		@ link register save eliminated.
 1844              	.LVL171:
2077:./FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2078:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
2079:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2080:./FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1845              		.loc 1 2080 0
 1846 0000 29B9     		cbnz	r1, .L196
2081:./FWLIB/src/stm32f4xx_rcc.c ****   {
2082:./FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB2LPENR |= RCC_APB2Periph;
2083:./FWLIB/src/stm32f4xx_rcc.c ****   }
2084:./FWLIB/src/stm32f4xx_rcc.c ****   else
2085:./FWLIB/src/stm32f4xx_rcc.c ****   {
2086:./FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB2LPENR &= ~RCC_APB2Periph;
 1847              		.loc 1 2086 0
 1848 0002 054A     		ldr	r2, .L197
 1849 0004 536E     		ldr	r3, [r2, #100]
 1850 0006 23EA0000 		bic	r0, r3, r0
 1851              	.LVL172:
 1852 000a 5066     		str	r0, [r2, #100]
ARM GAS  /tmp/ccqlGgFJ.s 			page 69


2087:./FWLIB/src/stm32f4xx_rcc.c ****   }
2088:./FWLIB/src/stm32f4xx_rcc.c **** }
 1853              		.loc 1 2088 0
 1854 000c 7047     		bx	lr
 1855              	.LVL173:
 1856              	.L196:
2082:./FWLIB/src/stm32f4xx_rcc.c ****   }
 1857              		.loc 1 2082 0
 1858 000e 024A     		ldr	r2, .L197
 1859 0010 536E     		ldr	r3, [r2, #100]
 1860 0012 1843     		orrs	r0, r0, r3
 1861              	.LVL174:
 1862 0014 5066     		str	r0, [r2, #100]
 1863 0016 7047     		bx	lr
 1864              	.L198:
 1865              		.align	2
 1866              	.L197:
 1867 0018 00380240 		.word	1073887232
 1868              		.cfi_endproc
 1869              	.LFE158:
 1871              		.section	.text.RCC_LSEModeConfig,"ax",%progbits
 1872              		.align	1
 1873              		.global	RCC_LSEModeConfig
 1874              		.syntax unified
 1875              		.thumb
 1876              		.thumb_func
 1877              		.fpu fpv4-sp-d16
 1879              	RCC_LSEModeConfig:
 1880              	.LFB159:
2089:./FWLIB/src/stm32f4xx_rcc.c **** 
2090:./FWLIB/src/stm32f4xx_rcc.c **** /**
2091:./FWLIB/src/stm32f4xx_rcc.c ****   * @brief Configures the External Low Speed oscillator mode (LSE mode).
2092:./FWLIB/src/stm32f4xx_rcc.c ****   * @note This mode is only available for STM32F411xx devices.
2093:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  Mode: specifies the LSE mode.
2094:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2095:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_LOWPOWER_MODE:  LSE oscillator in low power mode.
2096:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_HIGHDRIVE_MODE: LSE oscillator in High Drive mode.
2097:./FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2098:./FWLIB/src/stm32f4xx_rcc.c ****   */
2099:./FWLIB/src/stm32f4xx_rcc.c **** void RCC_LSEModeConfig(uint8_t Mode)
2100:./FWLIB/src/stm32f4xx_rcc.c **** {
 1881              		.loc 1 2100 0
 1882              		.cfi_startproc
 1883              		@ args = 0, pretend = 0, frame = 0
 1884              		@ frame_needed = 0, uses_anonymous_args = 0
 1885              		@ link register save eliminated.
 1886              	.LVL175:
2101:./FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2102:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_LSE_MODE(Mode));
2103:./FWLIB/src/stm32f4xx_rcc.c ****   
2104:./FWLIB/src/stm32f4xx_rcc.c ****   if(Mode == RCC_LSE_HIGHDRIVE_MODE)
 1887              		.loc 1 2104 0
 1888 0000 0128     		cmp	r0, #1
 1889 0002 05D0     		beq	.L202
2105:./FWLIB/src/stm32f4xx_rcc.c ****   {
2106:./FWLIB/src/stm32f4xx_rcc.c ****     SET_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
2107:./FWLIB/src/stm32f4xx_rcc.c ****   }
ARM GAS  /tmp/ccqlGgFJ.s 			page 70


2108:./FWLIB/src/stm32f4xx_rcc.c ****   else
2109:./FWLIB/src/stm32f4xx_rcc.c ****   {
2110:./FWLIB/src/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
 1890              		.loc 1 2110 0
 1891 0004 054A     		ldr	r2, .L203
 1892 0006 136F     		ldr	r3, [r2, #112]
 1893 0008 23F00803 		bic	r3, r3, #8
 1894 000c 1367     		str	r3, [r2, #112]
2111:./FWLIB/src/stm32f4xx_rcc.c ****   }
2112:./FWLIB/src/stm32f4xx_rcc.c **** }
 1895              		.loc 1 2112 0
 1896 000e 7047     		bx	lr
 1897              	.L202:
2106:./FWLIB/src/stm32f4xx_rcc.c ****   }
 1898              		.loc 1 2106 0
 1899 0010 024A     		ldr	r2, .L203
 1900 0012 136F     		ldr	r3, [r2, #112]
 1901 0014 43F00803 		orr	r3, r3, #8
 1902 0018 1367     		str	r3, [r2, #112]
 1903 001a 7047     		bx	lr
 1904              	.L204:
 1905              		.align	2
 1906              	.L203:
 1907 001c 00380240 		.word	1073887232
 1908              		.cfi_endproc
 1909              	.LFE159:
 1911              		.section	.text.RCC_ITConfig,"ax",%progbits
 1912              		.align	1
 1913              		.global	RCC_ITConfig
 1914              		.syntax unified
 1915              		.thumb
 1916              		.thumb_func
 1917              		.fpu fpv4-sp-d16
 1919              	RCC_ITConfig:
 1920              	.LFB160:
2113:./FWLIB/src/stm32f4xx_rcc.c **** 
2114:./FWLIB/src/stm32f4xx_rcc.c **** /**
2115:./FWLIB/src/stm32f4xx_rcc.c ****   * @}
2116:./FWLIB/src/stm32f4xx_rcc.c ****   */
2117:./FWLIB/src/stm32f4xx_rcc.c **** 
2118:./FWLIB/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group4 Interrupts and flags management functions
2119:./FWLIB/src/stm32f4xx_rcc.c ****  *  @brief   Interrupts and flags management functions 
2120:./FWLIB/src/stm32f4xx_rcc.c ****  *
2121:./FWLIB/src/stm32f4xx_rcc.c **** @verbatim   
2122:./FWLIB/src/stm32f4xx_rcc.c ****  ===============================================================================
2123:./FWLIB/src/stm32f4xx_rcc.c ****                 ##### Interrupts and flags management functions #####
2124:./FWLIB/src/stm32f4xx_rcc.c ****  ===============================================================================  
2125:./FWLIB/src/stm32f4xx_rcc.c **** 
2126:./FWLIB/src/stm32f4xx_rcc.c **** @endverbatim
2127:./FWLIB/src/stm32f4xx_rcc.c ****   * @{
2128:./FWLIB/src/stm32f4xx_rcc.c ****   */
2129:./FWLIB/src/stm32f4xx_rcc.c **** 
2130:./FWLIB/src/stm32f4xx_rcc.c **** /**
2131:./FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the specified RCC interrupts.
2132:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt sources to be enabled or disabled.
2133:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2134:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
ARM GAS  /tmp/ccqlGgFJ.s 			page 71


2135:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
2136:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
2137:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
2138:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
2139:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt
2140:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx devices)
2141:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified RCC interrupts.
2142:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2143:./FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2144:./FWLIB/src/stm32f4xx_rcc.c ****   */
2145:./FWLIB/src/stm32f4xx_rcc.c **** void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
2146:./FWLIB/src/stm32f4xx_rcc.c **** {
 1921              		.loc 1 2146 0
 1922              		.cfi_startproc
 1923              		@ args = 0, pretend = 0, frame = 0
 1924              		@ frame_needed = 0, uses_anonymous_args = 0
 1925              		@ link register save eliminated.
 1926              	.LVL176:
2147:./FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2148:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_IT(RCC_IT));
2149:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2150:./FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1927              		.loc 1 2150 0
 1928 0000 29B9     		cbnz	r1, .L208
2151:./FWLIB/src/stm32f4xx_rcc.c ****   {
2152:./FWLIB/src/stm32f4xx_rcc.c ****     /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
2153:./FWLIB/src/stm32f4xx_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
2154:./FWLIB/src/stm32f4xx_rcc.c ****   }
2155:./FWLIB/src/stm32f4xx_rcc.c ****   else
2156:./FWLIB/src/stm32f4xx_rcc.c ****   {
2157:./FWLIB/src/stm32f4xx_rcc.c ****     /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
2158:./FWLIB/src/stm32f4xx_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 1929              		.loc 1 2158 0
 1930 0002 054A     		ldr	r2, .L209
 1931 0004 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 1932 0006 23EA0000 		bic	r0, r3, r0
 1933              	.LVL177:
 1934 000a 1070     		strb	r0, [r2]
2159:./FWLIB/src/stm32f4xx_rcc.c ****   }
2160:./FWLIB/src/stm32f4xx_rcc.c **** }
 1935              		.loc 1 2160 0
 1936 000c 7047     		bx	lr
 1937              	.LVL178:
 1938              	.L208:
2153:./FWLIB/src/stm32f4xx_rcc.c ****   }
 1939              		.loc 1 2153 0
 1940 000e 024A     		ldr	r2, .L209
 1941 0010 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 1942 0012 1843     		orrs	r0, r0, r3
 1943              	.LVL179:
 1944 0014 1070     		strb	r0, [r2]
 1945 0016 7047     		bx	lr
 1946              	.L210:
 1947              		.align	2
 1948              	.L209:
 1949 0018 0D380240 		.word	1073887245
 1950              		.cfi_endproc
ARM GAS  /tmp/ccqlGgFJ.s 			page 72


 1951              	.LFE160:
 1953              		.section	.text.RCC_GetFlagStatus,"ax",%progbits
 1954              		.align	1
 1955              		.global	RCC_GetFlagStatus
 1956              		.syntax unified
 1957              		.thumb
 1958              		.thumb_func
 1959              		.fpu fpv4-sp-d16
 1961              	RCC_GetFlagStatus:
 1962              	.LFB161:
2161:./FWLIB/src/stm32f4xx_rcc.c **** 
2162:./FWLIB/src/stm32f4xx_rcc.c **** /**
2163:./FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Checks whether the specified RCC flag is set or not.
2164:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_FLAG: specifies the flag to check.
2165:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2166:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready
2167:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_HSERDY: HSE oscillator clock ready
2168:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PLLRDY: main PLL clock ready
2169:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PLLI2SRDY: PLLI2S clock ready
2170:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PLLSAIRDY: PLLSAI clock ready (only for STM32F42xxx/43xxx devices)
2171:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LSERDY: LSE oscillator clock ready
2172:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready
2173:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_BORRST: POR/PDR or BOR reset
2174:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PINRST: Pin reset
2175:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PORRST: POR/PDR reset
2176:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_SFTRST: Software reset
2177:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_IWDGRST: Independent Watchdog reset
2178:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
2179:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LPWRRST: Low Power reset
2180:./FWLIB/src/stm32f4xx_rcc.c ****   * @retval The new state of RCC_FLAG (SET or RESET).
2181:./FWLIB/src/stm32f4xx_rcc.c ****   */
2182:./FWLIB/src/stm32f4xx_rcc.c **** FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
2183:./FWLIB/src/stm32f4xx_rcc.c **** {
 1963              		.loc 1 2183 0
 1964              		.cfi_startproc
 1965              		@ args = 0, pretend = 0, frame = 0
 1966              		@ frame_needed = 0, uses_anonymous_args = 0
 1967              		@ link register save eliminated.
 1968              	.LVL180:
2184:./FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmp = 0;
2185:./FWLIB/src/stm32f4xx_rcc.c ****   uint32_t statusreg = 0;
2186:./FWLIB/src/stm32f4xx_rcc.c ****   FlagStatus bitstatus = RESET;
2187:./FWLIB/src/stm32f4xx_rcc.c **** 
2188:./FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2189:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_FLAG(RCC_FLAG));
2190:./FWLIB/src/stm32f4xx_rcc.c **** 
2191:./FWLIB/src/stm32f4xx_rcc.c ****   /* Get the RCC register index */
2192:./FWLIB/src/stm32f4xx_rcc.c ****   tmp = RCC_FLAG >> 5;
 1969              		.loc 1 2192 0
 1970 0000 4309     		lsrs	r3, r0, #5
 1971              	.LVL181:
2193:./FWLIB/src/stm32f4xx_rcc.c ****   if (tmp == 1)               /* The flag to check is in CR register */
 1972              		.loc 1 2193 0
 1973 0002 012B     		cmp	r3, #1
 1974 0004 0CD0     		beq	.L217
2194:./FWLIB/src/stm32f4xx_rcc.c ****   {
2195:./FWLIB/src/stm32f4xx_rcc.c ****     statusreg = RCC->CR;
ARM GAS  /tmp/ccqlGgFJ.s 			page 73


2196:./FWLIB/src/stm32f4xx_rcc.c ****   }
2197:./FWLIB/src/stm32f4xx_rcc.c ****   else if (tmp == 2)          /* The flag to check is in BDCR register */
 1975              		.loc 1 2197 0
 1976 0006 022B     		cmp	r3, #2
 1977 0008 0DD0     		beq	.L218
2198:./FWLIB/src/stm32f4xx_rcc.c ****   {
2199:./FWLIB/src/stm32f4xx_rcc.c ****     statusreg = RCC->BDCR;
2200:./FWLIB/src/stm32f4xx_rcc.c ****   }
2201:./FWLIB/src/stm32f4xx_rcc.c ****   else                       /* The flag to check is in CSR register */
2202:./FWLIB/src/stm32f4xx_rcc.c ****   {
2203:./FWLIB/src/stm32f4xx_rcc.c ****     statusreg = RCC->CSR;
 1978              		.loc 1 2203 0
 1979 000a 094B     		ldr	r3, .L220
 1980              	.LVL182:
 1981 000c 5B6F     		ldr	r3, [r3, #116]
 1982              	.LVL183:
 1983              	.L213:
2204:./FWLIB/src/stm32f4xx_rcc.c ****   }
2205:./FWLIB/src/stm32f4xx_rcc.c **** 
2206:./FWLIB/src/stm32f4xx_rcc.c ****   /* Get the flag position */
2207:./FWLIB/src/stm32f4xx_rcc.c ****   tmp = RCC_FLAG & FLAG_MASK;
 1984              		.loc 1 2207 0
 1985 000e 00F01F00 		and	r0, r0, #31
 1986              	.LVL184:
2208:./FWLIB/src/stm32f4xx_rcc.c ****   if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 1987              		.loc 1 2208 0
 1988 0012 23FA00F0 		lsr	r0, r3, r0
 1989              	.LVL185:
 1990 0016 10F0010F 		tst	r0, #1
 1991 001a 07D1     		bne	.L219
2209:./FWLIB/src/stm32f4xx_rcc.c ****   {
2210:./FWLIB/src/stm32f4xx_rcc.c ****     bitstatus = SET;
2211:./FWLIB/src/stm32f4xx_rcc.c ****   }
2212:./FWLIB/src/stm32f4xx_rcc.c ****   else
2213:./FWLIB/src/stm32f4xx_rcc.c ****   {
2214:./FWLIB/src/stm32f4xx_rcc.c ****     bitstatus = RESET;
 1992              		.loc 1 2214 0
 1993 001c 0020     		movs	r0, #0
 1994              	.LVL186:
2215:./FWLIB/src/stm32f4xx_rcc.c ****   }
2216:./FWLIB/src/stm32f4xx_rcc.c ****   /* Return the flag status */
2217:./FWLIB/src/stm32f4xx_rcc.c ****   return bitstatus;
2218:./FWLIB/src/stm32f4xx_rcc.c **** }
 1995              		.loc 1 2218 0
 1996 001e 7047     		bx	lr
 1997              	.LVL187:
 1998              	.L217:
2195:./FWLIB/src/stm32f4xx_rcc.c ****   }
 1999              		.loc 1 2195 0
 2000 0020 034B     		ldr	r3, .L220
 2001              	.LVL188:
 2002 0022 1B68     		ldr	r3, [r3]
 2003              	.LVL189:
 2004 0024 F3E7     		b	.L213
 2005              	.LVL190:
 2006              	.L218:
2199:./FWLIB/src/stm32f4xx_rcc.c ****   }
ARM GAS  /tmp/ccqlGgFJ.s 			page 74


 2007              		.loc 1 2199 0
 2008 0026 024B     		ldr	r3, .L220
 2009              	.LVL191:
 2010 0028 1B6F     		ldr	r3, [r3, #112]
 2011              	.LVL192:
 2012 002a F0E7     		b	.L213
 2013              	.LVL193:
 2014              	.L219:
2210:./FWLIB/src/stm32f4xx_rcc.c ****   }
 2015              		.loc 1 2210 0
 2016 002c 0120     		movs	r0, #1
 2017 002e 7047     		bx	lr
 2018              	.L221:
 2019              		.align	2
 2020              	.L220:
 2021 0030 00380240 		.word	1073887232
 2022              		.cfi_endproc
 2023              	.LFE161:
 2025              		.section	.text.RCC_WaitForHSEStartUp,"ax",%progbits
 2026              		.align	1
 2027              		.global	RCC_WaitForHSEStartUp
 2028              		.syntax unified
 2029              		.thumb
 2030              		.thumb_func
 2031              		.fpu fpv4-sp-d16
 2033              	RCC_WaitForHSEStartUp:
 2034              	.LFB114:
 288:./FWLIB/src/stm32f4xx_rcc.c ****   __IO uint32_t startupcounter = 0;
 2035              		.loc 1 288 0
 2036              		.cfi_startproc
 2037              		@ args = 0, pretend = 0, frame = 8
 2038              		@ frame_needed = 0, uses_anonymous_args = 0
 2039 0000 00B5     		push	{lr}
 2040              	.LCFI3:
 2041              		.cfi_def_cfa_offset 4
 2042              		.cfi_offset 14, -4
 2043 0002 83B0     		sub	sp, sp, #12
 2044              	.LCFI4:
 2045              		.cfi_def_cfa_offset 16
 289:./FWLIB/src/stm32f4xx_rcc.c ****   ErrorStatus status = ERROR;
 2046              		.loc 1 289 0
 2047 0004 0023     		movs	r3, #0
 2048 0006 0193     		str	r3, [sp, #4]
 2049              	.LVL194:
 2050              	.L224:
 295:./FWLIB/src/stm32f4xx_rcc.c ****     startupcounter++;
 2051              		.loc 1 295 0 discriminator 2
 2052 0008 3120     		movs	r0, #49
 2053 000a FFF7FEFF 		bl	RCC_GetFlagStatus
 2054              	.LVL195:
 296:./FWLIB/src/stm32f4xx_rcc.c ****   } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 2055              		.loc 1 296 0 discriminator 2
 2056 000e 019B     		ldr	r3, [sp, #4]
 2057 0010 0133     		adds	r3, r3, #1
 2058 0012 0193     		str	r3, [sp, #4]
 297:./FWLIB/src/stm32f4xx_rcc.c **** 
 2059              		.loc 1 297 0 discriminator 2
ARM GAS  /tmp/ccqlGgFJ.s 			page 75


 2060 0014 019B     		ldr	r3, [sp, #4]
 2061 0016 B3F5A04F 		cmp	r3, #20480
 2062 001a 01D0     		beq	.L223
 297:./FWLIB/src/stm32f4xx_rcc.c **** 
 2063              		.loc 1 297 0 is_stmt 0 discriminator 1
 2064 001c 0028     		cmp	r0, #0
 2065 001e F3D0     		beq	.L224
 2066              	.L223:
 299:./FWLIB/src/stm32f4xx_rcc.c ****   {
 2067              		.loc 1 299 0 is_stmt 1
 2068 0020 3120     		movs	r0, #49
 2069              	.LVL196:
 2070 0022 FFF7FEFF 		bl	RCC_GetFlagStatus
 2071              	.LVL197:
 2072 0026 18B9     		cbnz	r0, .L228
 305:./FWLIB/src/stm32f4xx_rcc.c ****   }
 2073              		.loc 1 305 0
 2074 0028 0020     		movs	r0, #0
 2075              	.L225:
 2076              	.LVL198:
 308:./FWLIB/src/stm32f4xx_rcc.c **** 
 2077              		.loc 1 308 0
 2078 002a 03B0     		add	sp, sp, #12
 2079              	.LCFI5:
 2080              		.cfi_remember_state
 2081              		.cfi_def_cfa_offset 4
 2082              		@ sp needed
 2083 002c 5DF804FB 		ldr	pc, [sp], #4
 2084              	.LVL199:
 2085              	.L228:
 2086              	.LCFI6:
 2087              		.cfi_restore_state
 301:./FWLIB/src/stm32f4xx_rcc.c ****   }
 2088              		.loc 1 301 0
 2089 0030 0120     		movs	r0, #1
 2090 0032 FAE7     		b	.L225
 2091              		.cfi_endproc
 2092              	.LFE114:
 2094              		.section	.text.RCC_ClearFlag,"ax",%progbits
 2095              		.align	1
 2096              		.global	RCC_ClearFlag
 2097              		.syntax unified
 2098              		.thumb
 2099              		.thumb_func
 2100              		.fpu fpv4-sp-d16
 2102              	RCC_ClearFlag:
 2103              	.LFB162:
2219:./FWLIB/src/stm32f4xx_rcc.c **** 
2220:./FWLIB/src/stm32f4xx_rcc.c **** /**
2221:./FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Clears the RCC reset flags.
2222:./FWLIB/src/stm32f4xx_rcc.c ****   *         The reset flags are: RCC_FLAG_PINRST, RCC_FLAG_PORRST,  RCC_FLAG_SFTRST,
2223:./FWLIB/src/stm32f4xx_rcc.c ****   *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
2224:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  None
2225:./FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2226:./FWLIB/src/stm32f4xx_rcc.c ****   */
2227:./FWLIB/src/stm32f4xx_rcc.c **** void RCC_ClearFlag(void)
2228:./FWLIB/src/stm32f4xx_rcc.c **** {
ARM GAS  /tmp/ccqlGgFJ.s 			page 76


 2104              		.loc 1 2228 0
 2105              		.cfi_startproc
 2106              		@ args = 0, pretend = 0, frame = 0
 2107              		@ frame_needed = 0, uses_anonymous_args = 0
 2108              		@ link register save eliminated.
2229:./FWLIB/src/stm32f4xx_rcc.c ****   /* Set RMVF bit to clear the reset flags */
2230:./FWLIB/src/stm32f4xx_rcc.c ****   RCC->CSR |= RCC_CSR_RMVF;
 2109              		.loc 1 2230 0
 2110 0000 024A     		ldr	r2, .L230
 2111 0002 536F     		ldr	r3, [r2, #116]
 2112 0004 43F08073 		orr	r3, r3, #16777216
 2113 0008 5367     		str	r3, [r2, #116]
2231:./FWLIB/src/stm32f4xx_rcc.c **** }
 2114              		.loc 1 2231 0
 2115 000a 7047     		bx	lr
 2116              	.L231:
 2117              		.align	2
 2118              	.L230:
 2119 000c 00380240 		.word	1073887232
 2120              		.cfi_endproc
 2121              	.LFE162:
 2123              		.section	.text.RCC_GetITStatus,"ax",%progbits
 2124              		.align	1
 2125              		.global	RCC_GetITStatus
 2126              		.syntax unified
 2127              		.thumb
 2128              		.thumb_func
 2129              		.fpu fpv4-sp-d16
 2131              	RCC_GetITStatus:
 2132              	.LFB163:
2232:./FWLIB/src/stm32f4xx_rcc.c **** 
2233:./FWLIB/src/stm32f4xx_rcc.c **** /**
2234:./FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Checks whether the specified RCC interrupt has occurred or not.
2235:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt source to check.
2236:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2237:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
2238:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
2239:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
2240:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
2241:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
2242:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt           
2243:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLSAIRDY: PLLSAI clock ready interrupt (only for STM32F42xxx/43xxx devi
2244:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_CSS: Clock Security System interrupt
2245:./FWLIB/src/stm32f4xx_rcc.c ****   * @retval The new state of RCC_IT (SET or RESET).
2246:./FWLIB/src/stm32f4xx_rcc.c ****   */
2247:./FWLIB/src/stm32f4xx_rcc.c **** ITStatus RCC_GetITStatus(uint8_t RCC_IT)
2248:./FWLIB/src/stm32f4xx_rcc.c **** {
 2133              		.loc 1 2248 0
 2134              		.cfi_startproc
 2135              		@ args = 0, pretend = 0, frame = 0
 2136              		@ frame_needed = 0, uses_anonymous_args = 0
 2137              		@ link register save eliminated.
 2138              	.LVL200:
2249:./FWLIB/src/stm32f4xx_rcc.c ****   ITStatus bitstatus = RESET;
2250:./FWLIB/src/stm32f4xx_rcc.c **** 
2251:./FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2252:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_GET_IT(RCC_IT));
ARM GAS  /tmp/ccqlGgFJ.s 			page 77


2253:./FWLIB/src/stm32f4xx_rcc.c **** 
2254:./FWLIB/src/stm32f4xx_rcc.c ****   /* Check the status of the specified RCC interrupt */
2255:./FWLIB/src/stm32f4xx_rcc.c ****   if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 2139              		.loc 1 2255 0
 2140 0000 034B     		ldr	r3, .L236
 2141 0002 DB68     		ldr	r3, [r3, #12]
 2142 0004 1842     		tst	r0, r3
 2143 0006 01D1     		bne	.L235
2256:./FWLIB/src/stm32f4xx_rcc.c ****   {
2257:./FWLIB/src/stm32f4xx_rcc.c ****     bitstatus = SET;
2258:./FWLIB/src/stm32f4xx_rcc.c ****   }
2259:./FWLIB/src/stm32f4xx_rcc.c ****   else
2260:./FWLIB/src/stm32f4xx_rcc.c ****   {
2261:./FWLIB/src/stm32f4xx_rcc.c ****     bitstatus = RESET;
 2144              		.loc 1 2261 0
 2145 0008 0020     		movs	r0, #0
 2146              	.LVL201:
2262:./FWLIB/src/stm32f4xx_rcc.c ****   }
2263:./FWLIB/src/stm32f4xx_rcc.c ****   /* Return the RCC_IT status */
2264:./FWLIB/src/stm32f4xx_rcc.c ****   return  bitstatus;
2265:./FWLIB/src/stm32f4xx_rcc.c **** }
 2147              		.loc 1 2265 0
 2148 000a 7047     		bx	lr
 2149              	.LVL202:
 2150              	.L235:
2257:./FWLIB/src/stm32f4xx_rcc.c ****   }
 2151              		.loc 1 2257 0
 2152 000c 0120     		movs	r0, #1
 2153              	.LVL203:
 2154 000e 7047     		bx	lr
 2155              	.L237:
 2156              		.align	2
 2157              	.L236:
 2158 0010 00380240 		.word	1073887232
 2159              		.cfi_endproc
 2160              	.LFE163:
 2162              		.section	.text.RCC_ClearITPendingBit,"ax",%progbits
 2163              		.align	1
 2164              		.global	RCC_ClearITPendingBit
 2165              		.syntax unified
 2166              		.thumb
 2167              		.thumb_func
 2168              		.fpu fpv4-sp-d16
 2170              	RCC_ClearITPendingBit:
 2171              	.LFB164:
2266:./FWLIB/src/stm32f4xx_rcc.c **** 
2267:./FWLIB/src/stm32f4xx_rcc.c **** /**
2268:./FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Clears the RCC's interrupt pending bits.
2269:./FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the interrupt pending bit to clear.
2270:./FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2271:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
2272:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
2273:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
2274:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
2275:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
2276:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
2277:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx devices)  
ARM GAS  /tmp/ccqlGgFJ.s 			page 78


2278:./FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_CSS: Clock Security System interrupt
2279:./FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2280:./FWLIB/src/stm32f4xx_rcc.c ****   */
2281:./FWLIB/src/stm32f4xx_rcc.c **** void RCC_ClearITPendingBit(uint8_t RCC_IT)
2282:./FWLIB/src/stm32f4xx_rcc.c **** {
 2172              		.loc 1 2282 0
 2173              		.cfi_startproc
 2174              		@ args = 0, pretend = 0, frame = 0
 2175              		@ frame_needed = 0, uses_anonymous_args = 0
 2176              		@ link register save eliminated.
 2177              	.LVL204:
2283:./FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2284:./FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_CLEAR_IT(RCC_IT));
2285:./FWLIB/src/stm32f4xx_rcc.c **** 
2286:./FWLIB/src/stm32f4xx_rcc.c ****   /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
2287:./FWLIB/src/stm32f4xx_rcc.c ****      pending bits */
2288:./FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 2178              		.loc 1 2288 0
 2179 0000 014B     		ldr	r3, .L239
 2180 0002 1870     		strb	r0, [r3]
2289:./FWLIB/src/stm32f4xx_rcc.c **** }
 2181              		.loc 1 2289 0
 2182 0004 7047     		bx	lr
 2183              	.L240:
 2184 0006 00BF     		.align	2
 2185              	.L239:
 2186 0008 0E380240 		.word	1073887246
 2187              		.cfi_endproc
 2188              	.LFE164:
 2190              		.section	.data.APBAHBPrescTable,"aw",%progbits
 2191              		.align	2
 2192              		.set	.LANCHOR0,. + 0
 2195              	APBAHBPrescTable:
 2196 0000 00       		.byte	0
 2197 0001 00       		.byte	0
 2198 0002 00       		.byte	0
 2199 0003 00       		.byte	0
 2200 0004 01       		.byte	1
 2201 0005 02       		.byte	2
 2202 0006 03       		.byte	3
 2203 0007 04       		.byte	4
 2204 0008 01       		.byte	1
 2205 0009 02       		.byte	2
 2206 000a 03       		.byte	3
 2207 000b 04       		.byte	4
 2208 000c 06       		.byte	6
 2209 000d 07       		.byte	7
 2210 000e 08       		.byte	8
 2211 000f 09       		.byte	9
 2212              		.text
 2213              	.Letext0:
 2214              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 2215              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 2216              		.file 4 "build/lnInclude/core_cm4.h"
 2217              		.file 5 "build/lnInclude/system_stm32f4xx.h"
 2218              		.file 6 "build/lnInclude/stm32f4xx.h"
 2219              		.file 7 "build/lnInclude/stm32f4xx_rcc.h"
ARM GAS  /tmp/ccqlGgFJ.s 			page 79


ARM GAS  /tmp/ccqlGgFJ.s 			page 80


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_rcc.c
     /tmp/ccqlGgFJ.s:18     .text.RCC_DeInit:0000000000000000 $t
     /tmp/ccqlGgFJ.s:25     .text.RCC_DeInit:0000000000000000 RCC_DeInit
     /tmp/ccqlGgFJ.s:68     .text.RCC_DeInit:000000000000003c $d
     /tmp/ccqlGgFJ.s:75     .text.RCC_HSEConfig:0000000000000000 $t
     /tmp/ccqlGgFJ.s:82     .text.RCC_HSEConfig:0000000000000000 RCC_HSEConfig
     /tmp/ccqlGgFJ.s:101    .text.RCC_HSEConfig:000000000000000c $d
     /tmp/ccqlGgFJ.s:106    .text.RCC_AdjustHSICalibrationValue:0000000000000000 $t
     /tmp/ccqlGgFJ.s:113    .text.RCC_AdjustHSICalibrationValue:0000000000000000 RCC_AdjustHSICalibrationValue
     /tmp/ccqlGgFJ.s:138    .text.RCC_AdjustHSICalibrationValue:0000000000000010 $d
     /tmp/ccqlGgFJ.s:143    .text.RCC_HSICmd:0000000000000000 $t
     /tmp/ccqlGgFJ.s:150    .text.RCC_HSICmd:0000000000000000 RCC_HSICmd
     /tmp/ccqlGgFJ.s:166    .text.RCC_HSICmd:0000000000000008 $d
     /tmp/ccqlGgFJ.s:171    .text.RCC_LSEConfig:0000000000000000 $t
     /tmp/ccqlGgFJ.s:178    .text.RCC_LSEConfig:0000000000000000 RCC_LSEConfig
     /tmp/ccqlGgFJ.s:215    .text.RCC_LSEConfig:0000000000000024 $d
     /tmp/ccqlGgFJ.s:220    .text.RCC_LSICmd:0000000000000000 $t
     /tmp/ccqlGgFJ.s:227    .text.RCC_LSICmd:0000000000000000 RCC_LSICmd
     /tmp/ccqlGgFJ.s:243    .text.RCC_LSICmd:0000000000000008 $d
     /tmp/ccqlGgFJ.s:248    .text.RCC_PLLConfig:0000000000000000 $t
     /tmp/ccqlGgFJ.s:255    .text.RCC_PLLConfig:0000000000000000 RCC_PLLConfig
     /tmp/ccqlGgFJ.s:282    .text.RCC_PLLConfig:000000000000001c $d
     /tmp/ccqlGgFJ.s:287    .text.RCC_PLLCmd:0000000000000000 $t
     /tmp/ccqlGgFJ.s:294    .text.RCC_PLLCmd:0000000000000000 RCC_PLLCmd
     /tmp/ccqlGgFJ.s:310    .text.RCC_PLLCmd:0000000000000008 $d
     /tmp/ccqlGgFJ.s:315    .text.RCC_PLLI2SConfig:0000000000000000 $t
     /tmp/ccqlGgFJ.s:322    .text.RCC_PLLI2SConfig:0000000000000000 RCC_PLLI2SConfig
     /tmp/ccqlGgFJ.s:341    .text.RCC_PLLI2SConfig:0000000000000010 $d
     /tmp/ccqlGgFJ.s:346    .text.RCC_PLLI2SCmd:0000000000000000 $t
     /tmp/ccqlGgFJ.s:353    .text.RCC_PLLI2SCmd:0000000000000000 RCC_PLLI2SCmd
     /tmp/ccqlGgFJ.s:369    .text.RCC_PLLI2SCmd:0000000000000008 $d
     /tmp/ccqlGgFJ.s:374    .text.RCC_PLLSAIConfig:0000000000000000 $t
     /tmp/ccqlGgFJ.s:381    .text.RCC_PLLSAIConfig:0000000000000000 RCC_PLLSAIConfig
     /tmp/ccqlGgFJ.s:401    .text.RCC_PLLSAIConfig:0000000000000014 $d
     /tmp/ccqlGgFJ.s:406    .text.RCC_PLLSAICmd:0000000000000000 $t
     /tmp/ccqlGgFJ.s:413    .text.RCC_PLLSAICmd:0000000000000000 RCC_PLLSAICmd
     /tmp/ccqlGgFJ.s:429    .text.RCC_PLLSAICmd:0000000000000008 $d
     /tmp/ccqlGgFJ.s:434    .text.RCC_ClockSecuritySystemCmd:0000000000000000 $t
     /tmp/ccqlGgFJ.s:441    .text.RCC_ClockSecuritySystemCmd:0000000000000000 RCC_ClockSecuritySystemCmd
     /tmp/ccqlGgFJ.s:457    .text.RCC_ClockSecuritySystemCmd:0000000000000008 $d
     /tmp/ccqlGgFJ.s:462    .text.RCC_MCO1Config:0000000000000000 $t
     /tmp/ccqlGgFJ.s:469    .text.RCC_MCO1Config:0000000000000000 RCC_MCO1Config
     /tmp/ccqlGgFJ.s:496    .text.RCC_MCO1Config:0000000000000010 $d
     /tmp/ccqlGgFJ.s:501    .text.RCC_MCO2Config:0000000000000000 $t
     /tmp/ccqlGgFJ.s:508    .text.RCC_MCO2Config:0000000000000000 RCC_MCO2Config
     /tmp/ccqlGgFJ.s:535    .text.RCC_MCO2Config:0000000000000010 $d
     /tmp/ccqlGgFJ.s:540    .text.RCC_SYSCLKConfig:0000000000000000 $t
     /tmp/ccqlGgFJ.s:547    .text.RCC_SYSCLKConfig:0000000000000000 RCC_SYSCLKConfig
     /tmp/ccqlGgFJ.s:572    .text.RCC_SYSCLKConfig:0000000000000010 $d
     /tmp/ccqlGgFJ.s:577    .text.RCC_GetSYSCLKSource:0000000000000000 $t
     /tmp/ccqlGgFJ.s:584    .text.RCC_GetSYSCLKSource:0000000000000000 RCC_GetSYSCLKSource
     /tmp/ccqlGgFJ.s:600    .text.RCC_GetSYSCLKSource:000000000000000c $d
     /tmp/ccqlGgFJ.s:605    .text.RCC_HCLKConfig:0000000000000000 $t
     /tmp/ccqlGgFJ.s:612    .text.RCC_HCLKConfig:0000000000000000 RCC_HCLKConfig
     /tmp/ccqlGgFJ.s:637    .text.RCC_HCLKConfig:0000000000000010 $d
     /tmp/ccqlGgFJ.s:642    .text.RCC_PCLK1Config:0000000000000000 $t
ARM GAS  /tmp/ccqlGgFJ.s 			page 81


     /tmp/ccqlGgFJ.s:649    .text.RCC_PCLK1Config:0000000000000000 RCC_PCLK1Config
     /tmp/ccqlGgFJ.s:674    .text.RCC_PCLK1Config:0000000000000010 $d
     /tmp/ccqlGgFJ.s:679    .text.RCC_PCLK2Config:0000000000000000 $t
     /tmp/ccqlGgFJ.s:686    .text.RCC_PCLK2Config:0000000000000000 RCC_PCLK2Config
     /tmp/ccqlGgFJ.s:711    .text.RCC_PCLK2Config:0000000000000010 $d
     /tmp/ccqlGgFJ.s:716    .text.RCC_GetClocksFreq:0000000000000000 $t
     /tmp/ccqlGgFJ.s:723    .text.RCC_GetClocksFreq:0000000000000000 RCC_GetClocksFreq
     /tmp/ccqlGgFJ.s:878    .text.RCC_GetClocksFreq:00000000000000a8 $d
     /tmp/ccqlGgFJ.s:886    .text.RCC_RTCCLKConfig:0000000000000000 $t
     /tmp/ccqlGgFJ.s:893    .text.RCC_RTCCLKConfig:0000000000000000 RCC_RTCCLKConfig
     /tmp/ccqlGgFJ.s:936    .text.RCC_RTCCLKConfig:0000000000000030 $d
     /tmp/ccqlGgFJ.s:941    .text.RCC_RTCCLKCmd:0000000000000000 $t
     /tmp/ccqlGgFJ.s:948    .text.RCC_RTCCLKCmd:0000000000000000 RCC_RTCCLKCmd
     /tmp/ccqlGgFJ.s:964    .text.RCC_RTCCLKCmd:0000000000000008 $d
     /tmp/ccqlGgFJ.s:969    .text.RCC_BackupResetCmd:0000000000000000 $t
     /tmp/ccqlGgFJ.s:976    .text.RCC_BackupResetCmd:0000000000000000 RCC_BackupResetCmd
     /tmp/ccqlGgFJ.s:992    .text.RCC_BackupResetCmd:0000000000000008 $d
     /tmp/ccqlGgFJ.s:997    .text.RCC_I2SCLKConfig:0000000000000000 $t
     /tmp/ccqlGgFJ.s:1004   .text.RCC_I2SCLKConfig:0000000000000000 RCC_I2SCLKConfig
     /tmp/ccqlGgFJ.s:1020   .text.RCC_I2SCLKConfig:0000000000000008 $d
     /tmp/ccqlGgFJ.s:1025   .text.RCC_SAIPLLI2SClkDivConfig:0000000000000000 $t
     /tmp/ccqlGgFJ.s:1032   .text.RCC_SAIPLLI2SClkDivConfig:0000000000000000 RCC_SAIPLLI2SClkDivConfig
     /tmp/ccqlGgFJ.s:1059   .text.RCC_SAIPLLI2SClkDivConfig:0000000000000014 $d
     /tmp/ccqlGgFJ.s:1064   .text.RCC_SAIPLLSAIClkDivConfig:0000000000000000 $t
     /tmp/ccqlGgFJ.s:1071   .text.RCC_SAIPLLSAIClkDivConfig:0000000000000000 RCC_SAIPLLSAIClkDivConfig
     /tmp/ccqlGgFJ.s:1098   .text.RCC_SAIPLLSAIClkDivConfig:0000000000000018 $d
     /tmp/ccqlGgFJ.s:1103   .text.RCC_SAIBlockACLKConfig:0000000000000000 $t
     /tmp/ccqlGgFJ.s:1110   .text.RCC_SAIBlockACLKConfig:0000000000000000 RCC_SAIBlockACLKConfig
     /tmp/ccqlGgFJ.s:1135   .text.RCC_SAIBlockACLKConfig:0000000000000014 $d
     /tmp/ccqlGgFJ.s:1140   .text.RCC_SAIBlockBCLKConfig:0000000000000000 $t
     /tmp/ccqlGgFJ.s:1147   .text.RCC_SAIBlockBCLKConfig:0000000000000000 RCC_SAIBlockBCLKConfig
     /tmp/ccqlGgFJ.s:1172   .text.RCC_SAIBlockBCLKConfig:0000000000000014 $d
     /tmp/ccqlGgFJ.s:1177   .text.RCC_LTDCCLKDivConfig:0000000000000000 $t
     /tmp/ccqlGgFJ.s:1184   .text.RCC_LTDCCLKDivConfig:0000000000000000 RCC_LTDCCLKDivConfig
     /tmp/ccqlGgFJ.s:1209   .text.RCC_LTDCCLKDivConfig:0000000000000014 $d
     /tmp/ccqlGgFJ.s:1214   .text.RCC_TIMCLKPresConfig:0000000000000000 $t
     /tmp/ccqlGgFJ.s:1221   .text.RCC_TIMCLKPresConfig:0000000000000000 RCC_TIMCLKPresConfig
     /tmp/ccqlGgFJ.s:1237   .text.RCC_TIMCLKPresConfig:0000000000000008 $d
     /tmp/ccqlGgFJ.s:1242   .text.RCC_AHB1PeriphClockCmd:0000000000000000 $t
     /tmp/ccqlGgFJ.s:1249   .text.RCC_AHB1PeriphClockCmd:0000000000000000 RCC_AHB1PeriphClockCmd
     /tmp/ccqlGgFJ.s:1279   .text.RCC_AHB1PeriphClockCmd:0000000000000018 $d
     /tmp/ccqlGgFJ.s:1284   .text.RCC_AHB2PeriphClockCmd:0000000000000000 $t
     /tmp/ccqlGgFJ.s:1291   .text.RCC_AHB2PeriphClockCmd:0000000000000000 RCC_AHB2PeriphClockCmd
     /tmp/ccqlGgFJ.s:1321   .text.RCC_AHB2PeriphClockCmd:0000000000000018 $d
     /tmp/ccqlGgFJ.s:1326   .text.RCC_AHB3PeriphClockCmd:0000000000000000 $t
     /tmp/ccqlGgFJ.s:1333   .text.RCC_AHB3PeriphClockCmd:0000000000000000 RCC_AHB3PeriphClockCmd
     /tmp/ccqlGgFJ.s:1363   .text.RCC_AHB3PeriphClockCmd:0000000000000018 $d
     /tmp/ccqlGgFJ.s:1368   .text.RCC_APB1PeriphClockCmd:0000000000000000 $t
     /tmp/ccqlGgFJ.s:1375   .text.RCC_APB1PeriphClockCmd:0000000000000000 RCC_APB1PeriphClockCmd
     /tmp/ccqlGgFJ.s:1405   .text.RCC_APB1PeriphClockCmd:0000000000000018 $d
     /tmp/ccqlGgFJ.s:1410   .text.RCC_APB2PeriphClockCmd:0000000000000000 $t
     /tmp/ccqlGgFJ.s:1417   .text.RCC_APB2PeriphClockCmd:0000000000000000 RCC_APB2PeriphClockCmd
     /tmp/ccqlGgFJ.s:1447   .text.RCC_APB2PeriphClockCmd:0000000000000018 $d
     /tmp/ccqlGgFJ.s:1452   .text.RCC_AHB1PeriphResetCmd:0000000000000000 $t
     /tmp/ccqlGgFJ.s:1459   .text.RCC_AHB1PeriphResetCmd:0000000000000000 RCC_AHB1PeriphResetCmd
     /tmp/ccqlGgFJ.s:1489   .text.RCC_AHB1PeriphResetCmd:0000000000000018 $d
     /tmp/ccqlGgFJ.s:1494   .text.RCC_AHB2PeriphResetCmd:0000000000000000 $t
ARM GAS  /tmp/ccqlGgFJ.s 			page 82


     /tmp/ccqlGgFJ.s:1501   .text.RCC_AHB2PeriphResetCmd:0000000000000000 RCC_AHB2PeriphResetCmd
     /tmp/ccqlGgFJ.s:1531   .text.RCC_AHB2PeriphResetCmd:0000000000000018 $d
     /tmp/ccqlGgFJ.s:1536   .text.RCC_AHB3PeriphResetCmd:0000000000000000 $t
     /tmp/ccqlGgFJ.s:1543   .text.RCC_AHB3PeriphResetCmd:0000000000000000 RCC_AHB3PeriphResetCmd
     /tmp/ccqlGgFJ.s:1573   .text.RCC_AHB3PeriphResetCmd:0000000000000018 $d
     /tmp/ccqlGgFJ.s:1578   .text.RCC_APB1PeriphResetCmd:0000000000000000 $t
     /tmp/ccqlGgFJ.s:1585   .text.RCC_APB1PeriphResetCmd:0000000000000000 RCC_APB1PeriphResetCmd
     /tmp/ccqlGgFJ.s:1615   .text.RCC_APB1PeriphResetCmd:0000000000000018 $d
     /tmp/ccqlGgFJ.s:1620   .text.RCC_APB2PeriphResetCmd:0000000000000000 $t
     /tmp/ccqlGgFJ.s:1627   .text.RCC_APB2PeriphResetCmd:0000000000000000 RCC_APB2PeriphResetCmd
     /tmp/ccqlGgFJ.s:1657   .text.RCC_APB2PeriphResetCmd:0000000000000018 $d
     /tmp/ccqlGgFJ.s:1662   .text.RCC_AHB1PeriphClockLPModeCmd:0000000000000000 $t
     /tmp/ccqlGgFJ.s:1669   .text.RCC_AHB1PeriphClockLPModeCmd:0000000000000000 RCC_AHB1PeriphClockLPModeCmd
     /tmp/ccqlGgFJ.s:1699   .text.RCC_AHB1PeriphClockLPModeCmd:0000000000000018 $d
     /tmp/ccqlGgFJ.s:1704   .text.RCC_AHB2PeriphClockLPModeCmd:0000000000000000 $t
     /tmp/ccqlGgFJ.s:1711   .text.RCC_AHB2PeriphClockLPModeCmd:0000000000000000 RCC_AHB2PeriphClockLPModeCmd
     /tmp/ccqlGgFJ.s:1741   .text.RCC_AHB2PeriphClockLPModeCmd:0000000000000018 $d
     /tmp/ccqlGgFJ.s:1746   .text.RCC_AHB3PeriphClockLPModeCmd:0000000000000000 $t
     /tmp/ccqlGgFJ.s:1753   .text.RCC_AHB3PeriphClockLPModeCmd:0000000000000000 RCC_AHB3PeriphClockLPModeCmd
     /tmp/ccqlGgFJ.s:1783   .text.RCC_AHB3PeriphClockLPModeCmd:0000000000000018 $d
     /tmp/ccqlGgFJ.s:1788   .text.RCC_APB1PeriphClockLPModeCmd:0000000000000000 $t
     /tmp/ccqlGgFJ.s:1795   .text.RCC_APB1PeriphClockLPModeCmd:0000000000000000 RCC_APB1PeriphClockLPModeCmd
     /tmp/ccqlGgFJ.s:1825   .text.RCC_APB1PeriphClockLPModeCmd:0000000000000018 $d
     /tmp/ccqlGgFJ.s:1830   .text.RCC_APB2PeriphClockLPModeCmd:0000000000000000 $t
     /tmp/ccqlGgFJ.s:1837   .text.RCC_APB2PeriphClockLPModeCmd:0000000000000000 RCC_APB2PeriphClockLPModeCmd
     /tmp/ccqlGgFJ.s:1867   .text.RCC_APB2PeriphClockLPModeCmd:0000000000000018 $d
     /tmp/ccqlGgFJ.s:1872   .text.RCC_LSEModeConfig:0000000000000000 $t
     /tmp/ccqlGgFJ.s:1879   .text.RCC_LSEModeConfig:0000000000000000 RCC_LSEModeConfig
     /tmp/ccqlGgFJ.s:1907   .text.RCC_LSEModeConfig:000000000000001c $d
     /tmp/ccqlGgFJ.s:1912   .text.RCC_ITConfig:0000000000000000 $t
     /tmp/ccqlGgFJ.s:1919   .text.RCC_ITConfig:0000000000000000 RCC_ITConfig
     /tmp/ccqlGgFJ.s:1949   .text.RCC_ITConfig:0000000000000018 $d
     /tmp/ccqlGgFJ.s:1954   .text.RCC_GetFlagStatus:0000000000000000 $t
     /tmp/ccqlGgFJ.s:1961   .text.RCC_GetFlagStatus:0000000000000000 RCC_GetFlagStatus
     /tmp/ccqlGgFJ.s:2021   .text.RCC_GetFlagStatus:0000000000000030 $d
     /tmp/ccqlGgFJ.s:2026   .text.RCC_WaitForHSEStartUp:0000000000000000 $t
     /tmp/ccqlGgFJ.s:2033   .text.RCC_WaitForHSEStartUp:0000000000000000 RCC_WaitForHSEStartUp
     /tmp/ccqlGgFJ.s:2095   .text.RCC_ClearFlag:0000000000000000 $t
     /tmp/ccqlGgFJ.s:2102   .text.RCC_ClearFlag:0000000000000000 RCC_ClearFlag
     /tmp/ccqlGgFJ.s:2119   .text.RCC_ClearFlag:000000000000000c $d
     /tmp/ccqlGgFJ.s:2124   .text.RCC_GetITStatus:0000000000000000 $t
     /tmp/ccqlGgFJ.s:2131   .text.RCC_GetITStatus:0000000000000000 RCC_GetITStatus
     /tmp/ccqlGgFJ.s:2158   .text.RCC_GetITStatus:0000000000000010 $d
     /tmp/ccqlGgFJ.s:2163   .text.RCC_ClearITPendingBit:0000000000000000 $t
     /tmp/ccqlGgFJ.s:2170   .text.RCC_ClearITPendingBit:0000000000000000 RCC_ClearITPendingBit
     /tmp/ccqlGgFJ.s:2186   .text.RCC_ClearITPendingBit:0000000000000008 $d
     /tmp/ccqlGgFJ.s:2191   .data.APBAHBPrescTable:0000000000000000 $d
     /tmp/ccqlGgFJ.s:2195   .data.APBAHBPrescTable:0000000000000000 APBAHBPrescTable

NO UNDEFINED SYMBOLS
