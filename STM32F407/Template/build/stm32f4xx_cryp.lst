ARM GAS  /tmp/ccOoDJj1.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_cryp.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.CRYP_DeInit,"ax",%progbits
  18              		.align	1
  19              		.global	CRYP_DeInit
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	CRYP_DeInit:
  26              	.LFB112:
  27              		.file 1 "./FWLIB/src/stm32f4xx_cryp.c"
   1:./FWLIB/src/stm32f4xx_cryp.c **** /**
   2:./FWLIB/src/stm32f4xx_cryp.c ****   ******************************************************************************
   3:./FWLIB/src/stm32f4xx_cryp.c ****   * @file    stm32f4xx_cryp.c
   4:./FWLIB/src/stm32f4xx_cryp.c ****   * @author  MCD Application Team
   5:./FWLIB/src/stm32f4xx_cryp.c ****   * @version V1.4.0
   6:./FWLIB/src/stm32f4xx_cryp.c ****   * @date    04-August-2014
   7:./FWLIB/src/stm32f4xx_cryp.c ****   * @brief   This file provides firmware functions to manage the following 
   8:./FWLIB/src/stm32f4xx_cryp.c ****   *          functionalities of the  Cryptographic processor (CRYP) peripheral:
   9:./FWLIB/src/stm32f4xx_cryp.c ****   *           + Initialization and Configuration functions
  10:./FWLIB/src/stm32f4xx_cryp.c ****   *           + Data treatment functions 
  11:./FWLIB/src/stm32f4xx_cryp.c ****   *           + Context swapping functions     
  12:./FWLIB/src/stm32f4xx_cryp.c ****   *           + DMA interface function       
  13:./FWLIB/src/stm32f4xx_cryp.c ****   *           + Interrupts and flags management       
  14:./FWLIB/src/stm32f4xx_cryp.c ****   *
  15:./FWLIB/src/stm32f4xx_cryp.c **** @verbatim
  16:./FWLIB/src/stm32f4xx_cryp.c ****  ===================================================================      
  17:./FWLIB/src/stm32f4xx_cryp.c ****                  ##### How to use this driver #####
  18:./FWLIB/src/stm32f4xx_cryp.c ****  =================================================================== 
  19:./FWLIB/src/stm32f4xx_cryp.c ****  [..]
  20:./FWLIB/src/stm32f4xx_cryp.c ****    (#) Enable the CRYP controller clock using 
  21:./FWLIB/src/stm32f4xx_cryp.c ****        RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_CRYP, ENABLE); function.
  22:./FWLIB/src/stm32f4xx_cryp.c ****   
  23:./FWLIB/src/stm32f4xx_cryp.c ****    (#) Initialise the CRYP using CRYP_Init(), CRYP_KeyInit() and if needed 
  24:./FWLIB/src/stm32f4xx_cryp.c ****        CRYP_IVInit(). 
  25:./FWLIB/src/stm32f4xx_cryp.c ****   
  26:./FWLIB/src/stm32f4xx_cryp.c ****    (#) Flush the IN and OUT FIFOs by using CRYP_FIFOFlush() function.
  27:./FWLIB/src/stm32f4xx_cryp.c ****   
  28:./FWLIB/src/stm32f4xx_cryp.c ****    (#) Enable the CRYP controller using the CRYP_Cmd() function. 
  29:./FWLIB/src/stm32f4xx_cryp.c ****   
  30:./FWLIB/src/stm32f4xx_cryp.c ****    (#) If using DMA for Data input and output transfer, activate the needed DMA 
  31:./FWLIB/src/stm32f4xx_cryp.c ****        Requests using CRYP_DMACmd() function 
ARM GAS  /tmp/ccOoDJj1.s 			page 2


  32:./FWLIB/src/stm32f4xx_cryp.c ****   
  33:./FWLIB/src/stm32f4xx_cryp.c ****    (#) If DMA is not used for data transfer, use CRYP_DataIn() and  CRYP_DataOut() 
  34:./FWLIB/src/stm32f4xx_cryp.c ****        functions to enter data to IN FIFO and get result from OUT FIFO.
  35:./FWLIB/src/stm32f4xx_cryp.c ****   
  36:./FWLIB/src/stm32f4xx_cryp.c ****    (#) To control CRYP events you can use one of the following two methods:
  37:./FWLIB/src/stm32f4xx_cryp.c ****        (++) Check on CRYP flags using the CRYP_GetFlagStatus() function.  
  38:./FWLIB/src/stm32f4xx_cryp.c ****        (++) Use CRYP interrupts through the function CRYP_ITConfig() at 
  39:./FWLIB/src/stm32f4xx_cryp.c ****             initialization phase and CRYP_GetITStatus() function into interrupt 
  40:./FWLIB/src/stm32f4xx_cryp.c ****             routines in processing phase.
  41:./FWLIB/src/stm32f4xx_cryp.c ****          
  42:./FWLIB/src/stm32f4xx_cryp.c ****    (#) Save and restore Cryptographic processor context using CRYP_SaveContext() 
  43:./FWLIB/src/stm32f4xx_cryp.c ****        and CRYP_RestoreContext() functions.     
  44:./FWLIB/src/stm32f4xx_cryp.c ****   
  45:./FWLIB/src/stm32f4xx_cryp.c ****   
  46:./FWLIB/src/stm32f4xx_cryp.c ****  *** Procedure to perform an encryption or a decryption ***
  47:./FWLIB/src/stm32f4xx_cryp.c ****  ========================================================== 
  48:./FWLIB/src/stm32f4xx_cryp.c ****   
  49:./FWLIB/src/stm32f4xx_cryp.c ****  *** Initialization ***
  50:./FWLIB/src/stm32f4xx_cryp.c ****  ====================== 
  51:./FWLIB/src/stm32f4xx_cryp.c ****  [..] 
  52:./FWLIB/src/stm32f4xx_cryp.c ****    (#) Initialize the peripheral using CRYP_Init(), CRYP_KeyInit() and CRYP_IVInit 
  53:./FWLIB/src/stm32f4xx_cryp.c ****        functions:
  54:./FWLIB/src/stm32f4xx_cryp.c ****        (++) Configure the key size (128-, 192- or 256-bit, in the AES only) 
  55:./FWLIB/src/stm32f4xx_cryp.c ****        (++) Enter the symmetric key 
  56:./FWLIB/src/stm32f4xx_cryp.c ****        (++) Configure the data type
  57:./FWLIB/src/stm32f4xx_cryp.c ****        (++) In case of decryption in AES-ECB or AES-CBC, you must prepare 
  58:./FWLIB/src/stm32f4xx_cryp.c ****             the key: configure the key preparation mode. Then Enable the CRYP 
  59:./FWLIB/src/stm32f4xx_cryp.c ****             peripheral using CRYP_Cmd() function: the BUSY flag is set. 
  60:./FWLIB/src/stm32f4xx_cryp.c ****             Wait until BUSY flag is reset : the key is prepared for decryption
  61:./FWLIB/src/stm32f4xx_cryp.c ****        (++) Configure the algorithm and chaining (the DES/TDES in ECB/CBC, the 
  62:./FWLIB/src/stm32f4xx_cryp.c ****             AES in ECB/CBC/CTR) 
  63:./FWLIB/src/stm32f4xx_cryp.c ****        (++) Configure the direction (encryption/decryption).
  64:./FWLIB/src/stm32f4xx_cryp.c ****        (++) Write the initialization vectors (in CBC or CTR modes only)
  65:./FWLIB/src/stm32f4xx_cryp.c ****   
  66:./FWLIB/src/stm32f4xx_cryp.c ****    (#) Flush the IN and OUT FIFOs using the CRYP_FIFOFlush() function
  67:./FWLIB/src/stm32f4xx_cryp.c ****   
  68:./FWLIB/src/stm32f4xx_cryp.c ****   
  69:./FWLIB/src/stm32f4xx_cryp.c ****   *** Basic Processing mode (polling mode) *** 
  70:./FWLIB/src/stm32f4xx_cryp.c ****   ============================================  
  71:./FWLIB/src/stm32f4xx_cryp.c ****   [..]
  72:./FWLIB/src/stm32f4xx_cryp.c ****     (#) Enable the cryptographic processor using CRYP_Cmd() function.
  73:./FWLIB/src/stm32f4xx_cryp.c ****   
  74:./FWLIB/src/stm32f4xx_cryp.c ****     (#) Write the first blocks in the input FIFO (2 to 8 words) using 
  75:./FWLIB/src/stm32f4xx_cryp.c ****         CRYP_DataIn() function.
  76:./FWLIB/src/stm32f4xx_cryp.c ****   
  77:./FWLIB/src/stm32f4xx_cryp.c ****     (#) Repeat the following sequence until the complete message has been 
  78:./FWLIB/src/stm32f4xx_cryp.c ****         processed:
  79:./FWLIB/src/stm32f4xx_cryp.c ****   
  80:./FWLIB/src/stm32f4xx_cryp.c ****         (++) Wait for flag CRYP_FLAG_OFNE occurs (using CRYP_GetFlagStatus() 
  81:./FWLIB/src/stm32f4xx_cryp.c ****             function), then read the OUT-FIFO using CRYP_DataOut() function
  82:./FWLIB/src/stm32f4xx_cryp.c ****             (1 block or until the FIFO is empty)
  83:./FWLIB/src/stm32f4xx_cryp.c ****   
  84:./FWLIB/src/stm32f4xx_cryp.c ****          (++) Wait for flag CRYP_FLAG_IFNF occurs, (using CRYP_GetFlagStatus() 
  85:./FWLIB/src/stm32f4xx_cryp.c ****             function then write the IN FIFO using CRYP_DataIn() function 
  86:./FWLIB/src/stm32f4xx_cryp.c ****             (1 block or until the FIFO is full)
  87:./FWLIB/src/stm32f4xx_cryp.c ****   
  88:./FWLIB/src/stm32f4xx_cryp.c ****     (#) At the end of the processing, CRYP_FLAG_BUSY flag will be reset and 
ARM GAS  /tmp/ccOoDJj1.s 			page 3


  89:./FWLIB/src/stm32f4xx_cryp.c ****           both FIFOs are empty (CRYP_FLAG_IFEM is set and CRYP_FLAG_OFNE is 
  90:./FWLIB/src/stm32f4xx_cryp.c ****           reset). You can disable the peripheral using CRYP_Cmd() function.
  91:./FWLIB/src/stm32f4xx_cryp.c ****   
  92:./FWLIB/src/stm32f4xx_cryp.c ****  *** Interrupts Processing mode *** 
  93:./FWLIB/src/stm32f4xx_cryp.c ****  ==================================
  94:./FWLIB/src/stm32f4xx_cryp.c ****  [..] In this mode, Processing is done when the data are transferred by the 
  95:./FWLIB/src/stm32f4xx_cryp.c ****       CPU during interrupts.
  96:./FWLIB/src/stm32f4xx_cryp.c ****   
  97:./FWLIB/src/stm32f4xx_cryp.c ****     (#) Enable the interrupts CRYP_IT_INI and CRYP_IT_OUTI using CRYP_ITConfig()
  98:./FWLIB/src/stm32f4xx_cryp.c ****         function.
  99:./FWLIB/src/stm32f4xx_cryp.c ****   
 100:./FWLIB/src/stm32f4xx_cryp.c ****     (#) Enable the cryptographic processor using CRYP_Cmd() function.
 101:./FWLIB/src/stm32f4xx_cryp.c ****   
 102:./FWLIB/src/stm32f4xx_cryp.c ****     (#) In the CRYP_IT_INI interrupt handler : load the input message into the 
 103:./FWLIB/src/stm32f4xx_cryp.c ****          IN FIFO using CRYP_DataIn() function . You can load 2 or 4 words at a 
 104:./FWLIB/src/stm32f4xx_cryp.c ****          time, or load data until the IN FIFO is full. When the last word of
 105:./FWLIB/src/stm32f4xx_cryp.c ****          the message has been entered into the IN FIFO, disable the CRYP_IT_INI 
 106:./FWLIB/src/stm32f4xx_cryp.c ****          interrupt (using CRYP_ITConfig() function).
 107:./FWLIB/src/stm32f4xx_cryp.c ****   
 108:./FWLIB/src/stm32f4xx_cryp.c ****     (#) In the CRYP_IT_OUTI interrupt handler : read the output message from 
 109:./FWLIB/src/stm32f4xx_cryp.c ****          the OUT FIFO using CRYP_DataOut() function. You can read 1 block (2 or 
 110:./FWLIB/src/stm32f4xx_cryp.c ****          4 words) at a time or read data until the FIFO is empty.
 111:./FWLIB/src/stm32f4xx_cryp.c ****          When the last word has been read, INIM=0, BUSY=0 and both FIFOs are 
 112:./FWLIB/src/stm32f4xx_cryp.c ****          empty (CRYP_FLAG_IFEM is set and CRYP_FLAG_OFNE is reset). 
 113:./FWLIB/src/stm32f4xx_cryp.c ****          You can disable the CRYP_IT_OUTI interrupt (using CRYP_ITConfig() 
 114:./FWLIB/src/stm32f4xx_cryp.c ****          function) and you can disable the peripheral using CRYP_Cmd() function.
 115:./FWLIB/src/stm32f4xx_cryp.c ****   
 116:./FWLIB/src/stm32f4xx_cryp.c ****  *** DMA Processing mode *** 
 117:./FWLIB/src/stm32f4xx_cryp.c ****  ===========================
 118:./FWLIB/src/stm32f4xx_cryp.c ****  [..] In this mode, Processing is done when the DMA is used to transfer the 
 119:./FWLIB/src/stm32f4xx_cryp.c ****       data from/to the memory.
 120:./FWLIB/src/stm32f4xx_cryp.c ****   
 121:./FWLIB/src/stm32f4xx_cryp.c ****     (#) Configure the DMA controller to transfer the input data from the 
 122:./FWLIB/src/stm32f4xx_cryp.c ****          memory using DMA_Init() function. 
 123:./FWLIB/src/stm32f4xx_cryp.c ****          The transfer length is the length of the message. 
 124:./FWLIB/src/stm32f4xx_cryp.c ****          As message padding is not managed by the peripheral, the message 
 125:./FWLIB/src/stm32f4xx_cryp.c ****          length must be an entire number of blocks. The data are transferred 
 126:./FWLIB/src/stm32f4xx_cryp.c ****          in burst mode. The burst length is 4 words in the AES and 2 or 4 
 127:./FWLIB/src/stm32f4xx_cryp.c ****          words in the DES/TDES. The DMA should be configured to set an 
 128:./FWLIB/src/stm32f4xx_cryp.c ****          interrupt on transfer completion of the output data to indicate that 
 129:./FWLIB/src/stm32f4xx_cryp.c ****          the processing is finished. 
 130:./FWLIB/src/stm32f4xx_cryp.c ****          Refer to DMA peripheral driver for more details.  
 131:./FWLIB/src/stm32f4xx_cryp.c ****   
 132:./FWLIB/src/stm32f4xx_cryp.c ****      (#) Enable the cryptographic processor using CRYP_Cmd() function. 
 133:./FWLIB/src/stm32f4xx_cryp.c ****          Enable the DMA requests CRYP_DMAReq_DataIN and CRYP_DMAReq_DataOUT 
 134:./FWLIB/src/stm32f4xx_cryp.c ****          using CRYP_DMACmd() function.
 135:./FWLIB/src/stm32f4xx_cryp.c ****   
 136:./FWLIB/src/stm32f4xx_cryp.c ****      (#) All the transfers and processing are managed by the DMA and the 
 137:./FWLIB/src/stm32f4xx_cryp.c ****          cryptographic processor. The DMA transfer complete interrupt indicates 
 138:./FWLIB/src/stm32f4xx_cryp.c ****          that the processing is complete. Both FIFOs are normally empty and 
 139:./FWLIB/src/stm32f4xx_cryp.c ****          CRYP_FLAG_BUSY flag is reset.
 140:./FWLIB/src/stm32f4xx_cryp.c ****   
 141:./FWLIB/src/stm32f4xx_cryp.c ****     @endverbatim
 142:./FWLIB/src/stm32f4xx_cryp.c ****   *
 143:./FWLIB/src/stm32f4xx_cryp.c ****   ******************************************************************************
 144:./FWLIB/src/stm32f4xx_cryp.c ****   * @attention
 145:./FWLIB/src/stm32f4xx_cryp.c ****   *
ARM GAS  /tmp/ccOoDJj1.s 			page 4


 146:./FWLIB/src/stm32f4xx_cryp.c ****   * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
 147:./FWLIB/src/stm32f4xx_cryp.c ****   *
 148:./FWLIB/src/stm32f4xx_cryp.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
 149:./FWLIB/src/stm32f4xx_cryp.c ****   * You may not use this file except in compliance with the License.
 150:./FWLIB/src/stm32f4xx_cryp.c ****   * You may obtain a copy of the License at:
 151:./FWLIB/src/stm32f4xx_cryp.c ****   *
 152:./FWLIB/src/stm32f4xx_cryp.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
 153:./FWLIB/src/stm32f4xx_cryp.c ****   *
 154:./FWLIB/src/stm32f4xx_cryp.c ****   * Unless required by applicable law or agreed to in writing, software 
 155:./FWLIB/src/stm32f4xx_cryp.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
 156:./FWLIB/src/stm32f4xx_cryp.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 157:./FWLIB/src/stm32f4xx_cryp.c ****   * See the License for the specific language governing permissions and
 158:./FWLIB/src/stm32f4xx_cryp.c ****   * limitations under the License.
 159:./FWLIB/src/stm32f4xx_cryp.c ****   *
 160:./FWLIB/src/stm32f4xx_cryp.c ****   ******************************************************************************  
 161:./FWLIB/src/stm32f4xx_cryp.c ****   */
 162:./FWLIB/src/stm32f4xx_cryp.c **** 
 163:./FWLIB/src/stm32f4xx_cryp.c **** /* Includes ------------------------------------------------------------------*/
 164:./FWLIB/src/stm32f4xx_cryp.c **** #include "stm32f4xx_cryp.h"
 165:./FWLIB/src/stm32f4xx_cryp.c **** #include "stm32f4xx_rcc.h"
 166:./FWLIB/src/stm32f4xx_cryp.c **** 
 167:./FWLIB/src/stm32f4xx_cryp.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 168:./FWLIB/src/stm32f4xx_cryp.c ****   * @{
 169:./FWLIB/src/stm32f4xx_cryp.c ****   */
 170:./FWLIB/src/stm32f4xx_cryp.c **** 
 171:./FWLIB/src/stm32f4xx_cryp.c **** /** @defgroup CRYP 
 172:./FWLIB/src/stm32f4xx_cryp.c ****   * @brief CRYP driver modules
 173:./FWLIB/src/stm32f4xx_cryp.c ****   * @{
 174:./FWLIB/src/stm32f4xx_cryp.c ****   */ 
 175:./FWLIB/src/stm32f4xx_cryp.c **** 
 176:./FWLIB/src/stm32f4xx_cryp.c **** /* Private typedef -----------------------------------------------------------*/
 177:./FWLIB/src/stm32f4xx_cryp.c **** /* Private define ------------------------------------------------------------*/
 178:./FWLIB/src/stm32f4xx_cryp.c **** #define FLAG_MASK     ((uint8_t)0x20)
 179:./FWLIB/src/stm32f4xx_cryp.c **** #define MAX_TIMEOUT   ((uint16_t)0xFFFF)
 180:./FWLIB/src/stm32f4xx_cryp.c **** 
 181:./FWLIB/src/stm32f4xx_cryp.c **** /* Private macro -------------------------------------------------------------*/
 182:./FWLIB/src/stm32f4xx_cryp.c **** /* Private variables ---------------------------------------------------------*/
 183:./FWLIB/src/stm32f4xx_cryp.c **** /* Private function prototypes -----------------------------------------------*/
 184:./FWLIB/src/stm32f4xx_cryp.c **** /* Private functions ---------------------------------------------------------*/
 185:./FWLIB/src/stm32f4xx_cryp.c **** 
 186:./FWLIB/src/stm32f4xx_cryp.c **** /** @defgroup CRYP_Private_Functions
 187:./FWLIB/src/stm32f4xx_cryp.c ****   * @{
 188:./FWLIB/src/stm32f4xx_cryp.c ****   */ 
 189:./FWLIB/src/stm32f4xx_cryp.c **** 
 190:./FWLIB/src/stm32f4xx_cryp.c **** /** @defgroup CRYP_Group1 Initialization and Configuration functions
 191:./FWLIB/src/stm32f4xx_cryp.c ****  *  @brief    Initialization and Configuration functions 
 192:./FWLIB/src/stm32f4xx_cryp.c ****  *
 193:./FWLIB/src/stm32f4xx_cryp.c **** @verbatim    
 194:./FWLIB/src/stm32f4xx_cryp.c ****  ===============================================================================
 195:./FWLIB/src/stm32f4xx_cryp.c ****              ##### Initialization and Configuration functions #####
 196:./FWLIB/src/stm32f4xx_cryp.c ****  ===============================================================================  
 197:./FWLIB/src/stm32f4xx_cryp.c ****  [..] This section provides functions allowing to 
 198:./FWLIB/src/stm32f4xx_cryp.c ****    (+) Initialize the cryptographic Processor using CRYP_Init() function 
 199:./FWLIB/src/stm32f4xx_cryp.c ****        (++)  Encrypt or Decrypt 
 200:./FWLIB/src/stm32f4xx_cryp.c ****        (++)  mode : TDES-ECB, TDES-CBC, 
 201:./FWLIB/src/stm32f4xx_cryp.c ****                     DES-ECB, DES-CBC, 
 202:./FWLIB/src/stm32f4xx_cryp.c ****                     AES-ECB, AES-CBC, AES-CTR, AES-Key, AES-GCM, AES-CCM 
ARM GAS  /tmp/ccOoDJj1.s 			page 5


 203:./FWLIB/src/stm32f4xx_cryp.c ****        (++) DataType :  32-bit data, 16-bit data, bit data or bit-string
 204:./FWLIB/src/stm32f4xx_cryp.c ****        (++) Key Size (only in AES modes)
 205:./FWLIB/src/stm32f4xx_cryp.c ****    (+) Configure the Encrypt or Decrypt Key using CRYP_KeyInit() function 
 206:./FWLIB/src/stm32f4xx_cryp.c ****    (+) Configure the Initialization Vectors(IV) for CBC and CTR modes using 
 207:./FWLIB/src/stm32f4xx_cryp.c ****        CRYP_IVInit() function.  
 208:./FWLIB/src/stm32f4xx_cryp.c ****    (+) Flushes the IN and OUT FIFOs : using CRYP_FIFOFlush() function.                         
 209:./FWLIB/src/stm32f4xx_cryp.c ****    (+) Enable or disable the CRYP Processor using CRYP_Cmd() function 
 210:./FWLIB/src/stm32f4xx_cryp.c ****        
 211:./FWLIB/src/stm32f4xx_cryp.c **** @endverbatim
 212:./FWLIB/src/stm32f4xx_cryp.c ****   * @{
 213:./FWLIB/src/stm32f4xx_cryp.c ****   */
 214:./FWLIB/src/stm32f4xx_cryp.c **** /**
 215:./FWLIB/src/stm32f4xx_cryp.c ****   * @brief  Deinitializes the CRYP peripheral registers to their default reset values
 216:./FWLIB/src/stm32f4xx_cryp.c ****   * @param  None
 217:./FWLIB/src/stm32f4xx_cryp.c ****   * @retval None
 218:./FWLIB/src/stm32f4xx_cryp.c ****   */
 219:./FWLIB/src/stm32f4xx_cryp.c **** void CRYP_DeInit(void)
 220:./FWLIB/src/stm32f4xx_cryp.c **** {
  28              		.loc 1 220 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 08B5     		push	{r3, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 3, -8
  36              		.cfi_offset 14, -4
 221:./FWLIB/src/stm32f4xx_cryp.c ****   /* Enable CRYP reset state */
 222:./FWLIB/src/stm32f4xx_cryp.c ****   RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_CRYP, ENABLE);
  37              		.loc 1 222 0
  38 0002 0121     		movs	r1, #1
  39 0004 1020     		movs	r0, #16
  40 0006 FFF7FEFF 		bl	RCC_AHB2PeriphResetCmd
  41              	.LVL0:
 223:./FWLIB/src/stm32f4xx_cryp.c **** 
 224:./FWLIB/src/stm32f4xx_cryp.c ****   /* Release CRYP from reset state */
 225:./FWLIB/src/stm32f4xx_cryp.c ****   RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_CRYP, DISABLE);
  42              		.loc 1 225 0
  43 000a 0021     		movs	r1, #0
  44 000c 1020     		movs	r0, #16
  45 000e FFF7FEFF 		bl	RCC_AHB2PeriphResetCmd
  46              	.LVL1:
 226:./FWLIB/src/stm32f4xx_cryp.c **** }
  47              		.loc 1 226 0
  48 0012 08BD     		pop	{r3, pc}
  49              		.cfi_endproc
  50              	.LFE112:
  52              		.section	.text.CRYP_Init,"ax",%progbits
  53              		.align	1
  54              		.global	CRYP_Init
  55              		.syntax unified
  56              		.thumb
  57              		.thumb_func
  58              		.fpu fpv4-sp-d16
  60              	CRYP_Init:
  61              	.LFB113:
 227:./FWLIB/src/stm32f4xx_cryp.c **** 
ARM GAS  /tmp/ccOoDJj1.s 			page 6


 228:./FWLIB/src/stm32f4xx_cryp.c **** /**
 229:./FWLIB/src/stm32f4xx_cryp.c ****   * @brief  Initializes the CRYP peripheral according to the specified parameters
 230:./FWLIB/src/stm32f4xx_cryp.c ****   *         in the CRYP_InitStruct.
 231:./FWLIB/src/stm32f4xx_cryp.c ****   * @param  CRYP_InitStruct: pointer to a CRYP_InitTypeDef structure that contains
 232:./FWLIB/src/stm32f4xx_cryp.c ****   *         the configuration information for the CRYP peripheral.
 233:./FWLIB/src/stm32f4xx_cryp.c ****   * @retval None
 234:./FWLIB/src/stm32f4xx_cryp.c ****   */
 235:./FWLIB/src/stm32f4xx_cryp.c **** void CRYP_Init(CRYP_InitTypeDef* CRYP_InitStruct)
 236:./FWLIB/src/stm32f4xx_cryp.c **** {
  62              		.loc 1 236 0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 0, uses_anonymous_args = 0
  66              		@ link register save eliminated.
  67              	.LVL2:
 237:./FWLIB/src/stm32f4xx_cryp.c ****   /* Check the parameters */
 238:./FWLIB/src/stm32f4xx_cryp.c ****   assert_param(IS_CRYP_ALGOMODE(CRYP_InitStruct->CRYP_AlgoMode));
 239:./FWLIB/src/stm32f4xx_cryp.c ****   assert_param(IS_CRYP_DATATYPE(CRYP_InitStruct->CRYP_DataType));
 240:./FWLIB/src/stm32f4xx_cryp.c ****   assert_param(IS_CRYP_ALGODIR(CRYP_InitStruct->CRYP_AlgoDir));
 241:./FWLIB/src/stm32f4xx_cryp.c **** 
 242:./FWLIB/src/stm32f4xx_cryp.c ****   /* Select Algorithm mode*/  
 243:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP->CR &= ~CRYP_CR_ALGOMODE;
  68              		.loc 1 243 0
  69 0000 164B     		ldr	r3, .L5
  70 0002 1A68     		ldr	r2, [r3]
  71 0004 22F40022 		bic	r2, r2, #524288
  72 0008 22F03802 		bic	r2, r2, #56
  73 000c 1A60     		str	r2, [r3]
 244:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP->CR |= CRYP_InitStruct->CRYP_AlgoMode;
  74              		.loc 1 244 0
  75 000e 1A68     		ldr	r2, [r3]
  76 0010 4168     		ldr	r1, [r0, #4]
  77 0012 0A43     		orrs	r2, r2, r1
  78 0014 1A60     		str	r2, [r3]
 245:./FWLIB/src/stm32f4xx_cryp.c **** 
 246:./FWLIB/src/stm32f4xx_cryp.c ****   /* Select dataType */ 
 247:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP->CR &= ~CRYP_CR_DATATYPE;
  79              		.loc 1 247 0
  80 0016 1A68     		ldr	r2, [r3]
  81 0018 22F0C002 		bic	r2, r2, #192
  82 001c 1A60     		str	r2, [r3]
 248:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP->CR |= CRYP_InitStruct->CRYP_DataType;
  83              		.loc 1 248 0
  84 001e 1A68     		ldr	r2, [r3]
  85 0020 8168     		ldr	r1, [r0, #8]
  86 0022 0A43     		orrs	r2, r2, r1
  87 0024 1A60     		str	r2, [r3]
 249:./FWLIB/src/stm32f4xx_cryp.c **** 
 250:./FWLIB/src/stm32f4xx_cryp.c ****   /* select Key size (used only with AES algorithm) */
 251:./FWLIB/src/stm32f4xx_cryp.c ****   if ((CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_TDES_ECB) &&
  88              		.loc 1 251 0
  89 0026 4368     		ldr	r3, [r0, #4]
  90 0028 73B1     		cbz	r3, .L4
  91              		.loc 1 251 0 is_stmt 0 discriminator 1
  92 002a 082B     		cmp	r3, #8
  93 002c 0CD0     		beq	.L4
 252:./FWLIB/src/stm32f4xx_cryp.c ****       (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_TDES_CBC) &&
ARM GAS  /tmp/ccOoDJj1.s 			page 7


  94              		.loc 1 252 0 is_stmt 1
  95 002e 102B     		cmp	r3, #16
  96 0030 0AD0     		beq	.L4
 253:./FWLIB/src/stm32f4xx_cryp.c ****       (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_DES_ECB) &&
  97              		.loc 1 253 0
  98 0032 182B     		cmp	r3, #24
  99 0034 08D0     		beq	.L4
 254:./FWLIB/src/stm32f4xx_cryp.c ****       (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_DES_CBC))
 255:./FWLIB/src/stm32f4xx_cryp.c ****   {
 256:./FWLIB/src/stm32f4xx_cryp.c ****     assert_param(IS_CRYP_KEYSIZE(CRYP_InitStruct->CRYP_KeySize));
 257:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP->CR &= ~CRYP_CR_KEYSIZE;
 100              		.loc 1 257 0
 101 0036 094B     		ldr	r3, .L5
 102 0038 1A68     		ldr	r2, [r3]
 103 003a 22F44072 		bic	r2, r2, #768
 104 003e 1A60     		str	r2, [r3]
 258:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP->CR |= CRYP_InitStruct->CRYP_KeySize; /* Key size and value must be 
 105              		.loc 1 258 0
 106 0040 1A68     		ldr	r2, [r3]
 107 0042 C168     		ldr	r1, [r0, #12]
 108 0044 0A43     		orrs	r2, r2, r1
 109 0046 1A60     		str	r2, [r3]
 110              	.L4:
 259:./FWLIB/src/stm32f4xx_cryp.c ****                                                   configured once the key has 
 260:./FWLIB/src/stm32f4xx_cryp.c ****                                                   been prepared */
 261:./FWLIB/src/stm32f4xx_cryp.c ****   }
 262:./FWLIB/src/stm32f4xx_cryp.c **** 
 263:./FWLIB/src/stm32f4xx_cryp.c ****   /* Select data Direction */ 
 264:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP->CR &= ~CRYP_CR_ALGODIR;
 111              		.loc 1 264 0
 112 0048 044B     		ldr	r3, .L5
 113 004a 1A68     		ldr	r2, [r3]
 114 004c 22F00402 		bic	r2, r2, #4
 115 0050 1A60     		str	r2, [r3]
 265:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP->CR |= CRYP_InitStruct->CRYP_AlgoDir;
 116              		.loc 1 265 0
 117 0052 1A68     		ldr	r2, [r3]
 118 0054 0168     		ldr	r1, [r0]
 119 0056 0A43     		orrs	r2, r2, r1
 120 0058 1A60     		str	r2, [r3]
 266:./FWLIB/src/stm32f4xx_cryp.c **** }
 121              		.loc 1 266 0
 122 005a 7047     		bx	lr
 123              	.L6:
 124              		.align	2
 125              	.L5:
 126 005c 00000650 		.word	1342570496
 127              		.cfi_endproc
 128              	.LFE113:
 130              		.section	.text.CRYP_StructInit,"ax",%progbits
 131              		.align	1
 132              		.global	CRYP_StructInit
 133              		.syntax unified
 134              		.thumb
 135              		.thumb_func
 136              		.fpu fpv4-sp-d16
 138              	CRYP_StructInit:
ARM GAS  /tmp/ccOoDJj1.s 			page 8


 139              	.LFB114:
 267:./FWLIB/src/stm32f4xx_cryp.c **** 
 268:./FWLIB/src/stm32f4xx_cryp.c **** /**
 269:./FWLIB/src/stm32f4xx_cryp.c ****   * @brief  Fills each CRYP_InitStruct member with its default value.
 270:./FWLIB/src/stm32f4xx_cryp.c ****   * @param  CRYP_InitStruct: pointer to a CRYP_InitTypeDef structure which will
 271:./FWLIB/src/stm32f4xx_cryp.c ****   *         be initialized.
 272:./FWLIB/src/stm32f4xx_cryp.c ****   * @retval None
 273:./FWLIB/src/stm32f4xx_cryp.c ****   */
 274:./FWLIB/src/stm32f4xx_cryp.c **** void CRYP_StructInit(CRYP_InitTypeDef* CRYP_InitStruct)
 275:./FWLIB/src/stm32f4xx_cryp.c **** {
 140              		.loc 1 275 0
 141              		.cfi_startproc
 142              		@ args = 0, pretend = 0, frame = 0
 143              		@ frame_needed = 0, uses_anonymous_args = 0
 144              		@ link register save eliminated.
 145              	.LVL3:
 276:./FWLIB/src/stm32f4xx_cryp.c ****   /* Initialize the CRYP_AlgoDir member */
 277:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP_InitStruct->CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 146              		.loc 1 277 0
 147 0000 0023     		movs	r3, #0
 148 0002 0360     		str	r3, [r0]
 278:./FWLIB/src/stm32f4xx_cryp.c **** 
 279:./FWLIB/src/stm32f4xx_cryp.c ****   /* initialize the CRYP_AlgoMode member */
 280:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP_InitStruct->CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
 149              		.loc 1 280 0
 150 0004 4360     		str	r3, [r0, #4]
 281:./FWLIB/src/stm32f4xx_cryp.c **** 
 282:./FWLIB/src/stm32f4xx_cryp.c ****   /* initialize the CRYP_DataType member */
 283:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP_InitStruct->CRYP_DataType = CRYP_DataType_32b;
 151              		.loc 1 283 0
 152 0006 8360     		str	r3, [r0, #8]
 284:./FWLIB/src/stm32f4xx_cryp.c ****   
 285:./FWLIB/src/stm32f4xx_cryp.c ****   /* Initialize the CRYP_KeySize member */
 286:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP_InitStruct->CRYP_KeySize = CRYP_KeySize_128b;
 153              		.loc 1 286 0
 154 0008 C360     		str	r3, [r0, #12]
 287:./FWLIB/src/stm32f4xx_cryp.c **** }
 155              		.loc 1 287 0
 156 000a 7047     		bx	lr
 157              		.cfi_endproc
 158              	.LFE114:
 160              		.section	.text.CRYP_KeyInit,"ax",%progbits
 161              		.align	1
 162              		.global	CRYP_KeyInit
 163              		.syntax unified
 164              		.thumb
 165              		.thumb_func
 166              		.fpu fpv4-sp-d16
 168              	CRYP_KeyInit:
 169              	.LFB115:
 288:./FWLIB/src/stm32f4xx_cryp.c **** 
 289:./FWLIB/src/stm32f4xx_cryp.c **** /**
 290:./FWLIB/src/stm32f4xx_cryp.c ****   * @brief  Initializes the CRYP Keys according to the specified parameters in
 291:./FWLIB/src/stm32f4xx_cryp.c ****   *         the CRYP_KeyInitStruct.
 292:./FWLIB/src/stm32f4xx_cryp.c ****   * @param  CRYP_KeyInitStruct: pointer to a CRYP_KeyInitTypeDef structure that
 293:./FWLIB/src/stm32f4xx_cryp.c ****   *         contains the configuration information for the CRYP Keys.
 294:./FWLIB/src/stm32f4xx_cryp.c ****   * @retval None
ARM GAS  /tmp/ccOoDJj1.s 			page 9


 295:./FWLIB/src/stm32f4xx_cryp.c ****   */
 296:./FWLIB/src/stm32f4xx_cryp.c **** void CRYP_KeyInit(CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
 297:./FWLIB/src/stm32f4xx_cryp.c **** {
 170              		.loc 1 297 0
 171              		.cfi_startproc
 172              		@ args = 0, pretend = 0, frame = 0
 173              		@ frame_needed = 0, uses_anonymous_args = 0
 174              		@ link register save eliminated.
 175              	.LVL4:
 298:./FWLIB/src/stm32f4xx_cryp.c ****   /* Key Initialisation */
 299:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP->K0LR = CRYP_KeyInitStruct->CRYP_Key0Left;
 176              		.loc 1 299 0
 177 0000 0268     		ldr	r2, [r0]
 178 0002 084B     		ldr	r3, .L9
 179 0004 1A62     		str	r2, [r3, #32]
 300:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP->K0RR = CRYP_KeyInitStruct->CRYP_Key0Right;
 180              		.loc 1 300 0
 181 0006 4268     		ldr	r2, [r0, #4]
 182 0008 5A62     		str	r2, [r3, #36]
 301:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP->K1LR = CRYP_KeyInitStruct->CRYP_Key1Left;
 183              		.loc 1 301 0
 184 000a 8268     		ldr	r2, [r0, #8]
 185 000c 9A62     		str	r2, [r3, #40]
 302:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP->K1RR = CRYP_KeyInitStruct->CRYP_Key1Right;
 186              		.loc 1 302 0
 187 000e C268     		ldr	r2, [r0, #12]
 188 0010 DA62     		str	r2, [r3, #44]
 303:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP->K2LR = CRYP_KeyInitStruct->CRYP_Key2Left;
 189              		.loc 1 303 0
 190 0012 0269     		ldr	r2, [r0, #16]
 191 0014 1A63     		str	r2, [r3, #48]
 304:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP->K2RR = CRYP_KeyInitStruct->CRYP_Key2Right;
 192              		.loc 1 304 0
 193 0016 4269     		ldr	r2, [r0, #20]
 194 0018 5A63     		str	r2, [r3, #52]
 305:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP->K3LR = CRYP_KeyInitStruct->CRYP_Key3Left;
 195              		.loc 1 305 0
 196 001a 8269     		ldr	r2, [r0, #24]
 197 001c 9A63     		str	r2, [r3, #56]
 306:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP->K3RR = CRYP_KeyInitStruct->CRYP_Key3Right;
 198              		.loc 1 306 0
 199 001e C269     		ldr	r2, [r0, #28]
 200 0020 DA63     		str	r2, [r3, #60]
 307:./FWLIB/src/stm32f4xx_cryp.c **** }
 201              		.loc 1 307 0
 202 0022 7047     		bx	lr
 203              	.L10:
 204              		.align	2
 205              	.L9:
 206 0024 00000650 		.word	1342570496
 207              		.cfi_endproc
 208              	.LFE115:
 210              		.section	.text.CRYP_KeyStructInit,"ax",%progbits
 211              		.align	1
 212              		.global	CRYP_KeyStructInit
 213              		.syntax unified
 214              		.thumb
ARM GAS  /tmp/ccOoDJj1.s 			page 10


 215              		.thumb_func
 216              		.fpu fpv4-sp-d16
 218              	CRYP_KeyStructInit:
 219              	.LFB116:
 308:./FWLIB/src/stm32f4xx_cryp.c **** 
 309:./FWLIB/src/stm32f4xx_cryp.c **** /**
 310:./FWLIB/src/stm32f4xx_cryp.c ****   * @brief  Fills each CRYP_KeyInitStruct member with its default value.
 311:./FWLIB/src/stm32f4xx_cryp.c ****   * @param  CRYP_KeyInitStruct: pointer to a CRYP_KeyInitTypeDef structure 
 312:./FWLIB/src/stm32f4xx_cryp.c ****   *         which will be initialized.
 313:./FWLIB/src/stm32f4xx_cryp.c ****   * @retval None
 314:./FWLIB/src/stm32f4xx_cryp.c ****   */
 315:./FWLIB/src/stm32f4xx_cryp.c **** void CRYP_KeyStructInit(CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
 316:./FWLIB/src/stm32f4xx_cryp.c **** {
 220              		.loc 1 316 0
 221              		.cfi_startproc
 222              		@ args = 0, pretend = 0, frame = 0
 223              		@ frame_needed = 0, uses_anonymous_args = 0
 224              		@ link register save eliminated.
 225              	.LVL5:
 317:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP_KeyInitStruct->CRYP_Key0Left  = 0;
 226              		.loc 1 317 0
 227 0000 0023     		movs	r3, #0
 228 0002 0360     		str	r3, [r0]
 318:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP_KeyInitStruct->CRYP_Key0Right = 0;
 229              		.loc 1 318 0
 230 0004 4360     		str	r3, [r0, #4]
 319:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP_KeyInitStruct->CRYP_Key1Left  = 0;
 231              		.loc 1 319 0
 232 0006 8360     		str	r3, [r0, #8]
 320:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP_KeyInitStruct->CRYP_Key1Right = 0;
 233              		.loc 1 320 0
 234 0008 C360     		str	r3, [r0, #12]
 321:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP_KeyInitStruct->CRYP_Key2Left  = 0;
 235              		.loc 1 321 0
 236 000a 0361     		str	r3, [r0, #16]
 322:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP_KeyInitStruct->CRYP_Key2Right = 0;
 237              		.loc 1 322 0
 238 000c 4361     		str	r3, [r0, #20]
 323:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP_KeyInitStruct->CRYP_Key3Left  = 0;
 239              		.loc 1 323 0
 240 000e 8361     		str	r3, [r0, #24]
 324:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP_KeyInitStruct->CRYP_Key3Right = 0;
 241              		.loc 1 324 0
 242 0010 C361     		str	r3, [r0, #28]
 325:./FWLIB/src/stm32f4xx_cryp.c **** }
 243              		.loc 1 325 0
 244 0012 7047     		bx	lr
 245              		.cfi_endproc
 246              	.LFE116:
 248              		.section	.text.CRYP_IVInit,"ax",%progbits
 249              		.align	1
 250              		.global	CRYP_IVInit
 251              		.syntax unified
 252              		.thumb
 253              		.thumb_func
 254              		.fpu fpv4-sp-d16
 256              	CRYP_IVInit:
ARM GAS  /tmp/ccOoDJj1.s 			page 11


 257              	.LFB117:
 326:./FWLIB/src/stm32f4xx_cryp.c **** /**
 327:./FWLIB/src/stm32f4xx_cryp.c ****   * @brief  Initializes the CRYP Initialization Vectors(IV) according to the
 328:./FWLIB/src/stm32f4xx_cryp.c ****   *         specified parameters in the CRYP_IVInitStruct.
 329:./FWLIB/src/stm32f4xx_cryp.c ****   * @param  CRYP_IVInitStruct: pointer to a CRYP_IVInitTypeDef structure that contains
 330:./FWLIB/src/stm32f4xx_cryp.c ****   *         the configuration information for the CRYP Initialization Vectors(IV).
 331:./FWLIB/src/stm32f4xx_cryp.c ****   * @retval None
 332:./FWLIB/src/stm32f4xx_cryp.c ****   */
 333:./FWLIB/src/stm32f4xx_cryp.c **** void CRYP_IVInit(CRYP_IVInitTypeDef* CRYP_IVInitStruct)
 334:./FWLIB/src/stm32f4xx_cryp.c **** {
 258              		.loc 1 334 0
 259              		.cfi_startproc
 260              		@ args = 0, pretend = 0, frame = 0
 261              		@ frame_needed = 0, uses_anonymous_args = 0
 262              		@ link register save eliminated.
 263              	.LVL6:
 335:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP->IV0LR = CRYP_IVInitStruct->CRYP_IV0Left;
 264              		.loc 1 335 0
 265 0000 0268     		ldr	r2, [r0]
 266 0002 044B     		ldr	r3, .L13
 267 0004 1A64     		str	r2, [r3, #64]
 336:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP->IV0RR = CRYP_IVInitStruct->CRYP_IV0Right;
 268              		.loc 1 336 0
 269 0006 4268     		ldr	r2, [r0, #4]
 270 0008 5A64     		str	r2, [r3, #68]
 337:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP->IV1LR = CRYP_IVInitStruct->CRYP_IV1Left;
 271              		.loc 1 337 0
 272 000a 8268     		ldr	r2, [r0, #8]
 273 000c 9A64     		str	r2, [r3, #72]
 338:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP->IV1RR = CRYP_IVInitStruct->CRYP_IV1Right;
 274              		.loc 1 338 0
 275 000e C268     		ldr	r2, [r0, #12]
 276 0010 DA64     		str	r2, [r3, #76]
 339:./FWLIB/src/stm32f4xx_cryp.c **** }
 277              		.loc 1 339 0
 278 0012 7047     		bx	lr
 279              	.L14:
 280              		.align	2
 281              	.L13:
 282 0014 00000650 		.word	1342570496
 283              		.cfi_endproc
 284              	.LFE117:
 286              		.section	.text.CRYP_IVStructInit,"ax",%progbits
 287              		.align	1
 288              		.global	CRYP_IVStructInit
 289              		.syntax unified
 290              		.thumb
 291              		.thumb_func
 292              		.fpu fpv4-sp-d16
 294              	CRYP_IVStructInit:
 295              	.LFB118:
 340:./FWLIB/src/stm32f4xx_cryp.c **** 
 341:./FWLIB/src/stm32f4xx_cryp.c **** /**
 342:./FWLIB/src/stm32f4xx_cryp.c ****   * @brief  Fills each CRYP_IVInitStruct member with its default value.
 343:./FWLIB/src/stm32f4xx_cryp.c ****   * @param  CRYP_IVInitStruct: pointer to a CRYP_IVInitTypeDef Initialization 
 344:./FWLIB/src/stm32f4xx_cryp.c ****   *         Vectors(IV) structure which will be initialized.
 345:./FWLIB/src/stm32f4xx_cryp.c ****   * @retval None
ARM GAS  /tmp/ccOoDJj1.s 			page 12


 346:./FWLIB/src/stm32f4xx_cryp.c ****   */
 347:./FWLIB/src/stm32f4xx_cryp.c **** void CRYP_IVStructInit(CRYP_IVInitTypeDef* CRYP_IVInitStruct)
 348:./FWLIB/src/stm32f4xx_cryp.c **** {
 296              		.loc 1 348 0
 297              		.cfi_startproc
 298              		@ args = 0, pretend = 0, frame = 0
 299              		@ frame_needed = 0, uses_anonymous_args = 0
 300              		@ link register save eliminated.
 301              	.LVL7:
 349:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP_IVInitStruct->CRYP_IV0Left  = 0;
 302              		.loc 1 349 0
 303 0000 0023     		movs	r3, #0
 304 0002 0360     		str	r3, [r0]
 350:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP_IVInitStruct->CRYP_IV0Right = 0;
 305              		.loc 1 350 0
 306 0004 4360     		str	r3, [r0, #4]
 351:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP_IVInitStruct->CRYP_IV1Left  = 0;
 307              		.loc 1 351 0
 308 0006 8360     		str	r3, [r0, #8]
 352:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP_IVInitStruct->CRYP_IV1Right = 0;
 309              		.loc 1 352 0
 310 0008 C360     		str	r3, [r0, #12]
 353:./FWLIB/src/stm32f4xx_cryp.c **** }
 311              		.loc 1 353 0
 312 000a 7047     		bx	lr
 313              		.cfi_endproc
 314              	.LFE118:
 316              		.section	.text.CRYP_PhaseConfig,"ax",%progbits
 317              		.align	1
 318              		.global	CRYP_PhaseConfig
 319              		.syntax unified
 320              		.thumb
 321              		.thumb_func
 322              		.fpu fpv4-sp-d16
 324              	CRYP_PhaseConfig:
 325              	.LFB119:
 354:./FWLIB/src/stm32f4xx_cryp.c **** 
 355:./FWLIB/src/stm32f4xx_cryp.c **** /**
 356:./FWLIB/src/stm32f4xx_cryp.c ****   * @brief  Configures the AES-CCM and AES-GCM phases
 357:./FWLIB/src/stm32f4xx_cryp.c ****   * @note   This function is used only with AES-CCM or AES-GCM Algorithms  
 358:./FWLIB/src/stm32f4xx_cryp.c ****   * @param  CRYP_Phase: specifies the CRYP AES-CCM and AES-GCM phase to be configured.
 359:./FWLIB/src/stm32f4xx_cryp.c ****   *           This parameter can be one of the following values:
 360:./FWLIB/src/stm32f4xx_cryp.c ****   *            @arg CRYP_Phase_Init: Initialization phase
 361:./FWLIB/src/stm32f4xx_cryp.c ****   *            @arg CRYP_Phase_Header: Header phase
 362:./FWLIB/src/stm32f4xx_cryp.c ****   *            @arg CRYP_Phase_Payload: Payload phase
 363:./FWLIB/src/stm32f4xx_cryp.c ****   *            @arg CRYP_Phase_Final: Final phase 
 364:./FWLIB/src/stm32f4xx_cryp.c ****   * @retval None
 365:./FWLIB/src/stm32f4xx_cryp.c ****   */
 366:./FWLIB/src/stm32f4xx_cryp.c **** void CRYP_PhaseConfig(uint32_t CRYP_Phase)
 367:./FWLIB/src/stm32f4xx_cryp.c **** { uint32_t tempcr = 0;
 326              		.loc 1 367 0
 327              		.cfi_startproc
 328              		@ args = 0, pretend = 0, frame = 0
 329              		@ frame_needed = 0, uses_anonymous_args = 0
 330              		@ link register save eliminated.
 331              	.LVL8:
 368:./FWLIB/src/stm32f4xx_cryp.c **** 
ARM GAS  /tmp/ccOoDJj1.s 			page 13


 369:./FWLIB/src/stm32f4xx_cryp.c ****   /* Check the parameter */
 370:./FWLIB/src/stm32f4xx_cryp.c ****   assert_param(IS_CRYP_PHASE(CRYP_Phase));
 371:./FWLIB/src/stm32f4xx_cryp.c **** 
 372:./FWLIB/src/stm32f4xx_cryp.c ****   /* Get the CR register */
 373:./FWLIB/src/stm32f4xx_cryp.c ****   tempcr = CRYP->CR;
 332              		.loc 1 373 0
 333 0000 034A     		ldr	r2, .L17
 334 0002 1368     		ldr	r3, [r2]
 335              	.LVL9:
 374:./FWLIB/src/stm32f4xx_cryp.c ****   
 375:./FWLIB/src/stm32f4xx_cryp.c ****   /* Reset the phase configuration bits: GCMP_CCMPH */
 376:./FWLIB/src/stm32f4xx_cryp.c ****   tempcr &= (uint32_t)(~CRYP_CR_GCM_CCMPH);
 336              		.loc 1 376 0
 337 0004 23F44033 		bic	r3, r3, #196608
 338              	.LVL10:
 377:./FWLIB/src/stm32f4xx_cryp.c ****   /* Set the selected phase */
 378:./FWLIB/src/stm32f4xx_cryp.c ****   tempcr |= (uint32_t)CRYP_Phase;
 339              		.loc 1 378 0
 340 0008 1843     		orrs	r0, r0, r3
 341              	.LVL11:
 379:./FWLIB/src/stm32f4xx_cryp.c **** 
 380:./FWLIB/src/stm32f4xx_cryp.c ****   /* Set the CR register */ 
 381:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP->CR = tempcr;    
 342              		.loc 1 381 0
 343 000a 1060     		str	r0, [r2]
 382:./FWLIB/src/stm32f4xx_cryp.c **** }
 344              		.loc 1 382 0
 345 000c 7047     		bx	lr
 346              	.L18:
 347 000e 00BF     		.align	2
 348              	.L17:
 349 0010 00000650 		.word	1342570496
 350              		.cfi_endproc
 351              	.LFE119:
 353              		.section	.text.CRYP_FIFOFlush,"ax",%progbits
 354              		.align	1
 355              		.global	CRYP_FIFOFlush
 356              		.syntax unified
 357              		.thumb
 358              		.thumb_func
 359              		.fpu fpv4-sp-d16
 361              	CRYP_FIFOFlush:
 362              	.LFB120:
 383:./FWLIB/src/stm32f4xx_cryp.c **** 
 384:./FWLIB/src/stm32f4xx_cryp.c **** /**
 385:./FWLIB/src/stm32f4xx_cryp.c ****   * @brief  Flushes the IN and OUT FIFOs (that is read and write pointers of the 
 386:./FWLIB/src/stm32f4xx_cryp.c ****   *         FIFOs are reset)
 387:./FWLIB/src/stm32f4xx_cryp.c ****   * @note   The FIFOs must be flushed only when BUSY flag is reset.  
 388:./FWLIB/src/stm32f4xx_cryp.c ****   * @param  None
 389:./FWLIB/src/stm32f4xx_cryp.c ****   * @retval None
 390:./FWLIB/src/stm32f4xx_cryp.c ****   */
 391:./FWLIB/src/stm32f4xx_cryp.c **** void CRYP_FIFOFlush(void)
 392:./FWLIB/src/stm32f4xx_cryp.c **** {
 363              		.loc 1 392 0
 364              		.cfi_startproc
 365              		@ args = 0, pretend = 0, frame = 0
 366              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccOoDJj1.s 			page 14


 367              		@ link register save eliminated.
 393:./FWLIB/src/stm32f4xx_cryp.c ****   /* Reset the read and write pointers of the FIFOs */
 394:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP->CR |= CRYP_CR_FFLUSH;
 368              		.loc 1 394 0
 369 0000 024A     		ldr	r2, .L20
 370 0002 1368     		ldr	r3, [r2]
 371 0004 43F48043 		orr	r3, r3, #16384
 372 0008 1360     		str	r3, [r2]
 395:./FWLIB/src/stm32f4xx_cryp.c **** }
 373              		.loc 1 395 0
 374 000a 7047     		bx	lr
 375              	.L21:
 376              		.align	2
 377              	.L20:
 378 000c 00000650 		.word	1342570496
 379              		.cfi_endproc
 380              	.LFE120:
 382              		.section	.text.CRYP_Cmd,"ax",%progbits
 383              		.align	1
 384              		.global	CRYP_Cmd
 385              		.syntax unified
 386              		.thumb
 387              		.thumb_func
 388              		.fpu fpv4-sp-d16
 390              	CRYP_Cmd:
 391              	.LFB121:
 396:./FWLIB/src/stm32f4xx_cryp.c **** 
 397:./FWLIB/src/stm32f4xx_cryp.c **** /**
 398:./FWLIB/src/stm32f4xx_cryp.c ****   * @brief  Enables or disables the CRYP peripheral.
 399:./FWLIB/src/stm32f4xx_cryp.c ****   * @param  NewState: new state of the CRYP peripheral.
 400:./FWLIB/src/stm32f4xx_cryp.c ****   *          This parameter can be: ENABLE or DISABLE.
 401:./FWLIB/src/stm32f4xx_cryp.c ****   * @retval None
 402:./FWLIB/src/stm32f4xx_cryp.c ****   */
 403:./FWLIB/src/stm32f4xx_cryp.c **** void CRYP_Cmd(FunctionalState NewState)
 404:./FWLIB/src/stm32f4xx_cryp.c **** {
 392              		.loc 1 404 0
 393              		.cfi_startproc
 394              		@ args = 0, pretend = 0, frame = 0
 395              		@ frame_needed = 0, uses_anonymous_args = 0
 396              		@ link register save eliminated.
 397              	.LVL12:
 405:./FWLIB/src/stm32f4xx_cryp.c ****   /* Check the parameters */
 406:./FWLIB/src/stm32f4xx_cryp.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 407:./FWLIB/src/stm32f4xx_cryp.c **** 
 408:./FWLIB/src/stm32f4xx_cryp.c ****   if (NewState != DISABLE)
 398              		.loc 1 408 0
 399 0000 28B9     		cbnz	r0, .L25
 409:./FWLIB/src/stm32f4xx_cryp.c ****   {
 410:./FWLIB/src/stm32f4xx_cryp.c ****     /* Enable the Cryptographic processor */
 411:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP->CR |= CRYP_CR_CRYPEN;
 412:./FWLIB/src/stm32f4xx_cryp.c ****   }
 413:./FWLIB/src/stm32f4xx_cryp.c ****   else
 414:./FWLIB/src/stm32f4xx_cryp.c ****   {
 415:./FWLIB/src/stm32f4xx_cryp.c ****     /* Disable the Cryptographic processor */
 416:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP->CR &= ~CRYP_CR_CRYPEN;
 400              		.loc 1 416 0
 401 0002 064A     		ldr	r2, .L26
ARM GAS  /tmp/ccOoDJj1.s 			page 15


 402 0004 1368     		ldr	r3, [r2]
 403 0006 23F40043 		bic	r3, r3, #32768
 404 000a 1360     		str	r3, [r2]
 417:./FWLIB/src/stm32f4xx_cryp.c ****   }
 418:./FWLIB/src/stm32f4xx_cryp.c **** }
 405              		.loc 1 418 0
 406 000c 7047     		bx	lr
 407              	.L25:
 411:./FWLIB/src/stm32f4xx_cryp.c ****   }
 408              		.loc 1 411 0
 409 000e 034A     		ldr	r2, .L26
 410 0010 1368     		ldr	r3, [r2]
 411 0012 43F40043 		orr	r3, r3, #32768
 412 0016 1360     		str	r3, [r2]
 413 0018 7047     		bx	lr
 414              	.L27:
 415 001a 00BF     		.align	2
 416              	.L26:
 417 001c 00000650 		.word	1342570496
 418              		.cfi_endproc
 419              	.LFE121:
 421              		.section	.text.CRYP_DataIn,"ax",%progbits
 422              		.align	1
 423              		.global	CRYP_DataIn
 424              		.syntax unified
 425              		.thumb
 426              		.thumb_func
 427              		.fpu fpv4-sp-d16
 429              	CRYP_DataIn:
 430              	.LFB122:
 419:./FWLIB/src/stm32f4xx_cryp.c **** /**
 420:./FWLIB/src/stm32f4xx_cryp.c ****   * @}
 421:./FWLIB/src/stm32f4xx_cryp.c ****   */
 422:./FWLIB/src/stm32f4xx_cryp.c ****   
 423:./FWLIB/src/stm32f4xx_cryp.c **** /** @defgroup CRYP_Group2 CRYP Data processing functions
 424:./FWLIB/src/stm32f4xx_cryp.c ****  *  @brief    CRYP Data processing functions
 425:./FWLIB/src/stm32f4xx_cryp.c ****  *
 426:./FWLIB/src/stm32f4xx_cryp.c **** @verbatim    
 427:./FWLIB/src/stm32f4xx_cryp.c ****  ===============================================================================
 428:./FWLIB/src/stm32f4xx_cryp.c ****                     ##### CRYP Data processing functions #####
 429:./FWLIB/src/stm32f4xx_cryp.c ****  ===============================================================================  
 430:./FWLIB/src/stm32f4xx_cryp.c ****  [..] This section provides functions allowing the encryption and decryption 
 431:./FWLIB/src/stm32f4xx_cryp.c ****       operations: 
 432:./FWLIB/src/stm32f4xx_cryp.c ****    (+) Enter data to be treated in the IN FIFO : using CRYP_DataIn() function.
 433:./FWLIB/src/stm32f4xx_cryp.c ****    (+) Get the data result from the OUT FIFO : using CRYP_DataOut() function.
 434:./FWLIB/src/stm32f4xx_cryp.c **** 
 435:./FWLIB/src/stm32f4xx_cryp.c **** @endverbatim
 436:./FWLIB/src/stm32f4xx_cryp.c ****   * @{
 437:./FWLIB/src/stm32f4xx_cryp.c ****   */
 438:./FWLIB/src/stm32f4xx_cryp.c **** 
 439:./FWLIB/src/stm32f4xx_cryp.c **** /**
 440:./FWLIB/src/stm32f4xx_cryp.c ****   * @brief  Writes data in the Data Input register (DIN).
 441:./FWLIB/src/stm32f4xx_cryp.c ****   * @note   After the DIN register has been read once or several times, 
 442:./FWLIB/src/stm32f4xx_cryp.c ****   *         the FIFO must be flushed (using CRYP_FIFOFlush() function).  
 443:./FWLIB/src/stm32f4xx_cryp.c ****   * @param  Data: data to write in Data Input register
 444:./FWLIB/src/stm32f4xx_cryp.c ****   * @retval None
 445:./FWLIB/src/stm32f4xx_cryp.c ****   */
ARM GAS  /tmp/ccOoDJj1.s 			page 16


 446:./FWLIB/src/stm32f4xx_cryp.c **** void CRYP_DataIn(uint32_t Data)
 447:./FWLIB/src/stm32f4xx_cryp.c **** {
 431              		.loc 1 447 0
 432              		.cfi_startproc
 433              		@ args = 0, pretend = 0, frame = 0
 434              		@ frame_needed = 0, uses_anonymous_args = 0
 435              		@ link register save eliminated.
 436              	.LVL13:
 448:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP->DR = Data;
 437              		.loc 1 448 0
 438 0000 014B     		ldr	r3, .L29
 439 0002 9860     		str	r0, [r3, #8]
 449:./FWLIB/src/stm32f4xx_cryp.c **** }
 440              		.loc 1 449 0
 441 0004 7047     		bx	lr
 442              	.L30:
 443 0006 00BF     		.align	2
 444              	.L29:
 445 0008 00000650 		.word	1342570496
 446              		.cfi_endproc
 447              	.LFE122:
 449              		.section	.text.CRYP_DataOut,"ax",%progbits
 450              		.align	1
 451              		.global	CRYP_DataOut
 452              		.syntax unified
 453              		.thumb
 454              		.thumb_func
 455              		.fpu fpv4-sp-d16
 457              	CRYP_DataOut:
 458              	.LFB123:
 450:./FWLIB/src/stm32f4xx_cryp.c **** 
 451:./FWLIB/src/stm32f4xx_cryp.c **** /**
 452:./FWLIB/src/stm32f4xx_cryp.c ****   * @brief  Returns the last data entered into the output FIFO.
 453:./FWLIB/src/stm32f4xx_cryp.c ****   * @param  None
 454:./FWLIB/src/stm32f4xx_cryp.c ****   * @retval Last data entered into the output FIFO.
 455:./FWLIB/src/stm32f4xx_cryp.c ****   */
 456:./FWLIB/src/stm32f4xx_cryp.c **** uint32_t CRYP_DataOut(void)
 457:./FWLIB/src/stm32f4xx_cryp.c **** {
 459              		.loc 1 457 0
 460              		.cfi_startproc
 461              		@ args = 0, pretend = 0, frame = 0
 462              		@ frame_needed = 0, uses_anonymous_args = 0
 463              		@ link register save eliminated.
 458:./FWLIB/src/stm32f4xx_cryp.c ****   return CRYP->DOUT;
 464              		.loc 1 458 0
 465 0000 014B     		ldr	r3, .L32
 466 0002 D868     		ldr	r0, [r3, #12]
 459:./FWLIB/src/stm32f4xx_cryp.c **** }
 467              		.loc 1 459 0
 468 0004 7047     		bx	lr
 469              	.L33:
 470 0006 00BF     		.align	2
 471              	.L32:
 472 0008 00000650 		.word	1342570496
 473              		.cfi_endproc
 474              	.LFE123:
 476              		.section	.text.CRYP_SaveContext,"ax",%progbits
ARM GAS  /tmp/ccOoDJj1.s 			page 17


 477              		.align	1
 478              		.global	CRYP_SaveContext
 479              		.syntax unified
 480              		.thumb
 481              		.thumb_func
 482              		.fpu fpv4-sp-d16
 484              	CRYP_SaveContext:
 485              	.LFB124:
 460:./FWLIB/src/stm32f4xx_cryp.c **** /**
 461:./FWLIB/src/stm32f4xx_cryp.c ****   * @}
 462:./FWLIB/src/stm32f4xx_cryp.c ****   */
 463:./FWLIB/src/stm32f4xx_cryp.c ****   
 464:./FWLIB/src/stm32f4xx_cryp.c **** /** @defgroup CRYP_Group3 Context swapping functions
 465:./FWLIB/src/stm32f4xx_cryp.c ****  *  @brief   Context swapping functions
 466:./FWLIB/src/stm32f4xx_cryp.c ****  *
 467:./FWLIB/src/stm32f4xx_cryp.c **** @verbatim   
 468:./FWLIB/src/stm32f4xx_cryp.c ****  ===============================================================================
 469:./FWLIB/src/stm32f4xx_cryp.c ****                       ##### Context swapping functions #####
 470:./FWLIB/src/stm32f4xx_cryp.c ****  ===============================================================================  
 471:./FWLIB/src/stm32f4xx_cryp.c ****  [..] This section provides functions allowing to save and store CRYP Context
 472:./FWLIB/src/stm32f4xx_cryp.c **** 
 473:./FWLIB/src/stm32f4xx_cryp.c ****  [..] It is possible to interrupt an encryption/ decryption/ key generation process 
 474:./FWLIB/src/stm32f4xx_cryp.c ****       to perform another processing with a higher priority, and to complete the 
 475:./FWLIB/src/stm32f4xx_cryp.c ****       interrupted process later on, when the higher-priority task is complete. To do 
 476:./FWLIB/src/stm32f4xx_cryp.c ****       so, the context of the interrupted task must be saved from the CRYP registers 
 477:./FWLIB/src/stm32f4xx_cryp.c ****       to memory, and then be restored from memory to the CRYP registers.
 478:./FWLIB/src/stm32f4xx_cryp.c ****    
 479:./FWLIB/src/stm32f4xx_cryp.c ****    (#) To save the current context, use CRYP_SaveContext() function
 480:./FWLIB/src/stm32f4xx_cryp.c ****    (#) To restore the saved context, use CRYP_RestoreContext() function 
 481:./FWLIB/src/stm32f4xx_cryp.c **** 
 482:./FWLIB/src/stm32f4xx_cryp.c **** @endverbatim
 483:./FWLIB/src/stm32f4xx_cryp.c ****   * @{
 484:./FWLIB/src/stm32f4xx_cryp.c ****   */
 485:./FWLIB/src/stm32f4xx_cryp.c ****   
 486:./FWLIB/src/stm32f4xx_cryp.c **** /**
 487:./FWLIB/src/stm32f4xx_cryp.c ****   * @brief  Saves the CRYP peripheral Context. 
 488:./FWLIB/src/stm32f4xx_cryp.c ****   * @note   This function stops DMA transfer before to save the context. After 
 489:./FWLIB/src/stm32f4xx_cryp.c ****   *         restoring the context, you have to enable the DMA again (if the DMA
 490:./FWLIB/src/stm32f4xx_cryp.c ****   *         was previously used).
 491:./FWLIB/src/stm32f4xx_cryp.c ****   * @param  CRYP_ContextSave: pointer to a CRYP_Context structure that contains
 492:./FWLIB/src/stm32f4xx_cryp.c ****   *         the repository for current context.
 493:./FWLIB/src/stm32f4xx_cryp.c ****   * @param  CRYP_KeyInitStruct: pointer to a CRYP_KeyInitTypeDef structure that 
 494:./FWLIB/src/stm32f4xx_cryp.c ****   *         contains the configuration information for the CRYP Keys.  
 495:./FWLIB/src/stm32f4xx_cryp.c ****   * @retval None
 496:./FWLIB/src/stm32f4xx_cryp.c ****   */
 497:./FWLIB/src/stm32f4xx_cryp.c **** ErrorStatus CRYP_SaveContext(CRYP_Context* CRYP_ContextSave,
 498:./FWLIB/src/stm32f4xx_cryp.c ****                              CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
 499:./FWLIB/src/stm32f4xx_cryp.c **** {
 486              		.loc 1 499 0
 487              		.cfi_startproc
 488              		@ args = 0, pretend = 0, frame = 8
 489              		@ frame_needed = 0, uses_anonymous_args = 0
 490              		@ link register save eliminated.
 491              	.LVL14:
 492 0000 30B4     		push	{r4, r5}
 493              	.LCFI1:
 494              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccOoDJj1.s 			page 18


 495              		.cfi_offset 4, -8
 496              		.cfi_offset 5, -4
 497 0002 82B0     		sub	sp, sp, #8
 498              	.LCFI2:
 499              		.cfi_def_cfa_offset 16
 500:./FWLIB/src/stm32f4xx_cryp.c ****   __IO uint32_t timeout = 0;
 500              		.loc 1 500 0
 501 0004 0023     		movs	r3, #0
 502 0006 0193     		str	r3, [sp, #4]
 503              	.LVL15:
 501:./FWLIB/src/stm32f4xx_cryp.c ****   uint32_t ckeckmask = 0, bitstatus;    
 502:./FWLIB/src/stm32f4xx_cryp.c ****   ErrorStatus status = ERROR;
 503:./FWLIB/src/stm32f4xx_cryp.c **** 
 504:./FWLIB/src/stm32f4xx_cryp.c ****   /* Stop DMA transfers on the IN FIFO by clearing the DIEN bit in the CRYP_DMACR */
 505:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP->DMACR &= ~(uint32_t)CRYP_DMACR_DIEN;
 504              		.loc 1 505 0
 505 0008 394B     		ldr	r3, .L43
 506 000a 1A69     		ldr	r2, [r3, #16]
 507 000c 22F00102 		bic	r2, r2, #1
 508 0010 1A61     		str	r2, [r3, #16]
 506:./FWLIB/src/stm32f4xx_cryp.c ****     
 507:./FWLIB/src/stm32f4xx_cryp.c ****   /* Wait until both the IN and OUT FIFOs are empty  
 508:./FWLIB/src/stm32f4xx_cryp.c ****     (IFEM=1 and OFNE=0 in the CRYP_SR register) and the 
 509:./FWLIB/src/stm32f4xx_cryp.c ****      BUSY bit is cleared. */
 510:./FWLIB/src/stm32f4xx_cryp.c **** 
 511:./FWLIB/src/stm32f4xx_cryp.c ****   if ((CRYP->CR & (uint32_t)(CRYP_CR_ALGOMODE_TDES_ECB | CRYP_CR_ALGOMODE_TDES_CBC)) != (uint32_t)0
 509              		.loc 1 511 0
 510 0012 1B68     		ldr	r3, [r3]
 511 0014 13F0080F 		tst	r3, #8
 512 0018 16D0     		beq	.L39
 512:./FWLIB/src/stm32f4xx_cryp.c ****   { 
 513:./FWLIB/src/stm32f4xx_cryp.c ****     ckeckmask =  CRYP_SR_IFEM | CRYP_SR_BUSY ;
 513              		.loc 1 513 0
 514 001a 1125     		movs	r5, #17
 515              	.LVL16:
 516              	.L37:
 514:./FWLIB/src/stm32f4xx_cryp.c ****   }
 515:./FWLIB/src/stm32f4xx_cryp.c ****   else /* AES or DES */
 516:./FWLIB/src/stm32f4xx_cryp.c ****   {
 517:./FWLIB/src/stm32f4xx_cryp.c ****     ckeckmask =  CRYP_SR_IFEM | CRYP_SR_BUSY | CRYP_SR_OFNE;
 518:./FWLIB/src/stm32f4xx_cryp.c ****   }           
 519:./FWLIB/src/stm32f4xx_cryp.c ****    
 520:./FWLIB/src/stm32f4xx_cryp.c ****   do 
 521:./FWLIB/src/stm32f4xx_cryp.c ****   {
 522:./FWLIB/src/stm32f4xx_cryp.c ****     bitstatus = CRYP->SR & ckeckmask;
 517              		.loc 1 522 0 discriminator 2
 518 001c 344B     		ldr	r3, .L43
 519 001e 5A68     		ldr	r2, [r3, #4]
 520 0020 2A40     		ands	r2, r2, r5
 521              	.LVL17:
 523:./FWLIB/src/stm32f4xx_cryp.c ****     timeout++;
 522              		.loc 1 523 0 discriminator 2
 523 0022 019B     		ldr	r3, [sp, #4]
 524 0024 0133     		adds	r3, r3, #1
 525 0026 0193     		str	r3, [sp, #4]
 524:./FWLIB/src/stm32f4xx_cryp.c ****   }
 525:./FWLIB/src/stm32f4xx_cryp.c ****   while ((timeout != MAX_TIMEOUT) && (bitstatus != CRYP_SR_IFEM));
ARM GAS  /tmp/ccOoDJj1.s 			page 19


 526              		.loc 1 525 0 discriminator 2
 527 0028 019C     		ldr	r4, [sp, #4]
 528 002a 4FF6FF73 		movw	r3, #65535
 529 002e 9C42     		cmp	r4, r3
 530 0030 01D0     		beq	.L36
 531              		.loc 1 525 0 is_stmt 0 discriminator 1
 532 0032 012A     		cmp	r2, #1
 533 0034 F2D1     		bne	.L37
 534              	.L36:
 526:./FWLIB/src/stm32f4xx_cryp.c ****      
 527:./FWLIB/src/stm32f4xx_cryp.c ****   if ((CRYP->SR & ckeckmask) != CRYP_SR_IFEM)
 535              		.loc 1 527 0 is_stmt 1
 536 0036 2E4B     		ldr	r3, .L43
 537 0038 5B68     		ldr	r3, [r3, #4]
 538 003a 1D40     		ands	r5, r5, r3
 539              	.LVL18:
 540 003c 012D     		cmp	r5, #1
 541 003e 05D0     		beq	.L42
 528:./FWLIB/src/stm32f4xx_cryp.c ****   {
 529:./FWLIB/src/stm32f4xx_cryp.c ****     status = ERROR;
 542              		.loc 1 529 0
 543 0040 0020     		movs	r0, #0
 544              	.LVL19:
 545              	.L38:
 530:./FWLIB/src/stm32f4xx_cryp.c ****   }
 531:./FWLIB/src/stm32f4xx_cryp.c ****   else
 532:./FWLIB/src/stm32f4xx_cryp.c ****   {      
 533:./FWLIB/src/stm32f4xx_cryp.c ****     /* Stop DMA transfers on the OUT FIFO by 
 534:./FWLIB/src/stm32f4xx_cryp.c ****        - writing the DOEN bit to 0 in the CRYP_DMACR register 
 535:./FWLIB/src/stm32f4xx_cryp.c ****        - and clear the CRYPEN bit. */
 536:./FWLIB/src/stm32f4xx_cryp.c **** 
 537:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP->DMACR &= ~(uint32_t)CRYP_DMACR_DOEN;
 538:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP->CR &= ~(uint32_t)CRYP_CR_CRYPEN;
 539:./FWLIB/src/stm32f4xx_cryp.c **** 
 540:./FWLIB/src/stm32f4xx_cryp.c ****     /* Save the current configuration (bit 19, bit[17:16] and bits [9:2] in the CRYP_CR register) *
 541:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CR_CurrentConfig  = CRYP->CR & (CRYP_CR_GCM_CCMPH |
 542:./FWLIB/src/stm32f4xx_cryp.c ****                                                       CRYP_CR_KEYSIZE  |
 543:./FWLIB/src/stm32f4xx_cryp.c ****                                                       CRYP_CR_DATATYPE |
 544:./FWLIB/src/stm32f4xx_cryp.c ****                                                       CRYP_CR_ALGOMODE |
 545:./FWLIB/src/stm32f4xx_cryp.c ****                                                       CRYP_CR_ALGODIR);
 546:./FWLIB/src/stm32f4xx_cryp.c **** 
 547:./FWLIB/src/stm32f4xx_cryp.c ****     /* and, if not in ECB mode, the initialization vectors. */
 548:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_IV0LR = CRYP->IV0LR;
 549:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_IV0RR = CRYP->IV0RR;
 550:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_IV1LR = CRYP->IV1LR;
 551:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_IV1RR = CRYP->IV1RR;
 552:./FWLIB/src/stm32f4xx_cryp.c **** 
 553:./FWLIB/src/stm32f4xx_cryp.c ****     /* save The key value */
 554:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_K0LR = CRYP_KeyInitStruct->CRYP_Key0Left; 
 555:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_K0RR = CRYP_KeyInitStruct->CRYP_Key0Right; 
 556:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_K1LR = CRYP_KeyInitStruct->CRYP_Key1Left; 
 557:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_K1RR = CRYP_KeyInitStruct->CRYP_Key1Right; 
 558:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_K2LR = CRYP_KeyInitStruct->CRYP_Key2Left; 
 559:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_K2RR = CRYP_KeyInitStruct->CRYP_Key2Right; 
 560:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_K3LR = CRYP_KeyInitStruct->CRYP_Key3Left; 
 561:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_K3RR = CRYP_KeyInitStruct->CRYP_Key3Right; 
 562:./FWLIB/src/stm32f4xx_cryp.c **** 
ARM GAS  /tmp/ccOoDJj1.s 			page 20


 563:./FWLIB/src/stm32f4xx_cryp.c ****     /* Save the content of context swap registers */
 564:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_CSGCMCCMR[0] = CRYP->CSGCMCCM0R;
 565:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_CSGCMCCMR[1] = CRYP->CSGCMCCM1R;
 566:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_CSGCMCCMR[2] = CRYP->CSGCMCCM2R;
 567:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_CSGCMCCMR[3] = CRYP->CSGCMCCM3R;
 568:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_CSGCMCCMR[4] = CRYP->CSGCMCCM4R;
 569:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_CSGCMCCMR[5] = CRYP->CSGCMCCM5R;
 570:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_CSGCMCCMR[6] = CRYP->CSGCMCCM6R;
 571:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_CSGCMCCMR[7] = CRYP->CSGCMCCM7R;
 572:./FWLIB/src/stm32f4xx_cryp.c ****     
 573:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_CSGCMR[0] = CRYP->CSGCM0R;
 574:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_CSGCMR[1] = CRYP->CSGCM1R;
 575:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_CSGCMR[2] = CRYP->CSGCM2R;
 576:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_CSGCMR[3] = CRYP->CSGCM3R;
 577:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_CSGCMR[4] = CRYP->CSGCM4R;
 578:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_CSGCMR[5] = CRYP->CSGCM5R;
 579:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_CSGCMR[6] = CRYP->CSGCM6R;
 580:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_CSGCMR[7] = CRYP->CSGCM7R;
 581:./FWLIB/src/stm32f4xx_cryp.c ****     
 582:./FWLIB/src/stm32f4xx_cryp.c ****    /* When needed, save the DMA status (pointers for IN and OUT messages, 
 583:./FWLIB/src/stm32f4xx_cryp.c ****       number of remaining bytes, etc.) */
 584:./FWLIB/src/stm32f4xx_cryp.c ****      
 585:./FWLIB/src/stm32f4xx_cryp.c ****     status = SUCCESS;
 586:./FWLIB/src/stm32f4xx_cryp.c ****   }
 587:./FWLIB/src/stm32f4xx_cryp.c **** 
 588:./FWLIB/src/stm32f4xx_cryp.c ****    return status;
 589:./FWLIB/src/stm32f4xx_cryp.c **** }
 546              		.loc 1 589 0
 547 0042 02B0     		add	sp, sp, #8
 548              	.LCFI3:
 549              		.cfi_remember_state
 550              		.cfi_def_cfa_offset 8
 551              		@ sp needed
 552 0044 30BC     		pop	{r4, r5}
 553              	.LCFI4:
 554              		.cfi_restore 5
 555              		.cfi_restore 4
 556              		.cfi_def_cfa_offset 0
 557 0046 7047     		bx	lr
 558              	.LVL20:
 559              	.L39:
 560              	.LCFI5:
 561              		.cfi_restore_state
 517:./FWLIB/src/stm32f4xx_cryp.c ****   }           
 562              		.loc 1 517 0
 563 0048 1525     		movs	r5, #21
 564 004a E7E7     		b	.L37
 565              	.LVL21:
 566              	.L42:
 537:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP->CR &= ~(uint32_t)CRYP_CR_CRYPEN;
 567              		.loc 1 537 0
 568 004c 284B     		ldr	r3, .L43
 569 004e 1A69     		ldr	r2, [r3, #16]
 570              	.LVL22:
 571 0050 22F00202 		bic	r2, r2, #2
 572 0054 1A61     		str	r2, [r3, #16]
 538:./FWLIB/src/stm32f4xx_cryp.c **** 
ARM GAS  /tmp/ccOoDJj1.s 			page 21


 573              		.loc 1 538 0
 574 0056 1A68     		ldr	r2, [r3]
 575 0058 22F40042 		bic	r2, r2, #32768
 576 005c 1A60     		str	r2, [r3]
 541:./FWLIB/src/stm32f4xx_cryp.c ****                                                       CRYP_CR_KEYSIZE  |
 577              		.loc 1 541 0
 578 005e 1A68     		ldr	r2, [r3]
 579 0060 22F07F42 		bic	r2, r2, #-16777216
 580 0064 22F47402 		bic	r2, r2, #15990784
 581 0068 22F47C42 		bic	r2, r2, #64512
 582 006c 22F00302 		bic	r2, r2, #3
 583 0070 0260     		str	r2, [r0]
 548:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_IV0RR = CRYP->IV0RR;
 584              		.loc 1 548 0
 585 0072 1A6C     		ldr	r2, [r3, #64]
 586 0074 4260     		str	r2, [r0, #4]
 549:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_IV1LR = CRYP->IV1LR;
 587              		.loc 1 549 0
 588 0076 5A6C     		ldr	r2, [r3, #68]
 589 0078 8260     		str	r2, [r0, #8]
 550:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_IV1RR = CRYP->IV1RR;
 590              		.loc 1 550 0
 591 007a 9A6C     		ldr	r2, [r3, #72]
 592 007c C260     		str	r2, [r0, #12]
 551:./FWLIB/src/stm32f4xx_cryp.c **** 
 593              		.loc 1 551 0
 594 007e DA6C     		ldr	r2, [r3, #76]
 595 0080 0261     		str	r2, [r0, #16]
 554:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_K0RR = CRYP_KeyInitStruct->CRYP_Key0Right; 
 596              		.loc 1 554 0
 597 0082 0A68     		ldr	r2, [r1]
 598 0084 4261     		str	r2, [r0, #20]
 555:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_K1LR = CRYP_KeyInitStruct->CRYP_Key1Left; 
 599              		.loc 1 555 0
 600 0086 4A68     		ldr	r2, [r1, #4]
 601 0088 8261     		str	r2, [r0, #24]
 556:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_K1RR = CRYP_KeyInitStruct->CRYP_Key1Right; 
 602              		.loc 1 556 0
 603 008a 8A68     		ldr	r2, [r1, #8]
 604 008c C261     		str	r2, [r0, #28]
 557:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_K2LR = CRYP_KeyInitStruct->CRYP_Key2Left; 
 605              		.loc 1 557 0
 606 008e CA68     		ldr	r2, [r1, #12]
 607 0090 0262     		str	r2, [r0, #32]
 558:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_K2RR = CRYP_KeyInitStruct->CRYP_Key2Right; 
 608              		.loc 1 558 0
 609 0092 0A69     		ldr	r2, [r1, #16]
 610 0094 4262     		str	r2, [r0, #36]
 559:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_K3LR = CRYP_KeyInitStruct->CRYP_Key3Left; 
 611              		.loc 1 559 0
 612 0096 4A69     		ldr	r2, [r1, #20]
 613 0098 8262     		str	r2, [r0, #40]
 560:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_K3RR = CRYP_KeyInitStruct->CRYP_Key3Right; 
 614              		.loc 1 560 0
 615 009a 8A69     		ldr	r2, [r1, #24]
 616 009c C262     		str	r2, [r0, #44]
 561:./FWLIB/src/stm32f4xx_cryp.c **** 
ARM GAS  /tmp/ccOoDJj1.s 			page 22


 617              		.loc 1 561 0
 618 009e CA69     		ldr	r2, [r1, #28]
 619 00a0 0263     		str	r2, [r0, #48]
 564:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_CSGCMCCMR[1] = CRYP->CSGCMCCM1R;
 620              		.loc 1 564 0
 621 00a2 1A6D     		ldr	r2, [r3, #80]
 622 00a4 4263     		str	r2, [r0, #52]
 565:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_CSGCMCCMR[2] = CRYP->CSGCMCCM2R;
 623              		.loc 1 565 0
 624 00a6 5A6D     		ldr	r2, [r3, #84]
 625 00a8 8263     		str	r2, [r0, #56]
 566:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_CSGCMCCMR[3] = CRYP->CSGCMCCM3R;
 626              		.loc 1 566 0
 627 00aa 9A6D     		ldr	r2, [r3, #88]
 628 00ac C263     		str	r2, [r0, #60]
 567:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_CSGCMCCMR[4] = CRYP->CSGCMCCM4R;
 629              		.loc 1 567 0
 630 00ae DA6D     		ldr	r2, [r3, #92]
 631 00b0 0264     		str	r2, [r0, #64]
 568:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_CSGCMCCMR[5] = CRYP->CSGCMCCM5R;
 632              		.loc 1 568 0
 633 00b2 1A6E     		ldr	r2, [r3, #96]
 634 00b4 4264     		str	r2, [r0, #68]
 569:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_CSGCMCCMR[6] = CRYP->CSGCMCCM6R;
 635              		.loc 1 569 0
 636 00b6 5A6E     		ldr	r2, [r3, #100]
 637 00b8 8264     		str	r2, [r0, #72]
 570:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_CSGCMCCMR[7] = CRYP->CSGCMCCM7R;
 638              		.loc 1 570 0
 639 00ba 9A6E     		ldr	r2, [r3, #104]
 640 00bc C264     		str	r2, [r0, #76]
 571:./FWLIB/src/stm32f4xx_cryp.c ****     
 641              		.loc 1 571 0
 642 00be DA6E     		ldr	r2, [r3, #108]
 643 00c0 0265     		str	r2, [r0, #80]
 573:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_CSGCMR[1] = CRYP->CSGCM1R;
 644              		.loc 1 573 0
 645 00c2 1A6F     		ldr	r2, [r3, #112]
 646 00c4 4265     		str	r2, [r0, #84]
 574:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_CSGCMR[2] = CRYP->CSGCM2R;
 647              		.loc 1 574 0
 648 00c6 5A6F     		ldr	r2, [r3, #116]
 649 00c8 8265     		str	r2, [r0, #88]
 575:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_CSGCMR[3] = CRYP->CSGCM3R;
 650              		.loc 1 575 0
 651 00ca 9A6F     		ldr	r2, [r3, #120]
 652 00cc C265     		str	r2, [r0, #92]
 576:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_CSGCMR[4] = CRYP->CSGCM4R;
 653              		.loc 1 576 0
 654 00ce DA6F     		ldr	r2, [r3, #124]
 655 00d0 0266     		str	r2, [r0, #96]
 577:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_CSGCMR[5] = CRYP->CSGCM5R;
 656              		.loc 1 577 0
 657 00d2 D3F88020 		ldr	r2, [r3, #128]
 658 00d6 4266     		str	r2, [r0, #100]
 578:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_CSGCMR[6] = CRYP->CSGCM6R;
 659              		.loc 1 578 0
ARM GAS  /tmp/ccOoDJj1.s 			page 23


 660 00d8 D3F88420 		ldr	r2, [r3, #132]
 661 00dc 8266     		str	r2, [r0, #104]
 579:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_CSGCMR[7] = CRYP->CSGCM7R;
 662              		.loc 1 579 0
 663 00de D3F88820 		ldr	r2, [r3, #136]
 664 00e2 C266     		str	r2, [r0, #108]
 580:./FWLIB/src/stm32f4xx_cryp.c ****     
 665              		.loc 1 580 0
 666 00e4 D3F88C30 		ldr	r3, [r3, #140]
 667 00e8 0367     		str	r3, [r0, #112]
 668              	.LVL23:
 585:./FWLIB/src/stm32f4xx_cryp.c ****   }
 669              		.loc 1 585 0
 670 00ea 0120     		movs	r0, #1
 671              	.LVL24:
 672 00ec A9E7     		b	.L38
 673              	.L44:
 674 00ee 00BF     		.align	2
 675              	.L43:
 676 00f0 00000650 		.word	1342570496
 677              		.cfi_endproc
 678              	.LFE124:
 680              		.section	.text.CRYP_RestoreContext,"ax",%progbits
 681              		.align	1
 682              		.global	CRYP_RestoreContext
 683              		.syntax unified
 684              		.thumb
 685              		.thumb_func
 686              		.fpu fpv4-sp-d16
 688              	CRYP_RestoreContext:
 689              	.LFB125:
 590:./FWLIB/src/stm32f4xx_cryp.c **** 
 591:./FWLIB/src/stm32f4xx_cryp.c **** /**
 592:./FWLIB/src/stm32f4xx_cryp.c ****   * @brief  Restores the CRYP peripheral Context.
 593:./FWLIB/src/stm32f4xx_cryp.c ****   * @note   Since teh DMA transfer is stopped in CRYP_SaveContext() function,
 594:./FWLIB/src/stm32f4xx_cryp.c ****   *         after restoring the context, you have to enable the DMA again (if the
 595:./FWLIB/src/stm32f4xx_cryp.c ****   *         DMA was previously used).  
 596:./FWLIB/src/stm32f4xx_cryp.c ****   * @param  CRYP_ContextRestore: pointer to a CRYP_Context structure that contains
 597:./FWLIB/src/stm32f4xx_cryp.c ****   *         the repository for saved context.
 598:./FWLIB/src/stm32f4xx_cryp.c ****   * @note   The data that were saved during context saving must be rewrited into
 599:./FWLIB/src/stm32f4xx_cryp.c ****   *         the IN FIFO.
 600:./FWLIB/src/stm32f4xx_cryp.c ****   * @retval None
 601:./FWLIB/src/stm32f4xx_cryp.c ****   */
 602:./FWLIB/src/stm32f4xx_cryp.c **** void CRYP_RestoreContext(CRYP_Context* CRYP_ContextRestore)  
 603:./FWLIB/src/stm32f4xx_cryp.c **** {
 690              		.loc 1 603 0
 691              		.cfi_startproc
 692              		@ args = 0, pretend = 0, frame = 0
 693              		@ frame_needed = 0, uses_anonymous_args = 0
 694              		@ link register save eliminated.
 695              	.LVL25:
 604:./FWLIB/src/stm32f4xx_cryp.c **** 
 605:./FWLIB/src/stm32f4xx_cryp.c ****   /* Configure the processor with the saved configuration */
 606:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP->CR = CRYP_ContextRestore->CR_CurrentConfig;
 696              		.loc 1 606 0
 697 0000 0268     		ldr	r2, [r0]
 698 0002 214B     		ldr	r3, .L46
ARM GAS  /tmp/ccOoDJj1.s 			page 24


 699 0004 1A60     		str	r2, [r3]
 607:./FWLIB/src/stm32f4xx_cryp.c **** 
 608:./FWLIB/src/stm32f4xx_cryp.c ****   /* restore The key value */
 609:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP->K0LR = CRYP_ContextRestore->CRYP_K0LR; 
 700              		.loc 1 609 0
 701 0006 4269     		ldr	r2, [r0, #20]
 702 0008 1A62     		str	r2, [r3, #32]
 610:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP->K0RR = CRYP_ContextRestore->CRYP_K0RR;
 703              		.loc 1 610 0
 704 000a 8269     		ldr	r2, [r0, #24]
 705 000c 5A62     		str	r2, [r3, #36]
 611:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP->K1LR = CRYP_ContextRestore->CRYP_K1LR;
 706              		.loc 1 611 0
 707 000e C269     		ldr	r2, [r0, #28]
 708 0010 9A62     		str	r2, [r3, #40]
 612:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP->K1RR = CRYP_ContextRestore->CRYP_K1RR;
 709              		.loc 1 612 0
 710 0012 026A     		ldr	r2, [r0, #32]
 711 0014 DA62     		str	r2, [r3, #44]
 613:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP->K2LR = CRYP_ContextRestore->CRYP_K2LR;
 712              		.loc 1 613 0
 713 0016 426A     		ldr	r2, [r0, #36]
 714 0018 1A63     		str	r2, [r3, #48]
 614:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP->K2RR = CRYP_ContextRestore->CRYP_K2RR;
 715              		.loc 1 614 0
 716 001a 826A     		ldr	r2, [r0, #40]
 717 001c 5A63     		str	r2, [r3, #52]
 615:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP->K3LR = CRYP_ContextRestore->CRYP_K3LR;
 718              		.loc 1 615 0
 719 001e C26A     		ldr	r2, [r0, #44]
 720 0020 9A63     		str	r2, [r3, #56]
 616:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP->K3RR = CRYP_ContextRestore->CRYP_K3RR;
 721              		.loc 1 616 0
 722 0022 026B     		ldr	r2, [r0, #48]
 723 0024 DA63     		str	r2, [r3, #60]
 617:./FWLIB/src/stm32f4xx_cryp.c **** 
 618:./FWLIB/src/stm32f4xx_cryp.c ****   /* and the initialization vectors. */
 619:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP->IV0LR = CRYP_ContextRestore->CRYP_IV0LR;
 724              		.loc 1 619 0
 725 0026 4268     		ldr	r2, [r0, #4]
 726 0028 1A64     		str	r2, [r3, #64]
 620:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP->IV0RR = CRYP_ContextRestore->CRYP_IV0RR;
 727              		.loc 1 620 0
 728 002a 8268     		ldr	r2, [r0, #8]
 729 002c 5A64     		str	r2, [r3, #68]
 621:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP->IV1LR = CRYP_ContextRestore->CRYP_IV1LR;
 730              		.loc 1 621 0
 731 002e C268     		ldr	r2, [r0, #12]
 732 0030 9A64     		str	r2, [r3, #72]
 622:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP->IV1RR = CRYP_ContextRestore->CRYP_IV1RR;
 733              		.loc 1 622 0
 734 0032 0269     		ldr	r2, [r0, #16]
 735 0034 DA64     		str	r2, [r3, #76]
 623:./FWLIB/src/stm32f4xx_cryp.c **** 
 624:./FWLIB/src/stm32f4xx_cryp.c ****   /* Restore the content of context swap registers */
 625:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP->CSGCMCCM0R = CRYP_ContextRestore->CRYP_CSGCMCCMR[0];
 736              		.loc 1 625 0
ARM GAS  /tmp/ccOoDJj1.s 			page 25


 737 0036 426B     		ldr	r2, [r0, #52]
 738 0038 1A65     		str	r2, [r3, #80]
 626:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP->CSGCMCCM1R = CRYP_ContextRestore->CRYP_CSGCMCCMR[1];
 739              		.loc 1 626 0
 740 003a 826B     		ldr	r2, [r0, #56]
 741 003c 5A65     		str	r2, [r3, #84]
 627:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP->CSGCMCCM2R = CRYP_ContextRestore->CRYP_CSGCMCCMR[2];
 742              		.loc 1 627 0
 743 003e C26B     		ldr	r2, [r0, #60]
 744 0040 9A65     		str	r2, [r3, #88]
 628:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP->CSGCMCCM3R = CRYP_ContextRestore->CRYP_CSGCMCCMR[3];
 745              		.loc 1 628 0
 746 0042 026C     		ldr	r2, [r0, #64]
 747 0044 DA65     		str	r2, [r3, #92]
 629:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP->CSGCMCCM4R = CRYP_ContextRestore->CRYP_CSGCMCCMR[4];
 748              		.loc 1 629 0
 749 0046 426C     		ldr	r2, [r0, #68]
 750 0048 1A66     		str	r2, [r3, #96]
 630:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP->CSGCMCCM5R = CRYP_ContextRestore->CRYP_CSGCMCCMR[5];
 751              		.loc 1 630 0
 752 004a 826C     		ldr	r2, [r0, #72]
 753 004c 5A66     		str	r2, [r3, #100]
 631:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP->CSGCMCCM6R = CRYP_ContextRestore->CRYP_CSGCMCCMR[6];
 754              		.loc 1 631 0
 755 004e C26C     		ldr	r2, [r0, #76]
 756 0050 9A66     		str	r2, [r3, #104]
 632:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP->CSGCMCCM7R = CRYP_ContextRestore->CRYP_CSGCMCCMR[7];
 757              		.loc 1 632 0
 758 0052 026D     		ldr	r2, [r0, #80]
 759 0054 DA66     		str	r2, [r3, #108]
 633:./FWLIB/src/stm32f4xx_cryp.c ****   
 634:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP->CSGCM0R = CRYP_ContextRestore->CRYP_CSGCMR[0];
 760              		.loc 1 634 0
 761 0056 426D     		ldr	r2, [r0, #84]
 762 0058 1A67     		str	r2, [r3, #112]
 635:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP->CSGCM1R = CRYP_ContextRestore->CRYP_CSGCMR[1];
 763              		.loc 1 635 0
 764 005a 826D     		ldr	r2, [r0, #88]
 765 005c 5A67     		str	r2, [r3, #116]
 636:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP->CSGCM2R = CRYP_ContextRestore->CRYP_CSGCMR[2];
 766              		.loc 1 636 0
 767 005e C26D     		ldr	r2, [r0, #92]
 768 0060 9A67     		str	r2, [r3, #120]
 637:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP->CSGCM3R = CRYP_ContextRestore->CRYP_CSGCMR[3];
 769              		.loc 1 637 0
 770 0062 026E     		ldr	r2, [r0, #96]
 771 0064 DA67     		str	r2, [r3, #124]
 638:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP->CSGCM4R = CRYP_ContextRestore->CRYP_CSGCMR[4];
 772              		.loc 1 638 0
 773 0066 426E     		ldr	r2, [r0, #100]
 774 0068 C3F88020 		str	r2, [r3, #128]
 639:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP->CSGCM5R = CRYP_ContextRestore->CRYP_CSGCMR[5];
 775              		.loc 1 639 0
 776 006c 826E     		ldr	r2, [r0, #104]
 777 006e C3F88420 		str	r2, [r3, #132]
 640:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP->CSGCM6R = CRYP_ContextRestore->CRYP_CSGCMR[6];
 778              		.loc 1 640 0
ARM GAS  /tmp/ccOoDJj1.s 			page 26


 779 0072 C26E     		ldr	r2, [r0, #108]
 780 0074 C3F88820 		str	r2, [r3, #136]
 641:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP->CSGCM7R = CRYP_ContextRestore->CRYP_CSGCMR[7];
 781              		.loc 1 641 0
 782 0078 026F     		ldr	r2, [r0, #112]
 783 007a C3F88C20 		str	r2, [r3, #140]
 642:./FWLIB/src/stm32f4xx_cryp.c ****   
 643:./FWLIB/src/stm32f4xx_cryp.c ****   /* Enable the cryptographic processor */
 644:./FWLIB/src/stm32f4xx_cryp.c ****   CRYP->CR |= CRYP_CR_CRYPEN;
 784              		.loc 1 644 0
 785 007e 1A68     		ldr	r2, [r3]
 786 0080 42F40042 		orr	r2, r2, #32768
 787 0084 1A60     		str	r2, [r3]
 645:./FWLIB/src/stm32f4xx_cryp.c **** }
 788              		.loc 1 645 0
 789 0086 7047     		bx	lr
 790              	.L47:
 791              		.align	2
 792              	.L46:
 793 0088 00000650 		.word	1342570496
 794              		.cfi_endproc
 795              	.LFE125:
 797              		.section	.text.CRYP_DMACmd,"ax",%progbits
 798              		.align	1
 799              		.global	CRYP_DMACmd
 800              		.syntax unified
 801              		.thumb
 802              		.thumb_func
 803              		.fpu fpv4-sp-d16
 805              	CRYP_DMACmd:
 806              	.LFB126:
 646:./FWLIB/src/stm32f4xx_cryp.c **** /**
 647:./FWLIB/src/stm32f4xx_cryp.c ****   * @}
 648:./FWLIB/src/stm32f4xx_cryp.c ****   */
 649:./FWLIB/src/stm32f4xx_cryp.c **** 
 650:./FWLIB/src/stm32f4xx_cryp.c **** /** @defgroup CRYP_Group4 CRYP's DMA interface Configuration function
 651:./FWLIB/src/stm32f4xx_cryp.c ****  *  @brief   CRYP's DMA interface Configuration function 
 652:./FWLIB/src/stm32f4xx_cryp.c ****  *
 653:./FWLIB/src/stm32f4xx_cryp.c **** @verbatim   
 654:./FWLIB/src/stm32f4xx_cryp.c ****  ===============================================================================
 655:./FWLIB/src/stm32f4xx_cryp.c ****              ##### CRYP's DMA interface Configuration function #####
 656:./FWLIB/src/stm32f4xx_cryp.c ****  ===============================================================================  
 657:./FWLIB/src/stm32f4xx_cryp.c ****  [..] This section provides functions allowing to configure the DMA interface for 
 658:./FWLIB/src/stm32f4xx_cryp.c ****       CRYP data input and output transfer.
 659:./FWLIB/src/stm32f4xx_cryp.c ****    
 660:./FWLIB/src/stm32f4xx_cryp.c ****  [..] When the DMA mode is enabled (using the CRYP_DMACmd() function), data can be 
 661:./FWLIB/src/stm32f4xx_cryp.c ****       transferred:
 662:./FWLIB/src/stm32f4xx_cryp.c ****    (+) From memory to the CRYP IN FIFO using the DMA peripheral by enabling 
 663:./FWLIB/src/stm32f4xx_cryp.c ****        the CRYP_DMAReq_DataIN request.
 664:./FWLIB/src/stm32f4xx_cryp.c ****    (+) From the CRYP OUT FIFO to the memory using the DMA peripheral by enabling 
 665:./FWLIB/src/stm32f4xx_cryp.c ****        the CRYP_DMAReq_DataOUT request.
 666:./FWLIB/src/stm32f4xx_cryp.c **** 
 667:./FWLIB/src/stm32f4xx_cryp.c **** @endverbatim
 668:./FWLIB/src/stm32f4xx_cryp.c ****   * @{
 669:./FWLIB/src/stm32f4xx_cryp.c ****   */
 670:./FWLIB/src/stm32f4xx_cryp.c **** 
 671:./FWLIB/src/stm32f4xx_cryp.c **** /**
ARM GAS  /tmp/ccOoDJj1.s 			page 27


 672:./FWLIB/src/stm32f4xx_cryp.c ****   * @brief  Enables or disables the CRYP DMA interface.
 673:./FWLIB/src/stm32f4xx_cryp.c ****   * @param  CRYP_DMAReq: specifies the CRYP DMA transfer request to be enabled or disabled.
 674:./FWLIB/src/stm32f4xx_cryp.c ****   *           This parameter can be any combination of the following values:
 675:./FWLIB/src/stm32f4xx_cryp.c ****   *            @arg CRYP_DMAReq_DataOUT: DMA for outgoing(Tx) data transfer
 676:./FWLIB/src/stm32f4xx_cryp.c ****   *            @arg CRYP_DMAReq_DataIN: DMA for incoming(Rx) data transfer
 677:./FWLIB/src/stm32f4xx_cryp.c ****   * @param  NewState: new state of the selected CRYP DMA transfer request.
 678:./FWLIB/src/stm32f4xx_cryp.c ****   *          This parameter can be: ENABLE or DISABLE.
 679:./FWLIB/src/stm32f4xx_cryp.c ****   * @retval None
 680:./FWLIB/src/stm32f4xx_cryp.c ****   */
 681:./FWLIB/src/stm32f4xx_cryp.c **** void CRYP_DMACmd(uint8_t CRYP_DMAReq, FunctionalState NewState)
 682:./FWLIB/src/stm32f4xx_cryp.c **** {
 807              		.loc 1 682 0
 808              		.cfi_startproc
 809              		@ args = 0, pretend = 0, frame = 0
 810              		@ frame_needed = 0, uses_anonymous_args = 0
 811              		@ link register save eliminated.
 812              	.LVL26:
 683:./FWLIB/src/stm32f4xx_cryp.c ****   /* Check the parameters */
 684:./FWLIB/src/stm32f4xx_cryp.c ****   assert_param(IS_CRYP_DMAREQ(CRYP_DMAReq));
 685:./FWLIB/src/stm32f4xx_cryp.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 686:./FWLIB/src/stm32f4xx_cryp.c **** 
 687:./FWLIB/src/stm32f4xx_cryp.c ****   if (NewState != DISABLE)
 813              		.loc 1 687 0
 814 0000 31B9     		cbnz	r1, .L51
 688:./FWLIB/src/stm32f4xx_cryp.c ****   {
 689:./FWLIB/src/stm32f4xx_cryp.c ****     /* Enable the selected CRYP DMA request */
 690:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP->DMACR |= CRYP_DMAReq;
 691:./FWLIB/src/stm32f4xx_cryp.c ****   }
 692:./FWLIB/src/stm32f4xx_cryp.c ****   else
 693:./FWLIB/src/stm32f4xx_cryp.c ****   {
 694:./FWLIB/src/stm32f4xx_cryp.c ****     /* Disable the selected CRYP DMA request */
 695:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP->DMACR &= (uint8_t)~CRYP_DMAReq;
 815              		.loc 1 695 0
 816 0002 064A     		ldr	r2, .L52
 817 0004 1369     		ldr	r3, [r2, #16]
 818 0006 C043     		mvns	r0, r0
 819              	.LVL27:
 820 0008 C0B2     		uxtb	r0, r0
 821 000a 1840     		ands	r0, r0, r3
 822 000c 1061     		str	r0, [r2, #16]
 696:./FWLIB/src/stm32f4xx_cryp.c ****   }
 697:./FWLIB/src/stm32f4xx_cryp.c **** }
 823              		.loc 1 697 0
 824 000e 7047     		bx	lr
 825              	.LVL28:
 826              	.L51:
 690:./FWLIB/src/stm32f4xx_cryp.c ****   }
 827              		.loc 1 690 0
 828 0010 024B     		ldr	r3, .L52
 829 0012 1A69     		ldr	r2, [r3, #16]
 830 0014 1043     		orrs	r0, r0, r2
 831              	.LVL29:
 832 0016 1861     		str	r0, [r3, #16]
 833 0018 7047     		bx	lr
 834              	.L53:
 835 001a 00BF     		.align	2
 836              	.L52:
ARM GAS  /tmp/ccOoDJj1.s 			page 28


 837 001c 00000650 		.word	1342570496
 838              		.cfi_endproc
 839              	.LFE126:
 841              		.section	.text.CRYP_ITConfig,"ax",%progbits
 842              		.align	1
 843              		.global	CRYP_ITConfig
 844              		.syntax unified
 845              		.thumb
 846              		.thumb_func
 847              		.fpu fpv4-sp-d16
 849              	CRYP_ITConfig:
 850              	.LFB127:
 698:./FWLIB/src/stm32f4xx_cryp.c **** /**
 699:./FWLIB/src/stm32f4xx_cryp.c ****   * @}
 700:./FWLIB/src/stm32f4xx_cryp.c ****   */
 701:./FWLIB/src/stm32f4xx_cryp.c **** 
 702:./FWLIB/src/stm32f4xx_cryp.c **** /** @defgroup CRYP_Group5 Interrupts and flags management functions
 703:./FWLIB/src/stm32f4xx_cryp.c ****  *  @brief   Interrupts and flags management functions
 704:./FWLIB/src/stm32f4xx_cryp.c ****  *
 705:./FWLIB/src/stm32f4xx_cryp.c **** @verbatim   
 706:./FWLIB/src/stm32f4xx_cryp.c ****  ===============================================================================
 707:./FWLIB/src/stm32f4xx_cryp.c ****               ##### Interrupts and flags management functions #####
 708:./FWLIB/src/stm32f4xx_cryp.c ****  ===============================================================================  
 709:./FWLIB/src/stm32f4xx_cryp.c ****  
 710:./FWLIB/src/stm32f4xx_cryp.c ****  [..] This section provides functions allowing to configure the CRYP Interrupts and 
 711:./FWLIB/src/stm32f4xx_cryp.c ****       to get the status and Interrupts pending bits.
 712:./FWLIB/src/stm32f4xx_cryp.c **** 
 713:./FWLIB/src/stm32f4xx_cryp.c ****  [..] The CRYP provides 2 Interrupts sources and 7 Flags:
 714:./FWLIB/src/stm32f4xx_cryp.c **** 
 715:./FWLIB/src/stm32f4xx_cryp.c ****  *** Flags : ***
 716:./FWLIB/src/stm32f4xx_cryp.c ****  ===============
 717:./FWLIB/src/stm32f4xx_cryp.c ****  [..] 
 718:./FWLIB/src/stm32f4xx_cryp.c ****    (#) CRYP_FLAG_IFEM :  Set when Input FIFO is empty. This Flag is cleared only
 719:./FWLIB/src/stm32f4xx_cryp.c ****        by hardware.
 720:./FWLIB/src/stm32f4xx_cryp.c ****       
 721:./FWLIB/src/stm32f4xx_cryp.c ****    (#) CRYP_FLAG_IFNF :  Set when Input FIFO is not full. This Flag is cleared 
 722:./FWLIB/src/stm32f4xx_cryp.c ****        only by hardware.
 723:./FWLIB/src/stm32f4xx_cryp.c **** 
 724:./FWLIB/src/stm32f4xx_cryp.c **** 
 725:./FWLIB/src/stm32f4xx_cryp.c ****    (#) CRYP_FLAG_INRIS  : Set when Input FIFO Raw interrupt is pending it gives 
 726:./FWLIB/src/stm32f4xx_cryp.c ****        the raw interrupt state prior to masking of the input FIFO service interrupt.
 727:./FWLIB/src/stm32f4xx_cryp.c ****        This Flag is cleared only by hardware.
 728:./FWLIB/src/stm32f4xx_cryp.c ****      
 729:./FWLIB/src/stm32f4xx_cryp.c ****    (#) CRYP_FLAG_OFNE   : Set when Output FIFO not empty. This Flag is cleared 
 730:./FWLIB/src/stm32f4xx_cryp.c ****        only by hardware.
 731:./FWLIB/src/stm32f4xx_cryp.c ****         
 732:./FWLIB/src/stm32f4xx_cryp.c ****    (#) CRYP_FLAG_OFFU   : Set when Output FIFO is full. This Flag is cleared only 
 733:./FWLIB/src/stm32f4xx_cryp.c ****        by hardware.
 734:./FWLIB/src/stm32f4xx_cryp.c ****                            
 735:./FWLIB/src/stm32f4xx_cryp.c ****    (#) CRYP_FLAG_OUTRIS : Set when Output FIFO Raw interrupt is pending it gives 
 736:./FWLIB/src/stm32f4xx_cryp.c ****        the raw interrupt state prior to masking of the output FIFO service interrupt.
 737:./FWLIB/src/stm32f4xx_cryp.c ****        This Flag is cleared only by hardware.
 738:./FWLIB/src/stm32f4xx_cryp.c ****                                
 739:./FWLIB/src/stm32f4xx_cryp.c ****    (#) CRYP_FLAG_BUSY   : Set when the CRYP core is currently processing a block 
 740:./FWLIB/src/stm32f4xx_cryp.c ****        of data or a key preparation (for AES decryption). This Flag is cleared 
 741:./FWLIB/src/stm32f4xx_cryp.c ****        only by hardware. To clear it, the CRYP core must be disabled and the last
 742:./FWLIB/src/stm32f4xx_cryp.c ****        processing has completed. 
ARM GAS  /tmp/ccOoDJj1.s 			page 29


 743:./FWLIB/src/stm32f4xx_cryp.c **** 
 744:./FWLIB/src/stm32f4xx_cryp.c ****  *** Interrupts : ***
 745:./FWLIB/src/stm32f4xx_cryp.c ****  ====================
 746:./FWLIB/src/stm32f4xx_cryp.c ****  [..]
 747:./FWLIB/src/stm32f4xx_cryp.c ****    (#) CRYP_IT_INI   : The input FIFO service interrupt is asserted when there 
 748:./FWLIB/src/stm32f4xx_cryp.c ****       are less than 4 words in the input FIFO. This interrupt is associated to 
 749:./FWLIB/src/stm32f4xx_cryp.c ****       CRYP_FLAG_INRIS flag.
 750:./FWLIB/src/stm32f4xx_cryp.c **** 
 751:./FWLIB/src/stm32f4xx_cryp.c ****       -@- This interrupt is cleared by performing write operations to the input FIFO 
 752:./FWLIB/src/stm32f4xx_cryp.c ****           until it holds 4 or more words. The input FIFO service interrupt INMIS is 
 753:./FWLIB/src/stm32f4xx_cryp.c ****           enabled with the CRYP enable bit. Consequently, when CRYP is disabled, the 
 754:./FWLIB/src/stm32f4xx_cryp.c ****           INMIS signal is low even if the input FIFO is empty.
 755:./FWLIB/src/stm32f4xx_cryp.c **** 
 756:./FWLIB/src/stm32f4xx_cryp.c **** 
 757:./FWLIB/src/stm32f4xx_cryp.c **** 
 758:./FWLIB/src/stm32f4xx_cryp.c ****    (#) CRYP_IT_OUTI  : The output FIFO service interrupt is asserted when there 
 759:./FWLIB/src/stm32f4xx_cryp.c ****        is one or more (32-bit word) data items in the output FIFO. This interrupt 
 760:./FWLIB/src/stm32f4xx_cryp.c ****        is associated to CRYP_FLAG_OUTRIS flag.
 761:./FWLIB/src/stm32f4xx_cryp.c **** 
 762:./FWLIB/src/stm32f4xx_cryp.c ****        -@- This interrupt is cleared by reading data from the output FIFO until there 
 763:./FWLIB/src/stm32f4xx_cryp.c ****            is no valid (32-bit) word left (that is, the interrupt follows the state 
 764:./FWLIB/src/stm32f4xx_cryp.c ****            of the OFNE (output FIFO not empty) flag).
 765:./FWLIB/src/stm32f4xx_cryp.c **** 
 766:./FWLIB/src/stm32f4xx_cryp.c ****  *** Managing the CRYP controller events : ***
 767:./FWLIB/src/stm32f4xx_cryp.c ****  =============================================
 768:./FWLIB/src/stm32f4xx_cryp.c ****  [..] The user should identify which mode will be used in his application to manage 
 769:./FWLIB/src/stm32f4xx_cryp.c ****       the CRYP controller events: Polling mode or Interrupt mode.
 770:./FWLIB/src/stm32f4xx_cryp.c **** 
 771:./FWLIB/src/stm32f4xx_cryp.c ****    (#) In the Polling Mode it is advised to use the following functions:
 772:./FWLIB/src/stm32f4xx_cryp.c ****        (++) CRYP_GetFlagStatus() : to check if flags events occur. 
 773:./FWLIB/src/stm32f4xx_cryp.c **** 
 774:./FWLIB/src/stm32f4xx_cryp.c ****        -@@- The CRYPT flags do not need to be cleared since they are cleared as 
 775:./FWLIB/src/stm32f4xx_cryp.c ****             soon as the associated event are reset.   
 776:./FWLIB/src/stm32f4xx_cryp.c **** 
 777:./FWLIB/src/stm32f4xx_cryp.c **** 
 778:./FWLIB/src/stm32f4xx_cryp.c ****    (#) In the Interrupt Mode it is advised to use the following functions:
 779:./FWLIB/src/stm32f4xx_cryp.c ****        (++) CRYP_ITConfig()       : to enable or disable the interrupt source.
 780:./FWLIB/src/stm32f4xx_cryp.c ****        (++) CRYP_GetITStatus()    : to check if Interrupt occurs.
 781:./FWLIB/src/stm32f4xx_cryp.c **** 
 782:./FWLIB/src/stm32f4xx_cryp.c ****        -@@- The CRYPT interrupts have no pending bits, the interrupt is cleared as 
 783:./FWLIB/src/stm32f4xx_cryp.c ****              soon as the associated event is reset. 
 784:./FWLIB/src/stm32f4xx_cryp.c **** 
 785:./FWLIB/src/stm32f4xx_cryp.c **** @endverbatim
 786:./FWLIB/src/stm32f4xx_cryp.c ****   * @{
 787:./FWLIB/src/stm32f4xx_cryp.c ****   */ 
 788:./FWLIB/src/stm32f4xx_cryp.c **** 
 789:./FWLIB/src/stm32f4xx_cryp.c **** /**
 790:./FWLIB/src/stm32f4xx_cryp.c ****   * @brief  Enables or disables the specified CRYP interrupts.
 791:./FWLIB/src/stm32f4xx_cryp.c ****   * @param  CRYP_IT: specifies the CRYP interrupt source to be enabled or disabled.
 792:./FWLIB/src/stm32f4xx_cryp.c ****   *          This parameter can be any combination of the following values:
 793:./FWLIB/src/stm32f4xx_cryp.c ****   *            @arg CRYP_IT_INI: Input FIFO interrupt
 794:./FWLIB/src/stm32f4xx_cryp.c ****   *            @arg CRYP_IT_OUTI: Output FIFO interrupt
 795:./FWLIB/src/stm32f4xx_cryp.c ****   * @param  NewState: new state of the specified CRYP interrupt.
 796:./FWLIB/src/stm32f4xx_cryp.c ****   *           This parameter can be: ENABLE or DISABLE.
 797:./FWLIB/src/stm32f4xx_cryp.c ****   * @retval None
 798:./FWLIB/src/stm32f4xx_cryp.c ****   */
 799:./FWLIB/src/stm32f4xx_cryp.c **** void CRYP_ITConfig(uint8_t CRYP_IT, FunctionalState NewState)
ARM GAS  /tmp/ccOoDJj1.s 			page 30


 800:./FWLIB/src/stm32f4xx_cryp.c **** {
 851              		.loc 1 800 0
 852              		.cfi_startproc
 853              		@ args = 0, pretend = 0, frame = 0
 854              		@ frame_needed = 0, uses_anonymous_args = 0
 855              		@ link register save eliminated.
 856              	.LVL30:
 801:./FWLIB/src/stm32f4xx_cryp.c ****   /* Check the parameters */
 802:./FWLIB/src/stm32f4xx_cryp.c ****   assert_param(IS_CRYP_CONFIG_IT(CRYP_IT));
 803:./FWLIB/src/stm32f4xx_cryp.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 804:./FWLIB/src/stm32f4xx_cryp.c **** 
 805:./FWLIB/src/stm32f4xx_cryp.c ****   if (NewState != DISABLE)
 857              		.loc 1 805 0
 858 0000 31B9     		cbnz	r1, .L57
 806:./FWLIB/src/stm32f4xx_cryp.c ****   {
 807:./FWLIB/src/stm32f4xx_cryp.c ****     /* Enable the selected CRYP interrupt */
 808:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP->IMSCR |= CRYP_IT;
 809:./FWLIB/src/stm32f4xx_cryp.c ****   }
 810:./FWLIB/src/stm32f4xx_cryp.c ****   else
 811:./FWLIB/src/stm32f4xx_cryp.c ****   {
 812:./FWLIB/src/stm32f4xx_cryp.c ****     /* Disable the selected CRYP interrupt */
 813:./FWLIB/src/stm32f4xx_cryp.c ****     CRYP->IMSCR &= (uint8_t)~CRYP_IT;
 859              		.loc 1 813 0
 860 0002 064A     		ldr	r2, .L58
 861 0004 5369     		ldr	r3, [r2, #20]
 862 0006 C043     		mvns	r0, r0
 863              	.LVL31:
 864 0008 C0B2     		uxtb	r0, r0
 865 000a 1840     		ands	r0, r0, r3
 866 000c 5061     		str	r0, [r2, #20]
 814:./FWLIB/src/stm32f4xx_cryp.c ****   }
 815:./FWLIB/src/stm32f4xx_cryp.c **** }
 867              		.loc 1 815 0
 868 000e 7047     		bx	lr
 869              	.LVL32:
 870              	.L57:
 808:./FWLIB/src/stm32f4xx_cryp.c ****   }
 871              		.loc 1 808 0
 872 0010 024B     		ldr	r3, .L58
 873 0012 5A69     		ldr	r2, [r3, #20]
 874 0014 1043     		orrs	r0, r0, r2
 875              	.LVL33:
 876 0016 5861     		str	r0, [r3, #20]
 877 0018 7047     		bx	lr
 878              	.L59:
 879 001a 00BF     		.align	2
 880              	.L58:
 881 001c 00000650 		.word	1342570496
 882              		.cfi_endproc
 883              	.LFE127:
 885              		.section	.text.CRYP_GetITStatus,"ax",%progbits
 886              		.align	1
 887              		.global	CRYP_GetITStatus
 888              		.syntax unified
 889              		.thumb
 890              		.thumb_func
 891              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccOoDJj1.s 			page 31


 893              	CRYP_GetITStatus:
 894              	.LFB128:
 816:./FWLIB/src/stm32f4xx_cryp.c **** 
 817:./FWLIB/src/stm32f4xx_cryp.c **** /**
 818:./FWLIB/src/stm32f4xx_cryp.c ****   * @brief  Checks whether the specified CRYP interrupt has occurred or not.
 819:./FWLIB/src/stm32f4xx_cryp.c ****   * @note   This function checks the status of the masked interrupt (i.e the 
 820:./FWLIB/src/stm32f4xx_cryp.c ****   *         interrupt should be previously enabled).     
 821:./FWLIB/src/stm32f4xx_cryp.c ****   * @param  CRYP_IT: specifies the CRYP (masked) interrupt source to check.
 822:./FWLIB/src/stm32f4xx_cryp.c ****   *           This parameter can be one of the following values:
 823:./FWLIB/src/stm32f4xx_cryp.c ****   *            @arg CRYP_IT_INI: Input FIFO interrupt
 824:./FWLIB/src/stm32f4xx_cryp.c ****   *            @arg CRYP_IT_OUTI: Output FIFO interrupt
 825:./FWLIB/src/stm32f4xx_cryp.c ****   * @retval The new state of CRYP_IT (SET or RESET).
 826:./FWLIB/src/stm32f4xx_cryp.c ****   */
 827:./FWLIB/src/stm32f4xx_cryp.c **** ITStatus CRYP_GetITStatus(uint8_t CRYP_IT)
 828:./FWLIB/src/stm32f4xx_cryp.c **** {
 895              		.loc 1 828 0
 896              		.cfi_startproc
 897              		@ args = 0, pretend = 0, frame = 0
 898              		@ frame_needed = 0, uses_anonymous_args = 0
 899              		@ link register save eliminated.
 900              	.LVL34:
 829:./FWLIB/src/stm32f4xx_cryp.c ****   ITStatus bitstatus = RESET;
 830:./FWLIB/src/stm32f4xx_cryp.c ****   /* Check the parameters */
 831:./FWLIB/src/stm32f4xx_cryp.c ****   assert_param(IS_CRYP_GET_IT(CRYP_IT));
 832:./FWLIB/src/stm32f4xx_cryp.c **** 
 833:./FWLIB/src/stm32f4xx_cryp.c ****   /* Check the status of the specified CRYP interrupt */
 834:./FWLIB/src/stm32f4xx_cryp.c ****   if ((CRYP->MISR &  CRYP_IT) != (uint8_t)RESET)
 901              		.loc 1 834 0
 902 0000 034B     		ldr	r3, .L64
 903 0002 DB69     		ldr	r3, [r3, #28]
 904 0004 1842     		tst	r0, r3
 905 0006 01D1     		bne	.L63
 835:./FWLIB/src/stm32f4xx_cryp.c ****   {
 836:./FWLIB/src/stm32f4xx_cryp.c ****     /* CRYP_IT is set */
 837:./FWLIB/src/stm32f4xx_cryp.c ****     bitstatus = SET;
 838:./FWLIB/src/stm32f4xx_cryp.c ****   }
 839:./FWLIB/src/stm32f4xx_cryp.c ****   else
 840:./FWLIB/src/stm32f4xx_cryp.c ****   {
 841:./FWLIB/src/stm32f4xx_cryp.c ****     /* CRYP_IT is reset */
 842:./FWLIB/src/stm32f4xx_cryp.c ****     bitstatus = RESET;
 906              		.loc 1 842 0
 907 0008 0020     		movs	r0, #0
 908              	.LVL35:
 843:./FWLIB/src/stm32f4xx_cryp.c ****   }
 844:./FWLIB/src/stm32f4xx_cryp.c ****   /* Return the CRYP_IT status */
 845:./FWLIB/src/stm32f4xx_cryp.c ****   return bitstatus;
 846:./FWLIB/src/stm32f4xx_cryp.c **** }
 909              		.loc 1 846 0
 910 000a 7047     		bx	lr
 911              	.LVL36:
 912              	.L63:
 837:./FWLIB/src/stm32f4xx_cryp.c ****   }
 913              		.loc 1 837 0
 914 000c 0120     		movs	r0, #1
 915              	.LVL37:
 916 000e 7047     		bx	lr
 917              	.L65:
ARM GAS  /tmp/ccOoDJj1.s 			page 32


 918              		.align	2
 919              	.L64:
 920 0010 00000650 		.word	1342570496
 921              		.cfi_endproc
 922              	.LFE128:
 924              		.section	.text.CRYP_GetCmdStatus,"ax",%progbits
 925              		.align	1
 926              		.global	CRYP_GetCmdStatus
 927              		.syntax unified
 928              		.thumb
 929              		.thumb_func
 930              		.fpu fpv4-sp-d16
 932              	CRYP_GetCmdStatus:
 933              	.LFB129:
 847:./FWLIB/src/stm32f4xx_cryp.c **** 
 848:./FWLIB/src/stm32f4xx_cryp.c **** /**
 849:./FWLIB/src/stm32f4xx_cryp.c ****   * @brief  Returns whether CRYP peripheral is enabled or disabled.
 850:./FWLIB/src/stm32f4xx_cryp.c ****   * @param  none.
 851:./FWLIB/src/stm32f4xx_cryp.c ****   * @retval Current state of the CRYP peripheral (ENABLE or DISABLE).
 852:./FWLIB/src/stm32f4xx_cryp.c ****   */
 853:./FWLIB/src/stm32f4xx_cryp.c **** FunctionalState CRYP_GetCmdStatus(void)
 854:./FWLIB/src/stm32f4xx_cryp.c **** {
 934              		.loc 1 854 0
 935              		.cfi_startproc
 936              		@ args = 0, pretend = 0, frame = 0
 937              		@ frame_needed = 0, uses_anonymous_args = 0
 938              		@ link register save eliminated.
 939              	.LVL38:
 855:./FWLIB/src/stm32f4xx_cryp.c ****   FunctionalState state = DISABLE;
 856:./FWLIB/src/stm32f4xx_cryp.c **** 
 857:./FWLIB/src/stm32f4xx_cryp.c ****   if ((CRYP->CR & CRYP_CR_CRYPEN) != 0)
 940              		.loc 1 857 0
 941 0000 044B     		ldr	r3, .L70
 942 0002 1B68     		ldr	r3, [r3]
 943 0004 13F4004F 		tst	r3, #32768
 944 0008 01D1     		bne	.L69
 858:./FWLIB/src/stm32f4xx_cryp.c ****   {
 859:./FWLIB/src/stm32f4xx_cryp.c ****     /* CRYPEN bit is set */
 860:./FWLIB/src/stm32f4xx_cryp.c ****     state = ENABLE;
 861:./FWLIB/src/stm32f4xx_cryp.c ****   }
 862:./FWLIB/src/stm32f4xx_cryp.c ****   else
 863:./FWLIB/src/stm32f4xx_cryp.c ****   {
 864:./FWLIB/src/stm32f4xx_cryp.c ****     /* CRYPEN bit is reset */
 865:./FWLIB/src/stm32f4xx_cryp.c ****     state = DISABLE;
 945              		.loc 1 865 0
 946 000a 0020     		movs	r0, #0
 947              	.LVL39:
 866:./FWLIB/src/stm32f4xx_cryp.c ****   }
 867:./FWLIB/src/stm32f4xx_cryp.c ****   return state;
 868:./FWLIB/src/stm32f4xx_cryp.c **** }
 948              		.loc 1 868 0
 949 000c 7047     		bx	lr
 950              	.LVL40:
 951              	.L69:
 860:./FWLIB/src/stm32f4xx_cryp.c ****   }
 952              		.loc 1 860 0
 953 000e 0120     		movs	r0, #1
ARM GAS  /tmp/ccOoDJj1.s 			page 33


 954 0010 7047     		bx	lr
 955              	.L71:
 956 0012 00BF     		.align	2
 957              	.L70:
 958 0014 00000650 		.word	1342570496
 959              		.cfi_endproc
 960              	.LFE129:
 962              		.section	.text.CRYP_GetFlagStatus,"ax",%progbits
 963              		.align	1
 964              		.global	CRYP_GetFlagStatus
 965              		.syntax unified
 966              		.thumb
 967              		.thumb_func
 968              		.fpu fpv4-sp-d16
 970              	CRYP_GetFlagStatus:
 971              	.LFB130:
 869:./FWLIB/src/stm32f4xx_cryp.c **** 
 870:./FWLIB/src/stm32f4xx_cryp.c **** /**
 871:./FWLIB/src/stm32f4xx_cryp.c ****   * @brief  Checks whether the specified CRYP flag is set or not.
 872:./FWLIB/src/stm32f4xx_cryp.c ****   * @param  CRYP_FLAG: specifies the CRYP flag to check.
 873:./FWLIB/src/stm32f4xx_cryp.c ****   *          This parameter can be one of the following values:
 874:./FWLIB/src/stm32f4xx_cryp.c ****   *            @arg CRYP_FLAG_IFEM: Input FIFO Empty flag.
 875:./FWLIB/src/stm32f4xx_cryp.c ****   *            @arg CRYP_FLAG_IFNF: Input FIFO Not Full flag.
 876:./FWLIB/src/stm32f4xx_cryp.c ****   *            @arg CRYP_FLAG_OFNE: Output FIFO Not Empty flag.
 877:./FWLIB/src/stm32f4xx_cryp.c ****   *            @arg CRYP_FLAG_OFFU: Output FIFO Full flag.
 878:./FWLIB/src/stm32f4xx_cryp.c ****   *            @arg CRYP_FLAG_BUSY: Busy flag.
 879:./FWLIB/src/stm32f4xx_cryp.c ****   *            @arg CRYP_FLAG_OUTRIS: Output FIFO raw interrupt flag.
 880:./FWLIB/src/stm32f4xx_cryp.c ****   *            @arg CRYP_FLAG_INRIS: Input FIFO raw interrupt flag.
 881:./FWLIB/src/stm32f4xx_cryp.c ****   * @retval The new state of CRYP_FLAG (SET or RESET).
 882:./FWLIB/src/stm32f4xx_cryp.c ****   */
 883:./FWLIB/src/stm32f4xx_cryp.c **** FlagStatus CRYP_GetFlagStatus(uint8_t CRYP_FLAG)
 884:./FWLIB/src/stm32f4xx_cryp.c **** {
 972              		.loc 1 884 0
 973              		.cfi_startproc
 974              		@ args = 0, pretend = 0, frame = 0
 975              		@ frame_needed = 0, uses_anonymous_args = 0
 976              		@ link register save eliminated.
 977              	.LVL41:
 885:./FWLIB/src/stm32f4xx_cryp.c ****   FlagStatus bitstatus = RESET;
 886:./FWLIB/src/stm32f4xx_cryp.c ****   uint32_t tempreg = 0;
 887:./FWLIB/src/stm32f4xx_cryp.c **** 
 888:./FWLIB/src/stm32f4xx_cryp.c ****   /* Check the parameters */
 889:./FWLIB/src/stm32f4xx_cryp.c ****   assert_param(IS_CRYP_GET_FLAG(CRYP_FLAG));
 890:./FWLIB/src/stm32f4xx_cryp.c **** 
 891:./FWLIB/src/stm32f4xx_cryp.c ****   /* check if the FLAG is in RISR register */
 892:./FWLIB/src/stm32f4xx_cryp.c ****   if ((CRYP_FLAG & FLAG_MASK) != 0x00) 
 978              		.loc 1 892 0
 979 0000 10F0200F 		tst	r0, #32
 980 0004 05D0     		beq	.L73
 893:./FWLIB/src/stm32f4xx_cryp.c ****   {
 894:./FWLIB/src/stm32f4xx_cryp.c ****     tempreg = CRYP->RISR;
 981              		.loc 1 894 0
 982 0006 054B     		ldr	r3, .L78
 983 0008 9B69     		ldr	r3, [r3, #24]
 984              	.LVL42:
 985              	.L74:
 895:./FWLIB/src/stm32f4xx_cryp.c ****   }
ARM GAS  /tmp/ccOoDJj1.s 			page 34


 896:./FWLIB/src/stm32f4xx_cryp.c ****   else  /* The FLAG is in SR register */
 897:./FWLIB/src/stm32f4xx_cryp.c ****   {
 898:./FWLIB/src/stm32f4xx_cryp.c ****     tempreg = CRYP->SR;
 899:./FWLIB/src/stm32f4xx_cryp.c ****   }
 900:./FWLIB/src/stm32f4xx_cryp.c **** 
 901:./FWLIB/src/stm32f4xx_cryp.c **** 
 902:./FWLIB/src/stm32f4xx_cryp.c ****   /* Check the status of the specified CRYP flag */
 903:./FWLIB/src/stm32f4xx_cryp.c ****   if ((tempreg & CRYP_FLAG ) != (uint8_t)RESET)
 986              		.loc 1 903 0
 987 000a 1842     		tst	r0, r3
 988 000c 04D1     		bne	.L77
 904:./FWLIB/src/stm32f4xx_cryp.c ****   {
 905:./FWLIB/src/stm32f4xx_cryp.c ****     /* CRYP_FLAG is set */
 906:./FWLIB/src/stm32f4xx_cryp.c ****     bitstatus = SET;
 907:./FWLIB/src/stm32f4xx_cryp.c ****   }
 908:./FWLIB/src/stm32f4xx_cryp.c ****   else
 909:./FWLIB/src/stm32f4xx_cryp.c ****   {
 910:./FWLIB/src/stm32f4xx_cryp.c ****     /* CRYP_FLAG is reset */
 911:./FWLIB/src/stm32f4xx_cryp.c ****     bitstatus = RESET;
 989              		.loc 1 911 0
 990 000e 0020     		movs	r0, #0
 991              	.LVL43:
 912:./FWLIB/src/stm32f4xx_cryp.c ****   }
 913:./FWLIB/src/stm32f4xx_cryp.c **** 
 914:./FWLIB/src/stm32f4xx_cryp.c ****   /* Return the CRYP_FLAG status */
 915:./FWLIB/src/stm32f4xx_cryp.c ****   return  bitstatus;
 916:./FWLIB/src/stm32f4xx_cryp.c **** }
 992              		.loc 1 916 0
 993 0010 7047     		bx	lr
 994              	.LVL44:
 995              	.L73:
 898:./FWLIB/src/stm32f4xx_cryp.c ****   }
 996              		.loc 1 898 0
 997 0012 024B     		ldr	r3, .L78
 998 0014 5B68     		ldr	r3, [r3, #4]
 999              	.LVL45:
 1000 0016 F8E7     		b	.L74
 1001              	.L77:
 906:./FWLIB/src/stm32f4xx_cryp.c ****   }
 1002              		.loc 1 906 0
 1003 0018 0120     		movs	r0, #1
 1004              	.LVL46:
 1005 001a 7047     		bx	lr
 1006              	.L79:
 1007              		.align	2
 1008              	.L78:
 1009 001c 00000650 		.word	1342570496
 1010              		.cfi_endproc
 1011              	.LFE130:
 1013              		.text
 1014              	.Letext0:
 1015              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1016              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1017              		.file 4 "build/lnInclude/core_cm4.h"
 1018              		.file 5 "build/lnInclude/system_stm32f4xx.h"
 1019              		.file 6 "build/lnInclude/stm32f4xx.h"
 1020              		.file 7 "build/lnInclude/stm32f4xx_cryp.h"
ARM GAS  /tmp/ccOoDJj1.s 			page 35


 1021              		.file 8 "build/lnInclude/stm32f4xx_rcc.h"
ARM GAS  /tmp/ccOoDJj1.s 			page 36


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_cryp.c
     /tmp/ccOoDJj1.s:18     .text.CRYP_DeInit:0000000000000000 $t
     /tmp/ccOoDJj1.s:25     .text.CRYP_DeInit:0000000000000000 CRYP_DeInit
     /tmp/ccOoDJj1.s:53     .text.CRYP_Init:0000000000000000 $t
     /tmp/ccOoDJj1.s:60     .text.CRYP_Init:0000000000000000 CRYP_Init
     /tmp/ccOoDJj1.s:126    .text.CRYP_Init:000000000000005c $d
     /tmp/ccOoDJj1.s:131    .text.CRYP_StructInit:0000000000000000 $t
     /tmp/ccOoDJj1.s:138    .text.CRYP_StructInit:0000000000000000 CRYP_StructInit
     /tmp/ccOoDJj1.s:161    .text.CRYP_KeyInit:0000000000000000 $t
     /tmp/ccOoDJj1.s:168    .text.CRYP_KeyInit:0000000000000000 CRYP_KeyInit
     /tmp/ccOoDJj1.s:206    .text.CRYP_KeyInit:0000000000000024 $d
     /tmp/ccOoDJj1.s:211    .text.CRYP_KeyStructInit:0000000000000000 $t
     /tmp/ccOoDJj1.s:218    .text.CRYP_KeyStructInit:0000000000000000 CRYP_KeyStructInit
     /tmp/ccOoDJj1.s:249    .text.CRYP_IVInit:0000000000000000 $t
     /tmp/ccOoDJj1.s:256    .text.CRYP_IVInit:0000000000000000 CRYP_IVInit
     /tmp/ccOoDJj1.s:282    .text.CRYP_IVInit:0000000000000014 $d
     /tmp/ccOoDJj1.s:287    .text.CRYP_IVStructInit:0000000000000000 $t
     /tmp/ccOoDJj1.s:294    .text.CRYP_IVStructInit:0000000000000000 CRYP_IVStructInit
     /tmp/ccOoDJj1.s:317    .text.CRYP_PhaseConfig:0000000000000000 $t
     /tmp/ccOoDJj1.s:324    .text.CRYP_PhaseConfig:0000000000000000 CRYP_PhaseConfig
     /tmp/ccOoDJj1.s:349    .text.CRYP_PhaseConfig:0000000000000010 $d
     /tmp/ccOoDJj1.s:354    .text.CRYP_FIFOFlush:0000000000000000 $t
     /tmp/ccOoDJj1.s:361    .text.CRYP_FIFOFlush:0000000000000000 CRYP_FIFOFlush
     /tmp/ccOoDJj1.s:378    .text.CRYP_FIFOFlush:000000000000000c $d
     /tmp/ccOoDJj1.s:383    .text.CRYP_Cmd:0000000000000000 $t
     /tmp/ccOoDJj1.s:390    .text.CRYP_Cmd:0000000000000000 CRYP_Cmd
     /tmp/ccOoDJj1.s:417    .text.CRYP_Cmd:000000000000001c $d
     /tmp/ccOoDJj1.s:422    .text.CRYP_DataIn:0000000000000000 $t
     /tmp/ccOoDJj1.s:429    .text.CRYP_DataIn:0000000000000000 CRYP_DataIn
     /tmp/ccOoDJj1.s:445    .text.CRYP_DataIn:0000000000000008 $d
     /tmp/ccOoDJj1.s:450    .text.CRYP_DataOut:0000000000000000 $t
     /tmp/ccOoDJj1.s:457    .text.CRYP_DataOut:0000000000000000 CRYP_DataOut
     /tmp/ccOoDJj1.s:472    .text.CRYP_DataOut:0000000000000008 $d
     /tmp/ccOoDJj1.s:477    .text.CRYP_SaveContext:0000000000000000 $t
     /tmp/ccOoDJj1.s:484    .text.CRYP_SaveContext:0000000000000000 CRYP_SaveContext
     /tmp/ccOoDJj1.s:676    .text.CRYP_SaveContext:00000000000000f0 $d
     /tmp/ccOoDJj1.s:681    .text.CRYP_RestoreContext:0000000000000000 $t
     /tmp/ccOoDJj1.s:688    .text.CRYP_RestoreContext:0000000000000000 CRYP_RestoreContext
     /tmp/ccOoDJj1.s:793    .text.CRYP_RestoreContext:0000000000000088 $d
     /tmp/ccOoDJj1.s:798    .text.CRYP_DMACmd:0000000000000000 $t
     /tmp/ccOoDJj1.s:805    .text.CRYP_DMACmd:0000000000000000 CRYP_DMACmd
     /tmp/ccOoDJj1.s:837    .text.CRYP_DMACmd:000000000000001c $d
     /tmp/ccOoDJj1.s:842    .text.CRYP_ITConfig:0000000000000000 $t
     /tmp/ccOoDJj1.s:849    .text.CRYP_ITConfig:0000000000000000 CRYP_ITConfig
     /tmp/ccOoDJj1.s:881    .text.CRYP_ITConfig:000000000000001c $d
     /tmp/ccOoDJj1.s:886    .text.CRYP_GetITStatus:0000000000000000 $t
     /tmp/ccOoDJj1.s:893    .text.CRYP_GetITStatus:0000000000000000 CRYP_GetITStatus
     /tmp/ccOoDJj1.s:920    .text.CRYP_GetITStatus:0000000000000010 $d
     /tmp/ccOoDJj1.s:925    .text.CRYP_GetCmdStatus:0000000000000000 $t
     /tmp/ccOoDJj1.s:932    .text.CRYP_GetCmdStatus:0000000000000000 CRYP_GetCmdStatus
     /tmp/ccOoDJj1.s:958    .text.CRYP_GetCmdStatus:0000000000000014 $d
     /tmp/ccOoDJj1.s:963    .text.CRYP_GetFlagStatus:0000000000000000 $t
     /tmp/ccOoDJj1.s:970    .text.CRYP_GetFlagStatus:0000000000000000 CRYP_GetFlagStatus
     /tmp/ccOoDJj1.s:1009   .text.CRYP_GetFlagStatus:000000000000001c $d

UNDEFINED SYMBOLS
ARM GAS  /tmp/ccOoDJj1.s 			page 37


RCC_AHB2PeriphResetCmd
