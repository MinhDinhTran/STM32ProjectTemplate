ARM GAS  /tmp/ccmLA7br.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_can.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.CheckITStatus,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	CheckITStatus:
  25              	.LFB136:
  26              		.file 1 "./FWLIB/src/stm32f4xx_can.c"
   1:./FWLIB/src/stm32f4xx_can.c **** /**
   2:./FWLIB/src/stm32f4xx_can.c ****   ******************************************************************************
   3:./FWLIB/src/stm32f4xx_can.c ****   * @file    stm32f4xx_can.c
   4:./FWLIB/src/stm32f4xx_can.c ****   * @author  MCD Application Team
   5:./FWLIB/src/stm32f4xx_can.c ****   * @version V1.4.0
   6:./FWLIB/src/stm32f4xx_can.c ****   * @date    04-August-2014
   7:./FWLIB/src/stm32f4xx_can.c ****   * @brief   This file provides firmware functions to manage the following 
   8:./FWLIB/src/stm32f4xx_can.c ****   *          functionalities of the Controller area network (CAN) peripheral:
   9:./FWLIB/src/stm32f4xx_can.c ****   *           + Initialization and Configuration 
  10:./FWLIB/src/stm32f4xx_can.c ****   *           + CAN Frames Transmission
  11:./FWLIB/src/stm32f4xx_can.c ****   *           + CAN Frames Reception
  12:./FWLIB/src/stm32f4xx_can.c ****   *           + Operation modes switch
  13:./FWLIB/src/stm32f4xx_can.c ****   *           + Error management
  14:./FWLIB/src/stm32f4xx_can.c ****   *           + Interrupts and flags
  15:./FWLIB/src/stm32f4xx_can.c ****   *
  16:./FWLIB/src/stm32f4xx_can.c **** @verbatim
  17:./FWLIB/src/stm32f4xx_can.c ****  ===============================================================================
  18:./FWLIB/src/stm32f4xx_can.c ****                         ##### How to use this driver #####
  19:./FWLIB/src/stm32f4xx_can.c ****  ===============================================================================
  20:./FWLIB/src/stm32f4xx_can.c ****     [..]
  21:./FWLIB/src/stm32f4xx_can.c ****       (#) Enable the CAN controller interface clock using 
  22:./FWLIB/src/stm32f4xx_can.c ****           RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN1, ENABLE); for CAN1 
  23:./FWLIB/src/stm32f4xx_can.c ****           and RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN2, ENABLE); for CAN2
  24:./FWLIB/src/stm32f4xx_can.c ****       -@- In case you are using CAN2 only, you have to enable the CAN1 clock.
  25:./FWLIB/src/stm32f4xx_can.c ****        
  26:./FWLIB/src/stm32f4xx_can.c ****       (#) CAN pins configuration
  27:./FWLIB/src/stm32f4xx_can.c ****         (++) Enable the clock for the CAN GPIOs using the following function:
  28:./FWLIB/src/stm32f4xx_can.c ****              RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOx, ENABLE);   
  29:./FWLIB/src/stm32f4xx_can.c ****         (++) Connect the involved CAN pins to AF9 using the following function 
  30:./FWLIB/src/stm32f4xx_can.c ****              GPIO_PinAFConfig(GPIOx, GPIO_PinSourcex, GPIO_AF_CANx); 
  31:./FWLIB/src/stm32f4xx_can.c ****         (++) Configure these CAN pins in alternate function mode by calling
  32:./FWLIB/src/stm32f4xx_can.c ****              the function  GPIO_Init();
ARM GAS  /tmp/ccmLA7br.s 			page 2


  33:./FWLIB/src/stm32f4xx_can.c ****       
  34:./FWLIB/src/stm32f4xx_can.c ****       (#) Initialise and configure the CAN using CAN_Init() and 
  35:./FWLIB/src/stm32f4xx_can.c ****           CAN_FilterInit() functions.   
  36:./FWLIB/src/stm32f4xx_can.c ****                  
  37:./FWLIB/src/stm32f4xx_can.c ****       (#) Transmit the desired CAN frame using CAN_Transmit() function.
  38:./FWLIB/src/stm32f4xx_can.c ****            
  39:./FWLIB/src/stm32f4xx_can.c ****       (#) Check the transmission of a CAN frame using CAN_TransmitStatus()
  40:./FWLIB/src/stm32f4xx_can.c ****           function.
  41:./FWLIB/src/stm32f4xx_can.c ****                  
  42:./FWLIB/src/stm32f4xx_can.c ****       (#) Cancel the transmission of a CAN frame using CAN_CancelTransmit()
  43:./FWLIB/src/stm32f4xx_can.c ****           function.  
  44:./FWLIB/src/stm32f4xx_can.c ****               
  45:./FWLIB/src/stm32f4xx_can.c ****       (#) Receive a CAN frame using CAN_Recieve() function.
  46:./FWLIB/src/stm32f4xx_can.c ****            
  47:./FWLIB/src/stm32f4xx_can.c ****       (#) Release the receive FIFOs using CAN_FIFORelease() function.
  48:./FWLIB/src/stm32f4xx_can.c ****                  
  49:./FWLIB/src/stm32f4xx_can.c ****       (#) Return the number of pending received frames using 
  50:./FWLIB/src/stm32f4xx_can.c ****           CAN_MessagePending() function.            
  51:./FWLIB/src/stm32f4xx_can.c ****                      
  52:./FWLIB/src/stm32f4xx_can.c ****       (#) To control CAN events you can use one of the following two methods:
  53:./FWLIB/src/stm32f4xx_can.c ****         (++) Check on CAN flags using the CAN_GetFlagStatus() function.  
  54:./FWLIB/src/stm32f4xx_can.c ****         (++) Use CAN interrupts through the function CAN_ITConfig() at 
  55:./FWLIB/src/stm32f4xx_can.c ****              initialization phase and CAN_GetITStatus() function into 
  56:./FWLIB/src/stm32f4xx_can.c ****              interrupt routines to check if the event has occurred or not.
  57:./FWLIB/src/stm32f4xx_can.c ****              After checking on a flag you should clear it using CAN_ClearFlag()
  58:./FWLIB/src/stm32f4xx_can.c ****              function. And after checking on an interrupt event you should 
  59:./FWLIB/src/stm32f4xx_can.c ****              clear it using CAN_ClearITPendingBit() function.            
  60:./FWLIB/src/stm32f4xx_can.c **** 
  61:./FWLIB/src/stm32f4xx_can.c **** @endverbatim
  62:./FWLIB/src/stm32f4xx_can.c ****            
  63:./FWLIB/src/stm32f4xx_can.c ****   ******************************************************************************
  64:./FWLIB/src/stm32f4xx_can.c ****   * @attention
  65:./FWLIB/src/stm32f4xx_can.c ****   *
  66:./FWLIB/src/stm32f4xx_can.c ****   * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
  67:./FWLIB/src/stm32f4xx_can.c ****   *
  68:./FWLIB/src/stm32f4xx_can.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  69:./FWLIB/src/stm32f4xx_can.c ****   * You may not use this file except in compliance with the License.
  70:./FWLIB/src/stm32f4xx_can.c ****   * You may obtain a copy of the License at:
  71:./FWLIB/src/stm32f4xx_can.c ****   *
  72:./FWLIB/src/stm32f4xx_can.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  73:./FWLIB/src/stm32f4xx_can.c ****   *
  74:./FWLIB/src/stm32f4xx_can.c ****   * Unless required by applicable law or agreed to in writing, software 
  75:./FWLIB/src/stm32f4xx_can.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  76:./FWLIB/src/stm32f4xx_can.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  77:./FWLIB/src/stm32f4xx_can.c ****   * See the License for the specific language governing permissions and
  78:./FWLIB/src/stm32f4xx_can.c ****   * limitations under the License.
  79:./FWLIB/src/stm32f4xx_can.c ****   *
  80:./FWLIB/src/stm32f4xx_can.c ****   ******************************************************************************  
  81:./FWLIB/src/stm32f4xx_can.c ****   */
  82:./FWLIB/src/stm32f4xx_can.c **** 
  83:./FWLIB/src/stm32f4xx_can.c **** /* Includes ------------------------------------------------------------------*/
  84:./FWLIB/src/stm32f4xx_can.c **** #include "stm32f4xx_can.h"
  85:./FWLIB/src/stm32f4xx_can.c **** #include "stm32f4xx_rcc.h"
  86:./FWLIB/src/stm32f4xx_can.c **** 
  87:./FWLIB/src/stm32f4xx_can.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  88:./FWLIB/src/stm32f4xx_can.c ****   * @{
  89:./FWLIB/src/stm32f4xx_can.c ****   */
ARM GAS  /tmp/ccmLA7br.s 			page 3


  90:./FWLIB/src/stm32f4xx_can.c **** 
  91:./FWLIB/src/stm32f4xx_can.c **** /** @defgroup CAN 
  92:./FWLIB/src/stm32f4xx_can.c ****   * @brief CAN driver modules
  93:./FWLIB/src/stm32f4xx_can.c ****   * @{
  94:./FWLIB/src/stm32f4xx_can.c ****   */ 
  95:./FWLIB/src/stm32f4xx_can.c **** /* Private typedef -----------------------------------------------------------*/
  96:./FWLIB/src/stm32f4xx_can.c **** /* Private define ------------------------------------------------------------*/
  97:./FWLIB/src/stm32f4xx_can.c **** 
  98:./FWLIB/src/stm32f4xx_can.c **** /* CAN Master Control Register bits */
  99:./FWLIB/src/stm32f4xx_can.c **** #define MCR_DBF           ((uint32_t)0x00010000) /* software master reset */
 100:./FWLIB/src/stm32f4xx_can.c **** 
 101:./FWLIB/src/stm32f4xx_can.c **** /* CAN Mailbox Transmit Request */
 102:./FWLIB/src/stm32f4xx_can.c **** #define TMIDxR_TXRQ       ((uint32_t)0x00000001) /* Transmit mailbox request */
 103:./FWLIB/src/stm32f4xx_can.c **** 
 104:./FWLIB/src/stm32f4xx_can.c **** /* CAN Filter Master Register bits */
 105:./FWLIB/src/stm32f4xx_can.c **** #define FMR_FINIT         ((uint32_t)0x00000001) /* Filter init mode */
 106:./FWLIB/src/stm32f4xx_can.c **** 
 107:./FWLIB/src/stm32f4xx_can.c **** /* Time out for INAK bit */
 108:./FWLIB/src/stm32f4xx_can.c **** #define INAK_TIMEOUT      ((uint32_t)0x0000FFFF)
 109:./FWLIB/src/stm32f4xx_can.c **** /* Time out for SLAK bit */
 110:./FWLIB/src/stm32f4xx_can.c **** #define SLAK_TIMEOUT      ((uint32_t)0x0000FFFF)
 111:./FWLIB/src/stm32f4xx_can.c **** 
 112:./FWLIB/src/stm32f4xx_can.c **** /* Flags in TSR register */
 113:./FWLIB/src/stm32f4xx_can.c **** #define CAN_FLAGS_TSR     ((uint32_t)0x08000000) 
 114:./FWLIB/src/stm32f4xx_can.c **** /* Flags in RF1R register */
 115:./FWLIB/src/stm32f4xx_can.c **** #define CAN_FLAGS_RF1R    ((uint32_t)0x04000000) 
 116:./FWLIB/src/stm32f4xx_can.c **** /* Flags in RF0R register */
 117:./FWLIB/src/stm32f4xx_can.c **** #define CAN_FLAGS_RF0R    ((uint32_t)0x02000000) 
 118:./FWLIB/src/stm32f4xx_can.c **** /* Flags in MSR register */
 119:./FWLIB/src/stm32f4xx_can.c **** #define CAN_FLAGS_MSR     ((uint32_t)0x01000000) 
 120:./FWLIB/src/stm32f4xx_can.c **** /* Flags in ESR register */
 121:./FWLIB/src/stm32f4xx_can.c **** #define CAN_FLAGS_ESR     ((uint32_t)0x00F00000) 
 122:./FWLIB/src/stm32f4xx_can.c **** 
 123:./FWLIB/src/stm32f4xx_can.c **** /* Mailboxes definition */
 124:./FWLIB/src/stm32f4xx_can.c **** #define CAN_TXMAILBOX_0   ((uint8_t)0x00)
 125:./FWLIB/src/stm32f4xx_can.c **** #define CAN_TXMAILBOX_1   ((uint8_t)0x01)
 126:./FWLIB/src/stm32f4xx_can.c **** #define CAN_TXMAILBOX_2   ((uint8_t)0x02) 
 127:./FWLIB/src/stm32f4xx_can.c **** 
 128:./FWLIB/src/stm32f4xx_can.c **** #define CAN_MODE_MASK     ((uint32_t) 0x00000003)
 129:./FWLIB/src/stm32f4xx_can.c **** 
 130:./FWLIB/src/stm32f4xx_can.c **** /* Private macro -------------------------------------------------------------*/
 131:./FWLIB/src/stm32f4xx_can.c **** /* Private variables ---------------------------------------------------------*/
 132:./FWLIB/src/stm32f4xx_can.c **** /* Private function prototypes -----------------------------------------------*/
 133:./FWLIB/src/stm32f4xx_can.c **** /* Private functions ---------------------------------------------------------*/
 134:./FWLIB/src/stm32f4xx_can.c **** static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit);
 135:./FWLIB/src/stm32f4xx_can.c **** 
 136:./FWLIB/src/stm32f4xx_can.c **** /** @defgroup CAN_Private_Functions
 137:./FWLIB/src/stm32f4xx_can.c ****   * @{
 138:./FWLIB/src/stm32f4xx_can.c ****   */
 139:./FWLIB/src/stm32f4xx_can.c **** 
 140:./FWLIB/src/stm32f4xx_can.c **** /** @defgroup CAN_Group1 Initialization and Configuration functions
 141:./FWLIB/src/stm32f4xx_can.c ****  *  @brief    Initialization and Configuration functions 
 142:./FWLIB/src/stm32f4xx_can.c ****  *
 143:./FWLIB/src/stm32f4xx_can.c **** @verbatim    
 144:./FWLIB/src/stm32f4xx_can.c ****  ===============================================================================
 145:./FWLIB/src/stm32f4xx_can.c ****               ##### Initialization and Configuration functions #####
 146:./FWLIB/src/stm32f4xx_can.c ****  ===============================================================================  
ARM GAS  /tmp/ccmLA7br.s 			page 4


 147:./FWLIB/src/stm32f4xx_can.c ****     [..] This section provides functions allowing to 
 148:./FWLIB/src/stm32f4xx_can.c ****       (+) Initialize the CAN peripherals : Prescaler, operating mode, the maximum 
 149:./FWLIB/src/stm32f4xx_can.c ****           number of time quanta to perform resynchronization, the number of time 
 150:./FWLIB/src/stm32f4xx_can.c ****           quanta in Bit Segment 1 and 2 and many other modes. 
 151:./FWLIB/src/stm32f4xx_can.c ****           Refer to  @ref CAN_InitTypeDef  for more details.
 152:./FWLIB/src/stm32f4xx_can.c ****       (+) Configures the CAN reception filter.                                      
 153:./FWLIB/src/stm32f4xx_can.c ****       (+) Select the start bank filter for slave CAN.
 154:./FWLIB/src/stm32f4xx_can.c ****       (+) Enables or disables the Debug Freeze mode for CAN
 155:./FWLIB/src/stm32f4xx_can.c ****       (+)Enables or disables the CAN Time Trigger Operation communication mode
 156:./FWLIB/src/stm32f4xx_can.c ****    
 157:./FWLIB/src/stm32f4xx_can.c **** @endverbatim
 158:./FWLIB/src/stm32f4xx_can.c ****   * @{
 159:./FWLIB/src/stm32f4xx_can.c ****   */
 160:./FWLIB/src/stm32f4xx_can.c ****   
 161:./FWLIB/src/stm32f4xx_can.c **** /**
 162:./FWLIB/src/stm32f4xx_can.c ****   * @brief  Deinitializes the CAN peripheral registers to their default reset values.
 163:./FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
 164:./FWLIB/src/stm32f4xx_can.c ****   * @retval None.
 165:./FWLIB/src/stm32f4xx_can.c ****   */
 166:./FWLIB/src/stm32f4xx_can.c **** void CAN_DeInit(CAN_TypeDef* CANx)
 167:./FWLIB/src/stm32f4xx_can.c **** {
 168:./FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 169:./FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 170:./FWLIB/src/stm32f4xx_can.c ****  
 171:./FWLIB/src/stm32f4xx_can.c ****   if (CANx == CAN1)
 172:./FWLIB/src/stm32f4xx_can.c ****   {
 173:./FWLIB/src/stm32f4xx_can.c ****     /* Enable CAN1 reset state */
 174:./FWLIB/src/stm32f4xx_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
 175:./FWLIB/src/stm32f4xx_can.c ****     /* Release CAN1 from reset state */
 176:./FWLIB/src/stm32f4xx_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
 177:./FWLIB/src/stm32f4xx_can.c ****   }
 178:./FWLIB/src/stm32f4xx_can.c ****   else
 179:./FWLIB/src/stm32f4xx_can.c ****   {  
 180:./FWLIB/src/stm32f4xx_can.c ****     /* Enable CAN2 reset state */
 181:./FWLIB/src/stm32f4xx_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
 182:./FWLIB/src/stm32f4xx_can.c ****     /* Release CAN2 from reset state */
 183:./FWLIB/src/stm32f4xx_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
 184:./FWLIB/src/stm32f4xx_can.c ****   }
 185:./FWLIB/src/stm32f4xx_can.c **** }
 186:./FWLIB/src/stm32f4xx_can.c **** 
 187:./FWLIB/src/stm32f4xx_can.c **** /**
 188:./FWLIB/src/stm32f4xx_can.c ****   * @brief  Initializes the CAN peripheral according to the specified
 189:./FWLIB/src/stm32f4xx_can.c ****   *         parameters in the CAN_InitStruct.
 190:./FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
 191:./FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure that contains
 192:./FWLIB/src/stm32f4xx_can.c ****   *         the configuration information for the CAN peripheral.
 193:./FWLIB/src/stm32f4xx_can.c ****   * @retval Constant indicates initialization succeed which will be 
 194:./FWLIB/src/stm32f4xx_can.c ****   *         CAN_InitStatus_Failed or CAN_InitStatus_Success.
 195:./FWLIB/src/stm32f4xx_can.c ****   */
 196:./FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
 197:./FWLIB/src/stm32f4xx_can.c **** {
 198:./FWLIB/src/stm32f4xx_can.c ****   uint8_t InitStatus = CAN_InitStatus_Failed;
 199:./FWLIB/src/stm32f4xx_can.c ****   uint32_t wait_ack = 0x00000000;
 200:./FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 201:./FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 202:./FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_TTCM));
 203:./FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_ABOM));
ARM GAS  /tmp/ccmLA7br.s 			page 5


 204:./FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_AWUM));
 205:./FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_NART));
 206:./FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_RFLM));
 207:./FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_TXFP));
 208:./FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_MODE(CAN_InitStruct->CAN_Mode));
 209:./FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_SJW(CAN_InitStruct->CAN_SJW));
 210:./FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
 211:./FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
 212:./FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));
 213:./FWLIB/src/stm32f4xx_can.c **** 
 214:./FWLIB/src/stm32f4xx_can.c ****   /* Exit from sleep mode */
 215:./FWLIB/src/stm32f4xx_can.c ****   CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 216:./FWLIB/src/stm32f4xx_can.c **** 
 217:./FWLIB/src/stm32f4xx_can.c ****   /* Request initialisation */
 218:./FWLIB/src/stm32f4xx_can.c ****   CANx->MCR |= CAN_MCR_INRQ ;
 219:./FWLIB/src/stm32f4xx_can.c **** 
 220:./FWLIB/src/stm32f4xx_can.c ****   /* Wait the acknowledge */
 221:./FWLIB/src/stm32f4xx_can.c ****   while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 222:./FWLIB/src/stm32f4xx_can.c ****   {
 223:./FWLIB/src/stm32f4xx_can.c ****     wait_ack++;
 224:./FWLIB/src/stm32f4xx_can.c ****   }
 225:./FWLIB/src/stm32f4xx_can.c **** 
 226:./FWLIB/src/stm32f4xx_can.c ****   /* Check acknowledge */
 227:./FWLIB/src/stm32f4xx_can.c ****   if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 228:./FWLIB/src/stm32f4xx_can.c ****   {
 229:./FWLIB/src/stm32f4xx_can.c ****     InitStatus = CAN_InitStatus_Failed;
 230:./FWLIB/src/stm32f4xx_can.c ****   }
 231:./FWLIB/src/stm32f4xx_can.c ****   else 
 232:./FWLIB/src/stm32f4xx_can.c ****   {
 233:./FWLIB/src/stm32f4xx_can.c ****     /* Set the time triggered communication mode */
 234:./FWLIB/src/stm32f4xx_can.c ****     if (CAN_InitStruct->CAN_TTCM == ENABLE)
 235:./FWLIB/src/stm32f4xx_can.c ****     {
 236:./FWLIB/src/stm32f4xx_can.c ****       CANx->MCR |= CAN_MCR_TTCM;
 237:./FWLIB/src/stm32f4xx_can.c ****     }
 238:./FWLIB/src/stm32f4xx_can.c ****     else
 239:./FWLIB/src/stm32f4xx_can.c ****     {
 240:./FWLIB/src/stm32f4xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 241:./FWLIB/src/stm32f4xx_can.c ****     }
 242:./FWLIB/src/stm32f4xx_can.c **** 
 243:./FWLIB/src/stm32f4xx_can.c ****     /* Set the automatic bus-off management */
 244:./FWLIB/src/stm32f4xx_can.c ****     if (CAN_InitStruct->CAN_ABOM == ENABLE)
 245:./FWLIB/src/stm32f4xx_can.c ****     {
 246:./FWLIB/src/stm32f4xx_can.c ****       CANx->MCR |= CAN_MCR_ABOM;
 247:./FWLIB/src/stm32f4xx_can.c ****     }
 248:./FWLIB/src/stm32f4xx_can.c ****     else
 249:./FWLIB/src/stm32f4xx_can.c ****     {
 250:./FWLIB/src/stm32f4xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 251:./FWLIB/src/stm32f4xx_can.c ****     }
 252:./FWLIB/src/stm32f4xx_can.c **** 
 253:./FWLIB/src/stm32f4xx_can.c ****     /* Set the automatic wake-up mode */
 254:./FWLIB/src/stm32f4xx_can.c ****     if (CAN_InitStruct->CAN_AWUM == ENABLE)
 255:./FWLIB/src/stm32f4xx_can.c ****     {
 256:./FWLIB/src/stm32f4xx_can.c ****       CANx->MCR |= CAN_MCR_AWUM;
 257:./FWLIB/src/stm32f4xx_can.c ****     }
 258:./FWLIB/src/stm32f4xx_can.c ****     else
 259:./FWLIB/src/stm32f4xx_can.c ****     {
 260:./FWLIB/src/stm32f4xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
ARM GAS  /tmp/ccmLA7br.s 			page 6


 261:./FWLIB/src/stm32f4xx_can.c ****     }
 262:./FWLIB/src/stm32f4xx_can.c **** 
 263:./FWLIB/src/stm32f4xx_can.c ****     /* Set the no automatic retransmission */
 264:./FWLIB/src/stm32f4xx_can.c ****     if (CAN_InitStruct->CAN_NART == ENABLE)
 265:./FWLIB/src/stm32f4xx_can.c ****     {
 266:./FWLIB/src/stm32f4xx_can.c ****       CANx->MCR |= CAN_MCR_NART;
 267:./FWLIB/src/stm32f4xx_can.c ****     }
 268:./FWLIB/src/stm32f4xx_can.c ****     else
 269:./FWLIB/src/stm32f4xx_can.c ****     {
 270:./FWLIB/src/stm32f4xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
 271:./FWLIB/src/stm32f4xx_can.c ****     }
 272:./FWLIB/src/stm32f4xx_can.c **** 
 273:./FWLIB/src/stm32f4xx_can.c ****     /* Set the receive FIFO locked mode */
 274:./FWLIB/src/stm32f4xx_can.c ****     if (CAN_InitStruct->CAN_RFLM == ENABLE)
 275:./FWLIB/src/stm32f4xx_can.c ****     {
 276:./FWLIB/src/stm32f4xx_can.c ****       CANx->MCR |= CAN_MCR_RFLM;
 277:./FWLIB/src/stm32f4xx_can.c ****     }
 278:./FWLIB/src/stm32f4xx_can.c ****     else
 279:./FWLIB/src/stm32f4xx_can.c ****     {
 280:./FWLIB/src/stm32f4xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 281:./FWLIB/src/stm32f4xx_can.c ****     }
 282:./FWLIB/src/stm32f4xx_can.c **** 
 283:./FWLIB/src/stm32f4xx_can.c ****     /* Set the transmit FIFO priority */
 284:./FWLIB/src/stm32f4xx_can.c ****     if (CAN_InitStruct->CAN_TXFP == ENABLE)
 285:./FWLIB/src/stm32f4xx_can.c ****     {
 286:./FWLIB/src/stm32f4xx_can.c ****       CANx->MCR |= CAN_MCR_TXFP;
 287:./FWLIB/src/stm32f4xx_can.c ****     }
 288:./FWLIB/src/stm32f4xx_can.c ****     else
 289:./FWLIB/src/stm32f4xx_can.c ****     {
 290:./FWLIB/src/stm32f4xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 291:./FWLIB/src/stm32f4xx_can.c ****     }
 292:./FWLIB/src/stm32f4xx_can.c **** 
 293:./FWLIB/src/stm32f4xx_can.c ****     /* Set the bit timing register */
 294:./FWLIB/src/stm32f4xx_can.c ****     CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 295:./FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 296:./FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 297:./FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 298:./FWLIB/src/stm32f4xx_can.c ****                ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 299:./FWLIB/src/stm32f4xx_can.c **** 
 300:./FWLIB/src/stm32f4xx_can.c ****     /* Request leave initialisation */
 301:./FWLIB/src/stm32f4xx_can.c ****     CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 302:./FWLIB/src/stm32f4xx_can.c **** 
 303:./FWLIB/src/stm32f4xx_can.c ****    /* Wait the acknowledge */
 304:./FWLIB/src/stm32f4xx_can.c ****    wait_ack = 0;
 305:./FWLIB/src/stm32f4xx_can.c **** 
 306:./FWLIB/src/stm32f4xx_can.c ****    while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 307:./FWLIB/src/stm32f4xx_can.c ****    {
 308:./FWLIB/src/stm32f4xx_can.c ****      wait_ack++;
 309:./FWLIB/src/stm32f4xx_can.c ****    }
 310:./FWLIB/src/stm32f4xx_can.c **** 
 311:./FWLIB/src/stm32f4xx_can.c ****     /* ...and check acknowledged */
 312:./FWLIB/src/stm32f4xx_can.c ****     if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 313:./FWLIB/src/stm32f4xx_can.c ****     {
 314:./FWLIB/src/stm32f4xx_can.c ****       InitStatus = CAN_InitStatus_Failed;
 315:./FWLIB/src/stm32f4xx_can.c ****     }
 316:./FWLIB/src/stm32f4xx_can.c ****     else
 317:./FWLIB/src/stm32f4xx_can.c ****     {
ARM GAS  /tmp/ccmLA7br.s 			page 7


 318:./FWLIB/src/stm32f4xx_can.c ****       InitStatus = CAN_InitStatus_Success ;
 319:./FWLIB/src/stm32f4xx_can.c ****     }
 320:./FWLIB/src/stm32f4xx_can.c ****   }
 321:./FWLIB/src/stm32f4xx_can.c **** 
 322:./FWLIB/src/stm32f4xx_can.c ****   /* At this step, return the status of initialization */
 323:./FWLIB/src/stm32f4xx_can.c ****   return InitStatus;
 324:./FWLIB/src/stm32f4xx_can.c **** }
 325:./FWLIB/src/stm32f4xx_can.c **** 
 326:./FWLIB/src/stm32f4xx_can.c **** /**
 327:./FWLIB/src/stm32f4xx_can.c ****   * @brief  Configures the CAN reception filter according to the specified
 328:./FWLIB/src/stm32f4xx_can.c ****   *         parameters in the CAN_FilterInitStruct.
 329:./FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_FilterInitStruct: pointer to a CAN_FilterInitTypeDef structure that
 330:./FWLIB/src/stm32f4xx_can.c ****   *         contains the configuration information.
 331:./FWLIB/src/stm32f4xx_can.c ****   * @retval None
 332:./FWLIB/src/stm32f4xx_can.c ****   */
 333:./FWLIB/src/stm32f4xx_can.c **** void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
 334:./FWLIB/src/stm32f4xx_can.c **** {
 335:./FWLIB/src/stm32f4xx_can.c ****   uint32_t filter_number_bit_pos = 0;
 336:./FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 337:./FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FILTER_NUMBER(CAN_FilterInitStruct->CAN_FilterNumber));
 338:./FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
 339:./FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
 340:./FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
 341:./FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));
 342:./FWLIB/src/stm32f4xx_can.c **** 
 343:./FWLIB/src/stm32f4xx_can.c ****   filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 344:./FWLIB/src/stm32f4xx_can.c **** 
 345:./FWLIB/src/stm32f4xx_can.c ****   /* Initialisation mode for the filter */
 346:./FWLIB/src/stm32f4xx_can.c ****   CAN1->FMR |= FMR_FINIT;
 347:./FWLIB/src/stm32f4xx_can.c **** 
 348:./FWLIB/src/stm32f4xx_can.c ****   /* Filter Deactivation */
 349:./FWLIB/src/stm32f4xx_can.c ****   CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
 350:./FWLIB/src/stm32f4xx_can.c **** 
 351:./FWLIB/src/stm32f4xx_can.c ****   /* Filter Scale */
 352:./FWLIB/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
 353:./FWLIB/src/stm32f4xx_can.c ****   {
 354:./FWLIB/src/stm32f4xx_can.c ****     /* 16-bit scale for the filter */
 355:./FWLIB/src/stm32f4xx_can.c ****     CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
 356:./FWLIB/src/stm32f4xx_can.c **** 
 357:./FWLIB/src/stm32f4xx_can.c ****     /* First 16-bit identifier and First 16-bit mask */
 358:./FWLIB/src/stm32f4xx_can.c ****     /* Or First 16-bit identifier and Second 16-bit identifier */
 359:./FWLIB/src/stm32f4xx_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 360:./FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 361:./FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 362:./FWLIB/src/stm32f4xx_can.c **** 
 363:./FWLIB/src/stm32f4xx_can.c ****     /* Second 16-bit identifier and Second 16-bit mask */
 364:./FWLIB/src/stm32f4xx_can.c ****     /* Or Third 16-bit identifier and Fourth 16-bit identifier */
 365:./FWLIB/src/stm32f4xx_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 366:./FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 367:./FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 368:./FWLIB/src/stm32f4xx_can.c ****   }
 369:./FWLIB/src/stm32f4xx_can.c **** 
 370:./FWLIB/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
 371:./FWLIB/src/stm32f4xx_can.c ****   {
 372:./FWLIB/src/stm32f4xx_can.c ****     /* 32-bit scale for the filter */
 373:./FWLIB/src/stm32f4xx_can.c ****     CAN1->FS1R |= filter_number_bit_pos;
 374:./FWLIB/src/stm32f4xx_can.c ****     /* 32-bit identifier or First 32-bit identifier */
ARM GAS  /tmp/ccmLA7br.s 			page 8


 375:./FWLIB/src/stm32f4xx_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 376:./FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 377:./FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 378:./FWLIB/src/stm32f4xx_can.c ****     /* 32-bit mask or Second 32-bit identifier */
 379:./FWLIB/src/stm32f4xx_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 380:./FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 381:./FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 382:./FWLIB/src/stm32f4xx_can.c ****   }
 383:./FWLIB/src/stm32f4xx_can.c **** 
 384:./FWLIB/src/stm32f4xx_can.c ****   /* Filter Mode */
 385:./FWLIB/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
 386:./FWLIB/src/stm32f4xx_can.c ****   {
 387:./FWLIB/src/stm32f4xx_can.c ****     /*Id/Mask mode for the filter*/
 388:./FWLIB/src/stm32f4xx_can.c ****     CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
 389:./FWLIB/src/stm32f4xx_can.c ****   }
 390:./FWLIB/src/stm32f4xx_can.c ****   else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
 391:./FWLIB/src/stm32f4xx_can.c ****   {
 392:./FWLIB/src/stm32f4xx_can.c ****     /*Identifier list mode for the filter*/
 393:./FWLIB/src/stm32f4xx_can.c ****     CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
 394:./FWLIB/src/stm32f4xx_can.c ****   }
 395:./FWLIB/src/stm32f4xx_can.c **** 
 396:./FWLIB/src/stm32f4xx_can.c ****   /* Filter FIFO assignment */
 397:./FWLIB/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 398:./FWLIB/src/stm32f4xx_can.c ****   {
 399:./FWLIB/src/stm32f4xx_can.c ****     /* FIFO 0 assignation for the filter */
 400:./FWLIB/src/stm32f4xx_can.c ****     CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
 401:./FWLIB/src/stm32f4xx_can.c ****   }
 402:./FWLIB/src/stm32f4xx_can.c **** 
 403:./FWLIB/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
 404:./FWLIB/src/stm32f4xx_can.c ****   {
 405:./FWLIB/src/stm32f4xx_can.c ****     /* FIFO 1 assignation for the filter */
 406:./FWLIB/src/stm32f4xx_can.c ****     CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
 407:./FWLIB/src/stm32f4xx_can.c ****   }
 408:./FWLIB/src/stm32f4xx_can.c ****   
 409:./FWLIB/src/stm32f4xx_can.c ****   /* Filter activation */
 410:./FWLIB/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
 411:./FWLIB/src/stm32f4xx_can.c ****   {
 412:./FWLIB/src/stm32f4xx_can.c ****     CAN1->FA1R |= filter_number_bit_pos;
 413:./FWLIB/src/stm32f4xx_can.c ****   }
 414:./FWLIB/src/stm32f4xx_can.c **** 
 415:./FWLIB/src/stm32f4xx_can.c ****   /* Leave the initialisation mode for the filter */
 416:./FWLIB/src/stm32f4xx_can.c ****   CAN1->FMR &= ~FMR_FINIT;
 417:./FWLIB/src/stm32f4xx_can.c **** }
 418:./FWLIB/src/stm32f4xx_can.c **** 
 419:./FWLIB/src/stm32f4xx_can.c **** /**
 420:./FWLIB/src/stm32f4xx_can.c ****   * @brief  Fills each CAN_InitStruct member with its default value.
 421:./FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure which ill be initialized.
 422:./FWLIB/src/stm32f4xx_can.c ****   * @retval None
 423:./FWLIB/src/stm32f4xx_can.c ****   */
 424:./FWLIB/src/stm32f4xx_can.c **** void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
 425:./FWLIB/src/stm32f4xx_can.c **** {
 426:./FWLIB/src/stm32f4xx_can.c ****   /* Reset CAN init structure parameters values */
 427:./FWLIB/src/stm32f4xx_can.c ****   
 428:./FWLIB/src/stm32f4xx_can.c ****   /* Initialize the time triggered communication mode */
 429:./FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_TTCM = DISABLE;
 430:./FWLIB/src/stm32f4xx_can.c ****   
 431:./FWLIB/src/stm32f4xx_can.c ****   /* Initialize the automatic bus-off management */
ARM GAS  /tmp/ccmLA7br.s 			page 9


 432:./FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_ABOM = DISABLE;
 433:./FWLIB/src/stm32f4xx_can.c ****   
 434:./FWLIB/src/stm32f4xx_can.c ****   /* Initialize the automatic wake-up mode */
 435:./FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_AWUM = DISABLE;
 436:./FWLIB/src/stm32f4xx_can.c ****   
 437:./FWLIB/src/stm32f4xx_can.c ****   /* Initialize the no automatic retransmission */
 438:./FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_NART = DISABLE;
 439:./FWLIB/src/stm32f4xx_can.c ****   
 440:./FWLIB/src/stm32f4xx_can.c ****   /* Initialize the receive FIFO locked mode */
 441:./FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_RFLM = DISABLE;
 442:./FWLIB/src/stm32f4xx_can.c ****   
 443:./FWLIB/src/stm32f4xx_can.c ****   /* Initialize the transmit FIFO priority */
 444:./FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_TXFP = DISABLE;
 445:./FWLIB/src/stm32f4xx_can.c ****   
 446:./FWLIB/src/stm32f4xx_can.c ****   /* Initialize the CAN_Mode member */
 447:./FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
 448:./FWLIB/src/stm32f4xx_can.c ****   
 449:./FWLIB/src/stm32f4xx_can.c ****   /* Initialize the CAN_SJW member */
 450:./FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
 451:./FWLIB/src/stm32f4xx_can.c ****   
 452:./FWLIB/src/stm32f4xx_can.c ****   /* Initialize the CAN_BS1 member */
 453:./FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
 454:./FWLIB/src/stm32f4xx_can.c ****   
 455:./FWLIB/src/stm32f4xx_can.c ****   /* Initialize the CAN_BS2 member */
 456:./FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
 457:./FWLIB/src/stm32f4xx_can.c ****   
 458:./FWLIB/src/stm32f4xx_can.c ****   /* Initialize the CAN_Prescaler member */
 459:./FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_Prescaler = 1;
 460:./FWLIB/src/stm32f4xx_can.c **** }
 461:./FWLIB/src/stm32f4xx_can.c **** 
 462:./FWLIB/src/stm32f4xx_can.c **** /**
 463:./FWLIB/src/stm32f4xx_can.c ****   * @brief  Select the start bank filter for slave CAN.
 464:./FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_BankNumber: Select the start slave bank filter from 1..27.
 465:./FWLIB/src/stm32f4xx_can.c ****   * @retval None
 466:./FWLIB/src/stm32f4xx_can.c ****   */
 467:./FWLIB/src/stm32f4xx_can.c **** void CAN_SlaveStartBank(uint8_t CAN_BankNumber) 
 468:./FWLIB/src/stm32f4xx_can.c **** {
 469:./FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 470:./FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
 471:./FWLIB/src/stm32f4xx_can.c ****   
 472:./FWLIB/src/stm32f4xx_can.c ****   /* Enter Initialisation mode for the filter */
 473:./FWLIB/src/stm32f4xx_can.c ****   CAN1->FMR |= FMR_FINIT;
 474:./FWLIB/src/stm32f4xx_can.c ****   
 475:./FWLIB/src/stm32f4xx_can.c ****   /* Select the start slave bank */
 476:./FWLIB/src/stm32f4xx_can.c ****   CAN1->FMR &= (uint32_t)0xFFFFC0F1 ;
 477:./FWLIB/src/stm32f4xx_can.c ****   CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 478:./FWLIB/src/stm32f4xx_can.c ****   
 479:./FWLIB/src/stm32f4xx_can.c ****   /* Leave Initialisation mode for the filter */
 480:./FWLIB/src/stm32f4xx_can.c ****   CAN1->FMR &= ~FMR_FINIT;
 481:./FWLIB/src/stm32f4xx_can.c **** }
 482:./FWLIB/src/stm32f4xx_can.c **** 
 483:./FWLIB/src/stm32f4xx_can.c **** /**
 484:./FWLIB/src/stm32f4xx_can.c ****   * @brief  Enables or disables the DBG Freeze for CAN.
 485:./FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
 486:./FWLIB/src/stm32f4xx_can.c ****   * @param  NewState: new state of the CAN peripheral. 
 487:./FWLIB/src/stm32f4xx_can.c ****   *          This parameter can be: ENABLE (CAN reception/transmission is frozen
 488:./FWLIB/src/stm32f4xx_can.c ****   *          during debug. Reception FIFOs can still be accessed/controlled normally) 
ARM GAS  /tmp/ccmLA7br.s 			page 10


 489:./FWLIB/src/stm32f4xx_can.c ****   *          or DISABLE (CAN is working during debug).
 490:./FWLIB/src/stm32f4xx_can.c ****   * @retval None
 491:./FWLIB/src/stm32f4xx_can.c ****   */
 492:./FWLIB/src/stm32f4xx_can.c **** void CAN_DBGFreeze(CAN_TypeDef* CANx, FunctionalState NewState)
 493:./FWLIB/src/stm32f4xx_can.c **** {
 494:./FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 495:./FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 496:./FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 497:./FWLIB/src/stm32f4xx_can.c ****   
 498:./FWLIB/src/stm32f4xx_can.c ****   if (NewState != DISABLE)
 499:./FWLIB/src/stm32f4xx_can.c ****   {
 500:./FWLIB/src/stm32f4xx_can.c ****     /* Enable Debug Freeze  */
 501:./FWLIB/src/stm32f4xx_can.c ****     CANx->MCR |= MCR_DBF;
 502:./FWLIB/src/stm32f4xx_can.c ****   }
 503:./FWLIB/src/stm32f4xx_can.c ****   else
 504:./FWLIB/src/stm32f4xx_can.c ****   {
 505:./FWLIB/src/stm32f4xx_can.c ****     /* Disable Debug Freeze */
 506:./FWLIB/src/stm32f4xx_can.c ****     CANx->MCR &= ~MCR_DBF;
 507:./FWLIB/src/stm32f4xx_can.c ****   }
 508:./FWLIB/src/stm32f4xx_can.c **** }
 509:./FWLIB/src/stm32f4xx_can.c **** 
 510:./FWLIB/src/stm32f4xx_can.c **** 
 511:./FWLIB/src/stm32f4xx_can.c **** /**
 512:./FWLIB/src/stm32f4xx_can.c ****   * @brief  Enables or disables the CAN Time TriggerOperation communication mode.
 513:./FWLIB/src/stm32f4xx_can.c ****   * @note   DLC must be programmed as 8 in order Time Stamp (2 bytes) to be 
 514:./FWLIB/src/stm32f4xx_can.c ****   *         sent over the CAN bus.  
 515:./FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
 516:./FWLIB/src/stm32f4xx_can.c ****   * @param  NewState: Mode new state. This parameter can be: ENABLE or DISABLE.
 517:./FWLIB/src/stm32f4xx_can.c ****   *         When enabled, Time stamp (TIME[15:0]) value is  sent in the last two
 518:./FWLIB/src/stm32f4xx_can.c ****   *         data bytes of the 8-byte message: TIME[7:0] in data byte 6 and TIME[15:8] 
 519:./FWLIB/src/stm32f4xx_can.c ****   *         in data byte 7. 
 520:./FWLIB/src/stm32f4xx_can.c ****   * @retval None
 521:./FWLIB/src/stm32f4xx_can.c ****   */
 522:./FWLIB/src/stm32f4xx_can.c **** void CAN_TTComModeCmd(CAN_TypeDef* CANx, FunctionalState NewState)
 523:./FWLIB/src/stm32f4xx_can.c **** {
 524:./FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 525:./FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 526:./FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 527:./FWLIB/src/stm32f4xx_can.c ****   if (NewState != DISABLE)
 528:./FWLIB/src/stm32f4xx_can.c ****   {
 529:./FWLIB/src/stm32f4xx_can.c ****     /* Enable the TTCM mode */
 530:./FWLIB/src/stm32f4xx_can.c ****     CANx->MCR |= CAN_MCR_TTCM;
 531:./FWLIB/src/stm32f4xx_can.c **** 
 532:./FWLIB/src/stm32f4xx_can.c ****     /* Set TGT bits */
 533:./FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[0].TDTR |= ((uint32_t)CAN_TDT0R_TGT);
 534:./FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
 535:./FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
 536:./FWLIB/src/stm32f4xx_can.c ****   }
 537:./FWLIB/src/stm32f4xx_can.c ****   else
 538:./FWLIB/src/stm32f4xx_can.c ****   {
 539:./FWLIB/src/stm32f4xx_can.c ****     /* Disable the TTCM mode */
 540:./FWLIB/src/stm32f4xx_can.c ****     CANx->MCR &= (uint32_t)(~(uint32_t)CAN_MCR_TTCM);
 541:./FWLIB/src/stm32f4xx_can.c **** 
 542:./FWLIB/src/stm32f4xx_can.c ****     /* Reset TGT bits */
 543:./FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
 544:./FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
 545:./FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
ARM GAS  /tmp/ccmLA7br.s 			page 11


 546:./FWLIB/src/stm32f4xx_can.c ****   }
 547:./FWLIB/src/stm32f4xx_can.c **** }
 548:./FWLIB/src/stm32f4xx_can.c **** /**
 549:./FWLIB/src/stm32f4xx_can.c ****   * @}
 550:./FWLIB/src/stm32f4xx_can.c ****   */
 551:./FWLIB/src/stm32f4xx_can.c **** 
 552:./FWLIB/src/stm32f4xx_can.c **** 
 553:./FWLIB/src/stm32f4xx_can.c **** /** @defgroup CAN_Group2 CAN Frames Transmission functions
 554:./FWLIB/src/stm32f4xx_can.c ****  *  @brief    CAN Frames Transmission functions 
 555:./FWLIB/src/stm32f4xx_can.c ****  *
 556:./FWLIB/src/stm32f4xx_can.c **** @verbatim    
 557:./FWLIB/src/stm32f4xx_can.c ****  ===============================================================================
 558:./FWLIB/src/stm32f4xx_can.c ****                 ##### CAN Frames Transmission functions #####
 559:./FWLIB/src/stm32f4xx_can.c ****  ===============================================================================  
 560:./FWLIB/src/stm32f4xx_can.c ****     [..] This section provides functions allowing to 
 561:./FWLIB/src/stm32f4xx_can.c ****       (+) Initiate and transmit a CAN frame message (if there is an empty mailbox).
 562:./FWLIB/src/stm32f4xx_can.c ****       (+) Check the transmission status of a CAN Frame
 563:./FWLIB/src/stm32f4xx_can.c ****       (+) Cancel a transmit request
 564:./FWLIB/src/stm32f4xx_can.c ****    
 565:./FWLIB/src/stm32f4xx_can.c **** @endverbatim
 566:./FWLIB/src/stm32f4xx_can.c ****   * @{
 567:./FWLIB/src/stm32f4xx_can.c ****   */
 568:./FWLIB/src/stm32f4xx_can.c **** 
 569:./FWLIB/src/stm32f4xx_can.c **** /**
 570:./FWLIB/src/stm32f4xx_can.c ****   * @brief  Initiates and transmits a CAN frame message.
 571:./FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
 572:./FWLIB/src/stm32f4xx_can.c ****   * @param  TxMessage: pointer to a structure which contains CAN Id, CAN DLC and CAN data.
 573:./FWLIB/src/stm32f4xx_can.c ****   * @retval The number of the mailbox that is used for transmission or
 574:./FWLIB/src/stm32f4xx_can.c ****   *         CAN_TxStatus_NoMailBox if there is no empty mailbox.
 575:./FWLIB/src/stm32f4xx_can.c ****   */
 576:./FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
 577:./FWLIB/src/stm32f4xx_can.c **** {
 578:./FWLIB/src/stm32f4xx_can.c ****   uint8_t transmit_mailbox = 0;
 579:./FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 580:./FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 581:./FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
 582:./FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_RTR(TxMessage->RTR));
 583:./FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_DLC(TxMessage->DLC));
 584:./FWLIB/src/stm32f4xx_can.c **** 
 585:./FWLIB/src/stm32f4xx_can.c ****   /* Select one empty transmit mailbox */
 586:./FWLIB/src/stm32f4xx_can.c ****   if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 587:./FWLIB/src/stm32f4xx_can.c ****   {
 588:./FWLIB/src/stm32f4xx_can.c ****     transmit_mailbox = 0;
 589:./FWLIB/src/stm32f4xx_can.c ****   }
 590:./FWLIB/src/stm32f4xx_can.c ****   else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 591:./FWLIB/src/stm32f4xx_can.c ****   {
 592:./FWLIB/src/stm32f4xx_can.c ****     transmit_mailbox = 1;
 593:./FWLIB/src/stm32f4xx_can.c ****   }
 594:./FWLIB/src/stm32f4xx_can.c ****   else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
 595:./FWLIB/src/stm32f4xx_can.c ****   {
 596:./FWLIB/src/stm32f4xx_can.c ****     transmit_mailbox = 2;
 597:./FWLIB/src/stm32f4xx_can.c ****   }
 598:./FWLIB/src/stm32f4xx_can.c ****   else
 599:./FWLIB/src/stm32f4xx_can.c ****   {
 600:./FWLIB/src/stm32f4xx_can.c ****     transmit_mailbox = CAN_TxStatus_NoMailBox;
 601:./FWLIB/src/stm32f4xx_can.c ****   }
 602:./FWLIB/src/stm32f4xx_can.c **** 
ARM GAS  /tmp/ccmLA7br.s 			page 12


 603:./FWLIB/src/stm32f4xx_can.c ****   if (transmit_mailbox != CAN_TxStatus_NoMailBox)
 604:./FWLIB/src/stm32f4xx_can.c ****   {
 605:./FWLIB/src/stm32f4xx_can.c ****     /* Set up the Id */
 606:./FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
 607:./FWLIB/src/stm32f4xx_can.c ****     if (TxMessage->IDE == CAN_Id_Standard)
 608:./FWLIB/src/stm32f4xx_can.c ****     {
 609:./FWLIB/src/stm32f4xx_can.c ****       assert_param(IS_CAN_STDID(TxMessage->StdId));  
 610:./FWLIB/src/stm32f4xx_can.c ****       CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 611:./FWLIB/src/stm32f4xx_can.c ****                                                   TxMessage->RTR);
 612:./FWLIB/src/stm32f4xx_can.c ****     }
 613:./FWLIB/src/stm32f4xx_can.c ****     else
 614:./FWLIB/src/stm32f4xx_can.c ****     {
 615:./FWLIB/src/stm32f4xx_can.c ****       assert_param(IS_CAN_EXTID(TxMessage->ExtId));
 616:./FWLIB/src/stm32f4xx_can.c ****       CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 617:./FWLIB/src/stm32f4xx_can.c ****                                                   TxMessage->IDE | \
 618:./FWLIB/src/stm32f4xx_can.c ****                                                   TxMessage->RTR);
 619:./FWLIB/src/stm32f4xx_can.c ****     }
 620:./FWLIB/src/stm32f4xx_can.c ****     
 621:./FWLIB/src/stm32f4xx_can.c ****     /* Set up the DLC */
 622:./FWLIB/src/stm32f4xx_can.c ****     TxMessage->DLC &= (uint8_t)0x0000000F;
 623:./FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 624:./FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 625:./FWLIB/src/stm32f4xx_can.c **** 
 626:./FWLIB/src/stm32f4xx_can.c ****     /* Set up the data field */
 627:./FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 628:./FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
 629:./FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[1] << 8) | 
 630:./FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[0]));
 631:./FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 632:./FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[6] << 16) |
 633:./FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[5] << 8) |
 634:./FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[4]));
 635:./FWLIB/src/stm32f4xx_can.c ****     /* Request transmission */
 636:./FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
 637:./FWLIB/src/stm32f4xx_can.c ****   }
 638:./FWLIB/src/stm32f4xx_can.c ****   return transmit_mailbox;
 639:./FWLIB/src/stm32f4xx_can.c **** }
 640:./FWLIB/src/stm32f4xx_can.c **** 
 641:./FWLIB/src/stm32f4xx_can.c **** /**
 642:./FWLIB/src/stm32f4xx_can.c ****   * @brief  Checks the transmission status of a CAN Frame.
 643:./FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
 644:./FWLIB/src/stm32f4xx_can.c ****   * @param  TransmitMailbox: the number of the mailbox that is used for transmission.
 645:./FWLIB/src/stm32f4xx_can.c ****   * @retval CAN_TxStatus_Ok if the CAN driver transmits the message, 
 646:./FWLIB/src/stm32f4xx_can.c ****   *         CAN_TxStatus_Failed in an other case.
 647:./FWLIB/src/stm32f4xx_can.c ****   */
 648:./FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_TransmitStatus(CAN_TypeDef* CANx, uint8_t TransmitMailbox)
 649:./FWLIB/src/stm32f4xx_can.c **** {
 650:./FWLIB/src/stm32f4xx_can.c ****   uint32_t state = 0;
 651:./FWLIB/src/stm32f4xx_can.c **** 
 652:./FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 653:./FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 654:./FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
 655:./FWLIB/src/stm32f4xx_can.c ****  
 656:./FWLIB/src/stm32f4xx_can.c ****   switch (TransmitMailbox)
 657:./FWLIB/src/stm32f4xx_can.c ****   {
 658:./FWLIB/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_0): 
 659:./FWLIB/src/stm32f4xx_can.c ****       state =   CANx->TSR &  (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
ARM GAS  /tmp/ccmLA7br.s 			page 13


 660:./FWLIB/src/stm32f4xx_can.c ****       break;
 661:./FWLIB/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_1): 
 662:./FWLIB/src/stm32f4xx_can.c ****       state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
 663:./FWLIB/src/stm32f4xx_can.c ****       break;
 664:./FWLIB/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_2): 
 665:./FWLIB/src/stm32f4xx_can.c ****       state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
 666:./FWLIB/src/stm32f4xx_can.c ****       break;
 667:./FWLIB/src/stm32f4xx_can.c ****     default:
 668:./FWLIB/src/stm32f4xx_can.c ****       state = CAN_TxStatus_Failed;
 669:./FWLIB/src/stm32f4xx_can.c ****       break;
 670:./FWLIB/src/stm32f4xx_can.c ****   }
 671:./FWLIB/src/stm32f4xx_can.c ****   switch (state)
 672:./FWLIB/src/stm32f4xx_can.c ****   {
 673:./FWLIB/src/stm32f4xx_can.c ****       /* transmit pending  */
 674:./FWLIB/src/stm32f4xx_can.c ****     case (0x0): state = CAN_TxStatus_Pending;
 675:./FWLIB/src/stm32f4xx_can.c ****       break;
 676:./FWLIB/src/stm32f4xx_can.c ****       /* transmit failed  */
 677:./FWLIB/src/stm32f4xx_can.c ****      case (CAN_TSR_RQCP0 | CAN_TSR_TME0): state = CAN_TxStatus_Failed;
 678:./FWLIB/src/stm32f4xx_can.c ****       break;
 679:./FWLIB/src/stm32f4xx_can.c ****      case (CAN_TSR_RQCP1 | CAN_TSR_TME1): state = CAN_TxStatus_Failed;
 680:./FWLIB/src/stm32f4xx_can.c ****       break;
 681:./FWLIB/src/stm32f4xx_can.c ****      case (CAN_TSR_RQCP2 | CAN_TSR_TME2): state = CAN_TxStatus_Failed;
 682:./FWLIB/src/stm32f4xx_can.c ****       break;
 683:./FWLIB/src/stm32f4xx_can.c ****       /* transmit succeeded  */
 684:./FWLIB/src/stm32f4xx_can.c ****     case (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0):state = CAN_TxStatus_Ok;
 685:./FWLIB/src/stm32f4xx_can.c ****       break;
 686:./FWLIB/src/stm32f4xx_can.c ****     case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
 687:./FWLIB/src/stm32f4xx_can.c ****       break;
 688:./FWLIB/src/stm32f4xx_can.c ****     case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
 689:./FWLIB/src/stm32f4xx_can.c ****       break;
 690:./FWLIB/src/stm32f4xx_can.c ****     default: state = CAN_TxStatus_Failed;
 691:./FWLIB/src/stm32f4xx_can.c ****       break;
 692:./FWLIB/src/stm32f4xx_can.c ****   }
 693:./FWLIB/src/stm32f4xx_can.c ****   return (uint8_t) state;
 694:./FWLIB/src/stm32f4xx_can.c **** }
 695:./FWLIB/src/stm32f4xx_can.c **** 
 696:./FWLIB/src/stm32f4xx_can.c **** /**
 697:./FWLIB/src/stm32f4xx_can.c ****   * @brief  Cancels a transmit request.
 698:./FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
 699:./FWLIB/src/stm32f4xx_can.c ****   * @param  Mailbox: Mailbox number.
 700:./FWLIB/src/stm32f4xx_can.c ****   * @retval None
 701:./FWLIB/src/stm32f4xx_can.c ****   */
 702:./FWLIB/src/stm32f4xx_can.c **** void CAN_CancelTransmit(CAN_TypeDef* CANx, uint8_t Mailbox)
 703:./FWLIB/src/stm32f4xx_can.c **** {
 704:./FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 705:./FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 706:./FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
 707:./FWLIB/src/stm32f4xx_can.c ****   /* abort transmission */
 708:./FWLIB/src/stm32f4xx_can.c ****   switch (Mailbox)
 709:./FWLIB/src/stm32f4xx_can.c ****   {
 710:./FWLIB/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_0): CANx->TSR |= CAN_TSR_ABRQ0;
 711:./FWLIB/src/stm32f4xx_can.c ****       break;
 712:./FWLIB/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
 713:./FWLIB/src/stm32f4xx_can.c ****       break;
 714:./FWLIB/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
 715:./FWLIB/src/stm32f4xx_can.c ****       break;
 716:./FWLIB/src/stm32f4xx_can.c ****     default:
ARM GAS  /tmp/ccmLA7br.s 			page 14


 717:./FWLIB/src/stm32f4xx_can.c ****       break;
 718:./FWLIB/src/stm32f4xx_can.c ****   }
 719:./FWLIB/src/stm32f4xx_can.c **** }
 720:./FWLIB/src/stm32f4xx_can.c **** /**
 721:./FWLIB/src/stm32f4xx_can.c ****   * @}
 722:./FWLIB/src/stm32f4xx_can.c ****   */
 723:./FWLIB/src/stm32f4xx_can.c **** 
 724:./FWLIB/src/stm32f4xx_can.c **** 
 725:./FWLIB/src/stm32f4xx_can.c **** /** @defgroup CAN_Group3 CAN Frames Reception functions
 726:./FWLIB/src/stm32f4xx_can.c ****  *  @brief    CAN Frames Reception functions 
 727:./FWLIB/src/stm32f4xx_can.c ****  *
 728:./FWLIB/src/stm32f4xx_can.c **** @verbatim    
 729:./FWLIB/src/stm32f4xx_can.c ****  ===============================================================================
 730:./FWLIB/src/stm32f4xx_can.c ****                 ##### CAN Frames Reception functions #####
 731:./FWLIB/src/stm32f4xx_can.c ****  ===============================================================================  
 732:./FWLIB/src/stm32f4xx_can.c ****     [..] This section provides functions allowing to 
 733:./FWLIB/src/stm32f4xx_can.c ****       (+) Receive a correct CAN frame
 734:./FWLIB/src/stm32f4xx_can.c ****       (+) Release a specified receive FIFO (2 FIFOs are available)
 735:./FWLIB/src/stm32f4xx_can.c ****       (+) Return the number of the pending received CAN frames
 736:./FWLIB/src/stm32f4xx_can.c ****    
 737:./FWLIB/src/stm32f4xx_can.c **** @endverbatim
 738:./FWLIB/src/stm32f4xx_can.c ****   * @{
 739:./FWLIB/src/stm32f4xx_can.c ****   */
 740:./FWLIB/src/stm32f4xx_can.c **** 
 741:./FWLIB/src/stm32f4xx_can.c **** /**
 742:./FWLIB/src/stm32f4xx_can.c ****   * @brief  Receives a correct CAN frame.
 743:./FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
 744:./FWLIB/src/stm32f4xx_can.c ****   * @param  FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
 745:./FWLIB/src/stm32f4xx_can.c ****   * @param  RxMessage: pointer to a structure receive frame which contains CAN Id,
 746:./FWLIB/src/stm32f4xx_can.c ****   *         CAN DLC, CAN data and FMI number.
 747:./FWLIB/src/stm32f4xx_can.c ****   * @retval None
 748:./FWLIB/src/stm32f4xx_can.c ****   */
 749:./FWLIB/src/stm32f4xx_can.c **** void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
 750:./FWLIB/src/stm32f4xx_can.c **** {
 751:./FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 752:./FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 753:./FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FIFO(FIFONumber));
 754:./FWLIB/src/stm32f4xx_can.c ****   /* Get the Id */
 755:./FWLIB/src/stm32f4xx_can.c ****   RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 756:./FWLIB/src/stm32f4xx_can.c ****   if (RxMessage->IDE == CAN_Id_Standard)
 757:./FWLIB/src/stm32f4xx_can.c ****   {
 758:./FWLIB/src/stm32f4xx_can.c ****     RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 759:./FWLIB/src/stm32f4xx_can.c ****   }
 760:./FWLIB/src/stm32f4xx_can.c ****   else
 761:./FWLIB/src/stm32f4xx_can.c ****   {
 762:./FWLIB/src/stm32f4xx_can.c ****     RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 763:./FWLIB/src/stm32f4xx_can.c ****   }
 764:./FWLIB/src/stm32f4xx_can.c ****   
 765:./FWLIB/src/stm32f4xx_can.c ****   RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 766:./FWLIB/src/stm32f4xx_can.c ****   /* Get the DLC */
 767:./FWLIB/src/stm32f4xx_can.c ****   RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 768:./FWLIB/src/stm32f4xx_can.c ****   /* Get the FMI */
 769:./FWLIB/src/stm32f4xx_can.c ****   RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 770:./FWLIB/src/stm32f4xx_can.c ****   /* Get the data field */
 771:./FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 772:./FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 773:./FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
ARM GAS  /tmp/ccmLA7br.s 			page 15


 774:./FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 775:./FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 776:./FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 777:./FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 778:./FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 779:./FWLIB/src/stm32f4xx_can.c ****   /* Release the FIFO */
 780:./FWLIB/src/stm32f4xx_can.c ****   /* Release FIFO0 */
 781:./FWLIB/src/stm32f4xx_can.c ****   if (FIFONumber == CAN_FIFO0)
 782:./FWLIB/src/stm32f4xx_can.c ****   {
 783:./FWLIB/src/stm32f4xx_can.c ****     CANx->RF0R |= CAN_RF0R_RFOM0;
 784:./FWLIB/src/stm32f4xx_can.c ****   }
 785:./FWLIB/src/stm32f4xx_can.c ****   /* Release FIFO1 */
 786:./FWLIB/src/stm32f4xx_can.c ****   else /* FIFONumber == CAN_FIFO1 */
 787:./FWLIB/src/stm32f4xx_can.c ****   {
 788:./FWLIB/src/stm32f4xx_can.c ****     CANx->RF1R |= CAN_RF1R_RFOM1;
 789:./FWLIB/src/stm32f4xx_can.c ****   }
 790:./FWLIB/src/stm32f4xx_can.c **** }
 791:./FWLIB/src/stm32f4xx_can.c **** 
 792:./FWLIB/src/stm32f4xx_can.c **** /**
 793:./FWLIB/src/stm32f4xx_can.c ****   * @brief  Releases the specified receive FIFO.
 794:./FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
 795:./FWLIB/src/stm32f4xx_can.c ****   * @param  FIFONumber: FIFO to release, CAN_FIFO0 or CAN_FIFO1.
 796:./FWLIB/src/stm32f4xx_can.c ****   * @retval None
 797:./FWLIB/src/stm32f4xx_can.c ****   */
 798:./FWLIB/src/stm32f4xx_can.c **** void CAN_FIFORelease(CAN_TypeDef* CANx, uint8_t FIFONumber)
 799:./FWLIB/src/stm32f4xx_can.c **** {
 800:./FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 801:./FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 802:./FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FIFO(FIFONumber));
 803:./FWLIB/src/stm32f4xx_can.c ****   /* Release FIFO0 */
 804:./FWLIB/src/stm32f4xx_can.c ****   if (FIFONumber == CAN_FIFO0)
 805:./FWLIB/src/stm32f4xx_can.c ****   {
 806:./FWLIB/src/stm32f4xx_can.c ****     CANx->RF0R |= CAN_RF0R_RFOM0;
 807:./FWLIB/src/stm32f4xx_can.c ****   }
 808:./FWLIB/src/stm32f4xx_can.c ****   /* Release FIFO1 */
 809:./FWLIB/src/stm32f4xx_can.c ****   else /* FIFONumber == CAN_FIFO1 */
 810:./FWLIB/src/stm32f4xx_can.c ****   {
 811:./FWLIB/src/stm32f4xx_can.c ****     CANx->RF1R |= CAN_RF1R_RFOM1;
 812:./FWLIB/src/stm32f4xx_can.c ****   }
 813:./FWLIB/src/stm32f4xx_can.c **** }
 814:./FWLIB/src/stm32f4xx_can.c **** 
 815:./FWLIB/src/stm32f4xx_can.c **** /**
 816:./FWLIB/src/stm32f4xx_can.c ****   * @brief  Returns the number of pending received messages.
 817:./FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
 818:./FWLIB/src/stm32f4xx_can.c ****   * @param  FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
 819:./FWLIB/src/stm32f4xx_can.c ****   * @retval NbMessage : which is the number of pending message.
 820:./FWLIB/src/stm32f4xx_can.c ****   */
 821:./FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_MessagePending(CAN_TypeDef* CANx, uint8_t FIFONumber)
 822:./FWLIB/src/stm32f4xx_can.c **** {
 823:./FWLIB/src/stm32f4xx_can.c ****   uint8_t message_pending=0;
 824:./FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 825:./FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 826:./FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FIFO(FIFONumber));
 827:./FWLIB/src/stm32f4xx_can.c ****   if (FIFONumber == CAN_FIFO0)
 828:./FWLIB/src/stm32f4xx_can.c ****   {
 829:./FWLIB/src/stm32f4xx_can.c ****     message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
 830:./FWLIB/src/stm32f4xx_can.c ****   }
ARM GAS  /tmp/ccmLA7br.s 			page 16


 831:./FWLIB/src/stm32f4xx_can.c ****   else if (FIFONumber == CAN_FIFO1)
 832:./FWLIB/src/stm32f4xx_can.c ****   {
 833:./FWLIB/src/stm32f4xx_can.c ****     message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
 834:./FWLIB/src/stm32f4xx_can.c ****   }
 835:./FWLIB/src/stm32f4xx_can.c ****   else
 836:./FWLIB/src/stm32f4xx_can.c ****   {
 837:./FWLIB/src/stm32f4xx_can.c ****     message_pending = 0;
 838:./FWLIB/src/stm32f4xx_can.c ****   }
 839:./FWLIB/src/stm32f4xx_can.c ****   return message_pending;
 840:./FWLIB/src/stm32f4xx_can.c **** }
 841:./FWLIB/src/stm32f4xx_can.c **** /**
 842:./FWLIB/src/stm32f4xx_can.c ****   * @}
 843:./FWLIB/src/stm32f4xx_can.c ****   */
 844:./FWLIB/src/stm32f4xx_can.c **** 
 845:./FWLIB/src/stm32f4xx_can.c **** 
 846:./FWLIB/src/stm32f4xx_can.c **** /** @defgroup CAN_Group4 CAN Operation modes functions
 847:./FWLIB/src/stm32f4xx_can.c ****  *  @brief    CAN Operation modes functions 
 848:./FWLIB/src/stm32f4xx_can.c ****  *
 849:./FWLIB/src/stm32f4xx_can.c **** @verbatim    
 850:./FWLIB/src/stm32f4xx_can.c ****  ===============================================================================
 851:./FWLIB/src/stm32f4xx_can.c ****                     ##### CAN Operation modes functions #####
 852:./FWLIB/src/stm32f4xx_can.c ****  ===============================================================================  
 853:./FWLIB/src/stm32f4xx_can.c ****     [..] This section provides functions allowing to select the CAN Operation modes
 854:./FWLIB/src/stm32f4xx_can.c ****       (+) sleep mode
 855:./FWLIB/src/stm32f4xx_can.c ****       (+) normal mode 
 856:./FWLIB/src/stm32f4xx_can.c ****       (+) initialization mode
 857:./FWLIB/src/stm32f4xx_can.c ****    
 858:./FWLIB/src/stm32f4xx_can.c **** @endverbatim
 859:./FWLIB/src/stm32f4xx_can.c ****   * @{
 860:./FWLIB/src/stm32f4xx_can.c ****   */
 861:./FWLIB/src/stm32f4xx_can.c ****   
 862:./FWLIB/src/stm32f4xx_can.c ****   
 863:./FWLIB/src/stm32f4xx_can.c **** /**
 864:./FWLIB/src/stm32f4xx_can.c ****   * @brief  Selects the CAN Operation mode.
 865:./FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_OperatingMode: CAN Operating Mode.
 866:./FWLIB/src/stm32f4xx_can.c ****   *         This parameter can be one of @ref CAN_OperatingMode_TypeDef enumeration.
 867:./FWLIB/src/stm32f4xx_can.c ****   * @retval status of the requested mode which can be 
 868:./FWLIB/src/stm32f4xx_can.c ****   *         - CAN_ModeStatus_Failed:  CAN failed entering the specific mode 
 869:./FWLIB/src/stm32f4xx_can.c ****   *         - CAN_ModeStatus_Success: CAN Succeed entering the specific mode 
 870:./FWLIB/src/stm32f4xx_can.c ****   */
 871:./FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_OperatingModeRequest(CAN_TypeDef* CANx, uint8_t CAN_OperatingMode)
 872:./FWLIB/src/stm32f4xx_can.c **** {
 873:./FWLIB/src/stm32f4xx_can.c ****   uint8_t status = CAN_ModeStatus_Failed;
 874:./FWLIB/src/stm32f4xx_can.c ****   
 875:./FWLIB/src/stm32f4xx_can.c ****   /* Timeout for INAK or also for SLAK bits*/
 876:./FWLIB/src/stm32f4xx_can.c ****   uint32_t timeout = INAK_TIMEOUT; 
 877:./FWLIB/src/stm32f4xx_can.c **** 
 878:./FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 879:./FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 880:./FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_OPERATING_MODE(CAN_OperatingMode));
 881:./FWLIB/src/stm32f4xx_can.c **** 
 882:./FWLIB/src/stm32f4xx_can.c ****   if (CAN_OperatingMode == CAN_OperatingMode_Initialization)
 883:./FWLIB/src/stm32f4xx_can.c ****   {
 884:./FWLIB/src/stm32f4xx_can.c ****     /* Request initialisation */
 885:./FWLIB/src/stm32f4xx_can.c ****     CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);
 886:./FWLIB/src/stm32f4xx_can.c **** 
 887:./FWLIB/src/stm32f4xx_can.c ****     /* Wait the acknowledge */
ARM GAS  /tmp/ccmLA7br.s 			page 17


 888:./FWLIB/src/stm32f4xx_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 889:./FWLIB/src/stm32f4xx_can.c ****     {
 890:./FWLIB/src/stm32f4xx_can.c ****       timeout--;
 891:./FWLIB/src/stm32f4xx_can.c ****     }
 892:./FWLIB/src/stm32f4xx_can.c ****     if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK)
 893:./FWLIB/src/stm32f4xx_can.c ****     {
 894:./FWLIB/src/stm32f4xx_can.c ****       status = CAN_ModeStatus_Failed;
 895:./FWLIB/src/stm32f4xx_can.c ****     }
 896:./FWLIB/src/stm32f4xx_can.c ****     else
 897:./FWLIB/src/stm32f4xx_can.c ****     {
 898:./FWLIB/src/stm32f4xx_can.c ****       status = CAN_ModeStatus_Success;
 899:./FWLIB/src/stm32f4xx_can.c ****     }
 900:./FWLIB/src/stm32f4xx_can.c ****   }
 901:./FWLIB/src/stm32f4xx_can.c ****   else  if (CAN_OperatingMode == CAN_OperatingMode_Normal)
 902:./FWLIB/src/stm32f4xx_can.c ****   {
 903:./FWLIB/src/stm32f4xx_can.c ****     /* Request leave initialisation and sleep mode  and enter Normal mode */
 904:./FWLIB/src/stm32f4xx_can.c ****     CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));
 905:./FWLIB/src/stm32f4xx_can.c **** 
 906:./FWLIB/src/stm32f4xx_can.c ****     /* Wait the acknowledge */
 907:./FWLIB/src/stm32f4xx_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 908:./FWLIB/src/stm32f4xx_can.c ****     {
 909:./FWLIB/src/stm32f4xx_can.c ****       timeout--;
 910:./FWLIB/src/stm32f4xx_can.c ****     }
 911:./FWLIB/src/stm32f4xx_can.c ****     if ((CANx->MSR & CAN_MODE_MASK) != 0)
 912:./FWLIB/src/stm32f4xx_can.c ****     {
 913:./FWLIB/src/stm32f4xx_can.c ****       status = CAN_ModeStatus_Failed;
 914:./FWLIB/src/stm32f4xx_can.c ****     }
 915:./FWLIB/src/stm32f4xx_can.c ****     else
 916:./FWLIB/src/stm32f4xx_can.c ****     {
 917:./FWLIB/src/stm32f4xx_can.c ****       status = CAN_ModeStatus_Success;
 918:./FWLIB/src/stm32f4xx_can.c ****     }
 919:./FWLIB/src/stm32f4xx_can.c ****   }
 920:./FWLIB/src/stm32f4xx_can.c ****   else  if (CAN_OperatingMode == CAN_OperatingMode_Sleep)
 921:./FWLIB/src/stm32f4xx_can.c ****   {
 922:./FWLIB/src/stm32f4xx_can.c ****     /* Request Sleep mode */
 923:./FWLIB/src/stm32f4xx_can.c ****     CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 924:./FWLIB/src/stm32f4xx_can.c **** 
 925:./FWLIB/src/stm32f4xx_can.c ****     /* Wait the acknowledge */
 926:./FWLIB/src/stm32f4xx_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 927:./FWLIB/src/stm32f4xx_can.c ****     {
 928:./FWLIB/src/stm32f4xx_can.c ****       timeout--;
 929:./FWLIB/src/stm32f4xx_can.c ****     }
 930:./FWLIB/src/stm32f4xx_can.c ****     if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK)
 931:./FWLIB/src/stm32f4xx_can.c ****     {
 932:./FWLIB/src/stm32f4xx_can.c ****       status = CAN_ModeStatus_Failed;
 933:./FWLIB/src/stm32f4xx_can.c ****     }
 934:./FWLIB/src/stm32f4xx_can.c ****     else
 935:./FWLIB/src/stm32f4xx_can.c ****     {
 936:./FWLIB/src/stm32f4xx_can.c ****       status = CAN_ModeStatus_Success;
 937:./FWLIB/src/stm32f4xx_can.c ****     }
 938:./FWLIB/src/stm32f4xx_can.c ****   }
 939:./FWLIB/src/stm32f4xx_can.c ****   else
 940:./FWLIB/src/stm32f4xx_can.c ****   {
 941:./FWLIB/src/stm32f4xx_can.c ****     status = CAN_ModeStatus_Failed;
 942:./FWLIB/src/stm32f4xx_can.c ****   }
 943:./FWLIB/src/stm32f4xx_can.c **** 
 944:./FWLIB/src/stm32f4xx_can.c ****   return  (uint8_t) status;
ARM GAS  /tmp/ccmLA7br.s 			page 18


 945:./FWLIB/src/stm32f4xx_can.c **** }
 946:./FWLIB/src/stm32f4xx_can.c **** 
 947:./FWLIB/src/stm32f4xx_can.c **** /**
 948:./FWLIB/src/stm32f4xx_can.c ****   * @brief  Enters the Sleep (low power) mode.
 949:./FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
 950:./FWLIB/src/stm32f4xx_can.c ****   * @retval CAN_Sleep_Ok if sleep entered, CAN_Sleep_Failed otherwise.
 951:./FWLIB/src/stm32f4xx_can.c ****   */
 952:./FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_Sleep(CAN_TypeDef* CANx)
 953:./FWLIB/src/stm32f4xx_can.c **** {
 954:./FWLIB/src/stm32f4xx_can.c ****   uint8_t sleepstatus = CAN_Sleep_Failed;
 955:./FWLIB/src/stm32f4xx_can.c ****   
 956:./FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 957:./FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 958:./FWLIB/src/stm32f4xx_can.c ****     
 959:./FWLIB/src/stm32f4xx_can.c ****   /* Request Sleep mode */
 960:./FWLIB/src/stm32f4xx_can.c ****    CANx->MCR = (((CANx->MCR) & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 961:./FWLIB/src/stm32f4xx_can.c ****    
 962:./FWLIB/src/stm32f4xx_can.c ****   /* Sleep mode status */
 963:./FWLIB/src/stm32f4xx_can.c ****   if ((CANx->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) == CAN_MSR_SLAK)
 964:./FWLIB/src/stm32f4xx_can.c ****   {
 965:./FWLIB/src/stm32f4xx_can.c ****     /* Sleep mode not entered */
 966:./FWLIB/src/stm32f4xx_can.c ****     sleepstatus =  CAN_Sleep_Ok;
 967:./FWLIB/src/stm32f4xx_can.c ****   }
 968:./FWLIB/src/stm32f4xx_can.c ****   /* return sleep mode status */
 969:./FWLIB/src/stm32f4xx_can.c ****    return (uint8_t)sleepstatus;
 970:./FWLIB/src/stm32f4xx_can.c **** }
 971:./FWLIB/src/stm32f4xx_can.c **** 
 972:./FWLIB/src/stm32f4xx_can.c **** /**
 973:./FWLIB/src/stm32f4xx_can.c ****   * @brief  Wakes up the CAN peripheral from sleep mode .
 974:./FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
 975:./FWLIB/src/stm32f4xx_can.c ****   * @retval CAN_WakeUp_Ok if sleep mode left, CAN_WakeUp_Failed otherwise.
 976:./FWLIB/src/stm32f4xx_can.c ****   */
 977:./FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_WakeUp(CAN_TypeDef* CANx)
 978:./FWLIB/src/stm32f4xx_can.c **** {
 979:./FWLIB/src/stm32f4xx_can.c ****   uint32_t wait_slak = SLAK_TIMEOUT;
 980:./FWLIB/src/stm32f4xx_can.c ****   uint8_t wakeupstatus = CAN_WakeUp_Failed;
 981:./FWLIB/src/stm32f4xx_can.c ****   
 982:./FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 983:./FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 984:./FWLIB/src/stm32f4xx_can.c ****     
 985:./FWLIB/src/stm32f4xx_can.c ****   /* Wake up request */
 986:./FWLIB/src/stm32f4xx_can.c ****   CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
 987:./FWLIB/src/stm32f4xx_can.c ****     
 988:./FWLIB/src/stm32f4xx_can.c ****   /* Sleep mode status */
 989:./FWLIB/src/stm32f4xx_can.c ****   while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 990:./FWLIB/src/stm32f4xx_can.c ****   {
 991:./FWLIB/src/stm32f4xx_can.c ****    wait_slak--;
 992:./FWLIB/src/stm32f4xx_can.c ****   }
 993:./FWLIB/src/stm32f4xx_can.c ****   if((CANx->MSR & CAN_MSR_SLAK) != CAN_MSR_SLAK)
 994:./FWLIB/src/stm32f4xx_can.c ****   {
 995:./FWLIB/src/stm32f4xx_can.c ****    /* wake up done : Sleep mode exited */
 996:./FWLIB/src/stm32f4xx_can.c ****     wakeupstatus = CAN_WakeUp_Ok;
 997:./FWLIB/src/stm32f4xx_can.c ****   }
 998:./FWLIB/src/stm32f4xx_can.c ****   /* return wakeup status */
 999:./FWLIB/src/stm32f4xx_can.c ****   return (uint8_t)wakeupstatus;
1000:./FWLIB/src/stm32f4xx_can.c **** }
1001:./FWLIB/src/stm32f4xx_can.c **** /**
ARM GAS  /tmp/ccmLA7br.s 			page 19


1002:./FWLIB/src/stm32f4xx_can.c ****   * @}
1003:./FWLIB/src/stm32f4xx_can.c ****   */
1004:./FWLIB/src/stm32f4xx_can.c **** 
1005:./FWLIB/src/stm32f4xx_can.c **** 
1006:./FWLIB/src/stm32f4xx_can.c **** /** @defgroup CAN_Group5 CAN Bus Error management functions
1007:./FWLIB/src/stm32f4xx_can.c ****  *  @brief    CAN Bus Error management functions 
1008:./FWLIB/src/stm32f4xx_can.c ****  *
1009:./FWLIB/src/stm32f4xx_can.c **** @verbatim    
1010:./FWLIB/src/stm32f4xx_can.c ****  ===============================================================================
1011:./FWLIB/src/stm32f4xx_can.c ****                 ##### CAN Bus Error management functions #####
1012:./FWLIB/src/stm32f4xx_can.c ****  ===============================================================================  
1013:./FWLIB/src/stm32f4xx_can.c ****     [..] This section provides functions allowing to 
1014:./FWLIB/src/stm32f4xx_can.c ****       (+) Return the CANx's last error code (LEC)
1015:./FWLIB/src/stm32f4xx_can.c ****       (+) Return the CANx Receive Error Counter (REC)
1016:./FWLIB/src/stm32f4xx_can.c ****       (+) Return the LSB of the 9-bit CANx Transmit Error Counter(TEC).
1017:./FWLIB/src/stm32f4xx_can.c ****    
1018:./FWLIB/src/stm32f4xx_can.c ****       -@- If TEC is greater than 255, The CAN is in bus-off state.
1019:./FWLIB/src/stm32f4xx_can.c ****       -@- if REC or TEC are greater than 96, an Error warning flag occurs.
1020:./FWLIB/src/stm32f4xx_can.c ****       -@- if REC or TEC are greater than 127, an Error Passive Flag occurs.
1021:./FWLIB/src/stm32f4xx_can.c ****                         
1022:./FWLIB/src/stm32f4xx_can.c **** @endverbatim
1023:./FWLIB/src/stm32f4xx_can.c ****   * @{
1024:./FWLIB/src/stm32f4xx_can.c ****   */
1025:./FWLIB/src/stm32f4xx_can.c ****   
1026:./FWLIB/src/stm32f4xx_can.c **** /**
1027:./FWLIB/src/stm32f4xx_can.c ****   * @brief  Returns the CANx's last error code (LEC).
1028:./FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
1029:./FWLIB/src/stm32f4xx_can.c ****   * @retval Error code: 
1030:./FWLIB/src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_NoErr: No Error  
1031:./FWLIB/src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_StuffErr: Stuff Error
1032:./FWLIB/src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_FormErr: Form Error
1033:./FWLIB/src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_ACKErr : Acknowledgment Error
1034:./FWLIB/src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_BitRecessiveErr: Bit Recessive Error
1035:./FWLIB/src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_BitDominantErr: Bit Dominant Error
1036:./FWLIB/src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_CRCErr: CRC Error
1037:./FWLIB/src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_SoftwareSetErr: Software Set Error  
1038:./FWLIB/src/stm32f4xx_can.c ****   */
1039:./FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_GetLastErrorCode(CAN_TypeDef* CANx)
1040:./FWLIB/src/stm32f4xx_can.c **** {
1041:./FWLIB/src/stm32f4xx_can.c ****   uint8_t errorcode=0;
1042:./FWLIB/src/stm32f4xx_can.c ****   
1043:./FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
1044:./FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1045:./FWLIB/src/stm32f4xx_can.c ****   
1046:./FWLIB/src/stm32f4xx_can.c ****   /* Get the error code*/
1047:./FWLIB/src/stm32f4xx_can.c ****   errorcode = (((uint8_t)CANx->ESR) & (uint8_t)CAN_ESR_LEC);
1048:./FWLIB/src/stm32f4xx_can.c ****   
1049:./FWLIB/src/stm32f4xx_can.c ****   /* Return the error code*/
1050:./FWLIB/src/stm32f4xx_can.c ****   return errorcode;
1051:./FWLIB/src/stm32f4xx_can.c **** }
1052:./FWLIB/src/stm32f4xx_can.c **** 
1053:./FWLIB/src/stm32f4xx_can.c **** /**
1054:./FWLIB/src/stm32f4xx_can.c ****   * @brief  Returns the CANx Receive Error Counter (REC).
1055:./FWLIB/src/stm32f4xx_can.c ****   * @note   In case of an error during reception, this counter is incremented 
1056:./FWLIB/src/stm32f4xx_can.c ****   *         by 1 or by 8 depending on the error condition as defined by the CAN 
1057:./FWLIB/src/stm32f4xx_can.c ****   *         standard. After every successful reception, the counter is 
1058:./FWLIB/src/stm32f4xx_can.c ****   *         decremented by 1 or reset to 120 if its value was higher than 128. 
ARM GAS  /tmp/ccmLA7br.s 			page 20


1059:./FWLIB/src/stm32f4xx_can.c ****   *         When the counter value exceeds 127, the CAN controller enters the 
1060:./FWLIB/src/stm32f4xx_can.c ****   *         error passive state.  
1061:./FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.  
1062:./FWLIB/src/stm32f4xx_can.c ****   * @retval CAN Receive Error Counter. 
1063:./FWLIB/src/stm32f4xx_can.c ****   */
1064:./FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_GetReceiveErrorCounter(CAN_TypeDef* CANx)
1065:./FWLIB/src/stm32f4xx_can.c **** {
1066:./FWLIB/src/stm32f4xx_can.c ****   uint8_t counter=0;
1067:./FWLIB/src/stm32f4xx_can.c ****   
1068:./FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
1069:./FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1070:./FWLIB/src/stm32f4xx_can.c ****   
1071:./FWLIB/src/stm32f4xx_can.c ****   /* Get the Receive Error Counter*/
1072:./FWLIB/src/stm32f4xx_can.c ****   counter = (uint8_t)((CANx->ESR & CAN_ESR_REC)>> 24);
1073:./FWLIB/src/stm32f4xx_can.c ****   
1074:./FWLIB/src/stm32f4xx_can.c ****   /* Return the Receive Error Counter*/
1075:./FWLIB/src/stm32f4xx_can.c ****   return counter;
1076:./FWLIB/src/stm32f4xx_can.c **** }
1077:./FWLIB/src/stm32f4xx_can.c **** 
1078:./FWLIB/src/stm32f4xx_can.c **** 
1079:./FWLIB/src/stm32f4xx_can.c **** /**
1080:./FWLIB/src/stm32f4xx_can.c ****   * @brief  Returns the LSB of the 9-bit CANx Transmit Error Counter(TEC).
1081:./FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
1082:./FWLIB/src/stm32f4xx_can.c ****   * @retval LSB of the 9-bit CAN Transmit Error Counter. 
1083:./FWLIB/src/stm32f4xx_can.c ****   */
1084:./FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_GetLSBTransmitErrorCounter(CAN_TypeDef* CANx)
1085:./FWLIB/src/stm32f4xx_can.c **** {
1086:./FWLIB/src/stm32f4xx_can.c ****   uint8_t counter=0;
1087:./FWLIB/src/stm32f4xx_can.c ****   
1088:./FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
1089:./FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1090:./FWLIB/src/stm32f4xx_can.c ****   
1091:./FWLIB/src/stm32f4xx_can.c ****   /* Get the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
1092:./FWLIB/src/stm32f4xx_can.c ****   counter = (uint8_t)((CANx->ESR & CAN_ESR_TEC)>> 16);
1093:./FWLIB/src/stm32f4xx_can.c ****   
1094:./FWLIB/src/stm32f4xx_can.c ****   /* Return the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
1095:./FWLIB/src/stm32f4xx_can.c ****   return counter;
1096:./FWLIB/src/stm32f4xx_can.c **** }
1097:./FWLIB/src/stm32f4xx_can.c **** /**
1098:./FWLIB/src/stm32f4xx_can.c ****   * @}
1099:./FWLIB/src/stm32f4xx_can.c ****   */
1100:./FWLIB/src/stm32f4xx_can.c **** 
1101:./FWLIB/src/stm32f4xx_can.c **** /** @defgroup CAN_Group6 Interrupts and flags management functions
1102:./FWLIB/src/stm32f4xx_can.c ****  *  @brief   Interrupts and flags management functions
1103:./FWLIB/src/stm32f4xx_can.c ****  *
1104:./FWLIB/src/stm32f4xx_can.c **** @verbatim   
1105:./FWLIB/src/stm32f4xx_can.c ****  ===============================================================================
1106:./FWLIB/src/stm32f4xx_can.c ****               ##### Interrupts and flags management functions #####
1107:./FWLIB/src/stm32f4xx_can.c ****  ===============================================================================  
1108:./FWLIB/src/stm32f4xx_can.c **** 
1109:./FWLIB/src/stm32f4xx_can.c ****      [..] This section provides functions allowing to configure the CAN Interrupts 
1110:./FWLIB/src/stm32f4xx_can.c ****           and to get the status and clear flags and Interrupts pending bits.
1111:./FWLIB/src/stm32f4xx_can.c ****   
1112:./FWLIB/src/stm32f4xx_can.c ****           The CAN provides 14 Interrupts sources and 15 Flags:
1113:./FWLIB/src/stm32f4xx_can.c **** 
1114:./FWLIB/src/stm32f4xx_can.c ****    
1115:./FWLIB/src/stm32f4xx_can.c ****   *** Flags ***
ARM GAS  /tmp/ccmLA7br.s 			page 21


1116:./FWLIB/src/stm32f4xx_can.c ****   =============
1117:./FWLIB/src/stm32f4xx_can.c ****     [..] The 15 flags can be divided on 4 groups: 
1118:./FWLIB/src/stm32f4xx_can.c **** 
1119:./FWLIB/src/stm32f4xx_can.c ****       (+) Transmit Flags
1120:./FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_RQCP0, 
1121:./FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_RQCP1, 
1122:./FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_RQCP2  : Request completed MailBoxes 0, 1 and 2  Flags
1123:./FWLIB/src/stm32f4xx_can.c ****                                Set when when the last request (transmit or abort)
1124:./FWLIB/src/stm32f4xx_can.c ****                                has been performed. 
1125:./FWLIB/src/stm32f4xx_can.c **** 
1126:./FWLIB/src/stm32f4xx_can.c ****       (+) Receive Flags
1127:./FWLIB/src/stm32f4xx_can.c **** 
1128:./FWLIB/src/stm32f4xx_can.c **** 
1129:./FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_FMP0,
1130:./FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_FMP1   : FIFO 0 and 1 Message Pending Flags 
1131:./FWLIB/src/stm32f4xx_can.c ****                                set to signal that messages are pending in the receive 
1132:./FWLIB/src/stm32f4xx_can.c ****                                FIFO.
1133:./FWLIB/src/stm32f4xx_can.c ****                                These Flags are cleared only by hardware. 
1134:./FWLIB/src/stm32f4xx_can.c **** 
1135:./FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_FF0,
1136:./FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_FF1    : FIFO 0 and 1 Full Flags
1137:./FWLIB/src/stm32f4xx_can.c ****                                set when three messages are stored in the selected 
1138:./FWLIB/src/stm32f4xx_can.c ****                                FIFO.                        
1139:./FWLIB/src/stm32f4xx_can.c **** 
1140:./FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_FOV0              
1141:./FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_FOV1   : FIFO 0 and 1 Overrun Flags
1142:./FWLIB/src/stm32f4xx_can.c ****                                set when a new message has been received and passed 
1143:./FWLIB/src/stm32f4xx_can.c ****                                the filter while the FIFO was full.         
1144:./FWLIB/src/stm32f4xx_can.c **** 
1145:./FWLIB/src/stm32f4xx_can.c ****       (+) Operating Mode Flags
1146:./FWLIB/src/stm32f4xx_can.c **** 
1147:./FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_WKU    : Wake up Flag
1148:./FWLIB/src/stm32f4xx_can.c ****                                set to signal that a SOF bit has been detected while 
1149:./FWLIB/src/stm32f4xx_can.c ****                                the CAN hardware was in Sleep mode. 
1150:./FWLIB/src/stm32f4xx_can.c ****         
1151:./FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_SLAK   : Sleep acknowledge Flag
1152:./FWLIB/src/stm32f4xx_can.c ****                                Set to signal that the CAN has entered Sleep Mode. 
1153:./FWLIB/src/stm32f4xx_can.c ****     
1154:./FWLIB/src/stm32f4xx_can.c ****       (+) Error Flags
1155:./FWLIB/src/stm32f4xx_can.c **** 
1156:./FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_EWG    : Error Warning Flag
1157:./FWLIB/src/stm32f4xx_can.c ****                                Set when the warning limit has been reached (Receive 
1158:./FWLIB/src/stm32f4xx_can.c ****                                Error Counter or Transmit Error Counter greater than 96). 
1159:./FWLIB/src/stm32f4xx_can.c ****                                This Flag is cleared only by hardware.
1160:./FWLIB/src/stm32f4xx_can.c ****                             
1161:./FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_EPV    : Error Passive Flag
1162:./FWLIB/src/stm32f4xx_can.c ****                                Set when the Error Passive limit has been reached 
1163:./FWLIB/src/stm32f4xx_can.c ****                                (Receive Error Counter or Transmit Error Counter 
1164:./FWLIB/src/stm32f4xx_can.c ****                                greater than 127).
1165:./FWLIB/src/stm32f4xx_can.c ****                                This Flag is cleared only by hardware.
1166:./FWLIB/src/stm32f4xx_can.c ****                              
1167:./FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_BOF    : Bus-Off Flag
1168:./FWLIB/src/stm32f4xx_can.c ****                                set when CAN enters the bus-off state. The bus-off 
1169:./FWLIB/src/stm32f4xx_can.c ****                                state is entered on TEC overflow, greater than 255.
1170:./FWLIB/src/stm32f4xx_can.c ****                                This Flag is cleared only by hardware.
1171:./FWLIB/src/stm32f4xx_can.c ****                                    
1172:./FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_LEC    : Last error code Flag
ARM GAS  /tmp/ccmLA7br.s 			page 22


1173:./FWLIB/src/stm32f4xx_can.c ****                                set If a message has been transferred (reception or
1174:./FWLIB/src/stm32f4xx_can.c ****                                transmission) with error, and the error code is hold.              
1175:./FWLIB/src/stm32f4xx_can.c ****                            
1176:./FWLIB/src/stm32f4xx_can.c ****   *** Interrupts ***
1177:./FWLIB/src/stm32f4xx_can.c ****   ==================
1178:./FWLIB/src/stm32f4xx_can.c ****     [..] The 14 interrupts can be divided on 4 groups: 
1179:./FWLIB/src/stm32f4xx_can.c ****   
1180:./FWLIB/src/stm32f4xx_can.c ****       (+) Transmit interrupt
1181:./FWLIB/src/stm32f4xx_can.c ****   
1182:./FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_TME   :  Transmit mailbox empty Interrupt
1183:./FWLIB/src/stm32f4xx_can.c ****                              if enabled, this interrupt source is pending when 
1184:./FWLIB/src/stm32f4xx_can.c ****                              no transmit request are pending for Tx mailboxes.      
1185:./FWLIB/src/stm32f4xx_can.c **** 
1186:./FWLIB/src/stm32f4xx_can.c ****       (+) Receive Interrupts
1187:./FWLIB/src/stm32f4xx_can.c ****          
1188:./FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_FMP0,
1189:./FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_FMP1    :  FIFO 0 and FIFO1 message pending Interrupts
1190:./FWLIB/src/stm32f4xx_can.c ****                                if enabled, these interrupt sources are pending 
1191:./FWLIB/src/stm32f4xx_can.c ****                                when messages are pending in the receive FIFO.
1192:./FWLIB/src/stm32f4xx_can.c ****                                The corresponding interrupt pending bits are cleared 
1193:./FWLIB/src/stm32f4xx_can.c ****                                only by hardware.
1194:./FWLIB/src/stm32f4xx_can.c ****                 
1195:./FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_FF0,              
1196:./FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_FF1     :  FIFO 0 and FIFO1 full Interrupts
1197:./FWLIB/src/stm32f4xx_can.c ****                                if enabled, these interrupt sources are pending 
1198:./FWLIB/src/stm32f4xx_can.c ****                                when three messages are stored in the selected FIFO.
1199:./FWLIB/src/stm32f4xx_can.c ****         
1200:./FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_FOV0,        
1201:./FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_FOV1    :  FIFO 0 and FIFO1 overrun Interrupts        
1202:./FWLIB/src/stm32f4xx_can.c ****                                if enabled, these interrupt sources are pending 
1203:./FWLIB/src/stm32f4xx_can.c ****                                when a new message has been received and passed 
1204:./FWLIB/src/stm32f4xx_can.c ****                                the filter while the FIFO was full.
1205:./FWLIB/src/stm32f4xx_can.c **** 
1206:./FWLIB/src/stm32f4xx_can.c ****       (+) Operating Mode Interrupts
1207:./FWLIB/src/stm32f4xx_can.c ****          
1208:./FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_WKU     :  Wake-up Interrupt
1209:./FWLIB/src/stm32f4xx_can.c ****                                if enabled, this interrupt source is pending when 
1210:./FWLIB/src/stm32f4xx_can.c ****                                a SOF bit has been detected while the CAN hardware 
1211:./FWLIB/src/stm32f4xx_can.c ****                                was in Sleep mode.
1212:./FWLIB/src/stm32f4xx_can.c ****                                   
1213:./FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_SLK     :  Sleep acknowledge Interrupt
1214:./FWLIB/src/stm32f4xx_can.c ****                                if enabled, this interrupt source is pending when 
1215:./FWLIB/src/stm32f4xx_can.c ****                                the CAN has entered Sleep Mode.       
1216:./FWLIB/src/stm32f4xx_can.c **** 
1217:./FWLIB/src/stm32f4xx_can.c ****       (+) Error Interrupts 
1218:./FWLIB/src/stm32f4xx_can.c ****         
1219:./FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_EWG     :  Error warning Interrupt 
1220:./FWLIB/src/stm32f4xx_can.c ****                                if enabled, this interrupt source is pending when
1221:./FWLIB/src/stm32f4xx_can.c ****                                the warning limit has been reached (Receive Error 
1222:./FWLIB/src/stm32f4xx_can.c ****                                Counter or Transmit Error Counter=96). 
1223:./FWLIB/src/stm32f4xx_can.c ****                                
1224:./FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_EPV     :  Error passive Interrupt        
1225:./FWLIB/src/stm32f4xx_can.c ****                                if enabled, this interrupt source is pending when
1226:./FWLIB/src/stm32f4xx_can.c ****                                the Error Passive limit has been reached (Receive 
1227:./FWLIB/src/stm32f4xx_can.c ****                                Error Counter or Transmit Error Counter>127).
1228:./FWLIB/src/stm32f4xx_can.c ****                           
1229:./FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_BOF     :  Bus-off Interrupt
ARM GAS  /tmp/ccmLA7br.s 			page 23


1230:./FWLIB/src/stm32f4xx_can.c ****                                if enabled, this interrupt source is pending when
1231:./FWLIB/src/stm32f4xx_can.c ****                                CAN enters the bus-off state. The bus-off state is 
1232:./FWLIB/src/stm32f4xx_can.c ****                                entered on TEC overflow, greater than 255.
1233:./FWLIB/src/stm32f4xx_can.c ****                                This Flag is cleared only by hardware.
1234:./FWLIB/src/stm32f4xx_can.c ****                                   
1235:./FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_LEC     :  Last error code Interrupt        
1236:./FWLIB/src/stm32f4xx_can.c ****                                if enabled, this interrupt source is pending  when
1237:./FWLIB/src/stm32f4xx_can.c ****                                a message has been transferred (reception or
1238:./FWLIB/src/stm32f4xx_can.c ****                                transmission) with error, and the error code is hold.
1239:./FWLIB/src/stm32f4xx_can.c ****                           
1240:./FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_ERR     :  Error Interrupt
1241:./FWLIB/src/stm32f4xx_can.c ****                                if enabled, this interrupt source is pending when 
1242:./FWLIB/src/stm32f4xx_can.c ****                                an error condition is pending.      
1243:./FWLIB/src/stm32f4xx_can.c ****                       
1244:./FWLIB/src/stm32f4xx_can.c ****     [..] Managing the CAN controller events :
1245:./FWLIB/src/stm32f4xx_can.c ****  
1246:./FWLIB/src/stm32f4xx_can.c ****          The user should identify which mode will be used in his application to 
1247:./FWLIB/src/stm32f4xx_can.c ****          manage the CAN controller events: Polling mode or Interrupt mode.
1248:./FWLIB/src/stm32f4xx_can.c ****   
1249:./FWLIB/src/stm32f4xx_can.c ****       (#) In the Polling Mode it is advised to use the following functions:
1250:./FWLIB/src/stm32f4xx_can.c ****         (++) CAN_GetFlagStatus() : to check if flags events occur. 
1251:./FWLIB/src/stm32f4xx_can.c ****         (++) CAN_ClearFlag()     : to clear the flags events.
1252:./FWLIB/src/stm32f4xx_can.c ****   
1253:./FWLIB/src/stm32f4xx_can.c **** 
1254:./FWLIB/src/stm32f4xx_can.c ****   
1255:./FWLIB/src/stm32f4xx_can.c ****       (#) In the Interrupt Mode it is advised to use the following functions:
1256:./FWLIB/src/stm32f4xx_can.c ****         (++) CAN_ITConfig()       : to enable or disable the interrupt source.
1257:./FWLIB/src/stm32f4xx_can.c ****         (++) CAN_GetITStatus()    : to check if Interrupt occurs.
1258:./FWLIB/src/stm32f4xx_can.c ****         (++) CAN_ClearITPendingBit() : to clear the Interrupt pending Bit 
1259:./FWLIB/src/stm32f4xx_can.c ****             (corresponding Flag).
1260:./FWLIB/src/stm32f4xx_can.c ****         -@@-  This function has no impact on CAN_IT_FMP0 and CAN_IT_FMP1 Interrupts 
1261:./FWLIB/src/stm32f4xx_can.c ****              pending bits since there are cleared only by hardware. 
1262:./FWLIB/src/stm32f4xx_can.c ****   
1263:./FWLIB/src/stm32f4xx_can.c **** @endverbatim
1264:./FWLIB/src/stm32f4xx_can.c ****   * @{
1265:./FWLIB/src/stm32f4xx_can.c ****   */ 
1266:./FWLIB/src/stm32f4xx_can.c **** /**
1267:./FWLIB/src/stm32f4xx_can.c ****   * @brief  Enables or disables the specified CANx interrupts.
1268:./FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
1269:./FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_IT: specifies the CAN interrupt sources to be enabled or disabled.
1270:./FWLIB/src/stm32f4xx_can.c ****   *          This parameter can be: 
1271:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_TME: Transmit mailbox empty Interrupt 
1272:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FMP0: FIFO 0 message pending Interrupt 
1273:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FF0: FIFO 0 full Interrupt
1274:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FOV0: FIFO 0 overrun Interrupt
1275:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FMP1: FIFO 1 message pending Interrupt 
1276:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FF1: FIFO 1 full Interrupt
1277:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FOV1: FIFO 1 overrun Interrupt
1278:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_WKU: Wake-up Interrupt
1279:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_SLK: Sleep acknowledge Interrupt  
1280:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_EWG: Error warning Interrupt
1281:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_EPV: Error passive Interrupt
1282:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_BOF: Bus-off Interrupt  
1283:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_LEC: Last error code Interrupt
1284:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_ERR: Error Interrupt
1285:./FWLIB/src/stm32f4xx_can.c ****   * @param  NewState: new state of the CAN interrupts.
1286:./FWLIB/src/stm32f4xx_can.c ****   *          This parameter can be: ENABLE or DISABLE.
ARM GAS  /tmp/ccmLA7br.s 			page 24


1287:./FWLIB/src/stm32f4xx_can.c ****   * @retval None
1288:./FWLIB/src/stm32f4xx_can.c ****   */
1289:./FWLIB/src/stm32f4xx_can.c **** void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState)
1290:./FWLIB/src/stm32f4xx_can.c **** {
1291:./FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
1292:./FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1293:./FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_IT(CAN_IT));
1294:./FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1295:./FWLIB/src/stm32f4xx_can.c **** 
1296:./FWLIB/src/stm32f4xx_can.c ****   if (NewState != DISABLE)
1297:./FWLIB/src/stm32f4xx_can.c ****   {
1298:./FWLIB/src/stm32f4xx_can.c ****     /* Enable the selected CANx interrupt */
1299:./FWLIB/src/stm32f4xx_can.c ****     CANx->IER |= CAN_IT;
1300:./FWLIB/src/stm32f4xx_can.c ****   }
1301:./FWLIB/src/stm32f4xx_can.c ****   else
1302:./FWLIB/src/stm32f4xx_can.c ****   {
1303:./FWLIB/src/stm32f4xx_can.c ****     /* Disable the selected CANx interrupt */
1304:./FWLIB/src/stm32f4xx_can.c ****     CANx->IER &= ~CAN_IT;
1305:./FWLIB/src/stm32f4xx_can.c ****   }
1306:./FWLIB/src/stm32f4xx_can.c **** }
1307:./FWLIB/src/stm32f4xx_can.c **** /**
1308:./FWLIB/src/stm32f4xx_can.c ****   * @brief  Checks whether the specified CAN flag is set or not.
1309:./FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
1310:./FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_FLAG: specifies the flag to check.
1311:./FWLIB/src/stm32f4xx_can.c ****   *          This parameter can be one of the following values:
1312:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_RQCP0: Request MailBox0 Flag
1313:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_RQCP1: Request MailBox1 Flag
1314:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_RQCP2: Request MailBox2 Flag
1315:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FMP0: FIFO 0 Message Pending Flag   
1316:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FF0: FIFO 0 Full Flag       
1317:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FOV0: FIFO 0 Overrun Flag 
1318:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FMP1: FIFO 1 Message Pending Flag   
1319:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FF1: FIFO 1 Full Flag        
1320:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FOV1: FIFO 1 Overrun Flag     
1321:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_WKU: Wake up Flag
1322:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_SLAK: Sleep acknowledge Flag 
1323:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_EWG: Error Warning Flag
1324:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_EPV: Error Passive Flag  
1325:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_BOF: Bus-Off Flag    
1326:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_LEC: Last error code Flag      
1327:./FWLIB/src/stm32f4xx_can.c ****   * @retval The new state of CAN_FLAG (SET or RESET).
1328:./FWLIB/src/stm32f4xx_can.c ****   */
1329:./FWLIB/src/stm32f4xx_can.c **** FlagStatus CAN_GetFlagStatus(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
1330:./FWLIB/src/stm32f4xx_can.c **** {
1331:./FWLIB/src/stm32f4xx_can.c ****   FlagStatus bitstatus = RESET;
1332:./FWLIB/src/stm32f4xx_can.c ****   
1333:./FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
1334:./FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1335:./FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_GET_FLAG(CAN_FLAG));
1336:./FWLIB/src/stm32f4xx_can.c ****   
1337:./FWLIB/src/stm32f4xx_can.c **** 
1338:./FWLIB/src/stm32f4xx_can.c ****   if((CAN_FLAG & CAN_FLAGS_ESR) != (uint32_t)RESET)
1339:./FWLIB/src/stm32f4xx_can.c ****   { 
1340:./FWLIB/src/stm32f4xx_can.c ****     /* Check the status of the specified CAN flag */
1341:./FWLIB/src/stm32f4xx_can.c ****     if ((CANx->ESR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1342:./FWLIB/src/stm32f4xx_can.c ****     { 
1343:./FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is set */
ARM GAS  /tmp/ccmLA7br.s 			page 25


1344:./FWLIB/src/stm32f4xx_can.c ****       bitstatus = SET;
1345:./FWLIB/src/stm32f4xx_can.c ****     }
1346:./FWLIB/src/stm32f4xx_can.c ****     else
1347:./FWLIB/src/stm32f4xx_can.c ****     { 
1348:./FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is reset */
1349:./FWLIB/src/stm32f4xx_can.c ****       bitstatus = RESET;
1350:./FWLIB/src/stm32f4xx_can.c ****     }
1351:./FWLIB/src/stm32f4xx_can.c ****   }
1352:./FWLIB/src/stm32f4xx_can.c ****   else if((CAN_FLAG & CAN_FLAGS_MSR) != (uint32_t)RESET)
1353:./FWLIB/src/stm32f4xx_can.c ****   { 
1354:./FWLIB/src/stm32f4xx_can.c ****     /* Check the status of the specified CAN flag */
1355:./FWLIB/src/stm32f4xx_can.c ****     if ((CANx->MSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1356:./FWLIB/src/stm32f4xx_can.c ****     { 
1357:./FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is set */
1358:./FWLIB/src/stm32f4xx_can.c ****       bitstatus = SET;
1359:./FWLIB/src/stm32f4xx_can.c ****     }
1360:./FWLIB/src/stm32f4xx_can.c ****     else
1361:./FWLIB/src/stm32f4xx_can.c ****     { 
1362:./FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is reset */
1363:./FWLIB/src/stm32f4xx_can.c ****       bitstatus = RESET;
1364:./FWLIB/src/stm32f4xx_can.c ****     }
1365:./FWLIB/src/stm32f4xx_can.c ****   }
1366:./FWLIB/src/stm32f4xx_can.c ****   else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
1367:./FWLIB/src/stm32f4xx_can.c ****   { 
1368:./FWLIB/src/stm32f4xx_can.c ****     /* Check the status of the specified CAN flag */
1369:./FWLIB/src/stm32f4xx_can.c ****     if ((CANx->TSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1370:./FWLIB/src/stm32f4xx_can.c ****     { 
1371:./FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is set */
1372:./FWLIB/src/stm32f4xx_can.c ****       bitstatus = SET;
1373:./FWLIB/src/stm32f4xx_can.c ****     }
1374:./FWLIB/src/stm32f4xx_can.c ****     else
1375:./FWLIB/src/stm32f4xx_can.c ****     { 
1376:./FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is reset */
1377:./FWLIB/src/stm32f4xx_can.c ****       bitstatus = RESET;
1378:./FWLIB/src/stm32f4xx_can.c ****     }
1379:./FWLIB/src/stm32f4xx_can.c ****   }
1380:./FWLIB/src/stm32f4xx_can.c ****   else if((CAN_FLAG & CAN_FLAGS_RF0R) != (uint32_t)RESET)
1381:./FWLIB/src/stm32f4xx_can.c ****   { 
1382:./FWLIB/src/stm32f4xx_can.c ****     /* Check the status of the specified CAN flag */
1383:./FWLIB/src/stm32f4xx_can.c ****     if ((CANx->RF0R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1384:./FWLIB/src/stm32f4xx_can.c ****     { 
1385:./FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is set */
1386:./FWLIB/src/stm32f4xx_can.c ****       bitstatus = SET;
1387:./FWLIB/src/stm32f4xx_can.c ****     }
1388:./FWLIB/src/stm32f4xx_can.c ****     else
1389:./FWLIB/src/stm32f4xx_can.c ****     { 
1390:./FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is reset */
1391:./FWLIB/src/stm32f4xx_can.c ****       bitstatus = RESET;
1392:./FWLIB/src/stm32f4xx_can.c ****     }
1393:./FWLIB/src/stm32f4xx_can.c ****   }
1394:./FWLIB/src/stm32f4xx_can.c ****   else /* If(CAN_FLAG & CAN_FLAGS_RF1R != (uint32_t)RESET) */
1395:./FWLIB/src/stm32f4xx_can.c ****   { 
1396:./FWLIB/src/stm32f4xx_can.c ****     /* Check the status of the specified CAN flag */
1397:./FWLIB/src/stm32f4xx_can.c ****     if ((uint32_t)(CANx->RF1R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1398:./FWLIB/src/stm32f4xx_can.c ****     { 
1399:./FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is set */
1400:./FWLIB/src/stm32f4xx_can.c ****       bitstatus = SET;
ARM GAS  /tmp/ccmLA7br.s 			page 26


1401:./FWLIB/src/stm32f4xx_can.c ****     }
1402:./FWLIB/src/stm32f4xx_can.c ****     else
1403:./FWLIB/src/stm32f4xx_can.c ****     { 
1404:./FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is reset */
1405:./FWLIB/src/stm32f4xx_can.c ****       bitstatus = RESET;
1406:./FWLIB/src/stm32f4xx_can.c ****     }
1407:./FWLIB/src/stm32f4xx_can.c ****   }
1408:./FWLIB/src/stm32f4xx_can.c ****   /* Return the CAN_FLAG status */
1409:./FWLIB/src/stm32f4xx_can.c ****   return  bitstatus;
1410:./FWLIB/src/stm32f4xx_can.c **** }
1411:./FWLIB/src/stm32f4xx_can.c **** 
1412:./FWLIB/src/stm32f4xx_can.c **** /**
1413:./FWLIB/src/stm32f4xx_can.c ****   * @brief  Clears the CAN's pending flags.
1414:./FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
1415:./FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_FLAG: specifies the flag to clear.
1416:./FWLIB/src/stm32f4xx_can.c ****   *          This parameter can be one of the following values:
1417:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_RQCP0: Request MailBox0 Flag
1418:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_RQCP1: Request MailBox1 Flag
1419:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_RQCP2: Request MailBox2 Flag 
1420:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FF0: FIFO 0 Full Flag       
1421:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FOV0: FIFO 0 Overrun Flag  
1422:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FF1: FIFO 1 Full Flag        
1423:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FOV1: FIFO 1 Overrun Flag     
1424:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_WKU: Wake up Flag
1425:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_SLAK: Sleep acknowledge Flag    
1426:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_LEC: Last error code Flag        
1427:./FWLIB/src/stm32f4xx_can.c ****   * @retval None
1428:./FWLIB/src/stm32f4xx_can.c ****   */
1429:./FWLIB/src/stm32f4xx_can.c **** void CAN_ClearFlag(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
1430:./FWLIB/src/stm32f4xx_can.c **** {
1431:./FWLIB/src/stm32f4xx_can.c ****   uint32_t flagtmp=0;
1432:./FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
1433:./FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1434:./FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_CLEAR_FLAG(CAN_FLAG));
1435:./FWLIB/src/stm32f4xx_can.c ****   
1436:./FWLIB/src/stm32f4xx_can.c ****   if (CAN_FLAG == CAN_FLAG_LEC) /* ESR register */
1437:./FWLIB/src/stm32f4xx_can.c ****   {
1438:./FWLIB/src/stm32f4xx_can.c ****     /* Clear the selected CAN flags */
1439:./FWLIB/src/stm32f4xx_can.c ****     CANx->ESR = (uint32_t)RESET;
1440:./FWLIB/src/stm32f4xx_can.c ****   }
1441:./FWLIB/src/stm32f4xx_can.c ****   else /* MSR or TSR or RF0R or RF1R */
1442:./FWLIB/src/stm32f4xx_can.c ****   {
1443:./FWLIB/src/stm32f4xx_can.c ****     flagtmp = CAN_FLAG & 0x000FFFFF;
1444:./FWLIB/src/stm32f4xx_can.c **** 
1445:./FWLIB/src/stm32f4xx_can.c ****     if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
1446:./FWLIB/src/stm32f4xx_can.c ****     {
1447:./FWLIB/src/stm32f4xx_can.c ****       /* Receive Flags */
1448:./FWLIB/src/stm32f4xx_can.c ****       CANx->RF0R = (uint32_t)(flagtmp);
1449:./FWLIB/src/stm32f4xx_can.c ****     }
1450:./FWLIB/src/stm32f4xx_can.c ****     else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
1451:./FWLIB/src/stm32f4xx_can.c ****     {
1452:./FWLIB/src/stm32f4xx_can.c ****       /* Receive Flags */
1453:./FWLIB/src/stm32f4xx_can.c ****       CANx->RF1R = (uint32_t)(flagtmp);
1454:./FWLIB/src/stm32f4xx_can.c ****     }
1455:./FWLIB/src/stm32f4xx_can.c ****     else if ((CAN_FLAG & CAN_FLAGS_TSR)!=(uint32_t)RESET)
1456:./FWLIB/src/stm32f4xx_can.c ****     {
1457:./FWLIB/src/stm32f4xx_can.c ****       /* Transmit Flags */
ARM GAS  /tmp/ccmLA7br.s 			page 27


1458:./FWLIB/src/stm32f4xx_can.c ****       CANx->TSR = (uint32_t)(flagtmp);
1459:./FWLIB/src/stm32f4xx_can.c ****     }
1460:./FWLIB/src/stm32f4xx_can.c ****     else /* If((CAN_FLAG & CAN_FLAGS_MSR)!=(uint32_t)RESET) */
1461:./FWLIB/src/stm32f4xx_can.c ****     {
1462:./FWLIB/src/stm32f4xx_can.c ****       /* Operating mode Flags */
1463:./FWLIB/src/stm32f4xx_can.c ****       CANx->MSR = (uint32_t)(flagtmp);
1464:./FWLIB/src/stm32f4xx_can.c ****     }
1465:./FWLIB/src/stm32f4xx_can.c ****   }
1466:./FWLIB/src/stm32f4xx_can.c **** }
1467:./FWLIB/src/stm32f4xx_can.c **** 
1468:./FWLIB/src/stm32f4xx_can.c **** /**
1469:./FWLIB/src/stm32f4xx_can.c ****   * @brief  Checks whether the specified CANx interrupt has occurred or not.
1470:./FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
1471:./FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_IT: specifies the CAN interrupt source to check.
1472:./FWLIB/src/stm32f4xx_can.c ****   *          This parameter can be one of the following values:
1473:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_TME: Transmit mailbox empty Interrupt 
1474:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FMP0: FIFO 0 message pending Interrupt 
1475:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FF0: FIFO 0 full Interrupt
1476:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FOV0: FIFO 0 overrun Interrupt
1477:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FMP1: FIFO 1 message pending Interrupt 
1478:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FF1: FIFO 1 full Interrupt
1479:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FOV1: FIFO 1 overrun Interrupt
1480:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_WKU: Wake-up Interrupt
1481:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_SLK: Sleep acknowledge Interrupt  
1482:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_EWG: Error warning Interrupt
1483:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_EPV: Error passive Interrupt
1484:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_BOF: Bus-off Interrupt  
1485:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_LEC: Last error code Interrupt
1486:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_ERR: Error Interrupt
1487:./FWLIB/src/stm32f4xx_can.c ****   * @retval The current state of CAN_IT (SET or RESET).
1488:./FWLIB/src/stm32f4xx_can.c ****   */
1489:./FWLIB/src/stm32f4xx_can.c **** ITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT)
1490:./FWLIB/src/stm32f4xx_can.c **** {
1491:./FWLIB/src/stm32f4xx_can.c ****   ITStatus itstatus = RESET;
1492:./FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
1493:./FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1494:./FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_IT(CAN_IT));
1495:./FWLIB/src/stm32f4xx_can.c ****   
1496:./FWLIB/src/stm32f4xx_can.c ****   /* check the interrupt enable bit */
1497:./FWLIB/src/stm32f4xx_can.c ****  if((CANx->IER & CAN_IT) != RESET)
1498:./FWLIB/src/stm32f4xx_can.c ****  {
1499:./FWLIB/src/stm32f4xx_can.c ****    /* in case the Interrupt is enabled, .... */
1500:./FWLIB/src/stm32f4xx_can.c ****     switch (CAN_IT)
1501:./FWLIB/src/stm32f4xx_can.c ****     {
1502:./FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_TME:
1503:./FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_TSR_RQCPx bits */
1504:./FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
1505:./FWLIB/src/stm32f4xx_can.c ****         break;
1506:./FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FMP0:
1507:./FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_RF0R_FMP0 bit */
1508:./FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
1509:./FWLIB/src/stm32f4xx_can.c ****         break;
1510:./FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FF0:
1511:./FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_RF0R_FULL0 bit */
1512:./FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
1513:./FWLIB/src/stm32f4xx_can.c ****         break;
1514:./FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FOV0:
ARM GAS  /tmp/ccmLA7br.s 			page 28


1515:./FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_RF0R_FOVR0 bit */
1516:./FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
1517:./FWLIB/src/stm32f4xx_can.c ****         break;
1518:./FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FMP1:
1519:./FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_RF1R_FMP1 bit */
1520:./FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
1521:./FWLIB/src/stm32f4xx_can.c ****         break;
1522:./FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FF1:
1523:./FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_RF1R_FULL1 bit */
1524:./FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
1525:./FWLIB/src/stm32f4xx_can.c ****         break;
1526:./FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FOV1:
1527:./FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_RF1R_FOVR1 bit */
1528:./FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
1529:./FWLIB/src/stm32f4xx_can.c ****         break;
1530:./FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_WKU:
1531:./FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_MSR_WKUI bit */
1532:./FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
1533:./FWLIB/src/stm32f4xx_can.c ****         break;
1534:./FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_SLK:
1535:./FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_MSR_SLAKI bit */
1536:./FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
1537:./FWLIB/src/stm32f4xx_can.c ****         break;
1538:./FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_EWG:
1539:./FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_ESR_EWGF bit */
1540:./FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
1541:./FWLIB/src/stm32f4xx_can.c ****         break;
1542:./FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_EPV:
1543:./FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_ESR_EPVF bit */
1544:./FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
1545:./FWLIB/src/stm32f4xx_can.c ****         break;
1546:./FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_BOF:
1547:./FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_ESR_BOFF bit */
1548:./FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
1549:./FWLIB/src/stm32f4xx_can.c ****         break;
1550:./FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_LEC:
1551:./FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_ESR_LEC bit */
1552:./FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
1553:./FWLIB/src/stm32f4xx_can.c ****         break;
1554:./FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_ERR:
1555:./FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_MSR_ERRI bit */ 
1556:./FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
1557:./FWLIB/src/stm32f4xx_can.c ****         break;
1558:./FWLIB/src/stm32f4xx_can.c ****       default:
1559:./FWLIB/src/stm32f4xx_can.c ****         /* in case of error, return RESET */
1560:./FWLIB/src/stm32f4xx_can.c ****         itstatus = RESET;
1561:./FWLIB/src/stm32f4xx_can.c ****         break;
1562:./FWLIB/src/stm32f4xx_can.c ****     }
1563:./FWLIB/src/stm32f4xx_can.c ****   }
1564:./FWLIB/src/stm32f4xx_can.c ****   else
1565:./FWLIB/src/stm32f4xx_can.c ****   {
1566:./FWLIB/src/stm32f4xx_can.c ****    /* in case the Interrupt is not enabled, return RESET */
1567:./FWLIB/src/stm32f4xx_can.c ****     itstatus  = RESET;
1568:./FWLIB/src/stm32f4xx_can.c ****   }
1569:./FWLIB/src/stm32f4xx_can.c ****   
1570:./FWLIB/src/stm32f4xx_can.c ****   /* Return the CAN_IT status */
1571:./FWLIB/src/stm32f4xx_can.c ****   return  itstatus;
ARM GAS  /tmp/ccmLA7br.s 			page 29


1572:./FWLIB/src/stm32f4xx_can.c **** }
1573:./FWLIB/src/stm32f4xx_can.c **** 
1574:./FWLIB/src/stm32f4xx_can.c **** /**
1575:./FWLIB/src/stm32f4xx_can.c ****   * @brief  Clears the CANx's interrupt pending bits.
1576:./FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
1577:./FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_IT: specifies the interrupt pending bit to clear.
1578:./FWLIB/src/stm32f4xx_can.c ****   *          This parameter can be one of the following values:
1579:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_TME: Transmit mailbox empty Interrupt
1580:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FF0: FIFO 0 full Interrupt
1581:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FOV0: FIFO 0 overrun Interrupt
1582:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FF1: FIFO 1 full Interrupt
1583:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FOV1: FIFO 1 overrun Interrupt
1584:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_WKU: Wake-up Interrupt
1585:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_SLK: Sleep acknowledge Interrupt  
1586:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_EWG: Error warning Interrupt
1587:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_EPV: Error passive Interrupt
1588:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_BOF: Bus-off Interrupt  
1589:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_LEC: Last error code Interrupt
1590:./FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_ERR: Error Interrupt 
1591:./FWLIB/src/stm32f4xx_can.c ****   * @retval None
1592:./FWLIB/src/stm32f4xx_can.c ****   */
1593:./FWLIB/src/stm32f4xx_can.c **** void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
1594:./FWLIB/src/stm32f4xx_can.c **** {
1595:./FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
1596:./FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1597:./FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_CLEAR_IT(CAN_IT));
1598:./FWLIB/src/stm32f4xx_can.c **** 
1599:./FWLIB/src/stm32f4xx_can.c ****   switch (CAN_IT)
1600:./FWLIB/src/stm32f4xx_can.c ****   {
1601:./FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_TME:
1602:./FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_TSR_RQCPx (rc_w1)*/
1603:./FWLIB/src/stm32f4xx_can.c ****       CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
1604:./FWLIB/src/stm32f4xx_can.c ****       break;
1605:./FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_FF0:
1606:./FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_RF0R_FULL0 (rc_w1)*/
1607:./FWLIB/src/stm32f4xx_can.c ****       CANx->RF0R = CAN_RF0R_FULL0; 
1608:./FWLIB/src/stm32f4xx_can.c ****       break;
1609:./FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_FOV0:
1610:./FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_RF0R_FOVR0 (rc_w1)*/
1611:./FWLIB/src/stm32f4xx_can.c ****       CANx->RF0R = CAN_RF0R_FOVR0; 
1612:./FWLIB/src/stm32f4xx_can.c ****       break;
1613:./FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_FF1:
1614:./FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_RF1R_FULL1 (rc_w1)*/
1615:./FWLIB/src/stm32f4xx_can.c ****       CANx->RF1R = CAN_RF1R_FULL1;  
1616:./FWLIB/src/stm32f4xx_can.c ****       break;
1617:./FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_FOV1:
1618:./FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_RF1R_FOVR1 (rc_w1)*/
1619:./FWLIB/src/stm32f4xx_can.c ****       CANx->RF1R = CAN_RF1R_FOVR1; 
1620:./FWLIB/src/stm32f4xx_can.c ****       break;
1621:./FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_WKU:
1622:./FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_WKUI (rc_w1)*/
1623:./FWLIB/src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_WKUI;  
1624:./FWLIB/src/stm32f4xx_can.c ****       break;
1625:./FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_SLK:
1626:./FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_SLAKI (rc_w1)*/ 
1627:./FWLIB/src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_SLAKI;   
1628:./FWLIB/src/stm32f4xx_can.c ****       break;
ARM GAS  /tmp/ccmLA7br.s 			page 30


1629:./FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_EWG:
1630:./FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
1631:./FWLIB/src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_ERRI;
1632:./FWLIB/src/stm32f4xx_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/ 
1633:./FWLIB/src/stm32f4xx_can.c ****       break;
1634:./FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_EPV:
1635:./FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
1636:./FWLIB/src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_ERRI; 
1637:./FWLIB/src/stm32f4xx_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
1638:./FWLIB/src/stm32f4xx_can.c ****       break;
1639:./FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_BOF:
1640:./FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */ 
1641:./FWLIB/src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_ERRI; 
1642:./FWLIB/src/stm32f4xx_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
1643:./FWLIB/src/stm32f4xx_can.c ****        break;
1644:./FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_LEC:
1645:./FWLIB/src/stm32f4xx_can.c ****       /*  Clear LEC bits */
1646:./FWLIB/src/stm32f4xx_can.c ****       CANx->ESR = RESET; 
1647:./FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
1648:./FWLIB/src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_ERRI; 
1649:./FWLIB/src/stm32f4xx_can.c ****       break;
1650:./FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_ERR:
1651:./FWLIB/src/stm32f4xx_can.c ****       /*Clear LEC bits */
1652:./FWLIB/src/stm32f4xx_can.c ****       CANx->ESR = RESET; 
1653:./FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
1654:./FWLIB/src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_ERRI; 
1655:./FWLIB/src/stm32f4xx_can.c ****        /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
1656:./FWLIB/src/stm32f4xx_can.c ****        break;
1657:./FWLIB/src/stm32f4xx_can.c ****     default:
1658:./FWLIB/src/stm32f4xx_can.c ****        break;
1659:./FWLIB/src/stm32f4xx_can.c ****    }
1660:./FWLIB/src/stm32f4xx_can.c **** }
1661:./FWLIB/src/stm32f4xx_can.c ****  /**
1662:./FWLIB/src/stm32f4xx_can.c ****   * @}
1663:./FWLIB/src/stm32f4xx_can.c ****   */
1664:./FWLIB/src/stm32f4xx_can.c **** 
1665:./FWLIB/src/stm32f4xx_can.c **** /**
1666:./FWLIB/src/stm32f4xx_can.c ****   * @brief  Checks whether the CAN interrupt has occurred or not.
1667:./FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_Reg: specifies the CAN interrupt register to check.
1668:./FWLIB/src/stm32f4xx_can.c ****   * @param  It_Bit: specifies the interrupt source bit to check.
1669:./FWLIB/src/stm32f4xx_can.c ****   * @retval The new state of the CAN Interrupt (SET or RESET).
1670:./FWLIB/src/stm32f4xx_can.c ****   */
1671:./FWLIB/src/stm32f4xx_can.c **** static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
1672:./FWLIB/src/stm32f4xx_can.c **** {
  27              		.loc 1 1672 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
1673:./FWLIB/src/stm32f4xx_can.c ****   ITStatus pendingbitstatus = RESET;
1674:./FWLIB/src/stm32f4xx_can.c ****   
1675:./FWLIB/src/stm32f4xx_can.c ****   if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
  33              		.loc 1 1675 0
  34 0000 0842     		tst	r0, r1
  35 0002 01D1     		bne	.L4
1676:./FWLIB/src/stm32f4xx_can.c ****   {
ARM GAS  /tmp/ccmLA7br.s 			page 31


1677:./FWLIB/src/stm32f4xx_can.c ****     /* CAN_IT is set */
1678:./FWLIB/src/stm32f4xx_can.c ****     pendingbitstatus = SET;
1679:./FWLIB/src/stm32f4xx_can.c ****   }
1680:./FWLIB/src/stm32f4xx_can.c ****   else
1681:./FWLIB/src/stm32f4xx_can.c ****   {
1682:./FWLIB/src/stm32f4xx_can.c ****     /* CAN_IT is reset */
1683:./FWLIB/src/stm32f4xx_can.c ****     pendingbitstatus = RESET;
  36              		.loc 1 1683 0
  37 0004 0020     		movs	r0, #0
  38              	.LVL1:
1684:./FWLIB/src/stm32f4xx_can.c ****   }
1685:./FWLIB/src/stm32f4xx_can.c ****   return pendingbitstatus;
1686:./FWLIB/src/stm32f4xx_can.c **** }
  39              		.loc 1 1686 0
  40 0006 7047     		bx	lr
  41              	.LVL2:
  42              	.L4:
1678:./FWLIB/src/stm32f4xx_can.c ****   }
  43              		.loc 1 1678 0
  44 0008 0120     		movs	r0, #1
  45              	.LVL3:
  46 000a 7047     		bx	lr
  47              		.cfi_endproc
  48              	.LFE136:
  50              		.section	.text.CAN_DeInit,"ax",%progbits
  51              		.align	1
  52              		.global	CAN_DeInit
  53              		.syntax unified
  54              		.thumb
  55              		.thumb_func
  56              		.fpu fpv4-sp-d16
  58              	CAN_DeInit:
  59              	.LFB112:
 167:./FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
  60              		.loc 1 167 0
  61              		.cfi_startproc
  62              		@ args = 0, pretend = 0, frame = 0
  63              		@ frame_needed = 0, uses_anonymous_args = 0
  64              	.LVL4:
  65 0000 08B5     		push	{r3, lr}
  66              	.LCFI0:
  67              		.cfi_def_cfa_offset 8
  68              		.cfi_offset 3, -8
  69              		.cfi_offset 14, -4
 171:./FWLIB/src/stm32f4xx_can.c ****   {
  70              		.loc 1 171 0
  71 0002 0C4B     		ldr	r3, .L10
  72 0004 9842     		cmp	r0, r3
  73 0006 0AD0     		beq	.L9
 181:./FWLIB/src/stm32f4xx_can.c ****     /* Release CAN2 from reset state */
  74              		.loc 1 181 0
  75 0008 0121     		movs	r1, #1
  76 000a 4FF08060 		mov	r0, #67108864
  77              	.LVL5:
  78 000e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  79              	.LVL6:
 183:./FWLIB/src/stm32f4xx_can.c ****   }
ARM GAS  /tmp/ccmLA7br.s 			page 32


  80              		.loc 1 183 0
  81 0012 0021     		movs	r1, #0
  82 0014 4FF08060 		mov	r0, #67108864
  83 0018 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  84              	.LVL7:
  85              	.L5:
 185:./FWLIB/src/stm32f4xx_can.c **** 
  86              		.loc 1 185 0
  87 001c 08BD     		pop	{r3, pc}
  88              	.LVL8:
  89              	.L9:
 174:./FWLIB/src/stm32f4xx_can.c ****     /* Release CAN1 from reset state */
  90              		.loc 1 174 0
  91 001e 0121     		movs	r1, #1
  92 0020 4FF00070 		mov	r0, #33554432
  93              	.LVL9:
  94 0024 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  95              	.LVL10:
 176:./FWLIB/src/stm32f4xx_can.c ****   }
  96              		.loc 1 176 0
  97 0028 0021     		movs	r1, #0
  98 002a 4FF00070 		mov	r0, #33554432
  99 002e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 100              	.LVL11:
 101 0032 F3E7     		b	.L5
 102              	.L11:
 103              		.align	2
 104              	.L10:
 105 0034 00640040 		.word	1073767424
 106              		.cfi_endproc
 107              	.LFE112:
 109              		.section	.text.CAN_Init,"ax",%progbits
 110              		.align	1
 111              		.global	CAN_Init
 112              		.syntax unified
 113              		.thumb
 114              		.thumb_func
 115              		.fpu fpv4-sp-d16
 117              	CAN_Init:
 118              	.LFB113:
 197:./FWLIB/src/stm32f4xx_can.c ****   uint8_t InitStatus = CAN_InitStatus_Failed;
 119              		.loc 1 197 0
 120              		.cfi_startproc
 121              		@ args = 0, pretend = 0, frame = 0
 122              		@ frame_needed = 0, uses_anonymous_args = 0
 123              		@ link register save eliminated.
 124              	.LVL12:
 215:./FWLIB/src/stm32f4xx_can.c **** 
 125              		.loc 1 215 0
 126 0000 0368     		ldr	r3, [r0]
 127 0002 23F00203 		bic	r3, r3, #2
 128 0006 0360     		str	r3, [r0]
 218:./FWLIB/src/stm32f4xx_can.c **** 
 129              		.loc 1 218 0
 130 0008 0368     		ldr	r3, [r0]
 131 000a 43F00103 		orr	r3, r3, #1
 132 000e 0360     		str	r3, [r0]
ARM GAS  /tmp/ccmLA7br.s 			page 33


 199:./FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 133              		.loc 1 199 0
 134 0010 0023     		movs	r3, #0
 135              	.LVL13:
 136              	.L13:
 221:./FWLIB/src/stm32f4xx_can.c ****   {
 137              		.loc 1 221 0
 138 0012 4268     		ldr	r2, [r0, #4]
 139 0014 12F0010F 		tst	r2, #1
 140 0018 05D1     		bne	.L14
 221:./FWLIB/src/stm32f4xx_can.c ****   {
 141              		.loc 1 221 0 is_stmt 0 discriminator 1
 142 001a 4FF6FF72 		movw	r2, #65535
 143 001e 9342     		cmp	r3, r2
 144 0020 01D0     		beq	.L14
 223:./FWLIB/src/stm32f4xx_can.c ****   }
 145              		.loc 1 223 0 is_stmt 1
 146 0022 0133     		adds	r3, r3, #1
 147              	.LVL14:
 148 0024 F5E7     		b	.L13
 149              	.L14:
 227:./FWLIB/src/stm32f4xx_can.c ****   {
 150              		.loc 1 227 0
 151 0026 4368     		ldr	r3, [r0, #4]
 152              	.LVL15:
 153 0028 13F0010F 		tst	r3, #1
 154 002c 6DD0     		beq	.L32
 234:./FWLIB/src/stm32f4xx_can.c ****     {
 155              		.loc 1 234 0
 156 002e 8B79     		ldrb	r3, [r1, #6]	@ zero_extendqisi2
 157 0030 012B     		cmp	r3, #1
 158 0032 3BD0     		beq	.L34
 240:./FWLIB/src/stm32f4xx_can.c ****     }
 159              		.loc 1 240 0
 160 0034 0368     		ldr	r3, [r0]
 161 0036 23F08003 		bic	r3, r3, #128
 162 003a 0360     		str	r3, [r0]
 163              	.L18:
 244:./FWLIB/src/stm32f4xx_can.c ****     {
 164              		.loc 1 244 0
 165 003c CB79     		ldrb	r3, [r1, #7]	@ zero_extendqisi2
 166 003e 012B     		cmp	r3, #1
 167 0040 39D0     		beq	.L35
 250:./FWLIB/src/stm32f4xx_can.c ****     }
 168              		.loc 1 250 0
 169 0042 0368     		ldr	r3, [r0]
 170 0044 23F04003 		bic	r3, r3, #64
 171 0048 0360     		str	r3, [r0]
 172              	.L20:
 254:./FWLIB/src/stm32f4xx_can.c ****     {
 173              		.loc 1 254 0
 174 004a 0B7A     		ldrb	r3, [r1, #8]	@ zero_extendqisi2
 175 004c 012B     		cmp	r3, #1
 176 004e 37D0     		beq	.L36
 260:./FWLIB/src/stm32f4xx_can.c ****     }
 177              		.loc 1 260 0
 178 0050 0368     		ldr	r3, [r0]
ARM GAS  /tmp/ccmLA7br.s 			page 34


 179 0052 23F02003 		bic	r3, r3, #32
 180 0056 0360     		str	r3, [r0]
 181              	.L22:
 264:./FWLIB/src/stm32f4xx_can.c ****     {
 182              		.loc 1 264 0
 183 0058 4B7A     		ldrb	r3, [r1, #9]	@ zero_extendqisi2
 184 005a 012B     		cmp	r3, #1
 185 005c 35D0     		beq	.L37
 270:./FWLIB/src/stm32f4xx_can.c ****     }
 186              		.loc 1 270 0
 187 005e 0368     		ldr	r3, [r0]
 188 0060 23F01003 		bic	r3, r3, #16
 189 0064 0360     		str	r3, [r0]
 190              	.L24:
 274:./FWLIB/src/stm32f4xx_can.c ****     {
 191              		.loc 1 274 0
 192 0066 8B7A     		ldrb	r3, [r1, #10]	@ zero_extendqisi2
 193 0068 012B     		cmp	r3, #1
 194 006a 33D0     		beq	.L38
 280:./FWLIB/src/stm32f4xx_can.c ****     }
 195              		.loc 1 280 0
 196 006c 0368     		ldr	r3, [r0]
 197 006e 23F00803 		bic	r3, r3, #8
 198 0072 0360     		str	r3, [r0]
 199              	.L26:
 284:./FWLIB/src/stm32f4xx_can.c ****     {
 200              		.loc 1 284 0
 201 0074 CB7A     		ldrb	r3, [r1, #11]	@ zero_extendqisi2
 202 0076 012B     		cmp	r3, #1
 203 0078 31D0     		beq	.L39
 290:./FWLIB/src/stm32f4xx_can.c ****     }
 204              		.loc 1 290 0
 205 007a 0368     		ldr	r3, [r0]
 206 007c 23F00403 		bic	r3, r3, #4
 207 0080 0360     		str	r3, [r0]
 208              	.L28:
 294:./FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 209              		.loc 1 294 0
 210 0082 8A78     		ldrb	r2, [r1, #2]	@ zero_extendqisi2
 295:./FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 211              		.loc 1 295 0
 212 0084 CB78     		ldrb	r3, [r1, #3]	@ zero_extendqisi2
 213 0086 1B06     		lsls	r3, r3, #24
 294:./FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 214              		.loc 1 294 0
 215 0088 43EA8273 		orr	r3, r3, r2, lsl #30
 296:./FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 216              		.loc 1 296 0
 217 008c 0A79     		ldrb	r2, [r1, #4]	@ zero_extendqisi2
 295:./FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 218              		.loc 1 295 0
 219 008e 43EA0243 		orr	r3, r3, r2, lsl #16
 297:./FWLIB/src/stm32f4xx_can.c ****                ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 220              		.loc 1 297 0
 221 0092 4A79     		ldrb	r2, [r1, #5]	@ zero_extendqisi2
 296:./FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 222              		.loc 1 296 0
ARM GAS  /tmp/ccmLA7br.s 			page 35


 223 0094 43EA0253 		orr	r3, r3, r2, lsl #20
 298:./FWLIB/src/stm32f4xx_can.c **** 
 224              		.loc 1 298 0
 225 0098 0A88     		ldrh	r2, [r1]
 226 009a 013A     		subs	r2, r2, #1
 297:./FWLIB/src/stm32f4xx_can.c ****                ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 227              		.loc 1 297 0
 228 009c 1343     		orrs	r3, r3, r2
 294:./FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 229              		.loc 1 294 0
 230 009e C361     		str	r3, [r0, #28]
 301:./FWLIB/src/stm32f4xx_can.c **** 
 231              		.loc 1 301 0
 232 00a0 0368     		ldr	r3, [r0]
 233 00a2 23F00103 		bic	r3, r3, #1
 234 00a6 0360     		str	r3, [r0]
 235              	.LVL16:
 304:./FWLIB/src/stm32f4xx_can.c **** 
 236              		.loc 1 304 0
 237 00a8 0023     		movs	r3, #0
 306:./FWLIB/src/stm32f4xx_can.c ****    {
 238              		.loc 1 306 0
 239 00aa 1EE0     		b	.L29
 240              	.LVL17:
 241              	.L34:
 236:./FWLIB/src/stm32f4xx_can.c ****     }
 242              		.loc 1 236 0
 243 00ac 0368     		ldr	r3, [r0]
 244 00ae 43F08003 		orr	r3, r3, #128
 245 00b2 0360     		str	r3, [r0]
 246 00b4 C2E7     		b	.L18
 247              	.L35:
 246:./FWLIB/src/stm32f4xx_can.c ****     }
 248              		.loc 1 246 0
 249 00b6 0368     		ldr	r3, [r0]
 250 00b8 43F04003 		orr	r3, r3, #64
 251 00bc 0360     		str	r3, [r0]
 252 00be C4E7     		b	.L20
 253              	.L36:
 256:./FWLIB/src/stm32f4xx_can.c ****     }
 254              		.loc 1 256 0
 255 00c0 0368     		ldr	r3, [r0]
 256 00c2 43F02003 		orr	r3, r3, #32
 257 00c6 0360     		str	r3, [r0]
 258 00c8 C6E7     		b	.L22
 259              	.L37:
 266:./FWLIB/src/stm32f4xx_can.c ****     }
 260              		.loc 1 266 0
 261 00ca 0368     		ldr	r3, [r0]
 262 00cc 43F01003 		orr	r3, r3, #16
 263 00d0 0360     		str	r3, [r0]
 264 00d2 C8E7     		b	.L24
 265              	.L38:
 276:./FWLIB/src/stm32f4xx_can.c ****     }
 266              		.loc 1 276 0
 267 00d4 0368     		ldr	r3, [r0]
 268 00d6 43F00803 		orr	r3, r3, #8
ARM GAS  /tmp/ccmLA7br.s 			page 36


 269 00da 0360     		str	r3, [r0]
 270 00dc CAE7     		b	.L26
 271              	.L39:
 286:./FWLIB/src/stm32f4xx_can.c ****     }
 272              		.loc 1 286 0
 273 00de 0368     		ldr	r3, [r0]
 274 00e0 43F00403 		orr	r3, r3, #4
 275 00e4 0360     		str	r3, [r0]
 276 00e6 CCE7     		b	.L28
 277              	.LVL18:
 278              	.L31:
 308:./FWLIB/src/stm32f4xx_can.c ****    }
 279              		.loc 1 308 0
 280 00e8 0133     		adds	r3, r3, #1
 281              	.LVL19:
 282              	.L29:
 306:./FWLIB/src/stm32f4xx_can.c ****    {
 283              		.loc 1 306 0
 284 00ea 4268     		ldr	r2, [r0, #4]
 285 00ec 12F0010F 		tst	r2, #1
 286 00f0 03D0     		beq	.L30
 306:./FWLIB/src/stm32f4xx_can.c ****    {
 287              		.loc 1 306 0 is_stmt 0 discriminator 1
 288 00f2 4FF6FF72 		movw	r2, #65535
 289 00f6 9342     		cmp	r3, r2
 290 00f8 F6D1     		bne	.L31
 291              	.L30:
 312:./FWLIB/src/stm32f4xx_can.c ****     {
 292              		.loc 1 312 0 is_stmt 1
 293 00fa 4368     		ldr	r3, [r0, #4]
 294              	.LVL20:
 295 00fc 13F0010F 		tst	r3, #1
 296 0100 01D1     		bne	.L40
 318:./FWLIB/src/stm32f4xx_can.c ****     }
 297              		.loc 1 318 0
 298 0102 0120     		movs	r0, #1
 299              	.LVL21:
 324:./FWLIB/src/stm32f4xx_can.c **** 
 300              		.loc 1 324 0
 301 0104 7047     		bx	lr
 302              	.LVL22:
 303              	.L40:
 314:./FWLIB/src/stm32f4xx_can.c ****     }
 304              		.loc 1 314 0
 305 0106 0020     		movs	r0, #0
 306              	.LVL23:
 307 0108 7047     		bx	lr
 308              	.LVL24:
 309              	.L32:
 229:./FWLIB/src/stm32f4xx_can.c ****   }
 310              		.loc 1 229 0
 311 010a 0020     		movs	r0, #0
 312              	.LVL25:
 313 010c 7047     		bx	lr
 314              		.cfi_endproc
 315              	.LFE113:
 317              		.section	.text.CAN_FilterInit,"ax",%progbits
ARM GAS  /tmp/ccmLA7br.s 			page 37


 318              		.align	1
 319              		.global	CAN_FilterInit
 320              		.syntax unified
 321              		.thumb
 322              		.thumb_func
 323              		.fpu fpv4-sp-d16
 325              	CAN_FilterInit:
 326              	.LFB114:
 334:./FWLIB/src/stm32f4xx_can.c ****   uint32_t filter_number_bit_pos = 0;
 327              		.loc 1 334 0
 328              		.cfi_startproc
 329              		@ args = 0, pretend = 0, frame = 0
 330              		@ frame_needed = 0, uses_anonymous_args = 0
 331              		@ link register save eliminated.
 332              	.LVL26:
 333 0000 70B4     		push	{r4, r5, r6}
 334              	.LCFI1:
 335              		.cfi_def_cfa_offset 12
 336              		.cfi_offset 4, -12
 337              		.cfi_offset 5, -8
 338              		.cfi_offset 6, -4
 339              	.LVL27:
 343:./FWLIB/src/stm32f4xx_can.c **** 
 340              		.loc 1 343 0
 341 0002 837A     		ldrb	r3, [r0, #10]	@ zero_extendqisi2
 342 0004 0122     		movs	r2, #1
 343 0006 02FA03F3 		lsl	r3, r2, r3
 344              	.LVL28:
 346:./FWLIB/src/stm32f4xx_can.c **** 
 345              		.loc 1 346 0
 346 000a 3B4A     		ldr	r2, .L53
 347 000c D2F80012 		ldr	r1, [r2, #512]
 348 0010 41F00101 		orr	r1, r1, #1
 349 0014 C2F80012 		str	r1, [r2, #512]
 349:./FWLIB/src/stm32f4xx_can.c **** 
 350              		.loc 1 349 0
 351 0018 D2F81C42 		ldr	r4, [r2, #540]
 352 001c D943     		mvns	r1, r3
 353 001e 0C40     		ands	r4, r4, r1
 354 0020 C2F81C42 		str	r4, [r2, #540]
 352:./FWLIB/src/stm32f4xx_can.c ****   {
 355              		.loc 1 352 0
 356 0024 027B     		ldrb	r2, [r0, #12]	@ zero_extendqisi2
 357 0026 B2B9     		cbnz	r2, .L42
 355:./FWLIB/src/stm32f4xx_can.c **** 
 358              		.loc 1 355 0
 359 0028 334A     		ldr	r2, .L53
 360 002a D2F80C42 		ldr	r4, [r2, #524]
 361 002e 0C40     		ands	r4, r4, r1
 362 0030 C2F80C42 		str	r4, [r2, #524]
 360:./FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 363              		.loc 1 360 0
 364 0034 C688     		ldrh	r6, [r0, #6]
 361:./FWLIB/src/stm32f4xx_can.c **** 
 365              		.loc 1 361 0
 366 0036 4588     		ldrh	r5, [r0, #2]
 359:./FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
ARM GAS  /tmp/ccmLA7br.s 			page 38


 367              		.loc 1 359 0
 368 0038 847A     		ldrb	r4, [r0, #10]	@ zero_extendqisi2
 360:./FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 369              		.loc 1 360 0
 370 003a 45EA0645 		orr	r5, r5, r6, lsl #16
 359:./FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 371              		.loc 1 359 0
 372 003e 4834     		adds	r4, r4, #72
 373 0040 42F83450 		str	r5, [r2, r4, lsl #3]
 366:./FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 374              		.loc 1 366 0
 375 0044 8688     		ldrh	r6, [r0, #4]
 367:./FWLIB/src/stm32f4xx_can.c ****   }
 376              		.loc 1 367 0
 377 0046 0488     		ldrh	r4, [r0]
 365:./FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 378              		.loc 1 365 0
 379 0048 857A     		ldrb	r5, [r0, #10]	@ zero_extendqisi2
 366:./FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 380              		.loc 1 366 0
 381 004a 44EA0644 		orr	r4, r4, r6, lsl #16
 365:./FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 382              		.loc 1 365 0
 383 004e 4835     		adds	r5, r5, #72
 384 0050 02EBC502 		add	r2, r2, r5, lsl #3
 385 0054 5460     		str	r4, [r2, #4]
 386              	.L42:
 370:./FWLIB/src/stm32f4xx_can.c ****   {
 387              		.loc 1 370 0
 388 0056 027B     		ldrb	r2, [r0, #12]	@ zero_extendqisi2
 389 0058 012A     		cmp	r2, #1
 390 005a 1FD0     		beq	.L50
 391              	.L43:
 385:./FWLIB/src/stm32f4xx_can.c ****   {
 392              		.loc 1 385 0
 393 005c C27A     		ldrb	r2, [r0, #11]	@ zero_extendqisi2
 394 005e 002A     		cmp	r2, #0
 395 0060 34D1     		bne	.L44
 388:./FWLIB/src/stm32f4xx_can.c ****   }
 396              		.loc 1 388 0
 397 0062 254C     		ldr	r4, .L53
 398 0064 D4F80422 		ldr	r2, [r4, #516]
 399 0068 0A40     		ands	r2, r2, r1
 400 006a C4F80422 		str	r2, [r4, #516]
 401              	.L45:
 397:./FWLIB/src/stm32f4xx_can.c ****   {
 402              		.loc 1 397 0
 403 006e 0289     		ldrh	r2, [r0, #8]
 404 0070 2AB9     		cbnz	r2, .L46
 400:./FWLIB/src/stm32f4xx_can.c ****   }
 405              		.loc 1 400 0
 406 0072 214A     		ldr	r2, .L53
 407 0074 D2F81442 		ldr	r4, [r2, #532]
 408 0078 2140     		ands	r1, r1, r4
 409 007a C2F81412 		str	r1, [r2, #532]
 410              	.L46:
 403:./FWLIB/src/stm32f4xx_can.c ****   {
ARM GAS  /tmp/ccmLA7br.s 			page 39


 411              		.loc 1 403 0
 412 007e 0289     		ldrh	r2, [r0, #8]
 413 0080 012A     		cmp	r2, #1
 414 0082 2AD0     		beq	.L51
 415              	.L47:
 410:./FWLIB/src/stm32f4xx_can.c ****   {
 416              		.loc 1 410 0
 417 0084 427B     		ldrb	r2, [r0, #13]	@ zero_extendqisi2
 418 0086 012A     		cmp	r2, #1
 419 0088 2ED0     		beq	.L52
 420              	.LVL29:
 421              	.L48:
 416:./FWLIB/src/stm32f4xx_can.c **** }
 422              		.loc 1 416 0
 423 008a 1B4A     		ldr	r2, .L53
 424 008c D2F80032 		ldr	r3, [r2, #512]
 425 0090 23F00103 		bic	r3, r3, #1
 426 0094 C2F80032 		str	r3, [r2, #512]
 417:./FWLIB/src/stm32f4xx_can.c **** 
 427              		.loc 1 417 0
 428 0098 70BC     		pop	{r4, r5, r6}
 429              	.LCFI2:
 430              		.cfi_remember_state
 431              		.cfi_restore 6
 432              		.cfi_restore 5
 433              		.cfi_restore 4
 434              		.cfi_def_cfa_offset 0
 435 009a 7047     		bx	lr
 436              	.LVL30:
 437              	.L50:
 438              	.LCFI3:
 439              		.cfi_restore_state
 373:./FWLIB/src/stm32f4xx_can.c ****     /* 32-bit identifier or First 32-bit identifier */
 440              		.loc 1 373 0
 441 009c 164A     		ldr	r2, .L53
 442 009e D2F80C42 		ldr	r4, [r2, #524]
 443 00a2 1C43     		orrs	r4, r4, r3
 444 00a4 C2F80C42 		str	r4, [r2, #524]
 376:./FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 445              		.loc 1 376 0
 446 00a8 0688     		ldrh	r6, [r0]
 377:./FWLIB/src/stm32f4xx_can.c ****     /* 32-bit mask or Second 32-bit identifier */
 447              		.loc 1 377 0
 448 00aa 4588     		ldrh	r5, [r0, #2]
 375:./FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 449              		.loc 1 375 0
 450 00ac 847A     		ldrb	r4, [r0, #10]	@ zero_extendqisi2
 376:./FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 451              		.loc 1 376 0
 452 00ae 45EA0645 		orr	r5, r5, r6, lsl #16
 375:./FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 453              		.loc 1 375 0
 454 00b2 4834     		adds	r4, r4, #72
 455 00b4 42F83450 		str	r5, [r2, r4, lsl #3]
 380:./FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 456              		.loc 1 380 0
 457 00b8 8688     		ldrh	r6, [r0, #4]
ARM GAS  /tmp/ccmLA7br.s 			page 40


 381:./FWLIB/src/stm32f4xx_can.c ****   }
 458              		.loc 1 381 0
 459 00ba C488     		ldrh	r4, [r0, #6]
 379:./FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 460              		.loc 1 379 0
 461 00bc 857A     		ldrb	r5, [r0, #10]	@ zero_extendqisi2
 380:./FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 462              		.loc 1 380 0
 463 00be 44EA0644 		orr	r4, r4, r6, lsl #16
 379:./FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 464              		.loc 1 379 0
 465 00c2 4835     		adds	r5, r5, #72
 466 00c4 02EBC502 		add	r2, r2, r5, lsl #3
 467 00c8 5460     		str	r4, [r2, #4]
 468 00ca C7E7     		b	.L43
 469              	.L44:
 393:./FWLIB/src/stm32f4xx_can.c ****   }
 470              		.loc 1 393 0
 471 00cc 0A4C     		ldr	r4, .L53
 472 00ce D4F80422 		ldr	r2, [r4, #516]
 473 00d2 1A43     		orrs	r2, r2, r3
 474 00d4 C4F80422 		str	r2, [r4, #516]
 475 00d8 C9E7     		b	.L45
 476              	.L51:
 406:./FWLIB/src/stm32f4xx_can.c ****   }
 477              		.loc 1 406 0
 478 00da 0749     		ldr	r1, .L53
 479 00dc D1F81422 		ldr	r2, [r1, #532]
 480 00e0 1A43     		orrs	r2, r2, r3
 481 00e2 C1F81422 		str	r2, [r1, #532]
 482 00e6 CDE7     		b	.L47
 483              	.L52:
 412:./FWLIB/src/stm32f4xx_can.c ****   }
 484              		.loc 1 412 0
 485 00e8 0349     		ldr	r1, .L53
 486 00ea D1F81C22 		ldr	r2, [r1, #540]
 487 00ee 1343     		orrs	r3, r3, r2
 488              	.LVL31:
 489 00f0 C1F81C32 		str	r3, [r1, #540]
 490 00f4 C9E7     		b	.L48
 491              	.L54:
 492 00f6 00BF     		.align	2
 493              	.L53:
 494 00f8 00640040 		.word	1073767424
 495              		.cfi_endproc
 496              	.LFE114:
 498              		.section	.text.CAN_StructInit,"ax",%progbits
 499              		.align	1
 500              		.global	CAN_StructInit
 501              		.syntax unified
 502              		.thumb
 503              		.thumb_func
 504              		.fpu fpv4-sp-d16
 506              	CAN_StructInit:
 507              	.LFB115:
 425:./FWLIB/src/stm32f4xx_can.c ****   /* Reset CAN init structure parameters values */
 508              		.loc 1 425 0
ARM GAS  /tmp/ccmLA7br.s 			page 41


 509              		.cfi_startproc
 510              		@ args = 0, pretend = 0, frame = 0
 511              		@ frame_needed = 0, uses_anonymous_args = 0
 512              		@ link register save eliminated.
 513              	.LVL32:
 429:./FWLIB/src/stm32f4xx_can.c ****   
 514              		.loc 1 429 0
 515 0000 0023     		movs	r3, #0
 516 0002 8371     		strb	r3, [r0, #6]
 432:./FWLIB/src/stm32f4xx_can.c ****   
 517              		.loc 1 432 0
 518 0004 C371     		strb	r3, [r0, #7]
 435:./FWLIB/src/stm32f4xx_can.c ****   
 519              		.loc 1 435 0
 520 0006 0372     		strb	r3, [r0, #8]
 438:./FWLIB/src/stm32f4xx_can.c ****   
 521              		.loc 1 438 0
 522 0008 4372     		strb	r3, [r0, #9]
 441:./FWLIB/src/stm32f4xx_can.c ****   
 523              		.loc 1 441 0
 524 000a 8372     		strb	r3, [r0, #10]
 444:./FWLIB/src/stm32f4xx_can.c ****   
 525              		.loc 1 444 0
 526 000c C372     		strb	r3, [r0, #11]
 447:./FWLIB/src/stm32f4xx_can.c ****   
 527              		.loc 1 447 0
 528 000e 8370     		strb	r3, [r0, #2]
 450:./FWLIB/src/stm32f4xx_can.c ****   
 529              		.loc 1 450 0
 530 0010 C370     		strb	r3, [r0, #3]
 453:./FWLIB/src/stm32f4xx_can.c ****   
 531              		.loc 1 453 0
 532 0012 0323     		movs	r3, #3
 533 0014 0371     		strb	r3, [r0, #4]
 456:./FWLIB/src/stm32f4xx_can.c ****   
 534              		.loc 1 456 0
 535 0016 0223     		movs	r3, #2
 536 0018 4371     		strb	r3, [r0, #5]
 459:./FWLIB/src/stm32f4xx_can.c **** }
 537              		.loc 1 459 0
 538 001a 0123     		movs	r3, #1
 539 001c 0380     		strh	r3, [r0]	@ movhi
 460:./FWLIB/src/stm32f4xx_can.c **** 
 540              		.loc 1 460 0
 541 001e 7047     		bx	lr
 542              		.cfi_endproc
 543              	.LFE115:
 545              		.section	.text.CAN_SlaveStartBank,"ax",%progbits
 546              		.align	1
 547              		.global	CAN_SlaveStartBank
 548              		.syntax unified
 549              		.thumb
 550              		.thumb_func
 551              		.fpu fpv4-sp-d16
 553              	CAN_SlaveStartBank:
 554              	.LFB116:
 468:./FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
ARM GAS  /tmp/ccmLA7br.s 			page 42


 555              		.loc 1 468 0
 556              		.cfi_startproc
 557              		@ args = 0, pretend = 0, frame = 0
 558              		@ frame_needed = 0, uses_anonymous_args = 0
 559              		@ link register save eliminated.
 560              	.LVL33:
 473:./FWLIB/src/stm32f4xx_can.c ****   
 561              		.loc 1 473 0
 562 0000 0D4B     		ldr	r3, .L57
 563 0002 D3F80022 		ldr	r2, [r3, #512]
 564 0006 42F00102 		orr	r2, r2, #1
 565 000a C3F80022 		str	r2, [r3, #512]
 476:./FWLIB/src/stm32f4xx_can.c ****   CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 566              		.loc 1 476 0
 567 000e D3F80022 		ldr	r2, [r3, #512]
 568 0012 22F47C52 		bic	r2, r2, #16128
 569 0016 22F00E02 		bic	r2, r2, #14
 570 001a C3F80022 		str	r2, [r3, #512]
 477:./FWLIB/src/stm32f4xx_can.c ****   
 571              		.loc 1 477 0
 572 001e D3F80022 		ldr	r2, [r3, #512]
 573 0022 42EA0020 		orr	r0, r2, r0, lsl #8
 574              	.LVL34:
 575 0026 C3F80002 		str	r0, [r3, #512]
 480:./FWLIB/src/stm32f4xx_can.c **** }
 576              		.loc 1 480 0
 577 002a D3F80022 		ldr	r2, [r3, #512]
 578 002e 22F00102 		bic	r2, r2, #1
 579 0032 C3F80022 		str	r2, [r3, #512]
 481:./FWLIB/src/stm32f4xx_can.c **** 
 580              		.loc 1 481 0
 581 0036 7047     		bx	lr
 582              	.L58:
 583              		.align	2
 584              	.L57:
 585 0038 00640040 		.word	1073767424
 586              		.cfi_endproc
 587              	.LFE116:
 589              		.section	.text.CAN_DBGFreeze,"ax",%progbits
 590              		.align	1
 591              		.global	CAN_DBGFreeze
 592              		.syntax unified
 593              		.thumb
 594              		.thumb_func
 595              		.fpu fpv4-sp-d16
 597              	CAN_DBGFreeze:
 598              	.LFB117:
 493:./FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 599              		.loc 1 493 0
 600              		.cfi_startproc
 601              		@ args = 0, pretend = 0, frame = 0
 602              		@ frame_needed = 0, uses_anonymous_args = 0
 603              		@ link register save eliminated.
 604              	.LVL35:
 498:./FWLIB/src/stm32f4xx_can.c ****   {
 605              		.loc 1 498 0
 606 0000 21B9     		cbnz	r1, .L62
ARM GAS  /tmp/ccmLA7br.s 			page 43


 506:./FWLIB/src/stm32f4xx_can.c ****   }
 607              		.loc 1 506 0
 608 0002 0368     		ldr	r3, [r0]
 609 0004 23F48033 		bic	r3, r3, #65536
 610 0008 0360     		str	r3, [r0]
 508:./FWLIB/src/stm32f4xx_can.c **** 
 611              		.loc 1 508 0
 612 000a 7047     		bx	lr
 613              	.L62:
 501:./FWLIB/src/stm32f4xx_can.c ****   }
 614              		.loc 1 501 0
 615 000c 0368     		ldr	r3, [r0]
 616 000e 43F48033 		orr	r3, r3, #65536
 617 0012 0360     		str	r3, [r0]
 618 0014 7047     		bx	lr
 619              		.cfi_endproc
 620              	.LFE117:
 622              		.section	.text.CAN_TTComModeCmd,"ax",%progbits
 623              		.align	1
 624              		.global	CAN_TTComModeCmd
 625              		.syntax unified
 626              		.thumb
 627              		.thumb_func
 628              		.fpu fpv4-sp-d16
 630              	CAN_TTComModeCmd:
 631              	.LFB118:
 523:./FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 632              		.loc 1 523 0
 633              		.cfi_startproc
 634              		@ args = 0, pretend = 0, frame = 0
 635              		@ frame_needed = 0, uses_anonymous_args = 0
 636              		@ link register save eliminated.
 637              	.LVL36:
 527:./FWLIB/src/stm32f4xx_can.c ****   {
 638              		.loc 1 527 0
 639 0000 B1B9     		cbnz	r1, .L66
 540:./FWLIB/src/stm32f4xx_can.c **** 
 640              		.loc 1 540 0
 641 0002 0368     		ldr	r3, [r0]
 642 0004 23F08003 		bic	r3, r3, #128
 643 0008 0360     		str	r3, [r0]
 543:./FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
 644              		.loc 1 543 0
 645 000a D0F88431 		ldr	r3, [r0, #388]
 646 000e 23F48073 		bic	r3, r3, #256
 647 0012 C0F88431 		str	r3, [r0, #388]
 544:./FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
 648              		.loc 1 544 0
 649 0016 D0F89431 		ldr	r3, [r0, #404]
 650 001a 23F48073 		bic	r3, r3, #256
 651 001e C0F89431 		str	r3, [r0, #404]
 545:./FWLIB/src/stm32f4xx_can.c ****   }
 652              		.loc 1 545 0
 653 0022 D0F8A431 		ldr	r3, [r0, #420]
 654 0026 23F48073 		bic	r3, r3, #256
 655 002a C0F8A431 		str	r3, [r0, #420]
 547:./FWLIB/src/stm32f4xx_can.c **** /**
ARM GAS  /tmp/ccmLA7br.s 			page 44


 656              		.loc 1 547 0
 657 002e 7047     		bx	lr
 658              	.L66:
 530:./FWLIB/src/stm32f4xx_can.c **** 
 659              		.loc 1 530 0
 660 0030 0368     		ldr	r3, [r0]
 661 0032 43F08003 		orr	r3, r3, #128
 662 0036 0360     		str	r3, [r0]
 533:./FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
 663              		.loc 1 533 0
 664 0038 D0F88431 		ldr	r3, [r0, #388]
 665 003c 43F48073 		orr	r3, r3, #256
 666 0040 C0F88431 		str	r3, [r0, #388]
 534:./FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
 667              		.loc 1 534 0
 668 0044 D0F89431 		ldr	r3, [r0, #404]
 669 0048 43F48073 		orr	r3, r3, #256
 670 004c C0F89431 		str	r3, [r0, #404]
 535:./FWLIB/src/stm32f4xx_can.c ****   }
 671              		.loc 1 535 0
 672 0050 D0F8A431 		ldr	r3, [r0, #420]
 673 0054 43F48073 		orr	r3, r3, #256
 674 0058 C0F8A431 		str	r3, [r0, #420]
 675 005c 7047     		bx	lr
 676              		.cfi_endproc
 677              	.LFE118:
 679              		.section	.text.CAN_Transmit,"ax",%progbits
 680              		.align	1
 681              		.global	CAN_Transmit
 682              		.syntax unified
 683              		.thumb
 684              		.thumb_func
 685              		.fpu fpv4-sp-d16
 687              	CAN_Transmit:
 688              	.LFB119:
 577:./FWLIB/src/stm32f4xx_can.c ****   uint8_t transmit_mailbox = 0;
 689              		.loc 1 577 0
 690              		.cfi_startproc
 691              		@ args = 0, pretend = 0, frame = 0
 692              		@ frame_needed = 0, uses_anonymous_args = 0
 693              		@ link register save eliminated.
 694              	.LVL37:
 695 0000 0346     		mov	r3, r0
 696              	.LVL38:
 586:./FWLIB/src/stm32f4xx_can.c ****   {
 697              		.loc 1 586 0
 698 0002 8268     		ldr	r2, [r0, #8]
 699 0004 12F0806F 		tst	r2, #67108864
 700 0008 09D1     		bne	.L72
 590:./FWLIB/src/stm32f4xx_can.c ****   {
 701              		.loc 1 590 0
 702 000a 8268     		ldr	r2, [r0, #8]
 703 000c 12F0006F 		tst	r2, #134217728
 704 0010 4CD1     		bne	.L73
 594:./FWLIB/src/stm32f4xx_can.c ****   {
 705              		.loc 1 594 0
 706 0012 8268     		ldr	r2, [r0, #8]
ARM GAS  /tmp/ccmLA7br.s 			page 45


 707 0014 12F0805F 		tst	r2, #268435456
 708 0018 56D0     		beq	.L74
 596:./FWLIB/src/stm32f4xx_can.c ****   }
 709              		.loc 1 596 0
 710 001a 0220     		movs	r0, #2
 711              	.LVL39:
 712 001c 00E0     		b	.L68
 713              	.LVL40:
 714              	.L72:
 588:./FWLIB/src/stm32f4xx_can.c ****   }
 715              		.loc 1 588 0
 716 001e 0020     		movs	r0, #0
 717              	.LVL41:
 718              	.L68:
 577:./FWLIB/src/stm32f4xx_can.c ****   uint8_t transmit_mailbox = 0;
 719              		.loc 1 577 0
 720 0020 F0B4     		push	{r4, r5, r6, r7}
 721              	.LCFI4:
 722              		.cfi_def_cfa_offset 16
 723              		.cfi_offset 4, -16
 724              		.cfi_offset 5, -12
 725              		.cfi_offset 6, -8
 726              		.cfi_offset 7, -4
 606:./FWLIB/src/stm32f4xx_can.c ****     if (TxMessage->IDE == CAN_Id_Standard)
 727              		.loc 1 606 0
 728 0022 0546     		mov	r5, r0
 729 0024 00F11802 		add	r2, r0, #24
 730 0028 1201     		lsls	r2, r2, #4
 731 002a 9C58     		ldr	r4, [r3, r2]
 732 002c 04F00104 		and	r4, r4, #1
 733 0030 9C50     		str	r4, [r3, r2]
 607:./FWLIB/src/stm32f4xx_can.c ****     {
 734              		.loc 1 607 0
 735 0032 0A7A     		ldrb	r2, [r1, #8]	@ zero_extendqisi2
 736 0034 002A     		cmp	r2, #0
 737 0036 3BD1     		bne	.L70
 610:./FWLIB/src/stm32f4xx_can.c ****                                                   TxMessage->RTR);
 738              		.loc 1 610 0
 739 0038 00F11802 		add	r2, r0, #24
 740 003c 1201     		lsls	r2, r2, #4
 741 003e 9C58     		ldr	r4, [r3, r2]
 742 0040 0F68     		ldr	r7, [r1]
 611:./FWLIB/src/stm32f4xx_can.c ****     }
 743              		.loc 1 611 0
 744 0042 4E7A     		ldrb	r6, [r1, #9]	@ zero_extendqisi2
 610:./FWLIB/src/stm32f4xx_can.c ****                                                   TxMessage->RTR);
 745              		.loc 1 610 0
 746 0044 46EA4756 		orr	r6, r6, r7, lsl #21
 747 0048 3443     		orrs	r4, r4, r6
 748 004a 9C50     		str	r4, [r3, r2]
 749              	.L71:
 622:./FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 750              		.loc 1 622 0
 751 004c 8A7A     		ldrb	r2, [r1, #10]	@ zero_extendqisi2
 752 004e 02F00F02 		and	r2, r2, #15
 753 0052 8A72     		strb	r2, [r1, #10]
 623:./FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
ARM GAS  /tmp/ccmLA7br.s 			page 46


 754              		.loc 1 623 0
 755 0054 05F11804 		add	r4, r5, #24
 756 0058 2401     		lsls	r4, r4, #4
 757 005a 1A19     		adds	r2, r3, r4
 758 005c 5668     		ldr	r6, [r2, #4]
 759 005e 26F00F06 		bic	r6, r6, #15
 760 0062 5660     		str	r6, [r2, #4]
 624:./FWLIB/src/stm32f4xx_can.c **** 
 761              		.loc 1 624 0
 762 0064 5668     		ldr	r6, [r2, #4]
 763 0066 8F7A     		ldrb	r7, [r1, #10]	@ zero_extendqisi2
 764 0068 3E43     		orrs	r6, r6, r7
 765 006a 5660     		str	r6, [r2, #4]
 627:./FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
 766              		.loc 1 627 0
 767 006c 8E7B     		ldrb	r6, [r1, #14]	@ zero_extendqisi2
 628:./FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[1] << 8) | 
 768              		.loc 1 628 0
 769 006e 4A7B     		ldrb	r2, [r1, #13]	@ zero_extendqisi2
 770 0070 1204     		lsls	r2, r2, #16
 627:./FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
 771              		.loc 1 627 0
 772 0072 42EA0662 		orr	r2, r2, r6, lsl #24
 629:./FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[0]));
 773              		.loc 1 629 0
 774 0076 0E7B     		ldrb	r6, [r1, #12]	@ zero_extendqisi2
 628:./FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[1] << 8) | 
 775              		.loc 1 628 0
 776 0078 42EA0622 		orr	r2, r2, r6, lsl #8
 630:./FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 777              		.loc 1 630 0
 778 007c CE7A     		ldrb	r6, [r1, #11]	@ zero_extendqisi2
 629:./FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[0]));
 779              		.loc 1 629 0
 780 007e 3243     		orrs	r2, r2, r6
 627:./FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
 781              		.loc 1 627 0
 782 0080 03EB0515 		add	r5, r3, r5, lsl #4
 783 0084 C5F88821 		str	r2, [r5, #392]
 631:./FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[6] << 16) |
 784              		.loc 1 631 0
 785 0088 8E7C     		ldrb	r6, [r1, #18]	@ zero_extendqisi2
 632:./FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[5] << 8) |
 786              		.loc 1 632 0
 787 008a 4A7C     		ldrb	r2, [r1, #17]	@ zero_extendqisi2
 788 008c 1204     		lsls	r2, r2, #16
 631:./FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[6] << 16) |
 789              		.loc 1 631 0
 790 008e 42EA0662 		orr	r2, r2, r6, lsl #24
 633:./FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[4]));
 791              		.loc 1 633 0
 792 0092 0E7C     		ldrb	r6, [r1, #16]	@ zero_extendqisi2
 632:./FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[5] << 8) |
 793              		.loc 1 632 0
 794 0094 42EA0622 		orr	r2, r2, r6, lsl #8
 634:./FWLIB/src/stm32f4xx_can.c ****     /* Request transmission */
 795              		.loc 1 634 0
ARM GAS  /tmp/ccmLA7br.s 			page 47


 796 0098 C97B     		ldrb	r1, [r1, #15]	@ zero_extendqisi2
 797              	.LVL42:
 633:./FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[4]));
 798              		.loc 1 633 0
 799 009a 0A43     		orrs	r2, r2, r1
 631:./FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[6] << 16) |
 800              		.loc 1 631 0
 801 009c C5F88C21 		str	r2, [r5, #396]
 636:./FWLIB/src/stm32f4xx_can.c ****   }
 802              		.loc 1 636 0
 803 00a0 1A59     		ldr	r2, [r3, r4]
 804 00a2 42F00102 		orr	r2, r2, #1
 805 00a6 1A51     		str	r2, [r3, r4]
 639:./FWLIB/src/stm32f4xx_can.c **** 
 806              		.loc 1 639 0
 807 00a8 F0BC     		pop	{r4, r5, r6, r7}
 808              	.LCFI5:
 809              		.cfi_restore 7
 810              		.cfi_restore 6
 811              		.cfi_restore 5
 812              		.cfi_restore 4
 813              		.cfi_def_cfa_offset 0
 814 00aa 7047     		bx	lr
 815              	.LVL43:
 816              	.L73:
 592:./FWLIB/src/stm32f4xx_can.c ****   }
 817              		.loc 1 592 0
 818 00ac 0120     		movs	r0, #1
 819              	.LVL44:
 820 00ae B7E7     		b	.L68
 821              	.L70:
 822              	.LCFI6:
 823              		.cfi_def_cfa_offset 16
 824              		.cfi_offset 4, -16
 825              		.cfi_offset 5, -12
 826              		.cfi_offset 6, -8
 827              		.cfi_offset 7, -4
 616:./FWLIB/src/stm32f4xx_can.c ****                                                   TxMessage->IDE | \
 828              		.loc 1 616 0
 829 00b0 00F11804 		add	r4, r0, #24
 830 00b4 2401     		lsls	r4, r4, #4
 831 00b6 1E59     		ldr	r6, [r3, r4]
 832 00b8 4F68     		ldr	r7, [r1, #4]
 833 00ba 42EAC702 		orr	r2, r2, r7, lsl #3
 618:./FWLIB/src/stm32f4xx_can.c ****     }
 834              		.loc 1 618 0
 835 00be 4F7A     		ldrb	r7, [r1, #9]	@ zero_extendqisi2
 617:./FWLIB/src/stm32f4xx_can.c ****                                                   TxMessage->RTR);
 836              		.loc 1 617 0
 837 00c0 3A43     		orrs	r2, r2, r7
 616:./FWLIB/src/stm32f4xx_can.c ****                                                   TxMessage->IDE | \
 838              		.loc 1 616 0
 839 00c2 3243     		orrs	r2, r2, r6
 840 00c4 1A51     		str	r2, [r3, r4]
 841 00c6 C1E7     		b	.L71
 842              	.LVL45:
 843              	.L74:
ARM GAS  /tmp/ccmLA7br.s 			page 48


 844              	.LCFI7:
 845              		.cfi_def_cfa_offset 0
 846              		.cfi_restore 4
 847              		.cfi_restore 5
 848              		.cfi_restore 6
 849              		.cfi_restore 7
 600:./FWLIB/src/stm32f4xx_can.c ****   }
 850              		.loc 1 600 0
 851 00c8 0420     		movs	r0, #4
 852              	.LVL46:
 639:./FWLIB/src/stm32f4xx_can.c **** 
 853              		.loc 1 639 0
 854 00ca 7047     		bx	lr
 855              		.cfi_endproc
 856              	.LFE119:
 858              		.section	.text.CAN_TransmitStatus,"ax",%progbits
 859              		.align	1
 860              		.global	CAN_TransmitStatus
 861              		.syntax unified
 862              		.thumb
 863              		.thumb_func
 864              		.fpu fpv4-sp-d16
 866              	CAN_TransmitStatus:
 867              	.LFB120:
 649:./FWLIB/src/stm32f4xx_can.c ****   uint32_t state = 0;
 868              		.loc 1 649 0
 869              		.cfi_startproc
 870              		@ args = 0, pretend = 0, frame = 0
 871              		@ frame_needed = 0, uses_anonymous_args = 0
 872              		@ link register save eliminated.
 873              	.LVL47:
 656:./FWLIB/src/stm32f4xx_can.c ****   {
 874              		.loc 1 656 0
 875 0000 0129     		cmp	r1, #1
 876 0002 19D0     		beq	.L80
 877 0004 19B1     		cbz	r1, .L81
 878 0006 0229     		cmp	r1, #2
 879 0008 1AD0     		beq	.L82
 674:./FWLIB/src/stm32f4xx_can.c ****       break;
 880              		.loc 1 674 0
 881 000a 0220     		movs	r0, #2
 882              	.LVL48:
 883 000c 7047     		bx	lr
 884              	.LVL49:
 885              	.L81:
 659:./FWLIB/src/stm32f4xx_can.c ****       break;
 886              		.loc 1 659 0
 887 000e 8368     		ldr	r3, [r0, #8]
 888 0010 23F07B43 		bic	r3, r3, #-83886080
 889 0014 23F47F03 		bic	r3, r3, #16711680
 890 0018 23F47F43 		bic	r3, r3, #65280
 891 001c 23F0FC03 		bic	r3, r3, #252
 892              	.LVL50:
 893              	.L83:
 671:./FWLIB/src/stm32f4xx_can.c ****   {
 894              		.loc 1 671 0
 895 0020 104A     		ldr	r2, .L93
ARM GAS  /tmp/ccmLA7br.s 			page 49


 896 0022 9342     		cmp	r3, r2
 897 0024 17D0     		beq	.L84
 898 0026 13D9     		bls	.L92
 899 0028 0F4A     		ldr	r2, .L93+4
 900 002a 9342     		cmp	r3, r2
 901 002c 15D0     		beq	.L87
 902 002e 0F4A     		ldr	r2, .L93+8
 903 0030 9342     		cmp	r3, r2
 904 0032 14D1     		bne	.L90
 905              	.LVL51:
 688:./FWLIB/src/stm32f4xx_can.c ****       break;
 906              		.loc 1 688 0
 907 0034 0120     		movs	r0, #1
 908              	.LVL52:
 689:./FWLIB/src/stm32f4xx_can.c ****     default: state = CAN_TxStatus_Failed;
 909              		.loc 1 689 0
 910 0036 7047     		bx	lr
 911              	.LVL53:
 912              	.L80:
 662:./FWLIB/src/stm32f4xx_can.c ****       break;
 913              		.loc 1 662 0
 914 0038 8268     		ldr	r2, [r0, #8]
 915 003a 0B4B     		ldr	r3, .L93+4
 916 003c 1340     		ands	r3, r3, r2
 917              	.LVL54:
 663:./FWLIB/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_2): 
 918              		.loc 1 663 0
 919 003e EFE7     		b	.L83
 920              	.LVL55:
 921              	.L82:
 665:./FWLIB/src/stm32f4xx_can.c ****       break;
 922              		.loc 1 665 0
 923 0040 8368     		ldr	r3, [r0, #8]
 924 0042 23F06F43 		bic	r3, r3, #-285212672
 925 0046 23F47C03 		bic	r3, r3, #16515072
 926 004a 1B0C     		lsrs	r3, r3, #16
 927 004c 1B04     		lsls	r3, r3, #16
 928              	.LVL56:
 666:./FWLIB/src/stm32f4xx_can.c ****     default:
 929              		.loc 1 666 0
 930 004e E7E7     		b	.L83
 931              	.L92:
 671:./FWLIB/src/stm32f4xx_can.c ****   {
 932              		.loc 1 671 0
 933 0050 2BB9     		cbnz	r3, .L90
 674:./FWLIB/src/stm32f4xx_can.c ****       break;
 934              		.loc 1 674 0
 935 0052 0220     		movs	r0, #2
 936              	.LVL57:
 937 0054 7047     		bx	lr
 938              	.LVL58:
 939              	.L84:
 684:./FWLIB/src/stm32f4xx_can.c ****       break;
 940              		.loc 1 684 0
 941 0056 0120     		movs	r0, #1
 942              	.LVL59:
 685:./FWLIB/src/stm32f4xx_can.c ****     case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
ARM GAS  /tmp/ccmLA7br.s 			page 50


 943              		.loc 1 685 0
 944 0058 7047     		bx	lr
 945              	.LVL60:
 946              	.L87:
 686:./FWLIB/src/stm32f4xx_can.c ****       break;
 947              		.loc 1 686 0
 948 005a 0120     		movs	r0, #1
 949              	.LVL61:
 687:./FWLIB/src/stm32f4xx_can.c ****     case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
 950              		.loc 1 687 0
 951 005c 7047     		bx	lr
 952              	.LVL62:
 953              	.L90:
 677:./FWLIB/src/stm32f4xx_can.c ****       break;
 954              		.loc 1 677 0
 955 005e 0020     		movs	r0, #0
 956              	.LVL63:
 694:./FWLIB/src/stm32f4xx_can.c **** 
 957              		.loc 1 694 0
 958 0060 7047     		bx	lr
 959              	.L94:
 960 0062 00BF     		.align	2
 961              	.L93:
 962 0064 03000004 		.word	67108867
 963 0068 00030008 		.word	134218496
 964 006c 00000310 		.word	268632064
 965              		.cfi_endproc
 966              	.LFE120:
 968              		.section	.text.CAN_CancelTransmit,"ax",%progbits
 969              		.align	1
 970              		.global	CAN_CancelTransmit
 971              		.syntax unified
 972              		.thumb
 973              		.thumb_func
 974              		.fpu fpv4-sp-d16
 976              	CAN_CancelTransmit:
 977              	.LFB121:
 703:./FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 978              		.loc 1 703 0
 979              		.cfi_startproc
 980              		@ args = 0, pretend = 0, frame = 0
 981              		@ frame_needed = 0, uses_anonymous_args = 0
 982              		@ link register save eliminated.
 983              	.LVL64:
 708:./FWLIB/src/stm32f4xx_can.c ****   {
 984              		.loc 1 708 0
 985 0000 0129     		cmp	r1, #1
 986 0002 08D0     		beq	.L97
 987 0004 11B1     		cbz	r1, .L98
 988 0006 0229     		cmp	r1, #2
 989 0008 0AD0     		beq	.L99
 990 000a 7047     		bx	lr
 991              	.L98:
 710:./FWLIB/src/stm32f4xx_can.c ****       break;
 992              		.loc 1 710 0
 993 000c 8368     		ldr	r3, [r0, #8]
 994 000e 43F08003 		orr	r3, r3, #128
ARM GAS  /tmp/ccmLA7br.s 			page 51


 995 0012 8360     		str	r3, [r0, #8]
 711:./FWLIB/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
 996              		.loc 1 711 0
 997 0014 7047     		bx	lr
 998              	.L97:
 712:./FWLIB/src/stm32f4xx_can.c ****       break;
 999              		.loc 1 712 0
 1000 0016 8368     		ldr	r3, [r0, #8]
 1001 0018 43F40043 		orr	r3, r3, #32768
 1002 001c 8360     		str	r3, [r0, #8]
 713:./FWLIB/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
 1003              		.loc 1 713 0
 1004 001e 7047     		bx	lr
 1005              	.L99:
 714:./FWLIB/src/stm32f4xx_can.c ****       break;
 1006              		.loc 1 714 0
 1007 0020 8368     		ldr	r3, [r0, #8]
 1008 0022 43F40003 		orr	r3, r3, #8388608
 1009 0026 8360     		str	r3, [r0, #8]
 719:./FWLIB/src/stm32f4xx_can.c **** /**
 1010              		.loc 1 719 0
 1011 0028 7047     		bx	lr
 1012              		.cfi_endproc
 1013              	.LFE121:
 1015              		.section	.text.CAN_Receive,"ax",%progbits
 1016              		.align	1
 1017              		.global	CAN_Receive
 1018              		.syntax unified
 1019              		.thumb
 1020              		.thumb_func
 1021              		.fpu fpv4-sp-d16
 1023              	CAN_Receive:
 1024              	.LFB122:
 750:./FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 1025              		.loc 1 750 0
 1026              		.cfi_startproc
 1027              		@ args = 0, pretend = 0, frame = 0
 1028              		@ frame_needed = 0, uses_anonymous_args = 0
 1029              		@ link register save eliminated.
 1030              	.LVL65:
 1031 0000 10B4     		push	{r4}
 1032              	.LCFI8:
 1033              		.cfi_def_cfa_offset 4
 1034              		.cfi_offset 4, -4
 755:./FWLIB/src/stm32f4xx_can.c ****   if (RxMessage->IDE == CAN_Id_Standard)
 1035              		.loc 1 755 0
 1036 0002 01F11B03 		add	r3, r1, #27
 1037 0006 1B01     		lsls	r3, r3, #4
 1038 0008 C358     		ldr	r3, [r0, r3]
 1039 000a 03F00403 		and	r3, r3, #4
 1040 000e 1372     		strb	r3, [r2, #8]
 756:./FWLIB/src/stm32f4xx_can.c ****   {
 1041              		.loc 1 756 0
 1042 0010 002B     		cmp	r3, #0
 1043 0012 3CD1     		bne	.L101
 758:./FWLIB/src/stm32f4xx_can.c ****   }
 1044              		.loc 1 758 0
ARM GAS  /tmp/ccmLA7br.s 			page 52


 1045 0014 01F11B03 		add	r3, r1, #27
 1046 0018 1B01     		lsls	r3, r3, #4
 1047 001a C358     		ldr	r3, [r0, r3]
 1048 001c 5B0D     		lsrs	r3, r3, #21
 1049 001e 1360     		str	r3, [r2]
 1050              	.L102:
 765:./FWLIB/src/stm32f4xx_can.c ****   /* Get the DLC */
 1051              		.loc 1 765 0
 1052 0020 01F11B03 		add	r3, r1, #27
 1053 0024 1B01     		lsls	r3, r3, #4
 1054 0026 C418     		adds	r4, r0, r3
 1055 0028 C358     		ldr	r3, [r0, r3]
 1056 002a 03F00203 		and	r3, r3, #2
 1057 002e 5372     		strb	r3, [r2, #9]
 767:./FWLIB/src/stm32f4xx_can.c ****   /* Get the FMI */
 1058              		.loc 1 767 0
 1059 0030 6368     		ldr	r3, [r4, #4]
 1060 0032 03F00F03 		and	r3, r3, #15
 1061 0036 9372     		strb	r3, [r2, #10]
 769:./FWLIB/src/stm32f4xx_can.c ****   /* Get the data field */
 1062              		.loc 1 769 0
 1063 0038 6368     		ldr	r3, [r4, #4]
 1064 003a 1B0A     		lsrs	r3, r3, #8
 1065 003c D374     		strb	r3, [r2, #19]
 771:./FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 1066              		.loc 1 771 0
 1067 003e 00EB0113 		add	r3, r0, r1, lsl #4
 1068 0042 D3F8B841 		ldr	r4, [r3, #440]
 1069 0046 D472     		strb	r4, [r2, #11]
 772:./FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 1070              		.loc 1 772 0
 1071 0048 D3F8B841 		ldr	r4, [r3, #440]
 1072 004c 240A     		lsrs	r4, r4, #8
 1073 004e 1473     		strb	r4, [r2, #12]
 773:./FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 1074              		.loc 1 773 0
 1075 0050 D3F8B841 		ldr	r4, [r3, #440]
 1076 0054 240C     		lsrs	r4, r4, #16
 1077 0056 5473     		strb	r4, [r2, #13]
 774:./FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 1078              		.loc 1 774 0
 1079 0058 D3F8B841 		ldr	r4, [r3, #440]
 1080 005c 240E     		lsrs	r4, r4, #24
 1081 005e 9473     		strb	r4, [r2, #14]
 775:./FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 1082              		.loc 1 775 0
 1083 0060 D3F8BC41 		ldr	r4, [r3, #444]
 1084 0064 D473     		strb	r4, [r2, #15]
 776:./FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 1085              		.loc 1 776 0
 1086 0066 D3F8BC41 		ldr	r4, [r3, #444]
 1087 006a 240A     		lsrs	r4, r4, #8
 1088 006c 1474     		strb	r4, [r2, #16]
 777:./FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 1089              		.loc 1 777 0
 1090 006e D3F8BC41 		ldr	r4, [r3, #444]
 1091 0072 240C     		lsrs	r4, r4, #16
ARM GAS  /tmp/ccmLA7br.s 			page 53


 1092 0074 5474     		strb	r4, [r2, #17]
 778:./FWLIB/src/stm32f4xx_can.c ****   /* Release the FIFO */
 1093              		.loc 1 778 0
 1094 0076 D3F8BC31 		ldr	r3, [r3, #444]
 1095 007a 1B0E     		lsrs	r3, r3, #24
 1096 007c 9374     		strb	r3, [r2, #18]
 781:./FWLIB/src/stm32f4xx_can.c ****   {
 1097              		.loc 1 781 0
 1098 007e 69B1     		cbz	r1, .L106
 788:./FWLIB/src/stm32f4xx_can.c ****   }
 1099              		.loc 1 788 0
 1100 0080 0369     		ldr	r3, [r0, #16]
 1101 0082 43F02003 		orr	r3, r3, #32
 1102 0086 0361     		str	r3, [r0, #16]
 1103              	.L100:
 790:./FWLIB/src/stm32f4xx_can.c **** 
 1104              		.loc 1 790 0
 1105 0088 5DF8044B 		ldr	r4, [sp], #4
 1106              	.LCFI9:
 1107              		.cfi_remember_state
 1108              		.cfi_restore 4
 1109              		.cfi_def_cfa_offset 0
 1110 008c 7047     		bx	lr
 1111              	.L101:
 1112              	.LCFI10:
 1113              		.cfi_restore_state
 762:./FWLIB/src/stm32f4xx_can.c ****   }
 1114              		.loc 1 762 0
 1115 008e 01F11B03 		add	r3, r1, #27
 1116 0092 1B01     		lsls	r3, r3, #4
 1117 0094 C358     		ldr	r3, [r0, r3]
 1118 0096 DB08     		lsrs	r3, r3, #3
 1119 0098 5360     		str	r3, [r2, #4]
 1120 009a C1E7     		b	.L102
 1121              	.L106:
 783:./FWLIB/src/stm32f4xx_can.c ****   }
 1122              		.loc 1 783 0
 1123 009c C368     		ldr	r3, [r0, #12]
 1124 009e 43F02003 		orr	r3, r3, #32
 1125 00a2 C360     		str	r3, [r0, #12]
 1126 00a4 F0E7     		b	.L100
 1127              		.cfi_endproc
 1128              	.LFE122:
 1130              		.section	.text.CAN_FIFORelease,"ax",%progbits
 1131              		.align	1
 1132              		.global	CAN_FIFORelease
 1133              		.syntax unified
 1134              		.thumb
 1135              		.thumb_func
 1136              		.fpu fpv4-sp-d16
 1138              	CAN_FIFORelease:
 1139              	.LFB123:
 799:./FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 1140              		.loc 1 799 0
 1141              		.cfi_startproc
 1142              		@ args = 0, pretend = 0, frame = 0
 1143              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccmLA7br.s 			page 54


 1144              		@ link register save eliminated.
 1145              	.LVL66:
 804:./FWLIB/src/stm32f4xx_can.c ****   {
 1146              		.loc 1 804 0
 1147 0000 21B1     		cbz	r1, .L110
 811:./FWLIB/src/stm32f4xx_can.c ****   }
 1148              		.loc 1 811 0
 1149 0002 0369     		ldr	r3, [r0, #16]
 1150 0004 43F02003 		orr	r3, r3, #32
 1151 0008 0361     		str	r3, [r0, #16]
 813:./FWLIB/src/stm32f4xx_can.c **** 
 1152              		.loc 1 813 0
 1153 000a 7047     		bx	lr
 1154              	.L110:
 806:./FWLIB/src/stm32f4xx_can.c ****   }
 1155              		.loc 1 806 0
 1156 000c C368     		ldr	r3, [r0, #12]
 1157 000e 43F02003 		orr	r3, r3, #32
 1158 0012 C360     		str	r3, [r0, #12]
 1159 0014 7047     		bx	lr
 1160              		.cfi_endproc
 1161              	.LFE123:
 1163              		.section	.text.CAN_MessagePending,"ax",%progbits
 1164              		.align	1
 1165              		.global	CAN_MessagePending
 1166              		.syntax unified
 1167              		.thumb
 1168              		.thumb_func
 1169              		.fpu fpv4-sp-d16
 1171              	CAN_MessagePending:
 1172              	.LFB124:
 822:./FWLIB/src/stm32f4xx_can.c ****   uint8_t message_pending=0;
 1173              		.loc 1 822 0
 1174              		.cfi_startproc
 1175              		@ args = 0, pretend = 0, frame = 0
 1176              		@ frame_needed = 0, uses_anonymous_args = 0
 1177              		@ link register save eliminated.
 1178              	.LVL67:
 827:./FWLIB/src/stm32f4xx_can.c ****   {
 1179              		.loc 1 827 0
 1180 0000 19B1     		cbz	r1, .L115
 831:./FWLIB/src/stm32f4xx_can.c ****   {
 1181              		.loc 1 831 0
 1182 0002 0129     		cmp	r1, #1
 1183 0004 05D0     		beq	.L116
 837:./FWLIB/src/stm32f4xx_can.c ****   }
 1184              		.loc 1 837 0
 1185 0006 0020     		movs	r0, #0
 1186              	.LVL68:
 840:./FWLIB/src/stm32f4xx_can.c **** /**
 1187              		.loc 1 840 0
 1188 0008 7047     		bx	lr
 1189              	.LVL69:
 1190              	.L115:
 829:./FWLIB/src/stm32f4xx_can.c ****   }
 1191              		.loc 1 829 0
 1192 000a C068     		ldr	r0, [r0, #12]
ARM GAS  /tmp/ccmLA7br.s 			page 55


 1193              	.LVL70:
 1194 000c 00F00300 		and	r0, r0, #3
 1195              	.LVL71:
 1196 0010 7047     		bx	lr
 1197              	.LVL72:
 1198              	.L116:
 833:./FWLIB/src/stm32f4xx_can.c ****   }
 1199              		.loc 1 833 0
 1200 0012 0069     		ldr	r0, [r0, #16]
 1201              	.LVL73:
 1202 0014 00F00300 		and	r0, r0, #3
 1203              	.LVL74:
 1204 0018 7047     		bx	lr
 1205              		.cfi_endproc
 1206              	.LFE124:
 1208              		.section	.text.CAN_OperatingModeRequest,"ax",%progbits
 1209              		.align	1
 1210              		.global	CAN_OperatingModeRequest
 1211              		.syntax unified
 1212              		.thumb
 1213              		.thumb_func
 1214              		.fpu fpv4-sp-d16
 1216              	CAN_OperatingModeRequest:
 1217              	.LFB125:
 872:./FWLIB/src/stm32f4xx_can.c ****   uint8_t status = CAN_ModeStatus_Failed;
 1218              		.loc 1 872 0
 1219              		.cfi_startproc
 1220              		@ args = 0, pretend = 0, frame = 0
 1221              		@ frame_needed = 0, uses_anonymous_args = 0
 1222              		@ link register save eliminated.
 1223              	.LVL75:
 882:./FWLIB/src/stm32f4xx_can.c ****   {
 1224              		.loc 1 882 0
 1225 0000 B1B9     		cbnz	r1, .L118
 885:./FWLIB/src/stm32f4xx_can.c **** 
 1226              		.loc 1 885 0
 1227 0002 0368     		ldr	r3, [r0]
 1228 0004 23F00303 		bic	r3, r3, #3
 1229 0008 43F00103 		orr	r3, r3, #1
 1230 000c 0360     		str	r3, [r0]
 876:./FWLIB/src/stm32f4xx_can.c **** 
 1231              		.loc 1 876 0
 1232 000e 4FF6FF72 		movw	r2, #65535
 1233              	.LVL76:
 1234              	.L119:
 888:./FWLIB/src/stm32f4xx_can.c ****     {
 1235              		.loc 1 888 0
 1236 0012 4368     		ldr	r3, [r0, #4]
 1237 0014 03F00303 		and	r3, r3, #3
 1238 0018 012B     		cmp	r3, #1
 1239 001a 02D0     		beq	.L120
 888:./FWLIB/src/stm32f4xx_can.c ****     {
 1240              		.loc 1 888 0 is_stmt 0 discriminator 1
 1241 001c 0AB1     		cbz	r2, .L120
 890:./FWLIB/src/stm32f4xx_can.c ****     }
 1242              		.loc 1 890 0 is_stmt 1
 1243 001e 013A     		subs	r2, r2, #1
ARM GAS  /tmp/ccmLA7br.s 			page 56


 1244              	.LVL77:
 1245 0020 F7E7     		b	.L119
 1246              	.L120:
 892:./FWLIB/src/stm32f4xx_can.c ****     {
 1247              		.loc 1 892 0
 1248 0022 4368     		ldr	r3, [r0, #4]
 1249 0024 03F00303 		and	r3, r3, #3
 1250 0028 012B     		cmp	r3, #1
 1251 002a 33D0     		beq	.L130
 894:./FWLIB/src/stm32f4xx_can.c ****     }
 1252              		.loc 1 894 0
 1253 002c 0020     		movs	r0, #0
 1254              	.LVL78:
 1255 002e 7047     		bx	lr
 1256              	.LVL79:
 1257              	.L118:
 901:./FWLIB/src/stm32f4xx_can.c ****   {
 1258              		.loc 1 901 0
 1259 0030 0129     		cmp	r1, #1
 1260 0032 03D0     		beq	.L134
 920:./FWLIB/src/stm32f4xx_can.c ****   {
 1261              		.loc 1 920 0
 1262 0034 0229     		cmp	r1, #2
 1263 0036 15D0     		beq	.L135
 941:./FWLIB/src/stm32f4xx_can.c ****   }
 1264              		.loc 1 941 0
 1265 0038 0020     		movs	r0, #0
 1266              	.LVL80:
 1267 003a 7047     		bx	lr
 1268              	.LVL81:
 1269              	.L134:
 904:./FWLIB/src/stm32f4xx_can.c **** 
 1270              		.loc 1 904 0
 1271 003c 0368     		ldr	r3, [r0]
 1272 003e 23F00303 		bic	r3, r3, #3
 1273 0042 0360     		str	r3, [r0]
 876:./FWLIB/src/stm32f4xx_can.c **** 
 1274              		.loc 1 876 0
 1275 0044 4FF6FF73 		movw	r3, #65535
 907:./FWLIB/src/stm32f4xx_can.c ****     {
 1276              		.loc 1 907 0
 1277 0048 00E0     		b	.L124
 1278              	.LVL82:
 1279              	.L126:
 909:./FWLIB/src/stm32f4xx_can.c ****     }
 1280              		.loc 1 909 0
 1281 004a 013B     		subs	r3, r3, #1
 1282              	.LVL83:
 1283              	.L124:
 907:./FWLIB/src/stm32f4xx_can.c ****     {
 1284              		.loc 1 907 0
 1285 004c 4268     		ldr	r2, [r0, #4]
 1286 004e 12F0030F 		tst	r2, #3
 1287 0052 01D0     		beq	.L125
 907:./FWLIB/src/stm32f4xx_can.c ****     {
 1288              		.loc 1 907 0 is_stmt 0 discriminator 1
 1289 0054 002B     		cmp	r3, #0
ARM GAS  /tmp/ccmLA7br.s 			page 57


 1290 0056 F8D1     		bne	.L126
 1291              	.L125:
 911:./FWLIB/src/stm32f4xx_can.c ****     {
 1292              		.loc 1 911 0 is_stmt 1
 1293 0058 4368     		ldr	r3, [r0, #4]
 1294              	.LVL84:
 1295 005a 13F0030F 		tst	r3, #3
 1296 005e 1BD0     		beq	.L131
 913:./FWLIB/src/stm32f4xx_can.c ****     }
 1297              		.loc 1 913 0
 1298 0060 0020     		movs	r0, #0
 1299              	.LVL85:
 1300 0062 7047     		bx	lr
 1301              	.LVL86:
 1302              	.L135:
 923:./FWLIB/src/stm32f4xx_can.c **** 
 1303              		.loc 1 923 0
 1304 0064 0368     		ldr	r3, [r0]
 1305 0066 23F00303 		bic	r3, r3, #3
 1306 006a 43F00203 		orr	r3, r3, #2
 1307 006e 0360     		str	r3, [r0]
 876:./FWLIB/src/stm32f4xx_can.c **** 
 1308              		.loc 1 876 0
 1309 0070 4FF6FF72 		movw	r2, #65535
 926:./FWLIB/src/stm32f4xx_can.c ****     {
 1310              		.loc 1 926 0
 1311 0074 00E0     		b	.L127
 1312              	.LVL87:
 1313              	.L129:
 928:./FWLIB/src/stm32f4xx_can.c ****     }
 1314              		.loc 1 928 0
 1315 0076 013A     		subs	r2, r2, #1
 1316              	.LVL88:
 1317              	.L127:
 926:./FWLIB/src/stm32f4xx_can.c ****     {
 1318              		.loc 1 926 0
 1319 0078 4368     		ldr	r3, [r0, #4]
 1320 007a 03F00303 		and	r3, r3, #3
 1321 007e 022B     		cmp	r3, #2
 1322 0080 01D0     		beq	.L128
 926:./FWLIB/src/stm32f4xx_can.c ****     {
 1323              		.loc 1 926 0 is_stmt 0 discriminator 1
 1324 0082 002A     		cmp	r2, #0
 1325 0084 F7D1     		bne	.L129
 1326              	.L128:
 930:./FWLIB/src/stm32f4xx_can.c ****     {
 1327              		.loc 1 930 0 is_stmt 1
 1328 0086 4368     		ldr	r3, [r0, #4]
 1329 0088 03F00303 		and	r3, r3, #3
 1330 008c 022B     		cmp	r3, #2
 1331 008e 05D0     		beq	.L133
 932:./FWLIB/src/stm32f4xx_can.c ****     }
 1332              		.loc 1 932 0
 1333 0090 0020     		movs	r0, #0
 1334              	.LVL89:
 1335 0092 7047     		bx	lr
 1336              	.LVL90:
ARM GAS  /tmp/ccmLA7br.s 			page 58


 1337              	.L130:
 898:./FWLIB/src/stm32f4xx_can.c ****     }
 1338              		.loc 1 898 0
 1339 0094 0120     		movs	r0, #1
 1340              	.LVL91:
 1341 0096 7047     		bx	lr
 1342              	.LVL92:
 1343              	.L131:
 917:./FWLIB/src/stm32f4xx_can.c ****     }
 1344              		.loc 1 917 0
 1345 0098 0120     		movs	r0, #1
 1346              	.LVL93:
 1347 009a 7047     		bx	lr
 1348              	.LVL94:
 1349              	.L133:
 936:./FWLIB/src/stm32f4xx_can.c ****     }
 1350              		.loc 1 936 0
 1351 009c 0120     		movs	r0, #1
 1352              	.LVL95:
 945:./FWLIB/src/stm32f4xx_can.c **** 
 1353              		.loc 1 945 0
 1354 009e 7047     		bx	lr
 1355              		.cfi_endproc
 1356              	.LFE125:
 1358              		.section	.text.CAN_Sleep,"ax",%progbits
 1359              		.align	1
 1360              		.global	CAN_Sleep
 1361              		.syntax unified
 1362              		.thumb
 1363              		.thumb_func
 1364              		.fpu fpv4-sp-d16
 1366              	CAN_Sleep:
 1367              	.LFB126:
 953:./FWLIB/src/stm32f4xx_can.c ****   uint8_t sleepstatus = CAN_Sleep_Failed;
 1368              		.loc 1 953 0
 1369              		.cfi_startproc
 1370              		@ args = 0, pretend = 0, frame = 0
 1371              		@ frame_needed = 0, uses_anonymous_args = 0
 1372              		@ link register save eliminated.
 1373              	.LVL96:
 960:./FWLIB/src/stm32f4xx_can.c ****    
 1374              		.loc 1 960 0
 1375 0000 0368     		ldr	r3, [r0]
 1376 0002 23F00303 		bic	r3, r3, #3
 1377 0006 43F00203 		orr	r3, r3, #2
 1378 000a 0360     		str	r3, [r0]
 963:./FWLIB/src/stm32f4xx_can.c ****   {
 1379              		.loc 1 963 0
 1380 000c 4368     		ldr	r3, [r0, #4]
 1381 000e 03F00303 		and	r3, r3, #3
 1382 0012 022B     		cmp	r3, #2
 1383 0014 01D0     		beq	.L138
 954:./FWLIB/src/stm32f4xx_can.c ****   
 1384              		.loc 1 954 0
 1385 0016 0020     		movs	r0, #0
 1386              	.LVL97:
 1387 0018 7047     		bx	lr
ARM GAS  /tmp/ccmLA7br.s 			page 59


 1388              	.LVL98:
 1389              	.L138:
 966:./FWLIB/src/stm32f4xx_can.c ****   }
 1390              		.loc 1 966 0
 1391 001a 0120     		movs	r0, #1
 1392              	.LVL99:
 970:./FWLIB/src/stm32f4xx_can.c **** 
 1393              		.loc 1 970 0
 1394 001c 7047     		bx	lr
 1395              		.cfi_endproc
 1396              	.LFE126:
 1398              		.section	.text.CAN_WakeUp,"ax",%progbits
 1399              		.align	1
 1400              		.global	CAN_WakeUp
 1401              		.syntax unified
 1402              		.thumb
 1403              		.thumb_func
 1404              		.fpu fpv4-sp-d16
 1406              	CAN_WakeUp:
 1407              	.LFB127:
 978:./FWLIB/src/stm32f4xx_can.c ****   uint32_t wait_slak = SLAK_TIMEOUT;
 1408              		.loc 1 978 0
 1409              		.cfi_startproc
 1410              		@ args = 0, pretend = 0, frame = 0
 1411              		@ frame_needed = 0, uses_anonymous_args = 0
 1412              		@ link register save eliminated.
 1413              	.LVL100:
 986:./FWLIB/src/stm32f4xx_can.c ****     
 1414              		.loc 1 986 0
 1415 0000 0368     		ldr	r3, [r0]
 1416 0002 23F00203 		bic	r3, r3, #2
 1417 0006 0360     		str	r3, [r0]
 979:./FWLIB/src/stm32f4xx_can.c ****   uint8_t wakeupstatus = CAN_WakeUp_Failed;
 1418              		.loc 1 979 0
 1419 0008 4FF6FF73 		movw	r3, #65535
 1420              	.LVL101:
 1421              	.L140:
 989:./FWLIB/src/stm32f4xx_can.c ****   {
 1422              		.loc 1 989 0
 1423 000c 4268     		ldr	r2, [r0, #4]
 1424 000e 12F0020F 		tst	r2, #2
 1425 0012 02D0     		beq	.L141
 989:./FWLIB/src/stm32f4xx_can.c ****   {
 1426              		.loc 1 989 0 is_stmt 0 discriminator 1
 1427 0014 0BB1     		cbz	r3, .L141
 991:./FWLIB/src/stm32f4xx_can.c ****   }
 1428              		.loc 1 991 0 is_stmt 1
 1429 0016 013B     		subs	r3, r3, #1
 1430              	.LVL102:
 1431 0018 F8E7     		b	.L140
 1432              	.L141:
 993:./FWLIB/src/stm32f4xx_can.c ****   {
 1433              		.loc 1 993 0
 1434 001a 4368     		ldr	r3, [r0, #4]
 1435              	.LVL103:
 1436 001c 13F0020F 		tst	r3, #2
 1437 0020 01D1     		bne	.L145
ARM GAS  /tmp/ccmLA7br.s 			page 60


 996:./FWLIB/src/stm32f4xx_can.c ****   }
 1438              		.loc 1 996 0
 1439 0022 0120     		movs	r0, #1
 1440              	.LVL104:
1000:./FWLIB/src/stm32f4xx_can.c **** /**
 1441              		.loc 1 1000 0
 1442 0024 7047     		bx	lr
 1443              	.LVL105:
 1444              	.L145:
 980:./FWLIB/src/stm32f4xx_can.c ****   
 1445              		.loc 1 980 0
 1446 0026 0020     		movs	r0, #0
 1447              	.LVL106:
 1448 0028 7047     		bx	lr
 1449              		.cfi_endproc
 1450              	.LFE127:
 1452              		.section	.text.CAN_GetLastErrorCode,"ax",%progbits
 1453              		.align	1
 1454              		.global	CAN_GetLastErrorCode
 1455              		.syntax unified
 1456              		.thumb
 1457              		.thumb_func
 1458              		.fpu fpv4-sp-d16
 1460              	CAN_GetLastErrorCode:
 1461              	.LFB128:
1040:./FWLIB/src/stm32f4xx_can.c ****   uint8_t errorcode=0;
 1462              		.loc 1 1040 0
 1463              		.cfi_startproc
 1464              		@ args = 0, pretend = 0, frame = 0
 1465              		@ frame_needed = 0, uses_anonymous_args = 0
 1466              		@ link register save eliminated.
 1467              	.LVL107:
1047:./FWLIB/src/stm32f4xx_can.c ****   
 1468              		.loc 1 1047 0
 1469 0000 8069     		ldr	r0, [r0, #24]
 1470              	.LVL108:
1051:./FWLIB/src/stm32f4xx_can.c **** 
 1471              		.loc 1 1051 0
 1472 0002 00F07000 		and	r0, r0, #112
 1473              	.LVL109:
 1474 0006 7047     		bx	lr
 1475              		.cfi_endproc
 1476              	.LFE128:
 1478              		.section	.text.CAN_GetReceiveErrorCounter,"ax",%progbits
 1479              		.align	1
 1480              		.global	CAN_GetReceiveErrorCounter
 1481              		.syntax unified
 1482              		.thumb
 1483              		.thumb_func
 1484              		.fpu fpv4-sp-d16
 1486              	CAN_GetReceiveErrorCounter:
 1487              	.LFB129:
1065:./FWLIB/src/stm32f4xx_can.c ****   uint8_t counter=0;
 1488              		.loc 1 1065 0
 1489              		.cfi_startproc
 1490              		@ args = 0, pretend = 0, frame = 0
 1491              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccmLA7br.s 			page 61


 1492              		@ link register save eliminated.
 1493              	.LVL110:
1072:./FWLIB/src/stm32f4xx_can.c ****   
 1494              		.loc 1 1072 0
 1495 0000 8069     		ldr	r0, [r0, #24]
 1496              	.LVL111:
1076:./FWLIB/src/stm32f4xx_can.c **** 
 1497              		.loc 1 1076 0
 1498 0002 000E     		lsrs	r0, r0, #24
 1499              	.LVL112:
 1500 0004 7047     		bx	lr
 1501              		.cfi_endproc
 1502              	.LFE129:
 1504              		.section	.text.CAN_GetLSBTransmitErrorCounter,"ax",%progbits
 1505              		.align	1
 1506              		.global	CAN_GetLSBTransmitErrorCounter
 1507              		.syntax unified
 1508              		.thumb
 1509              		.thumb_func
 1510              		.fpu fpv4-sp-d16
 1512              	CAN_GetLSBTransmitErrorCounter:
 1513              	.LFB130:
1085:./FWLIB/src/stm32f4xx_can.c ****   uint8_t counter=0;
 1514              		.loc 1 1085 0
 1515              		.cfi_startproc
 1516              		@ args = 0, pretend = 0, frame = 0
 1517              		@ frame_needed = 0, uses_anonymous_args = 0
 1518              		@ link register save eliminated.
 1519              	.LVL113:
1092:./FWLIB/src/stm32f4xx_can.c ****   
 1520              		.loc 1 1092 0
 1521 0000 8069     		ldr	r0, [r0, #24]
 1522              	.LVL114:
1096:./FWLIB/src/stm32f4xx_can.c **** /**
 1523              		.loc 1 1096 0
 1524 0002 C0F30740 		ubfx	r0, r0, #16, #8
 1525              	.LVL115:
 1526 0006 7047     		bx	lr
 1527              		.cfi_endproc
 1528              	.LFE130:
 1530              		.section	.text.CAN_ITConfig,"ax",%progbits
 1531              		.align	1
 1532              		.global	CAN_ITConfig
 1533              		.syntax unified
 1534              		.thumb
 1535              		.thumb_func
 1536              		.fpu fpv4-sp-d16
 1538              	CAN_ITConfig:
 1539              	.LFB131:
1290:./FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 1540              		.loc 1 1290 0
 1541              		.cfi_startproc
 1542              		@ args = 0, pretend = 0, frame = 0
 1543              		@ frame_needed = 0, uses_anonymous_args = 0
 1544              		@ link register save eliminated.
 1545              	.LVL116:
1296:./FWLIB/src/stm32f4xx_can.c ****   {
ARM GAS  /tmp/ccmLA7br.s 			page 62


 1546              		.loc 1 1296 0
 1547 0000 22B9     		cbnz	r2, .L152
1304:./FWLIB/src/stm32f4xx_can.c ****   }
 1548              		.loc 1 1304 0
 1549 0002 4369     		ldr	r3, [r0, #20]
 1550 0004 23EA0101 		bic	r1, r3, r1
 1551              	.LVL117:
 1552 0008 4161     		str	r1, [r0, #20]
1306:./FWLIB/src/stm32f4xx_can.c **** /**
 1553              		.loc 1 1306 0
 1554 000a 7047     		bx	lr
 1555              	.LVL118:
 1556              	.L152:
1299:./FWLIB/src/stm32f4xx_can.c ****   }
 1557              		.loc 1 1299 0
 1558 000c 4369     		ldr	r3, [r0, #20]
 1559 000e 1943     		orrs	r1, r1, r3
 1560              	.LVL119:
 1561 0010 4161     		str	r1, [r0, #20]
 1562 0012 7047     		bx	lr
 1563              		.cfi_endproc
 1564              	.LFE131:
 1566              		.section	.text.CAN_GetFlagStatus,"ax",%progbits
 1567              		.align	1
 1568              		.global	CAN_GetFlagStatus
 1569              		.syntax unified
 1570              		.thumb
 1571              		.thumb_func
 1572              		.fpu fpv4-sp-d16
 1574              	CAN_GetFlagStatus:
 1575              	.LFB132:
1330:./FWLIB/src/stm32f4xx_can.c ****   FlagStatus bitstatus = RESET;
 1576              		.loc 1 1330 0
 1577              		.cfi_startproc
 1578              		@ args = 0, pretend = 0, frame = 0
 1579              		@ frame_needed = 0, uses_anonymous_args = 0
 1580              		@ link register save eliminated.
 1581              	.LVL120:
1338:./FWLIB/src/stm32f4xx_can.c ****   { 
 1582              		.loc 1 1338 0
 1583 0000 11F4700F 		tst	r1, #15728640
 1584 0004 06D0     		beq	.L154
1341:./FWLIB/src/stm32f4xx_can.c ****     { 
 1585              		.loc 1 1341 0
 1586 0006 8369     		ldr	r3, [r0, #24]
 1587 0008 1940     		ands	r1, r1, r3
 1588              	.LVL121:
 1589 000a C1F31301 		ubfx	r1, r1, #0, #20
 1590 000e 41B3     		cbz	r1, .L159
1344:./FWLIB/src/stm32f4xx_can.c ****     }
 1591              		.loc 1 1344 0
 1592 0010 0120     		movs	r0, #1
 1593              	.LVL122:
 1594 0012 7047     		bx	lr
 1595              	.LVL123:
 1596              	.L154:
1352:./FWLIB/src/stm32f4xx_can.c ****   { 
ARM GAS  /tmp/ccmLA7br.s 			page 63


 1597              		.loc 1 1352 0
 1598 0014 11F0807F 		tst	r1, #16777216
 1599 0018 06D0     		beq	.L156
1355:./FWLIB/src/stm32f4xx_can.c ****     { 
 1600              		.loc 1 1355 0
 1601 001a 4368     		ldr	r3, [r0, #4]
 1602 001c 1940     		ands	r1, r1, r3
 1603              	.LVL124:
 1604 001e C1F31301 		ubfx	r1, r1, #0, #20
 1605 0022 01B3     		cbz	r1, .L160
1358:./FWLIB/src/stm32f4xx_can.c ****     }
 1606              		.loc 1 1358 0
 1607 0024 0120     		movs	r0, #1
 1608              	.LVL125:
 1609 0026 7047     		bx	lr
 1610              	.LVL126:
 1611              	.L156:
1366:./FWLIB/src/stm32f4xx_can.c ****   { 
 1612              		.loc 1 1366 0
 1613 0028 11F0006F 		tst	r1, #134217728
 1614 002c 06D0     		beq	.L157
1369:./FWLIB/src/stm32f4xx_can.c ****     { 
 1615              		.loc 1 1369 0
 1616 002e 8368     		ldr	r3, [r0, #8]
 1617 0030 1940     		ands	r1, r1, r3
 1618              	.LVL127:
 1619 0032 C1F31301 		ubfx	r1, r1, #0, #20
 1620 0036 C1B1     		cbz	r1, .L161
1372:./FWLIB/src/stm32f4xx_can.c ****     }
 1621              		.loc 1 1372 0
 1622 0038 0120     		movs	r0, #1
 1623              	.LVL128:
 1624 003a 7047     		bx	lr
 1625              	.LVL129:
 1626              	.L157:
1380:./FWLIB/src/stm32f4xx_can.c ****   { 
 1627              		.loc 1 1380 0
 1628 003c 11F0007F 		tst	r1, #33554432
 1629 0040 06D0     		beq	.L158
1383:./FWLIB/src/stm32f4xx_can.c ****     { 
 1630              		.loc 1 1383 0
 1631 0042 C368     		ldr	r3, [r0, #12]
 1632 0044 1940     		ands	r1, r1, r3
 1633              	.LVL130:
 1634 0046 C1F31301 		ubfx	r1, r1, #0, #20
 1635 004a 81B1     		cbz	r1, .L162
1386:./FWLIB/src/stm32f4xx_can.c ****     }
 1636              		.loc 1 1386 0
 1637 004c 0120     		movs	r0, #1
 1638              	.LVL131:
 1639 004e 7047     		bx	lr
 1640              	.LVL132:
 1641              	.L158:
1397:./FWLIB/src/stm32f4xx_can.c ****     { 
 1642              		.loc 1 1397 0
 1643 0050 0369     		ldr	r3, [r0, #16]
 1644 0052 1940     		ands	r1, r1, r3
ARM GAS  /tmp/ccmLA7br.s 			page 64


 1645              	.LVL133:
 1646 0054 C1F31301 		ubfx	r1, r1, #0, #20
 1647 0058 09B9     		cbnz	r1, .L164
1405:./FWLIB/src/stm32f4xx_can.c ****     }
 1648              		.loc 1 1405 0
 1649 005a 0020     		movs	r0, #0
 1650              	.LVL134:
1410:./FWLIB/src/stm32f4xx_can.c **** 
 1651              		.loc 1 1410 0
 1652 005c 7047     		bx	lr
 1653              	.LVL135:
 1654              	.L164:
1400:./FWLIB/src/stm32f4xx_can.c ****     }
 1655              		.loc 1 1400 0
 1656 005e 0120     		movs	r0, #1
 1657              	.LVL136:
 1658 0060 7047     		bx	lr
 1659              	.LVL137:
 1660              	.L159:
1349:./FWLIB/src/stm32f4xx_can.c ****     }
 1661              		.loc 1 1349 0
 1662 0062 0020     		movs	r0, #0
 1663              	.LVL138:
 1664 0064 7047     		bx	lr
 1665              	.LVL139:
 1666              	.L160:
1363:./FWLIB/src/stm32f4xx_can.c ****     }
 1667              		.loc 1 1363 0
 1668 0066 0020     		movs	r0, #0
 1669              	.LVL140:
 1670 0068 7047     		bx	lr
 1671              	.LVL141:
 1672              	.L161:
1377:./FWLIB/src/stm32f4xx_can.c ****     }
 1673              		.loc 1 1377 0
 1674 006a 0020     		movs	r0, #0
 1675              	.LVL142:
 1676 006c 7047     		bx	lr
 1677              	.LVL143:
 1678              	.L162:
1391:./FWLIB/src/stm32f4xx_can.c ****     }
 1679              		.loc 1 1391 0
 1680 006e 0020     		movs	r0, #0
 1681              	.LVL144:
 1682 0070 7047     		bx	lr
 1683              		.cfi_endproc
 1684              	.LFE132:
 1686              		.section	.text.CAN_ClearFlag,"ax",%progbits
 1687              		.align	1
 1688              		.global	CAN_ClearFlag
 1689              		.syntax unified
 1690              		.thumb
 1691              		.thumb_func
 1692              		.fpu fpv4-sp-d16
 1694              	CAN_ClearFlag:
 1695              	.LFB133:
1430:./FWLIB/src/stm32f4xx_can.c ****   uint32_t flagtmp=0;
ARM GAS  /tmp/ccmLA7br.s 			page 65


 1696              		.loc 1 1430 0
 1697              		.cfi_startproc
 1698              		@ args = 0, pretend = 0, frame = 0
 1699              		@ frame_needed = 0, uses_anonymous_args = 0
 1700              		@ link register save eliminated.
 1701              	.LVL145:
1436:./FWLIB/src/stm32f4xx_can.c ****   {
 1702              		.loc 1 1436 0
 1703 0000 0C4B     		ldr	r3, .L175
 1704 0002 9942     		cmp	r1, r3
 1705 0004 0CD0     		beq	.L171
1443:./FWLIB/src/stm32f4xx_can.c **** 
 1706              		.loc 1 1443 0
 1707 0006 C1F31303 		ubfx	r3, r1, #0, #20
 1708              	.LVL146:
1445:./FWLIB/src/stm32f4xx_can.c ****     {
 1709              		.loc 1 1445 0
 1710 000a 11F0007F 		tst	r1, #33554432
 1711 000e 0AD1     		bne	.L172
1450:./FWLIB/src/stm32f4xx_can.c ****     {
 1712              		.loc 1 1450 0
 1713 0010 11F0806F 		tst	r1, #67108864
 1714 0014 09D1     		bne	.L173
1455:./FWLIB/src/stm32f4xx_can.c ****     {
 1715              		.loc 1 1455 0
 1716 0016 11F0006F 		tst	r1, #134217728
 1717 001a 08D1     		bne	.L174
1463:./FWLIB/src/stm32f4xx_can.c ****     }
 1718              		.loc 1 1463 0
 1719 001c 4360     		str	r3, [r0, #4]
1466:./FWLIB/src/stm32f4xx_can.c **** 
 1720              		.loc 1 1466 0
 1721 001e 7047     		bx	lr
 1722              	.LVL147:
 1723              	.L171:
1439:./FWLIB/src/stm32f4xx_can.c ****   }
 1724              		.loc 1 1439 0
 1725 0020 0023     		movs	r3, #0
 1726 0022 8361     		str	r3, [r0, #24]
 1727 0024 7047     		bx	lr
 1728              	.LVL148:
 1729              	.L172:
1448:./FWLIB/src/stm32f4xx_can.c ****     }
 1730              		.loc 1 1448 0
 1731 0026 C360     		str	r3, [r0, #12]
 1732 0028 7047     		bx	lr
 1733              	.L173:
1453:./FWLIB/src/stm32f4xx_can.c ****     }
 1734              		.loc 1 1453 0
 1735 002a 0361     		str	r3, [r0, #16]
 1736 002c 7047     		bx	lr
 1737              	.L174:
1458:./FWLIB/src/stm32f4xx_can.c ****     }
 1738              		.loc 1 1458 0
 1739 002e 8360     		str	r3, [r0, #8]
 1740 0030 7047     		bx	lr
 1741              	.L176:
ARM GAS  /tmp/ccmLA7br.s 			page 66


 1742 0032 00BF     		.align	2
 1743              	.L175:
 1744 0034 7000F030 		.word	821035120
 1745              		.cfi_endproc
 1746              	.LFE133:
 1748              		.section	.text.CAN_GetITStatus,"ax",%progbits
 1749              		.align	1
 1750              		.global	CAN_GetITStatus
 1751              		.syntax unified
 1752              		.thumb
 1753              		.thumb_func
 1754              		.fpu fpv4-sp-d16
 1756              	CAN_GetITStatus:
 1757              	.LFB134:
1490:./FWLIB/src/stm32f4xx_can.c ****   ITStatus itstatus = RESET;
 1758              		.loc 1 1490 0
 1759              		.cfi_startproc
 1760              		@ args = 0, pretend = 0, frame = 0
 1761              		@ frame_needed = 0, uses_anonymous_args = 0
 1762              	.LVL149:
 1763 0000 08B5     		push	{r3, lr}
 1764              	.LCFI11:
 1765              		.cfi_def_cfa_offset 8
 1766              		.cfi_offset 3, -8
 1767              		.cfi_offset 14, -4
 1768              	.LVL150:
1497:./FWLIB/src/stm32f4xx_can.c ****  {
 1769              		.loc 1 1497 0
 1770 0002 4369     		ldr	r3, [r0, #20]
 1771 0004 0B42     		tst	r3, r1
 1772 0006 6DD0     		beq	.L196
1500:./FWLIB/src/stm32f4xx_can.c ****     {
 1773              		.loc 1 1500 0
 1774 0008 4029     		cmp	r1, #64
 1775 000a 4DD0     		beq	.L179
 1776 000c 11D9     		bls	.L199
 1777 000e B1F5006F 		cmp	r1, #2048
 1778 0012 62D0     		beq	.L188
 1779 0014 21D8     		bhi	.L189
 1780 0016 B1F5007F 		cmp	r1, #512
 1781 001a 54D0     		beq	.L190
 1782 001c B1F5806F 		cmp	r1, #1024
 1783 0020 56D0     		beq	.L191
 1784 0022 B1F5807F 		cmp	r1, #256
 1785 0026 0DD1     		bne	.L197
1540:./FWLIB/src/stm32f4xx_can.c ****         break;
 1786              		.loc 1 1540 0
 1787 0028 8069     		ldr	r0, [r0, #24]
 1788              	.LVL151:
 1789 002a 0121     		movs	r1, #1
 1790              	.LVL152:
 1791 002c FFF7FEFF 		bl	CheckITStatus
 1792              	.LVL153:
1541:./FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_EPV:
 1793              		.loc 1 1541 0
 1794 0030 59E0     		b	.L178
 1795              	.LVL154:
ARM GAS  /tmp/ccmLA7br.s 			page 67


 1796              	.L199:
1500:./FWLIB/src/stm32f4xx_can.c ****     {
 1797              		.loc 1 1500 0
 1798 0032 0429     		cmp	r1, #4
 1799 0034 24D0     		beq	.L181
 1800 0036 07D9     		bls	.L200
 1801 0038 1029     		cmp	r1, #16
 1802 003a 2BD0     		beq	.L185
 1803 003c 2029     		cmp	r1, #32
 1804 003e 2ED0     		beq	.L186
 1805 0040 0829     		cmp	r1, #8
 1806 0042 22D0     		beq	.L201
 1807              	.L197:
1560:./FWLIB/src/stm32f4xx_can.c ****         break;
 1808              		.loc 1 1560 0
 1809 0044 0020     		movs	r0, #0
 1810              	.LVL155:
 1811 0046 4EE0     		b	.L178
 1812              	.LVL156:
 1813              	.L200:
1500:./FWLIB/src/stm32f4xx_can.c ****     {
 1814              		.loc 1 1500 0
 1815 0048 0129     		cmp	r1, #1
 1816 004a 14D0     		beq	.L183
 1817 004c 0229     		cmp	r1, #2
 1818 004e F9D1     		bne	.L197
1508:./FWLIB/src/stm32f4xx_can.c ****         break;
 1819              		.loc 1 1508 0
 1820 0050 C068     		ldr	r0, [r0, #12]
 1821              	.LVL157:
 1822 0052 0321     		movs	r1, #3
 1823              	.LVL158:
 1824 0054 FFF7FEFF 		bl	CheckITStatus
 1825              	.LVL159:
1509:./FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FF0:
 1826              		.loc 1 1509 0
 1827 0058 45E0     		b	.L178
 1828              	.LVL160:
 1829              	.L189:
1500:./FWLIB/src/stm32f4xx_can.c ****     {
 1830              		.loc 1 1500 0
 1831 005a B1F5803F 		cmp	r1, #65536
 1832 005e 28D0     		beq	.L193
 1833 0060 B1F5003F 		cmp	r1, #131072
 1834 0064 2AD0     		beq	.L194
 1835 0066 B1F5004F 		cmp	r1, #32768
 1836 006a EBD1     		bne	.L197
1556:./FWLIB/src/stm32f4xx_can.c ****         break;
 1837              		.loc 1 1556 0
 1838 006c 4068     		ldr	r0, [r0, #4]
 1839              	.LVL161:
 1840 006e 0421     		movs	r1, #4
 1841              	.LVL162:
 1842 0070 FFF7FEFF 		bl	CheckITStatus
 1843              	.LVL163:
1557:./FWLIB/src/stm32f4xx_can.c ****       default:
 1844              		.loc 1 1557 0
ARM GAS  /tmp/ccmLA7br.s 			page 68


 1845 0074 37E0     		b	.L178
 1846              	.LVL164:
 1847              	.L183:
1504:./FWLIB/src/stm32f4xx_can.c ****         break;
 1848              		.loc 1 1504 0
 1849 0076 8068     		ldr	r0, [r0, #8]
 1850              	.LVL165:
 1851 0078 1B49     		ldr	r1, .L202
 1852              	.LVL166:
 1853 007a FFF7FEFF 		bl	CheckITStatus
 1854              	.LVL167:
1505:./FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FMP0:
 1855              		.loc 1 1505 0
 1856 007e 32E0     		b	.L178
 1857              	.LVL168:
 1858              	.L181:
1512:./FWLIB/src/stm32f4xx_can.c ****         break;
 1859              		.loc 1 1512 0
 1860 0080 C068     		ldr	r0, [r0, #12]
 1861              	.LVL169:
 1862 0082 0821     		movs	r1, #8
 1863              	.LVL170:
 1864 0084 FFF7FEFF 		bl	CheckITStatus
 1865              	.LVL171:
1513:./FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FOV0:
 1866              		.loc 1 1513 0
 1867 0088 2DE0     		b	.L178
 1868              	.LVL172:
 1869              	.L201:
1516:./FWLIB/src/stm32f4xx_can.c ****         break;
 1870              		.loc 1 1516 0
 1871 008a C068     		ldr	r0, [r0, #12]
 1872              	.LVL173:
 1873 008c 1021     		movs	r1, #16
 1874              	.LVL174:
 1875 008e FFF7FEFF 		bl	CheckITStatus
 1876              	.LVL175:
1517:./FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FMP1:
 1877              		.loc 1 1517 0
 1878 0092 28E0     		b	.L178
 1879              	.LVL176:
 1880              	.L185:
1520:./FWLIB/src/stm32f4xx_can.c ****         break;
 1881              		.loc 1 1520 0
 1882 0094 0069     		ldr	r0, [r0, #16]
 1883              	.LVL177:
 1884 0096 0321     		movs	r1, #3
 1885              	.LVL178:
 1886 0098 FFF7FEFF 		bl	CheckITStatus
 1887              	.LVL179:
1521:./FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FF1:
 1888              		.loc 1 1521 0
 1889 009c 23E0     		b	.L178
 1890              	.LVL180:
 1891              	.L186:
1524:./FWLIB/src/stm32f4xx_can.c ****         break;
 1892              		.loc 1 1524 0
ARM GAS  /tmp/ccmLA7br.s 			page 69


 1893 009e 0069     		ldr	r0, [r0, #16]
 1894              	.LVL181:
 1895 00a0 0821     		movs	r1, #8
 1896              	.LVL182:
 1897 00a2 FFF7FEFF 		bl	CheckITStatus
 1898              	.LVL183:
1525:./FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FOV1:
 1899              		.loc 1 1525 0
 1900 00a6 1EE0     		b	.L178
 1901              	.LVL184:
 1902              	.L179:
1528:./FWLIB/src/stm32f4xx_can.c ****         break;
 1903              		.loc 1 1528 0
 1904 00a8 0069     		ldr	r0, [r0, #16]
 1905              	.LVL185:
 1906 00aa 1021     		movs	r1, #16
 1907              	.LVL186:
 1908 00ac FFF7FEFF 		bl	CheckITStatus
 1909              	.LVL187:
1529:./FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_WKU:
 1910              		.loc 1 1529 0
 1911 00b0 19E0     		b	.L178
 1912              	.LVL188:
 1913              	.L193:
1532:./FWLIB/src/stm32f4xx_can.c ****         break;
 1914              		.loc 1 1532 0
 1915 00b2 4068     		ldr	r0, [r0, #4]
 1916              	.LVL189:
 1917 00b4 0821     		movs	r1, #8
 1918              	.LVL190:
 1919 00b6 FFF7FEFF 		bl	CheckITStatus
 1920              	.LVL191:
1533:./FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_SLK:
 1921              		.loc 1 1533 0
 1922 00ba 14E0     		b	.L178
 1923              	.LVL192:
 1924              	.L194:
1536:./FWLIB/src/stm32f4xx_can.c ****         break;
 1925              		.loc 1 1536 0
 1926 00bc 4068     		ldr	r0, [r0, #4]
 1927              	.LVL193:
 1928 00be 1021     		movs	r1, #16
 1929              	.LVL194:
 1930 00c0 FFF7FEFF 		bl	CheckITStatus
 1931              	.LVL195:
1537:./FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_EWG:
 1932              		.loc 1 1537 0
 1933 00c4 0FE0     		b	.L178
 1934              	.LVL196:
 1935              	.L190:
1544:./FWLIB/src/stm32f4xx_can.c ****         break;
 1936              		.loc 1 1544 0
 1937 00c6 8069     		ldr	r0, [r0, #24]
 1938              	.LVL197:
 1939 00c8 0221     		movs	r1, #2
 1940              	.LVL198:
 1941 00ca FFF7FEFF 		bl	CheckITStatus
ARM GAS  /tmp/ccmLA7br.s 			page 70


 1942              	.LVL199:
1545:./FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_BOF:
 1943              		.loc 1 1545 0
 1944 00ce 0AE0     		b	.L178
 1945              	.LVL200:
 1946              	.L191:
1548:./FWLIB/src/stm32f4xx_can.c ****         break;
 1947              		.loc 1 1548 0
 1948 00d0 8069     		ldr	r0, [r0, #24]
 1949              	.LVL201:
 1950 00d2 0421     		movs	r1, #4
 1951              	.LVL202:
 1952 00d4 FFF7FEFF 		bl	CheckITStatus
 1953              	.LVL203:
1549:./FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_LEC:
 1954              		.loc 1 1549 0
 1955 00d8 05E0     		b	.L178
 1956              	.LVL204:
 1957              	.L188:
1552:./FWLIB/src/stm32f4xx_can.c ****         break;
 1958              		.loc 1 1552 0
 1959 00da 8069     		ldr	r0, [r0, #24]
 1960              	.LVL205:
 1961 00dc 7021     		movs	r1, #112
 1962              	.LVL206:
 1963 00de FFF7FEFF 		bl	CheckITStatus
 1964              	.LVL207:
1553:./FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_ERR:
 1965              		.loc 1 1553 0
 1966 00e2 00E0     		b	.L178
 1967              	.LVL208:
 1968              	.L196:
1567:./FWLIB/src/stm32f4xx_can.c ****   }
 1969              		.loc 1 1567 0
 1970 00e4 0020     		movs	r0, #0
 1971              	.LVL209:
 1972              	.L178:
1572:./FWLIB/src/stm32f4xx_can.c **** 
 1973              		.loc 1 1572 0
 1974 00e6 08BD     		pop	{r3, pc}
 1975              	.L203:
 1976              		.align	2
 1977              	.L202:
 1978 00e8 01010100 		.word	65793
 1979              		.cfi_endproc
 1980              	.LFE134:
 1982              		.section	.text.CAN_ClearITPendingBit,"ax",%progbits
 1983              		.align	1
 1984              		.global	CAN_ClearITPendingBit
 1985              		.syntax unified
 1986              		.thumb
 1987              		.thumb_func
 1988              		.fpu fpv4-sp-d16
 1990              	CAN_ClearITPendingBit:
 1991              	.LFB135:
1594:./FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 1992              		.loc 1 1594 0
ARM GAS  /tmp/ccmLA7br.s 			page 71


 1993              		.cfi_startproc
 1994              		@ args = 0, pretend = 0, frame = 0
 1995              		@ frame_needed = 0, uses_anonymous_args = 0
 1996              		@ link register save eliminated.
 1997              	.LVL210:
1599:./FWLIB/src/stm32f4xx_can.c ****   {
 1998              		.loc 1 1599 0
 1999 0000 B1F5807F 		cmp	r1, #256
 2000 0004 3ED0     		beq	.L206
 2001 0006 11D9     		bls	.L221
 2002 0008 B1F5006F 		cmp	r1, #2048
 2003 000c 40D0     		beq	.L214
 2004 000e 20D9     		bls	.L222
 2005 0010 B1F5803F 		cmp	r1, #65536
 2006 0014 30D0     		beq	.L218
 2007 0016 B1F5003F 		cmp	r1, #131072
 2008 001a 30D0     		beq	.L219
 2009 001c B1F5004F 		cmp	r1, #32768
 2010 0020 03D1     		bne	.L204
1652:./FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
 2011              		.loc 1 1652 0
 2012 0022 0023     		movs	r3, #0
 2013 0024 8361     		str	r3, [r0, #24]
1654:./FWLIB/src/stm32f4xx_can.c ****        /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
 2014              		.loc 1 1654 0
 2015 0026 0423     		movs	r3, #4
 2016 0028 4360     		str	r3, [r0, #4]
 2017              	.L204:
1660:./FWLIB/src/stm32f4xx_can.c ****  /**
 2018              		.loc 1 1660 0
 2019 002a 7047     		bx	lr
 2020              	.L221:
1599:./FWLIB/src/stm32f4xx_can.c ****   {
 2021              		.loc 1 1599 0
 2022 002c 0829     		cmp	r1, #8
 2023 002e 1DD0     		beq	.L208
 2024 0030 07D8     		bhi	.L209
 2025 0032 0129     		cmp	r1, #1
 2026 0034 17D0     		beq	.L210
 2027 0036 0429     		cmp	r1, #4
 2028 0038 02D1     		bne	.L223
1607:./FWLIB/src/stm32f4xx_can.c ****       break;
 2029              		.loc 1 1607 0
 2030 003a 0823     		movs	r3, #8
 2031 003c C360     		str	r3, [r0, #12]
1608:./FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_FOV0:
 2032              		.loc 1 1608 0
 2033 003e 7047     		bx	lr
 2034              	.L223:
 2035 0040 7047     		bx	lr
 2036              	.L209:
1599:./FWLIB/src/stm32f4xx_can.c ****   {
 2037              		.loc 1 1599 0
 2038 0042 2029     		cmp	r1, #32
 2039 0044 15D0     		beq	.L212
 2040 0046 4029     		cmp	r1, #64
 2041 0048 02D1     		bne	.L224
ARM GAS  /tmp/ccmLA7br.s 			page 72


1619:./FWLIB/src/stm32f4xx_can.c ****       break;
 2042              		.loc 1 1619 0
 2043 004a 1023     		movs	r3, #16
 2044 004c 0361     		str	r3, [r0, #16]
1620:./FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_WKU:
 2045              		.loc 1 1620 0
 2046 004e 7047     		bx	lr
 2047              	.L224:
 2048 0050 7047     		bx	lr
 2049              	.L222:
1599:./FWLIB/src/stm32f4xx_can.c ****   {
 2050              		.loc 1 1599 0
 2051 0052 B1F5007F 		cmp	r1, #512
 2052 0056 18D0     		beq	.L216
 2053 0058 B1F5806F 		cmp	r1, #1024
 2054 005c 02D1     		bne	.L225
1641:./FWLIB/src/stm32f4xx_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
 2055              		.loc 1 1641 0
 2056 005e 0423     		movs	r3, #4
 2057 0060 4360     		str	r3, [r0, #4]
1643:./FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_LEC:
 2058              		.loc 1 1643 0
 2059 0062 7047     		bx	lr
 2060              	.L225:
 2061 0064 7047     		bx	lr
 2062              	.L210:
1603:./FWLIB/src/stm32f4xx_can.c ****       break;
 2063              		.loc 1 1603 0
 2064 0066 0D4B     		ldr	r3, .L226
 2065 0068 8360     		str	r3, [r0, #8]
1604:./FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_FF0:
 2066              		.loc 1 1604 0
 2067 006a 7047     		bx	lr
 2068              	.L208:
1611:./FWLIB/src/stm32f4xx_can.c ****       break;
 2069              		.loc 1 1611 0
 2070 006c 1023     		movs	r3, #16
 2071 006e C360     		str	r3, [r0, #12]
1612:./FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_FF1:
 2072              		.loc 1 1612 0
 2073 0070 7047     		bx	lr
 2074              	.L212:
1615:./FWLIB/src/stm32f4xx_can.c ****       break;
 2075              		.loc 1 1615 0
 2076 0072 0823     		movs	r3, #8
 2077 0074 0361     		str	r3, [r0, #16]
1616:./FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_FOV1:
 2078              		.loc 1 1616 0
 2079 0076 7047     		bx	lr
 2080              	.L218:
1623:./FWLIB/src/stm32f4xx_can.c ****       break;
 2081              		.loc 1 1623 0
 2082 0078 0823     		movs	r3, #8
 2083 007a 4360     		str	r3, [r0, #4]
1624:./FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_SLK:
 2084              		.loc 1 1624 0
 2085 007c 7047     		bx	lr
ARM GAS  /tmp/ccmLA7br.s 			page 73


 2086              	.L219:
1627:./FWLIB/src/stm32f4xx_can.c ****       break;
 2087              		.loc 1 1627 0
 2088 007e 1023     		movs	r3, #16
 2089 0080 4360     		str	r3, [r0, #4]
1628:./FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_EWG:
 2090              		.loc 1 1628 0
 2091 0082 7047     		bx	lr
 2092              	.L206:
1631:./FWLIB/src/stm32f4xx_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/ 
 2093              		.loc 1 1631 0
 2094 0084 0423     		movs	r3, #4
 2095 0086 4360     		str	r3, [r0, #4]
1633:./FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_EPV:
 2096              		.loc 1 1633 0
 2097 0088 7047     		bx	lr
 2098              	.L216:
1636:./FWLIB/src/stm32f4xx_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
 2099              		.loc 1 1636 0
 2100 008a 0423     		movs	r3, #4
 2101 008c 4360     		str	r3, [r0, #4]
1638:./FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_BOF:
 2102              		.loc 1 1638 0
 2103 008e 7047     		bx	lr
 2104              	.L214:
1646:./FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
 2105              		.loc 1 1646 0
 2106 0090 0023     		movs	r3, #0
 2107 0092 8361     		str	r3, [r0, #24]
1648:./FWLIB/src/stm32f4xx_can.c ****       break;
 2108              		.loc 1 1648 0
 2109 0094 0423     		movs	r3, #4
 2110 0096 4360     		str	r3, [r0, #4]
1649:./FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_ERR:
 2111              		.loc 1 1649 0
 2112 0098 7047     		bx	lr
 2113              	.L227:
 2114 009a 00BF     		.align	2
 2115              	.L226:
 2116 009c 01010100 		.word	65793
 2117              		.cfi_endproc
 2118              	.LFE135:
 2120              		.text
 2121              	.Letext0:
 2122              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 2123              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 2124              		.file 4 "build/lnInclude/core_cm4.h"
 2125              		.file 5 "build/lnInclude/system_stm32f4xx.h"
 2126              		.file 6 "build/lnInclude/stm32f4xx.h"
 2127              		.file 7 "build/lnInclude/stm32f4xx_can.h"
 2128              		.file 8 "build/lnInclude/stm32f4xx_rcc.h"
ARM GAS  /tmp/ccmLA7br.s 			page 74


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_can.c
     /tmp/ccmLA7br.s:18     .text.CheckITStatus:0000000000000000 $t
     /tmp/ccmLA7br.s:24     .text.CheckITStatus:0000000000000000 CheckITStatus
     /tmp/ccmLA7br.s:51     .text.CAN_DeInit:0000000000000000 $t
     /tmp/ccmLA7br.s:58     .text.CAN_DeInit:0000000000000000 CAN_DeInit
     /tmp/ccmLA7br.s:105    .text.CAN_DeInit:0000000000000034 $d
     /tmp/ccmLA7br.s:110    .text.CAN_Init:0000000000000000 $t
     /tmp/ccmLA7br.s:117    .text.CAN_Init:0000000000000000 CAN_Init
     /tmp/ccmLA7br.s:318    .text.CAN_FilterInit:0000000000000000 $t
     /tmp/ccmLA7br.s:325    .text.CAN_FilterInit:0000000000000000 CAN_FilterInit
     /tmp/ccmLA7br.s:494    .text.CAN_FilterInit:00000000000000f8 $d
     /tmp/ccmLA7br.s:499    .text.CAN_StructInit:0000000000000000 $t
     /tmp/ccmLA7br.s:506    .text.CAN_StructInit:0000000000000000 CAN_StructInit
     /tmp/ccmLA7br.s:546    .text.CAN_SlaveStartBank:0000000000000000 $t
     /tmp/ccmLA7br.s:553    .text.CAN_SlaveStartBank:0000000000000000 CAN_SlaveStartBank
     /tmp/ccmLA7br.s:585    .text.CAN_SlaveStartBank:0000000000000038 $d
     /tmp/ccmLA7br.s:590    .text.CAN_DBGFreeze:0000000000000000 $t
     /tmp/ccmLA7br.s:597    .text.CAN_DBGFreeze:0000000000000000 CAN_DBGFreeze
     /tmp/ccmLA7br.s:623    .text.CAN_TTComModeCmd:0000000000000000 $t
     /tmp/ccmLA7br.s:630    .text.CAN_TTComModeCmd:0000000000000000 CAN_TTComModeCmd
     /tmp/ccmLA7br.s:680    .text.CAN_Transmit:0000000000000000 $t
     /tmp/ccmLA7br.s:687    .text.CAN_Transmit:0000000000000000 CAN_Transmit
     /tmp/ccmLA7br.s:859    .text.CAN_TransmitStatus:0000000000000000 $t
     /tmp/ccmLA7br.s:866    .text.CAN_TransmitStatus:0000000000000000 CAN_TransmitStatus
     /tmp/ccmLA7br.s:962    .text.CAN_TransmitStatus:0000000000000064 $d
     /tmp/ccmLA7br.s:969    .text.CAN_CancelTransmit:0000000000000000 $t
     /tmp/ccmLA7br.s:976    .text.CAN_CancelTransmit:0000000000000000 CAN_CancelTransmit
     /tmp/ccmLA7br.s:1016   .text.CAN_Receive:0000000000000000 $t
     /tmp/ccmLA7br.s:1023   .text.CAN_Receive:0000000000000000 CAN_Receive
     /tmp/ccmLA7br.s:1131   .text.CAN_FIFORelease:0000000000000000 $t
     /tmp/ccmLA7br.s:1138   .text.CAN_FIFORelease:0000000000000000 CAN_FIFORelease
     /tmp/ccmLA7br.s:1164   .text.CAN_MessagePending:0000000000000000 $t
     /tmp/ccmLA7br.s:1171   .text.CAN_MessagePending:0000000000000000 CAN_MessagePending
     /tmp/ccmLA7br.s:1209   .text.CAN_OperatingModeRequest:0000000000000000 $t
     /tmp/ccmLA7br.s:1216   .text.CAN_OperatingModeRequest:0000000000000000 CAN_OperatingModeRequest
     /tmp/ccmLA7br.s:1359   .text.CAN_Sleep:0000000000000000 $t
     /tmp/ccmLA7br.s:1366   .text.CAN_Sleep:0000000000000000 CAN_Sleep
     /tmp/ccmLA7br.s:1399   .text.CAN_WakeUp:0000000000000000 $t
     /tmp/ccmLA7br.s:1406   .text.CAN_WakeUp:0000000000000000 CAN_WakeUp
     /tmp/ccmLA7br.s:1453   .text.CAN_GetLastErrorCode:0000000000000000 $t
     /tmp/ccmLA7br.s:1460   .text.CAN_GetLastErrorCode:0000000000000000 CAN_GetLastErrorCode
     /tmp/ccmLA7br.s:1479   .text.CAN_GetReceiveErrorCounter:0000000000000000 $t
     /tmp/ccmLA7br.s:1486   .text.CAN_GetReceiveErrorCounter:0000000000000000 CAN_GetReceiveErrorCounter
     /tmp/ccmLA7br.s:1505   .text.CAN_GetLSBTransmitErrorCounter:0000000000000000 $t
     /tmp/ccmLA7br.s:1512   .text.CAN_GetLSBTransmitErrorCounter:0000000000000000 CAN_GetLSBTransmitErrorCounter
     /tmp/ccmLA7br.s:1531   .text.CAN_ITConfig:0000000000000000 $t
     /tmp/ccmLA7br.s:1538   .text.CAN_ITConfig:0000000000000000 CAN_ITConfig
     /tmp/ccmLA7br.s:1567   .text.CAN_GetFlagStatus:0000000000000000 $t
     /tmp/ccmLA7br.s:1574   .text.CAN_GetFlagStatus:0000000000000000 CAN_GetFlagStatus
     /tmp/ccmLA7br.s:1687   .text.CAN_ClearFlag:0000000000000000 $t
     /tmp/ccmLA7br.s:1694   .text.CAN_ClearFlag:0000000000000000 CAN_ClearFlag
     /tmp/ccmLA7br.s:1744   .text.CAN_ClearFlag:0000000000000034 $d
     /tmp/ccmLA7br.s:1749   .text.CAN_GetITStatus:0000000000000000 $t
     /tmp/ccmLA7br.s:1756   .text.CAN_GetITStatus:0000000000000000 CAN_GetITStatus
     /tmp/ccmLA7br.s:1978   .text.CAN_GetITStatus:00000000000000e8 $d
     /tmp/ccmLA7br.s:1983   .text.CAN_ClearITPendingBit:0000000000000000 $t
ARM GAS  /tmp/ccmLA7br.s 			page 75


     /tmp/ccmLA7br.s:1990   .text.CAN_ClearITPendingBit:0000000000000000 CAN_ClearITPendingBit
     /tmp/ccmLA7br.s:2116   .text.CAN_ClearITPendingBit:000000000000009c $d

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
