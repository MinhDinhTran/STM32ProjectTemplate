ARM GAS  /tmp/ccinunCO.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_sai.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.SAI_DeInit,"ax",%progbits
  18              		.align	1
  19              		.global	SAI_DeInit
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	SAI_DeInit:
  26              	.LFB112:
  27              		.file 1 "./FWLIB/src/stm32f4xx_sai.c"
   1:./FWLIB/src/stm32f4xx_sai.c **** /**
   2:./FWLIB/src/stm32f4xx_sai.c ****   ******************************************************************************
   3:./FWLIB/src/stm32f4xx_sai.c ****   * @file    stm32f4xx_sai.c
   4:./FWLIB/src/stm32f4xx_sai.c ****   * @author  MCD Application Team
   5:./FWLIB/src/stm32f4xx_sai.c ****   * @version V1.4.0
   6:./FWLIB/src/stm32f4xx_sai.c ****   * @date    04-August-2014  
   7:./FWLIB/src/stm32f4xx_sai.c ****   * @brief   This file provides firmware functions to manage the following 
   8:./FWLIB/src/stm32f4xx_sai.c ****   *          functionalities of the Serial Audio Interface (SAI):
   9:./FWLIB/src/stm32f4xx_sai.c ****   *           + Initialization and Configuration
  10:./FWLIB/src/stm32f4xx_sai.c ****   *           + Data transfers functions
  11:./FWLIB/src/stm32f4xx_sai.c ****   *           + DMA transfers management
  12:./FWLIB/src/stm32f4xx_sai.c ****   *           + Interrupts and flags management 
  13:./FWLIB/src/stm32f4xx_sai.c ****   *           
  14:./FWLIB/src/stm32f4xx_sai.c ****   @verbatim
  15:./FWLIB/src/stm32f4xx_sai.c ****  ===============================================================================
  16:./FWLIB/src/stm32f4xx_sai.c ****                      ##### How to use this driver #####
  17:./FWLIB/src/stm32f4xx_sai.c ****  ===============================================================================
  18:./FWLIB/src/stm32f4xx_sai.c ****     [..] 
  19:./FWLIB/src/stm32f4xx_sai.c ****     
  20:./FWLIB/src/stm32f4xx_sai.c ****        (#) Enable peripheral clock using the following functions 
  21:./FWLIB/src/stm32f4xx_sai.c ****            RCC_APB2PeriphClockCmd(RCC_APB2Periph_SAI1, ENABLE) for SAI1
  22:./FWLIB/src/stm32f4xx_sai.c ****   
  23:./FWLIB/src/stm32f4xx_sai.c ****        (#) For each SAI Block A/B enable SCK, SD, FS and MCLK GPIO clocks 
  24:./FWLIB/src/stm32f4xx_sai.c ****            using RCC_AHB1PeriphClockCmd() function.
  25:./FWLIB/src/stm32f4xx_sai.c ****   
  26:./FWLIB/src/stm32f4xx_sai.c ****        (#) Peripherals alternate function: 
  27:./FWLIB/src/stm32f4xx_sai.c ****            (++) Connect the pin to the desired peripherals' Alternate 
  28:./FWLIB/src/stm32f4xx_sai.c ****                 Function (AF) using GPIO_PinAFConfig() function.
  29:./FWLIB/src/stm32f4xx_sai.c ****            (++) Configure the desired pin in alternate function by:
  30:./FWLIB/src/stm32f4xx_sai.c ****                 GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
  31:./FWLIB/src/stm32f4xx_sai.c ****            (++) Select the type, pull-up/pull-down and output speed via 
ARM GAS  /tmp/ccinunCO.s 			page 2


  32:./FWLIB/src/stm32f4xx_sai.c ****                 GPIO_PuPd, GPIO_OType and GPIO_Speed members
  33:./FWLIB/src/stm32f4xx_sai.c ****            (++) Call GPIO_Init() function
  34:./FWLIB/src/stm32f4xx_sai.c ****            -@@- If an external clock source is used then the I2S CKIN pin should be 
  35:./FWLIB/src/stm32f4xx_sai.c ****                also configured in Alternate function Push-pull pull-up mode.
  36:./FWLIB/src/stm32f4xx_sai.c ****                 
  37:./FWLIB/src/stm32f4xx_sai.c ****       (#) The SAI clock can be generated from different clock source :
  38:./FWLIB/src/stm32f4xx_sai.c ****           PLL I2S, PLL SAI or external clock source.
  39:./FWLIB/src/stm32f4xx_sai.c ****           (++) The PLL I2S is configured using the following functions RCC_PLLI2SConfig(), 
  40:./FWLIB/src/stm32f4xx_sai.c ****                RCC_PLLI2SCmd(ENABLE), RCC_GetFlagStatus(RCC_FLAG_PLLI2SRDY) and 
  41:./FWLIB/src/stm32f4xx_sai.c ****                RCC_SAIPLLI2SClkDivConfig() or;
  42:./FWLIB/src/stm32f4xx_sai.c ****               
  43:./FWLIB/src/stm32f4xx_sai.c ****           (++) The PLL SAI is configured using the following functions RCC_PLLSAIConfig(), 
  44:./FWLIB/src/stm32f4xx_sai.c ****                RCC_PLLSAICmd(ENABLE), RCC_GetFlagStatus(RCC_FLAG_PLLSAIRDY) and 
  45:./FWLIB/src/stm32f4xx_sai.c ****                RCC_SAIPLLSAIClkDivConfig()or;          
  46:./FWLIB/src/stm32f4xx_sai.c ****               
  47:./FWLIB/src/stm32f4xx_sai.c ****           (++) External clock source is configured using the function 
  48:./FWLIB/src/stm32f4xx_sai.c ****                RCC_I2SCLKConfig(RCC_I2S2CLKSource_Ext) and after setting correctly the 
  49:./FWLIB/src/stm32f4xx_sai.c ****                define constant I2S_EXTERNAL_CLOCK_VAL in the stm32f4xx_conf.h file.      
  50:./FWLIB/src/stm32f4xx_sai.c ****                 
  51:./FWLIB/src/stm32f4xx_sai.c ****       (#) Each SAI Block A or B has its own clock generator to make these two blocks 
  52:./FWLIB/src/stm32f4xx_sai.c ****           completely independent. The Clock generator is configured using RCC_SAIBlockACLKConfig() 
  53:./FWLIB/src/stm32f4xx_sai.c ****           RCC_SAIBlockBCLKConfig() functions.
  54:./FWLIB/src/stm32f4xx_sai.c ****                   
  55:./FWLIB/src/stm32f4xx_sai.c ****       (#) Each SAI Block A or B can be configured separetely : 
  56:./FWLIB/src/stm32f4xx_sai.c ****           (++) Program the Master clock divider, Audio mode, Protocol, Data Length, Clock Strobing 
  57:./FWLIB/src/stm32f4xx_sai.c ****                Synchronous mode, Output drive and FIFO Thresold using SAI_Init() function.   
  58:./FWLIB/src/stm32f4xx_sai.c ****                In case of master mode, program the Master clock divider (MCKDIV) using 
  59:./FWLIB/src/stm32f4xx_sai.c ****                the following formula :  
  60:./FWLIB/src/stm32f4xx_sai.c ****                (+++) MCLK_x = SAI_CK_x / (MCKDIV * 2) with MCLK_x = 256 * FS
  61:./FWLIB/src/stm32f4xx_sai.c ****                (+++) FS = SAI_CK_x / (MCKDIV * 2) * 256
  62:./FWLIB/src/stm32f4xx_sai.c ****                (+++) MCKDIV = SAI_CK_x / FS * 512
  63:./FWLIB/src/stm32f4xx_sai.c ****          (++) Program the Frame Length, Frame active Length, FS Definition, FS Polarity, 
  64:./FWLIB/src/stm32f4xx_sai.c ****               FS Offset using SAI_FrameInit() function.    
  65:./FWLIB/src/stm32f4xx_sai.c ****          (++) Program the Slot First Bit Offset, Slot Size, Slot Number, Slot Active 
  66:./FWLIB/src/stm32f4xx_sai.c ****               using SAI_SlotInit() function. 
  67:./FWLIB/src/stm32f4xx_sai.c ****                    
  68:./FWLIB/src/stm32f4xx_sai.c ****       (#) Enable the NVIC and the corresponding interrupt using the function 
  69:./FWLIB/src/stm32f4xx_sai.c ****           SAI_ITConfig() if you need to use interrupt mode. 
  70:./FWLIB/src/stm32f4xx_sai.c ****   
  71:./FWLIB/src/stm32f4xx_sai.c ****       (#) When using the DMA mode 
  72:./FWLIB/src/stm32f4xx_sai.c ****           (++) Configure the DMA using DMA_Init() function
  73:./FWLIB/src/stm32f4xx_sai.c ****           (++) Active the needed channel Request using SAI_DMACmd() function
  74:./FWLIB/src/stm32f4xx_sai.c ****    
  75:./FWLIB/src/stm32f4xx_sai.c ****       (#) Enable the SAI using the SAI_Cmd() function.
  76:./FWLIB/src/stm32f4xx_sai.c ****    
  77:./FWLIB/src/stm32f4xx_sai.c ****       (#) Enable the DMA using the DMA_Cmd() function when using DMA mode. 
  78:./FWLIB/src/stm32f4xx_sai.c ****   
  79:./FWLIB/src/stm32f4xx_sai.c ****       (#) The SAI has some specific functions which can be useful depending 
  80:./FWLIB/src/stm32f4xx_sai.c ****           on the audio protocol selected.  
  81:./FWLIB/src/stm32f4xx_sai.c ****           (++) Enable Mute mode when the audio block is a transmitter using SAI_MuteModeCmd()
  82:./FWLIB/src/stm32f4xx_sai.c ****                function and configure the value transmitted during mute using SAI_MuteValueConfig()
  83:./FWLIB/src/stm32f4xx_sai.c ****           (++) Detect the Mute mode when audio block is a receiver using SAI_MuteFrameCounterConfig
  84:./FWLIB/src/stm32f4xx_sai.c ****           (++) Enable the MONO mode without any data preprocessing in memory when the number
  85:./FWLIB/src/stm32f4xx_sai.c ****                of slot is equal to 2 using SAI_MonoModeConfig() function.
  86:./FWLIB/src/stm32f4xx_sai.c ****           (++) Enable data companding algorithm (U law and A law) using SAI_CompandingModeConfig().
  87:./FWLIB/src/stm32f4xx_sai.c ****           (++) Choose the behavior of the SD line in output when an inactive slot is sent 
  88:./FWLIB/src/stm32f4xx_sai.c ****                on the data line using SAI_TRIStateConfig() function.   
ARM GAS  /tmp/ccinunCO.s 			page 3


  89:./FWLIB/src/stm32f4xx_sai.c ****   [..]               
  90:./FWLIB/src/stm32f4xx_sai.c ****    (@)    In master TX mode: enabling the audio block immediately generates the bit clock 
  91:./FWLIB/src/stm32f4xx_sai.c ****           for the external slaves even if there is no data in the FIFO, However FS signal 
  92:./FWLIB/src/stm32f4xx_sai.c ****           generation is conditioned by the presence of data in the FIFO.
  93:./FWLIB/src/stm32f4xx_sai.c ****                  
  94:./FWLIB/src/stm32f4xx_sai.c ****    (@)    In master RX mode: enabling the audio block immediately generates the bit clock 
  95:./FWLIB/src/stm32f4xx_sai.c ****           and FS signal for the external slaves. 
  96:./FWLIB/src/stm32f4xx_sai.c ****                 
  97:./FWLIB/src/stm32f4xx_sai.c ****    (@)    It is mandatory to respect the following conditions in order to avoid bad SAI behavior: 
  98:./FWLIB/src/stm32f4xx_sai.c ****             (+@)  First bit Offset <= (SLOT size - Data size)
  99:./FWLIB/src/stm32f4xx_sai.c ****             (+@)  Data size <= SLOT size
 100:./FWLIB/src/stm32f4xx_sai.c ****             (+@)  Number of SLOT x SLOT size = Frame length
 101:./FWLIB/src/stm32f4xx_sai.c ****             (+@)  The number of slots should be even when bit FSDEF in the SAI_xFRCR is set.    
 102:./FWLIB/src/stm32f4xx_sai.c ****   
 103:./FWLIB/src/stm32f4xx_sai.c ****     @endverbatim  
 104:./FWLIB/src/stm32f4xx_sai.c **** 
 105:./FWLIB/src/stm32f4xx_sai.c ****   ******************************************************************************
 106:./FWLIB/src/stm32f4xx_sai.c ****   * @attention
 107:./FWLIB/src/stm32f4xx_sai.c ****   *
 108:./FWLIB/src/stm32f4xx_sai.c ****   * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
 109:./FWLIB/src/stm32f4xx_sai.c ****   *
 110:./FWLIB/src/stm32f4xx_sai.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
 111:./FWLIB/src/stm32f4xx_sai.c ****   * You may not use this file except in compliance with the License.
 112:./FWLIB/src/stm32f4xx_sai.c ****   * You may obtain a copy of the License at:
 113:./FWLIB/src/stm32f4xx_sai.c ****   *
 114:./FWLIB/src/stm32f4xx_sai.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
 115:./FWLIB/src/stm32f4xx_sai.c ****   *
 116:./FWLIB/src/stm32f4xx_sai.c ****   * Unless required by applicable law or agreed to in writing, software 
 117:./FWLIB/src/stm32f4xx_sai.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
 118:./FWLIB/src/stm32f4xx_sai.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 119:./FWLIB/src/stm32f4xx_sai.c ****   * See the License for the specific language governing permissions and
 120:./FWLIB/src/stm32f4xx_sai.c ****   * limitations under the License.
 121:./FWLIB/src/stm32f4xx_sai.c ****   *
 122:./FWLIB/src/stm32f4xx_sai.c ****   ******************************************************************************
 123:./FWLIB/src/stm32f4xx_sai.c ****   */ 
 124:./FWLIB/src/stm32f4xx_sai.c **** 
 125:./FWLIB/src/stm32f4xx_sai.c **** /* Includes ------------------------------------------------------------------*/
 126:./FWLIB/src/stm32f4xx_sai.c **** #include "stm32f4xx_sai.h"
 127:./FWLIB/src/stm32f4xx_sai.c **** #include "stm32f4xx_rcc.h"
 128:./FWLIB/src/stm32f4xx_sai.c **** 
 129:./FWLIB/src/stm32f4xx_sai.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 130:./FWLIB/src/stm32f4xx_sai.c ****   * @{
 131:./FWLIB/src/stm32f4xx_sai.c ****   */
 132:./FWLIB/src/stm32f4xx_sai.c **** 
 133:./FWLIB/src/stm32f4xx_sai.c **** /** @defgroup SAI 
 134:./FWLIB/src/stm32f4xx_sai.c ****   * @brief SAI driver modules
 135:./FWLIB/src/stm32f4xx_sai.c ****   * @{
 136:./FWLIB/src/stm32f4xx_sai.c ****   */ 
 137:./FWLIB/src/stm32f4xx_sai.c **** 
 138:./FWLIB/src/stm32f4xx_sai.c **** /* Private typedef -----------------------------------------------------------*/
 139:./FWLIB/src/stm32f4xx_sai.c **** /* Private define ------------------------------------------------------------*/
 140:./FWLIB/src/stm32f4xx_sai.c **** 
 141:./FWLIB/src/stm32f4xx_sai.c **** /* *SAI registers Masks */
 142:./FWLIB/src/stm32f4xx_sai.c **** #define CR1_CLEAR_MASK            ((uint32_t)0xFF07C010)
 143:./FWLIB/src/stm32f4xx_sai.c **** #define FRCR_CLEAR_MASK           ((uint32_t)0xFFF88000)
 144:./FWLIB/src/stm32f4xx_sai.c **** #define SLOTR_CLEAR_MASK          ((uint32_t)0x0000F020)
 145:./FWLIB/src/stm32f4xx_sai.c **** 
ARM GAS  /tmp/ccinunCO.s 			page 4


 146:./FWLIB/src/stm32f4xx_sai.c **** /* Private macro -------------------------------------------------------------*/
 147:./FWLIB/src/stm32f4xx_sai.c **** /* Private variables ---------------------------------------------------------*/
 148:./FWLIB/src/stm32f4xx_sai.c **** /* Private function prototypes -----------------------------------------------*/
 149:./FWLIB/src/stm32f4xx_sai.c **** /* Private functions ---------------------------------------------------------*/
 150:./FWLIB/src/stm32f4xx_sai.c **** 
 151:./FWLIB/src/stm32f4xx_sai.c **** /** @defgroup SAI_Private_Functions
 152:./FWLIB/src/stm32f4xx_sai.c ****   * @{
 153:./FWLIB/src/stm32f4xx_sai.c ****   */
 154:./FWLIB/src/stm32f4xx_sai.c **** 
 155:./FWLIB/src/stm32f4xx_sai.c **** /** @defgroup SAI_Group1 Initialization and Configuration functions
 156:./FWLIB/src/stm32f4xx_sai.c ****  *  @brief   Initialization and Configuration functions 
 157:./FWLIB/src/stm32f4xx_sai.c ****  *
 158:./FWLIB/src/stm32f4xx_sai.c **** @verbatim   
 159:./FWLIB/src/stm32f4xx_sai.c ****  ===============================================================================
 160:./FWLIB/src/stm32f4xx_sai.c ****             ##### Initialization and Configuration functions #####
 161:./FWLIB/src/stm32f4xx_sai.c ****  ===============================================================================  
 162:./FWLIB/src/stm32f4xx_sai.c ****   [..]
 163:./FWLIB/src/stm32f4xx_sai.c ****   This section provides a set of functions allowing to initialize the SAI Audio 
 164:./FWLIB/src/stm32f4xx_sai.c ****   Block Mode, Audio Protocol, Data size, Synchronization between audio block, 
 165:./FWLIB/src/stm32f4xx_sai.c ****   Master clock Divider, Fifo threshold, Frame configuration, slot configuration,
 166:./FWLIB/src/stm32f4xx_sai.c ****   Tristate mode, Companding mode and Mute mode.  
 167:./FWLIB/src/stm32f4xx_sai.c ****   [..] 
 168:./FWLIB/src/stm32f4xx_sai.c ****   The SAI_Init(), SAI_FrameInit() and SAI_SlotInit() functions follows the SAI Block
 169:./FWLIB/src/stm32f4xx_sai.c ****   configuration procedures for Master mode and Slave mode (details for these procedures 
 170:./FWLIB/src/stm32f4xx_sai.c ****   are available in reference manual(RM0090).
 171:./FWLIB/src/stm32f4xx_sai.c ****   
 172:./FWLIB/src/stm32f4xx_sai.c **** @endverbatim
 173:./FWLIB/src/stm32f4xx_sai.c ****   * @{
 174:./FWLIB/src/stm32f4xx_sai.c ****   */
 175:./FWLIB/src/stm32f4xx_sai.c **** 
 176:./FWLIB/src/stm32f4xx_sai.c **** /**
 177:./FWLIB/src/stm32f4xx_sai.c ****   * @brief  Deinitialize the SAIx peripheral registers to their default reset values.
 178:./FWLIB/src/stm32f4xx_sai.c ****   * @param  SAIx: To select the SAIx peripheral, where x can be the different instances 
 179:./FWLIB/src/stm32f4xx_sai.c ****   *                     
 180:./FWLIB/src/stm32f4xx_sai.c ****   * @retval None
 181:./FWLIB/src/stm32f4xx_sai.c ****   */
 182:./FWLIB/src/stm32f4xx_sai.c **** void SAI_DeInit(SAI_TypeDef* SAIx)
 183:./FWLIB/src/stm32f4xx_sai.c **** {
  28              		.loc 1 183 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 08B5     		push	{r3, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 3, -8
  37              		.cfi_offset 14, -4
 184:./FWLIB/src/stm32f4xx_sai.c ****   /* Check the parameters */
 185:./FWLIB/src/stm32f4xx_sai.c ****   assert_param(IS_SAI_PERIPH(SAIx));
 186:./FWLIB/src/stm32f4xx_sai.c **** 
 187:./FWLIB/src/stm32f4xx_sai.c ****   /* Enable SAI1 reset state */
 188:./FWLIB/src/stm32f4xx_sai.c ****   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SAI1, ENABLE);
  38              		.loc 1 188 0
  39 0002 0121     		movs	r1, #1
  40 0004 4FF48000 		mov	r0, #4194304
  41              	.LVL1:
ARM GAS  /tmp/ccinunCO.s 			page 5


  42 0008 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  43              	.LVL2:
 189:./FWLIB/src/stm32f4xx_sai.c ****   /* Release SAI1 from reset state */
 190:./FWLIB/src/stm32f4xx_sai.c ****   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SAI1, DISABLE);  
  44              		.loc 1 190 0
  45 000c 0021     		movs	r1, #0
  46 000e 4FF48000 		mov	r0, #4194304
  47 0012 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  48              	.LVL3:
 191:./FWLIB/src/stm32f4xx_sai.c **** }
  49              		.loc 1 191 0
  50 0016 08BD     		pop	{r3, pc}
  51              		.cfi_endproc
  52              	.LFE112:
  54              		.section	.text.SAI_Init,"ax",%progbits
  55              		.align	1
  56              		.global	SAI_Init
  57              		.syntax unified
  58              		.thumb
  59              		.thumb_func
  60              		.fpu fpv4-sp-d16
  62              	SAI_Init:
  63              	.LFB113:
 192:./FWLIB/src/stm32f4xx_sai.c **** 
 193:./FWLIB/src/stm32f4xx_sai.c **** /**
 194:./FWLIB/src/stm32f4xx_sai.c ****   * @brief  Initializes the SAI Block x peripheral according to the specified 
 195:./FWLIB/src/stm32f4xx_sai.c ****   *         parameters in the SAI_InitStruct.
 196:./FWLIB/src/stm32f4xx_sai.c ****   *         
 197:./FWLIB/src/stm32f4xx_sai.c ****   * @note   SAI clock is generated from a specific output of the PLLSAI or a specific  
 198:./FWLIB/src/stm32f4xx_sai.c ****   *         output of the PLLI2S or from an alternate function bypassing the PLL I2S.
 199:./FWLIB/src/stm32f4xx_sai.c ****   *        
 200:./FWLIB/src/stm32f4xx_sai.c ****   * @param  SAI_Block_x: where x can be A or B to select the SAI Block peripheral.
 201:./FWLIB/src/stm32f4xx_sai.c ****   * @param  SAI_InitStruct: pointer to a SAI_InitTypeDef structure that
 202:./FWLIB/src/stm32f4xx_sai.c ****   *         contains the configuration information for the specified SAI Block peripheral.         
 203:./FWLIB/src/stm32f4xx_sai.c ****   * @retval None
 204:./FWLIB/src/stm32f4xx_sai.c ****   */
 205:./FWLIB/src/stm32f4xx_sai.c **** void SAI_Init(SAI_Block_TypeDef* SAI_Block_x, SAI_InitTypeDef* SAI_InitStruct)
 206:./FWLIB/src/stm32f4xx_sai.c **** {
  64              		.loc 1 206 0
  65              		.cfi_startproc
  66              		@ args = 0, pretend = 0, frame = 0
  67              		@ frame_needed = 0, uses_anonymous_args = 0
  68              		@ link register save eliminated.
  69              	.LVL4:
  70 0000 10B4     		push	{r4}
  71              	.LCFI1:
  72              		.cfi_def_cfa_offset 4
  73              		.cfi_offset 4, -4
  74              	.LVL5:
 207:./FWLIB/src/stm32f4xx_sai.c ****   uint32_t tmpreg = 0;
 208:./FWLIB/src/stm32f4xx_sai.c ****   
 209:./FWLIB/src/stm32f4xx_sai.c ****   /* Check the parameters */
 210:./FWLIB/src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
 211:./FWLIB/src/stm32f4xx_sai.c ****   
 212:./FWLIB/src/stm32f4xx_sai.c ****   /* Check the SAI Block parameters */
 213:./FWLIB/src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_MODE(SAI_InitStruct->SAI_AudioMode));
 214:./FWLIB/src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_PROTOCOL(SAI_InitStruct->SAI_Protocol));
ARM GAS  /tmp/ccinunCO.s 			page 6


 215:./FWLIB/src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_DATASIZE(SAI_InitStruct->SAI_DataSize));
 216:./FWLIB/src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_FIRST_BIT(SAI_InitStruct->SAI_FirstBit));
 217:./FWLIB/src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_CLOCK_STROBING(SAI_InitStruct->SAI_ClockStrobing));
 218:./FWLIB/src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_SYNCHRO(SAI_InitStruct->SAI_Synchro));
 219:./FWLIB/src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_OUTPUT_DRIVE(SAI_InitStruct->SAI_OUTDRIV));
 220:./FWLIB/src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_NODIVIDER(SAI_InitStruct->SAI_NoDivider));
 221:./FWLIB/src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(SAI_InitStruct->SAI_MasterDivider));
 222:./FWLIB/src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_FIFO_THRESHOLD(SAI_InitStruct->SAI_FIFOThreshold));
 223:./FWLIB/src/stm32f4xx_sai.c **** 
 224:./FWLIB/src/stm32f4xx_sai.c ****   /* SAI Block_x CR1 Configuration */
 225:./FWLIB/src/stm32f4xx_sai.c ****   /* Get the SAI Block_x CR1 value */
 226:./FWLIB/src/stm32f4xx_sai.c ****   tmpreg = SAI_Block_x->CR1;
  75              		.loc 1 226 0
  76 0002 0368     		ldr	r3, [r0]
  77              	.LVL6:
 227:./FWLIB/src/stm32f4xx_sai.c ****   /* Clear MODE, PRTCFG, DS, LSBFIRST, CKSTR, SYNCEN, OUTDRIV, NODIV, and MCKDIV bits */
 228:./FWLIB/src/stm32f4xx_sai.c ****   tmpreg &= CR1_CLEAR_MASK;
  78              		.loc 1 228 0
  79 0004 0F4A     		ldr	r2, .L5
  80 0006 1A40     		ands	r2, r2, r3
  81              	.LVL7:
 229:./FWLIB/src/stm32f4xx_sai.c ****   /* Configure SAI_Block_x: Audio mode, Protocol, Data Size, first transmitted bit, Clock strobing 
 230:./FWLIB/src/stm32f4xx_sai.c ****      edge, Synchronization mode, Output drive, Master Divider and FIFO level */  
 231:./FWLIB/src/stm32f4xx_sai.c ****   /* Set MODE bits according to SAI_AudioMode value       */
 232:./FWLIB/src/stm32f4xx_sai.c ****   /* Set PRTCFG bits according to SAI_Protocol value      */
 233:./FWLIB/src/stm32f4xx_sai.c ****   /* Set DS bits according to SAI_DataSize value          */
 234:./FWLIB/src/stm32f4xx_sai.c ****   /* Set LSBFIRST bit according to SAI_FirstBit value     */
 235:./FWLIB/src/stm32f4xx_sai.c ****   /* Set CKSTR bit according to SAI_ClockStrobing value   */
 236:./FWLIB/src/stm32f4xx_sai.c ****   /* Set SYNCEN bit according to SAI_Synchro value        */
 237:./FWLIB/src/stm32f4xx_sai.c ****   /* Set OUTDRIV bit according to SAI_OUTDRIV value       */
 238:./FWLIB/src/stm32f4xx_sai.c ****   /* Set NODIV bit according to SAI_NoDivider value       */
 239:./FWLIB/src/stm32f4xx_sai.c ****   /* Set MCKDIV bits according to SAI_MasterDivider value */
 240:./FWLIB/src/stm32f4xx_sai.c ****   tmpreg |= (uint32_t)(SAI_InitStruct->SAI_AudioMode     | SAI_InitStruct->SAI_Protocol  |
  82              		.loc 1 240 0
  83 0008 0B68     		ldr	r3, [r1]
  84 000a 4C68     		ldr	r4, [r1, #4]
  85 000c 2343     		orrs	r3, r3, r4
 241:./FWLIB/src/stm32f4xx_sai.c ****                        SAI_InitStruct->SAI_DataSize      | SAI_InitStruct->SAI_FirstBit  |  
  86              		.loc 1 241 0
  87 000e 8C68     		ldr	r4, [r1, #8]
 240:./FWLIB/src/stm32f4xx_sai.c ****                        SAI_InitStruct->SAI_DataSize      | SAI_InitStruct->SAI_FirstBit  |  
  88              		.loc 1 240 0
  89 0010 2343     		orrs	r3, r3, r4
  90              		.loc 1 241 0
  91 0012 CC68     		ldr	r4, [r1, #12]
  92 0014 2343     		orrs	r3, r3, r4
 242:./FWLIB/src/stm32f4xx_sai.c ****                        SAI_InitStruct->SAI_ClockStrobing | SAI_InitStruct->SAI_Synchro   |  
  93              		.loc 1 242 0
  94 0016 0C69     		ldr	r4, [r1, #16]
 241:./FWLIB/src/stm32f4xx_sai.c ****                        SAI_InitStruct->SAI_DataSize      | SAI_InitStruct->SAI_FirstBit  |  
  95              		.loc 1 241 0
  96 0018 2343     		orrs	r3, r3, r4
  97              		.loc 1 242 0
  98 001a 4C69     		ldr	r4, [r1, #20]
  99 001c 2343     		orrs	r3, r3, r4
 243:./FWLIB/src/stm32f4xx_sai.c ****                        SAI_InitStruct->SAI_OUTDRIV       | SAI_InitStruct->SAI_NoDivider | 
 100              		.loc 1 243 0
ARM GAS  /tmp/ccinunCO.s 			page 7


 101 001e 8C69     		ldr	r4, [r1, #24]
 242:./FWLIB/src/stm32f4xx_sai.c ****                        SAI_InitStruct->SAI_ClockStrobing | SAI_InitStruct->SAI_Synchro   |  
 102              		.loc 1 242 0
 103 0020 2343     		orrs	r3, r3, r4
 104              		.loc 1 243 0
 105 0022 CC69     		ldr	r4, [r1, #28]
 106 0024 2343     		orrs	r3, r3, r4
 244:./FWLIB/src/stm32f4xx_sai.c ****                        (uint32_t)((SAI_InitStruct->SAI_MasterDivider) << 20));
 107              		.loc 1 244 0
 108 0026 0C6A     		ldr	r4, [r1, #32]
 240:./FWLIB/src/stm32f4xx_sai.c ****                        SAI_InitStruct->SAI_DataSize      | SAI_InitStruct->SAI_FirstBit  |  
 109              		.loc 1 240 0
 110 0028 43EA0453 		orr	r3, r3, r4, lsl #20
 111 002c 1343     		orrs	r3, r3, r2
 112              	.LVL8:
 245:./FWLIB/src/stm32f4xx_sai.c ****   /* Write to SAI_Block_x CR1 */
 246:./FWLIB/src/stm32f4xx_sai.c ****   SAI_Block_x->CR1 = tmpreg;
 113              		.loc 1 246 0
 114 002e 0360     		str	r3, [r0]
 247:./FWLIB/src/stm32f4xx_sai.c ****   
 248:./FWLIB/src/stm32f4xx_sai.c ****   /* SAI Block_x CR2 Configuration */
 249:./FWLIB/src/stm32f4xx_sai.c ****   /* Get the SAIBlock_x CR2 value */
 250:./FWLIB/src/stm32f4xx_sai.c ****   tmpreg = SAI_Block_x->CR2;
 115              		.loc 1 250 0
 116 0030 4268     		ldr	r2, [r0, #4]
 117              	.LVL9:
 251:./FWLIB/src/stm32f4xx_sai.c ****   /* Clear FTH bits */
 252:./FWLIB/src/stm32f4xx_sai.c ****   tmpreg &= ~(SAI_xCR2_FTH);
 118              		.loc 1 252 0
 119 0032 22F00302 		bic	r2, r2, #3
 120              	.LVL10:
 253:./FWLIB/src/stm32f4xx_sai.c ****   /* Configure the FIFO Level */
 254:./FWLIB/src/stm32f4xx_sai.c ****   /* Set FTH bits according to SAI_FIFOThreshold value */ 
 255:./FWLIB/src/stm32f4xx_sai.c ****   tmpreg |= (uint32_t)(SAI_InitStruct->SAI_FIFOThreshold);
 121              		.loc 1 255 0
 122 0036 4B6A     		ldr	r3, [r1, #36]
 123 0038 1343     		orrs	r3, r3, r2
 124              	.LVL11:
 256:./FWLIB/src/stm32f4xx_sai.c ****   /* Write to SAI_Block_x CR2 */
 257:./FWLIB/src/stm32f4xx_sai.c ****   SAI_Block_x->CR2 = tmpreg;
 125              		.loc 1 257 0
 126 003a 4360     		str	r3, [r0, #4]
 258:./FWLIB/src/stm32f4xx_sai.c **** }
 127              		.loc 1 258 0
 128 003c 5DF8044B 		ldr	r4, [sp], #4
 129              	.LCFI2:
 130              		.cfi_restore 4
 131              		.cfi_def_cfa_offset 0
 132 0040 7047     		bx	lr
 133              	.L6:
 134 0042 00BF     		.align	2
 135              	.L5:
 136 0044 10C007FF 		.word	-16269296
 137              		.cfi_endproc
 138              	.LFE113:
 140              		.section	.text.SAI_FrameInit,"ax",%progbits
 141              		.align	1
ARM GAS  /tmp/ccinunCO.s 			page 8


 142              		.global	SAI_FrameInit
 143              		.syntax unified
 144              		.thumb
 145              		.thumb_func
 146              		.fpu fpv4-sp-d16
 148              	SAI_FrameInit:
 149              	.LFB114:
 259:./FWLIB/src/stm32f4xx_sai.c **** 
 260:./FWLIB/src/stm32f4xx_sai.c **** /**
 261:./FWLIB/src/stm32f4xx_sai.c ****   * @brief  Initializes the SAI Block Audio frame according to the specified 
 262:./FWLIB/src/stm32f4xx_sai.c ****   *         parameters in the SAI_FrameInitStruct.
 263:./FWLIB/src/stm32f4xx_sai.c ****   *         
 264:./FWLIB/src/stm32f4xx_sai.c ****   * @note   this function has no meaning if the AC'97 or SPDIF audio protocol 
 265:./FWLIB/src/stm32f4xx_sai.c ****   *         are selected. 
 266:./FWLIB/src/stm32f4xx_sai.c ****   *               
 267:./FWLIB/src/stm32f4xx_sai.c ****   * @param  SAI_Block_x: where x can be A or B to select the SAI Block peripheral.
 268:./FWLIB/src/stm32f4xx_sai.c ****   * @param  SAI_FrameInitStruct: pointer to an SAI_FrameInitTypeDef structure that
 269:./FWLIB/src/stm32f4xx_sai.c ****   *         contains the configuration of audio frame for a specified SAI Block                    
 270:./FWLIB/src/stm32f4xx_sai.c ****   * @retval None
 271:./FWLIB/src/stm32f4xx_sai.c ****   */
 272:./FWLIB/src/stm32f4xx_sai.c **** void SAI_FrameInit(SAI_Block_TypeDef* SAI_Block_x, SAI_FrameInitTypeDef* SAI_FrameInitStruct)
 273:./FWLIB/src/stm32f4xx_sai.c **** {
 150              		.loc 1 273 0
 151              		.cfi_startproc
 152              		@ args = 0, pretend = 0, frame = 0
 153              		@ frame_needed = 0, uses_anonymous_args = 0
 154              		@ link register save eliminated.
 155              	.LVL12:
 156 0000 10B4     		push	{r4}
 157              	.LCFI3:
 158              		.cfi_def_cfa_offset 4
 159              		.cfi_offset 4, -4
 160              	.LVL13:
 274:./FWLIB/src/stm32f4xx_sai.c ****   uint32_t tmpreg = 0;
 275:./FWLIB/src/stm32f4xx_sai.c ****   
 276:./FWLIB/src/stm32f4xx_sai.c ****   /* Check the parameters */
 277:./FWLIB/src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
 278:./FWLIB/src/stm32f4xx_sai.c ****   
 279:./FWLIB/src/stm32f4xx_sai.c ****   /* Check the SAI Block frame parameters */
 280:./FWLIB/src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_FRAME_LENGTH(SAI_FrameInitStruct->SAI_FrameLength));
 281:./FWLIB/src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_ACTIVE_FRAME(SAI_FrameInitStruct->SAI_ActiveFrameLength));
 282:./FWLIB/src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_FS_DEFINITION(SAI_FrameInitStruct->SAI_FSDefinition));
 283:./FWLIB/src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_FS_POLARITY(SAI_FrameInitStruct->SAI_FSPolarity));
 284:./FWLIB/src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_FS_OFFSET(SAI_FrameInitStruct->SAI_FSOffset));
 285:./FWLIB/src/stm32f4xx_sai.c **** 
 286:./FWLIB/src/stm32f4xx_sai.c ****   /* SAI Block_x FRCR Configuration */
 287:./FWLIB/src/stm32f4xx_sai.c ****   /* Get the SAI Block_x FRCR value */
 288:./FWLIB/src/stm32f4xx_sai.c ****   tmpreg = SAI_Block_x->FRCR;
 161              		.loc 1 288 0
 162 0002 8368     		ldr	r3, [r0, #8]
 163              	.LVL14:
 289:./FWLIB/src/stm32f4xx_sai.c ****   /* Clear FRL, FSALL, FSDEF, FSPOL, FSOFF bits */
 290:./FWLIB/src/stm32f4xx_sai.c ****   tmpreg &= FRCR_CLEAR_MASK;
 164              		.loc 1 290 0
 165 0004 094A     		ldr	r2, .L9
 166 0006 1A40     		ands	r2, r2, r3
 167              	.LVL15:
ARM GAS  /tmp/ccinunCO.s 			page 9


 291:./FWLIB/src/stm32f4xx_sai.c ****   /* Configure SAI_Block_x Frame: Frame Length, Active Frame Length, Frame Synchronization
 292:./FWLIB/src/stm32f4xx_sai.c ****      Definition, Frame Synchronization Polarity and Frame Synchronization Polarity */
 293:./FWLIB/src/stm32f4xx_sai.c ****   /* Set FRL bits according to SAI_FrameLength value         */
 294:./FWLIB/src/stm32f4xx_sai.c ****   /* Set FSALL bits according to SAI_ActiveFrameLength value */
 295:./FWLIB/src/stm32f4xx_sai.c ****   /* Set FSDEF bit according to SAI_FSDefinition value       */
 296:./FWLIB/src/stm32f4xx_sai.c ****   /* Set FSPOL bit according to SAI_FSPolarity value         */
 297:./FWLIB/src/stm32f4xx_sai.c ****   /* Set FSOFF bit according to SAI_FSOffset value           */
 298:./FWLIB/src/stm32f4xx_sai.c ****   tmpreg |= (uint32_t)((uint32_t)(SAI_FrameInitStruct->SAI_FrameLength - 1)  | 
 168              		.loc 1 298 0
 169 0008 0B68     		ldr	r3, [r1]
 170 000a 013B     		subs	r3, r3, #1
 299:./FWLIB/src/stm32f4xx_sai.c ****                        SAI_FrameInitStruct->SAI_FSOffset     | 
 171              		.loc 1 299 0
 172 000c 0C69     		ldr	r4, [r1, #16]
 298:./FWLIB/src/stm32f4xx_sai.c ****                        SAI_FrameInitStruct->SAI_FSOffset     | 
 173              		.loc 1 298 0
 174 000e 2343     		orrs	r3, r3, r4
 300:./FWLIB/src/stm32f4xx_sai.c ****                        SAI_FrameInitStruct->SAI_FSDefinition |    
 175              		.loc 1 300 0
 176 0010 8C68     		ldr	r4, [r1, #8]
 299:./FWLIB/src/stm32f4xx_sai.c ****                        SAI_FrameInitStruct->SAI_FSOffset     | 
 177              		.loc 1 299 0
 178 0012 2343     		orrs	r3, r3, r4
 301:./FWLIB/src/stm32f4xx_sai.c ****                        SAI_FrameInitStruct->SAI_FSPolarity   |                        
 179              		.loc 1 301 0
 180 0014 CC68     		ldr	r4, [r1, #12]
 300:./FWLIB/src/stm32f4xx_sai.c ****                        SAI_FrameInitStruct->SAI_FSDefinition |    
 181              		.loc 1 300 0
 182 0016 2343     		orrs	r3, r3, r4
 302:./FWLIB/src/stm32f4xx_sai.c ****                        (uint32_t)((SAI_FrameInitStruct->SAI_ActiveFrameLength - 1) << 8));
 183              		.loc 1 302 0
 184 0018 4968     		ldr	r1, [r1, #4]
 185              	.LVL16:
 186 001a 0139     		subs	r1, r1, #1
 298:./FWLIB/src/stm32f4xx_sai.c ****                        SAI_FrameInitStruct->SAI_FSOffset     | 
 187              		.loc 1 298 0
 188 001c 43EA0123 		orr	r3, r3, r1, lsl #8
 189 0020 1343     		orrs	r3, r3, r2
 190              	.LVL17:
 303:./FWLIB/src/stm32f4xx_sai.c ****                        
 304:./FWLIB/src/stm32f4xx_sai.c ****   /* Write to SAI_Block_x FRCR */
 305:./FWLIB/src/stm32f4xx_sai.c ****   SAI_Block_x->FRCR = tmpreg;
 191              		.loc 1 305 0
 192 0022 8360     		str	r3, [r0, #8]
 306:./FWLIB/src/stm32f4xx_sai.c **** }
 193              		.loc 1 306 0
 194 0024 5DF8044B 		ldr	r4, [sp], #4
 195              	.LCFI4:
 196              		.cfi_restore 4
 197              		.cfi_def_cfa_offset 0
 198 0028 7047     		bx	lr
 199              	.L10:
 200 002a 00BF     		.align	2
 201              	.L9:
 202 002c 0080F8FF 		.word	-491520
 203              		.cfi_endproc
 204              	.LFE114:
ARM GAS  /tmp/ccinunCO.s 			page 10


 206              		.section	.text.SAI_SlotInit,"ax",%progbits
 207              		.align	1
 208              		.global	SAI_SlotInit
 209              		.syntax unified
 210              		.thumb
 211              		.thumb_func
 212              		.fpu fpv4-sp-d16
 214              	SAI_SlotInit:
 215              	.LFB115:
 307:./FWLIB/src/stm32f4xx_sai.c **** 
 308:./FWLIB/src/stm32f4xx_sai.c **** /**
 309:./FWLIB/src/stm32f4xx_sai.c ****   * @brief  Initializes the SAI Block audio Slot according to the specified 
 310:./FWLIB/src/stm32f4xx_sai.c ****   *         parameters in the SAI_SlotInitStruct.
 311:./FWLIB/src/stm32f4xx_sai.c ****   *         
 312:./FWLIB/src/stm32f4xx_sai.c ****   * @note   this function has no meaning if the AC'97 or SPDIF audio protocol 
 313:./FWLIB/src/stm32f4xx_sai.c ****   *         are selected.
 314:./FWLIB/src/stm32f4xx_sai.c ****   *               
 315:./FWLIB/src/stm32f4xx_sai.c ****   * @param  SAI_Block_x: where x can be A or B to select the SAI Block peripheral.
 316:./FWLIB/src/stm32f4xx_sai.c ****   * @param  SAI_SlotInitStruct: pointer to an SAI_SlotInitTypeDef structure that
 317:./FWLIB/src/stm32f4xx_sai.c ****   *         contains the configuration of audio slot for a specified SAI Block                     
 318:./FWLIB/src/stm32f4xx_sai.c ****   * @retval None
 319:./FWLIB/src/stm32f4xx_sai.c ****   */
 320:./FWLIB/src/stm32f4xx_sai.c **** void SAI_SlotInit(SAI_Block_TypeDef* SAI_Block_x, SAI_SlotInitTypeDef* SAI_SlotInitStruct)
 321:./FWLIB/src/stm32f4xx_sai.c **** {
 216              		.loc 1 321 0
 217              		.cfi_startproc
 218              		@ args = 0, pretend = 0, frame = 0
 219              		@ frame_needed = 0, uses_anonymous_args = 0
 220              		@ link register save eliminated.
 221              	.LVL18:
 222 0000 10B4     		push	{r4}
 223              	.LCFI5:
 224              		.cfi_def_cfa_offset 4
 225              		.cfi_offset 4, -4
 226              	.LVL19:
 322:./FWLIB/src/stm32f4xx_sai.c ****   uint32_t tmpreg = 0;
 323:./FWLIB/src/stm32f4xx_sai.c ****   
 324:./FWLIB/src/stm32f4xx_sai.c ****   /* Check the parameters */
 325:./FWLIB/src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
 326:./FWLIB/src/stm32f4xx_sai.c ****   
 327:./FWLIB/src/stm32f4xx_sai.c ****   /* Check the SAI Block Slot parameters */
 328:./FWLIB/src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(SAI_SlotInitStruct->SAI_FirstBitOffset));
 329:./FWLIB/src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_SLOT_SIZE(SAI_SlotInitStruct->SAI_SlotSize));
 330:./FWLIB/src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_SLOT_NUMBER(SAI_SlotInitStruct->SAI_SlotNumber));
 331:./FWLIB/src/stm32f4xx_sai.c ****   assert_param(IS_SAI_SLOT_ACTIVE(SAI_SlotInitStruct->SAI_SlotActive));
 332:./FWLIB/src/stm32f4xx_sai.c **** 
 333:./FWLIB/src/stm32f4xx_sai.c ****   /* SAI Block_x SLOTR Configuration */
 334:./FWLIB/src/stm32f4xx_sai.c ****   /* Get the SAI Block_x SLOTR value */
 335:./FWLIB/src/stm32f4xx_sai.c ****   tmpreg = SAI_Block_x->SLOTR;
 227              		.loc 1 335 0
 228 0002 C268     		ldr	r2, [r0, #12]
 229              	.LVL20:
 336:./FWLIB/src/stm32f4xx_sai.c ****   /* Clear FBOFF, SLOTSZ, NBSLOT, SLOTEN bits */
 337:./FWLIB/src/stm32f4xx_sai.c ****   tmpreg &= SLOTR_CLEAR_MASK;
 230              		.loc 1 337 0
 231 0004 22F47D62 		bic	r2, r2, #4048
 232              	.LVL21:
ARM GAS  /tmp/ccinunCO.s 			page 11


 233 0008 22F00F02 		bic	r2, r2, #15
 234 000c 1204     		lsls	r2, r2, #16
 235 000e 120C     		lsrs	r2, r2, #16
 236              	.LVL22:
 338:./FWLIB/src/stm32f4xx_sai.c ****   /* Configure SAI_Block_x Slot: First bit offset, Slot size, Number of Slot in  
 339:./FWLIB/src/stm32f4xx_sai.c ****      audio frame and slots activated in audio frame */
 340:./FWLIB/src/stm32f4xx_sai.c ****   /* Set FBOFF bits according to SAI_FirstBitOffset value  */
 341:./FWLIB/src/stm32f4xx_sai.c ****   /* Set SLOTSZ bits according to SAI_SlotSize value       */
 342:./FWLIB/src/stm32f4xx_sai.c ****   /* Set NBSLOT bits according to SAI_SlotNumber value     */
 343:./FWLIB/src/stm32f4xx_sai.c ****   /* Set SLOTEN bits according to SAI_SlotActive value     */
 344:./FWLIB/src/stm32f4xx_sai.c ****   tmpreg |= (uint32_t)(SAI_SlotInitStruct->SAI_FirstBitOffset | 
 237              		.loc 1 344 0
 238 0010 0B68     		ldr	r3, [r1]
 345:./FWLIB/src/stm32f4xx_sai.c ****                        SAI_SlotInitStruct->SAI_SlotSize       | 
 239              		.loc 1 345 0
 240 0012 4C68     		ldr	r4, [r1, #4]
 344:./FWLIB/src/stm32f4xx_sai.c ****                        SAI_SlotInitStruct->SAI_SlotSize       | 
 241              		.loc 1 344 0
 242 0014 2343     		orrs	r3, r3, r4
 346:./FWLIB/src/stm32f4xx_sai.c ****                        SAI_SlotInitStruct->SAI_SlotActive     |    
 243              		.loc 1 346 0
 244 0016 CC68     		ldr	r4, [r1, #12]
 345:./FWLIB/src/stm32f4xx_sai.c ****                        SAI_SlotInitStruct->SAI_SlotSize       | 
 245              		.loc 1 345 0
 246 0018 2343     		orrs	r3, r3, r4
 347:./FWLIB/src/stm32f4xx_sai.c ****                        (uint32_t)((SAI_SlotInitStruct->SAI_SlotNumber - 1) <<  8));
 247              		.loc 1 347 0
 248 001a 8968     		ldr	r1, [r1, #8]
 249              	.LVL23:
 250 001c 0139     		subs	r1, r1, #1
 344:./FWLIB/src/stm32f4xx_sai.c ****                        SAI_SlotInitStruct->SAI_SlotSize       | 
 251              		.loc 1 344 0
 252 001e 43EA0123 		orr	r3, r3, r1, lsl #8
 253 0022 1343     		orrs	r3, r3, r2
 254              	.LVL24:
 348:./FWLIB/src/stm32f4xx_sai.c ****                        
 349:./FWLIB/src/stm32f4xx_sai.c ****   /* Write to SAI_Block_x SLOTR */
 350:./FWLIB/src/stm32f4xx_sai.c ****   SAI_Block_x->SLOTR = tmpreg;
 255              		.loc 1 350 0
 256 0024 C360     		str	r3, [r0, #12]
 351:./FWLIB/src/stm32f4xx_sai.c **** }
 257              		.loc 1 351 0
 258 0026 5DF8044B 		ldr	r4, [sp], #4
 259              	.LCFI6:
 260              		.cfi_restore 4
 261              		.cfi_def_cfa_offset 0
 262 002a 7047     		bx	lr
 263              		.cfi_endproc
 264              	.LFE115:
 266              		.section	.text.SAI_StructInit,"ax",%progbits
 267              		.align	1
 268              		.global	SAI_StructInit
 269              		.syntax unified
 270              		.thumb
 271              		.thumb_func
 272              		.fpu fpv4-sp-d16
 274              	SAI_StructInit:
ARM GAS  /tmp/ccinunCO.s 			page 12


 275              	.LFB116:
 352:./FWLIB/src/stm32f4xx_sai.c **** 
 353:./FWLIB/src/stm32f4xx_sai.c **** /**
 354:./FWLIB/src/stm32f4xx_sai.c ****   * @brief  Fills each SAI_InitStruct member with its default value.
 355:./FWLIB/src/stm32f4xx_sai.c ****   * @param  SAI_InitStruct: pointer to a SAI_InitTypeDef structure which will 
 356:./FWLIB/src/stm32f4xx_sai.c ****   *         be initialized.  
 357:./FWLIB/src/stm32f4xx_sai.c ****   * @retval None
 358:./FWLIB/src/stm32f4xx_sai.c ****   */
 359:./FWLIB/src/stm32f4xx_sai.c **** void SAI_StructInit(SAI_InitTypeDef* SAI_InitStruct)
 360:./FWLIB/src/stm32f4xx_sai.c **** {
 276              		.loc 1 360 0
 277              		.cfi_startproc
 278              		@ args = 0, pretend = 0, frame = 0
 279              		@ frame_needed = 0, uses_anonymous_args = 0
 280              		@ link register save eliminated.
 281              	.LVL25:
 361:./FWLIB/src/stm32f4xx_sai.c ****   /* Reset SAI init structure parameters values */
 362:./FWLIB/src/stm32f4xx_sai.c ****   /* Initialize the SAI_AudioMode member */
 363:./FWLIB/src/stm32f4xx_sai.c ****   SAI_InitStruct->SAI_AudioMode = SAI_Mode_MasterTx;
 282              		.loc 1 363 0
 283 0000 0023     		movs	r3, #0
 284 0002 0360     		str	r3, [r0]
 364:./FWLIB/src/stm32f4xx_sai.c ****   /* Initialize the SAI_Protocol member */
 365:./FWLIB/src/stm32f4xx_sai.c ****   SAI_InitStruct->SAI_Protocol = SAI_Free_Protocol;
 285              		.loc 1 365 0
 286 0004 4360     		str	r3, [r0, #4]
 366:./FWLIB/src/stm32f4xx_sai.c ****   /* Initialize the SAI_DataSize member */
 367:./FWLIB/src/stm32f4xx_sai.c ****   SAI_InitStruct->SAI_DataSize = SAI_DataSize_8b;
 287              		.loc 1 367 0
 288 0006 4022     		movs	r2, #64
 289 0008 8260     		str	r2, [r0, #8]
 368:./FWLIB/src/stm32f4xx_sai.c ****   /* Initialize the SAI_FirstBit member */
 369:./FWLIB/src/stm32f4xx_sai.c ****   SAI_InitStruct->SAI_FirstBit = SAI_FirstBit_MSB;
 290              		.loc 1 369 0
 291 000a C360     		str	r3, [r0, #12]
 370:./FWLIB/src/stm32f4xx_sai.c ****   /* Initialize the SAI_ClockStrobing member */
 371:./FWLIB/src/stm32f4xx_sai.c ****   SAI_InitStruct->SAI_ClockStrobing = SAI_ClockStrobing_FallingEdge;
 292              		.loc 1 371 0
 293 000c 0361     		str	r3, [r0, #16]
 372:./FWLIB/src/stm32f4xx_sai.c ****   /* Initialize the SAI_Synchro member */
 373:./FWLIB/src/stm32f4xx_sai.c ****   SAI_InitStruct->SAI_Synchro = SAI_Asynchronous;
 294              		.loc 1 373 0
 295 000e 4361     		str	r3, [r0, #20]
 374:./FWLIB/src/stm32f4xx_sai.c ****   /* Initialize the SAI_OUTDRIV member */
 375:./FWLIB/src/stm32f4xx_sai.c ****   SAI_InitStruct->SAI_OUTDRIV = SAI_OutputDrive_Disabled;
 296              		.loc 1 375 0
 297 0010 8361     		str	r3, [r0, #24]
 376:./FWLIB/src/stm32f4xx_sai.c ****   /* Initialize the SAI_NoDivider member */
 377:./FWLIB/src/stm32f4xx_sai.c ****   SAI_InitStruct->SAI_NoDivider = SAI_MasterDivider_Enabled;
 298              		.loc 1 377 0
 299 0012 C361     		str	r3, [r0, #28]
 378:./FWLIB/src/stm32f4xx_sai.c ****   /* Initialize the SAI_MasterDivider member */
 379:./FWLIB/src/stm32f4xx_sai.c ****   SAI_InitStruct->SAI_MasterDivider = 0;
 300              		.loc 1 379 0
 301 0014 0362     		str	r3, [r0, #32]
 380:./FWLIB/src/stm32f4xx_sai.c ****   /* Initialize the SAI_FIFOThreshold member */
 381:./FWLIB/src/stm32f4xx_sai.c ****   SAI_InitStruct->SAI_FIFOThreshold = SAI_Threshold_FIFOEmpty;
ARM GAS  /tmp/ccinunCO.s 			page 13


 302              		.loc 1 381 0
 303 0016 4362     		str	r3, [r0, #36]
 382:./FWLIB/src/stm32f4xx_sai.c **** }
 304              		.loc 1 382 0
 305 0018 7047     		bx	lr
 306              		.cfi_endproc
 307              	.LFE116:
 309              		.section	.text.SAI_FrameStructInit,"ax",%progbits
 310              		.align	1
 311              		.global	SAI_FrameStructInit
 312              		.syntax unified
 313              		.thumb
 314              		.thumb_func
 315              		.fpu fpv4-sp-d16
 317              	SAI_FrameStructInit:
 318              	.LFB117:
 383:./FWLIB/src/stm32f4xx_sai.c **** 
 384:./FWLIB/src/stm32f4xx_sai.c **** /**
 385:./FWLIB/src/stm32f4xx_sai.c ****   * @brief  Fills each SAI_FrameInitStruct member with its default value.
 386:./FWLIB/src/stm32f4xx_sai.c ****   * @param  SAI_FrameInitStruct: pointer to a SAI_FrameInitTypeDef structure 
 387:./FWLIB/src/stm32f4xx_sai.c ****   *         which will be initialized.                     
 388:./FWLIB/src/stm32f4xx_sai.c ****   * @retval None
 389:./FWLIB/src/stm32f4xx_sai.c ****   */
 390:./FWLIB/src/stm32f4xx_sai.c **** void SAI_FrameStructInit(SAI_FrameInitTypeDef* SAI_FrameInitStruct)
 391:./FWLIB/src/stm32f4xx_sai.c **** {
 319              		.loc 1 391 0
 320              		.cfi_startproc
 321              		@ args = 0, pretend = 0, frame = 0
 322              		@ frame_needed = 0, uses_anonymous_args = 0
 323              		@ link register save eliminated.
 324              	.LVL26:
 392:./FWLIB/src/stm32f4xx_sai.c ****   /* Reset SAI Frame init structure parameters values */
 393:./FWLIB/src/stm32f4xx_sai.c ****   /* Initialize the SAI_FrameLength member */
 394:./FWLIB/src/stm32f4xx_sai.c ****   SAI_FrameInitStruct->SAI_FrameLength = 8;
 325              		.loc 1 394 0
 326 0000 0823     		movs	r3, #8
 327 0002 0360     		str	r3, [r0]
 395:./FWLIB/src/stm32f4xx_sai.c ****   /* Initialize the SAI_ActiveFrameLength member */
 396:./FWLIB/src/stm32f4xx_sai.c ****   SAI_FrameInitStruct->SAI_ActiveFrameLength = 1;
 328              		.loc 1 396 0
 329 0004 0123     		movs	r3, #1
 330 0006 4360     		str	r3, [r0, #4]
 397:./FWLIB/src/stm32f4xx_sai.c ****   /* Initialize the SAI_FSDefinition member */
 398:./FWLIB/src/stm32f4xx_sai.c ****   SAI_FrameInitStruct->SAI_FSDefinition = SAI_FS_StartFrame;
 331              		.loc 1 398 0
 332 0008 0023     		movs	r3, #0
 333 000a 8360     		str	r3, [r0, #8]
 399:./FWLIB/src/stm32f4xx_sai.c ****   /* Initialize the SAI_FSPolarity member */
 400:./FWLIB/src/stm32f4xx_sai.c ****   SAI_FrameInitStruct->SAI_FSPolarity = SAI_FS_ActiveLow;
 334              		.loc 1 400 0
 335 000c C360     		str	r3, [r0, #12]
 401:./FWLIB/src/stm32f4xx_sai.c ****   /* Initialize the SAI_FSOffset member */
 402:./FWLIB/src/stm32f4xx_sai.c ****   SAI_FrameInitStruct->SAI_FSOffset = SAI_FS_FirstBit;
 336              		.loc 1 402 0
 337 000e 0361     		str	r3, [r0, #16]
 403:./FWLIB/src/stm32f4xx_sai.c **** }
 338              		.loc 1 403 0
ARM GAS  /tmp/ccinunCO.s 			page 14


 339 0010 7047     		bx	lr
 340              		.cfi_endproc
 341              	.LFE117:
 343              		.section	.text.SAI_SlotStructInit,"ax",%progbits
 344              		.align	1
 345              		.global	SAI_SlotStructInit
 346              		.syntax unified
 347              		.thumb
 348              		.thumb_func
 349              		.fpu fpv4-sp-d16
 351              	SAI_SlotStructInit:
 352              	.LFB118:
 404:./FWLIB/src/stm32f4xx_sai.c **** 
 405:./FWLIB/src/stm32f4xx_sai.c **** /**
 406:./FWLIB/src/stm32f4xx_sai.c ****   * @brief  Fills each SAI_SlotInitStruct member with its default value.
 407:./FWLIB/src/stm32f4xx_sai.c ****   * @param  SAI_SlotInitStruct: pointer to a SAI_SlotInitTypeDef structure 
 408:./FWLIB/src/stm32f4xx_sai.c ****   *         which will be initialized.                     
 409:./FWLIB/src/stm32f4xx_sai.c ****   * @retval None
 410:./FWLIB/src/stm32f4xx_sai.c ****   */
 411:./FWLIB/src/stm32f4xx_sai.c **** void SAI_SlotStructInit(SAI_SlotInitTypeDef* SAI_SlotInitStruct)
 412:./FWLIB/src/stm32f4xx_sai.c **** {
 353              		.loc 1 412 0
 354              		.cfi_startproc
 355              		@ args = 0, pretend = 0, frame = 0
 356              		@ frame_needed = 0, uses_anonymous_args = 0
 357              		@ link register save eliminated.
 358              	.LVL27:
 413:./FWLIB/src/stm32f4xx_sai.c ****   /* Reset SAI Slot init structure parameters values */
 414:./FWLIB/src/stm32f4xx_sai.c ****   /* Initialize the SAI_FirstBitOffset member */
 415:./FWLIB/src/stm32f4xx_sai.c ****   SAI_SlotInitStruct->SAI_FirstBitOffset = 0;
 359              		.loc 1 415 0
 360 0000 0023     		movs	r3, #0
 361 0002 0360     		str	r3, [r0]
 416:./FWLIB/src/stm32f4xx_sai.c ****   /* Initialize the SAI_SlotSize member */
 417:./FWLIB/src/stm32f4xx_sai.c ****   SAI_SlotInitStruct->SAI_SlotSize = SAI_SlotSize_DataSize;
 362              		.loc 1 417 0
 363 0004 4360     		str	r3, [r0, #4]
 418:./FWLIB/src/stm32f4xx_sai.c ****   /* Initialize the SAI_SlotNumber member */
 419:./FWLIB/src/stm32f4xx_sai.c ****   SAI_SlotInitStruct->SAI_SlotNumber = 1;
 364              		.loc 1 419 0
 365 0006 0122     		movs	r2, #1
 366 0008 8260     		str	r2, [r0, #8]
 420:./FWLIB/src/stm32f4xx_sai.c ****   /* Initialize the SAI_SlotActive member */
 421:./FWLIB/src/stm32f4xx_sai.c ****   SAI_SlotInitStruct->SAI_SlotActive = SAI_Slot_NotActive;
 367              		.loc 1 421 0
 368 000a C360     		str	r3, [r0, #12]
 422:./FWLIB/src/stm32f4xx_sai.c **** 
 423:./FWLIB/src/stm32f4xx_sai.c **** }
 369              		.loc 1 423 0
 370 000c 7047     		bx	lr
 371              		.cfi_endproc
 372              	.LFE118:
 374              		.section	.text.SAI_Cmd,"ax",%progbits
 375              		.align	1
 376              		.global	SAI_Cmd
 377              		.syntax unified
 378              		.thumb
ARM GAS  /tmp/ccinunCO.s 			page 15


 379              		.thumb_func
 380              		.fpu fpv4-sp-d16
 382              	SAI_Cmd:
 383              	.LFB119:
 424:./FWLIB/src/stm32f4xx_sai.c **** 
 425:./FWLIB/src/stm32f4xx_sai.c **** /**
 426:./FWLIB/src/stm32f4xx_sai.c ****   * @brief  Enables or disables the specified SAI Block peripheral.
 427:./FWLIB/src/stm32f4xx_sai.c ****   * @param  SAI_Block_x: where x can be A or B to select the SAI Block peripheral.
 428:./FWLIB/src/stm32f4xx_sai.c ****   * @param  NewState: new state of the SAI_Block_x peripheral. 
 429:./FWLIB/src/stm32f4xx_sai.c ****   *          This parameter can be: ENABLE or DISABLE.
 430:./FWLIB/src/stm32f4xx_sai.c ****   * @retval None
 431:./FWLIB/src/stm32f4xx_sai.c ****   */
 432:./FWLIB/src/stm32f4xx_sai.c **** void SAI_Cmd(SAI_Block_TypeDef* SAI_Block_x, FunctionalState NewState)
 433:./FWLIB/src/stm32f4xx_sai.c **** {
 384              		.loc 1 433 0
 385              		.cfi_startproc
 386              		@ args = 0, pretend = 0, frame = 0
 387              		@ frame_needed = 0, uses_anonymous_args = 0
 388              		@ link register save eliminated.
 389              	.LVL28:
 434:./FWLIB/src/stm32f4xx_sai.c ****   /* Check the parameters */
 435:./FWLIB/src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
 436:./FWLIB/src/stm32f4xx_sai.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 437:./FWLIB/src/stm32f4xx_sai.c ****   if (NewState != DISABLE)
 390              		.loc 1 437 0
 391 0000 21B9     		cbnz	r1, .L19
 438:./FWLIB/src/stm32f4xx_sai.c ****   {
 439:./FWLIB/src/stm32f4xx_sai.c ****     /* Enable the selected SAI peripheral */
 440:./FWLIB/src/stm32f4xx_sai.c ****     SAI_Block_x->CR1 |= SAI_xCR1_SAIEN;
 441:./FWLIB/src/stm32f4xx_sai.c ****   }
 442:./FWLIB/src/stm32f4xx_sai.c ****   else
 443:./FWLIB/src/stm32f4xx_sai.c ****   {
 444:./FWLIB/src/stm32f4xx_sai.c ****     /* Disable the selected SAI peripheral */
 445:./FWLIB/src/stm32f4xx_sai.c ****     SAI_Block_x->CR1 &= ~(SAI_xCR1_SAIEN);
 392              		.loc 1 445 0
 393 0002 0368     		ldr	r3, [r0]
 394 0004 23F48033 		bic	r3, r3, #65536
 395 0008 0360     		str	r3, [r0]
 446:./FWLIB/src/stm32f4xx_sai.c ****   }
 447:./FWLIB/src/stm32f4xx_sai.c **** }
 396              		.loc 1 447 0
 397 000a 7047     		bx	lr
 398              	.L19:
 440:./FWLIB/src/stm32f4xx_sai.c ****   }
 399              		.loc 1 440 0
 400 000c 0368     		ldr	r3, [r0]
 401 000e 43F48033 		orr	r3, r3, #65536
 402 0012 0360     		str	r3, [r0]
 403 0014 7047     		bx	lr
 404              		.cfi_endproc
 405              	.LFE119:
 407              		.section	.text.SAI_MonoModeConfig,"ax",%progbits
 408              		.align	1
 409              		.global	SAI_MonoModeConfig
 410              		.syntax unified
 411              		.thumb
 412              		.thumb_func
ARM GAS  /tmp/ccinunCO.s 			page 16


 413              		.fpu fpv4-sp-d16
 415              	SAI_MonoModeConfig:
 416              	.LFB120:
 448:./FWLIB/src/stm32f4xx_sai.c **** 
 449:./FWLIB/src/stm32f4xx_sai.c **** /**
 450:./FWLIB/src/stm32f4xx_sai.c ****   * @brief  Configures the mono mode for the selected SAI block.
 451:./FWLIB/src/stm32f4xx_sai.c ****   * 
 452:./FWLIB/src/stm32f4xx_sai.c ****   * @note  This function has a meaning only when the number of slot is equal to 2. 
 453:./FWLIB/src/stm32f4xx_sai.c ****   *      
 454:./FWLIB/src/stm32f4xx_sai.c ****   * @param  SAI_Block_x: where x can be A or B to select the SAI Block peripheral.
 455:./FWLIB/src/stm32f4xx_sai.c ****   * @param  SAI_MonoMode: specifies the SAI block mono mode.
 456:./FWLIB/src/stm32f4xx_sai.c ****   *          This parameter can be one of the following values:
 457:./FWLIB/src/stm32f4xx_sai.c ****   *            @arg SAI_MonoMode : Set mono audio mode
 458:./FWLIB/src/stm32f4xx_sai.c ****   *            @arg SAI_StreoMode : Set streo audio mode                       
 459:./FWLIB/src/stm32f4xx_sai.c ****   * @retval None
 460:./FWLIB/src/stm32f4xx_sai.c ****   */
 461:./FWLIB/src/stm32f4xx_sai.c **** void SAI_MonoModeConfig(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_Mono_StreoMode)
 462:./FWLIB/src/stm32f4xx_sai.c **** {
 417              		.loc 1 462 0
 418              		.cfi_startproc
 419              		@ args = 0, pretend = 0, frame = 0
 420              		@ frame_needed = 0, uses_anonymous_args = 0
 421              		@ link register save eliminated.
 422              	.LVL29:
 463:./FWLIB/src/stm32f4xx_sai.c ****   /* Check the parameters */
 464:./FWLIB/src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
 465:./FWLIB/src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_MONO_STREO_MODE(SAI_MonoMode));
 466:./FWLIB/src/stm32f4xx_sai.c ****   /* Clear MONO bit */
 467:./FWLIB/src/stm32f4xx_sai.c ****   SAI_Block_x->CR1 &= ~(SAI_xCR1_MONO);
 423              		.loc 1 467 0
 424 0000 0368     		ldr	r3, [r0]
 425 0002 23F48053 		bic	r3, r3, #4096
 426 0006 0360     		str	r3, [r0]
 468:./FWLIB/src/stm32f4xx_sai.c ****   /* Set new Mono Mode value */
 469:./FWLIB/src/stm32f4xx_sai.c ****   SAI_Block_x->CR1 |= SAI_MonoMode;
 427              		.loc 1 469 0
 428 0008 0368     		ldr	r3, [r0]
 429 000a 43F48053 		orr	r3, r3, #4096
 430 000e 0360     		str	r3, [r0]
 470:./FWLIB/src/stm32f4xx_sai.c **** }
 431              		.loc 1 470 0
 432 0010 7047     		bx	lr
 433              		.cfi_endproc
 434              	.LFE120:
 436              		.section	.text.SAI_TRIStateConfig,"ax",%progbits
 437              		.align	1
 438              		.global	SAI_TRIStateConfig
 439              		.syntax unified
 440              		.thumb
 441              		.thumb_func
 442              		.fpu fpv4-sp-d16
 444              	SAI_TRIStateConfig:
 445              	.LFB121:
 471:./FWLIB/src/stm32f4xx_sai.c **** 
 472:./FWLIB/src/stm32f4xx_sai.c **** /**
 473:./FWLIB/src/stm32f4xx_sai.c ****   * @brief  Configures the TRIState managment on data line for the selected SAI block.
 474:./FWLIB/src/stm32f4xx_sai.c ****   * 
ARM GAS  /tmp/ccinunCO.s 			page 17


 475:./FWLIB/src/stm32f4xx_sai.c ****   * @note  This function has a meaning only when the SAI block is configured in transmitter 
 476:./FWLIB/src/stm32f4xx_sai.c ****   *      
 477:./FWLIB/src/stm32f4xx_sai.c ****   * @param  SAI_Block_x: where x can be A or B to select the SAI Block peripheral.
 478:./FWLIB/src/stm32f4xx_sai.c ****   * @param  SAI_TRIState: specifies the SAI block TRIState management.
 479:./FWLIB/src/stm32f4xx_sai.c ****   *          This parameter can be one of the following values:
 480:./FWLIB/src/stm32f4xx_sai.c ****   *            @arg SAI_Output_NotReleased : SD output line is still drived by the SAI.
 481:./FWLIB/src/stm32f4xx_sai.c ****   *            @arg SAI_Output_Released : SD output line is released (HI-Z)                       
 482:./FWLIB/src/stm32f4xx_sai.c ****   * @retval None
 483:./FWLIB/src/stm32f4xx_sai.c ****   */
 484:./FWLIB/src/stm32f4xx_sai.c **** void SAI_TRIStateConfig(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_TRIState)
 485:./FWLIB/src/stm32f4xx_sai.c **** {
 446              		.loc 1 485 0
 447              		.cfi_startproc
 448              		@ args = 0, pretend = 0, frame = 0
 449              		@ frame_needed = 0, uses_anonymous_args = 0
 450              		@ link register save eliminated.
 451              	.LVL30:
 486:./FWLIB/src/stm32f4xx_sai.c ****   /* Check the parameters */
 487:./FWLIB/src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
 488:./FWLIB/src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_TRISTATE_MANAGEMENT(SAI_TRIState));
 489:./FWLIB/src/stm32f4xx_sai.c ****   /* Clear MONO bit */
 490:./FWLIB/src/stm32f4xx_sai.c ****   SAI_Block_x->CR1 &= ~(SAI_xCR1_MONO);
 452              		.loc 1 490 0
 453 0000 0368     		ldr	r3, [r0]
 454 0002 23F48053 		bic	r3, r3, #4096
 455 0006 0360     		str	r3, [r0]
 491:./FWLIB/src/stm32f4xx_sai.c ****   /* Set new Mono Mode value */
 492:./FWLIB/src/stm32f4xx_sai.c ****   SAI_Block_x->CR1 |= SAI_MonoMode;  
 456              		.loc 1 492 0
 457 0008 0368     		ldr	r3, [r0]
 458 000a 43F48053 		orr	r3, r3, #4096
 459 000e 0360     		str	r3, [r0]
 493:./FWLIB/src/stm32f4xx_sai.c ****   
 494:./FWLIB/src/stm32f4xx_sai.c **** }
 460              		.loc 1 494 0
 461 0010 7047     		bx	lr
 462              		.cfi_endproc
 463              	.LFE121:
 465              		.section	.text.SAI_CompandingModeConfig,"ax",%progbits
 466              		.align	1
 467              		.global	SAI_CompandingModeConfig
 468              		.syntax unified
 469              		.thumb
 470              		.thumb_func
 471              		.fpu fpv4-sp-d16
 473              	SAI_CompandingModeConfig:
 474              	.LFB122:
 495:./FWLIB/src/stm32f4xx_sai.c **** 
 496:./FWLIB/src/stm32f4xx_sai.c **** /**
 497:./FWLIB/src/stm32f4xx_sai.c ****   * @brief  Configures the companding mode for the selected SAI block.
 498:./FWLIB/src/stm32f4xx_sai.c ****   * 
 499:./FWLIB/src/stm32f4xx_sai.c ****   * @note  The data expansion or data compression are determined by the state of
 500:./FWLIB/src/stm32f4xx_sai.c ****   *        SAI block selected (transmitter or receiver). 
 501:./FWLIB/src/stm32f4xx_sai.c **** 
 502:./FWLIB/src/stm32f4xx_sai.c ****   * @param  SAI_Block_x: where x can be A or B to select the SAI Block peripheral.              
 503:./FWLIB/src/stm32f4xx_sai.c ****   * @param  SAI_CompandingMode: specifies the SAI block companding mode.
 504:./FWLIB/src/stm32f4xx_sai.c ****   *          This parameter can be one of the following values:
ARM GAS  /tmp/ccinunCO.s 			page 18


 505:./FWLIB/src/stm32f4xx_sai.c ****   *            @arg SAI_NoCompanding : no companding algorithm set
 506:./FWLIB/src/stm32f4xx_sai.c ****   *            @arg SAI_ULaw_1CPL_Companding : Set U law (algorithm 1's complement representation)
 507:./FWLIB/src/stm32f4xx_sai.c ****   *            @arg SAI_ALaw_1CPL_Companding : Set A law (algorithm 1's complement repesentation)  
 508:./FWLIB/src/stm32f4xx_sai.c ****   *            @arg SAI_ULaw_2CPL_Companding : Set U law (algorithm 2's complement representation)
 509:./FWLIB/src/stm32f4xx_sai.c ****   *            @arg SAI_ALaw_2CPL_Companding : Set A law (algorithm 2's complement repesentation)  
 510:./FWLIB/src/stm32f4xx_sai.c ****   * @retval None
 511:./FWLIB/src/stm32f4xx_sai.c ****   */
 512:./FWLIB/src/stm32f4xx_sai.c **** void SAI_CompandingModeConfig(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_CompandingMode)
 513:./FWLIB/src/stm32f4xx_sai.c **** {
 475              		.loc 1 513 0
 476              		.cfi_startproc
 477              		@ args = 0, pretend = 0, frame = 0
 478              		@ frame_needed = 0, uses_anonymous_args = 0
 479              		@ link register save eliminated.
 480              	.LVL31:
 514:./FWLIB/src/stm32f4xx_sai.c ****   /* Check the parameters */
 515:./FWLIB/src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
 516:./FWLIB/src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_COMPANDING_MODE(SAI_CompandingMode));
 517:./FWLIB/src/stm32f4xx_sai.c ****   /* Clear Companding Mode bits */
 518:./FWLIB/src/stm32f4xx_sai.c ****   SAI_Block_x->CR2 &= ~(SAI_xCR2_COMP);
 481              		.loc 1 518 0
 482 0000 4368     		ldr	r3, [r0, #4]
 483 0002 23F44043 		bic	r3, r3, #49152
 484 0006 4360     		str	r3, [r0, #4]
 519:./FWLIB/src/stm32f4xx_sai.c ****   /* Set new Companding Mode value */
 520:./FWLIB/src/stm32f4xx_sai.c ****   SAI_Block_x->CR2 |= SAI_CompandingMode;
 485              		.loc 1 520 0
 486 0008 4368     		ldr	r3, [r0, #4]
 487 000a 1943     		orrs	r1, r1, r3
 488              	.LVL32:
 489 000c 4160     		str	r1, [r0, #4]
 521:./FWLIB/src/stm32f4xx_sai.c **** }
 490              		.loc 1 521 0
 491 000e 7047     		bx	lr
 492              		.cfi_endproc
 493              	.LFE122:
 495              		.section	.text.SAI_MuteModeCmd,"ax",%progbits
 496              		.align	1
 497              		.global	SAI_MuteModeCmd
 498              		.syntax unified
 499              		.thumb
 500              		.thumb_func
 501              		.fpu fpv4-sp-d16
 503              	SAI_MuteModeCmd:
 504              	.LFB123:
 522:./FWLIB/src/stm32f4xx_sai.c **** 
 523:./FWLIB/src/stm32f4xx_sai.c **** /**
 524:./FWLIB/src/stm32f4xx_sai.c ****   * @brief  Enables or disables the Mute mode for the selected SAI block.
 525:./FWLIB/src/stm32f4xx_sai.c ****   *    
 526:./FWLIB/src/stm32f4xx_sai.c ****   * @note   This function has a meaning only when the audio block is transmitter
 527:./FWLIB/src/stm32f4xx_sai.c ****   * @note   Mute mode is applied for an entire frame for all the valid slot
 528:./FWLIB/src/stm32f4xx_sai.c ****   *         It becomes active at the end of an audio frame when set somewhere in a frame. 
 529:./FWLIB/src/stm32f4xx_sai.c ****   *         Mute mode exit occurs at the end of the frame in which the bit MUTE has been set.
 530:./FWLIB/src/stm32f4xx_sai.c ****   *
 531:./FWLIB/src/stm32f4xx_sai.c ****   * @param  SAI_Block_x: where x can be A or B to select the SAI Block peripheral.
 532:./FWLIB/src/stm32f4xx_sai.c ****   * @param  NewState: new state of the SAIx block. 
 533:./FWLIB/src/stm32f4xx_sai.c ****   *          This parameter can be: ENABLE or DISABLE.
ARM GAS  /tmp/ccinunCO.s 			page 19


 534:./FWLIB/src/stm32f4xx_sai.c ****   * @retval None
 535:./FWLIB/src/stm32f4xx_sai.c ****   */
 536:./FWLIB/src/stm32f4xx_sai.c **** void SAI_MuteModeCmd(SAI_Block_TypeDef* SAI_Block_x, FunctionalState NewState)
 537:./FWLIB/src/stm32f4xx_sai.c **** {
 505              		.loc 1 537 0
 506              		.cfi_startproc
 507              		@ args = 0, pretend = 0, frame = 0
 508              		@ frame_needed = 0, uses_anonymous_args = 0
 509              		@ link register save eliminated.
 510              	.LVL33:
 538:./FWLIB/src/stm32f4xx_sai.c ****   /* Check the parameters */
 539:./FWLIB/src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
 540:./FWLIB/src/stm32f4xx_sai.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 541:./FWLIB/src/stm32f4xx_sai.c ****   if (NewState != DISABLE)
 511              		.loc 1 541 0
 512 0000 21B9     		cbnz	r1, .L26
 542:./FWLIB/src/stm32f4xx_sai.c ****   {
 543:./FWLIB/src/stm32f4xx_sai.c ****     /* Enable the selected SAI block mute mode */
 544:./FWLIB/src/stm32f4xx_sai.c ****     SAI_Block_x->CR2 |= SAI_xCR2_MUTE;
 545:./FWLIB/src/stm32f4xx_sai.c ****   }
 546:./FWLIB/src/stm32f4xx_sai.c ****   else
 547:./FWLIB/src/stm32f4xx_sai.c ****   {
 548:./FWLIB/src/stm32f4xx_sai.c ****     /* Disable the selected SAI SS output */
 549:./FWLIB/src/stm32f4xx_sai.c ****     SAI_Block_x->CR2 &= ~(SAI_xCR2_MUTE);
 513              		.loc 1 549 0
 514 0002 4368     		ldr	r3, [r0, #4]
 515 0004 23F02003 		bic	r3, r3, #32
 516 0008 4360     		str	r3, [r0, #4]
 550:./FWLIB/src/stm32f4xx_sai.c ****   }
 551:./FWLIB/src/stm32f4xx_sai.c **** }
 517              		.loc 1 551 0
 518 000a 7047     		bx	lr
 519              	.L26:
 544:./FWLIB/src/stm32f4xx_sai.c ****   }
 520              		.loc 1 544 0
 521 000c 4368     		ldr	r3, [r0, #4]
 522 000e 43F02003 		orr	r3, r3, #32
 523 0012 4360     		str	r3, [r0, #4]
 524 0014 7047     		bx	lr
 525              		.cfi_endproc
 526              	.LFE123:
 528              		.section	.text.SAI_MuteValueConfig,"ax",%progbits
 529              		.align	1
 530              		.global	SAI_MuteValueConfig
 531              		.syntax unified
 532              		.thumb
 533              		.thumb_func
 534              		.fpu fpv4-sp-d16
 536              	SAI_MuteValueConfig:
 537              	.LFB124:
 552:./FWLIB/src/stm32f4xx_sai.c **** 
 553:./FWLIB/src/stm32f4xx_sai.c **** /**
 554:./FWLIB/src/stm32f4xx_sai.c ****   * @brief  Configure the mute value for the selected SAI block.
 555:./FWLIB/src/stm32f4xx_sai.c ****   *    
 556:./FWLIB/src/stm32f4xx_sai.c ****   * @note   This function has a meaning only when the audio block is transmitter
 557:./FWLIB/src/stm32f4xx_sai.c ****   * @note   the configuration last value sent during mute mode has only a meaning 
 558:./FWLIB/src/stm32f4xx_sai.c ****   *          when the number of slot is lower or equal to 2 and if the MUTE bit is set.
ARM GAS  /tmp/ccinunCO.s 			page 20


 559:./FWLIB/src/stm32f4xx_sai.c ****   *           
 560:./FWLIB/src/stm32f4xx_sai.c ****   * @param  SAI_Block_x: where x can be A or B to select the SAI Block peripheral.
 561:./FWLIB/src/stm32f4xx_sai.c ****   * @param  SAI_MuteValue: specifies the SAI block mute value.
 562:./FWLIB/src/stm32f4xx_sai.c ****   *          This parameter can be one of the following values:
 563:./FWLIB/src/stm32f4xx_sai.c ****   *            @arg SAI_ZeroValue : bit value 0 is sent during Mute Mode
 564:./FWLIB/src/stm32f4xx_sai.c ****   *            @arg SAI_LastSentValue : Last value is sent during Mute Mode  
 565:./FWLIB/src/stm32f4xx_sai.c ****   * @retval None
 566:./FWLIB/src/stm32f4xx_sai.c ****   */
 567:./FWLIB/src/stm32f4xx_sai.c **** void SAI_MuteValueConfig(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_MuteValue)
 568:./FWLIB/src/stm32f4xx_sai.c **** {
 538              		.loc 1 568 0
 539              		.cfi_startproc
 540              		@ args = 0, pretend = 0, frame = 0
 541              		@ frame_needed = 0, uses_anonymous_args = 0
 542              		@ link register save eliminated.
 543              	.LVL34:
 569:./FWLIB/src/stm32f4xx_sai.c ****   /* Check the parameters */
 570:./FWLIB/src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
 571:./FWLIB/src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_MUTE_VALUE(SAI_MuteValue));
 572:./FWLIB/src/stm32f4xx_sai.c ****   
 573:./FWLIB/src/stm32f4xx_sai.c ****   /* Clear Mute value bits */
 574:./FWLIB/src/stm32f4xx_sai.c ****   SAI_Block_x->CR2 &= ~(SAI_xCR2_MUTEVAL);
 544              		.loc 1 574 0
 545 0000 4368     		ldr	r3, [r0, #4]
 546 0002 23F04003 		bic	r3, r3, #64
 547 0006 4360     		str	r3, [r0, #4]
 575:./FWLIB/src/stm32f4xx_sai.c ****   /* Set new Mute value */
 576:./FWLIB/src/stm32f4xx_sai.c ****   SAI_Block_x->CR2 |= SAI_MuteValue;
 548              		.loc 1 576 0
 549 0008 4368     		ldr	r3, [r0, #4]
 550 000a 1943     		orrs	r1, r1, r3
 551              	.LVL35:
 552 000c 4160     		str	r1, [r0, #4]
 577:./FWLIB/src/stm32f4xx_sai.c **** }
 553              		.loc 1 577 0
 554 000e 7047     		bx	lr
 555              		.cfi_endproc
 556              	.LFE124:
 558              		.section	.text.SAI_MuteFrameCounterConfig,"ax",%progbits
 559              		.align	1
 560              		.global	SAI_MuteFrameCounterConfig
 561              		.syntax unified
 562              		.thumb
 563              		.thumb_func
 564              		.fpu fpv4-sp-d16
 566              	SAI_MuteFrameCounterConfig:
 567              	.LFB125:
 578:./FWLIB/src/stm32f4xx_sai.c **** 
 579:./FWLIB/src/stm32f4xx_sai.c **** /**
 580:./FWLIB/src/stm32f4xx_sai.c ****   * @brief  Enables or disables the Mute mode for the selected SAI block. 
 581:./FWLIB/src/stm32f4xx_sai.c ****   *
 582:./FWLIB/src/stm32f4xx_sai.c ****   * @note   This function has a meaning only when the audio block is Receiver
 583:./FWLIB/src/stm32f4xx_sai.c ****   * @param  SAI_Block_x: where x can be A or B to select the SAI Block peripheral.
 584:./FWLIB/src/stm32f4xx_sai.c ****   * @param  SAI_MuteCounter: specifies the SAI block mute value.
 585:./FWLIB/src/stm32f4xx_sai.c ****   *         This parameter can be a number between 0 and 63.  
 586:./FWLIB/src/stm32f4xx_sai.c ****  
 587:./FWLIB/src/stm32f4xx_sai.c ****   * @retval None
ARM GAS  /tmp/ccinunCO.s 			page 21


 588:./FWLIB/src/stm32f4xx_sai.c ****   */
 589:./FWLIB/src/stm32f4xx_sai.c **** void SAI_MuteFrameCounterConfig(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_MuteCounter)
 590:./FWLIB/src/stm32f4xx_sai.c **** {
 568              		.loc 1 590 0
 569              		.cfi_startproc
 570              		@ args = 0, pretend = 0, frame = 0
 571              		@ frame_needed = 0, uses_anonymous_args = 0
 572              		@ link register save eliminated.
 573              	.LVL36:
 591:./FWLIB/src/stm32f4xx_sai.c ****   /* Check the parameters */
 592:./FWLIB/src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
 593:./FWLIB/src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_MUTE_COUNTER(SAI_MuteCounter));
 594:./FWLIB/src/stm32f4xx_sai.c ****   
 595:./FWLIB/src/stm32f4xx_sai.c ****   /* Clear Mute value bits */
 596:./FWLIB/src/stm32f4xx_sai.c ****   SAI_Block_x->CR2 &= ~(SAI_xCR2_MUTECNT);
 574              		.loc 1 596 0
 575 0000 4368     		ldr	r3, [r0, #4]
 576 0002 23F4FC53 		bic	r3, r3, #8064
 577 0006 4360     		str	r3, [r0, #4]
 597:./FWLIB/src/stm32f4xx_sai.c ****   /* Set new Mute value */
 598:./FWLIB/src/stm32f4xx_sai.c ****   SAI_Block_x->CR2 |= (SAI_MuteCounter << 7);
 578              		.loc 1 598 0
 579 0008 4368     		ldr	r3, [r0, #4]
 580 000a 43EAC111 		orr	r1, r3, r1, lsl #7
 581              	.LVL37:
 582 000e 4160     		str	r1, [r0, #4]
 599:./FWLIB/src/stm32f4xx_sai.c **** }
 583              		.loc 1 599 0
 584 0010 7047     		bx	lr
 585              		.cfi_endproc
 586              	.LFE125:
 588              		.section	.text.SAI_FlushFIFO,"ax",%progbits
 589              		.align	1
 590              		.global	SAI_FlushFIFO
 591              		.syntax unified
 592              		.thumb
 593              		.thumb_func
 594              		.fpu fpv4-sp-d16
 596              	SAI_FlushFIFO:
 597              	.LFB126:
 600:./FWLIB/src/stm32f4xx_sai.c **** 
 601:./FWLIB/src/stm32f4xx_sai.c **** /**
 602:./FWLIB/src/stm32f4xx_sai.c ****   * @brief  Reinitialize the FIFO pointer
 603:./FWLIB/src/stm32f4xx_sai.c ****   *   
 604:./FWLIB/src/stm32f4xx_sai.c ****   * @note   The FIFO pointers can be reinitialized at anytime The data present 
 605:./FWLIB/src/stm32f4xx_sai.c ****   *         into the FIFO, if it is not empty, will be lost. 
 606:./FWLIB/src/stm32f4xx_sai.c ****   * 
 607:./FWLIB/src/stm32f4xx_sai.c ****   * @param  SAI_Block_x: where x can be A or B to select the SAI Block peripheral.
 608:./FWLIB/src/stm32f4xx_sai.c ****   * @param  NewState: new state of the selected SAI TI communication mode.
 609:./FWLIB/src/stm32f4xx_sai.c ****   *          This parameter can be: ENABLE or DISABLE.
 610:./FWLIB/src/stm32f4xx_sai.c ****   * @retval None
 611:./FWLIB/src/stm32f4xx_sai.c ****   */
 612:./FWLIB/src/stm32f4xx_sai.c **** void SAI_FlushFIFO(SAI_Block_TypeDef* SAI_Block_x)
 613:./FWLIB/src/stm32f4xx_sai.c **** {
 598              		.loc 1 613 0
 599              		.cfi_startproc
 600              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccinunCO.s 			page 22


 601              		@ frame_needed = 0, uses_anonymous_args = 0
 602              		@ link register save eliminated.
 603              	.LVL38:
 614:./FWLIB/src/stm32f4xx_sai.c ****   /* Check the parameters */
 615:./FWLIB/src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
 616:./FWLIB/src/stm32f4xx_sai.c **** 
 617:./FWLIB/src/stm32f4xx_sai.c ****   /* FIFO flush */
 618:./FWLIB/src/stm32f4xx_sai.c ****   SAI_Block_x->CR2 |= SAI_xCR2_FFLUSH;
 604              		.loc 1 618 0
 605 0000 4368     		ldr	r3, [r0, #4]
 606 0002 43F00803 		orr	r3, r3, #8
 607 0006 4360     		str	r3, [r0, #4]
 619:./FWLIB/src/stm32f4xx_sai.c **** }
 608              		.loc 1 619 0
 609 0008 7047     		bx	lr
 610              		.cfi_endproc
 611              	.LFE126:
 613              		.section	.text.SAI_ReceiveData,"ax",%progbits
 614              		.align	1
 615              		.global	SAI_ReceiveData
 616              		.syntax unified
 617              		.thumb
 618              		.thumb_func
 619              		.fpu fpv4-sp-d16
 621              	SAI_ReceiveData:
 622              	.LFB127:
 620:./FWLIB/src/stm32f4xx_sai.c **** 
 621:./FWLIB/src/stm32f4xx_sai.c **** /**
 622:./FWLIB/src/stm32f4xx_sai.c ****   * @}
 623:./FWLIB/src/stm32f4xx_sai.c ****   */
 624:./FWLIB/src/stm32f4xx_sai.c **** 
 625:./FWLIB/src/stm32f4xx_sai.c **** /** @defgroup SAI_Group2 Data transfers functions
 626:./FWLIB/src/stm32f4xx_sai.c ****  *  @brief   Data transfers functions
 627:./FWLIB/src/stm32f4xx_sai.c ****  *
 628:./FWLIB/src/stm32f4xx_sai.c **** @verbatim   
 629:./FWLIB/src/stm32f4xx_sai.c ****  ===============================================================================
 630:./FWLIB/src/stm32f4xx_sai.c ****                        ##### Data transfers functions #####
 631:./FWLIB/src/stm32f4xx_sai.c ****  ===============================================================================  
 632:./FWLIB/src/stm32f4xx_sai.c ****   [..]
 633:./FWLIB/src/stm32f4xx_sai.c ****   This section provides a set of functions allowing to manage the SAI data transfers.
 634:./FWLIB/src/stm32f4xx_sai.c ****   [..]
 635:./FWLIB/src/stm32f4xx_sai.c ****   In reception, data are received and then stored into an internal FIFO while 
 636:./FWLIB/src/stm32f4xx_sai.c ****   In transmission, data are first stored into an internal FIFO before being 
 637:./FWLIB/src/stm32f4xx_sai.c ****   transmitted.
 638:./FWLIB/src/stm32f4xx_sai.c ****   [..]
 639:./FWLIB/src/stm32f4xx_sai.c ****   The read access of the SAI_xDR register can be done using the SAI_ReceiveData()
 640:./FWLIB/src/stm32f4xx_sai.c ****   function and returns the Rx buffered value. Whereas a write access to the SAI_DR 
 641:./FWLIB/src/stm32f4xx_sai.c ****   can be done using SAI_SendData() function and stores the written data into 
 642:./FWLIB/src/stm32f4xx_sai.c ****   Tx buffer.
 643:./FWLIB/src/stm32f4xx_sai.c **** 
 644:./FWLIB/src/stm32f4xx_sai.c **** @endverbatim
 645:./FWLIB/src/stm32f4xx_sai.c ****   * @{
 646:./FWLIB/src/stm32f4xx_sai.c ****   */
 647:./FWLIB/src/stm32f4xx_sai.c **** 
 648:./FWLIB/src/stm32f4xx_sai.c **** /**
 649:./FWLIB/src/stm32f4xx_sai.c ****   * @brief  Returns the most recent received data by the SAI block x peripheral. 
 650:./FWLIB/src/stm32f4xx_sai.c ****   * @param  SAI_Block_x: where x can be A or B to select the SAI Block peripheral. 
ARM GAS  /tmp/ccinunCO.s 			page 23


 651:./FWLIB/src/stm32f4xx_sai.c ****   *         
 652:./FWLIB/src/stm32f4xx_sai.c ****   * @retval The value of the received data.
 653:./FWLIB/src/stm32f4xx_sai.c ****   */
 654:./FWLIB/src/stm32f4xx_sai.c **** uint32_t SAI_ReceiveData(SAI_Block_TypeDef* SAI_Block_x)
 655:./FWLIB/src/stm32f4xx_sai.c **** {
 623              		.loc 1 655 0
 624              		.cfi_startproc
 625              		@ args = 0, pretend = 0, frame = 0
 626              		@ frame_needed = 0, uses_anonymous_args = 0
 627              		@ link register save eliminated.
 628              	.LVL39:
 656:./FWLIB/src/stm32f4xx_sai.c ****   /* Check the parameters */
 657:./FWLIB/src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
 658:./FWLIB/src/stm32f4xx_sai.c ****   
 659:./FWLIB/src/stm32f4xx_sai.c ****   /* Return the data in the DR register */
 660:./FWLIB/src/stm32f4xx_sai.c ****   return SAI_Block_x->DR;
 629              		.loc 1 660 0
 630 0000 C069     		ldr	r0, [r0, #28]
 631              	.LVL40:
 661:./FWLIB/src/stm32f4xx_sai.c **** }
 632              		.loc 1 661 0
 633 0002 7047     		bx	lr
 634              		.cfi_endproc
 635              	.LFE127:
 637              		.section	.text.SAI_SendData,"ax",%progbits
 638              		.align	1
 639              		.global	SAI_SendData
 640              		.syntax unified
 641              		.thumb
 642              		.thumb_func
 643              		.fpu fpv4-sp-d16
 645              	SAI_SendData:
 646              	.LFB128:
 662:./FWLIB/src/stm32f4xx_sai.c **** 
 663:./FWLIB/src/stm32f4xx_sai.c **** /**
 664:./FWLIB/src/stm32f4xx_sai.c ****   * @brief  Transmits a Data through the SAI block x peripheral.
 665:./FWLIB/src/stm32f4xx_sai.c ****   * @param  SAI_Block_x: where x can be A or B to select the SAI Block peripheral.
 666:./FWLIB/src/stm32f4xx_sai.c ****   *        
 667:./FWLIB/src/stm32f4xx_sai.c ****   * @param  Data: Data to be transmitted.
 668:./FWLIB/src/stm32f4xx_sai.c ****   * @retval None
 669:./FWLIB/src/stm32f4xx_sai.c ****   */
 670:./FWLIB/src/stm32f4xx_sai.c **** void SAI_SendData(SAI_Block_TypeDef* SAI_Block_x, uint32_t Data)
 671:./FWLIB/src/stm32f4xx_sai.c **** {
 647              		.loc 1 671 0
 648              		.cfi_startproc
 649              		@ args = 0, pretend = 0, frame = 0
 650              		@ frame_needed = 0, uses_anonymous_args = 0
 651              		@ link register save eliminated.
 652              	.LVL41:
 672:./FWLIB/src/stm32f4xx_sai.c ****   /* Check the parameters */
 673:./FWLIB/src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
 674:./FWLIB/src/stm32f4xx_sai.c ****   
 675:./FWLIB/src/stm32f4xx_sai.c ****   /* Write in the DR register the data to be sent */
 676:./FWLIB/src/stm32f4xx_sai.c ****   SAI_Block_x->DR = Data;
 653              		.loc 1 676 0
 654 0000 C161     		str	r1, [r0, #28]
 677:./FWLIB/src/stm32f4xx_sai.c **** }
ARM GAS  /tmp/ccinunCO.s 			page 24


 655              		.loc 1 677 0
 656 0002 7047     		bx	lr
 657              		.cfi_endproc
 658              	.LFE128:
 660              		.section	.text.SAI_DMACmd,"ax",%progbits
 661              		.align	1
 662              		.global	SAI_DMACmd
 663              		.syntax unified
 664              		.thumb
 665              		.thumb_func
 666              		.fpu fpv4-sp-d16
 668              	SAI_DMACmd:
 669              	.LFB129:
 678:./FWLIB/src/stm32f4xx_sai.c **** 
 679:./FWLIB/src/stm32f4xx_sai.c **** /**
 680:./FWLIB/src/stm32f4xx_sai.c ****   * @}
 681:./FWLIB/src/stm32f4xx_sai.c ****   */
 682:./FWLIB/src/stm32f4xx_sai.c **** 
 683:./FWLIB/src/stm32f4xx_sai.c **** /** @defgroup SAI_Group3 DMA transfers management functions
 684:./FWLIB/src/stm32f4xx_sai.c ****  *  @brief   DMA transfers management functions
 685:./FWLIB/src/stm32f4xx_sai.c ****   *
 686:./FWLIB/src/stm32f4xx_sai.c **** @verbatim   
 687:./FWLIB/src/stm32f4xx_sai.c ****  ===============================================================================
 688:./FWLIB/src/stm32f4xx_sai.c ****                   ##### DMA transfers management functions #####
 689:./FWLIB/src/stm32f4xx_sai.c ****  ===============================================================================  
 690:./FWLIB/src/stm32f4xx_sai.c **** 
 691:./FWLIB/src/stm32f4xx_sai.c **** @endverbatim
 692:./FWLIB/src/stm32f4xx_sai.c ****   * @{
 693:./FWLIB/src/stm32f4xx_sai.c ****   */
 694:./FWLIB/src/stm32f4xx_sai.c **** 
 695:./FWLIB/src/stm32f4xx_sai.c **** /**
 696:./FWLIB/src/stm32f4xx_sai.c ****   * @brief  Enables or disables the SAI Block x DMA interface.
 697:./FWLIB/src/stm32f4xx_sai.c ****   * @param  SAI_Block_x: where x can be A or B to select the SAI Block peripheral. 
 698:./FWLIB/src/stm32f4xx_sai.c ****   * @param  NewState: new state of the selected SAI block DMA transfer request.
 699:./FWLIB/src/stm32f4xx_sai.c ****   *          This parameter can be: ENABLE or DISABLE.
 700:./FWLIB/src/stm32f4xx_sai.c ****   * @retval None
 701:./FWLIB/src/stm32f4xx_sai.c ****   */
 702:./FWLIB/src/stm32f4xx_sai.c **** void SAI_DMACmd(SAI_Block_TypeDef* SAI_Block_x, FunctionalState NewState)
 703:./FWLIB/src/stm32f4xx_sai.c **** {
 670              		.loc 1 703 0
 671              		.cfi_startproc
 672              		@ args = 0, pretend = 0, frame = 0
 673              		@ frame_needed = 0, uses_anonymous_args = 0
 674              		@ link register save eliminated.
 675              	.LVL42:
 704:./FWLIB/src/stm32f4xx_sai.c ****   /* Check the parameters */
 705:./FWLIB/src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
 706:./FWLIB/src/stm32f4xx_sai.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 707:./FWLIB/src/stm32f4xx_sai.c ****   
 708:./FWLIB/src/stm32f4xx_sai.c ****   if (NewState != DISABLE)
 676              		.loc 1 708 0
 677 0000 21B9     		cbnz	r1, .L35
 709:./FWLIB/src/stm32f4xx_sai.c ****   {
 710:./FWLIB/src/stm32f4xx_sai.c ****     /* Enable the selected SAI block mute mode */
 711:./FWLIB/src/stm32f4xx_sai.c ****     SAI_Block_x->CR1 |= SAI_xCR1_DMAEN;
 712:./FWLIB/src/stm32f4xx_sai.c ****   }
 713:./FWLIB/src/stm32f4xx_sai.c ****   else
ARM GAS  /tmp/ccinunCO.s 			page 25


 714:./FWLIB/src/stm32f4xx_sai.c ****   {
 715:./FWLIB/src/stm32f4xx_sai.c ****     /* Disable the selected SAI SS output */
 716:./FWLIB/src/stm32f4xx_sai.c ****     SAI_Block_x->CR1 &= ~(SAI_xCR1_DMAEN);
 678              		.loc 1 716 0
 679 0002 0368     		ldr	r3, [r0]
 680 0004 23F40033 		bic	r3, r3, #131072
 681 0008 0360     		str	r3, [r0]
 717:./FWLIB/src/stm32f4xx_sai.c ****   }
 718:./FWLIB/src/stm32f4xx_sai.c **** }
 682              		.loc 1 718 0
 683 000a 7047     		bx	lr
 684              	.L35:
 711:./FWLIB/src/stm32f4xx_sai.c ****   }
 685              		.loc 1 711 0
 686 000c 0368     		ldr	r3, [r0]
 687 000e 43F40033 		orr	r3, r3, #131072
 688 0012 0360     		str	r3, [r0]
 689 0014 7047     		bx	lr
 690              		.cfi_endproc
 691              	.LFE129:
 693              		.section	.text.SAI_ITConfig,"ax",%progbits
 694              		.align	1
 695              		.global	SAI_ITConfig
 696              		.syntax unified
 697              		.thumb
 698              		.thumb_func
 699              		.fpu fpv4-sp-d16
 701              	SAI_ITConfig:
 702              	.LFB130:
 719:./FWLIB/src/stm32f4xx_sai.c **** 
 720:./FWLIB/src/stm32f4xx_sai.c **** /**
 721:./FWLIB/src/stm32f4xx_sai.c ****   * @}
 722:./FWLIB/src/stm32f4xx_sai.c ****   */
 723:./FWLIB/src/stm32f4xx_sai.c **** 
 724:./FWLIB/src/stm32f4xx_sai.c **** /** @defgroup SAI_Group4 Interrupts and flags management functions
 725:./FWLIB/src/stm32f4xx_sai.c ****  *  @brief   Interrupts and flags management functions
 726:./FWLIB/src/stm32f4xx_sai.c ****   *
 727:./FWLIB/src/stm32f4xx_sai.c **** @verbatim   
 728:./FWLIB/src/stm32f4xx_sai.c ****  ===============================================================================
 729:./FWLIB/src/stm32f4xx_sai.c ****             ##### Interrupts and flags management functions #####
 730:./FWLIB/src/stm32f4xx_sai.c ****  ===============================================================================  
 731:./FWLIB/src/stm32f4xx_sai.c ****   [..]
 732:./FWLIB/src/stm32f4xx_sai.c ****   This section provides a set of functions allowing to configure the SAI Interrupts 
 733:./FWLIB/src/stm32f4xx_sai.c ****   sources and check or clear the flags or pending bits status.
 734:./FWLIB/src/stm32f4xx_sai.c ****   The user should identify which mode will be used in his application to manage 
 735:./FWLIB/src/stm32f4xx_sai.c ****   the communication: Polling mode, Interrupt mode or DMA mode. 
 736:./FWLIB/src/stm32f4xx_sai.c ****     
 737:./FWLIB/src/stm32f4xx_sai.c ****   *** Polling Mode ***
 738:./FWLIB/src/stm32f4xx_sai.c ****   ====================
 739:./FWLIB/src/stm32f4xx_sai.c ****   [..]
 740:./FWLIB/src/stm32f4xx_sai.c ****   In Polling Mode, the SAI communication can be managed by 7 flags:
 741:./FWLIB/src/stm32f4xx_sai.c ****      (#) SAI_FLAG_FREQ : to indicate if there is a FIFO Request to write or to read.
 742:./FWLIB/src/stm32f4xx_sai.c ****      (#) SAI_FLAG_MUTEDET : to indicate if a MUTE frame detected
 743:./FWLIB/src/stm32f4xx_sai.c ****      (#) SAI_FLAG_OVRUDR : to indicate if an Overrun or Underrun error occur
 744:./FWLIB/src/stm32f4xx_sai.c ****      (#) SAI_FLAG_AFSDET : to indicate if there is the detection of a audio frame 
 745:./FWLIB/src/stm32f4xx_sai.c ****                           synchronisation (FS) earlier than expected
 746:./FWLIB/src/stm32f4xx_sai.c ****      (#) SAI_FLAG_LFSDET : to indicate if there is the detection of a audio frame 
ARM GAS  /tmp/ccinunCO.s 			page 26


 747:./FWLIB/src/stm32f4xx_sai.c ****                           synchronisation (FS) later than expected              
 748:./FWLIB/src/stm32f4xx_sai.c ****      (#) SAI_FLAG_CNRDY : to indicate if  the codec is not ready to communicate during 
 749:./FWLIB/src/stm32f4xx_sai.c ****                          the reception of the TAG 0 (slot0) of the AC97 audio frame 
 750:./FWLIB/src/stm32f4xx_sai.c ****      (#) SAI_FLAG_WCKCFG: to indicate if wrong clock configuration in master mode 
 751:./FWLIB/src/stm32f4xx_sai.c ****                          error occurs.
 752:./FWLIB/src/stm32f4xx_sai.c ****   [..]
 753:./FWLIB/src/stm32f4xx_sai.c ****   In this Mode it is advised to use the following functions:
 754:./FWLIB/src/stm32f4xx_sai.c ****      (+) FlagStatus SAI_GetFlagStatus(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_FLAG);
 755:./FWLIB/src/stm32f4xx_sai.c ****      (+) void SAI_ClearFlag(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_FLAG);
 756:./FWLIB/src/stm32f4xx_sai.c **** 
 757:./FWLIB/src/stm32f4xx_sai.c ****   *** Interrupt Mode ***
 758:./FWLIB/src/stm32f4xx_sai.c ****   ======================
 759:./FWLIB/src/stm32f4xx_sai.c ****   [..]
 760:./FWLIB/src/stm32f4xx_sai.c ****   In Interrupt Mode, the SAI communication can be managed by 7 interrupt sources
 761:./FWLIB/src/stm32f4xx_sai.c ****   and 7 pending bits: 
 762:./FWLIB/src/stm32f4xx_sai.c ****   (+) Pending Bits:
 763:./FWLIB/src/stm32f4xx_sai.c ****      (##) SAI_IT_FREQ : to indicate if there is a FIFO Request to write or to read.
 764:./FWLIB/src/stm32f4xx_sai.c ****      (##) SAI_IT_MUTEDET : to indicate if a MUTE frame detected.
 765:./FWLIB/src/stm32f4xx_sai.c ****      (##) SAI_IT_OVRUDR : to indicate if an Overrun or Underrun error occur.
 766:./FWLIB/src/stm32f4xx_sai.c ****      (##) SAI_IT_AFSDET : to indicate if there is the detection of a audio frame 
 767:./FWLIB/src/stm32f4xx_sai.c ****                           synchronisation (FS) earlier than expected.
 768:./FWLIB/src/stm32f4xx_sai.c ****      (##) SAI_IT_LFSDET : to indicate if there is the detection of a audio frame 
 769:./FWLIB/src/stm32f4xx_sai.c ****                           synchronisation (FS) later than expected.              
 770:./FWLIB/src/stm32f4xx_sai.c ****      (##) SAI_IT_CNRDY : to indicate if  the codec is not ready to communicate during 
 771:./FWLIB/src/stm32f4xx_sai.c ****                          the reception of the TAG 0 (slot0) of the AC97 audio frame. 
 772:./FWLIB/src/stm32f4xx_sai.c ****      (##) SAI_IT_WCKCFG: to indicate if wrong clock configuration in master mode 
 773:./FWLIB/src/stm32f4xx_sai.c ****                          error occurs.
 774:./FWLIB/src/stm32f4xx_sai.c **** 
 775:./FWLIB/src/stm32f4xx_sai.c ****   (+) Interrupt Source:
 776:./FWLIB/src/stm32f4xx_sai.c ****      (##) SAI_IT_FREQ : specifies the interrupt source for FIFO Request.
 777:./FWLIB/src/stm32f4xx_sai.c ****      (##) SAI_IT_MUTEDET : specifies the interrupt source for MUTE frame detected.
 778:./FWLIB/src/stm32f4xx_sai.c ****      (##) SAI_IT_OVRUDR : specifies the interrupt source for overrun or underrun error.
 779:./FWLIB/src/stm32f4xx_sai.c ****      (##) SAI_IT_AFSDET : specifies the interrupt source for anticipated frame synchronization
 780:./FWLIB/src/stm32f4xx_sai.c ****                           detection interrupt.
 781:./FWLIB/src/stm32f4xx_sai.c ****      (##) SAI_IT_LFSDET : specifies the interrupt source for late frame synchronization
 782:./FWLIB/src/stm32f4xx_sai.c ****                           detection interrupt.             
 783:./FWLIB/src/stm32f4xx_sai.c ****      (##) SAI_IT_CNRDY : specifies the interrupt source for codec not ready interrupt
 784:./FWLIB/src/stm32f4xx_sai.c ****      (##) SAI_IT_WCKCFG: specifies the interrupt source for wrong clock configuration
 785:./FWLIB/src/stm32f4xx_sai.c ****                          interrupt.
 786:./FWLIB/src/stm32f4xx_sai.c ****   [..]                     
 787:./FWLIB/src/stm32f4xx_sai.c ****   In this Mode it is advised to use the following functions:
 788:./FWLIB/src/stm32f4xx_sai.c ****      (+) void SAI_ITConfig(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_IT, FunctionalState NewStat
 789:./FWLIB/src/stm32f4xx_sai.c ****      (+) ITStatus SAI_GetITStatus(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_IT);
 790:./FWLIB/src/stm32f4xx_sai.c ****      (+) void SAI_ClearITPendingBit(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_IT);
 791:./FWLIB/src/stm32f4xx_sai.c **** 
 792:./FWLIB/src/stm32f4xx_sai.c ****   *** DMA Mode ***
 793:./FWLIB/src/stm32f4xx_sai.c ****   ================
 794:./FWLIB/src/stm32f4xx_sai.c ****   [..]
 795:./FWLIB/src/stm32f4xx_sai.c ****   In DMA Mode, each SAI audio block has an independent DMA interface in order to 
 796:./FWLIB/src/stm32f4xx_sai.c ****   read or to write into the SAI_xDR register (to hit the internal FIFO). 
 797:./FWLIB/src/stm32f4xx_sai.c ****   There is one DMA channel by audio block following basic DMA request/acknowledge 
 798:./FWLIB/src/stm32f4xx_sai.c ****   protocol.
 799:./FWLIB/src/stm32f4xx_sai.c ****   [..]
 800:./FWLIB/src/stm32f4xx_sai.c ****   In this Mode it is advised to use the following function:
 801:./FWLIB/src/stm32f4xx_sai.c ****     (+) void SAI_DMACmd(SAI_Block_TypeDef* SAI_Block_x, FunctionalState NewState);
 802:./FWLIB/src/stm32f4xx_sai.c ****   [..]
 803:./FWLIB/src/stm32f4xx_sai.c ****   This section provides also functions allowing to
ARM GAS  /tmp/ccinunCO.s 			page 27


 804:./FWLIB/src/stm32f4xx_sai.c ****    (+) Check the SAI Block enable status
 805:./FWLIB/src/stm32f4xx_sai.c ****    (+)Check the FIFO status 
 806:./FWLIB/src/stm32f4xx_sai.c ****    
 807:./FWLIB/src/stm32f4xx_sai.c ****   *** SAI Block Enable status ***
 808:./FWLIB/src/stm32f4xx_sai.c ****   ===============================
 809:./FWLIB/src/stm32f4xx_sai.c ****   [..]
 810:./FWLIB/src/stm32f4xx_sai.c ****   After disabling a SAI Block, it is recommended to check (or wait until) the SAI Block 
 811:./FWLIB/src/stm32f4xx_sai.c ****   is effectively disabled. If a Block is disabled while an audio frame transfer is ongoing
 812:./FWLIB/src/stm32f4xx_sai.c ****   the current frame will be transferred and the block will be effectively disabled only at 
 813:./FWLIB/src/stm32f4xx_sai.c ****   the end of audio frame. 
 814:./FWLIB/src/stm32f4xx_sai.c ****   To monitor this state it is possible to use the following function:
 815:./FWLIB/src/stm32f4xx_sai.c ****     (+) FunctionalState SAI_GetCmdStatus(SAI_Block_TypeDef* SAI_Block_x); 
 816:./FWLIB/src/stm32f4xx_sai.c ****  
 817:./FWLIB/src/stm32f4xx_sai.c ****   *** SAI Block FIFO status ***
 818:./FWLIB/src/stm32f4xx_sai.c ****   =============================
 819:./FWLIB/src/stm32f4xx_sai.c ****   [..]
 820:./FWLIB/src/stm32f4xx_sai.c ****   It is possible to monitor the FIFO status when a transfer is ongoing using the following 
 821:./FWLIB/src/stm32f4xx_sai.c ****   function:
 822:./FWLIB/src/stm32f4xx_sai.c ****     (+) uint32_t SAI_GetFIFOStatus(SAI_Block_TypeDef* SAI_Block_x);
 823:./FWLIB/src/stm32f4xx_sai.c ****     
 824:./FWLIB/src/stm32f4xx_sai.c **** @endverbatim
 825:./FWLIB/src/stm32f4xx_sai.c ****   * @{
 826:./FWLIB/src/stm32f4xx_sai.c ****   */
 827:./FWLIB/src/stm32f4xx_sai.c **** 
 828:./FWLIB/src/stm32f4xx_sai.c **** /**
 829:./FWLIB/src/stm32f4xx_sai.c ****   * @brief  Enables or disables the specified SAI Block interrupts.
 830:./FWLIB/src/stm32f4xx_sai.c ****   * @param  SAI_Block_x: where x can be A or B to select the SAI Block peripheral. 
 831:./FWLIB/src/stm32f4xx_sai.c ****   * @param  SAI_IT: specifies the SAI interrupt source to be enabled or disabled. 
 832:./FWLIB/src/stm32f4xx_sai.c ****   *          This parameter can be one of the following values:
 833:./FWLIB/src/stm32f4xx_sai.c ****   *            @arg SAI_IT_FREQ: FIFO Request interrupt mask
 834:./FWLIB/src/stm32f4xx_sai.c ****   *            @arg SAI_IT_MUTEDET: MUTE detection interrupt mask
 835:./FWLIB/src/stm32f4xx_sai.c ****   *            @arg SAI_IT_OVRUDR: overrun/underrun interrupt mask
 836:./FWLIB/src/stm32f4xx_sai.c ****   *            @arg SAI_IT_AFSDET: anticipated frame synchronization detection 
 837:./FWLIB/src/stm32f4xx_sai.c ****   *                                interrupt mask  
 838:./FWLIB/src/stm32f4xx_sai.c ****   *            @arg SAI_IT_LFSDET: late frame synchronization detection interrupt 
 839:./FWLIB/src/stm32f4xx_sai.c ****   *                                mask
 840:./FWLIB/src/stm32f4xx_sai.c ****   *            @arg SAI_IT_CNRDY: codec not ready interrupt mask
 841:./FWLIB/src/stm32f4xx_sai.c ****   *            @arg SAI_IT_WCKCFG: wrong clock configuration interrupt mask      
 842:./FWLIB/src/stm32f4xx_sai.c ****   * @param  NewState: new state of the specified SAI interrupt.
 843:./FWLIB/src/stm32f4xx_sai.c ****   *          This parameter can be: ENABLE or DISABLE.
 844:./FWLIB/src/stm32f4xx_sai.c ****   * @retval None
 845:./FWLIB/src/stm32f4xx_sai.c ****   */
 846:./FWLIB/src/stm32f4xx_sai.c **** void SAI_ITConfig(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_IT, FunctionalState NewState)
 847:./FWLIB/src/stm32f4xx_sai.c **** { 
 703              		.loc 1 847 0
 704              		.cfi_startproc
 705              		@ args = 0, pretend = 0, frame = 0
 706              		@ frame_needed = 0, uses_anonymous_args = 0
 707              		@ link register save eliminated.
 708              	.LVL43:
 848:./FWLIB/src/stm32f4xx_sai.c ****   /* Check the parameters */
 849:./FWLIB/src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
 850:./FWLIB/src/stm32f4xx_sai.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 851:./FWLIB/src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_CONFIG_IT(SAI_IT));
 852:./FWLIB/src/stm32f4xx_sai.c **** 
 853:./FWLIB/src/stm32f4xx_sai.c ****   if (NewState != DISABLE)
 709              		.loc 1 853 0
ARM GAS  /tmp/ccinunCO.s 			page 28


 710 0000 22B9     		cbnz	r2, .L39
 854:./FWLIB/src/stm32f4xx_sai.c ****   {
 855:./FWLIB/src/stm32f4xx_sai.c ****     /* Enable the selected SAI Block interrupt */
 856:./FWLIB/src/stm32f4xx_sai.c ****     SAI_Block_x->IMR |= SAI_IT;
 857:./FWLIB/src/stm32f4xx_sai.c ****   }
 858:./FWLIB/src/stm32f4xx_sai.c ****   else
 859:./FWLIB/src/stm32f4xx_sai.c ****   {
 860:./FWLIB/src/stm32f4xx_sai.c ****     /* Disable the selected SAI Block interrupt */
 861:./FWLIB/src/stm32f4xx_sai.c ****     SAI_Block_x->IMR &= ~(SAI_IT);
 711              		.loc 1 861 0
 712 0002 0369     		ldr	r3, [r0, #16]
 713 0004 23EA0101 		bic	r1, r3, r1
 714              	.LVL44:
 715 0008 0161     		str	r1, [r0, #16]
 862:./FWLIB/src/stm32f4xx_sai.c ****   }
 863:./FWLIB/src/stm32f4xx_sai.c **** }
 716              		.loc 1 863 0
 717 000a 7047     		bx	lr
 718              	.LVL45:
 719              	.L39:
 856:./FWLIB/src/stm32f4xx_sai.c ****   }
 720              		.loc 1 856 0
 721 000c 0369     		ldr	r3, [r0, #16]
 722 000e 1943     		orrs	r1, r1, r3
 723              	.LVL46:
 724 0010 0161     		str	r1, [r0, #16]
 725 0012 7047     		bx	lr
 726              		.cfi_endproc
 727              	.LFE130:
 729              		.section	.text.SAI_GetFlagStatus,"ax",%progbits
 730              		.align	1
 731              		.global	SAI_GetFlagStatus
 732              		.syntax unified
 733              		.thumb
 734              		.thumb_func
 735              		.fpu fpv4-sp-d16
 737              	SAI_GetFlagStatus:
 738              	.LFB131:
 864:./FWLIB/src/stm32f4xx_sai.c **** 
 865:./FWLIB/src/stm32f4xx_sai.c **** /**
 866:./FWLIB/src/stm32f4xx_sai.c ****   * @brief  Checks whether the specified SAI block x flag is set or not.
 867:./FWLIB/src/stm32f4xx_sai.c ****   * @param  SAI_Block_x: where x can be A or B to select the SAI Block peripheral. 
 868:./FWLIB/src/stm32f4xx_sai.c ****   * @param  SAI_FLAG: specifies the SAI block flag to check. 
 869:./FWLIB/src/stm32f4xx_sai.c ****   *          This parameter can be one of the following values:
 870:./FWLIB/src/stm32f4xx_sai.c ****   *            @arg SAI_FLAG_FREQ: FIFO Request flag.  
 871:./FWLIB/src/stm32f4xx_sai.c ****   *            @arg SAI_FLAG_MUTEDET: MUTE detection flag.  
 872:./FWLIB/src/stm32f4xx_sai.c ****   *            @arg SAI_FLAG_OVRUDR: overrun/underrun flag.
 873:./FWLIB/src/stm32f4xx_sai.c ****   *            @arg SAI_FLAG_WCKCFG: wrong clock configuration flag.            
 874:./FWLIB/src/stm32f4xx_sai.c ****   *            @arg SAI_FLAG_CNRDY: codec not ready flag. 
 875:./FWLIB/src/stm32f4xx_sai.c ****   *            @arg SAI_FLAG_AFSDET: anticipated frame synchronization detection flag.
 876:./FWLIB/src/stm32f4xx_sai.c ****   *            @arg SAI_FLAG_LFSDET: late frame synchronization detection flag.
 877:./FWLIB/src/stm32f4xx_sai.c ****   * @retval The new state of SAI_FLAG (SET or RESET).
 878:./FWLIB/src/stm32f4xx_sai.c ****   */
 879:./FWLIB/src/stm32f4xx_sai.c **** FlagStatus SAI_GetFlagStatus(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_FLAG)
 880:./FWLIB/src/stm32f4xx_sai.c **** {
 739              		.loc 1 880 0
 740              		.cfi_startproc
ARM GAS  /tmp/ccinunCO.s 			page 29


 741              		@ args = 0, pretend = 0, frame = 0
 742              		@ frame_needed = 0, uses_anonymous_args = 0
 743              		@ link register save eliminated.
 744              	.LVL47:
 881:./FWLIB/src/stm32f4xx_sai.c ****   FlagStatus bitstatus = RESET;
 882:./FWLIB/src/stm32f4xx_sai.c ****   
 883:./FWLIB/src/stm32f4xx_sai.c ****   /* Check the parameters */
 884:./FWLIB/src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
 885:./FWLIB/src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_GET_FLAG(SAI_FLAG));
 886:./FWLIB/src/stm32f4xx_sai.c ****   
 887:./FWLIB/src/stm32f4xx_sai.c ****   /* Check the status of the specified SAI flag */
 888:./FWLIB/src/stm32f4xx_sai.c ****   if ((SAI_Block_x->SR & SAI_FLAG) != (uint32_t)RESET)
 745              		.loc 1 888 0
 746 0000 4369     		ldr	r3, [r0, #20]
 747 0002 0B42     		tst	r3, r1
 748 0004 01D1     		bne	.L43
 889:./FWLIB/src/stm32f4xx_sai.c ****   {
 890:./FWLIB/src/stm32f4xx_sai.c ****     /* SAI_FLAG is set */
 891:./FWLIB/src/stm32f4xx_sai.c ****     bitstatus = SET;
 892:./FWLIB/src/stm32f4xx_sai.c ****   }
 893:./FWLIB/src/stm32f4xx_sai.c ****   else
 894:./FWLIB/src/stm32f4xx_sai.c ****   {
 895:./FWLIB/src/stm32f4xx_sai.c ****     /* SAI_FLAG is reset */
 896:./FWLIB/src/stm32f4xx_sai.c ****     bitstatus = RESET;
 749              		.loc 1 896 0
 750 0006 0020     		movs	r0, #0
 751              	.LVL48:
 897:./FWLIB/src/stm32f4xx_sai.c ****   }
 898:./FWLIB/src/stm32f4xx_sai.c ****   /* Return the SAI_FLAG status */
 899:./FWLIB/src/stm32f4xx_sai.c ****   return  bitstatus;
 900:./FWLIB/src/stm32f4xx_sai.c **** }
 752              		.loc 1 900 0
 753 0008 7047     		bx	lr
 754              	.LVL49:
 755              	.L43:
 891:./FWLIB/src/stm32f4xx_sai.c ****   }
 756              		.loc 1 891 0
 757 000a 0120     		movs	r0, #1
 758              	.LVL50:
 759 000c 7047     		bx	lr
 760              		.cfi_endproc
 761              	.LFE131:
 763              		.section	.text.SAI_ClearFlag,"ax",%progbits
 764              		.align	1
 765              		.global	SAI_ClearFlag
 766              		.syntax unified
 767              		.thumb
 768              		.thumb_func
 769              		.fpu fpv4-sp-d16
 771              	SAI_ClearFlag:
 772              	.LFB132:
 901:./FWLIB/src/stm32f4xx_sai.c **** 
 902:./FWLIB/src/stm32f4xx_sai.c **** /**
 903:./FWLIB/src/stm32f4xx_sai.c ****   * @brief  Clears the specified SAI Block x flag.
 904:./FWLIB/src/stm32f4xx_sai.c ****   * @param  SAI_Block_x: where x can be A or B to select the SAI Block peripheral. 
 905:./FWLIB/src/stm32f4xx_sai.c ****   * @param  SAI_FLAG: specifies the SAI block flag to check. 
 906:./FWLIB/src/stm32f4xx_sai.c ****   *          This parameter can be one of the following values: 
ARM GAS  /tmp/ccinunCO.s 			page 30


 907:./FWLIB/src/stm32f4xx_sai.c ****   *            @arg SAI_FLAG_MUTEDET: MUTE detection flag.  
 908:./FWLIB/src/stm32f4xx_sai.c ****   *            @arg SAI_FLAG_OVRUDR: overrun/underrun flag.
 909:./FWLIB/src/stm32f4xx_sai.c ****   *            @arg SAI_FLAG_WCKCFG: wrong clock configuration flag.            
 910:./FWLIB/src/stm32f4xx_sai.c ****   *            @arg SAI_FLAG_CNRDY: codec not ready flag. 
 911:./FWLIB/src/stm32f4xx_sai.c ****   *            @arg SAI_FLAG_AFSDET: anticipated frame synchronization detection flag.
 912:./FWLIB/src/stm32f4xx_sai.c ****   *            @arg SAI_FLAG_LFSDET: late frame synchronization detection flag. 
 913:./FWLIB/src/stm32f4xx_sai.c ****   *  
 914:./FWLIB/src/stm32f4xx_sai.c ****   * @note    FREQ (FIFO Request) flag is cleared : 
 915:./FWLIB/src/stm32f4xx_sai.c ****   *          - When the audio block is transmitter and the FIFO is full or the FIFO   
 916:./FWLIB/src/stm32f4xx_sai.c ****   *            has one data (one buffer mode) depending the bit FTH in the
 917:./FWLIB/src/stm32f4xx_sai.c ****   *            SAI_xCR2 register.
 918:./FWLIB/src/stm32f4xx_sai.c ****   *          - When the audio block is receiver and the FIFO is not empty           
 919:./FWLIB/src/stm32f4xx_sai.c ****   *  
 920:./FWLIB/src/stm32f4xx_sai.c ****   * @retval None
 921:./FWLIB/src/stm32f4xx_sai.c ****   */
 922:./FWLIB/src/stm32f4xx_sai.c **** void SAI_ClearFlag(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_FLAG)
 923:./FWLIB/src/stm32f4xx_sai.c **** {
 773              		.loc 1 923 0
 774              		.cfi_startproc
 775              		@ args = 0, pretend = 0, frame = 0
 776              		@ frame_needed = 0, uses_anonymous_args = 0
 777              		@ link register save eliminated.
 778              	.LVL51:
 924:./FWLIB/src/stm32f4xx_sai.c ****   /* Check the parameters */
 925:./FWLIB/src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
 926:./FWLIB/src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_CLEAR_FLAG(SAI_FLAG));
 927:./FWLIB/src/stm32f4xx_sai.c ****     
 928:./FWLIB/src/stm32f4xx_sai.c ****   /* Clear the selected SAI Block flag */
 929:./FWLIB/src/stm32f4xx_sai.c ****   SAI_Block_x->CLRFR |= SAI_FLAG;
 779              		.loc 1 929 0
 780 0000 8369     		ldr	r3, [r0, #24]
 781 0002 1943     		orrs	r1, r1, r3
 782              	.LVL52:
 783 0004 8161     		str	r1, [r0, #24]
 930:./FWLIB/src/stm32f4xx_sai.c **** }
 784              		.loc 1 930 0
 785 0006 7047     		bx	lr
 786              		.cfi_endproc
 787              	.LFE132:
 789              		.section	.text.SAI_GetITStatus,"ax",%progbits
 790              		.align	1
 791              		.global	SAI_GetITStatus
 792              		.syntax unified
 793              		.thumb
 794              		.thumb_func
 795              		.fpu fpv4-sp-d16
 797              	SAI_GetITStatus:
 798              	.LFB133:
 931:./FWLIB/src/stm32f4xx_sai.c **** 
 932:./FWLIB/src/stm32f4xx_sai.c **** /**
 933:./FWLIB/src/stm32f4xx_sai.c ****   * @brief  Checks whether the specified SAI Block x interrupt has occurred or not.
 934:./FWLIB/src/stm32f4xx_sai.c ****   * @param  SAI_Block_x: where x can be A or B to select the SAI Block peripheral. 
 935:./FWLIB/src/stm32f4xx_sai.c ****   * @param  SAI_IT: specifies the SAI interrupt source to be enabled or disabled. 
 936:./FWLIB/src/stm32f4xx_sai.c ****   *          This parameter can be one of the following values:
 937:./FWLIB/src/stm32f4xx_sai.c ****   *            @arg SAI_IT_FREQ: FIFO Request interrupt 
 938:./FWLIB/src/stm32f4xx_sai.c ****   *            @arg SAI_IT_MUTEDET: MUTE detection interrupt 
 939:./FWLIB/src/stm32f4xx_sai.c ****   *            @arg SAI_IT_OVRUDR: overrun/underrun interrupt 
ARM GAS  /tmp/ccinunCO.s 			page 31


 940:./FWLIB/src/stm32f4xx_sai.c ****   *            @arg SAI_IT_AFSDET: anticipated frame synchronization detection interrupt           
 941:./FWLIB/src/stm32f4xx_sai.c ****   *            @arg SAI_IT_LFSDET: late frame synchronization detection interrupt                  
 942:./FWLIB/src/stm32f4xx_sai.c ****   *            @arg SAI_IT_CNRDY: codec not ready interrupt 
 943:./FWLIB/src/stm32f4xx_sai.c ****   *            @arg SAI_IT_WCKCFG: wrong clock configuration interrupt 
 944:./FWLIB/src/stm32f4xx_sai.c ****   *                
 945:./FWLIB/src/stm32f4xx_sai.c ****   * @retval The new state of SAI_IT (SET or RESET).
 946:./FWLIB/src/stm32f4xx_sai.c ****   */
 947:./FWLIB/src/stm32f4xx_sai.c **** ITStatus SAI_GetITStatus(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_IT)
 948:./FWLIB/src/stm32f4xx_sai.c **** {
 799              		.loc 1 948 0
 800              		.cfi_startproc
 801              		@ args = 0, pretend = 0, frame = 0
 802              		@ frame_needed = 0, uses_anonymous_args = 0
 803              		@ link register save eliminated.
 804              	.LVL53:
 949:./FWLIB/src/stm32f4xx_sai.c ****   ITStatus bitstatus = RESET;
 950:./FWLIB/src/stm32f4xx_sai.c ****   uint32_t  enablestatus = 0;
 951:./FWLIB/src/stm32f4xx_sai.c **** 
 952:./FWLIB/src/stm32f4xx_sai.c ****   /* Check the parameters */
 953:./FWLIB/src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
 954:./FWLIB/src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_CONFIG_IT(SAI_IT));
 955:./FWLIB/src/stm32f4xx_sai.c ****   
 956:./FWLIB/src/stm32f4xx_sai.c ****   /* Get the SAI_IT enable bit status */
 957:./FWLIB/src/stm32f4xx_sai.c ****   enablestatus = (SAI_Block_x->IMR & SAI_IT) ;
 805              		.loc 1 957 0
 806 0000 0369     		ldr	r3, [r0, #16]
 807 0002 0B40     		ands	r3, r3, r1
 808              	.LVL54:
 958:./FWLIB/src/stm32f4xx_sai.c **** 
 959:./FWLIB/src/stm32f4xx_sai.c ****   /* Check the status of the specified SAI interrupt */
 960:./FWLIB/src/stm32f4xx_sai.c ****   if (((SAI_Block_x->SR & SAI_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 809              		.loc 1 960 0
 810 0004 4269     		ldr	r2, [r0, #20]
 811 0006 0A42     		tst	r2, r1
 812 0008 02D0     		beq	.L47
 813              		.loc 1 960 0 is_stmt 0 discriminator 1
 814 000a 1BB9     		cbnz	r3, .L48
 961:./FWLIB/src/stm32f4xx_sai.c ****   {
 962:./FWLIB/src/stm32f4xx_sai.c ****     /* SAI_IT is set */
 963:./FWLIB/src/stm32f4xx_sai.c ****     bitstatus = SET;
 964:./FWLIB/src/stm32f4xx_sai.c ****   }
 965:./FWLIB/src/stm32f4xx_sai.c ****   else
 966:./FWLIB/src/stm32f4xx_sai.c ****   {
 967:./FWLIB/src/stm32f4xx_sai.c ****     /* SAI_IT is reset */
 968:./FWLIB/src/stm32f4xx_sai.c ****     bitstatus = RESET;
 815              		.loc 1 968 0 is_stmt 1
 816 000c 0020     		movs	r0, #0
 817              	.LVL55:
 818 000e 7047     		bx	lr
 819              	.LVL56:
 820              	.L47:
 821 0010 0020     		movs	r0, #0
 822              	.LVL57:
 823 0012 7047     		bx	lr
 824              	.LVL58:
 825              	.L48:
 963:./FWLIB/src/stm32f4xx_sai.c ****   }
ARM GAS  /tmp/ccinunCO.s 			page 32


 826              		.loc 1 963 0
 827 0014 0120     		movs	r0, #1
 828              	.LVL59:
 969:./FWLIB/src/stm32f4xx_sai.c ****   }
 970:./FWLIB/src/stm32f4xx_sai.c ****   /* Return the SAI_IT status */
 971:./FWLIB/src/stm32f4xx_sai.c ****   return bitstatus;
 972:./FWLIB/src/stm32f4xx_sai.c **** }
 829              		.loc 1 972 0
 830 0016 7047     		bx	lr
 831              		.cfi_endproc
 832              	.LFE133:
 834              		.section	.text.SAI_ClearITPendingBit,"ax",%progbits
 835              		.align	1
 836              		.global	SAI_ClearITPendingBit
 837              		.syntax unified
 838              		.thumb
 839              		.thumb_func
 840              		.fpu fpv4-sp-d16
 842              	SAI_ClearITPendingBit:
 843              	.LFB134:
 973:./FWLIB/src/stm32f4xx_sai.c **** 
 974:./FWLIB/src/stm32f4xx_sai.c **** /**
 975:./FWLIB/src/stm32f4xx_sai.c ****   * @brief  Clears the SAI Block x interrupt pending bit.
 976:./FWLIB/src/stm32f4xx_sai.c ****   * @param  SAI_Block_x: where x can be A or B to select the SAI Block peripheral. 
 977:./FWLIB/src/stm32f4xx_sai.c ****   * @param  SAI_IT: specifies the SAI Block interrupt pending bit to clear. 
 978:./FWLIB/src/stm32f4xx_sai.c ****   *          This parameter can be one of the following values:  
 979:./FWLIB/src/stm32f4xx_sai.c ****   *            @arg SAI_IT_MUTEDET: MUTE detection interrupt.  
 980:./FWLIB/src/stm32f4xx_sai.c ****   *            @arg SAI_IT_OVRUDR: overrun/underrun interrupt.
 981:./FWLIB/src/stm32f4xx_sai.c ****   *            @arg SAI_IT_WCKCFG: wrong clock configuration interrupt.            
 982:./FWLIB/src/stm32f4xx_sai.c ****   *            @arg SAI_IT_CNRDY: codec not ready interrupt. 
 983:./FWLIB/src/stm32f4xx_sai.c ****   *            @arg SAI_IT_AFSDET: anticipated frame synchronization detection interrupt.
 984:./FWLIB/src/stm32f4xx_sai.c ****   *            @arg SAI_IT_LFSDET: late frame synchronization detection interrupt. 
 985:./FWLIB/src/stm32f4xx_sai.c ****   *  
 986:./FWLIB/src/stm32f4xx_sai.c ****   * @note    FREQ (FIFO Request) flag is cleared : 
 987:./FWLIB/src/stm32f4xx_sai.c ****   *          - When the audio block is transmitter and the FIFO is full or the FIFO   
 988:./FWLIB/src/stm32f4xx_sai.c ****   *            has one data (one buffer mode) depending the bit FTH in the
 989:./FWLIB/src/stm32f4xx_sai.c ****   *            SAI_xCR2 register.
 990:./FWLIB/src/stm32f4xx_sai.c ****   *          - When the audio block is receiver and the FIFO is not empty  
 991:./FWLIB/src/stm32f4xx_sai.c ****   *            
 992:./FWLIB/src/stm32f4xx_sai.c ****   * @retval None
 993:./FWLIB/src/stm32f4xx_sai.c ****   */
 994:./FWLIB/src/stm32f4xx_sai.c **** void SAI_ClearITPendingBit(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_IT)
 995:./FWLIB/src/stm32f4xx_sai.c **** {
 844              		.loc 1 995 0
 845              		.cfi_startproc
 846              		@ args = 0, pretend = 0, frame = 0
 847              		@ frame_needed = 0, uses_anonymous_args = 0
 848              		@ link register save eliminated.
 849              	.LVL60:
 996:./FWLIB/src/stm32f4xx_sai.c ****   /* Check the parameters */
 997:./FWLIB/src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
 998:./FWLIB/src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_CONFIG_IT(SAI_IT));
 999:./FWLIB/src/stm32f4xx_sai.c **** 
1000:./FWLIB/src/stm32f4xx_sai.c ****   /* Clear the selected SAI Block x interrupt pending bit */
1001:./FWLIB/src/stm32f4xx_sai.c ****   SAI_Block_x->CLRFR |= SAI_IT; 
 850              		.loc 1 1001 0
 851 0000 8369     		ldr	r3, [r0, #24]
ARM GAS  /tmp/ccinunCO.s 			page 33


 852 0002 1943     		orrs	r1, r1, r3
 853              	.LVL61:
 854 0004 8161     		str	r1, [r0, #24]
1002:./FWLIB/src/stm32f4xx_sai.c **** }
 855              		.loc 1 1002 0
 856 0006 7047     		bx	lr
 857              		.cfi_endproc
 858              	.LFE134:
 860              		.section	.text.SAI_GetCmdStatus,"ax",%progbits
 861              		.align	1
 862              		.global	SAI_GetCmdStatus
 863              		.syntax unified
 864              		.thumb
 865              		.thumb_func
 866              		.fpu fpv4-sp-d16
 868              	SAI_GetCmdStatus:
 869              	.LFB135:
1003:./FWLIB/src/stm32f4xx_sai.c **** 
1004:./FWLIB/src/stm32f4xx_sai.c **** /**
1005:./FWLIB/src/stm32f4xx_sai.c ****   * @brief  Returns the status of EN bit for the specified SAI Block x.
1006:./FWLIB/src/stm32f4xx_sai.c ****   * @param  SAI_Block_x: where x can be A or B to select the SAI Block peripheral.
1007:./FWLIB/src/stm32f4xx_sai.c ****   *   
1008:./FWLIB/src/stm32f4xx_sai.c ****   * @note    After disabling a SAI Block, it is recommended to check (or wait until) 
1009:./FWLIB/src/stm32f4xx_sai.c ****   *          the SAI Block is effectively disabled. If a Block is disabled while
1010:./FWLIB/src/stm32f4xx_sai.c ****   *          an audio frame transfer is ongoing, the current frame will be 
1011:./FWLIB/src/stm32f4xx_sai.c ****   *          transferred and the block will be effectively disabled only at 
1012:./FWLIB/src/stm32f4xx_sai.c ****   *          the end of audio frame.  
1013:./FWLIB/src/stm32f4xx_sai.c ****   *      
1014:./FWLIB/src/stm32f4xx_sai.c ****   * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
1015:./FWLIB/src/stm32f4xx_sai.c ****   */
1016:./FWLIB/src/stm32f4xx_sai.c **** FunctionalState SAI_GetCmdStatus(SAI_Block_TypeDef* SAI_Block_x)
1017:./FWLIB/src/stm32f4xx_sai.c **** {
 870              		.loc 1 1017 0
 871              		.cfi_startproc
 872              		@ args = 0, pretend = 0, frame = 0
 873              		@ frame_needed = 0, uses_anonymous_args = 0
 874              		@ link register save eliminated.
 875              	.LVL62:
1018:./FWLIB/src/stm32f4xx_sai.c ****   FunctionalState state = DISABLE;
1019:./FWLIB/src/stm32f4xx_sai.c **** 
1020:./FWLIB/src/stm32f4xx_sai.c ****   /* Check the parameters */
1021:./FWLIB/src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
1022:./FWLIB/src/stm32f4xx_sai.c ****   if ((SAI_Block_x->CR1 & (uint32_t)SAI_xCR1_SAIEN) != 0)
 876              		.loc 1 1022 0
 877 0000 0368     		ldr	r3, [r0]
 878 0002 13F4803F 		tst	r3, #65536
 879 0006 01D1     		bne	.L53
1023:./FWLIB/src/stm32f4xx_sai.c ****   {
1024:./FWLIB/src/stm32f4xx_sai.c ****     /* The selected SAI Block x EN bit is set (audio frame transfer is ongoing) */
1025:./FWLIB/src/stm32f4xx_sai.c ****     state = ENABLE;
1026:./FWLIB/src/stm32f4xx_sai.c ****   }
1027:./FWLIB/src/stm32f4xx_sai.c ****   else
1028:./FWLIB/src/stm32f4xx_sai.c ****   {
1029:./FWLIB/src/stm32f4xx_sai.c ****     /* The selected SAI Block x EN bit is cleared (SAI Block is disabled and 
1030:./FWLIB/src/stm32f4xx_sai.c ****         all transfers are complete) */
1031:./FWLIB/src/stm32f4xx_sai.c ****     state = DISABLE;
 880              		.loc 1 1031 0
ARM GAS  /tmp/ccinunCO.s 			page 34


 881 0008 0020     		movs	r0, #0
 882              	.LVL63:
1032:./FWLIB/src/stm32f4xx_sai.c ****   }
1033:./FWLIB/src/stm32f4xx_sai.c ****   return state;
1034:./FWLIB/src/stm32f4xx_sai.c **** }
 883              		.loc 1 1034 0
 884 000a 7047     		bx	lr
 885              	.LVL64:
 886              	.L53:
1025:./FWLIB/src/stm32f4xx_sai.c ****   }
 887              		.loc 1 1025 0
 888 000c 0120     		movs	r0, #1
 889              	.LVL65:
 890 000e 7047     		bx	lr
 891              		.cfi_endproc
 892              	.LFE135:
 894              		.section	.text.SAI_GetFIFOStatus,"ax",%progbits
 895              		.align	1
 896              		.global	SAI_GetFIFOStatus
 897              		.syntax unified
 898              		.thumb
 899              		.thumb_func
 900              		.fpu fpv4-sp-d16
 902              	SAI_GetFIFOStatus:
 903              	.LFB136:
1035:./FWLIB/src/stm32f4xx_sai.c **** 
1036:./FWLIB/src/stm32f4xx_sai.c **** /**
1037:./FWLIB/src/stm32f4xx_sai.c ****   * @brief  Returns the current SAI Block x FIFO filled level.
1038:./FWLIB/src/stm32f4xx_sai.c ****   * @param  SAI_Block_x: where x can be A or B to select the SAI Block peripheral.
1039:./FWLIB/src/stm32f4xx_sai.c ****   *   
1040:./FWLIB/src/stm32f4xx_sai.c ****   * @retval The FIFO filling state.
1041:./FWLIB/src/stm32f4xx_sai.c ****   *           - SAI_FIFOStatus_Empty: when FIFO is empty  
1042:./FWLIB/src/stm32f4xx_sai.c ****   *           - SAI_FIFOStatus_Less1QuarterFull: when FIFO is less than 1 quarter-full 
1043:./FWLIB/src/stm32f4xx_sai.c ****   *                                               and not empty.
1044:./FWLIB/src/stm32f4xx_sai.c ****   *           - SAI_FIFOStatus_1QuarterFull: if more than 1 quarter-full.
1045:./FWLIB/src/stm32f4xx_sai.c ****   *           - SAI_FIFOStatus_HalfFull: if more than 1 half-full.
1046:./FWLIB/src/stm32f4xx_sai.c ****   *           - SAI_FIFOStatus_3QuartersFull: if more than 3 quarters-full.
1047:./FWLIB/src/stm32f4xx_sai.c ****   *           - SAI_FIFOStatus_Full: when FIFO is full
1048:./FWLIB/src/stm32f4xx_sai.c ****   */
1049:./FWLIB/src/stm32f4xx_sai.c **** uint32_t SAI_GetFIFOStatus(SAI_Block_TypeDef* SAI_Block_x)
1050:./FWLIB/src/stm32f4xx_sai.c **** {
 904              		.loc 1 1050 0
 905              		.cfi_startproc
 906              		@ args = 0, pretend = 0, frame = 0
 907              		@ frame_needed = 0, uses_anonymous_args = 0
 908              		@ link register save eliminated.
 909              	.LVL66:
1051:./FWLIB/src/stm32f4xx_sai.c ****   uint32_t tmpreg = 0;
1052:./FWLIB/src/stm32f4xx_sai.c ****  
1053:./FWLIB/src/stm32f4xx_sai.c ****   /* Check the parameters */
1054:./FWLIB/src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
1055:./FWLIB/src/stm32f4xx_sai.c ****   
1056:./FWLIB/src/stm32f4xx_sai.c ****   /* Get the FIFO level bits */
1057:./FWLIB/src/stm32f4xx_sai.c ****   tmpreg = (uint32_t)((SAI_Block_x->SR & SAI_xSR_FLVL));
 910              		.loc 1 1057 0
 911 0000 4069     		ldr	r0, [r0, #20]
 912              	.LVL67:
ARM GAS  /tmp/ccinunCO.s 			page 35


1058:./FWLIB/src/stm32f4xx_sai.c ****   
1059:./FWLIB/src/stm32f4xx_sai.c ****   return tmpreg;
1060:./FWLIB/src/stm32f4xx_sai.c **** }
 913              		.loc 1 1060 0
 914 0002 00F4E020 		and	r0, r0, #458752
 915              	.LVL68:
 916 0006 7047     		bx	lr
 917              		.cfi_endproc
 918              	.LFE136:
 920              		.text
 921              	.Letext0:
 922              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 923              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 924              		.file 4 "build/lnInclude/core_cm4.h"
 925              		.file 5 "build/lnInclude/system_stm32f4xx.h"
 926              		.file 6 "build/lnInclude/stm32f4xx.h"
 927              		.file 7 "build/lnInclude/stm32f4xx_sai.h"
 928              		.file 8 "build/lnInclude/stm32f4xx_rcc.h"
ARM GAS  /tmp/ccinunCO.s 			page 36


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_sai.c
     /tmp/ccinunCO.s:18     .text.SAI_DeInit:0000000000000000 $t
     /tmp/ccinunCO.s:25     .text.SAI_DeInit:0000000000000000 SAI_DeInit
     /tmp/ccinunCO.s:55     .text.SAI_Init:0000000000000000 $t
     /tmp/ccinunCO.s:62     .text.SAI_Init:0000000000000000 SAI_Init
     /tmp/ccinunCO.s:136    .text.SAI_Init:0000000000000044 $d
     /tmp/ccinunCO.s:141    .text.SAI_FrameInit:0000000000000000 $t
     /tmp/ccinunCO.s:148    .text.SAI_FrameInit:0000000000000000 SAI_FrameInit
     /tmp/ccinunCO.s:202    .text.SAI_FrameInit:000000000000002c $d
     /tmp/ccinunCO.s:207    .text.SAI_SlotInit:0000000000000000 $t
     /tmp/ccinunCO.s:214    .text.SAI_SlotInit:0000000000000000 SAI_SlotInit
     /tmp/ccinunCO.s:267    .text.SAI_StructInit:0000000000000000 $t
     /tmp/ccinunCO.s:274    .text.SAI_StructInit:0000000000000000 SAI_StructInit
     /tmp/ccinunCO.s:310    .text.SAI_FrameStructInit:0000000000000000 $t
     /tmp/ccinunCO.s:317    .text.SAI_FrameStructInit:0000000000000000 SAI_FrameStructInit
     /tmp/ccinunCO.s:344    .text.SAI_SlotStructInit:0000000000000000 $t
     /tmp/ccinunCO.s:351    .text.SAI_SlotStructInit:0000000000000000 SAI_SlotStructInit
     /tmp/ccinunCO.s:375    .text.SAI_Cmd:0000000000000000 $t
     /tmp/ccinunCO.s:382    .text.SAI_Cmd:0000000000000000 SAI_Cmd
     /tmp/ccinunCO.s:408    .text.SAI_MonoModeConfig:0000000000000000 $t
     /tmp/ccinunCO.s:415    .text.SAI_MonoModeConfig:0000000000000000 SAI_MonoModeConfig
     /tmp/ccinunCO.s:437    .text.SAI_TRIStateConfig:0000000000000000 $t
     /tmp/ccinunCO.s:444    .text.SAI_TRIStateConfig:0000000000000000 SAI_TRIStateConfig
     /tmp/ccinunCO.s:466    .text.SAI_CompandingModeConfig:0000000000000000 $t
     /tmp/ccinunCO.s:473    .text.SAI_CompandingModeConfig:0000000000000000 SAI_CompandingModeConfig
     /tmp/ccinunCO.s:496    .text.SAI_MuteModeCmd:0000000000000000 $t
     /tmp/ccinunCO.s:503    .text.SAI_MuteModeCmd:0000000000000000 SAI_MuteModeCmd
     /tmp/ccinunCO.s:529    .text.SAI_MuteValueConfig:0000000000000000 $t
     /tmp/ccinunCO.s:536    .text.SAI_MuteValueConfig:0000000000000000 SAI_MuteValueConfig
     /tmp/ccinunCO.s:559    .text.SAI_MuteFrameCounterConfig:0000000000000000 $t
     /tmp/ccinunCO.s:566    .text.SAI_MuteFrameCounterConfig:0000000000000000 SAI_MuteFrameCounterConfig
     /tmp/ccinunCO.s:589    .text.SAI_FlushFIFO:0000000000000000 $t
     /tmp/ccinunCO.s:596    .text.SAI_FlushFIFO:0000000000000000 SAI_FlushFIFO
     /tmp/ccinunCO.s:614    .text.SAI_ReceiveData:0000000000000000 $t
     /tmp/ccinunCO.s:621    .text.SAI_ReceiveData:0000000000000000 SAI_ReceiveData
     /tmp/ccinunCO.s:638    .text.SAI_SendData:0000000000000000 $t
     /tmp/ccinunCO.s:645    .text.SAI_SendData:0000000000000000 SAI_SendData
     /tmp/ccinunCO.s:661    .text.SAI_DMACmd:0000000000000000 $t
     /tmp/ccinunCO.s:668    .text.SAI_DMACmd:0000000000000000 SAI_DMACmd
     /tmp/ccinunCO.s:694    .text.SAI_ITConfig:0000000000000000 $t
     /tmp/ccinunCO.s:701    .text.SAI_ITConfig:0000000000000000 SAI_ITConfig
     /tmp/ccinunCO.s:730    .text.SAI_GetFlagStatus:0000000000000000 $t
     /tmp/ccinunCO.s:737    .text.SAI_GetFlagStatus:0000000000000000 SAI_GetFlagStatus
     /tmp/ccinunCO.s:764    .text.SAI_ClearFlag:0000000000000000 $t
     /tmp/ccinunCO.s:771    .text.SAI_ClearFlag:0000000000000000 SAI_ClearFlag
     /tmp/ccinunCO.s:790    .text.SAI_GetITStatus:0000000000000000 $t
     /tmp/ccinunCO.s:797    .text.SAI_GetITStatus:0000000000000000 SAI_GetITStatus
     /tmp/ccinunCO.s:835    .text.SAI_ClearITPendingBit:0000000000000000 $t
     /tmp/ccinunCO.s:842    .text.SAI_ClearITPendingBit:0000000000000000 SAI_ClearITPendingBit
     /tmp/ccinunCO.s:861    .text.SAI_GetCmdStatus:0000000000000000 $t
     /tmp/ccinunCO.s:868    .text.SAI_GetCmdStatus:0000000000000000 SAI_GetCmdStatus
     /tmp/ccinunCO.s:895    .text.SAI_GetFIFOStatus:0000000000000000 $t
     /tmp/ccinunCO.s:902    .text.SAI_GetFIFOStatus:0000000000000000 SAI_GetFIFOStatus

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
ARM GAS  /tmp/ccinunCO.s 			page 37


