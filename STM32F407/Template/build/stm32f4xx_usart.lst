ARM GAS  /tmp/ccecLeJr.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_usart.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.USART_DeInit,"ax",%progbits
  18              		.align	1
  19              		.global	USART_DeInit
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	USART_DeInit:
  26              	.LFB112:
  27              		.file 1 "./FWLIB/src/stm32f4xx_usart.c"
   1:./FWLIB/src/stm32f4xx_usart.c **** /**
   2:./FWLIB/src/stm32f4xx_usart.c ****   ******************************************************************************
   3:./FWLIB/src/stm32f4xx_usart.c ****   * @file    stm32f4xx_usart.c
   4:./FWLIB/src/stm32f4xx_usart.c ****   * @author  MCD Application Team
   5:./FWLIB/src/stm32f4xx_usart.c ****   * @version V1.4.0
   6:./FWLIB/src/stm32f4xx_usart.c ****   * @date    04-August-2014
   7:./FWLIB/src/stm32f4xx_usart.c ****   * @brief   This file provides firmware functions to manage the following 
   8:./FWLIB/src/stm32f4xx_usart.c ****   *          functionalities of the Universal synchronous asynchronous receiver
   9:./FWLIB/src/stm32f4xx_usart.c ****   *          transmitter (USART):           
  10:./FWLIB/src/stm32f4xx_usart.c ****   *           + Initialization and Configuration
  11:./FWLIB/src/stm32f4xx_usart.c ****   *           + Data transfers
  12:./FWLIB/src/stm32f4xx_usart.c ****   *           + Multi-Processor Communication
  13:./FWLIB/src/stm32f4xx_usart.c ****   *           + LIN mode
  14:./FWLIB/src/stm32f4xx_usart.c ****   *           + Half-duplex mode
  15:./FWLIB/src/stm32f4xx_usart.c ****   *           + Smartcard mode
  16:./FWLIB/src/stm32f4xx_usart.c ****   *           + IrDA mode
  17:./FWLIB/src/stm32f4xx_usart.c ****   *           + DMA transfers management
  18:./FWLIB/src/stm32f4xx_usart.c ****   *           + Interrupts and flags management 
  19:./FWLIB/src/stm32f4xx_usart.c ****   *           
  20:./FWLIB/src/stm32f4xx_usart.c ****   @verbatim       
  21:./FWLIB/src/stm32f4xx_usart.c ****  ===============================================================================
  22:./FWLIB/src/stm32f4xx_usart.c ****                         ##### How to use this driver #####
  23:./FWLIB/src/stm32f4xx_usart.c ****  ===============================================================================
  24:./FWLIB/src/stm32f4xx_usart.c ****     [..]
  25:./FWLIB/src/stm32f4xx_usart.c ****       (#) Enable peripheral clock using the following functions
  26:./FWLIB/src/stm32f4xx_usart.c ****           RCC_APB2PeriphClockCmd(RCC_APB2Periph_USARTx, ENABLE) for USART1 and USART6 
  27:./FWLIB/src/stm32f4xx_usart.c ****           RCC_APB1PeriphClockCmd(RCC_APB1Periph_USARTx, ENABLE) for USART2, USART3, 
  28:./FWLIB/src/stm32f4xx_usart.c ****           UART4 or UART5.
  29:./FWLIB/src/stm32f4xx_usart.c ****   
  30:./FWLIB/src/stm32f4xx_usart.c ****       (#) According to the USART mode, enable the GPIO clocks using 
  31:./FWLIB/src/stm32f4xx_usart.c ****           RCC_AHB1PeriphClockCmd() function. (The I/O can be TX, RX, CTS, 
ARM GAS  /tmp/ccecLeJr.s 			page 2


  32:./FWLIB/src/stm32f4xx_usart.c ****           or/and SCLK). 
  33:./FWLIB/src/stm32f4xx_usart.c ****   
  34:./FWLIB/src/stm32f4xx_usart.c ****       (#) Peripheral's alternate function: 
  35:./FWLIB/src/stm32f4xx_usart.c ****         (++) Connect the pin to the desired peripherals' Alternate 
  36:./FWLIB/src/stm32f4xx_usart.c ****             Function (AF) using GPIO_PinAFConfig() function
  37:./FWLIB/src/stm32f4xx_usart.c ****         (++) Configure the desired pin in alternate function by:
  38:./FWLIB/src/stm32f4xx_usart.c ****             GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
  39:./FWLIB/src/stm32f4xx_usart.c ****         (++) Select the type, pull-up/pull-down and output speed via 
  40:./FWLIB/src/stm32f4xx_usart.c ****             GPIO_PuPd, GPIO_OType and GPIO_Speed members
  41:./FWLIB/src/stm32f4xx_usart.c ****         (++) Call GPIO_Init() function
  42:./FWLIB/src/stm32f4xx_usart.c ****           
  43:./FWLIB/src/stm32f4xx_usart.c ****       (#) Program the Baud Rate, Word Length , Stop Bit, Parity, Hardware 
  44:./FWLIB/src/stm32f4xx_usart.c ****           flow control and Mode(Receiver/Transmitter) using the USART_Init()
  45:./FWLIB/src/stm32f4xx_usart.c ****           function.
  46:./FWLIB/src/stm32f4xx_usart.c ****   
  47:./FWLIB/src/stm32f4xx_usart.c ****       (#) For synchronous mode, enable the clock and program the polarity,
  48:./FWLIB/src/stm32f4xx_usart.c ****           phase and last bit using the USART_ClockInit() function.
  49:./FWLIB/src/stm32f4xx_usart.c ****   
  50:./FWLIB/src/stm32f4xx_usart.c ****       (#) Enable the NVIC and the corresponding interrupt using the function 
  51:./FWLIB/src/stm32f4xx_usart.c ****          USART_ITConfig() if you need to use interrupt mode. 
  52:./FWLIB/src/stm32f4xx_usart.c ****   
  53:./FWLIB/src/stm32f4xx_usart.c ****       (#) When using the DMA mode 
  54:./FWLIB/src/stm32f4xx_usart.c ****         (++) Configure the DMA using DMA_Init() function
  55:./FWLIB/src/stm32f4xx_usart.c ****         (++) Active the needed channel Request using USART_DMACmd() function
  56:./FWLIB/src/stm32f4xx_usart.c ****    
  57:./FWLIB/src/stm32f4xx_usart.c ****       (#) Enable the USART using the USART_Cmd() function.
  58:./FWLIB/src/stm32f4xx_usart.c ****    
  59:./FWLIB/src/stm32f4xx_usart.c ****       (#) Enable the DMA using the DMA_Cmd() function, when using DMA mode. 
  60:./FWLIB/src/stm32f4xx_usart.c ****     
  61:./FWLIB/src/stm32f4xx_usart.c ****       -@- Refer to Multi-Processor, LIN, half-duplex, Smartcard, IrDA sub-sections
  62:./FWLIB/src/stm32f4xx_usart.c ****           for more details
  63:./FWLIB/src/stm32f4xx_usart.c ****     
  64:./FWLIB/src/stm32f4xx_usart.c ****     [..]        
  65:./FWLIB/src/stm32f4xx_usart.c ****     In order to reach higher communication baudrates, it is possible to
  66:./FWLIB/src/stm32f4xx_usart.c ****     enable the oversampling by 8 mode using the function USART_OverSampling8Cmd().
  67:./FWLIB/src/stm32f4xx_usart.c ****     This function should be called after enabling the USART clock (RCC_APBxPeriphClockCmd())
  68:./FWLIB/src/stm32f4xx_usart.c ****     and before calling the function USART_Init().
  69:./FWLIB/src/stm32f4xx_usart.c ****             
  70:./FWLIB/src/stm32f4xx_usart.c ****     @endverbatim        
  71:./FWLIB/src/stm32f4xx_usart.c ****   ******************************************************************************
  72:./FWLIB/src/stm32f4xx_usart.c ****   * @attention
  73:./FWLIB/src/stm32f4xx_usart.c ****   *
  74:./FWLIB/src/stm32f4xx_usart.c ****   * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
  75:./FWLIB/src/stm32f4xx_usart.c ****   *
  76:./FWLIB/src/stm32f4xx_usart.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  77:./FWLIB/src/stm32f4xx_usart.c ****   * You may not use this file except in compliance with the License.
  78:./FWLIB/src/stm32f4xx_usart.c ****   * You may obtain a copy of the License at:
  79:./FWLIB/src/stm32f4xx_usart.c ****   *
  80:./FWLIB/src/stm32f4xx_usart.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  81:./FWLIB/src/stm32f4xx_usart.c ****   *
  82:./FWLIB/src/stm32f4xx_usart.c ****   * Unless required by applicable law or agreed to in writing, software 
  83:./FWLIB/src/stm32f4xx_usart.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  84:./FWLIB/src/stm32f4xx_usart.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  85:./FWLIB/src/stm32f4xx_usart.c ****   * See the License for the specific language governing permissions and
  86:./FWLIB/src/stm32f4xx_usart.c ****   * limitations under the License.
  87:./FWLIB/src/stm32f4xx_usart.c ****   *
  88:./FWLIB/src/stm32f4xx_usart.c ****   ******************************************************************************  
ARM GAS  /tmp/ccecLeJr.s 			page 3


  89:./FWLIB/src/stm32f4xx_usart.c ****   */ 
  90:./FWLIB/src/stm32f4xx_usart.c **** 
  91:./FWLIB/src/stm32f4xx_usart.c **** /* Includes ------------------------------------------------------------------*/
  92:./FWLIB/src/stm32f4xx_usart.c **** #include "stm32f4xx_usart.h"
  93:./FWLIB/src/stm32f4xx_usart.c **** #include "stm32f4xx_rcc.h"
  94:./FWLIB/src/stm32f4xx_usart.c **** 
  95:./FWLIB/src/stm32f4xx_usart.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  96:./FWLIB/src/stm32f4xx_usart.c ****   * @{
  97:./FWLIB/src/stm32f4xx_usart.c ****   */
  98:./FWLIB/src/stm32f4xx_usart.c **** 
  99:./FWLIB/src/stm32f4xx_usart.c **** /** @defgroup USART 
 100:./FWLIB/src/stm32f4xx_usart.c ****   * @brief USART driver modules
 101:./FWLIB/src/stm32f4xx_usart.c ****   * @{
 102:./FWLIB/src/stm32f4xx_usart.c ****   */
 103:./FWLIB/src/stm32f4xx_usart.c **** 
 104:./FWLIB/src/stm32f4xx_usart.c **** /* Private typedef -----------------------------------------------------------*/
 105:./FWLIB/src/stm32f4xx_usart.c **** /* Private define ------------------------------------------------------------*/
 106:./FWLIB/src/stm32f4xx_usart.c **** 
 107:./FWLIB/src/stm32f4xx_usart.c **** /*!< USART CR1 register clear Mask ((~(uint16_t)0xE9F3)) */
 108:./FWLIB/src/stm32f4xx_usart.c **** #define CR1_CLEAR_MASK            ((uint16_t)(USART_CR1_M | USART_CR1_PCE | \
 109:./FWLIB/src/stm32f4xx_usart.c ****                                               USART_CR1_PS | USART_CR1_TE | \
 110:./FWLIB/src/stm32f4xx_usart.c ****                                               USART_CR1_RE))
 111:./FWLIB/src/stm32f4xx_usart.c **** 
 112:./FWLIB/src/stm32f4xx_usart.c **** /*!< USART CR2 register clock bits clear Mask ((~(uint16_t)0xF0FF)) */
 113:./FWLIB/src/stm32f4xx_usart.c **** #define CR2_CLOCK_CLEAR_MASK      ((uint16_t)(USART_CR2_CLKEN | USART_CR2_CPOL | \
 114:./FWLIB/src/stm32f4xx_usart.c ****                                               USART_CR2_CPHA | USART_CR2_LBCL))
 115:./FWLIB/src/stm32f4xx_usart.c **** 
 116:./FWLIB/src/stm32f4xx_usart.c **** /*!< USART CR3 register clear Mask ((~(uint16_t)0xFCFF)) */
 117:./FWLIB/src/stm32f4xx_usart.c **** #define CR3_CLEAR_MASK            ((uint16_t)(USART_CR3_RTSE | USART_CR3_CTSE))
 118:./FWLIB/src/stm32f4xx_usart.c **** 
 119:./FWLIB/src/stm32f4xx_usart.c **** /*!< USART Interrupts mask */
 120:./FWLIB/src/stm32f4xx_usart.c **** #define IT_MASK                   ((uint16_t)0x001F)
 121:./FWLIB/src/stm32f4xx_usart.c **** 
 122:./FWLIB/src/stm32f4xx_usart.c **** /* Private macro -------------------------------------------------------------*/
 123:./FWLIB/src/stm32f4xx_usart.c **** /* Private variables ---------------------------------------------------------*/
 124:./FWLIB/src/stm32f4xx_usart.c **** /* Private function prototypes -----------------------------------------------*/
 125:./FWLIB/src/stm32f4xx_usart.c **** /* Private functions ---------------------------------------------------------*/
 126:./FWLIB/src/stm32f4xx_usart.c **** 
 127:./FWLIB/src/stm32f4xx_usart.c **** /** @defgroup USART_Private_Functions
 128:./FWLIB/src/stm32f4xx_usart.c ****   * @{
 129:./FWLIB/src/stm32f4xx_usart.c ****   */
 130:./FWLIB/src/stm32f4xx_usart.c **** 
 131:./FWLIB/src/stm32f4xx_usart.c **** /** @defgroup USART_Group1 Initialization and Configuration functions
 132:./FWLIB/src/stm32f4xx_usart.c ****  *  @brief   Initialization and Configuration functions 
 133:./FWLIB/src/stm32f4xx_usart.c ****  *
 134:./FWLIB/src/stm32f4xx_usart.c **** @verbatim   
 135:./FWLIB/src/stm32f4xx_usart.c ****  ===============================================================================
 136:./FWLIB/src/stm32f4xx_usart.c ****             ##### Initialization and Configuration functions #####
 137:./FWLIB/src/stm32f4xx_usart.c ****  ===============================================================================  
 138:./FWLIB/src/stm32f4xx_usart.c ****     [..]
 139:./FWLIB/src/stm32f4xx_usart.c ****     This subsection provides a set of functions allowing to initialize the USART 
 140:./FWLIB/src/stm32f4xx_usart.c ****     in asynchronous and in synchronous modes.
 141:./FWLIB/src/stm32f4xx_usart.c ****       (+) For the asynchronous mode only these parameters can be configured: 
 142:./FWLIB/src/stm32f4xx_usart.c ****         (++) Baud Rate
 143:./FWLIB/src/stm32f4xx_usart.c ****         (++) Word Length 
 144:./FWLIB/src/stm32f4xx_usart.c ****         (++) Stop Bit
 145:./FWLIB/src/stm32f4xx_usart.c ****         (++) Parity: If the parity is enabled, then the MSB bit of the data written
ARM GAS  /tmp/ccecLeJr.s 			page 4


 146:./FWLIB/src/stm32f4xx_usart.c ****              in the data register is transmitted but is changed by the parity bit.
 147:./FWLIB/src/stm32f4xx_usart.c ****              Depending on the frame length defined by the M bit (8-bits or 9-bits),
 148:./FWLIB/src/stm32f4xx_usart.c ****              the possible USART frame formats are as listed in the following table:
 149:./FWLIB/src/stm32f4xx_usart.c ****    +-------------------------------------------------------------+     
 150:./FWLIB/src/stm32f4xx_usart.c ****    |   M bit |  PCE bit  |            USART frame                |
 151:./FWLIB/src/stm32f4xx_usart.c ****    |---------------------|---------------------------------------|             
 152:./FWLIB/src/stm32f4xx_usart.c ****    |    0    |    0      |    | SB | 8 bit data | STB |          |
 153:./FWLIB/src/stm32f4xx_usart.c ****    |---------|-----------|---------------------------------------|  
 154:./FWLIB/src/stm32f4xx_usart.c ****    |    0    |    1      |    | SB | 7 bit data | PB | STB |     |
 155:./FWLIB/src/stm32f4xx_usart.c ****    |---------|-----------|---------------------------------------|  
 156:./FWLIB/src/stm32f4xx_usart.c ****    |    1    |    0      |    | SB | 9 bit data | STB |          |
 157:./FWLIB/src/stm32f4xx_usart.c ****    |---------|-----------|---------------------------------------|  
 158:./FWLIB/src/stm32f4xx_usart.c ****    |    1    |    1      |    | SB | 8 bit data | PB | STB |     |
 159:./FWLIB/src/stm32f4xx_usart.c ****    +-------------------------------------------------------------+            
 160:./FWLIB/src/stm32f4xx_usart.c ****         (++) Hardware flow control
 161:./FWLIB/src/stm32f4xx_usart.c ****         (++) Receiver/transmitter modes
 162:./FWLIB/src/stm32f4xx_usart.c **** 
 163:./FWLIB/src/stm32f4xx_usart.c ****     [..]
 164:./FWLIB/src/stm32f4xx_usart.c ****     The USART_Init() function follows the USART  asynchronous configuration 
 165:./FWLIB/src/stm32f4xx_usart.c ****     procedure (details for the procedure are available in reference manual (RM0090)).
 166:./FWLIB/src/stm32f4xx_usart.c **** 
 167:./FWLIB/src/stm32f4xx_usart.c ****      (+) For the synchronous mode in addition to the asynchronous mode parameters these 
 168:./FWLIB/src/stm32f4xx_usart.c ****          parameters should be also configured:
 169:./FWLIB/src/stm32f4xx_usart.c ****         (++) USART Clock Enabled
 170:./FWLIB/src/stm32f4xx_usart.c ****         (++) USART polarity
 171:./FWLIB/src/stm32f4xx_usart.c ****         (++) USART phase
 172:./FWLIB/src/stm32f4xx_usart.c ****         (++) USART LastBit
 173:./FWLIB/src/stm32f4xx_usart.c ****   
 174:./FWLIB/src/stm32f4xx_usart.c ****     [..]
 175:./FWLIB/src/stm32f4xx_usart.c ****     These parameters can be configured using the USART_ClockInit() function.
 176:./FWLIB/src/stm32f4xx_usart.c **** 
 177:./FWLIB/src/stm32f4xx_usart.c **** @endverbatim
 178:./FWLIB/src/stm32f4xx_usart.c ****   * @{
 179:./FWLIB/src/stm32f4xx_usart.c ****   */
 180:./FWLIB/src/stm32f4xx_usart.c ****   
 181:./FWLIB/src/stm32f4xx_usart.c **** /**
 182:./FWLIB/src/stm32f4xx_usart.c ****   * @brief  Deinitializes the USARTx peripheral registers to their default reset values.
 183:./FWLIB/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 184:./FWLIB/src/stm32f4xx_usart.c ****   *         UART peripheral.
 185:./FWLIB/src/stm32f4xx_usart.c ****   * @retval None
 186:./FWLIB/src/stm32f4xx_usart.c ****   */
 187:./FWLIB/src/stm32f4xx_usart.c **** void USART_DeInit(USART_TypeDef* USARTx)
 188:./FWLIB/src/stm32f4xx_usart.c **** {
  28              		.loc 1 188 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 08B5     		push	{r3, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 3, -8
  37              		.cfi_offset 14, -4
 189:./FWLIB/src/stm32f4xx_usart.c ****   /* Check the parameters */
 190:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 191:./FWLIB/src/stm32f4xx_usart.c **** 
 192:./FWLIB/src/stm32f4xx_usart.c ****   if (USARTx == USART1)
ARM GAS  /tmp/ccecLeJr.s 			page 5


  38              		.loc 1 192 0
  39 0002 364B     		ldr	r3, .L19
  40 0004 9842     		cmp	r0, r3
  41 0006 15D0     		beq	.L11
 193:./FWLIB/src/stm32f4xx_usart.c ****   {
 194:./FWLIB/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 195:./FWLIB/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 196:./FWLIB/src/stm32f4xx_usart.c ****   }
 197:./FWLIB/src/stm32f4xx_usart.c ****   else if (USARTx == USART2)
  42              		.loc 1 197 0
  43 0008 354B     		ldr	r3, .L19+4
  44 000a 9842     		cmp	r0, r3
  45 000c 1BD0     		beq	.L12
 198:./FWLIB/src/stm32f4xx_usart.c ****   {
 199:./FWLIB/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 200:./FWLIB/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 201:./FWLIB/src/stm32f4xx_usart.c ****   }
 202:./FWLIB/src/stm32f4xx_usart.c ****   else if (USARTx == USART3)
  46              		.loc 1 202 0
  47 000e 354B     		ldr	r3, .L19+8
  48 0010 9842     		cmp	r0, r3
  49 0012 23D0     		beq	.L13
 203:./FWLIB/src/stm32f4xx_usart.c ****   {
 204:./FWLIB/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 205:./FWLIB/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 206:./FWLIB/src/stm32f4xx_usart.c ****   }    
 207:./FWLIB/src/stm32f4xx_usart.c ****   else if (USARTx == UART4)
  50              		.loc 1 207 0
  51 0014 344B     		ldr	r3, .L19+12
  52 0016 9842     		cmp	r0, r3
  53 0018 2BD0     		beq	.L14
 208:./FWLIB/src/stm32f4xx_usart.c ****   {
 209:./FWLIB/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 210:./FWLIB/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 211:./FWLIB/src/stm32f4xx_usart.c ****   }
 212:./FWLIB/src/stm32f4xx_usart.c ****   else if (USARTx == UART5)
  54              		.loc 1 212 0
  55 001a 344B     		ldr	r3, .L19+16
  56 001c 9842     		cmp	r0, r3
  57 001e 33D0     		beq	.L15
 213:./FWLIB/src/stm32f4xx_usart.c ****   {
 214:./FWLIB/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 215:./FWLIB/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 216:./FWLIB/src/stm32f4xx_usart.c ****   }  
 217:./FWLIB/src/stm32f4xx_usart.c ****   else if (USARTx == USART6)
  58              		.loc 1 217 0
  59 0020 334B     		ldr	r3, .L19+20
  60 0022 9842     		cmp	r0, r3
  61 0024 3BD0     		beq	.L16
 218:./FWLIB/src/stm32f4xx_usart.c ****   {
 219:./FWLIB/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 220:./FWLIB/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 221:./FWLIB/src/stm32f4xx_usart.c ****   }
 222:./FWLIB/src/stm32f4xx_usart.c ****   else if (USARTx == UART7)
  62              		.loc 1 222 0
  63 0026 334B     		ldr	r3, .L19+24
  64 0028 9842     		cmp	r0, r3
ARM GAS  /tmp/ccecLeJr.s 			page 6


  65 002a 41D0     		beq	.L17
 223:./FWLIB/src/stm32f4xx_usart.c ****   {
 224:./FWLIB/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
 225:./FWLIB/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
 226:./FWLIB/src/stm32f4xx_usart.c ****   }     
 227:./FWLIB/src/stm32f4xx_usart.c ****   else
 228:./FWLIB/src/stm32f4xx_usart.c ****   {
 229:./FWLIB/src/stm32f4xx_usart.c ****     if (USARTx == UART8)
  66              		.loc 1 229 0
  67 002c 324B     		ldr	r3, .L19+28
  68 002e 9842     		cmp	r0, r3
  69 0030 49D0     		beq	.L18
  70              	.LVL1:
  71              	.L1:
 230:./FWLIB/src/stm32f4xx_usart.c ****     { 
 231:./FWLIB/src/stm32f4xx_usart.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
 232:./FWLIB/src/stm32f4xx_usart.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
 233:./FWLIB/src/stm32f4xx_usart.c ****     }
 234:./FWLIB/src/stm32f4xx_usart.c ****   }
 235:./FWLIB/src/stm32f4xx_usart.c **** }
  72              		.loc 1 235 0
  73 0032 08BD     		pop	{r3, pc}
  74              	.LVL2:
  75              	.L11:
 194:./FWLIB/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  76              		.loc 1 194 0
  77 0034 0121     		movs	r1, #1
  78 0036 1020     		movs	r0, #16
  79              	.LVL3:
  80 0038 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  81              	.LVL4:
 195:./FWLIB/src/stm32f4xx_usart.c ****   }
  82              		.loc 1 195 0
  83 003c 0021     		movs	r1, #0
  84 003e 1020     		movs	r0, #16
  85 0040 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  86              	.LVL5:
  87 0044 F5E7     		b	.L1
  88              	.LVL6:
  89              	.L12:
 199:./FWLIB/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  90              		.loc 1 199 0
  91 0046 0121     		movs	r1, #1
  92 0048 4FF40030 		mov	r0, #131072
  93              	.LVL7:
  94 004c FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  95              	.LVL8:
 200:./FWLIB/src/stm32f4xx_usart.c ****   }
  96              		.loc 1 200 0
  97 0050 0021     		movs	r1, #0
  98 0052 4FF40030 		mov	r0, #131072
  99 0056 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 100              	.LVL9:
 101 005a EAE7     		b	.L1
 102              	.LVL10:
 103              	.L13:
 204:./FWLIB/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
ARM GAS  /tmp/ccecLeJr.s 			page 7


 104              		.loc 1 204 0
 105 005c 0121     		movs	r1, #1
 106 005e 4FF48020 		mov	r0, #262144
 107              	.LVL11:
 108 0062 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 109              	.LVL12:
 205:./FWLIB/src/stm32f4xx_usart.c ****   }    
 110              		.loc 1 205 0
 111 0066 0021     		movs	r1, #0
 112 0068 4FF48020 		mov	r0, #262144
 113 006c FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 114              	.LVL13:
 115 0070 DFE7     		b	.L1
 116              	.LVL14:
 117              	.L14:
 209:./FWLIB/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 118              		.loc 1 209 0
 119 0072 0121     		movs	r1, #1
 120 0074 4FF40020 		mov	r0, #524288
 121              	.LVL15:
 122 0078 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 123              	.LVL16:
 210:./FWLIB/src/stm32f4xx_usart.c ****   }
 124              		.loc 1 210 0
 125 007c 0021     		movs	r1, #0
 126 007e 4FF40020 		mov	r0, #524288
 127 0082 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 128              	.LVL17:
 129 0086 D4E7     		b	.L1
 130              	.LVL18:
 131              	.L15:
 214:./FWLIB/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 132              		.loc 1 214 0
 133 0088 0121     		movs	r1, #1
 134 008a 4FF48010 		mov	r0, #1048576
 135              	.LVL19:
 136 008e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 137              	.LVL20:
 215:./FWLIB/src/stm32f4xx_usart.c ****   }  
 138              		.loc 1 215 0
 139 0092 0021     		movs	r1, #0
 140 0094 4FF48010 		mov	r0, #1048576
 141 0098 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 142              	.LVL21:
 143 009c C9E7     		b	.L1
 144              	.LVL22:
 145              	.L16:
 219:./FWLIB/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 146              		.loc 1 219 0
 147 009e 0121     		movs	r1, #1
 148 00a0 2020     		movs	r0, #32
 149              	.LVL23:
 150 00a2 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 151              	.LVL24:
 220:./FWLIB/src/stm32f4xx_usart.c ****   }
 152              		.loc 1 220 0
 153 00a6 0021     		movs	r1, #0
ARM GAS  /tmp/ccecLeJr.s 			page 8


 154 00a8 2020     		movs	r0, #32
 155 00aa FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 156              	.LVL25:
 157 00ae C0E7     		b	.L1
 158              	.LVL26:
 159              	.L17:
 224:./FWLIB/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
 160              		.loc 1 224 0
 161 00b0 0121     		movs	r1, #1
 162 00b2 4FF08040 		mov	r0, #1073741824
 163              	.LVL27:
 164 00b6 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 165              	.LVL28:
 225:./FWLIB/src/stm32f4xx_usart.c ****   }     
 166              		.loc 1 225 0
 167 00ba 0021     		movs	r1, #0
 168 00bc 4FF08040 		mov	r0, #1073741824
 169 00c0 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 170              	.LVL29:
 171 00c4 B5E7     		b	.L1
 172              	.LVL30:
 173              	.L18:
 231:./FWLIB/src/stm32f4xx_usart.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
 174              		.loc 1 231 0
 175 00c6 0121     		movs	r1, #1
 176 00c8 4FF00040 		mov	r0, #-2147483648
 177              	.LVL31:
 178 00cc FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 179              	.LVL32:
 232:./FWLIB/src/stm32f4xx_usart.c ****     }
 180              		.loc 1 232 0
 181 00d0 0021     		movs	r1, #0
 182 00d2 4FF00040 		mov	r0, #-2147483648
 183 00d6 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 184              	.LVL33:
 185              		.loc 1 235 0
 186 00da AAE7     		b	.L1
 187              	.L20:
 188              		.align	2
 189              	.L19:
 190 00dc 00100140 		.word	1073811456
 191 00e0 00440040 		.word	1073759232
 192 00e4 00480040 		.word	1073760256
 193 00e8 004C0040 		.word	1073761280
 194 00ec 00500040 		.word	1073762304
 195 00f0 00140140 		.word	1073812480
 196 00f4 00780040 		.word	1073772544
 197 00f8 007C0040 		.word	1073773568
 198              		.cfi_endproc
 199              	.LFE112:
 201              		.section	.text.USART_Init,"ax",%progbits
 202              		.align	1
 203              		.global	USART_Init
 204              		.syntax unified
 205              		.thumb
 206              		.thumb_func
 207              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccecLeJr.s 			page 9


 209              	USART_Init:
 210              	.LFB113:
 236:./FWLIB/src/stm32f4xx_usart.c **** 
 237:./FWLIB/src/stm32f4xx_usart.c **** /**
 238:./FWLIB/src/stm32f4xx_usart.c ****   * @brief  Initializes the USARTx peripheral according to the specified
 239:./FWLIB/src/stm32f4xx_usart.c ****   *         parameters in the USART_InitStruct .
 240:./FWLIB/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 241:./FWLIB/src/stm32f4xx_usart.c ****   *         UART peripheral.
 242:./FWLIB/src/stm32f4xx_usart.c ****   * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
 243:./FWLIB/src/stm32f4xx_usart.c ****   *         the configuration information for the specified USART peripheral.
 244:./FWLIB/src/stm32f4xx_usart.c ****   * @retval None
 245:./FWLIB/src/stm32f4xx_usart.c ****   */
 246:./FWLIB/src/stm32f4xx_usart.c **** void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
 247:./FWLIB/src/stm32f4xx_usart.c **** {
 211              		.loc 1 247 0
 212              		.cfi_startproc
 213              		@ args = 0, pretend = 0, frame = 16
 214              		@ frame_needed = 0, uses_anonymous_args = 0
 215              	.LVL34:
 216 0000 30B5     		push	{r4, r5, lr}
 217              	.LCFI1:
 218              		.cfi_def_cfa_offset 12
 219              		.cfi_offset 4, -12
 220              		.cfi_offset 5, -8
 221              		.cfi_offset 14, -4
 222 0002 85B0     		sub	sp, sp, #20
 223              	.LCFI2:
 224              		.cfi_def_cfa_offset 32
 225 0004 0446     		mov	r4, r0
 226 0006 0D46     		mov	r5, r1
 227              	.LVL35:
 248:./FWLIB/src/stm32f4xx_usart.c ****   uint32_t tmpreg = 0x00, apbclock = 0x00;
 249:./FWLIB/src/stm32f4xx_usart.c ****   uint32_t integerdivider = 0x00;
 250:./FWLIB/src/stm32f4xx_usart.c ****   uint32_t fractionaldivider = 0x00;
 251:./FWLIB/src/stm32f4xx_usart.c ****   RCC_ClocksTypeDef RCC_ClocksStatus;
 252:./FWLIB/src/stm32f4xx_usart.c **** 
 253:./FWLIB/src/stm32f4xx_usart.c ****   /* Check the parameters */
 254:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 255:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
 256:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
 257:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
 258:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
 259:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
 260:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
 261:./FWLIB/src/stm32f4xx_usart.c **** 
 262:./FWLIB/src/stm32f4xx_usart.c ****   /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
 263:./FWLIB/src/stm32f4xx_usart.c ****   if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
 264:./FWLIB/src/stm32f4xx_usart.c ****   {
 265:./FWLIB/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
 266:./FWLIB/src/stm32f4xx_usart.c ****   }
 267:./FWLIB/src/stm32f4xx_usart.c **** 
 268:./FWLIB/src/stm32f4xx_usart.c **** /*---------------------------- USART CR2 Configuration -----------------------*/
 269:./FWLIB/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR2;
 228              		.loc 1 269 0
 229 0008 038A     		ldrh	r3, [r0, #16]
 230 000a 9BB2     		uxth	r3, r3
 231              	.LVL36:
ARM GAS  /tmp/ccecLeJr.s 			page 10


 270:./FWLIB/src/stm32f4xx_usart.c **** 
 271:./FWLIB/src/stm32f4xx_usart.c ****   /* Clear STOP[13:12] bits */
 272:./FWLIB/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 232              		.loc 1 272 0
 233 000c 23F44053 		bic	r3, r3, #12288
 234              	.LVL37:
 273:./FWLIB/src/stm32f4xx_usart.c **** 
 274:./FWLIB/src/stm32f4xx_usart.c ****   /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
 275:./FWLIB/src/stm32f4xx_usart.c ****       Set STOP[13:12] bits according to USART_StopBits value */
 276:./FWLIB/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 235              		.loc 1 276 0
 236 0010 CA88     		ldrh	r2, [r1, #6]
 237              	.LVL38:
 277:./FWLIB/src/stm32f4xx_usart.c ****   
 278:./FWLIB/src/stm32f4xx_usart.c ****   /* Write to USART CR2 */
 279:./FWLIB/src/stm32f4xx_usart.c ****   USARTx->CR2 = (uint16_t)tmpreg;
 238              		.loc 1 279 0
 239 0012 1343     		orrs	r3, r3, r2
 240              	.LVL39:
 241 0014 0382     		strh	r3, [r0, #16]	@ movhi
 280:./FWLIB/src/stm32f4xx_usart.c **** 
 281:./FWLIB/src/stm32f4xx_usart.c **** /*---------------------------- USART CR1 Configuration -----------------------*/
 282:./FWLIB/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR1;
 242              		.loc 1 282 0
 243 0016 8389     		ldrh	r3, [r0, #12]
 244              	.LVL40:
 245 0018 9BB2     		uxth	r3, r3
 246              	.LVL41:
 283:./FWLIB/src/stm32f4xx_usart.c **** 
 284:./FWLIB/src/stm32f4xx_usart.c ****   /* Clear M, PCE, PS, TE and RE bits */
 285:./FWLIB/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 247              		.loc 1 285 0
 248 001a 23F4B053 		bic	r3, r3, #5632
 249              	.LVL42:
 250 001e 23F00C03 		bic	r3, r3, #12
 251              	.LVL43:
 286:./FWLIB/src/stm32f4xx_usart.c **** 
 287:./FWLIB/src/stm32f4xx_usart.c ****   /* Configure the USART Word Length, Parity and mode: 
 288:./FWLIB/src/stm32f4xx_usart.c ****      Set the M bits according to USART_WordLength value 
 289:./FWLIB/src/stm32f4xx_usart.c ****      Set PCE and PS bits according to USART_Parity value
 290:./FWLIB/src/stm32f4xx_usart.c ****      Set TE and RE bits according to USART_Mode value */
 291:./FWLIB/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 252              		.loc 1 291 0
 253 0022 8988     		ldrh	r1, [r1, #4]
 254              	.LVL44:
 255 0024 2889     		ldrh	r0, [r5, #8]
 256              	.LVL45:
 292:./FWLIB/src/stm32f4xx_usart.c ****             USART_InitStruct->USART_Mode;
 257              		.loc 1 292 0
 258 0026 6A89     		ldrh	r2, [r5, #10]
 291:./FWLIB/src/stm32f4xx_usart.c ****             USART_InitStruct->USART_Mode;
 259              		.loc 1 291 0
 260 0028 0143     		orrs	r1, r1, r0
 261 002a 0A43     		orrs	r2, r2, r1
 262              	.LVL46:
 293:./FWLIB/src/stm32f4xx_usart.c **** 
 294:./FWLIB/src/stm32f4xx_usart.c ****   /* Write to USART CR1 */
ARM GAS  /tmp/ccecLeJr.s 			page 11


 295:./FWLIB/src/stm32f4xx_usart.c ****   USARTx->CR1 = (uint16_t)tmpreg;
 263              		.loc 1 295 0
 264 002c 1343     		orrs	r3, r3, r2
 265              	.LVL47:
 266 002e A381     		strh	r3, [r4, #12]	@ movhi
 296:./FWLIB/src/stm32f4xx_usart.c **** 
 297:./FWLIB/src/stm32f4xx_usart.c **** /*---------------------------- USART CR3 Configuration -----------------------*/  
 298:./FWLIB/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR3;
 267              		.loc 1 298 0
 268 0030 A38A     		ldrh	r3, [r4, #20]
 269              	.LVL48:
 270 0032 9BB2     		uxth	r3, r3
 271              	.LVL49:
 299:./FWLIB/src/stm32f4xx_usart.c **** 
 300:./FWLIB/src/stm32f4xx_usart.c ****   /* Clear CTSE and RTSE bits */
 301:./FWLIB/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 272              		.loc 1 301 0
 273 0034 23F44073 		bic	r3, r3, #768
 274              	.LVL50:
 302:./FWLIB/src/stm32f4xx_usart.c **** 
 303:./FWLIB/src/stm32f4xx_usart.c ****   /* Configure the USART HFC : 
 304:./FWLIB/src/stm32f4xx_usart.c ****       Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
 305:./FWLIB/src/stm32f4xx_usart.c ****   tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 275              		.loc 1 305 0
 276 0038 AA89     		ldrh	r2, [r5, #12]
 277              	.LVL51:
 306:./FWLIB/src/stm32f4xx_usart.c **** 
 307:./FWLIB/src/stm32f4xx_usart.c ****   /* Write to USART CR3 */
 308:./FWLIB/src/stm32f4xx_usart.c ****   USARTx->CR3 = (uint16_t)tmpreg;
 278              		.loc 1 308 0
 279 003a 1343     		orrs	r3, r3, r2
 280              	.LVL52:
 281 003c A382     		strh	r3, [r4, #20]	@ movhi
 309:./FWLIB/src/stm32f4xx_usart.c **** 
 310:./FWLIB/src/stm32f4xx_usart.c **** /*---------------------------- USART BRR Configuration -----------------------*/
 311:./FWLIB/src/stm32f4xx_usart.c ****   /* Configure the USART Baud Rate */
 312:./FWLIB/src/stm32f4xx_usart.c ****   RCC_GetClocksFreq(&RCC_ClocksStatus);
 282              		.loc 1 312 0
 283 003e 6846     		mov	r0, sp
 284 0040 FFF7FEFF 		bl	RCC_GetClocksFreq
 285              	.LVL53:
 313:./FWLIB/src/stm32f4xx_usart.c **** 
 314:./FWLIB/src/stm32f4xx_usart.c ****   if ((USARTx == USART1) || (USARTx == USART6))
 286              		.loc 1 314 0
 287 0044 204B     		ldr	r3, .L32
 288 0046 9C42     		cmp	r4, r3
 289 0048 05D0     		beq	.L22
 290              		.loc 1 314 0 is_stmt 0 discriminator 1
 291 004a 03F58063 		add	r3, r3, #1024
 292 004e 9C42     		cmp	r4, r3
 293 0050 01D0     		beq	.L22
 315:./FWLIB/src/stm32f4xx_usart.c ****   {
 316:./FWLIB/src/stm32f4xx_usart.c ****     apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 317:./FWLIB/src/stm32f4xx_usart.c ****   }
 318:./FWLIB/src/stm32f4xx_usart.c ****   else
 319:./FWLIB/src/stm32f4xx_usart.c ****   {
 320:./FWLIB/src/stm32f4xx_usart.c ****     apbclock = RCC_ClocksStatus.PCLK1_Frequency;
ARM GAS  /tmp/ccecLeJr.s 			page 12


 294              		.loc 1 320 0 is_stmt 1
 295 0052 029B     		ldr	r3, [sp, #8]
 296              	.LVL54:
 297 0054 00E0     		b	.L24
 298              	.LVL55:
 299              	.L22:
 316:./FWLIB/src/stm32f4xx_usart.c ****   }
 300              		.loc 1 316 0
 301 0056 039B     		ldr	r3, [sp, #12]
 302              	.LVL56:
 303              	.L24:
 321:./FWLIB/src/stm32f4xx_usart.c ****   }
 322:./FWLIB/src/stm32f4xx_usart.c ****   
 323:./FWLIB/src/stm32f4xx_usart.c ****   /* Determine the integer part */
 324:./FWLIB/src/stm32f4xx_usart.c ****   if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 304              		.loc 1 324 0
 305 0058 A289     		ldrh	r2, [r4, #12]
 306 005a 12F4004F 		tst	r2, #32768
 307 005e 1FD1     		bne	.L30
 325:./FWLIB/src/stm32f4xx_usart.c ****   {
 326:./FWLIB/src/stm32f4xx_usart.c ****     /* Integer part computing in case Oversampling mode is 8 Samples */
 327:./FWLIB/src/stm32f4xx_usart.c ****     integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 328:./FWLIB/src/stm32f4xx_usart.c ****   }
 329:./FWLIB/src/stm32f4xx_usart.c ****   else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
 330:./FWLIB/src/stm32f4xx_usart.c ****   {
 331:./FWLIB/src/stm32f4xx_usart.c ****     /* Integer part computing in case Oversampling mode is 16 Samples */
 332:./FWLIB/src/stm32f4xx_usart.c ****     integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 308              		.loc 1 332 0
 309 0060 03EB8303 		add	r3, r3, r3, lsl #2
 310              	.LVL57:
 311 0064 03EB8303 		add	r3, r3, r3, lsl #2
 312 0068 2968     		ldr	r1, [r5]
 313 006a 8900     		lsls	r1, r1, #2
 314 006c B3FBF1F1 		udiv	r1, r3, r1
 315              	.LVL58:
 316              	.L26:
 333:./FWLIB/src/stm32f4xx_usart.c ****   }
 334:./FWLIB/src/stm32f4xx_usart.c ****   tmpreg = (integerdivider / 100) << 4;
 317              		.loc 1 334 0
 318 0070 164B     		ldr	r3, .L32+4
 319 0072 A3FB0123 		umull	r2, r3, r3, r1
 320 0076 5809     		lsrs	r0, r3, #5
 321 0078 0501     		lsls	r5, r0, #4
 322              	.LVL59:
 335:./FWLIB/src/stm32f4xx_usart.c **** 
 336:./FWLIB/src/stm32f4xx_usart.c ****   /* Determine the fractional part */
 337:./FWLIB/src/stm32f4xx_usart.c ****   fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 323              		.loc 1 337 0
 324 007a 6423     		movs	r3, #100
 325 007c 00FB1313 		mls	r3, r0, r3, r1
 326              	.LVL60:
 338:./FWLIB/src/stm32f4xx_usart.c **** 
 339:./FWLIB/src/stm32f4xx_usart.c ****   /* Implement the fractional part in the register */
 340:./FWLIB/src/stm32f4xx_usart.c ****   if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 327              		.loc 1 340 0
 328 0080 A289     		ldrh	r2, [r4, #12]
 329 0082 12F4004F 		tst	r2, #32768
ARM GAS  /tmp/ccecLeJr.s 			page 13


 330 0086 14D1     		bne	.L31
 341:./FWLIB/src/stm32f4xx_usart.c ****   {
 342:./FWLIB/src/stm32f4xx_usart.c ****     tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 343:./FWLIB/src/stm32f4xx_usart.c ****   }
 344:./FWLIB/src/stm32f4xx_usart.c ****   else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
 345:./FWLIB/src/stm32f4xx_usart.c ****   {
 346:./FWLIB/src/stm32f4xx_usart.c ****     tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 331              		.loc 1 346 0
 332 0088 1B01     		lsls	r3, r3, #4
 333              	.LVL61:
 334 008a 3233     		adds	r3, r3, #50
 335 008c 0F4A     		ldr	r2, .L32+4
 336 008e A2FB0323 		umull	r2, r3, r2, r3
 337 0092 C3F34313 		ubfx	r3, r3, #5, #4
 338 0096 2B43     		orrs	r3, r3, r5
 339              	.LVL62:
 340              	.L28:
 347:./FWLIB/src/stm32f4xx_usart.c ****   }
 348:./FWLIB/src/stm32f4xx_usart.c ****   
 349:./FWLIB/src/stm32f4xx_usart.c ****   /* Write to USART BRR register */
 350:./FWLIB/src/stm32f4xx_usart.c ****   USARTx->BRR = (uint16_t)tmpreg;
 341              		.loc 1 350 0
 342 0098 9BB2     		uxth	r3, r3
 343              	.LVL63:
 344 009a 2381     		strh	r3, [r4, #8]	@ movhi
 351:./FWLIB/src/stm32f4xx_usart.c **** }
 345              		.loc 1 351 0
 346 009c 05B0     		add	sp, sp, #20
 347              	.LCFI3:
 348              		.cfi_remember_state
 349              		.cfi_def_cfa_offset 12
 350              		@ sp needed
 351 009e 30BD     		pop	{r4, r5, pc}
 352              	.LVL64:
 353              	.L30:
 354              	.LCFI4:
 355              		.cfi_restore_state
 327:./FWLIB/src/stm32f4xx_usart.c ****   }
 356              		.loc 1 327 0
 357 00a0 03EB8303 		add	r3, r3, r3, lsl #2
 358              	.LVL65:
 359 00a4 03EB8303 		add	r3, r3, r3, lsl #2
 360 00a8 2968     		ldr	r1, [r5]
 361 00aa 4900     		lsls	r1, r1, #1
 362 00ac B3FBF1F1 		udiv	r1, r3, r1
 363              	.LVL66:
 364 00b0 DEE7     		b	.L26
 365              	.LVL67:
 366              	.L31:
 342:./FWLIB/src/stm32f4xx_usart.c ****   }
 367              		.loc 1 342 0
 368 00b2 DA00     		lsls	r2, r3, #3
 369 00b4 3232     		adds	r2, r2, #50
 370 00b6 054B     		ldr	r3, .L32+4
 371              	.LVL68:
 372 00b8 A3FB0232 		umull	r3, r2, r3, r2
 373 00bc C2F34212 		ubfx	r2, r2, #5, #3
ARM GAS  /tmp/ccecLeJr.s 			page 14


 374 00c0 42EA0503 		orr	r3, r2, r5
 375              	.LVL69:
 376 00c4 E8E7     		b	.L28
 377              	.L33:
 378 00c6 00BF     		.align	2
 379              	.L32:
 380 00c8 00100140 		.word	1073811456
 381 00cc 1F85EB51 		.word	1374389535
 382              		.cfi_endproc
 383              	.LFE113:
 385              		.section	.text.USART_StructInit,"ax",%progbits
 386              		.align	1
 387              		.global	USART_StructInit
 388              		.syntax unified
 389              		.thumb
 390              		.thumb_func
 391              		.fpu fpv4-sp-d16
 393              	USART_StructInit:
 394              	.LFB114:
 352:./FWLIB/src/stm32f4xx_usart.c **** 
 353:./FWLIB/src/stm32f4xx_usart.c **** /**
 354:./FWLIB/src/stm32f4xx_usart.c ****   * @brief  Fills each USART_InitStruct member with its default value.
 355:./FWLIB/src/stm32f4xx_usart.c ****   * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
 356:./FWLIB/src/stm32f4xx_usart.c ****   *         be initialized.
 357:./FWLIB/src/stm32f4xx_usart.c ****   * @retval None
 358:./FWLIB/src/stm32f4xx_usart.c ****   */
 359:./FWLIB/src/stm32f4xx_usart.c **** void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
 360:./FWLIB/src/stm32f4xx_usart.c **** {
 395              		.loc 1 360 0
 396              		.cfi_startproc
 397              		@ args = 0, pretend = 0, frame = 0
 398              		@ frame_needed = 0, uses_anonymous_args = 0
 399              		@ link register save eliminated.
 400              	.LVL70:
 361:./FWLIB/src/stm32f4xx_usart.c ****   /* USART_InitStruct members default value */
 362:./FWLIB/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_BaudRate = 9600;
 401              		.loc 1 362 0
 402 0000 4FF41653 		mov	r3, #9600
 403 0004 0360     		str	r3, [r0]
 363:./FWLIB/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 404              		.loc 1 363 0
 405 0006 0023     		movs	r3, #0
 406 0008 8380     		strh	r3, [r0, #4]	@ movhi
 364:./FWLIB/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_StopBits = USART_StopBits_1;
 407              		.loc 1 364 0
 408 000a C380     		strh	r3, [r0, #6]	@ movhi
 365:./FWLIB/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_Parity = USART_Parity_No ;
 409              		.loc 1 365 0
 410 000c 0381     		strh	r3, [r0, #8]	@ movhi
 366:./FWLIB/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 411              		.loc 1 366 0
 412 000e 0C22     		movs	r2, #12
 413 0010 4281     		strh	r2, [r0, #10]	@ movhi
 367:./FWLIB/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 414              		.loc 1 367 0
 415 0012 8381     		strh	r3, [r0, #12]	@ movhi
 368:./FWLIB/src/stm32f4xx_usart.c **** }
ARM GAS  /tmp/ccecLeJr.s 			page 15


 416              		.loc 1 368 0
 417 0014 7047     		bx	lr
 418              		.cfi_endproc
 419              	.LFE114:
 421              		.section	.text.USART_ClockInit,"ax",%progbits
 422              		.align	1
 423              		.global	USART_ClockInit
 424              		.syntax unified
 425              		.thumb
 426              		.thumb_func
 427              		.fpu fpv4-sp-d16
 429              	USART_ClockInit:
 430              	.LFB115:
 369:./FWLIB/src/stm32f4xx_usart.c **** 
 370:./FWLIB/src/stm32f4xx_usart.c **** /**
 371:./FWLIB/src/stm32f4xx_usart.c ****   * @brief  Initializes the USARTx peripheral Clock according to the 
 372:./FWLIB/src/stm32f4xx_usart.c ****   *         specified parameters in the USART_ClockInitStruct .
 373:./FWLIB/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART peripheral.
 374:./FWLIB/src/stm32f4xx_usart.c ****   * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure that
 375:./FWLIB/src/stm32f4xx_usart.c ****   *         contains the configuration information for the specified  USART peripheral.
 376:./FWLIB/src/stm32f4xx_usart.c ****   * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
 377:./FWLIB/src/stm32f4xx_usart.c ****   * @retval None
 378:./FWLIB/src/stm32f4xx_usart.c ****   */
 379:./FWLIB/src/stm32f4xx_usart.c **** void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
 380:./FWLIB/src/stm32f4xx_usart.c **** {
 431              		.loc 1 380 0
 432              		.cfi_startproc
 433              		@ args = 0, pretend = 0, frame = 0
 434              		@ frame_needed = 0, uses_anonymous_args = 0
 435              		@ link register save eliminated.
 436              	.LVL71:
 437 0000 70B4     		push	{r4, r5, r6}
 438              	.LCFI5:
 439              		.cfi_def_cfa_offset 12
 440              		.cfi_offset 4, -12
 441              		.cfi_offset 5, -8
 442              		.cfi_offset 6, -4
 443              	.LVL72:
 381:./FWLIB/src/stm32f4xx_usart.c ****   uint32_t tmpreg = 0x00;
 382:./FWLIB/src/stm32f4xx_usart.c ****   /* Check the parameters */
 383:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 384:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
 385:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
 386:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
 387:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
 388:./FWLIB/src/stm32f4xx_usart.c ****   
 389:./FWLIB/src/stm32f4xx_usart.c **** /*---------------------------- USART CR2 Configuration -----------------------*/
 390:./FWLIB/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR2;
 444              		.loc 1 390 0
 445 0002 038A     		ldrh	r3, [r0, #16]
 446 0004 9BB2     		uxth	r3, r3
 447              	.LVL73:
 391:./FWLIB/src/stm32f4xx_usart.c ****   /* Clear CLKEN, CPOL, CPHA and LBCL bits */
 392:./FWLIB/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 448              		.loc 1 392 0
 449 0006 23F47062 		bic	r2, r3, #3840
 450              	.LVL74:
ARM GAS  /tmp/ccecLeJr.s 			page 16


 393:./FWLIB/src/stm32f4xx_usart.c ****   /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
 394:./FWLIB/src/stm32f4xx_usart.c ****   /* Set CLKEN bit according to USART_Clock value */
 395:./FWLIB/src/stm32f4xx_usart.c ****   /* Set CPOL bit according to USART_CPOL value */
 396:./FWLIB/src/stm32f4xx_usart.c ****   /* Set CPHA bit according to USART_CPHA value */
 397:./FWLIB/src/stm32f4xx_usart.c ****   /* Set LBCL bit according to USART_LastBit value */
 398:./FWLIB/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 451              		.loc 1 398 0
 452 000a 0D88     		ldrh	r5, [r1]
 453 000c 4E88     		ldrh	r6, [r1, #2]
 399:./FWLIB/src/stm32f4xx_usart.c ****                  USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 454              		.loc 1 399 0
 455 000e 8C88     		ldrh	r4, [r1, #4]
 456 0010 CB88     		ldrh	r3, [r1, #6]
 457 0012 45EA0601 		orr	r1, r5, r6
 458              	.LVL75:
 459 0016 2143     		orrs	r1, r1, r4
 460 0018 0B43     		orrs	r3, r3, r1
 461              	.LVL76:
 400:./FWLIB/src/stm32f4xx_usart.c ****   /* Write to USART CR2 */
 401:./FWLIB/src/stm32f4xx_usart.c ****   USARTx->CR2 = (uint16_t)tmpreg;
 462              		.loc 1 401 0
 463 001a 1343     		orrs	r3, r3, r2
 464              	.LVL77:
 465 001c 0382     		strh	r3, [r0, #16]	@ movhi
 402:./FWLIB/src/stm32f4xx_usart.c **** }
 466              		.loc 1 402 0
 467 001e 70BC     		pop	{r4, r5, r6}
 468              	.LCFI6:
 469              		.cfi_restore 6
 470              		.cfi_restore 5
 471              		.cfi_restore 4
 472              		.cfi_def_cfa_offset 0
 473 0020 7047     		bx	lr
 474              		.cfi_endproc
 475              	.LFE115:
 477              		.section	.text.USART_ClockStructInit,"ax",%progbits
 478              		.align	1
 479              		.global	USART_ClockStructInit
 480              		.syntax unified
 481              		.thumb
 482              		.thumb_func
 483              		.fpu fpv4-sp-d16
 485              	USART_ClockStructInit:
 486              	.LFB116:
 403:./FWLIB/src/stm32f4xx_usart.c **** 
 404:./FWLIB/src/stm32f4xx_usart.c **** /**
 405:./FWLIB/src/stm32f4xx_usart.c ****   * @brief  Fills each USART_ClockInitStruct member with its default value.
 406:./FWLIB/src/stm32f4xx_usart.c ****   * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
 407:./FWLIB/src/stm32f4xx_usart.c ****   *         which will be initialized.
 408:./FWLIB/src/stm32f4xx_usart.c ****   * @retval None
 409:./FWLIB/src/stm32f4xx_usart.c ****   */
 410:./FWLIB/src/stm32f4xx_usart.c **** void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
 411:./FWLIB/src/stm32f4xx_usart.c **** {
 487              		.loc 1 411 0
 488              		.cfi_startproc
 489              		@ args = 0, pretend = 0, frame = 0
 490              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccecLeJr.s 			page 17


 491              		@ link register save eliminated.
 492              	.LVL78:
 412:./FWLIB/src/stm32f4xx_usart.c ****   /* USART_ClockInitStruct members default value */
 413:./FWLIB/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 493              		.loc 1 413 0
 494 0000 0023     		movs	r3, #0
 495 0002 0380     		strh	r3, [r0]	@ movhi
 414:./FWLIB/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 496              		.loc 1 414 0
 497 0004 4380     		strh	r3, [r0, #2]	@ movhi
 415:./FWLIB/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 498              		.loc 1 415 0
 499 0006 8380     		strh	r3, [r0, #4]	@ movhi
 416:./FWLIB/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 500              		.loc 1 416 0
 501 0008 C380     		strh	r3, [r0, #6]	@ movhi
 417:./FWLIB/src/stm32f4xx_usart.c **** }
 502              		.loc 1 417 0
 503 000a 7047     		bx	lr
 504              		.cfi_endproc
 505              	.LFE116:
 507              		.section	.text.USART_Cmd,"ax",%progbits
 508              		.align	1
 509              		.global	USART_Cmd
 510              		.syntax unified
 511              		.thumb
 512              		.thumb_func
 513              		.fpu fpv4-sp-d16
 515              	USART_Cmd:
 516              	.LFB117:
 418:./FWLIB/src/stm32f4xx_usart.c **** 
 419:./FWLIB/src/stm32f4xx_usart.c **** /**
 420:./FWLIB/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the specified USART peripheral.
 421:./FWLIB/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 422:./FWLIB/src/stm32f4xx_usart.c ****   *         UART peripheral.
 423:./FWLIB/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USARTx peripheral.
 424:./FWLIB/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 425:./FWLIB/src/stm32f4xx_usart.c ****   * @retval None
 426:./FWLIB/src/stm32f4xx_usart.c ****   */
 427:./FWLIB/src/stm32f4xx_usart.c **** void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
 428:./FWLIB/src/stm32f4xx_usart.c **** {
 517              		.loc 1 428 0
 518              		.cfi_startproc
 519              		@ args = 0, pretend = 0, frame = 0
 520              		@ frame_needed = 0, uses_anonymous_args = 0
 521              		@ link register save eliminated.
 522              	.LVL79:
 429:./FWLIB/src/stm32f4xx_usart.c ****   /* Check the parameters */
 430:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 431:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 432:./FWLIB/src/stm32f4xx_usart.c ****   
 433:./FWLIB/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 523              		.loc 1 433 0
 524 0000 31B9     		cbnz	r1, .L41
 434:./FWLIB/src/stm32f4xx_usart.c ****   {
 435:./FWLIB/src/stm32f4xx_usart.c ****     /* Enable the selected USART by setting the UE bit in the CR1 register */
 436:./FWLIB/src/stm32f4xx_usart.c ****     USARTx->CR1 |= USART_CR1_UE;
ARM GAS  /tmp/ccecLeJr.s 			page 18


 437:./FWLIB/src/stm32f4xx_usart.c ****   }
 438:./FWLIB/src/stm32f4xx_usart.c ****   else
 439:./FWLIB/src/stm32f4xx_usart.c ****   {
 440:./FWLIB/src/stm32f4xx_usart.c ****     /* Disable the selected USART by clearing the UE bit in the CR1 register */
 441:./FWLIB/src/stm32f4xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 525              		.loc 1 441 0
 526 0002 8389     		ldrh	r3, [r0, #12]
 527 0004 9BB2     		uxth	r3, r3
 528 0006 23F40053 		bic	r3, r3, #8192
 529 000a 9BB2     		uxth	r3, r3
 530 000c 8381     		strh	r3, [r0, #12]	@ movhi
 442:./FWLIB/src/stm32f4xx_usart.c ****   }
 443:./FWLIB/src/stm32f4xx_usart.c **** }
 531              		.loc 1 443 0
 532 000e 7047     		bx	lr
 533              	.L41:
 436:./FWLIB/src/stm32f4xx_usart.c ****   }
 534              		.loc 1 436 0
 535 0010 8389     		ldrh	r3, [r0, #12]
 536 0012 43F40053 		orr	r3, r3, #8192
 537 0016 8381     		strh	r3, [r0, #12]	@ movhi
 538 0018 7047     		bx	lr
 539              		.cfi_endproc
 540              	.LFE117:
 542              		.section	.text.USART_SetPrescaler,"ax",%progbits
 543              		.align	1
 544              		.global	USART_SetPrescaler
 545              		.syntax unified
 546              		.thumb
 547              		.thumb_func
 548              		.fpu fpv4-sp-d16
 550              	USART_SetPrescaler:
 551              	.LFB118:
 444:./FWLIB/src/stm32f4xx_usart.c **** 
 445:./FWLIB/src/stm32f4xx_usart.c **** /**
 446:./FWLIB/src/stm32f4xx_usart.c ****   * @brief  Sets the system clock prescaler.
 447:./FWLIB/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 448:./FWLIB/src/stm32f4xx_usart.c ****   *         UART peripheral.
 449:./FWLIB/src/stm32f4xx_usart.c ****   * @param  USART_Prescaler: specifies the prescaler clock. 
 450:./FWLIB/src/stm32f4xx_usart.c ****   * @note   The function is used for IrDA mode with UART4 and UART5.   
 451:./FWLIB/src/stm32f4xx_usart.c ****   * @retval None
 452:./FWLIB/src/stm32f4xx_usart.c ****   */
 453:./FWLIB/src/stm32f4xx_usart.c **** void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
 454:./FWLIB/src/stm32f4xx_usart.c **** { 
 552              		.loc 1 454 0
 553              		.cfi_startproc
 554              		@ args = 0, pretend = 0, frame = 0
 555              		@ frame_needed = 0, uses_anonymous_args = 0
 556              		@ link register save eliminated.
 557              	.LVL80:
 455:./FWLIB/src/stm32f4xx_usart.c ****   /* Check the parameters */
 456:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 457:./FWLIB/src/stm32f4xx_usart.c ****   
 458:./FWLIB/src/stm32f4xx_usart.c ****   /* Clear the USART prescaler */
 459:./FWLIB/src/stm32f4xx_usart.c ****   USARTx->GTPR &= USART_GTPR_GT;
 558              		.loc 1 459 0
 559 0000 038B     		ldrh	r3, [r0, #24]
ARM GAS  /tmp/ccecLeJr.s 			page 19


 560 0002 03F47F43 		and	r3, r3, #65280
 561 0006 0383     		strh	r3, [r0, #24]	@ movhi
 460:./FWLIB/src/stm32f4xx_usart.c ****   /* Set the USART prescaler */
 461:./FWLIB/src/stm32f4xx_usart.c ****   USARTx->GTPR |= USART_Prescaler;
 562              		.loc 1 461 0
 563 0008 038B     		ldrh	r3, [r0, #24]
 564 000a 1943     		orrs	r1, r1, r3
 565              	.LVL81:
 566 000c 0183     		strh	r1, [r0, #24]	@ movhi
 462:./FWLIB/src/stm32f4xx_usart.c **** }
 567              		.loc 1 462 0
 568 000e 7047     		bx	lr
 569              		.cfi_endproc
 570              	.LFE118:
 572              		.section	.text.USART_OverSampling8Cmd,"ax",%progbits
 573              		.align	1
 574              		.global	USART_OverSampling8Cmd
 575              		.syntax unified
 576              		.thumb
 577              		.thumb_func
 578              		.fpu fpv4-sp-d16
 580              	USART_OverSampling8Cmd:
 581              	.LFB119:
 463:./FWLIB/src/stm32f4xx_usart.c **** 
 464:./FWLIB/src/stm32f4xx_usart.c **** /**
 465:./FWLIB/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's 8x oversampling mode.
 466:./FWLIB/src/stm32f4xx_usart.c ****   * @note   This function has to be called before calling USART_Init() function
 467:./FWLIB/src/stm32f4xx_usart.c ****   *         in order to have correct baudrate Divider value.
 468:./FWLIB/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 469:./FWLIB/src/stm32f4xx_usart.c ****   *         UART peripheral.
 470:./FWLIB/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART 8x oversampling mode.
 471:./FWLIB/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 472:./FWLIB/src/stm32f4xx_usart.c ****   * @retval None
 473:./FWLIB/src/stm32f4xx_usart.c ****   */
 474:./FWLIB/src/stm32f4xx_usart.c **** void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
 475:./FWLIB/src/stm32f4xx_usart.c **** {
 582              		.loc 1 475 0
 583              		.cfi_startproc
 584              		@ args = 0, pretend = 0, frame = 0
 585              		@ frame_needed = 0, uses_anonymous_args = 0
 586              		@ link register save eliminated.
 587              	.LVL82:
 476:./FWLIB/src/stm32f4xx_usart.c ****   /* Check the parameters */
 477:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 478:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 479:./FWLIB/src/stm32f4xx_usart.c ****   
 480:./FWLIB/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 588              		.loc 1 480 0
 589 0000 21B9     		cbnz	r1, .L46
 481:./FWLIB/src/stm32f4xx_usart.c ****   {
 482:./FWLIB/src/stm32f4xx_usart.c ****     /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
 483:./FWLIB/src/stm32f4xx_usart.c ****     USARTx->CR1 |= USART_CR1_OVER8;
 484:./FWLIB/src/stm32f4xx_usart.c ****   }
 485:./FWLIB/src/stm32f4xx_usart.c ****   else
 486:./FWLIB/src/stm32f4xx_usart.c ****   {
 487:./FWLIB/src/stm32f4xx_usart.c ****     /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
 488:./FWLIB/src/stm32f4xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
ARM GAS  /tmp/ccecLeJr.s 			page 20


 590              		.loc 1 488 0
 591 0002 8389     		ldrh	r3, [r0, #12]
 592 0004 C3F30E03 		ubfx	r3, r3, #0, #15
 593 0008 8381     		strh	r3, [r0, #12]	@ movhi
 489:./FWLIB/src/stm32f4xx_usart.c ****   }
 490:./FWLIB/src/stm32f4xx_usart.c **** }  
 594              		.loc 1 490 0
 595 000a 7047     		bx	lr
 596              	.L46:
 483:./FWLIB/src/stm32f4xx_usart.c ****   }
 597              		.loc 1 483 0
 598 000c 8389     		ldrh	r3, [r0, #12]
 599 000e 43F40043 		orr	r3, r3, #32768
 600 0012 8381     		strh	r3, [r0, #12]	@ movhi
 601 0014 7047     		bx	lr
 602              		.cfi_endproc
 603              	.LFE119:
 605              		.section	.text.USART_OneBitMethodCmd,"ax",%progbits
 606              		.align	1
 607              		.global	USART_OneBitMethodCmd
 608              		.syntax unified
 609              		.thumb
 610              		.thumb_func
 611              		.fpu fpv4-sp-d16
 613              	USART_OneBitMethodCmd:
 614              	.LFB120:
 491:./FWLIB/src/stm32f4xx_usart.c **** 
 492:./FWLIB/src/stm32f4xx_usart.c **** /**
 493:./FWLIB/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's one bit sampling method.
 494:./FWLIB/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 495:./FWLIB/src/stm32f4xx_usart.c ****   *         UART peripheral.
 496:./FWLIB/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART one bit sampling method.
 497:./FWLIB/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 498:./FWLIB/src/stm32f4xx_usart.c ****   * @retval None
 499:./FWLIB/src/stm32f4xx_usart.c ****   */
 500:./FWLIB/src/stm32f4xx_usart.c **** void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 501:./FWLIB/src/stm32f4xx_usart.c **** {
 615              		.loc 1 501 0
 616              		.cfi_startproc
 617              		@ args = 0, pretend = 0, frame = 0
 618              		@ frame_needed = 0, uses_anonymous_args = 0
 619              		@ link register save eliminated.
 620              	.LVL83:
 502:./FWLIB/src/stm32f4xx_usart.c ****   /* Check the parameters */
 503:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 504:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 505:./FWLIB/src/stm32f4xx_usart.c ****   
 506:./FWLIB/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 621              		.loc 1 506 0
 622 0000 31B9     		cbnz	r1, .L50
 507:./FWLIB/src/stm32f4xx_usart.c ****   {
 508:./FWLIB/src/stm32f4xx_usart.c ****     /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
 509:./FWLIB/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_ONEBIT;
 510:./FWLIB/src/stm32f4xx_usart.c ****   }
 511:./FWLIB/src/stm32f4xx_usart.c ****   else
 512:./FWLIB/src/stm32f4xx_usart.c ****   {
 513:./FWLIB/src/stm32f4xx_usart.c ****     /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
ARM GAS  /tmp/ccecLeJr.s 			page 21


 514:./FWLIB/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 623              		.loc 1 514 0
 624 0002 838A     		ldrh	r3, [r0, #20]
 625 0004 9BB2     		uxth	r3, r3
 626 0006 23F40063 		bic	r3, r3, #2048
 627 000a 9BB2     		uxth	r3, r3
 628 000c 8382     		strh	r3, [r0, #20]	@ movhi
 515:./FWLIB/src/stm32f4xx_usart.c ****   }
 516:./FWLIB/src/stm32f4xx_usart.c **** }
 629              		.loc 1 516 0
 630 000e 7047     		bx	lr
 631              	.L50:
 509:./FWLIB/src/stm32f4xx_usart.c ****   }
 632              		.loc 1 509 0
 633 0010 838A     		ldrh	r3, [r0, #20]
 634 0012 43F40063 		orr	r3, r3, #2048
 635 0016 8382     		strh	r3, [r0, #20]	@ movhi
 636 0018 7047     		bx	lr
 637              		.cfi_endproc
 638              	.LFE120:
 640              		.section	.text.USART_SendData,"ax",%progbits
 641              		.align	1
 642              		.global	USART_SendData
 643              		.syntax unified
 644              		.thumb
 645              		.thumb_func
 646              		.fpu fpv4-sp-d16
 648              	USART_SendData:
 649              	.LFB121:
 517:./FWLIB/src/stm32f4xx_usart.c **** 
 518:./FWLIB/src/stm32f4xx_usart.c **** /**
 519:./FWLIB/src/stm32f4xx_usart.c ****   * @}
 520:./FWLIB/src/stm32f4xx_usart.c ****   */
 521:./FWLIB/src/stm32f4xx_usart.c **** 
 522:./FWLIB/src/stm32f4xx_usart.c **** /** @defgroup USART_Group2 Data transfers functions
 523:./FWLIB/src/stm32f4xx_usart.c ****  *  @brief   Data transfers functions 
 524:./FWLIB/src/stm32f4xx_usart.c ****  *
 525:./FWLIB/src/stm32f4xx_usart.c **** @verbatim   
 526:./FWLIB/src/stm32f4xx_usart.c ****  ===============================================================================
 527:./FWLIB/src/stm32f4xx_usart.c ****                       ##### Data transfers functions #####
 528:./FWLIB/src/stm32f4xx_usart.c ****  ===============================================================================  
 529:./FWLIB/src/stm32f4xx_usart.c ****     [..]
 530:./FWLIB/src/stm32f4xx_usart.c ****     This subsection provides a set of functions allowing to manage the USART data 
 531:./FWLIB/src/stm32f4xx_usart.c ****     transfers.
 532:./FWLIB/src/stm32f4xx_usart.c ****     [..]
 533:./FWLIB/src/stm32f4xx_usart.c ****     During an USART reception, data shifts in least significant bit first through 
 534:./FWLIB/src/stm32f4xx_usart.c ****     the RX pin. In this mode, the USART_DR register consists of a buffer (RDR) 
 535:./FWLIB/src/stm32f4xx_usart.c ****     between the internal bus and the received shift register.
 536:./FWLIB/src/stm32f4xx_usart.c ****     [..]
 537:./FWLIB/src/stm32f4xx_usart.c ****     When a transmission is taking place, a write instruction to the USART_DR register 
 538:./FWLIB/src/stm32f4xx_usart.c ****     stores the data in the TDR register and which is copied in the shift register 
 539:./FWLIB/src/stm32f4xx_usart.c ****     at the end of the current transmission.
 540:./FWLIB/src/stm32f4xx_usart.c ****     [..]
 541:./FWLIB/src/stm32f4xx_usart.c ****     The read access of the USART_DR register can be done using the USART_ReceiveData()
 542:./FWLIB/src/stm32f4xx_usart.c ****     function and returns the RDR buffered value. Whereas a write access to the USART_DR 
 543:./FWLIB/src/stm32f4xx_usart.c ****     can be done using USART_SendData() function and stores the written data into 
 544:./FWLIB/src/stm32f4xx_usart.c ****     TDR buffer.
ARM GAS  /tmp/ccecLeJr.s 			page 22


 545:./FWLIB/src/stm32f4xx_usart.c **** 
 546:./FWLIB/src/stm32f4xx_usart.c **** @endverbatim
 547:./FWLIB/src/stm32f4xx_usart.c ****   * @{
 548:./FWLIB/src/stm32f4xx_usart.c ****   */
 549:./FWLIB/src/stm32f4xx_usart.c **** 
 550:./FWLIB/src/stm32f4xx_usart.c **** /**
 551:./FWLIB/src/stm32f4xx_usart.c ****   * @brief  Transmits single data through the USARTx peripheral.
 552:./FWLIB/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 553:./FWLIB/src/stm32f4xx_usart.c ****   *         UART peripheral.
 554:./FWLIB/src/stm32f4xx_usart.c ****   * @param  Data: the data to transmit.
 555:./FWLIB/src/stm32f4xx_usart.c ****   * @retval None
 556:./FWLIB/src/stm32f4xx_usart.c ****   */
 557:./FWLIB/src/stm32f4xx_usart.c **** void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
 558:./FWLIB/src/stm32f4xx_usart.c **** {
 650              		.loc 1 558 0
 651              		.cfi_startproc
 652              		@ args = 0, pretend = 0, frame = 0
 653              		@ frame_needed = 0, uses_anonymous_args = 0
 654              		@ link register save eliminated.
 655              	.LVL84:
 559:./FWLIB/src/stm32f4xx_usart.c ****   /* Check the parameters */
 560:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 561:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_DATA(Data)); 
 562:./FWLIB/src/stm32f4xx_usart.c ****     
 563:./FWLIB/src/stm32f4xx_usart.c ****   /* Transmit Data */
 564:./FWLIB/src/stm32f4xx_usart.c ****   USARTx->DR = (Data & (uint16_t)0x01FF);
 656              		.loc 1 564 0
 657 0000 C1F30801 		ubfx	r1, r1, #0, #9
 658              	.LVL85:
 659 0004 8180     		strh	r1, [r0, #4]	@ movhi
 565:./FWLIB/src/stm32f4xx_usart.c **** }
 660              		.loc 1 565 0
 661 0006 7047     		bx	lr
 662              		.cfi_endproc
 663              	.LFE121:
 665              		.section	.text.USART_ReceiveData,"ax",%progbits
 666              		.align	1
 667              		.global	USART_ReceiveData
 668              		.syntax unified
 669              		.thumb
 670              		.thumb_func
 671              		.fpu fpv4-sp-d16
 673              	USART_ReceiveData:
 674              	.LFB122:
 566:./FWLIB/src/stm32f4xx_usart.c **** 
 567:./FWLIB/src/stm32f4xx_usart.c **** /**
 568:./FWLIB/src/stm32f4xx_usart.c ****   * @brief  Returns the most recent received data by the USARTx peripheral.
 569:./FWLIB/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 570:./FWLIB/src/stm32f4xx_usart.c ****   *         UART peripheral.
 571:./FWLIB/src/stm32f4xx_usart.c ****   * @retval The received data.
 572:./FWLIB/src/stm32f4xx_usart.c ****   */
 573:./FWLIB/src/stm32f4xx_usart.c **** uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
 574:./FWLIB/src/stm32f4xx_usart.c **** {
 675              		.loc 1 574 0
 676              		.cfi_startproc
 677              		@ args = 0, pretend = 0, frame = 0
 678              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccecLeJr.s 			page 23


 679              		@ link register save eliminated.
 680              	.LVL86:
 575:./FWLIB/src/stm32f4xx_usart.c ****   /* Check the parameters */
 576:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 577:./FWLIB/src/stm32f4xx_usart.c ****   
 578:./FWLIB/src/stm32f4xx_usart.c ****   /* Receive Data */
 579:./FWLIB/src/stm32f4xx_usart.c ****   return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 681              		.loc 1 579 0
 682 0000 8088     		ldrh	r0, [r0, #4]
 683              	.LVL87:
 580:./FWLIB/src/stm32f4xx_usart.c **** }
 684              		.loc 1 580 0
 685 0002 C0F30800 		ubfx	r0, r0, #0, #9
 686 0006 7047     		bx	lr
 687              		.cfi_endproc
 688              	.LFE122:
 690              		.section	.text.USART_SetAddress,"ax",%progbits
 691              		.align	1
 692              		.global	USART_SetAddress
 693              		.syntax unified
 694              		.thumb
 695              		.thumb_func
 696              		.fpu fpv4-sp-d16
 698              	USART_SetAddress:
 699              	.LFB123:
 581:./FWLIB/src/stm32f4xx_usart.c **** 
 582:./FWLIB/src/stm32f4xx_usart.c **** /**
 583:./FWLIB/src/stm32f4xx_usart.c ****   * @}
 584:./FWLIB/src/stm32f4xx_usart.c ****   */
 585:./FWLIB/src/stm32f4xx_usart.c **** 
 586:./FWLIB/src/stm32f4xx_usart.c **** /** @defgroup USART_Group3 MultiProcessor Communication functions
 587:./FWLIB/src/stm32f4xx_usart.c ****  *  @brief   Multi-Processor Communication functions 
 588:./FWLIB/src/stm32f4xx_usart.c ****  *
 589:./FWLIB/src/stm32f4xx_usart.c **** @verbatim   
 590:./FWLIB/src/stm32f4xx_usart.c ****  ===============================================================================
 591:./FWLIB/src/stm32f4xx_usart.c ****               ##### Multi-Processor Communication functions #####
 592:./FWLIB/src/stm32f4xx_usart.c ****  ===============================================================================  
 593:./FWLIB/src/stm32f4xx_usart.c ****     [..]
 594:./FWLIB/src/stm32f4xx_usart.c ****     This subsection provides a set of functions allowing to manage the USART 
 595:./FWLIB/src/stm32f4xx_usart.c ****     multiprocessor communication.
 596:./FWLIB/src/stm32f4xx_usart.c ****     [..]
 597:./FWLIB/src/stm32f4xx_usart.c ****     For instance one of the USARTs can be the master, its TX output is connected 
 598:./FWLIB/src/stm32f4xx_usart.c ****     to the RX input of the other USART. The others are slaves, their respective 
 599:./FWLIB/src/stm32f4xx_usart.c ****     TX outputs are logically ANDed together and connected to the RX input of the 
 600:./FWLIB/src/stm32f4xx_usart.c ****     master.
 601:./FWLIB/src/stm32f4xx_usart.c ****     [..]
 602:./FWLIB/src/stm32f4xx_usart.c ****     USART multiprocessor communication is possible through the following procedure:
 603:./FWLIB/src/stm32f4xx_usart.c ****       (#) Program the Baud rate, Word length = 9 bits, Stop bits, Parity, Mode 
 604:./FWLIB/src/stm32f4xx_usart.c ****           transmitter or Mode receiver and hardware flow control values using 
 605:./FWLIB/src/stm32f4xx_usart.c ****           the USART_Init() function.
 606:./FWLIB/src/stm32f4xx_usart.c ****       (#) Configures the USART address using the USART_SetAddress() function.
 607:./FWLIB/src/stm32f4xx_usart.c ****       (#) Configures the wake up method (USART_WakeUp_IdleLine or USART_WakeUp_AddressMark)
 608:./FWLIB/src/stm32f4xx_usart.c ****           using USART_WakeUpConfig() function only for the slaves.
 609:./FWLIB/src/stm32f4xx_usart.c ****       (#) Enable the USART using the USART_Cmd() function.
 610:./FWLIB/src/stm32f4xx_usart.c ****       (#) Enter the USART slaves in mute mode using USART_ReceiverWakeUpCmd() function.
 611:./FWLIB/src/stm32f4xx_usart.c ****     [..]
 612:./FWLIB/src/stm32f4xx_usart.c ****     The USART Slave exit from mute mode when receive the wake up condition.
ARM GAS  /tmp/ccecLeJr.s 			page 24


 613:./FWLIB/src/stm32f4xx_usart.c **** 
 614:./FWLIB/src/stm32f4xx_usart.c **** @endverbatim
 615:./FWLIB/src/stm32f4xx_usart.c ****   * @{
 616:./FWLIB/src/stm32f4xx_usart.c ****   */
 617:./FWLIB/src/stm32f4xx_usart.c **** 
 618:./FWLIB/src/stm32f4xx_usart.c **** /**
 619:./FWLIB/src/stm32f4xx_usart.c ****   * @brief  Sets the address of the USART node.
 620:./FWLIB/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 621:./FWLIB/src/stm32f4xx_usart.c ****   *         UART peripheral.
 622:./FWLIB/src/stm32f4xx_usart.c ****   * @param  USART_Address: Indicates the address of the USART node.
 623:./FWLIB/src/stm32f4xx_usart.c ****   * @retval None
 624:./FWLIB/src/stm32f4xx_usart.c ****   */
 625:./FWLIB/src/stm32f4xx_usart.c **** void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
 626:./FWLIB/src/stm32f4xx_usart.c **** {
 700              		.loc 1 626 0
 701              		.cfi_startproc
 702              		@ args = 0, pretend = 0, frame = 0
 703              		@ frame_needed = 0, uses_anonymous_args = 0
 704              		@ link register save eliminated.
 705              	.LVL88:
 627:./FWLIB/src/stm32f4xx_usart.c ****   /* Check the parameters */
 628:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 629:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ADDRESS(USART_Address)); 
 630:./FWLIB/src/stm32f4xx_usart.c ****     
 631:./FWLIB/src/stm32f4xx_usart.c ****   /* Clear the USART address */
 632:./FWLIB/src/stm32f4xx_usart.c ****   USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 706              		.loc 1 632 0
 707 0000 038A     		ldrh	r3, [r0, #16]
 708 0002 9BB2     		uxth	r3, r3
 709 0004 23F00F03 		bic	r3, r3, #15
 710 0008 9BB2     		uxth	r3, r3
 711 000a 0382     		strh	r3, [r0, #16]	@ movhi
 633:./FWLIB/src/stm32f4xx_usart.c ****   /* Set the USART address node */
 634:./FWLIB/src/stm32f4xx_usart.c ****   USARTx->CR2 |= USART_Address;
 712              		.loc 1 634 0
 713 000c 038A     		ldrh	r3, [r0, #16]
 714 000e 1943     		orrs	r1, r1, r3
 715              	.LVL89:
 716 0010 0182     		strh	r1, [r0, #16]	@ movhi
 635:./FWLIB/src/stm32f4xx_usart.c **** }
 717              		.loc 1 635 0
 718 0012 7047     		bx	lr
 719              		.cfi_endproc
 720              	.LFE123:
 722              		.section	.text.USART_ReceiverWakeUpCmd,"ax",%progbits
 723              		.align	1
 724              		.global	USART_ReceiverWakeUpCmd
 725              		.syntax unified
 726              		.thumb
 727              		.thumb_func
 728              		.fpu fpv4-sp-d16
 730              	USART_ReceiverWakeUpCmd:
 731              	.LFB124:
 636:./FWLIB/src/stm32f4xx_usart.c **** 
 637:./FWLIB/src/stm32f4xx_usart.c **** /**
 638:./FWLIB/src/stm32f4xx_usart.c ****   * @brief  Determines if the USART is in mute mode or not.
 639:./FWLIB/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
ARM GAS  /tmp/ccecLeJr.s 			page 25


 640:./FWLIB/src/stm32f4xx_usart.c ****   *         UART peripheral.
 641:./FWLIB/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART mute mode.
 642:./FWLIB/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 643:./FWLIB/src/stm32f4xx_usart.c ****   * @retval None
 644:./FWLIB/src/stm32f4xx_usart.c ****   */
 645:./FWLIB/src/stm32f4xx_usart.c **** void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 646:./FWLIB/src/stm32f4xx_usart.c **** {
 732              		.loc 1 646 0
 733              		.cfi_startproc
 734              		@ args = 0, pretend = 0, frame = 0
 735              		@ frame_needed = 0, uses_anonymous_args = 0
 736              		@ link register save eliminated.
 737              	.LVL90:
 647:./FWLIB/src/stm32f4xx_usart.c ****   /* Check the parameters */
 648:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 649:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
 650:./FWLIB/src/stm32f4xx_usart.c ****   
 651:./FWLIB/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 738              		.loc 1 651 0
 739 0000 31B9     		cbnz	r1, .L57
 652:./FWLIB/src/stm32f4xx_usart.c ****   {
 653:./FWLIB/src/stm32f4xx_usart.c ****     /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
 654:./FWLIB/src/stm32f4xx_usart.c ****     USARTx->CR1 |= USART_CR1_RWU;
 655:./FWLIB/src/stm32f4xx_usart.c ****   }
 656:./FWLIB/src/stm32f4xx_usart.c ****   else
 657:./FWLIB/src/stm32f4xx_usart.c ****   {
 658:./FWLIB/src/stm32f4xx_usart.c ****     /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
 659:./FWLIB/src/stm32f4xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 740              		.loc 1 659 0
 741 0002 8389     		ldrh	r3, [r0, #12]
 742 0004 9BB2     		uxth	r3, r3
 743 0006 23F00203 		bic	r3, r3, #2
 744 000a 9BB2     		uxth	r3, r3
 745 000c 8381     		strh	r3, [r0, #12]	@ movhi
 660:./FWLIB/src/stm32f4xx_usart.c ****   }
 661:./FWLIB/src/stm32f4xx_usart.c **** }
 746              		.loc 1 661 0
 747 000e 7047     		bx	lr
 748              	.L57:
 654:./FWLIB/src/stm32f4xx_usart.c ****   }
 749              		.loc 1 654 0
 750 0010 8389     		ldrh	r3, [r0, #12]
 751 0012 43F00203 		orr	r3, r3, #2
 752 0016 8381     		strh	r3, [r0, #12]	@ movhi
 753 0018 7047     		bx	lr
 754              		.cfi_endproc
 755              	.LFE124:
 757              		.section	.text.USART_WakeUpConfig,"ax",%progbits
 758              		.align	1
 759              		.global	USART_WakeUpConfig
 760              		.syntax unified
 761              		.thumb
 762              		.thumb_func
 763              		.fpu fpv4-sp-d16
 765              	USART_WakeUpConfig:
 766              	.LFB125:
 662:./FWLIB/src/stm32f4xx_usart.c **** /**
ARM GAS  /tmp/ccecLeJr.s 			page 26


 663:./FWLIB/src/stm32f4xx_usart.c ****   * @brief  Selects the USART WakeUp method.
 664:./FWLIB/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 665:./FWLIB/src/stm32f4xx_usart.c ****   *         UART peripheral.
 666:./FWLIB/src/stm32f4xx_usart.c ****   * @param  USART_WakeUp: specifies the USART wakeup method.
 667:./FWLIB/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
 668:./FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
 669:./FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
 670:./FWLIB/src/stm32f4xx_usart.c ****   * @retval None
 671:./FWLIB/src/stm32f4xx_usart.c ****   */
 672:./FWLIB/src/stm32f4xx_usart.c **** void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
 673:./FWLIB/src/stm32f4xx_usart.c **** {
 767              		.loc 1 673 0
 768              		.cfi_startproc
 769              		@ args = 0, pretend = 0, frame = 0
 770              		@ frame_needed = 0, uses_anonymous_args = 0
 771              		@ link register save eliminated.
 772              	.LVL91:
 674:./FWLIB/src/stm32f4xx_usart.c ****   /* Check the parameters */
 675:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 676:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_WAKEUP(USART_WakeUp));
 677:./FWLIB/src/stm32f4xx_usart.c ****   
 678:./FWLIB/src/stm32f4xx_usart.c ****   USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 773              		.loc 1 678 0
 774 0000 8389     		ldrh	r3, [r0, #12]
 775 0002 9BB2     		uxth	r3, r3
 776 0004 23F40063 		bic	r3, r3, #2048
 777 0008 9BB2     		uxth	r3, r3
 778 000a 8381     		strh	r3, [r0, #12]	@ movhi
 679:./FWLIB/src/stm32f4xx_usart.c ****   USARTx->CR1 |= USART_WakeUp;
 779              		.loc 1 679 0
 780 000c 8389     		ldrh	r3, [r0, #12]
 781 000e 1943     		orrs	r1, r1, r3
 782              	.LVL92:
 783 0010 8181     		strh	r1, [r0, #12]	@ movhi
 680:./FWLIB/src/stm32f4xx_usart.c **** }
 784              		.loc 1 680 0
 785 0012 7047     		bx	lr
 786              		.cfi_endproc
 787              	.LFE125:
 789              		.section	.text.USART_LINBreakDetectLengthConfig,"ax",%progbits
 790              		.align	1
 791              		.global	USART_LINBreakDetectLengthConfig
 792              		.syntax unified
 793              		.thumb
 794              		.thumb_func
 795              		.fpu fpv4-sp-d16
 797              	USART_LINBreakDetectLengthConfig:
 798              	.LFB126:
 681:./FWLIB/src/stm32f4xx_usart.c **** 
 682:./FWLIB/src/stm32f4xx_usart.c **** /**
 683:./FWLIB/src/stm32f4xx_usart.c ****   * @}
 684:./FWLIB/src/stm32f4xx_usart.c ****   */
 685:./FWLIB/src/stm32f4xx_usart.c **** 
 686:./FWLIB/src/stm32f4xx_usart.c **** /** @defgroup USART_Group4 LIN mode functions
 687:./FWLIB/src/stm32f4xx_usart.c ****  *  @brief   LIN mode functions 
 688:./FWLIB/src/stm32f4xx_usart.c ****  *
 689:./FWLIB/src/stm32f4xx_usart.c **** @verbatim   
ARM GAS  /tmp/ccecLeJr.s 			page 27


 690:./FWLIB/src/stm32f4xx_usart.c ****  ===============================================================================
 691:./FWLIB/src/stm32f4xx_usart.c ****                         ##### LIN mode functions #####
 692:./FWLIB/src/stm32f4xx_usart.c ****  ===============================================================================  
 693:./FWLIB/src/stm32f4xx_usart.c ****     [..]
 694:./FWLIB/src/stm32f4xx_usart.c ****     This subsection provides a set of functions allowing to manage the USART LIN 
 695:./FWLIB/src/stm32f4xx_usart.c ****     Mode communication.
 696:./FWLIB/src/stm32f4xx_usart.c ****     [..]
 697:./FWLIB/src/stm32f4xx_usart.c ****     In LIN mode, 8-bit data format with 1 stop bit is required in accordance with 
 698:./FWLIB/src/stm32f4xx_usart.c ****     the LIN standard.
 699:./FWLIB/src/stm32f4xx_usart.c ****     [..]
 700:./FWLIB/src/stm32f4xx_usart.c ****     Only this LIN Feature is supported by the USART IP:
 701:./FWLIB/src/stm32f4xx_usart.c ****       (+) LIN Master Synchronous Break send capability and LIN slave break detection
 702:./FWLIB/src/stm32f4xx_usart.c ****           capability :  13-bit break generation and 10/11 bit break detection
 703:./FWLIB/src/stm32f4xx_usart.c **** 
 704:./FWLIB/src/stm32f4xx_usart.c ****     [..]
 705:./FWLIB/src/stm32f4xx_usart.c ****     USART LIN Master transmitter communication is possible through the following 
 706:./FWLIB/src/stm32f4xx_usart.c ****     procedure:
 707:./FWLIB/src/stm32f4xx_usart.c ****       (#) Program the Baud rate, Word length = 8bits, Stop bits = 1bit, Parity, 
 708:./FWLIB/src/stm32f4xx_usart.c ****         Mode transmitter or Mode receiver and hardware flow control values using 
 709:./FWLIB/src/stm32f4xx_usart.c ****         the USART_Init() function.
 710:./FWLIB/src/stm32f4xx_usart.c ****       (#) Enable the USART using the USART_Cmd() function.
 711:./FWLIB/src/stm32f4xx_usart.c ****       (#) Enable the LIN mode using the USART_LINCmd() function.
 712:./FWLIB/src/stm32f4xx_usart.c ****       (#) Send the break character using USART_SendBreak() function.
 713:./FWLIB/src/stm32f4xx_usart.c ****     [..]
 714:./FWLIB/src/stm32f4xx_usart.c ****     USART LIN Master receiver communication is possible through the following procedure:
 715:./FWLIB/src/stm32f4xx_usart.c ****       (#) Program the Baud rate, Word length = 8bits, Stop bits = 1bit, Parity, 
 716:./FWLIB/src/stm32f4xx_usart.c ****           Mode transmitter or Mode receiver and hardware flow control values using 
 717:./FWLIB/src/stm32f4xx_usart.c ****           the USART_Init() function.
 718:./FWLIB/src/stm32f4xx_usart.c ****       (#) Enable the USART using the USART_Cmd() function.
 719:./FWLIB/src/stm32f4xx_usart.c ****       (#) Configures the break detection length using the USART_LINBreakDetectLengthConfig()
 720:./FWLIB/src/stm32f4xx_usart.c ****           function.
 721:./FWLIB/src/stm32f4xx_usart.c ****       (#) Enable the LIN mode using the USART_LINCmd() function.
 722:./FWLIB/src/stm32f4xx_usart.c **** 
 723:./FWLIB/src/stm32f4xx_usart.c ****       -@- In LIN mode, the following bits must be kept cleared:
 724:./FWLIB/src/stm32f4xx_usart.c ****        (+@) CLKEN in the USART_CR2 register,
 725:./FWLIB/src/stm32f4xx_usart.c ****        (+@) STOP[1:0], SCEN, HDSEL and IREN in the USART_CR3 register.
 726:./FWLIB/src/stm32f4xx_usart.c **** 
 727:./FWLIB/src/stm32f4xx_usart.c **** @endverbatim
 728:./FWLIB/src/stm32f4xx_usart.c ****   * @{
 729:./FWLIB/src/stm32f4xx_usart.c ****   */
 730:./FWLIB/src/stm32f4xx_usart.c **** 
 731:./FWLIB/src/stm32f4xx_usart.c **** /**
 732:./FWLIB/src/stm32f4xx_usart.c ****   * @brief  Sets the USART LIN Break detection length.
 733:./FWLIB/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 734:./FWLIB/src/stm32f4xx_usart.c ****   *         UART peripheral.
 735:./FWLIB/src/stm32f4xx_usart.c ****   * @param  USART_LINBreakDetectLength: specifies the LIN break detection length.
 736:./FWLIB/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
 737:./FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
 738:./FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
 739:./FWLIB/src/stm32f4xx_usart.c ****   * @retval None
 740:./FWLIB/src/stm32f4xx_usart.c ****   */
 741:./FWLIB/src/stm32f4xx_usart.c **** void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
 742:./FWLIB/src/stm32f4xx_usart.c **** {
 799              		.loc 1 742 0
 800              		.cfi_startproc
 801              		@ args = 0, pretend = 0, frame = 0
 802              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccecLeJr.s 			page 28


 803              		@ link register save eliminated.
 804              	.LVL93:
 743:./FWLIB/src/stm32f4xx_usart.c ****   /* Check the parameters */
 744:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 745:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
 746:./FWLIB/src/stm32f4xx_usart.c ****   
 747:./FWLIB/src/stm32f4xx_usart.c ****   USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 805              		.loc 1 747 0
 806 0000 038A     		ldrh	r3, [r0, #16]
 807 0002 9BB2     		uxth	r3, r3
 808 0004 23F02003 		bic	r3, r3, #32
 809 0008 9BB2     		uxth	r3, r3
 810 000a 0382     		strh	r3, [r0, #16]	@ movhi
 748:./FWLIB/src/stm32f4xx_usart.c ****   USARTx->CR2 |= USART_LINBreakDetectLength;  
 811              		.loc 1 748 0
 812 000c 038A     		ldrh	r3, [r0, #16]
 813 000e 1943     		orrs	r1, r1, r3
 814              	.LVL94:
 815 0010 0182     		strh	r1, [r0, #16]	@ movhi
 749:./FWLIB/src/stm32f4xx_usart.c **** }
 816              		.loc 1 749 0
 817 0012 7047     		bx	lr
 818              		.cfi_endproc
 819              	.LFE126:
 821              		.section	.text.USART_LINCmd,"ax",%progbits
 822              		.align	1
 823              		.global	USART_LINCmd
 824              		.syntax unified
 825              		.thumb
 826              		.thumb_func
 827              		.fpu fpv4-sp-d16
 829              	USART_LINCmd:
 830              	.LFB127:
 750:./FWLIB/src/stm32f4xx_usart.c **** 
 751:./FWLIB/src/stm32f4xx_usart.c **** /**
 752:./FWLIB/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's LIN mode.
 753:./FWLIB/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 754:./FWLIB/src/stm32f4xx_usart.c ****   *         UART peripheral.
 755:./FWLIB/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART LIN mode.
 756:./FWLIB/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 757:./FWLIB/src/stm32f4xx_usart.c ****   * @retval None
 758:./FWLIB/src/stm32f4xx_usart.c ****   */
 759:./FWLIB/src/stm32f4xx_usart.c **** void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 760:./FWLIB/src/stm32f4xx_usart.c **** {
 831              		.loc 1 760 0
 832              		.cfi_startproc
 833              		@ args = 0, pretend = 0, frame = 0
 834              		@ frame_needed = 0, uses_anonymous_args = 0
 835              		@ link register save eliminated.
 836              	.LVL95:
 761:./FWLIB/src/stm32f4xx_usart.c ****   /* Check the parameters */
 762:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 763:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 764:./FWLIB/src/stm32f4xx_usart.c ****   
 765:./FWLIB/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 837              		.loc 1 765 0
 838 0000 31B9     		cbnz	r1, .L63
ARM GAS  /tmp/ccecLeJr.s 			page 29


 766:./FWLIB/src/stm32f4xx_usart.c ****   {
 767:./FWLIB/src/stm32f4xx_usart.c ****     /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
 768:./FWLIB/src/stm32f4xx_usart.c ****     USARTx->CR2 |= USART_CR2_LINEN;
 769:./FWLIB/src/stm32f4xx_usart.c ****   }
 770:./FWLIB/src/stm32f4xx_usart.c ****   else
 771:./FWLIB/src/stm32f4xx_usart.c ****   {
 772:./FWLIB/src/stm32f4xx_usart.c ****     /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
 773:./FWLIB/src/stm32f4xx_usart.c ****     USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 839              		.loc 1 773 0
 840 0002 038A     		ldrh	r3, [r0, #16]
 841 0004 9BB2     		uxth	r3, r3
 842 0006 23F48043 		bic	r3, r3, #16384
 843 000a 9BB2     		uxth	r3, r3
 844 000c 0382     		strh	r3, [r0, #16]	@ movhi
 774:./FWLIB/src/stm32f4xx_usart.c ****   }
 775:./FWLIB/src/stm32f4xx_usart.c **** }
 845              		.loc 1 775 0
 846 000e 7047     		bx	lr
 847              	.L63:
 768:./FWLIB/src/stm32f4xx_usart.c ****   }
 848              		.loc 1 768 0
 849 0010 038A     		ldrh	r3, [r0, #16]
 850 0012 43F48043 		orr	r3, r3, #16384
 851 0016 0382     		strh	r3, [r0, #16]	@ movhi
 852 0018 7047     		bx	lr
 853              		.cfi_endproc
 854              	.LFE127:
 856              		.section	.text.USART_SendBreak,"ax",%progbits
 857              		.align	1
 858              		.global	USART_SendBreak
 859              		.syntax unified
 860              		.thumb
 861              		.thumb_func
 862              		.fpu fpv4-sp-d16
 864              	USART_SendBreak:
 865              	.LFB128:
 776:./FWLIB/src/stm32f4xx_usart.c **** 
 777:./FWLIB/src/stm32f4xx_usart.c **** /**
 778:./FWLIB/src/stm32f4xx_usart.c ****   * @brief  Transmits break characters.
 779:./FWLIB/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 780:./FWLIB/src/stm32f4xx_usart.c ****   *         UART peripheral.
 781:./FWLIB/src/stm32f4xx_usart.c ****   * @retval None
 782:./FWLIB/src/stm32f4xx_usart.c ****   */
 783:./FWLIB/src/stm32f4xx_usart.c **** void USART_SendBreak(USART_TypeDef* USARTx)
 784:./FWLIB/src/stm32f4xx_usart.c **** {
 866              		.loc 1 784 0
 867              		.cfi_startproc
 868              		@ args = 0, pretend = 0, frame = 0
 869              		@ frame_needed = 0, uses_anonymous_args = 0
 870              		@ link register save eliminated.
 871              	.LVL96:
 785:./FWLIB/src/stm32f4xx_usart.c ****   /* Check the parameters */
 786:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 787:./FWLIB/src/stm32f4xx_usart.c ****   
 788:./FWLIB/src/stm32f4xx_usart.c ****   /* Send break characters */
 789:./FWLIB/src/stm32f4xx_usart.c ****   USARTx->CR1 |= USART_CR1_SBK;
 872              		.loc 1 789 0
ARM GAS  /tmp/ccecLeJr.s 			page 30


 873 0000 8389     		ldrh	r3, [r0, #12]
 874 0002 43F00103 		orr	r3, r3, #1
 875 0006 8381     		strh	r3, [r0, #12]	@ movhi
 790:./FWLIB/src/stm32f4xx_usart.c **** }
 876              		.loc 1 790 0
 877 0008 7047     		bx	lr
 878              		.cfi_endproc
 879              	.LFE128:
 881              		.section	.text.USART_HalfDuplexCmd,"ax",%progbits
 882              		.align	1
 883              		.global	USART_HalfDuplexCmd
 884              		.syntax unified
 885              		.thumb
 886              		.thumb_func
 887              		.fpu fpv4-sp-d16
 889              	USART_HalfDuplexCmd:
 890              	.LFB129:
 791:./FWLIB/src/stm32f4xx_usart.c **** 
 792:./FWLIB/src/stm32f4xx_usart.c **** /**
 793:./FWLIB/src/stm32f4xx_usart.c ****   * @}
 794:./FWLIB/src/stm32f4xx_usart.c ****   */
 795:./FWLIB/src/stm32f4xx_usart.c **** 
 796:./FWLIB/src/stm32f4xx_usart.c **** /** @defgroup USART_Group5 Halfduplex mode function
 797:./FWLIB/src/stm32f4xx_usart.c ****  *  @brief   Half-duplex mode function 
 798:./FWLIB/src/stm32f4xx_usart.c ****  *
 799:./FWLIB/src/stm32f4xx_usart.c **** @verbatim   
 800:./FWLIB/src/stm32f4xx_usart.c ****  ===============================================================================
 801:./FWLIB/src/stm32f4xx_usart.c ****                     ##### Half-duplex mode function #####
 802:./FWLIB/src/stm32f4xx_usart.c ****  ===============================================================================  
 803:./FWLIB/src/stm32f4xx_usart.c ****     [..]
 804:./FWLIB/src/stm32f4xx_usart.c ****     This subsection provides a set of functions allowing to manage the USART 
 805:./FWLIB/src/stm32f4xx_usart.c ****     Half-duplex communication.
 806:./FWLIB/src/stm32f4xx_usart.c ****     [..]
 807:./FWLIB/src/stm32f4xx_usart.c ****     The USART can be configured to follow a single-wire half-duplex protocol where 
 808:./FWLIB/src/stm32f4xx_usart.c ****     the TX and RX lines are internally connected.
 809:./FWLIB/src/stm32f4xx_usart.c ****     [..]
 810:./FWLIB/src/stm32f4xx_usart.c ****     USART Half duplex communication is possible through the following procedure:
 811:./FWLIB/src/stm32f4xx_usart.c ****       (#) Program the Baud rate, Word length, Stop bits, Parity, Mode transmitter 
 812:./FWLIB/src/stm32f4xx_usart.c ****           or Mode receiver and hardware flow control values using the USART_Init()
 813:./FWLIB/src/stm32f4xx_usart.c ****           function.
 814:./FWLIB/src/stm32f4xx_usart.c ****       (#) Configures the USART address using the USART_SetAddress() function.
 815:./FWLIB/src/stm32f4xx_usart.c ****       (#) Enable the USART using the USART_Cmd() function.
 816:./FWLIB/src/stm32f4xx_usart.c ****       (#) Enable the half duplex mode using USART_HalfDuplexCmd() function.
 817:./FWLIB/src/stm32f4xx_usart.c **** 
 818:./FWLIB/src/stm32f4xx_usart.c **** 
 819:./FWLIB/src/stm32f4xx_usart.c ****     -@- The RX pin is no longer used
 820:./FWLIB/src/stm32f4xx_usart.c ****     -@- In Half-duplex mode the following bits must be kept cleared:
 821:./FWLIB/src/stm32f4xx_usart.c ****       (+@) LINEN and CLKEN bits in the USART_CR2 register.
 822:./FWLIB/src/stm32f4xx_usart.c ****       (+@) SCEN and IREN bits in the USART_CR3 register.
 823:./FWLIB/src/stm32f4xx_usart.c **** 
 824:./FWLIB/src/stm32f4xx_usart.c **** @endverbatim
 825:./FWLIB/src/stm32f4xx_usart.c ****   * @{
 826:./FWLIB/src/stm32f4xx_usart.c ****   */
 827:./FWLIB/src/stm32f4xx_usart.c **** 
 828:./FWLIB/src/stm32f4xx_usart.c **** /**
 829:./FWLIB/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's Half Duplex communication.
 830:./FWLIB/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
ARM GAS  /tmp/ccecLeJr.s 			page 31


 831:./FWLIB/src/stm32f4xx_usart.c ****   *         UART peripheral.
 832:./FWLIB/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART Communication.
 833:./FWLIB/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 834:./FWLIB/src/stm32f4xx_usart.c ****   * @retval None
 835:./FWLIB/src/stm32f4xx_usart.c ****   */
 836:./FWLIB/src/stm32f4xx_usart.c **** void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 837:./FWLIB/src/stm32f4xx_usart.c **** {
 891              		.loc 1 837 0
 892              		.cfi_startproc
 893              		@ args = 0, pretend = 0, frame = 0
 894              		@ frame_needed = 0, uses_anonymous_args = 0
 895              		@ link register save eliminated.
 896              	.LVL97:
 838:./FWLIB/src/stm32f4xx_usart.c ****   /* Check the parameters */
 839:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 840:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 841:./FWLIB/src/stm32f4xx_usart.c ****   
 842:./FWLIB/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 897              		.loc 1 842 0
 898 0000 31B9     		cbnz	r1, .L68
 843:./FWLIB/src/stm32f4xx_usart.c ****   {
 844:./FWLIB/src/stm32f4xx_usart.c ****     /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
 845:./FWLIB/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_HDSEL;
 846:./FWLIB/src/stm32f4xx_usart.c ****   }
 847:./FWLIB/src/stm32f4xx_usart.c ****   else
 848:./FWLIB/src/stm32f4xx_usart.c ****   {
 849:./FWLIB/src/stm32f4xx_usart.c ****     /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
 850:./FWLIB/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 899              		.loc 1 850 0
 900 0002 838A     		ldrh	r3, [r0, #20]
 901 0004 9BB2     		uxth	r3, r3
 902 0006 23F00803 		bic	r3, r3, #8
 903 000a 9BB2     		uxth	r3, r3
 904 000c 8382     		strh	r3, [r0, #20]	@ movhi
 851:./FWLIB/src/stm32f4xx_usart.c ****   }
 852:./FWLIB/src/stm32f4xx_usart.c **** }
 905              		.loc 1 852 0
 906 000e 7047     		bx	lr
 907              	.L68:
 845:./FWLIB/src/stm32f4xx_usart.c ****   }
 908              		.loc 1 845 0
 909 0010 838A     		ldrh	r3, [r0, #20]
 910 0012 43F00803 		orr	r3, r3, #8
 911 0016 8382     		strh	r3, [r0, #20]	@ movhi
 912 0018 7047     		bx	lr
 913              		.cfi_endproc
 914              	.LFE129:
 916              		.section	.text.USART_SetGuardTime,"ax",%progbits
 917              		.align	1
 918              		.global	USART_SetGuardTime
 919              		.syntax unified
 920              		.thumb
 921              		.thumb_func
 922              		.fpu fpv4-sp-d16
 924              	USART_SetGuardTime:
 925              	.LFB130:
 853:./FWLIB/src/stm32f4xx_usart.c **** 
ARM GAS  /tmp/ccecLeJr.s 			page 32


 854:./FWLIB/src/stm32f4xx_usart.c **** /**
 855:./FWLIB/src/stm32f4xx_usart.c ****   * @}
 856:./FWLIB/src/stm32f4xx_usart.c ****   */
 857:./FWLIB/src/stm32f4xx_usart.c **** 
 858:./FWLIB/src/stm32f4xx_usart.c **** 
 859:./FWLIB/src/stm32f4xx_usart.c **** /** @defgroup USART_Group6 Smartcard mode functions
 860:./FWLIB/src/stm32f4xx_usart.c ****  *  @brief   Smartcard mode functions 
 861:./FWLIB/src/stm32f4xx_usart.c ****  *
 862:./FWLIB/src/stm32f4xx_usart.c **** @verbatim   
 863:./FWLIB/src/stm32f4xx_usart.c ****  ===============================================================================
 864:./FWLIB/src/stm32f4xx_usart.c ****                               ##### Smartcard mode functions #####
 865:./FWLIB/src/stm32f4xx_usart.c ****  ===============================================================================  
 866:./FWLIB/src/stm32f4xx_usart.c ****     [..]
 867:./FWLIB/src/stm32f4xx_usart.c ****     This subsection provides a set of functions allowing to manage the USART 
 868:./FWLIB/src/stm32f4xx_usart.c ****     Smartcard communication.
 869:./FWLIB/src/stm32f4xx_usart.c ****     [..]
 870:./FWLIB/src/stm32f4xx_usart.c ****     The Smartcard interface is designed to support asynchronous protocol Smartcards as
 871:./FWLIB/src/stm32f4xx_usart.c ****     defined in the ISO 7816-3 standard.
 872:./FWLIB/src/stm32f4xx_usart.c ****     [..]
 873:./FWLIB/src/stm32f4xx_usart.c ****     The USART can provide a clock to the smartcard through the SCLK output.
 874:./FWLIB/src/stm32f4xx_usart.c ****     In smartcard mode, SCLK is not associated to the communication but is simply derived 
 875:./FWLIB/src/stm32f4xx_usart.c ****     from the internal peripheral input clock through a 5-bit prescaler.
 876:./FWLIB/src/stm32f4xx_usart.c ****     [..]
 877:./FWLIB/src/stm32f4xx_usart.c ****     Smartcard communication is possible through the following procedure:
 878:./FWLIB/src/stm32f4xx_usart.c ****       (#) Configures the Smartcard Prescaler using the USART_SetPrescaler() function.
 879:./FWLIB/src/stm32f4xx_usart.c ****       (#) Configures the Smartcard Guard Time using the USART_SetGuardTime() function.
 880:./FWLIB/src/stm32f4xx_usart.c ****       (#) Program the USART clock using the USART_ClockInit() function as following:
 881:./FWLIB/src/stm32f4xx_usart.c ****         (++) USART Clock enabled
 882:./FWLIB/src/stm32f4xx_usart.c ****         (++) USART CPOL Low
 883:./FWLIB/src/stm32f4xx_usart.c ****         (++) USART CPHA on first edge
 884:./FWLIB/src/stm32f4xx_usart.c ****         (++) USART Last Bit Clock Enabled
 885:./FWLIB/src/stm32f4xx_usart.c ****       (#) Program the Smartcard interface using the USART_Init() function as following:
 886:./FWLIB/src/stm32f4xx_usart.c ****         (++) Word Length = 9 Bits
 887:./FWLIB/src/stm32f4xx_usart.c ****         (++) 1.5 Stop Bit
 888:./FWLIB/src/stm32f4xx_usart.c ****         (++) Even parity
 889:./FWLIB/src/stm32f4xx_usart.c ****         (++) BaudRate = 12096 baud
 890:./FWLIB/src/stm32f4xx_usart.c ****         (++) Hardware flow control disabled (RTS and CTS signals)
 891:./FWLIB/src/stm32f4xx_usart.c ****         (++) Tx and Rx enabled
 892:./FWLIB/src/stm32f4xx_usart.c ****       (#) POptionally you can enable the parity error interrupt using the USART_ITConfig()
 893:./FWLIB/src/stm32f4xx_usart.c ****           function
 894:./FWLIB/src/stm32f4xx_usart.c ****       (#) PEnable the USART using the USART_Cmd() function.
 895:./FWLIB/src/stm32f4xx_usart.c ****       (#) PEnable the Smartcard NACK using the USART_SmartCardNACKCmd() function.
 896:./FWLIB/src/stm32f4xx_usart.c ****       (#) PEnable the Smartcard interface using the USART_SmartCardCmd() function.
 897:./FWLIB/src/stm32f4xx_usart.c **** 
 898:./FWLIB/src/stm32f4xx_usart.c ****     Please refer to the ISO 7816-3 specification for more details.
 899:./FWLIB/src/stm32f4xx_usart.c **** 
 900:./FWLIB/src/stm32f4xx_usart.c ****       -@- It is also possible to choose 0.5 stop bit for receiving but it is recommended 
 901:./FWLIB/src/stm32f4xx_usart.c ****           to use 1.5 stop bits for both transmitting and receiving to avoid switching 
 902:./FWLIB/src/stm32f4xx_usart.c ****           between the two configurations.
 903:./FWLIB/src/stm32f4xx_usart.c ****       -@- In smartcard mode, the following bits must be kept cleared:
 904:./FWLIB/src/stm32f4xx_usart.c ****         (+@) LINEN bit in the USART_CR2 register.
 905:./FWLIB/src/stm32f4xx_usart.c ****         (+@) HDSEL and IREN bits in the USART_CR3 register.
 906:./FWLIB/src/stm32f4xx_usart.c ****       -@- Smartcard mode is available on USART peripherals only (not available on UART4 
 907:./FWLIB/src/stm32f4xx_usart.c ****           and UART5 peripherals).
 908:./FWLIB/src/stm32f4xx_usart.c **** 
 909:./FWLIB/src/stm32f4xx_usart.c **** @endverbatim
 910:./FWLIB/src/stm32f4xx_usart.c ****   * @{
ARM GAS  /tmp/ccecLeJr.s 			page 33


 911:./FWLIB/src/stm32f4xx_usart.c ****   */
 912:./FWLIB/src/stm32f4xx_usart.c **** 
 913:./FWLIB/src/stm32f4xx_usart.c **** /**
 914:./FWLIB/src/stm32f4xx_usart.c ****   * @brief  Sets the specified USART guard time.
 915:./FWLIB/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 916:./FWLIB/src/stm32f4xx_usart.c ****   *         UART peripheral.
 917:./FWLIB/src/stm32f4xx_usart.c ****   * @param  USART_GuardTime: specifies the guard time.   
 918:./FWLIB/src/stm32f4xx_usart.c ****   * @retval None
 919:./FWLIB/src/stm32f4xx_usart.c ****   */
 920:./FWLIB/src/stm32f4xx_usart.c **** void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
 921:./FWLIB/src/stm32f4xx_usart.c **** {    
 926              		.loc 1 921 0
 927              		.cfi_startproc
 928              		@ args = 0, pretend = 0, frame = 0
 929              		@ frame_needed = 0, uses_anonymous_args = 0
 930              		@ link register save eliminated.
 931              	.LVL98:
 922:./FWLIB/src/stm32f4xx_usart.c ****   /* Check the parameters */
 923:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 924:./FWLIB/src/stm32f4xx_usart.c ****   
 925:./FWLIB/src/stm32f4xx_usart.c ****   /* Clear the USART Guard time */
 926:./FWLIB/src/stm32f4xx_usart.c ****   USARTx->GTPR &= USART_GTPR_PSC;
 932              		.loc 1 926 0
 933 0000 038B     		ldrh	r3, [r0, #24]
 934 0002 DBB2     		uxtb	r3, r3
 935 0004 0383     		strh	r3, [r0, #24]	@ movhi
 927:./FWLIB/src/stm32f4xx_usart.c ****   /* Set the USART guard time */
 928:./FWLIB/src/stm32f4xx_usart.c ****   USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 936              		.loc 1 928 0
 937 0006 038B     		ldrh	r3, [r0, #24]
 938 0008 43EA0121 		orr	r1, r3, r1, lsl #8
 939              	.LVL99:
 940 000c 0183     		strh	r1, [r0, #24]	@ movhi
 929:./FWLIB/src/stm32f4xx_usart.c **** }
 941              		.loc 1 929 0
 942 000e 7047     		bx	lr
 943              		.cfi_endproc
 944              	.LFE130:
 946              		.section	.text.USART_SmartCardCmd,"ax",%progbits
 947              		.align	1
 948              		.global	USART_SmartCardCmd
 949              		.syntax unified
 950              		.thumb
 951              		.thumb_func
 952              		.fpu fpv4-sp-d16
 954              	USART_SmartCardCmd:
 955              	.LFB131:
 930:./FWLIB/src/stm32f4xx_usart.c **** 
 931:./FWLIB/src/stm32f4xx_usart.c **** /**
 932:./FWLIB/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's Smart Card mode.
 933:./FWLIB/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 934:./FWLIB/src/stm32f4xx_usart.c ****   *         UART peripheral.
 935:./FWLIB/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the Smart Card mode.
 936:./FWLIB/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.      
 937:./FWLIB/src/stm32f4xx_usart.c ****   * @retval None
 938:./FWLIB/src/stm32f4xx_usart.c ****   */
 939:./FWLIB/src/stm32f4xx_usart.c **** void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
ARM GAS  /tmp/ccecLeJr.s 			page 34


 940:./FWLIB/src/stm32f4xx_usart.c **** {
 956              		.loc 1 940 0
 957              		.cfi_startproc
 958              		@ args = 0, pretend = 0, frame = 0
 959              		@ frame_needed = 0, uses_anonymous_args = 0
 960              		@ link register save eliminated.
 961              	.LVL100:
 941:./FWLIB/src/stm32f4xx_usart.c ****   /* Check the parameters */
 942:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 943:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 944:./FWLIB/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 962              		.loc 1 944 0
 963 0000 31B9     		cbnz	r1, .L73
 945:./FWLIB/src/stm32f4xx_usart.c ****   {
 946:./FWLIB/src/stm32f4xx_usart.c ****     /* Enable the SC mode by setting the SCEN bit in the CR3 register */
 947:./FWLIB/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_SCEN;
 948:./FWLIB/src/stm32f4xx_usart.c ****   }
 949:./FWLIB/src/stm32f4xx_usart.c ****   else
 950:./FWLIB/src/stm32f4xx_usart.c ****   {
 951:./FWLIB/src/stm32f4xx_usart.c ****     /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
 952:./FWLIB/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 964              		.loc 1 952 0
 965 0002 838A     		ldrh	r3, [r0, #20]
 966 0004 9BB2     		uxth	r3, r3
 967 0006 23F02003 		bic	r3, r3, #32
 968 000a 9BB2     		uxth	r3, r3
 969 000c 8382     		strh	r3, [r0, #20]	@ movhi
 953:./FWLIB/src/stm32f4xx_usart.c ****   }
 954:./FWLIB/src/stm32f4xx_usart.c **** }
 970              		.loc 1 954 0
 971 000e 7047     		bx	lr
 972              	.L73:
 947:./FWLIB/src/stm32f4xx_usart.c ****   }
 973              		.loc 1 947 0
 974 0010 838A     		ldrh	r3, [r0, #20]
 975 0012 43F02003 		orr	r3, r3, #32
 976 0016 8382     		strh	r3, [r0, #20]	@ movhi
 977 0018 7047     		bx	lr
 978              		.cfi_endproc
 979              	.LFE131:
 981              		.section	.text.USART_SmartCardNACKCmd,"ax",%progbits
 982              		.align	1
 983              		.global	USART_SmartCardNACKCmd
 984              		.syntax unified
 985              		.thumb
 986              		.thumb_func
 987              		.fpu fpv4-sp-d16
 989              	USART_SmartCardNACKCmd:
 990              	.LFB132:
 955:./FWLIB/src/stm32f4xx_usart.c **** 
 956:./FWLIB/src/stm32f4xx_usart.c **** /**
 957:./FWLIB/src/stm32f4xx_usart.c ****   * @brief  Enables or disables NACK transmission.
 958:./FWLIB/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 959:./FWLIB/src/stm32f4xx_usart.c ****   *         UART peripheral.
 960:./FWLIB/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the NACK transmission.
 961:./FWLIB/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.  
 962:./FWLIB/src/stm32f4xx_usart.c ****   * @retval None
ARM GAS  /tmp/ccecLeJr.s 			page 35


 963:./FWLIB/src/stm32f4xx_usart.c ****   */
 964:./FWLIB/src/stm32f4xx_usart.c **** void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 965:./FWLIB/src/stm32f4xx_usart.c **** {
 991              		.loc 1 965 0
 992              		.cfi_startproc
 993              		@ args = 0, pretend = 0, frame = 0
 994              		@ frame_needed = 0, uses_anonymous_args = 0
 995              		@ link register save eliminated.
 996              	.LVL101:
 966:./FWLIB/src/stm32f4xx_usart.c ****   /* Check the parameters */
 967:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx)); 
 968:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 969:./FWLIB/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 997              		.loc 1 969 0
 998 0000 31B9     		cbnz	r1, .L77
 970:./FWLIB/src/stm32f4xx_usart.c ****   {
 971:./FWLIB/src/stm32f4xx_usart.c ****     /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
 972:./FWLIB/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_NACK;
 973:./FWLIB/src/stm32f4xx_usart.c ****   }
 974:./FWLIB/src/stm32f4xx_usart.c ****   else
 975:./FWLIB/src/stm32f4xx_usart.c ****   {
 976:./FWLIB/src/stm32f4xx_usart.c ****     /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
 977:./FWLIB/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 999              		.loc 1 977 0
 1000 0002 838A     		ldrh	r3, [r0, #20]
 1001 0004 9BB2     		uxth	r3, r3
 1002 0006 23F01003 		bic	r3, r3, #16
 1003 000a 9BB2     		uxth	r3, r3
 1004 000c 8382     		strh	r3, [r0, #20]	@ movhi
 978:./FWLIB/src/stm32f4xx_usart.c ****   }
 979:./FWLIB/src/stm32f4xx_usart.c **** }
 1005              		.loc 1 979 0
 1006 000e 7047     		bx	lr
 1007              	.L77:
 972:./FWLIB/src/stm32f4xx_usart.c ****   }
 1008              		.loc 1 972 0
 1009 0010 838A     		ldrh	r3, [r0, #20]
 1010 0012 43F01003 		orr	r3, r3, #16
 1011 0016 8382     		strh	r3, [r0, #20]	@ movhi
 1012 0018 7047     		bx	lr
 1013              		.cfi_endproc
 1014              	.LFE132:
 1016              		.section	.text.USART_IrDAConfig,"ax",%progbits
 1017              		.align	1
 1018              		.global	USART_IrDAConfig
 1019              		.syntax unified
 1020              		.thumb
 1021              		.thumb_func
 1022              		.fpu fpv4-sp-d16
 1024              	USART_IrDAConfig:
 1025              	.LFB133:
 980:./FWLIB/src/stm32f4xx_usart.c **** 
 981:./FWLIB/src/stm32f4xx_usart.c **** /**
 982:./FWLIB/src/stm32f4xx_usart.c ****   * @}
 983:./FWLIB/src/stm32f4xx_usart.c ****   */
 984:./FWLIB/src/stm32f4xx_usart.c **** 
 985:./FWLIB/src/stm32f4xx_usart.c **** /** @defgroup USART_Group7 IrDA mode functions
ARM GAS  /tmp/ccecLeJr.s 			page 36


 986:./FWLIB/src/stm32f4xx_usart.c ****  *  @brief   IrDA mode functions 
 987:./FWLIB/src/stm32f4xx_usart.c ****  *
 988:./FWLIB/src/stm32f4xx_usart.c **** @verbatim   
 989:./FWLIB/src/stm32f4xx_usart.c ****  ===============================================================================
 990:./FWLIB/src/stm32f4xx_usart.c ****                         ##### IrDA mode functions #####
 991:./FWLIB/src/stm32f4xx_usart.c ****  ===============================================================================  
 992:./FWLIB/src/stm32f4xx_usart.c ****     [..]
 993:./FWLIB/src/stm32f4xx_usart.c ****     This subsection provides a set of functions allowing to manage the USART 
 994:./FWLIB/src/stm32f4xx_usart.c ****     IrDA communication.
 995:./FWLIB/src/stm32f4xx_usart.c ****     [..]
 996:./FWLIB/src/stm32f4xx_usart.c ****     IrDA is a half duplex communication protocol. If the Transmitter is busy, any data
 997:./FWLIB/src/stm32f4xx_usart.c ****     on the IrDA receive line will be ignored by the IrDA decoder and if the Receiver 
 998:./FWLIB/src/stm32f4xx_usart.c ****     is busy, data on the TX from the USART to IrDA will not be encoded by IrDA.
 999:./FWLIB/src/stm32f4xx_usart.c ****     While receiving data, transmission should be avoided as the data to be transmitted
1000:./FWLIB/src/stm32f4xx_usart.c ****     could be corrupted.
1001:./FWLIB/src/stm32f4xx_usart.c ****     [..]
1002:./FWLIB/src/stm32f4xx_usart.c ****     IrDA communication is possible through the following procedure:
1003:./FWLIB/src/stm32f4xx_usart.c ****       (#) Program the Baud rate, Word length = 8 bits, Stop bits, Parity, Transmitter/Receiver 
1004:./FWLIB/src/stm32f4xx_usart.c ****           modes and hardware flow control values using the USART_Init() function.
1005:./FWLIB/src/stm32f4xx_usart.c ****       (#) Enable the USART using the USART_Cmd() function.
1006:./FWLIB/src/stm32f4xx_usart.c ****       (#) Configures the IrDA pulse width by configuring the prescaler using  
1007:./FWLIB/src/stm32f4xx_usart.c ****           the USART_SetPrescaler() function.
1008:./FWLIB/src/stm32f4xx_usart.c ****       (#) Configures the IrDA  USART_IrDAMode_LowPower or USART_IrDAMode_Normal mode
1009:./FWLIB/src/stm32f4xx_usart.c ****           using the USART_IrDAConfig() function.
1010:./FWLIB/src/stm32f4xx_usart.c ****       (#) Enable the IrDA using the USART_IrDACmd() function.
1011:./FWLIB/src/stm32f4xx_usart.c **** 
1012:./FWLIB/src/stm32f4xx_usart.c ****       -@- A pulse of width less than two and greater than one PSC period(s) may or may
1013:./FWLIB/src/stm32f4xx_usart.c ****           not be rejected.
1014:./FWLIB/src/stm32f4xx_usart.c ****       -@- The receiver set up time should be managed by software. The IrDA physical layer
1015:./FWLIB/src/stm32f4xx_usart.c ****           specification specifies a minimum of 10 ms delay between transmission and 
1016:./FWLIB/src/stm32f4xx_usart.c ****           reception (IrDA is a half duplex protocol).
1017:./FWLIB/src/stm32f4xx_usart.c ****       -@- In IrDA mode, the following bits must be kept cleared:
1018:./FWLIB/src/stm32f4xx_usart.c ****         (+@) LINEN, STOP and CLKEN bits in the USART_CR2 register.
1019:./FWLIB/src/stm32f4xx_usart.c ****         (+@) SCEN and HDSEL bits in the USART_CR3 register.
1020:./FWLIB/src/stm32f4xx_usart.c **** 
1021:./FWLIB/src/stm32f4xx_usart.c **** @endverbatim
1022:./FWLIB/src/stm32f4xx_usart.c ****   * @{
1023:./FWLIB/src/stm32f4xx_usart.c ****   */
1024:./FWLIB/src/stm32f4xx_usart.c **** 
1025:./FWLIB/src/stm32f4xx_usart.c **** /**
1026:./FWLIB/src/stm32f4xx_usart.c ****   * @brief  Configures the USART's IrDA interface.
1027:./FWLIB/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
1028:./FWLIB/src/stm32f4xx_usart.c ****   *         UART peripheral.
1029:./FWLIB/src/stm32f4xx_usart.c ****   * @param  USART_IrDAMode: specifies the IrDA mode.
1030:./FWLIB/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1031:./FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_IrDAMode_LowPower
1032:./FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_IrDAMode_Normal
1033:./FWLIB/src/stm32f4xx_usart.c ****   * @retval None
1034:./FWLIB/src/stm32f4xx_usart.c ****   */
1035:./FWLIB/src/stm32f4xx_usart.c **** void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
1036:./FWLIB/src/stm32f4xx_usart.c **** {
 1026              		.loc 1 1036 0
 1027              		.cfi_startproc
 1028              		@ args = 0, pretend = 0, frame = 0
 1029              		@ frame_needed = 0, uses_anonymous_args = 0
 1030              		@ link register save eliminated.
 1031              	.LVL102:
ARM GAS  /tmp/ccecLeJr.s 			page 37


1037:./FWLIB/src/stm32f4xx_usart.c ****   /* Check the parameters */
1038:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1039:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
1040:./FWLIB/src/stm32f4xx_usart.c ****     
1041:./FWLIB/src/stm32f4xx_usart.c ****   USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 1032              		.loc 1 1041 0
 1033 0000 838A     		ldrh	r3, [r0, #20]
 1034 0002 9BB2     		uxth	r3, r3
 1035 0004 23F00403 		bic	r3, r3, #4
 1036 0008 9BB2     		uxth	r3, r3
 1037 000a 8382     		strh	r3, [r0, #20]	@ movhi
1042:./FWLIB/src/stm32f4xx_usart.c ****   USARTx->CR3 |= USART_IrDAMode;
 1038              		.loc 1 1042 0
 1039 000c 838A     		ldrh	r3, [r0, #20]
 1040 000e 1943     		orrs	r1, r1, r3
 1041              	.LVL103:
 1042 0010 8182     		strh	r1, [r0, #20]	@ movhi
1043:./FWLIB/src/stm32f4xx_usart.c **** }
 1043              		.loc 1 1043 0
 1044 0012 7047     		bx	lr
 1045              		.cfi_endproc
 1046              	.LFE133:
 1048              		.section	.text.USART_IrDACmd,"ax",%progbits
 1049              		.align	1
 1050              		.global	USART_IrDACmd
 1051              		.syntax unified
 1052              		.thumb
 1053              		.thumb_func
 1054              		.fpu fpv4-sp-d16
 1056              	USART_IrDACmd:
 1057              	.LFB134:
1044:./FWLIB/src/stm32f4xx_usart.c **** 
1045:./FWLIB/src/stm32f4xx_usart.c **** /**
1046:./FWLIB/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's IrDA interface.
1047:./FWLIB/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
1048:./FWLIB/src/stm32f4xx_usart.c ****   *         UART peripheral.
1049:./FWLIB/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the IrDA mode.
1050:./FWLIB/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
1051:./FWLIB/src/stm32f4xx_usart.c ****   * @retval None
1052:./FWLIB/src/stm32f4xx_usart.c ****   */
1053:./FWLIB/src/stm32f4xx_usart.c **** void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
1054:./FWLIB/src/stm32f4xx_usart.c **** {
 1058              		.loc 1 1054 0
 1059              		.cfi_startproc
 1060              		@ args = 0, pretend = 0, frame = 0
 1061              		@ frame_needed = 0, uses_anonymous_args = 0
 1062              		@ link register save eliminated.
 1063              	.LVL104:
1055:./FWLIB/src/stm32f4xx_usart.c ****   /* Check the parameters */
1056:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1057:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1058:./FWLIB/src/stm32f4xx_usart.c ****     
1059:./FWLIB/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1064              		.loc 1 1059 0
 1065 0000 31B9     		cbnz	r1, .L82
1060:./FWLIB/src/stm32f4xx_usart.c ****   {
1061:./FWLIB/src/stm32f4xx_usart.c ****     /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
ARM GAS  /tmp/ccecLeJr.s 			page 38


1062:./FWLIB/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_IREN;
1063:./FWLIB/src/stm32f4xx_usart.c ****   }
1064:./FWLIB/src/stm32f4xx_usart.c ****   else
1065:./FWLIB/src/stm32f4xx_usart.c ****   {
1066:./FWLIB/src/stm32f4xx_usart.c ****     /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
1067:./FWLIB/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 1066              		.loc 1 1067 0
 1067 0002 838A     		ldrh	r3, [r0, #20]
 1068 0004 9BB2     		uxth	r3, r3
 1069 0006 23F00203 		bic	r3, r3, #2
 1070 000a 9BB2     		uxth	r3, r3
 1071 000c 8382     		strh	r3, [r0, #20]	@ movhi
1068:./FWLIB/src/stm32f4xx_usart.c ****   }
1069:./FWLIB/src/stm32f4xx_usart.c **** }
 1072              		.loc 1 1069 0
 1073 000e 7047     		bx	lr
 1074              	.L82:
1062:./FWLIB/src/stm32f4xx_usart.c ****   }
 1075              		.loc 1 1062 0
 1076 0010 838A     		ldrh	r3, [r0, #20]
 1077 0012 43F00203 		orr	r3, r3, #2
 1078 0016 8382     		strh	r3, [r0, #20]	@ movhi
 1079 0018 7047     		bx	lr
 1080              		.cfi_endproc
 1081              	.LFE134:
 1083              		.section	.text.USART_DMACmd,"ax",%progbits
 1084              		.align	1
 1085              		.global	USART_DMACmd
 1086              		.syntax unified
 1087              		.thumb
 1088              		.thumb_func
 1089              		.fpu fpv4-sp-d16
 1091              	USART_DMACmd:
 1092              	.LFB135:
1070:./FWLIB/src/stm32f4xx_usart.c **** 
1071:./FWLIB/src/stm32f4xx_usart.c **** /**
1072:./FWLIB/src/stm32f4xx_usart.c ****   * @}
1073:./FWLIB/src/stm32f4xx_usart.c ****   */
1074:./FWLIB/src/stm32f4xx_usart.c **** 
1075:./FWLIB/src/stm32f4xx_usart.c **** /** @defgroup USART_Group8 DMA transfers management functions
1076:./FWLIB/src/stm32f4xx_usart.c ****  *  @brief   DMA transfers management functions
1077:./FWLIB/src/stm32f4xx_usart.c ****  *
1078:./FWLIB/src/stm32f4xx_usart.c **** @verbatim   
1079:./FWLIB/src/stm32f4xx_usart.c ****  ===============================================================================
1080:./FWLIB/src/stm32f4xx_usart.c ****               ##### DMA transfers management functions #####
1081:./FWLIB/src/stm32f4xx_usart.c ****  ===============================================================================  
1082:./FWLIB/src/stm32f4xx_usart.c **** 
1083:./FWLIB/src/stm32f4xx_usart.c **** @endverbatim
1084:./FWLIB/src/stm32f4xx_usart.c ****   * @{
1085:./FWLIB/src/stm32f4xx_usart.c ****   */
1086:./FWLIB/src/stm32f4xx_usart.c ****   
1087:./FWLIB/src/stm32f4xx_usart.c **** /**
1088:./FWLIB/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's DMA interface.
1089:./FWLIB/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
1090:./FWLIB/src/stm32f4xx_usart.c ****   *         UART peripheral.
1091:./FWLIB/src/stm32f4xx_usart.c ****   * @param  USART_DMAReq: specifies the DMA request.
1092:./FWLIB/src/stm32f4xx_usart.c ****   *          This parameter can be any combination of the following values:
ARM GAS  /tmp/ccecLeJr.s 			page 39


1093:./FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_DMAReq_Tx: USART DMA transmit request
1094:./FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_DMAReq_Rx: USART DMA receive request
1095:./FWLIB/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the DMA Request sources.
1096:./FWLIB/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.   
1097:./FWLIB/src/stm32f4xx_usart.c ****   * @retval None
1098:./FWLIB/src/stm32f4xx_usart.c ****   */
1099:./FWLIB/src/stm32f4xx_usart.c **** void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
1100:./FWLIB/src/stm32f4xx_usart.c **** {
 1093              		.loc 1 1100 0
 1094              		.cfi_startproc
 1095              		@ args = 0, pretend = 0, frame = 0
 1096              		@ frame_needed = 0, uses_anonymous_args = 0
 1097              		@ link register save eliminated.
 1098              	.LVL105:
1101:./FWLIB/src/stm32f4xx_usart.c ****   /* Check the parameters */
1102:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1103:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_DMAREQ(USART_DMAReq));  
1104:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
1105:./FWLIB/src/stm32f4xx_usart.c **** 
1106:./FWLIB/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1099              		.loc 1 1106 0
 1100 0000 22B9     		cbnz	r2, .L86
1107:./FWLIB/src/stm32f4xx_usart.c ****   {
1108:./FWLIB/src/stm32f4xx_usart.c ****     /* Enable the DMA transfer for selected requests by setting the DMAT and/or
1109:./FWLIB/src/stm32f4xx_usart.c ****        DMAR bits in the USART CR3 register */
1110:./FWLIB/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_DMAReq;
1111:./FWLIB/src/stm32f4xx_usart.c ****   }
1112:./FWLIB/src/stm32f4xx_usart.c ****   else
1113:./FWLIB/src/stm32f4xx_usart.c ****   {
1114:./FWLIB/src/stm32f4xx_usart.c ****     /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
1115:./FWLIB/src/stm32f4xx_usart.c ****        DMAR bits in the USART CR3 register */
1116:./FWLIB/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 1101              		.loc 1 1116 0
 1102 0002 838A     		ldrh	r3, [r0, #20]
 1103 0004 23EA0101 		bic	r1, r3, r1
 1104              	.LVL106:
 1105 0008 8182     		strh	r1, [r0, #20]	@ movhi
1117:./FWLIB/src/stm32f4xx_usart.c ****   }
1118:./FWLIB/src/stm32f4xx_usart.c **** }
 1106              		.loc 1 1118 0
 1107 000a 7047     		bx	lr
 1108              	.LVL107:
 1109              	.L86:
1110:./FWLIB/src/stm32f4xx_usart.c ****   }
 1110              		.loc 1 1110 0
 1111 000c 838A     		ldrh	r3, [r0, #20]
 1112 000e 1943     		orrs	r1, r1, r3
 1113              	.LVL108:
 1114 0010 8182     		strh	r1, [r0, #20]	@ movhi
 1115 0012 7047     		bx	lr
 1116              		.cfi_endproc
 1117              	.LFE135:
 1119              		.section	.text.USART_ITConfig,"ax",%progbits
 1120              		.align	1
 1121              		.global	USART_ITConfig
 1122              		.syntax unified
 1123              		.thumb
ARM GAS  /tmp/ccecLeJr.s 			page 40


 1124              		.thumb_func
 1125              		.fpu fpv4-sp-d16
 1127              	USART_ITConfig:
 1128              	.LFB136:
1119:./FWLIB/src/stm32f4xx_usart.c **** 
1120:./FWLIB/src/stm32f4xx_usart.c **** /**
1121:./FWLIB/src/stm32f4xx_usart.c ****   * @}
1122:./FWLIB/src/stm32f4xx_usart.c ****   */
1123:./FWLIB/src/stm32f4xx_usart.c ****   
1124:./FWLIB/src/stm32f4xx_usart.c **** /** @defgroup USART_Group9 Interrupts and flags management functions
1125:./FWLIB/src/stm32f4xx_usart.c ****  *  @brief   Interrupts and flags management functions 
1126:./FWLIB/src/stm32f4xx_usart.c ****  *
1127:./FWLIB/src/stm32f4xx_usart.c **** @verbatim   
1128:./FWLIB/src/stm32f4xx_usart.c ****  ===============================================================================
1129:./FWLIB/src/stm32f4xx_usart.c ****             ##### Interrupts and flags management functions #####
1130:./FWLIB/src/stm32f4xx_usart.c ****  ===============================================================================  
1131:./FWLIB/src/stm32f4xx_usart.c ****     [..]
1132:./FWLIB/src/stm32f4xx_usart.c ****     This subsection provides a set of functions allowing to configure the USART 
1133:./FWLIB/src/stm32f4xx_usart.c ****     Interrupts sources, DMA channels requests and check or clear the flags or 
1134:./FWLIB/src/stm32f4xx_usart.c ****     pending bits status.
1135:./FWLIB/src/stm32f4xx_usart.c ****     The user should identify which mode will be used in his application to manage 
1136:./FWLIB/src/stm32f4xx_usart.c ****     the communication: Polling mode, Interrupt mode or DMA mode. 
1137:./FWLIB/src/stm32f4xx_usart.c ****     
1138:./FWLIB/src/stm32f4xx_usart.c ****     *** Polling Mode ***
1139:./FWLIB/src/stm32f4xx_usart.c ****     ====================
1140:./FWLIB/src/stm32f4xx_usart.c ****     [..]
1141:./FWLIB/src/stm32f4xx_usart.c ****     In Polling Mode, the SPI communication can be managed by 10 flags:
1142:./FWLIB/src/stm32f4xx_usart.c ****       (#) USART_FLAG_TXE : to indicate the status of the transmit buffer register
1143:./FWLIB/src/stm32f4xx_usart.c ****       (#) USART_FLAG_RXNE : to indicate the status of the receive buffer register
1144:./FWLIB/src/stm32f4xx_usart.c ****       (#) USART_FLAG_TC : to indicate the status of the transmit operation
1145:./FWLIB/src/stm32f4xx_usart.c ****       (#) USART_FLAG_IDLE : to indicate the status of the Idle Line             
1146:./FWLIB/src/stm32f4xx_usart.c ****       (#) USART_FLAG_CTS : to indicate the status of the nCTS input
1147:./FWLIB/src/stm32f4xx_usart.c ****       (#) USART_FLAG_LBD : to indicate the status of the LIN break detection
1148:./FWLIB/src/stm32f4xx_usart.c ****       (#) USART_FLAG_NE : to indicate if a noise error occur
1149:./FWLIB/src/stm32f4xx_usart.c ****       (#) USART_FLAG_FE : to indicate if a frame error occur
1150:./FWLIB/src/stm32f4xx_usart.c ****       (#) USART_FLAG_PE : to indicate if a parity error occur
1151:./FWLIB/src/stm32f4xx_usart.c ****       (#) USART_FLAG_ORE : to indicate if an Overrun error occur
1152:./FWLIB/src/stm32f4xx_usart.c ****     [..]
1153:./FWLIB/src/stm32f4xx_usart.c ****     In this Mode it is advised to use the following functions:
1154:./FWLIB/src/stm32f4xx_usart.c ****       (+) FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG);
1155:./FWLIB/src/stm32f4xx_usart.c ****       (+) void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG);
1156:./FWLIB/src/stm32f4xx_usart.c **** 
1157:./FWLIB/src/stm32f4xx_usart.c ****     *** Interrupt Mode ***
1158:./FWLIB/src/stm32f4xx_usart.c ****     ======================
1159:./FWLIB/src/stm32f4xx_usart.c ****     [..]
1160:./FWLIB/src/stm32f4xx_usart.c ****     In Interrupt Mode, the USART communication can be managed by 8 interrupt sources
1161:./FWLIB/src/stm32f4xx_usart.c ****     and 10 pending bits: 
1162:./FWLIB/src/stm32f4xx_usart.c **** 
1163:./FWLIB/src/stm32f4xx_usart.c ****       (#) Pending Bits:
1164:./FWLIB/src/stm32f4xx_usart.c **** 
1165:./FWLIB/src/stm32f4xx_usart.c ****         (##) USART_IT_TXE : to indicate the status of the transmit buffer register
1166:./FWLIB/src/stm32f4xx_usart.c ****         (##) USART_IT_RXNE : to indicate the status of the receive buffer register
1167:./FWLIB/src/stm32f4xx_usart.c ****         (##) USART_IT_TC : to indicate the status of the transmit operation
1168:./FWLIB/src/stm32f4xx_usart.c ****         (##) USART_IT_IDLE : to indicate the status of the Idle Line             
1169:./FWLIB/src/stm32f4xx_usart.c ****         (##) USART_IT_CTS : to indicate the status of the nCTS input
1170:./FWLIB/src/stm32f4xx_usart.c ****         (##) USART_IT_LBD : to indicate the status of the LIN break detection
1171:./FWLIB/src/stm32f4xx_usart.c ****         (##) USART_IT_NE : to indicate if a noise error occur
ARM GAS  /tmp/ccecLeJr.s 			page 41


1172:./FWLIB/src/stm32f4xx_usart.c ****         (##) USART_IT_FE : to indicate if a frame error occur
1173:./FWLIB/src/stm32f4xx_usart.c ****         (##) USART_IT_PE : to indicate if a parity error occur
1174:./FWLIB/src/stm32f4xx_usart.c ****         (##) USART_IT_ORE : to indicate if an Overrun error occur
1175:./FWLIB/src/stm32f4xx_usart.c **** 
1176:./FWLIB/src/stm32f4xx_usart.c ****       (#) Interrupt Source:
1177:./FWLIB/src/stm32f4xx_usart.c **** 
1178:./FWLIB/src/stm32f4xx_usart.c ****         (##) USART_IT_TXE : specifies the interrupt source for the Tx buffer empty 
1179:./FWLIB/src/stm32f4xx_usart.c ****                             interrupt. 
1180:./FWLIB/src/stm32f4xx_usart.c ****         (##) USART_IT_RXNE : specifies the interrupt source for the Rx buffer not 
1181:./FWLIB/src/stm32f4xx_usart.c ****                              empty interrupt.
1182:./FWLIB/src/stm32f4xx_usart.c ****         (##) USART_IT_TC : specifies the interrupt source for the Transmit complete 
1183:./FWLIB/src/stm32f4xx_usart.c ****                            interrupt. 
1184:./FWLIB/src/stm32f4xx_usart.c ****         (##) USART_IT_IDLE : specifies the interrupt source for the Idle Line interrupt.           
1185:./FWLIB/src/stm32f4xx_usart.c ****         (##) USART_IT_CTS : specifies the interrupt source for the CTS interrupt. 
1186:./FWLIB/src/stm32f4xx_usart.c ****         (##) USART_IT_LBD : specifies the interrupt source for the LIN break detection
1187:./FWLIB/src/stm32f4xx_usart.c ****                             interrupt. 
1188:./FWLIB/src/stm32f4xx_usart.c ****         (##) USART_IT_PE : specifies the interrupt source for the parity error interrupt. 
1189:./FWLIB/src/stm32f4xx_usart.c ****         (##) USART_IT_ERR :  specifies the interrupt source for the errors interrupt.
1190:./FWLIB/src/stm32f4xx_usart.c **** 
1191:./FWLIB/src/stm32f4xx_usart.c ****       -@@- Some parameters are coded in order to use them as interrupt source 
1192:./FWLIB/src/stm32f4xx_usart.c ****           or as pending bits.
1193:./FWLIB/src/stm32f4xx_usart.c ****     [..]
1194:./FWLIB/src/stm32f4xx_usart.c ****     In this Mode it is advised to use the following functions:
1195:./FWLIB/src/stm32f4xx_usart.c ****       (+) void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState);
1196:./FWLIB/src/stm32f4xx_usart.c ****       (+) ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT);
1197:./FWLIB/src/stm32f4xx_usart.c ****       (+) void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT);
1198:./FWLIB/src/stm32f4xx_usart.c **** 
1199:./FWLIB/src/stm32f4xx_usart.c ****     *** DMA Mode ***
1200:./FWLIB/src/stm32f4xx_usart.c ****     ================
1201:./FWLIB/src/stm32f4xx_usart.c ****     [..]
1202:./FWLIB/src/stm32f4xx_usart.c ****     In DMA Mode, the USART communication can be managed by 2 DMA Channel requests:
1203:./FWLIB/src/stm32f4xx_usart.c ****       (#) USART_DMAReq_Tx: specifies the Tx buffer DMA transfer request
1204:./FWLIB/src/stm32f4xx_usart.c ****       (#) USART_DMAReq_Rx: specifies the Rx buffer DMA transfer request
1205:./FWLIB/src/stm32f4xx_usart.c ****     [..]
1206:./FWLIB/src/stm32f4xx_usart.c ****     In this Mode it is advised to use the following function:
1207:./FWLIB/src/stm32f4xx_usart.c ****       (+) void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
1208:./FWLIB/src/stm32f4xx_usart.c **** 
1209:./FWLIB/src/stm32f4xx_usart.c **** @endverbatim
1210:./FWLIB/src/stm32f4xx_usart.c ****   * @{
1211:./FWLIB/src/stm32f4xx_usart.c ****   */
1212:./FWLIB/src/stm32f4xx_usart.c **** 
1213:./FWLIB/src/stm32f4xx_usart.c **** /**
1214:./FWLIB/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the specified USART interrupts.
1215:./FWLIB/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
1216:./FWLIB/src/stm32f4xx_usart.c ****   *         UART peripheral.
1217:./FWLIB/src/stm32f4xx_usart.c ****   * @param  USART_IT: specifies the USART interrupt sources to be enabled or disabled.
1218:./FWLIB/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1219:./FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt
1220:./FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1221:./FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TXE:  Transmit Data Register empty interrupt
1222:./FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt
1223:./FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt
1224:./FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_IT_IDLE: Idle line detection interrupt
1225:./FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_IT_PE:   Parity Error interrupt
1226:./FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_IT_ERR:  Error interrupt(Frame error, noise error, overrun error)
1227:./FWLIB/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the specified USARTx interrupts.
1228:./FWLIB/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
ARM GAS  /tmp/ccecLeJr.s 			page 42


1229:./FWLIB/src/stm32f4xx_usart.c ****   * @retval None
1230:./FWLIB/src/stm32f4xx_usart.c ****   */
1231:./FWLIB/src/stm32f4xx_usart.c **** void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
1232:./FWLIB/src/stm32f4xx_usart.c **** {
 1129              		.loc 1 1232 0
 1130              		.cfi_startproc
 1131              		@ args = 0, pretend = 0, frame = 0
 1132              		@ frame_needed = 0, uses_anonymous_args = 0
 1133              		@ link register save eliminated.
 1134              	.LVL109:
 1135 0000 10B4     		push	{r4}
 1136              	.LCFI7:
 1137              		.cfi_def_cfa_offset 4
 1138              		.cfi_offset 4, -4
 1139              	.LVL110:
1233:./FWLIB/src/stm32f4xx_usart.c ****   uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
1234:./FWLIB/src/stm32f4xx_usart.c ****   uint32_t usartxbase = 0x00;
1235:./FWLIB/src/stm32f4xx_usart.c ****   /* Check the parameters */
1236:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1237:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CONFIG_IT(USART_IT));
1238:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1239:./FWLIB/src/stm32f4xx_usart.c **** 
1240:./FWLIB/src/stm32f4xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */
1241:./FWLIB/src/stm32f4xx_usart.c ****   if (USART_IT == USART_IT_CTS)
1242:./FWLIB/src/stm32f4xx_usart.c ****   {
1243:./FWLIB/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1244:./FWLIB/src/stm32f4xx_usart.c ****   } 
1245:./FWLIB/src/stm32f4xx_usart.c ****     
1246:./FWLIB/src/stm32f4xx_usart.c ****   usartxbase = (uint32_t)USARTx;
1247:./FWLIB/src/stm32f4xx_usart.c **** 
1248:./FWLIB/src/stm32f4xx_usart.c ****   /* Get the USART register index */
1249:./FWLIB/src/stm32f4xx_usart.c ****   usartreg = (((uint8_t)USART_IT) >> 0x05);
 1140              		.loc 1 1249 0
 1141 0002 C1F34214 		ubfx	r4, r1, #5, #3
 1142              	.LVL111:
1250:./FWLIB/src/stm32f4xx_usart.c **** 
1251:./FWLIB/src/stm32f4xx_usart.c ****   /* Get the interrupt position */
1252:./FWLIB/src/stm32f4xx_usart.c ****   itpos = USART_IT & IT_MASK;
 1143              		.loc 1 1252 0
 1144 0006 01F01F01 		and	r1, r1, #31
 1145              	.LVL112:
1253:./FWLIB/src/stm32f4xx_usart.c ****   itmask = (((uint32_t)0x01) << itpos);
 1146              		.loc 1 1253 0
 1147 000a 0123     		movs	r3, #1
 1148 000c 03FA01F1 		lsl	r1, r3, r1
 1149              	.LVL113:
1254:./FWLIB/src/stm32f4xx_usart.c ****     
1255:./FWLIB/src/stm32f4xx_usart.c ****   if (usartreg == 0x01) /* The IT is in CR1 register */
 1150              		.loc 1 1255 0
 1151 0010 9C42     		cmp	r4, r3
 1152 0012 0AD0     		beq	.L94
1256:./FWLIB/src/stm32f4xx_usart.c ****   {
1257:./FWLIB/src/stm32f4xx_usart.c ****     usartxbase += 0x0C;
1258:./FWLIB/src/stm32f4xx_usart.c ****   }
1259:./FWLIB/src/stm32f4xx_usart.c ****   else if (usartreg == 0x02) /* The IT is in CR2 register */
 1153              		.loc 1 1259 0
 1154 0014 022C     		cmp	r4, #2
ARM GAS  /tmp/ccecLeJr.s 			page 43


 1155 0016 0AD0     		beq	.L95
1260:./FWLIB/src/stm32f4xx_usart.c ****   {
1261:./FWLIB/src/stm32f4xx_usart.c ****     usartxbase += 0x10;
1262:./FWLIB/src/stm32f4xx_usart.c ****   }
1263:./FWLIB/src/stm32f4xx_usart.c ****   else /* The IT is in CR3 register */
1264:./FWLIB/src/stm32f4xx_usart.c ****   {
1265:./FWLIB/src/stm32f4xx_usart.c ****     usartxbase += 0x14; 
 1156              		.loc 1 1265 0
 1157 0018 1430     		adds	r0, r0, #20
 1158              	.LVL114:
 1159              	.L89:
1266:./FWLIB/src/stm32f4xx_usart.c ****   }
1267:./FWLIB/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1160              		.loc 1 1267 0
 1161 001a 52B9     		cbnz	r2, .L96
1268:./FWLIB/src/stm32f4xx_usart.c ****   {
1269:./FWLIB/src/stm32f4xx_usart.c ****     *(__IO uint32_t*)usartxbase  |= itmask;
1270:./FWLIB/src/stm32f4xx_usart.c ****   }
1271:./FWLIB/src/stm32f4xx_usart.c ****   else
1272:./FWLIB/src/stm32f4xx_usart.c ****   {
1273:./FWLIB/src/stm32f4xx_usart.c ****     *(__IO uint32_t*)usartxbase &= ~itmask;
 1162              		.loc 1 1273 0
 1163 001c 0368     		ldr	r3, [r0]
 1164 001e 23EA0101 		bic	r1, r3, r1
 1165              	.LVL115:
 1166 0022 0160     		str	r1, [r0]
 1167              	.L87:
1274:./FWLIB/src/stm32f4xx_usart.c ****   }
1275:./FWLIB/src/stm32f4xx_usart.c **** }
 1168              		.loc 1 1275 0
 1169 0024 5DF8044B 		ldr	r4, [sp], #4
 1170              	.LCFI8:
 1171              		.cfi_remember_state
 1172              		.cfi_restore 4
 1173              		.cfi_def_cfa_offset 0
 1174              	.LVL116:
 1175 0028 7047     		bx	lr
 1176              	.LVL117:
 1177              	.L94:
 1178              	.LCFI9:
 1179              		.cfi_restore_state
1257:./FWLIB/src/stm32f4xx_usart.c ****   }
 1180              		.loc 1 1257 0
 1181 002a 0C30     		adds	r0, r0, #12
 1182              	.LVL118:
 1183 002c F5E7     		b	.L89
 1184              	.LVL119:
 1185              	.L95:
1261:./FWLIB/src/stm32f4xx_usart.c ****   }
 1186              		.loc 1 1261 0
 1187 002e 1030     		adds	r0, r0, #16
 1188              	.LVL120:
 1189 0030 F3E7     		b	.L89
 1190              	.LVL121:
 1191              	.L96:
1269:./FWLIB/src/stm32f4xx_usart.c ****   }
 1192              		.loc 1 1269 0
ARM GAS  /tmp/ccecLeJr.s 			page 44


 1193 0032 0368     		ldr	r3, [r0]
 1194 0034 1943     		orrs	r1, r1, r3
 1195              	.LVL122:
 1196 0036 0160     		str	r1, [r0]
 1197 0038 F4E7     		b	.L87
 1198              		.cfi_endproc
 1199              	.LFE136:
 1201              		.section	.text.USART_GetFlagStatus,"ax",%progbits
 1202              		.align	1
 1203              		.global	USART_GetFlagStatus
 1204              		.syntax unified
 1205              		.thumb
 1206              		.thumb_func
 1207              		.fpu fpv4-sp-d16
 1209              	USART_GetFlagStatus:
 1210              	.LFB137:
1276:./FWLIB/src/stm32f4xx_usart.c **** 
1277:./FWLIB/src/stm32f4xx_usart.c **** /**
1278:./FWLIB/src/stm32f4xx_usart.c ****   * @brief  Checks whether the specified USART flag is set or not.
1279:./FWLIB/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
1280:./FWLIB/src/stm32f4xx_usart.c ****   *         UART peripheral.
1281:./FWLIB/src/stm32f4xx_usart.c ****   * @param  USART_FLAG: specifies the flag to check.
1282:./FWLIB/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1283:./FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_CTS:  CTS Change flag (not available for UART4 and UART5)
1284:./FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_LBD:  LIN Break detection flag
1285:./FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_TXE:  Transmit data register empty flag
1286:./FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_TC:   Transmission Complete flag
1287:./FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_RXNE: Receive data register not empty flag
1288:./FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_IDLE: Idle Line detection flag
1289:./FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_ORE:  OverRun Error flag
1290:./FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_NE:   Noise Error flag
1291:./FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_FE:   Framing Error flag
1292:./FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_PE:   Parity Error flag
1293:./FWLIB/src/stm32f4xx_usart.c ****   * @retval The new state of USART_FLAG (SET or RESET).
1294:./FWLIB/src/stm32f4xx_usart.c ****   */
1295:./FWLIB/src/stm32f4xx_usart.c **** FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
1296:./FWLIB/src/stm32f4xx_usart.c **** {
 1211              		.loc 1 1296 0
 1212              		.cfi_startproc
 1213              		@ args = 0, pretend = 0, frame = 0
 1214              		@ frame_needed = 0, uses_anonymous_args = 0
 1215              		@ link register save eliminated.
 1216              	.LVL123:
1297:./FWLIB/src/stm32f4xx_usart.c ****   FlagStatus bitstatus = RESET;
1298:./FWLIB/src/stm32f4xx_usart.c ****   /* Check the parameters */
1299:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1300:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_FLAG(USART_FLAG));
1301:./FWLIB/src/stm32f4xx_usart.c **** 
1302:./FWLIB/src/stm32f4xx_usart.c ****   /* The CTS flag is not available for UART4 and UART5 */
1303:./FWLIB/src/stm32f4xx_usart.c ****   if (USART_FLAG == USART_FLAG_CTS)
1304:./FWLIB/src/stm32f4xx_usart.c ****   {
1305:./FWLIB/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1306:./FWLIB/src/stm32f4xx_usart.c ****   } 
1307:./FWLIB/src/stm32f4xx_usart.c ****     
1308:./FWLIB/src/stm32f4xx_usart.c ****   if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 1217              		.loc 1 1308 0
 1218 0000 0388     		ldrh	r3, [r0]
ARM GAS  /tmp/ccecLeJr.s 			page 45


 1219 0002 1942     		tst	r1, r3
 1220 0004 01D1     		bne	.L100
1309:./FWLIB/src/stm32f4xx_usart.c ****   {
1310:./FWLIB/src/stm32f4xx_usart.c ****     bitstatus = SET;
1311:./FWLIB/src/stm32f4xx_usart.c ****   }
1312:./FWLIB/src/stm32f4xx_usart.c ****   else
1313:./FWLIB/src/stm32f4xx_usart.c ****   {
1314:./FWLIB/src/stm32f4xx_usart.c ****     bitstatus = RESET;
 1221              		.loc 1 1314 0
 1222 0006 0020     		movs	r0, #0
 1223              	.LVL124:
1315:./FWLIB/src/stm32f4xx_usart.c ****   }
1316:./FWLIB/src/stm32f4xx_usart.c ****   return bitstatus;
1317:./FWLIB/src/stm32f4xx_usart.c **** }
 1224              		.loc 1 1317 0
 1225 0008 7047     		bx	lr
 1226              	.LVL125:
 1227              	.L100:
1310:./FWLIB/src/stm32f4xx_usart.c ****   }
 1228              		.loc 1 1310 0
 1229 000a 0120     		movs	r0, #1
 1230              	.LVL126:
 1231 000c 7047     		bx	lr
 1232              		.cfi_endproc
 1233              	.LFE137:
 1235              		.section	.text.USART_ClearFlag,"ax",%progbits
 1236              		.align	1
 1237              		.global	USART_ClearFlag
 1238              		.syntax unified
 1239              		.thumb
 1240              		.thumb_func
 1241              		.fpu fpv4-sp-d16
 1243              	USART_ClearFlag:
 1244              	.LFB138:
1318:./FWLIB/src/stm32f4xx_usart.c **** 
1319:./FWLIB/src/stm32f4xx_usart.c **** /**
1320:./FWLIB/src/stm32f4xx_usart.c ****   * @brief  Clears the USARTx's pending flags.
1321:./FWLIB/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
1322:./FWLIB/src/stm32f4xx_usart.c ****   *         UART peripheral.
1323:./FWLIB/src/stm32f4xx_usart.c ****   * @param  USART_FLAG: specifies the flag to clear.
1324:./FWLIB/src/stm32f4xx_usart.c ****   *          This parameter can be any combination of the following values:
1325:./FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_CTS:  CTS Change flag (not available for UART4 and UART5).
1326:./FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_LBD:  LIN Break detection flag.
1327:./FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_TC:   Transmission Complete flag.
1328:./FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_RXNE: Receive data register not empty flag.
1329:./FWLIB/src/stm32f4xx_usart.c ****   *   
1330:./FWLIB/src/stm32f4xx_usart.c ****   * @note   PE (Parity error), FE (Framing error), NE (Noise error), ORE (OverRun 
1331:./FWLIB/src/stm32f4xx_usart.c ****   *          error) and IDLE (Idle line detected) flags are cleared by software 
1332:./FWLIB/src/stm32f4xx_usart.c ****   *          sequence: a read operation to USART_SR register (USART_GetFlagStatus()) 
1333:./FWLIB/src/stm32f4xx_usart.c ****   *          followed by a read operation to USART_DR register (USART_ReceiveData()).
1334:./FWLIB/src/stm32f4xx_usart.c ****   * @note   RXNE flag can be also cleared by a read to the USART_DR register 
1335:./FWLIB/src/stm32f4xx_usart.c ****   *          (USART_ReceiveData()).
1336:./FWLIB/src/stm32f4xx_usart.c ****   * @note   TC flag can be also cleared by software sequence: a read operation to 
1337:./FWLIB/src/stm32f4xx_usart.c ****   *          USART_SR register (USART_GetFlagStatus()) followed by a write operation
1338:./FWLIB/src/stm32f4xx_usart.c ****   *          to USART_DR register (USART_SendData()).
1339:./FWLIB/src/stm32f4xx_usart.c ****   * @note   TXE flag is cleared only by a write to the USART_DR register 
1340:./FWLIB/src/stm32f4xx_usart.c ****   *          (USART_SendData()).
ARM GAS  /tmp/ccecLeJr.s 			page 46


1341:./FWLIB/src/stm32f4xx_usart.c ****   *   
1342:./FWLIB/src/stm32f4xx_usart.c ****   * @retval None
1343:./FWLIB/src/stm32f4xx_usart.c ****   */
1344:./FWLIB/src/stm32f4xx_usart.c **** void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
1345:./FWLIB/src/stm32f4xx_usart.c **** {
 1245              		.loc 1 1345 0
 1246              		.cfi_startproc
 1247              		@ args = 0, pretend = 0, frame = 0
 1248              		@ frame_needed = 0, uses_anonymous_args = 0
 1249              		@ link register save eliminated.
 1250              	.LVL127:
1346:./FWLIB/src/stm32f4xx_usart.c ****   /* Check the parameters */
1347:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1348:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
1349:./FWLIB/src/stm32f4xx_usart.c **** 
1350:./FWLIB/src/stm32f4xx_usart.c ****   /* The CTS flag is not available for UART4 and UART5 */
1351:./FWLIB/src/stm32f4xx_usart.c ****   if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
1352:./FWLIB/src/stm32f4xx_usart.c ****   {
1353:./FWLIB/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1354:./FWLIB/src/stm32f4xx_usart.c ****   } 
1355:./FWLIB/src/stm32f4xx_usart.c ****        
1356:./FWLIB/src/stm32f4xx_usart.c ****   USARTx->SR = (uint16_t)~USART_FLAG;
 1251              		.loc 1 1356 0
 1252 0000 C943     		mvns	r1, r1
 1253              	.LVL128:
 1254 0002 89B2     		uxth	r1, r1
 1255 0004 0180     		strh	r1, [r0]	@ movhi
1357:./FWLIB/src/stm32f4xx_usart.c **** }
 1256              		.loc 1 1357 0
 1257 0006 7047     		bx	lr
 1258              		.cfi_endproc
 1259              	.LFE138:
 1261              		.section	.text.USART_GetITStatus,"ax",%progbits
 1262              		.align	1
 1263              		.global	USART_GetITStatus
 1264              		.syntax unified
 1265              		.thumb
 1266              		.thumb_func
 1267              		.fpu fpv4-sp-d16
 1269              	USART_GetITStatus:
 1270              	.LFB139:
1358:./FWLIB/src/stm32f4xx_usart.c **** 
1359:./FWLIB/src/stm32f4xx_usart.c **** /**
1360:./FWLIB/src/stm32f4xx_usart.c ****   * @brief  Checks whether the specified USART interrupt has occurred or not.
1361:./FWLIB/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
1362:./FWLIB/src/stm32f4xx_usart.c ****   *         UART peripheral.
1363:./FWLIB/src/stm32f4xx_usart.c ****   * @param  USART_IT: specifies the USART interrupt source to check.
1364:./FWLIB/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1365:./FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt (not available for UART4 and UART5)
1366:./FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1367:./FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TXE:  Transmit Data Register empty interrupt
1368:./FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt
1369:./FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt
1370:./FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_IT_IDLE: Idle line detection interrupt
1371:./FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_IT_ORE_RX : OverRun Error interrupt if the RXNEIE bit is set
1372:./FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_IT_ORE_ER : OverRun Error interrupt if the EIE bit is set  
1373:./FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_IT_NE:   Noise Error interrupt
ARM GAS  /tmp/ccecLeJr.s 			page 47


1374:./FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_IT_FE:   Framing Error interrupt
1375:./FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_IT_PE:   Parity Error interrupt
1376:./FWLIB/src/stm32f4xx_usart.c ****   * @retval The new state of USART_IT (SET or RESET).
1377:./FWLIB/src/stm32f4xx_usart.c ****   */
1378:./FWLIB/src/stm32f4xx_usart.c **** ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
1379:./FWLIB/src/stm32f4xx_usart.c **** {
 1271              		.loc 1 1379 0
 1272              		.cfi_startproc
 1273              		@ args = 0, pretend = 0, frame = 0
 1274              		@ frame_needed = 0, uses_anonymous_args = 0
 1275              		@ link register save eliminated.
 1276              	.LVL129:
 1277 0000 10B4     		push	{r4}
 1278              	.LCFI10:
 1279              		.cfi_def_cfa_offset 4
 1280              		.cfi_offset 4, -4
 1281              	.LVL130:
1380:./FWLIB/src/stm32f4xx_usart.c ****   uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
1381:./FWLIB/src/stm32f4xx_usart.c ****   ITStatus bitstatus = RESET;
1382:./FWLIB/src/stm32f4xx_usart.c ****   /* Check the parameters */
1383:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1384:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_GET_IT(USART_IT)); 
1385:./FWLIB/src/stm32f4xx_usart.c **** 
1386:./FWLIB/src/stm32f4xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */ 
1387:./FWLIB/src/stm32f4xx_usart.c ****   if (USART_IT == USART_IT_CTS)
1388:./FWLIB/src/stm32f4xx_usart.c ****   {
1389:./FWLIB/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1390:./FWLIB/src/stm32f4xx_usart.c ****   } 
1391:./FWLIB/src/stm32f4xx_usart.c ****     
1392:./FWLIB/src/stm32f4xx_usart.c ****   /* Get the USART register index */
1393:./FWLIB/src/stm32f4xx_usart.c ****   usartreg = (((uint8_t)USART_IT) >> 0x05);
 1282              		.loc 1 1393 0
 1283 0002 C1F34212 		ubfx	r2, r1, #5, #3
 1284              	.LVL131:
1394:./FWLIB/src/stm32f4xx_usart.c ****   /* Get the interrupt position */
1395:./FWLIB/src/stm32f4xx_usart.c ****   itmask = USART_IT & IT_MASK;
 1285              		.loc 1 1395 0
 1286 0006 01F01F04 		and	r4, r1, #31
 1287              	.LVL132:
1396:./FWLIB/src/stm32f4xx_usart.c ****   itmask = (uint32_t)0x01 << itmask;
 1288              		.loc 1 1396 0
 1289 000a 0123     		movs	r3, #1
 1290 000c A340     		lsls	r3, r3, r4
 1291              	.LVL133:
1397:./FWLIB/src/stm32f4xx_usart.c ****   
1398:./FWLIB/src/stm32f4xx_usart.c ****   if (usartreg == 0x01) /* The IT  is in CR1 register */
 1292              		.loc 1 1398 0
 1293 000e 012A     		cmp	r2, #1
 1294 0010 0DD0     		beq	.L110
1399:./FWLIB/src/stm32f4xx_usart.c ****   {
1400:./FWLIB/src/stm32f4xx_usart.c ****     itmask &= USARTx->CR1;
1401:./FWLIB/src/stm32f4xx_usart.c ****   }
1402:./FWLIB/src/stm32f4xx_usart.c ****   else if (usartreg == 0x02) /* The IT  is in CR2 register */
 1295              		.loc 1 1402 0
 1296 0012 022A     		cmp	r2, #2
 1297 0014 0ED0     		beq	.L111
1403:./FWLIB/src/stm32f4xx_usart.c ****   {
ARM GAS  /tmp/ccecLeJr.s 			page 48


1404:./FWLIB/src/stm32f4xx_usart.c ****     itmask &= USARTx->CR2;
1405:./FWLIB/src/stm32f4xx_usart.c ****   }
1406:./FWLIB/src/stm32f4xx_usart.c ****   else /* The IT  is in CR3 register */
1407:./FWLIB/src/stm32f4xx_usart.c ****   {
1408:./FWLIB/src/stm32f4xx_usart.c ****     itmask &= USARTx->CR3;
 1298              		.loc 1 1408 0
 1299 0016 828A     		ldrh	r2, [r0, #20]
 1300              	.LVL134:
 1301 0018 1340     		ands	r3, r3, r2
 1302              	.LVL135:
 1303              	.L104:
1409:./FWLIB/src/stm32f4xx_usart.c ****   }
1410:./FWLIB/src/stm32f4xx_usart.c ****   
1411:./FWLIB/src/stm32f4xx_usart.c ****   bitpos = USART_IT >> 0x08;
 1304              		.loc 1 1411 0
 1305 001a 090A     		lsrs	r1, r1, #8
 1306              	.LVL136:
1412:./FWLIB/src/stm32f4xx_usart.c ****   bitpos = (uint32_t)0x01 << bitpos;
 1307              		.loc 1 1412 0
 1308 001c 0122     		movs	r2, #1
 1309 001e 02FA01F1 		lsl	r1, r2, r1
 1310              	.LVL137:
1413:./FWLIB/src/stm32f4xx_usart.c ****   bitpos &= USARTx->SR;
 1311              		.loc 1 1413 0
 1312 0022 0288     		ldrh	r2, [r0]
 1313 0024 1140     		ands	r1, r1, r2
 1314              	.LVL138:
1414:./FWLIB/src/stm32f4xx_usart.c ****   if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 1315              		.loc 1 1414 0
 1316 0026 43B1     		cbz	r3, .L107
 1317              		.loc 1 1414 0 is_stmt 0 discriminator 1
 1318 0028 59B9     		cbnz	r1, .L108
1415:./FWLIB/src/stm32f4xx_usart.c ****   {
1416:./FWLIB/src/stm32f4xx_usart.c ****     bitstatus = SET;
1417:./FWLIB/src/stm32f4xx_usart.c ****   }
1418:./FWLIB/src/stm32f4xx_usart.c ****   else
1419:./FWLIB/src/stm32f4xx_usart.c ****   {
1420:./FWLIB/src/stm32f4xx_usart.c ****     bitstatus = RESET;
 1319              		.loc 1 1420 0 is_stmt 1
 1320 002a 0020     		movs	r0, #0
 1321              	.LVL139:
 1322 002c 06E0     		b	.L106
 1323              	.LVL140:
 1324              	.L110:
1400:./FWLIB/src/stm32f4xx_usart.c ****   }
 1325              		.loc 1 1400 0
 1326 002e 8289     		ldrh	r2, [r0, #12]
 1327              	.LVL141:
 1328 0030 1340     		ands	r3, r3, r2
 1329              	.LVL142:
 1330 0032 F2E7     		b	.L104
 1331              	.LVL143:
 1332              	.L111:
1404:./FWLIB/src/stm32f4xx_usart.c ****   }
 1333              		.loc 1 1404 0
 1334 0034 028A     		ldrh	r2, [r0, #16]
 1335              	.LVL144:
ARM GAS  /tmp/ccecLeJr.s 			page 49


 1336 0036 1340     		ands	r3, r3, r2
 1337              	.LVL145:
 1338 0038 EFE7     		b	.L104
 1339              	.LVL146:
 1340              	.L107:
 1341              		.loc 1 1420 0
 1342 003a 0020     		movs	r0, #0
 1343              	.LVL147:
 1344              	.L106:
1421:./FWLIB/src/stm32f4xx_usart.c ****   }
1422:./FWLIB/src/stm32f4xx_usart.c ****   
1423:./FWLIB/src/stm32f4xx_usart.c ****   return bitstatus;  
1424:./FWLIB/src/stm32f4xx_usart.c **** }
 1345              		.loc 1 1424 0
 1346 003c 5DF8044B 		ldr	r4, [sp], #4
 1347              	.LCFI11:
 1348              		.cfi_remember_state
 1349              		.cfi_restore 4
 1350              		.cfi_def_cfa_offset 0
 1351 0040 7047     		bx	lr
 1352              	.LVL148:
 1353              	.L108:
 1354              	.LCFI12:
 1355              		.cfi_restore_state
1416:./FWLIB/src/stm32f4xx_usart.c ****   }
 1356              		.loc 1 1416 0
 1357 0042 0120     		movs	r0, #1
 1358              	.LVL149:
 1359 0044 FAE7     		b	.L106
 1360              		.cfi_endproc
 1361              	.LFE139:
 1363              		.section	.text.USART_ClearITPendingBit,"ax",%progbits
 1364              		.align	1
 1365              		.global	USART_ClearITPendingBit
 1366              		.syntax unified
 1367              		.thumb
 1368              		.thumb_func
 1369              		.fpu fpv4-sp-d16
 1371              	USART_ClearITPendingBit:
 1372              	.LFB140:
1425:./FWLIB/src/stm32f4xx_usart.c **** 
1426:./FWLIB/src/stm32f4xx_usart.c **** /**
1427:./FWLIB/src/stm32f4xx_usart.c ****   * @brief  Clears the USARTx's interrupt pending bits.
1428:./FWLIB/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
1429:./FWLIB/src/stm32f4xx_usart.c ****   *         UART peripheral.
1430:./FWLIB/src/stm32f4xx_usart.c ****   * @param  USART_IT: specifies the interrupt pending bit to clear.
1431:./FWLIB/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1432:./FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt (not available for UART4 and UART5)
1433:./FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1434:./FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt. 
1435:./FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt.
1436:./FWLIB/src/stm32f4xx_usart.c ****   *
1437:./FWLIB/src/stm32f4xx_usart.c ****   * @note   PE (Parity error), FE (Framing error), NE (Noise error), ORE (OverRun 
1438:./FWLIB/src/stm32f4xx_usart.c ****   *          error) and IDLE (Idle line detected) pending bits are cleared by 
1439:./FWLIB/src/stm32f4xx_usart.c ****   *          software sequence: a read operation to USART_SR register 
1440:./FWLIB/src/stm32f4xx_usart.c ****   *          (USART_GetITStatus()) followed by a read operation to USART_DR register 
1441:./FWLIB/src/stm32f4xx_usart.c ****   *          (USART_ReceiveData()).
ARM GAS  /tmp/ccecLeJr.s 			page 50


1442:./FWLIB/src/stm32f4xx_usart.c ****   * @note   RXNE pending bit can be also cleared by a read to the USART_DR register 
1443:./FWLIB/src/stm32f4xx_usart.c ****   *          (USART_ReceiveData()).
1444:./FWLIB/src/stm32f4xx_usart.c ****   * @note   TC pending bit can be also cleared by software sequence: a read 
1445:./FWLIB/src/stm32f4xx_usart.c ****   *          operation to USART_SR register (USART_GetITStatus()) followed by a write 
1446:./FWLIB/src/stm32f4xx_usart.c ****   *          operation to USART_DR register (USART_SendData()).
1447:./FWLIB/src/stm32f4xx_usart.c ****   * @note   TXE pending bit is cleared only by a write to the USART_DR register 
1448:./FWLIB/src/stm32f4xx_usart.c ****   *          (USART_SendData()).
1449:./FWLIB/src/stm32f4xx_usart.c ****   *  
1450:./FWLIB/src/stm32f4xx_usart.c ****   * @retval None
1451:./FWLIB/src/stm32f4xx_usart.c ****   */
1452:./FWLIB/src/stm32f4xx_usart.c **** void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
1453:./FWLIB/src/stm32f4xx_usart.c **** {
 1373              		.loc 1 1453 0
 1374              		.cfi_startproc
 1375              		@ args = 0, pretend = 0, frame = 0
 1376              		@ frame_needed = 0, uses_anonymous_args = 0
 1377              		@ link register save eliminated.
 1378              	.LVL150:
1454:./FWLIB/src/stm32f4xx_usart.c ****   uint16_t bitpos = 0x00, itmask = 0x00;
1455:./FWLIB/src/stm32f4xx_usart.c ****   /* Check the parameters */
1456:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1457:./FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CLEAR_IT(USART_IT)); 
1458:./FWLIB/src/stm32f4xx_usart.c **** 
1459:./FWLIB/src/stm32f4xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */
1460:./FWLIB/src/stm32f4xx_usart.c ****   if (USART_IT == USART_IT_CTS)
1461:./FWLIB/src/stm32f4xx_usart.c ****   {
1462:./FWLIB/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1463:./FWLIB/src/stm32f4xx_usart.c ****   } 
1464:./FWLIB/src/stm32f4xx_usart.c ****     
1465:./FWLIB/src/stm32f4xx_usart.c ****   bitpos = USART_IT >> 0x08;
 1379              		.loc 1 1465 0
 1380 0000 090A     		lsrs	r1, r1, #8
 1381              	.LVL151:
1466:./FWLIB/src/stm32f4xx_usart.c ****   itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 1382              		.loc 1 1466 0
 1383 0002 0123     		movs	r3, #1
 1384 0004 8B40     		lsls	r3, r3, r1
 1385 0006 9BB2     		uxth	r3, r3
 1386              	.LVL152:
1467:./FWLIB/src/stm32f4xx_usart.c ****   USARTx->SR = (uint16_t)~itmask;
 1387              		.loc 1 1467 0
 1388 0008 DB43     		mvns	r3, r3
 1389              	.LVL153:
 1390 000a 9BB2     		uxth	r3, r3
 1391              	.LVL154:
 1392 000c 0380     		strh	r3, [r0]	@ movhi
1468:./FWLIB/src/stm32f4xx_usart.c **** }
 1393              		.loc 1 1468 0
 1394 000e 7047     		bx	lr
 1395              		.cfi_endproc
 1396              	.LFE140:
 1398              		.text
 1399              	.Letext0:
 1400              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1401              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1402              		.file 4 "build/lnInclude/core_cm4.h"
 1403              		.file 5 "build/lnInclude/system_stm32f4xx.h"
ARM GAS  /tmp/ccecLeJr.s 			page 51


 1404              		.file 6 "build/lnInclude/stm32f4xx.h"
 1405              		.file 7 "build/lnInclude/stm32f4xx_rcc.h"
 1406              		.file 8 "build/lnInclude/stm32f4xx_usart.h"
ARM GAS  /tmp/ccecLeJr.s 			page 52


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_usart.c
     /tmp/ccecLeJr.s:18     .text.USART_DeInit:0000000000000000 $t
     /tmp/ccecLeJr.s:25     .text.USART_DeInit:0000000000000000 USART_DeInit
     /tmp/ccecLeJr.s:190    .text.USART_DeInit:00000000000000dc $d
     /tmp/ccecLeJr.s:202    .text.USART_Init:0000000000000000 $t
     /tmp/ccecLeJr.s:209    .text.USART_Init:0000000000000000 USART_Init
     /tmp/ccecLeJr.s:380    .text.USART_Init:00000000000000c8 $d
     /tmp/ccecLeJr.s:386    .text.USART_StructInit:0000000000000000 $t
     /tmp/ccecLeJr.s:393    .text.USART_StructInit:0000000000000000 USART_StructInit
     /tmp/ccecLeJr.s:422    .text.USART_ClockInit:0000000000000000 $t
     /tmp/ccecLeJr.s:429    .text.USART_ClockInit:0000000000000000 USART_ClockInit
     /tmp/ccecLeJr.s:478    .text.USART_ClockStructInit:0000000000000000 $t
     /tmp/ccecLeJr.s:485    .text.USART_ClockStructInit:0000000000000000 USART_ClockStructInit
     /tmp/ccecLeJr.s:508    .text.USART_Cmd:0000000000000000 $t
     /tmp/ccecLeJr.s:515    .text.USART_Cmd:0000000000000000 USART_Cmd
     /tmp/ccecLeJr.s:543    .text.USART_SetPrescaler:0000000000000000 $t
     /tmp/ccecLeJr.s:550    .text.USART_SetPrescaler:0000000000000000 USART_SetPrescaler
     /tmp/ccecLeJr.s:573    .text.USART_OverSampling8Cmd:0000000000000000 $t
     /tmp/ccecLeJr.s:580    .text.USART_OverSampling8Cmd:0000000000000000 USART_OverSampling8Cmd
     /tmp/ccecLeJr.s:606    .text.USART_OneBitMethodCmd:0000000000000000 $t
     /tmp/ccecLeJr.s:613    .text.USART_OneBitMethodCmd:0000000000000000 USART_OneBitMethodCmd
     /tmp/ccecLeJr.s:641    .text.USART_SendData:0000000000000000 $t
     /tmp/ccecLeJr.s:648    .text.USART_SendData:0000000000000000 USART_SendData
     /tmp/ccecLeJr.s:666    .text.USART_ReceiveData:0000000000000000 $t
     /tmp/ccecLeJr.s:673    .text.USART_ReceiveData:0000000000000000 USART_ReceiveData
     /tmp/ccecLeJr.s:691    .text.USART_SetAddress:0000000000000000 $t
     /tmp/ccecLeJr.s:698    .text.USART_SetAddress:0000000000000000 USART_SetAddress
     /tmp/ccecLeJr.s:723    .text.USART_ReceiverWakeUpCmd:0000000000000000 $t
     /tmp/ccecLeJr.s:730    .text.USART_ReceiverWakeUpCmd:0000000000000000 USART_ReceiverWakeUpCmd
     /tmp/ccecLeJr.s:758    .text.USART_WakeUpConfig:0000000000000000 $t
     /tmp/ccecLeJr.s:765    .text.USART_WakeUpConfig:0000000000000000 USART_WakeUpConfig
     /tmp/ccecLeJr.s:790    .text.USART_LINBreakDetectLengthConfig:0000000000000000 $t
     /tmp/ccecLeJr.s:797    .text.USART_LINBreakDetectLengthConfig:0000000000000000 USART_LINBreakDetectLengthConfig
     /tmp/ccecLeJr.s:822    .text.USART_LINCmd:0000000000000000 $t
     /tmp/ccecLeJr.s:829    .text.USART_LINCmd:0000000000000000 USART_LINCmd
     /tmp/ccecLeJr.s:857    .text.USART_SendBreak:0000000000000000 $t
     /tmp/ccecLeJr.s:864    .text.USART_SendBreak:0000000000000000 USART_SendBreak
     /tmp/ccecLeJr.s:882    .text.USART_HalfDuplexCmd:0000000000000000 $t
     /tmp/ccecLeJr.s:889    .text.USART_HalfDuplexCmd:0000000000000000 USART_HalfDuplexCmd
     /tmp/ccecLeJr.s:917    .text.USART_SetGuardTime:0000000000000000 $t
     /tmp/ccecLeJr.s:924    .text.USART_SetGuardTime:0000000000000000 USART_SetGuardTime
     /tmp/ccecLeJr.s:947    .text.USART_SmartCardCmd:0000000000000000 $t
     /tmp/ccecLeJr.s:954    .text.USART_SmartCardCmd:0000000000000000 USART_SmartCardCmd
     /tmp/ccecLeJr.s:982    .text.USART_SmartCardNACKCmd:0000000000000000 $t
     /tmp/ccecLeJr.s:989    .text.USART_SmartCardNACKCmd:0000000000000000 USART_SmartCardNACKCmd
     /tmp/ccecLeJr.s:1017   .text.USART_IrDAConfig:0000000000000000 $t
     /tmp/ccecLeJr.s:1024   .text.USART_IrDAConfig:0000000000000000 USART_IrDAConfig
     /tmp/ccecLeJr.s:1049   .text.USART_IrDACmd:0000000000000000 $t
     /tmp/ccecLeJr.s:1056   .text.USART_IrDACmd:0000000000000000 USART_IrDACmd
     /tmp/ccecLeJr.s:1084   .text.USART_DMACmd:0000000000000000 $t
     /tmp/ccecLeJr.s:1091   .text.USART_DMACmd:0000000000000000 USART_DMACmd
     /tmp/ccecLeJr.s:1120   .text.USART_ITConfig:0000000000000000 $t
     /tmp/ccecLeJr.s:1127   .text.USART_ITConfig:0000000000000000 USART_ITConfig
     /tmp/ccecLeJr.s:1202   .text.USART_GetFlagStatus:0000000000000000 $t
     /tmp/ccecLeJr.s:1209   .text.USART_GetFlagStatus:0000000000000000 USART_GetFlagStatus
     /tmp/ccecLeJr.s:1236   .text.USART_ClearFlag:0000000000000000 $t
ARM GAS  /tmp/ccecLeJr.s 			page 53


     /tmp/ccecLeJr.s:1243   .text.USART_ClearFlag:0000000000000000 USART_ClearFlag
     /tmp/ccecLeJr.s:1262   .text.USART_GetITStatus:0000000000000000 $t
     /tmp/ccecLeJr.s:1269   .text.USART_GetITStatus:0000000000000000 USART_GetITStatus
     /tmp/ccecLeJr.s:1364   .text.USART_ClearITPendingBit:0000000000000000 $t
     /tmp/ccecLeJr.s:1371   .text.USART_ClearITPendingBit:0000000000000000 USART_ClearITPendingBit

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
RCC_APB1PeriphResetCmd
RCC_GetClocksFreq
