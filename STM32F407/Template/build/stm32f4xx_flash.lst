ARM GAS  /tmp/ccBmD3SR.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_flash.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.FLASH_SetLatency,"ax",%progbits
  18              		.align	1
  19              		.global	FLASH_SetLatency
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	FLASH_SetLatency:
  26              	.LFB112:
  27              		.file 1 "./FWLIB/src/stm32f4xx_flash.c"
   1:./FWLIB/src/stm32f4xx_flash.c **** /**
   2:./FWLIB/src/stm32f4xx_flash.c ****   ******************************************************************************
   3:./FWLIB/src/stm32f4xx_flash.c ****   * @file    stm32f4xx_flash.c
   4:./FWLIB/src/stm32f4xx_flash.c ****   * @author  MCD Application Team
   5:./FWLIB/src/stm32f4xx_flash.c ****   * @version V1.4.0
   6:./FWLIB/src/stm32f4xx_flash.c ****   * @date    04-August-2014
   7:./FWLIB/src/stm32f4xx_flash.c ****   * @brief   This file provides firmware functions to manage the following 
   8:./FWLIB/src/stm32f4xx_flash.c ****   *          functionalities of the FLASH peripheral:
   9:./FWLIB/src/stm32f4xx_flash.c ****   *            + FLASH Interface configuration
  10:./FWLIB/src/stm32f4xx_flash.c ****   *            + FLASH Memory Programming
  11:./FWLIB/src/stm32f4xx_flash.c ****   *            + Option Bytes Programming
  12:./FWLIB/src/stm32f4xx_flash.c ****   *            + Interrupts and flags management
  13:./FWLIB/src/stm32f4xx_flash.c ****   *  
  14:./FWLIB/src/stm32f4xx_flash.c ****  @verbatim    
  15:./FWLIB/src/stm32f4xx_flash.c ****  ===============================================================================
  16:./FWLIB/src/stm32f4xx_flash.c ****                         ##### How to use this driver #####
  17:./FWLIB/src/stm32f4xx_flash.c ****  ===============================================================================
  18:./FWLIB/src/stm32f4xx_flash.c ****     [..]                             
  19:./FWLIB/src/stm32f4xx_flash.c ****       This driver provides functions to configure and program the FLASH memory 
  20:./FWLIB/src/stm32f4xx_flash.c ****       of all STM32F4xx devices. These functions are split in 4 groups:
  21:./FWLIB/src/stm32f4xx_flash.c ****    
  22:./FWLIB/src/stm32f4xx_flash.c ****       (#) FLASH Interface configuration functions: this group includes the
  23:./FWLIB/src/stm32f4xx_flash.c ****           management of the following features:
  24:./FWLIB/src/stm32f4xx_flash.c ****         (++) Set the latency
  25:./FWLIB/src/stm32f4xx_flash.c ****         (++) Enable/Disable the prefetch buffer
  26:./FWLIB/src/stm32f4xx_flash.c ****         (++) Enable/Disable the Instruction cache and the Data cache
  27:./FWLIB/src/stm32f4xx_flash.c ****         (++) Reset the Instruction cache and the Data cache
  28:./FWLIB/src/stm32f4xx_flash.c ****     
  29:./FWLIB/src/stm32f4xx_flash.c ****       (#) FLASH Memory Programming functions: this group includes all needed
  30:./FWLIB/src/stm32f4xx_flash.c ****           functions to erase and program the main memory:
  31:./FWLIB/src/stm32f4xx_flash.c ****         (++) Lock and Unlock the FLASH interface
ARM GAS  /tmp/ccBmD3SR.s 			page 2


  32:./FWLIB/src/stm32f4xx_flash.c ****         (++) Erase function: Erase sector, erase all sectors
  33:./FWLIB/src/stm32f4xx_flash.c ****         (++) Program functions: byte, half word, word and double word
  34:./FWLIB/src/stm32f4xx_flash.c ****     
  35:./FWLIB/src/stm32f4xx_flash.c ****       (#) Option Bytes Programming functions: this group includes all needed
  36:./FWLIB/src/stm32f4xx_flash.c ****           functions to manage the Option Bytes:
  37:./FWLIB/src/stm32f4xx_flash.c ****         (++) Set/Reset the write protection
  38:./FWLIB/src/stm32f4xx_flash.c ****         (++) Set the Read protection Level
  39:./FWLIB/src/stm32f4xx_flash.c ****         (++) Set the BOR level
  40:./FWLIB/src/stm32f4xx_flash.c ****         (++) Program the user Option Bytes
  41:./FWLIB/src/stm32f4xx_flash.c ****         (++) Launch the Option Bytes loader
  42:./FWLIB/src/stm32f4xx_flash.c ****     
  43:./FWLIB/src/stm32f4xx_flash.c ****       (#) Interrupts and flags management functions: this group 
  44:./FWLIB/src/stm32f4xx_flash.c ****           includes all needed functions to:
  45:./FWLIB/src/stm32f4xx_flash.c ****         (++) Enable/Disable the FLASH interrupt sources
  46:./FWLIB/src/stm32f4xx_flash.c ****         (++) Get flags status
  47:./FWLIB/src/stm32f4xx_flash.c ****         (++) Clear flags
  48:./FWLIB/src/stm32f4xx_flash.c ****         (++) Get FLASH operation status
  49:./FWLIB/src/stm32f4xx_flash.c ****         (++) Wait for last FLASH operation   
  50:./FWLIB/src/stm32f4xx_flash.c ****  @endverbatim
  51:./FWLIB/src/stm32f4xx_flash.c ****   ******************************************************************************
  52:./FWLIB/src/stm32f4xx_flash.c ****   * @attention
  53:./FWLIB/src/stm32f4xx_flash.c ****   *
  54:./FWLIB/src/stm32f4xx_flash.c ****   * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
  55:./FWLIB/src/stm32f4xx_flash.c ****   *
  56:./FWLIB/src/stm32f4xx_flash.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  57:./FWLIB/src/stm32f4xx_flash.c ****   * You may not use this file except in compliance with the License.
  58:./FWLIB/src/stm32f4xx_flash.c ****   * You may obtain a copy of the License at:
  59:./FWLIB/src/stm32f4xx_flash.c ****   *
  60:./FWLIB/src/stm32f4xx_flash.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  61:./FWLIB/src/stm32f4xx_flash.c ****   *
  62:./FWLIB/src/stm32f4xx_flash.c ****   * Unless required by applicable law or agreed to in writing, software 
  63:./FWLIB/src/stm32f4xx_flash.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  64:./FWLIB/src/stm32f4xx_flash.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  65:./FWLIB/src/stm32f4xx_flash.c ****   * See the License for the specific language governing permissions and
  66:./FWLIB/src/stm32f4xx_flash.c ****   * limitations under the License.
  67:./FWLIB/src/stm32f4xx_flash.c ****   *
  68:./FWLIB/src/stm32f4xx_flash.c ****   ******************************************************************************
  69:./FWLIB/src/stm32f4xx_flash.c ****   */
  70:./FWLIB/src/stm32f4xx_flash.c **** 
  71:./FWLIB/src/stm32f4xx_flash.c **** /* Includes ------------------------------------------------------------------*/
  72:./FWLIB/src/stm32f4xx_flash.c **** #include "stm32f4xx_flash.h"
  73:./FWLIB/src/stm32f4xx_flash.c **** 
  74:./FWLIB/src/stm32f4xx_flash.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  75:./FWLIB/src/stm32f4xx_flash.c ****   * @{
  76:./FWLIB/src/stm32f4xx_flash.c ****   */
  77:./FWLIB/src/stm32f4xx_flash.c **** 
  78:./FWLIB/src/stm32f4xx_flash.c **** /** @defgroup FLASH 
  79:./FWLIB/src/stm32f4xx_flash.c ****   * @brief FLASH driver modules
  80:./FWLIB/src/stm32f4xx_flash.c ****   * @{
  81:./FWLIB/src/stm32f4xx_flash.c ****   */ 
  82:./FWLIB/src/stm32f4xx_flash.c **** 
  83:./FWLIB/src/stm32f4xx_flash.c **** /* Private typedef -----------------------------------------------------------*/
  84:./FWLIB/src/stm32f4xx_flash.c **** /* Private define ------------------------------------------------------------*/ 
  85:./FWLIB/src/stm32f4xx_flash.c **** #define SECTOR_MASK               ((uint32_t)0xFFFFFF07)
  86:./FWLIB/src/stm32f4xx_flash.c **** 
  87:./FWLIB/src/stm32f4xx_flash.c **** /* Private macro -------------------------------------------------------------*/
  88:./FWLIB/src/stm32f4xx_flash.c **** /* Private variables ---------------------------------------------------------*/
ARM GAS  /tmp/ccBmD3SR.s 			page 3


  89:./FWLIB/src/stm32f4xx_flash.c **** /* Private function prototypes -----------------------------------------------*/
  90:./FWLIB/src/stm32f4xx_flash.c **** /* Private functions ---------------------------------------------------------*/
  91:./FWLIB/src/stm32f4xx_flash.c **** 
  92:./FWLIB/src/stm32f4xx_flash.c **** /** @defgroup FLASH_Private_Functions
  93:./FWLIB/src/stm32f4xx_flash.c ****   * @{
  94:./FWLIB/src/stm32f4xx_flash.c ****   */ 
  95:./FWLIB/src/stm32f4xx_flash.c **** 
  96:./FWLIB/src/stm32f4xx_flash.c **** /** @defgroup FLASH_Group1 FLASH Interface configuration functions
  97:./FWLIB/src/stm32f4xx_flash.c ****   *  @brief   FLASH Interface configuration functions 
  98:./FWLIB/src/stm32f4xx_flash.c ****  *
  99:./FWLIB/src/stm32f4xx_flash.c **** 
 100:./FWLIB/src/stm32f4xx_flash.c **** @verbatim   
 101:./FWLIB/src/stm32f4xx_flash.c ****  ===============================================================================
 102:./FWLIB/src/stm32f4xx_flash.c ****               ##### FLASH Interface configuration functions #####
 103:./FWLIB/src/stm32f4xx_flash.c ****  ===============================================================================
 104:./FWLIB/src/stm32f4xx_flash.c ****     [..]
 105:./FWLIB/src/stm32f4xx_flash.c ****       This group includes the following functions:
 106:./FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_SetLatency(uint32_t FLASH_Latency)
 107:./FWLIB/src/stm32f4xx_flash.c ****           To correctly read data from FLASH memory, the number of wait states (LATENCY) 
 108:./FWLIB/src/stm32f4xx_flash.c ****           must be correctly programmed according to the frequency of the CPU clock 
 109:./FWLIB/src/stm32f4xx_flash.c ****           (HCLK) and the supply voltage of the device.
 110:./FWLIB/src/stm32f4xx_flash.c ****     [..]      
 111:./FWLIB/src/stm32f4xx_flash.c ****       For STM32F405xx/07xx and STM32F415xx/17xx devices
 112:./FWLIB/src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------+
 113:./FWLIB/src/stm32f4xx_flash.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 114:./FWLIB/src/stm32f4xx_flash.c ****  |               |---------------------------------------------------------------------|
 115:./FWLIB/src/stm32f4xx_flash.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 116:./FWLIB/src/stm32f4xx_flash.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 117:./FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 118:./FWLIB/src/stm32f4xx_flash.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 22   |0 < HCLK <= 20   |
 119:./FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 120:./FWLIB/src/stm32f4xx_flash.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |22 < HCLK <= 44  |20 < HCLK <= 40  |
 121:./FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 122:./FWLIB/src/stm32f4xx_flash.c ****  |2WS(3CPU cycle)|60 < HCLK <= 90 |48 < HCLK <= 72 |44 < HCLK <= 66  |40 < HCLK <= 60  |
 123:./FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 124:./FWLIB/src/stm32f4xx_flash.c ****  |3WS(4CPU cycle)|90 < HCLK <= 120|72 < HCLK <= 96 |66 < HCLK <= 88  |60 < HCLK <= 80  |
 125:./FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 126:./FWLIB/src/stm32f4xx_flash.c ****  |4WS(5CPU cycle)|120< HCLK <= 150|96 < HCLK <= 120|88 < HCLK <= 110 |80 < HCLK <= 100 |
 127:./FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 128:./FWLIB/src/stm32f4xx_flash.c ****  |5WS(6CPU cycle)|150< HCLK <= 168|120< HCLK <= 144|110 < HCLK <= 132|100 < HCLK <= 120|
 129:./FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 130:./FWLIB/src/stm32f4xx_flash.c ****  |6WS(7CPU cycle)|      NA        |144< HCLK <= 168|132 < HCLK <= 154|120 < HCLK <= 140|
 131:./FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 132:./FWLIB/src/stm32f4xx_flash.c ****  |7WS(8CPU cycle)|      NA        |      NA        |154 < HCLK <= 168|140 < HCLK <= 160|
 133:./FWLIB/src/stm32f4xx_flash.c ****  +---------------|----------------|----------------|-----------------|-----------------+
 134:./FWLIB/src/stm32f4xx_flash.c **** 
 135:./FWLIB/src/stm32f4xx_flash.c ****     [..]      
 136:./FWLIB/src/stm32f4xx_flash.c ****       For STM32F42xxx/43xxx devices
 137:./FWLIB/src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------+
 138:./FWLIB/src/stm32f4xx_flash.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 139:./FWLIB/src/stm32f4xx_flash.c ****  |               |---------------------------------------------------------------------|
 140:./FWLIB/src/stm32f4xx_flash.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 141:./FWLIB/src/stm32f4xx_flash.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 142:./FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 143:./FWLIB/src/stm32f4xx_flash.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 22   |0 < HCLK <= 20   |
 144:./FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 145:./FWLIB/src/stm32f4xx_flash.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |22 < HCLK <= 44  |20 < HCLK <= 40  |
ARM GAS  /tmp/ccBmD3SR.s 			page 4


 146:./FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 147:./FWLIB/src/stm32f4xx_flash.c ****  |2WS(3CPU cycle)|60 < HCLK <= 90 |48 < HCLK <= 72 |44 < HCLK <= 66  |40 < HCLK <= 60  |
 148:./FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 149:./FWLIB/src/stm32f4xx_flash.c ****  |3WS(4CPU cycle)|90 < HCLK <= 120|72 < HCLK <= 96 |66 < HCLK <= 88  |60 < HCLK <= 80  |
 150:./FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 151:./FWLIB/src/stm32f4xx_flash.c ****  |4WS(5CPU cycle)|120< HCLK <= 150|96 < HCLK <= 120|88 < HCLK <= 110 |80 < HCLK <= 100 |
 152:./FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 153:./FWLIB/src/stm32f4xx_flash.c ****  |5WS(6CPU cycle)|120< HCLK <= 180|120< HCLK <= 144|110 < HCLK <= 132|100 < HCLK <= 120|
 154:./FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 155:./FWLIB/src/stm32f4xx_flash.c ****  |6WS(7CPU cycle)|      NA        |144< HCLK <= 168|132 < HCLK <= 154|120 < HCLK <= 140|
 156:./FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 157:./FWLIB/src/stm32f4xx_flash.c ****  |7WS(8CPU cycle)|      NA        |168< HCLK <= 180|154 < HCLK <= 176|140 < HCLK <= 160|
 158:./FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 159:./FWLIB/src/stm32f4xx_flash.c ****  |8WS(9CPU cycle)|      NA        |      NA        |176 < HCLK <= 180|160 < HCLK <= 168|
 160:./FWLIB/src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------+
 161:./FWLIB/src/stm32f4xx_flash.c ****    
 162:./FWLIB/src/stm32f4xx_flash.c ****     [..]
 163:./FWLIB/src/stm32f4xx_flash.c ****     For STM32F401x devices
 164:./FWLIB/src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------+
 165:./FWLIB/src/stm32f4xx_flash.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 166:./FWLIB/src/stm32f4xx_flash.c ****  |               |---------------------------------------------------------------------|
 167:./FWLIB/src/stm32f4xx_flash.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 168:./FWLIB/src/stm32f4xx_flash.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 169:./FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 170:./FWLIB/src/stm32f4xx_flash.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 22   |0 < HCLK <= 20   |
 171:./FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 172:./FWLIB/src/stm32f4xx_flash.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |22 < HCLK <= 44  |20 < HCLK <= 40  |
 173:./FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 174:./FWLIB/src/stm32f4xx_flash.c ****  |2WS(3CPU cycle)|60 < HCLK <= 84 |48 < HCLK <= 72 |44 < HCLK <= 66  |40 < HCLK <= 60  |
 175:./FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 176:./FWLIB/src/stm32f4xx_flash.c ****  |3WS(4CPU cycle)|      NA        |72 < HCLK <= 84 |66 < HCLK <= 84  |60 < HCLK <= 80  |
 177:./FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 178:./FWLIB/src/stm32f4xx_flash.c ****  |4WS(5CPU cycle)|      NA        |      NA        |      NA         |80 < HCLK <= 84  |
 179:./FWLIB/src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------+
 180:./FWLIB/src/stm32f4xx_flash.c **** 
 181:./FWLIB/src/stm32f4xx_flash.c ****     [..]
 182:./FWLIB/src/stm32f4xx_flash.c ****     For STM32F411xE devices
 183:./FWLIB/src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------+
 184:./FWLIB/src/stm32f4xx_flash.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 185:./FWLIB/src/stm32f4xx_flash.c ****  |               |---------------------------------------------------------------------|
 186:./FWLIB/src/stm32f4xx_flash.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 187:./FWLIB/src/stm32f4xx_flash.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 188:./FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 189:./FWLIB/src/stm32f4xx_flash.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 18   |0 < HCLK <= 16   |
 190:./FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 191:./FWLIB/src/stm32f4xx_flash.c ****  |1WS(2CPU cycle)|30 < HCLK <= 64 |24 < HCLK <= 48 |18 < HCLK <= 36  |16 < HCLK <= 32  |
 192:./FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 193:./FWLIB/src/stm32f4xx_flash.c ****  |2WS(3CPU cycle)|64 < HCLK <= 90 |48 < HCLK <= 72 |36 < HCLK <= 54  |32 < HCLK <= 48  |
 194:./FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 195:./FWLIB/src/stm32f4xx_flash.c ****  |3WS(4CPU cycle)|90 < HCLK <= 100|72 < HCLK <= 96 |54 < HCLK <= 72  |48 < HCLK <= 64  |
 196:./FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 197:./FWLIB/src/stm32f4xx_flash.c ****  |4WS(5CPU cycle)|      NA        |96 < HCLK <= 100|72 < HCLK <= 90  |64 < HCLK <= 80  |
 198:./FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 199:./FWLIB/src/stm32f4xx_flash.c ****  |5WS(6CPU cycle)|      NA        |       NA       |90 < HCLK <= 100 |80 < HCLK <= 96  |
 200:./FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 201:./FWLIB/src/stm32f4xx_flash.c ****  |6WS(7CPU cycle)|      NA        |       NA       |        NA       |96 < HCLK <= 100 |
 202:./FWLIB/src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------+
ARM GAS  /tmp/ccBmD3SR.s 			page 5


 203:./FWLIB/src/stm32f4xx_flash.c ****  
 204:./FWLIB/src/stm32f4xx_flash.c ****  [..]
 205:./FWLIB/src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------------------
 206:./FWLIB/src/stm32f4xx_flash.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   | voltage ra
 207:./FWLIB/src/stm32f4xx_flash.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   | with Exter
 208:./FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|-----------
 209:./FWLIB/src/stm32f4xx_flash.c ****  |Max Parallelism|      x32       |               x16                |       x8        |          x
 210:./FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|-----------
 211:./FWLIB/src/stm32f4xx_flash.c ****  |PSIZE[1:0]     |      10        |               01                 |       00        |           
 212:./FWLIB/src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------------------
 213:./FWLIB/src/stm32f4xx_flash.c **** 
 214:./FWLIB/src/stm32f4xx_flash.c ****       -@- On STM32F405xx/407xx and STM32F415xx/417xx devices: 
 215:./FWLIB/src/stm32f4xx_flash.c ****            (++) when VOS = '0' Scale 2 mode, the maximum value of fHCLK = 144MHz. 
 216:./FWLIB/src/stm32f4xx_flash.c ****            (++) when VOS = '1' Scale 1 mode, the maximum value of fHCLK = 168MHz. 
 217:./FWLIB/src/stm32f4xx_flash.c ****           [..] 
 218:./FWLIB/src/stm32f4xx_flash.c ****           On STM32F42xxx/43xxx devices:
 219:./FWLIB/src/stm32f4xx_flash.c ****            (++) when VOS[1:0] = '0x01' Scale 3 mode, the maximum value of fHCLK is 120MHz.
 220:./FWLIB/src/stm32f4xx_flash.c ****            (++) when VOS[1:0] = '0x10' Scale 2 mode, the maximum value of fHCLK is 144MHz if OverDr
 221:./FWLIB/src/stm32f4xx_flash.c ****            (++) when VOS[1:0] = '0x11' Scale 1 mode, the maximum value of fHCLK is 168MHz if OverDr
 222:./FWLIB/src/stm32f4xx_flash.c ****           [..]
 223:./FWLIB/src/stm32f4xx_flash.c ****           On STM32F401x devices:
 224:./FWLIB/src/stm32f4xx_flash.c ****            (++) when VOS[1:0] = '0x01' Scale 3 mode, the maximum value of fHCLK is 60MHz.
 225:./FWLIB/src/stm32f4xx_flash.c ****            (++) when VOS[1:0] = '0x10' Scale 2 mode, the maximum value of fHCLK is 84MHz.
 226:./FWLIB/src/stm32f4xx_flash.c ****           [..]  
 227:./FWLIB/src/stm32f4xx_flash.c ****           On STM32F411xE devices:
 228:./FWLIB/src/stm32f4xx_flash.c ****            (++) when VOS[1:0] = '0x01' Scale 3 mode, the maximum value of fHCLK is 64MHz.
 229:./FWLIB/src/stm32f4xx_flash.c ****            (++) when VOS[1:0] = '0x10' Scale 2 mode, the maximum value of fHCLK is 84MHz.
 230:./FWLIB/src/stm32f4xx_flash.c ****            (++) when VOS[1:0] = '0x11' Scale 1 mode, the maximum value of fHCLK is 100MHz.
 231:./FWLIB/src/stm32f4xx_flash.c **** 
 232:./FWLIB/src/stm32f4xx_flash.c ****         For more details please refer product DataSheet 
 233:./FWLIB/src/stm32f4xx_flash.c ****            You can use PWR_MainRegulatorModeConfig() function to control VOS bits.
 234:./FWLIB/src/stm32f4xx_flash.c **** 
 235:./FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_PrefetchBufferCmd(FunctionalState NewState)
 236:./FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_InstructionCacheCmd(FunctionalState NewState)
 237:./FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_DataCacheCmd(FunctionalState NewState)
 238:./FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_InstructionCacheReset(void)
 239:./FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_DataCacheReset(void)
 240:./FWLIB/src/stm32f4xx_flash.c ****       
 241:./FWLIB/src/stm32f4xx_flash.c ****     [..]   
 242:./FWLIB/src/stm32f4xx_flash.c ****       The unlock sequence is not needed for these functions.
 243:./FWLIB/src/stm32f4xx_flash.c ****  
 244:./FWLIB/src/stm32f4xx_flash.c **** @endverbatim
 245:./FWLIB/src/stm32f4xx_flash.c ****   * @{
 246:./FWLIB/src/stm32f4xx_flash.c ****   */
 247:./FWLIB/src/stm32f4xx_flash.c ****  
 248:./FWLIB/src/stm32f4xx_flash.c **** /**
 249:./FWLIB/src/stm32f4xx_flash.c ****   * @brief  Sets the code latency value.  
 250:./FWLIB/src/stm32f4xx_flash.c ****   * @param  FLASH_Latency: specifies the FLASH Latency value.
 251:./FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
 252:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_0: FLASH Zero Latency cycle
 253:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_1: FLASH One Latency cycle
 254:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_2: FLASH Two Latency cycles
 255:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_3: FLASH Three Latency cycles
 256:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_4: FLASH Four Latency cycles 
 257:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_5: FLASH Five Latency cycles 
 258:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_6: FLASH Six Latency cycles
 259:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_7: FLASH Seven Latency cycles 
ARM GAS  /tmp/ccBmD3SR.s 			page 6


 260:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_8: FLASH Eight Latency cycles
 261:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_9: FLASH Nine Latency cycles
 262:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_10: FLASH Teen Latency cycles 
 263:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_11: FLASH Eleven Latency cycles 
 264:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_12: FLASH Twelve Latency cycles
 265:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_13: FLASH Thirteen Latency cycles
 266:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_14: FLASH Fourteen Latency cycles
 267:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_15: FLASH Fifteen Latency cycles 
 268:./FWLIB/src/stm32f4xx_flash.c ****   *              
 269:./FWLIB/src/stm32f4xx_flash.c ****   * @note For STM32F405xx/407xx, STM32F415xx/417xx and STM32F401xx/411xE devices this parameter
 270:./FWLIB/src/stm32f4xx_flash.c ****   *       can be a value between FLASH_Latency_0 and FLASH_Latency_7.
 271:./FWLIB/src/stm32f4xx_flash.c ****   *
 272:./FWLIB/src/stm32f4xx_flash.c ****   * @note For STM32F42xxx/43xxx devices this parameter can be a value between 
 273:./FWLIB/src/stm32f4xx_flash.c ****   *       FLASH_Latency_0 and FLASH_Latency_15. 
 274:./FWLIB/src/stm32f4xx_flash.c ****   *         
 275:./FWLIB/src/stm32f4xx_flash.c ****   * @retval None
 276:./FWLIB/src/stm32f4xx_flash.c ****   */
 277:./FWLIB/src/stm32f4xx_flash.c **** void FLASH_SetLatency(uint32_t FLASH_Latency)
 278:./FWLIB/src/stm32f4xx_flash.c **** {
  28              		.loc 1 278 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
 279:./FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
 280:./FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_LATENCY(FLASH_Latency));
 281:./FWLIB/src/stm32f4xx_flash.c ****   
 282:./FWLIB/src/stm32f4xx_flash.c ****   /* Perform Byte access to FLASH_ACR[8:0] to set the Latency value */
 283:./FWLIB/src/stm32f4xx_flash.c ****   *(__IO uint8_t *)ACR_BYTE0_ADDRESS = (uint8_t)FLASH_Latency;
  34              		.loc 1 283 0
  35 0000 C0B2     		uxtb	r0, r0
  36              	.LVL1:
  37 0002 014B     		ldr	r3, .L2
  38 0004 1870     		strb	r0, [r3]
 284:./FWLIB/src/stm32f4xx_flash.c **** }
  39              		.loc 1 284 0
  40 0006 7047     		bx	lr
  41              	.L3:
  42              		.align	2
  43              	.L2:
  44 0008 003C0240 		.word	1073888256
  45              		.cfi_endproc
  46              	.LFE112:
  48              		.section	.text.FLASH_PrefetchBufferCmd,"ax",%progbits
  49              		.align	1
  50              		.global	FLASH_PrefetchBufferCmd
  51              		.syntax unified
  52              		.thumb
  53              		.thumb_func
  54              		.fpu fpv4-sp-d16
  56              	FLASH_PrefetchBufferCmd:
  57              	.LFB113:
 285:./FWLIB/src/stm32f4xx_flash.c **** 
 286:./FWLIB/src/stm32f4xx_flash.c **** /**
 287:./FWLIB/src/stm32f4xx_flash.c ****   * @brief  Enables or disables the Prefetch Buffer.
 288:./FWLIB/src/stm32f4xx_flash.c ****   * @param  NewState: new state of the Prefetch Buffer.
ARM GAS  /tmp/ccBmD3SR.s 			page 7


 289:./FWLIB/src/stm32f4xx_flash.c ****   *          This parameter  can be: ENABLE or DISABLE.
 290:./FWLIB/src/stm32f4xx_flash.c ****   * @retval None
 291:./FWLIB/src/stm32f4xx_flash.c ****   */
 292:./FWLIB/src/stm32f4xx_flash.c **** void FLASH_PrefetchBufferCmd(FunctionalState NewState)
 293:./FWLIB/src/stm32f4xx_flash.c **** {
  58              		.loc 1 293 0
  59              		.cfi_startproc
  60              		@ args = 0, pretend = 0, frame = 0
  61              		@ frame_needed = 0, uses_anonymous_args = 0
  62              		@ link register save eliminated.
  63              	.LVL2:
 294:./FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
 295:./FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 296:./FWLIB/src/stm32f4xx_flash.c ****   
 297:./FWLIB/src/stm32f4xx_flash.c ****   /* Enable or disable the Prefetch Buffer */
 298:./FWLIB/src/stm32f4xx_flash.c ****   if(NewState != DISABLE)
  64              		.loc 1 298 0
  65 0000 28B9     		cbnz	r0, .L7
 299:./FWLIB/src/stm32f4xx_flash.c ****   {
 300:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->ACR |= FLASH_ACR_PRFTEN;
 301:./FWLIB/src/stm32f4xx_flash.c ****   }
 302:./FWLIB/src/stm32f4xx_flash.c ****   else
 303:./FWLIB/src/stm32f4xx_flash.c ****   {
 304:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->ACR &= (~FLASH_ACR_PRFTEN);
  66              		.loc 1 304 0
  67 0002 064A     		ldr	r2, .L8
  68 0004 1368     		ldr	r3, [r2]
  69 0006 23F48073 		bic	r3, r3, #256
  70 000a 1360     		str	r3, [r2]
 305:./FWLIB/src/stm32f4xx_flash.c ****   }
 306:./FWLIB/src/stm32f4xx_flash.c **** }
  71              		.loc 1 306 0
  72 000c 7047     		bx	lr
  73              	.L7:
 300:./FWLIB/src/stm32f4xx_flash.c ****   }
  74              		.loc 1 300 0
  75 000e 034A     		ldr	r2, .L8
  76 0010 1368     		ldr	r3, [r2]
  77 0012 43F48073 		orr	r3, r3, #256
  78 0016 1360     		str	r3, [r2]
  79 0018 7047     		bx	lr
  80              	.L9:
  81 001a 00BF     		.align	2
  82              	.L8:
  83 001c 003C0240 		.word	1073888256
  84              		.cfi_endproc
  85              	.LFE113:
  87              		.section	.text.FLASH_InstructionCacheCmd,"ax",%progbits
  88              		.align	1
  89              		.global	FLASH_InstructionCacheCmd
  90              		.syntax unified
  91              		.thumb
  92              		.thumb_func
  93              		.fpu fpv4-sp-d16
  95              	FLASH_InstructionCacheCmd:
  96              	.LFB114:
 307:./FWLIB/src/stm32f4xx_flash.c **** 
ARM GAS  /tmp/ccBmD3SR.s 			page 8


 308:./FWLIB/src/stm32f4xx_flash.c **** /**
 309:./FWLIB/src/stm32f4xx_flash.c ****   * @brief  Enables or disables the Instruction Cache feature.
 310:./FWLIB/src/stm32f4xx_flash.c ****   * @param  NewState: new state of the Instruction Cache.
 311:./FWLIB/src/stm32f4xx_flash.c ****   *          This parameter  can be: ENABLE or DISABLE.
 312:./FWLIB/src/stm32f4xx_flash.c ****   * @retval None
 313:./FWLIB/src/stm32f4xx_flash.c ****   */
 314:./FWLIB/src/stm32f4xx_flash.c **** void FLASH_InstructionCacheCmd(FunctionalState NewState)
 315:./FWLIB/src/stm32f4xx_flash.c **** {
  97              		.loc 1 315 0
  98              		.cfi_startproc
  99              		@ args = 0, pretend = 0, frame = 0
 100              		@ frame_needed = 0, uses_anonymous_args = 0
 101              		@ link register save eliminated.
 102              	.LVL3:
 316:./FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
 317:./FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 318:./FWLIB/src/stm32f4xx_flash.c ****   
 319:./FWLIB/src/stm32f4xx_flash.c ****   if(NewState != DISABLE)
 103              		.loc 1 319 0
 104 0000 28B9     		cbnz	r0, .L13
 320:./FWLIB/src/stm32f4xx_flash.c ****   {
 321:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->ACR |= FLASH_ACR_ICEN;
 322:./FWLIB/src/stm32f4xx_flash.c ****   }
 323:./FWLIB/src/stm32f4xx_flash.c ****   else
 324:./FWLIB/src/stm32f4xx_flash.c ****   {
 325:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->ACR &= (~FLASH_ACR_ICEN);
 105              		.loc 1 325 0
 106 0002 064A     		ldr	r2, .L14
 107 0004 1368     		ldr	r3, [r2]
 108 0006 23F40073 		bic	r3, r3, #512
 109 000a 1360     		str	r3, [r2]
 326:./FWLIB/src/stm32f4xx_flash.c ****   }
 327:./FWLIB/src/stm32f4xx_flash.c **** }
 110              		.loc 1 327 0
 111 000c 7047     		bx	lr
 112              	.L13:
 321:./FWLIB/src/stm32f4xx_flash.c ****   }
 113              		.loc 1 321 0
 114 000e 034A     		ldr	r2, .L14
 115 0010 1368     		ldr	r3, [r2]
 116 0012 43F40073 		orr	r3, r3, #512
 117 0016 1360     		str	r3, [r2]
 118 0018 7047     		bx	lr
 119              	.L15:
 120 001a 00BF     		.align	2
 121              	.L14:
 122 001c 003C0240 		.word	1073888256
 123              		.cfi_endproc
 124              	.LFE114:
 126              		.section	.text.FLASH_DataCacheCmd,"ax",%progbits
 127              		.align	1
 128              		.global	FLASH_DataCacheCmd
 129              		.syntax unified
 130              		.thumb
 131              		.thumb_func
 132              		.fpu fpv4-sp-d16
 134              	FLASH_DataCacheCmd:
ARM GAS  /tmp/ccBmD3SR.s 			page 9


 135              	.LFB115:
 328:./FWLIB/src/stm32f4xx_flash.c **** 
 329:./FWLIB/src/stm32f4xx_flash.c **** /**
 330:./FWLIB/src/stm32f4xx_flash.c ****   * @brief  Enables or disables the Data Cache feature.
 331:./FWLIB/src/stm32f4xx_flash.c ****   * @param  NewState: new state of the Data Cache.
 332:./FWLIB/src/stm32f4xx_flash.c ****   *          This parameter  can be: ENABLE or DISABLE.
 333:./FWLIB/src/stm32f4xx_flash.c ****   * @retval None
 334:./FWLIB/src/stm32f4xx_flash.c ****   */
 335:./FWLIB/src/stm32f4xx_flash.c **** void FLASH_DataCacheCmd(FunctionalState NewState)
 336:./FWLIB/src/stm32f4xx_flash.c **** {
 136              		.loc 1 336 0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 0
 139              		@ frame_needed = 0, uses_anonymous_args = 0
 140              		@ link register save eliminated.
 141              	.LVL4:
 337:./FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
 338:./FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 339:./FWLIB/src/stm32f4xx_flash.c ****   
 340:./FWLIB/src/stm32f4xx_flash.c ****   if(NewState != DISABLE)
 142              		.loc 1 340 0
 143 0000 28B9     		cbnz	r0, .L19
 341:./FWLIB/src/stm32f4xx_flash.c ****   {
 342:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->ACR |= FLASH_ACR_DCEN;
 343:./FWLIB/src/stm32f4xx_flash.c ****   }
 344:./FWLIB/src/stm32f4xx_flash.c ****   else
 345:./FWLIB/src/stm32f4xx_flash.c ****   {
 346:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->ACR &= (~FLASH_ACR_DCEN);
 144              		.loc 1 346 0
 145 0002 064A     		ldr	r2, .L20
 146 0004 1368     		ldr	r3, [r2]
 147 0006 23F48063 		bic	r3, r3, #1024
 148 000a 1360     		str	r3, [r2]
 347:./FWLIB/src/stm32f4xx_flash.c ****   }
 348:./FWLIB/src/stm32f4xx_flash.c **** }
 149              		.loc 1 348 0
 150 000c 7047     		bx	lr
 151              	.L19:
 342:./FWLIB/src/stm32f4xx_flash.c ****   }
 152              		.loc 1 342 0
 153 000e 034A     		ldr	r2, .L20
 154 0010 1368     		ldr	r3, [r2]
 155 0012 43F48063 		orr	r3, r3, #1024
 156 0016 1360     		str	r3, [r2]
 157 0018 7047     		bx	lr
 158              	.L21:
 159 001a 00BF     		.align	2
 160              	.L20:
 161 001c 003C0240 		.word	1073888256
 162              		.cfi_endproc
 163              	.LFE115:
 165              		.section	.text.FLASH_InstructionCacheReset,"ax",%progbits
 166              		.align	1
 167              		.global	FLASH_InstructionCacheReset
 168              		.syntax unified
 169              		.thumb
 170              		.thumb_func
ARM GAS  /tmp/ccBmD3SR.s 			page 10


 171              		.fpu fpv4-sp-d16
 173              	FLASH_InstructionCacheReset:
 174              	.LFB116:
 349:./FWLIB/src/stm32f4xx_flash.c **** 
 350:./FWLIB/src/stm32f4xx_flash.c **** /**
 351:./FWLIB/src/stm32f4xx_flash.c ****   * @brief  Resets the Instruction Cache.
 352:./FWLIB/src/stm32f4xx_flash.c ****   * @note   This function must be used only when the Instruction Cache is disabled.  
 353:./FWLIB/src/stm32f4xx_flash.c ****   * @param  None
 354:./FWLIB/src/stm32f4xx_flash.c ****   * @retval None
 355:./FWLIB/src/stm32f4xx_flash.c ****   */
 356:./FWLIB/src/stm32f4xx_flash.c **** void FLASH_InstructionCacheReset(void)
 357:./FWLIB/src/stm32f4xx_flash.c **** {
 175              		.loc 1 357 0
 176              		.cfi_startproc
 177              		@ args = 0, pretend = 0, frame = 0
 178              		@ frame_needed = 0, uses_anonymous_args = 0
 179              		@ link register save eliminated.
 358:./FWLIB/src/stm32f4xx_flash.c ****   FLASH->ACR |= FLASH_ACR_ICRST;
 180              		.loc 1 358 0
 181 0000 024A     		ldr	r2, .L23
 182 0002 1368     		ldr	r3, [r2]
 183 0004 43F40063 		orr	r3, r3, #2048
 184 0008 1360     		str	r3, [r2]
 359:./FWLIB/src/stm32f4xx_flash.c **** }
 185              		.loc 1 359 0
 186 000a 7047     		bx	lr
 187              	.L24:
 188              		.align	2
 189              	.L23:
 190 000c 003C0240 		.word	1073888256
 191              		.cfi_endproc
 192              	.LFE116:
 194              		.section	.text.FLASH_DataCacheReset,"ax",%progbits
 195              		.align	1
 196              		.global	FLASH_DataCacheReset
 197              		.syntax unified
 198              		.thumb
 199              		.thumb_func
 200              		.fpu fpv4-sp-d16
 202              	FLASH_DataCacheReset:
 203              	.LFB117:
 360:./FWLIB/src/stm32f4xx_flash.c **** 
 361:./FWLIB/src/stm32f4xx_flash.c **** /**
 362:./FWLIB/src/stm32f4xx_flash.c ****   * @brief  Resets the Data Cache.
 363:./FWLIB/src/stm32f4xx_flash.c ****   * @note   This function must be used only when the Data Cache is disabled.  
 364:./FWLIB/src/stm32f4xx_flash.c ****   * @param  None
 365:./FWLIB/src/stm32f4xx_flash.c ****   * @retval None
 366:./FWLIB/src/stm32f4xx_flash.c ****   */
 367:./FWLIB/src/stm32f4xx_flash.c **** void FLASH_DataCacheReset(void)
 368:./FWLIB/src/stm32f4xx_flash.c **** {
 204              		.loc 1 368 0
 205              		.cfi_startproc
 206              		@ args = 0, pretend = 0, frame = 0
 207              		@ frame_needed = 0, uses_anonymous_args = 0
 208              		@ link register save eliminated.
 369:./FWLIB/src/stm32f4xx_flash.c ****   FLASH->ACR |= FLASH_ACR_DCRST;
 209              		.loc 1 369 0
ARM GAS  /tmp/ccBmD3SR.s 			page 11


 210 0000 024A     		ldr	r2, .L26
 211 0002 1368     		ldr	r3, [r2]
 212 0004 43F48053 		orr	r3, r3, #4096
 213 0008 1360     		str	r3, [r2]
 370:./FWLIB/src/stm32f4xx_flash.c **** }
 214              		.loc 1 370 0
 215 000a 7047     		bx	lr
 216              	.L27:
 217              		.align	2
 218              	.L26:
 219 000c 003C0240 		.word	1073888256
 220              		.cfi_endproc
 221              	.LFE117:
 223              		.section	.text.FLASH_Unlock,"ax",%progbits
 224              		.align	1
 225              		.global	FLASH_Unlock
 226              		.syntax unified
 227              		.thumb
 228              		.thumb_func
 229              		.fpu fpv4-sp-d16
 231              	FLASH_Unlock:
 232              	.LFB118:
 371:./FWLIB/src/stm32f4xx_flash.c **** 
 372:./FWLIB/src/stm32f4xx_flash.c **** /**
 373:./FWLIB/src/stm32f4xx_flash.c ****   * @}
 374:./FWLIB/src/stm32f4xx_flash.c ****   */
 375:./FWLIB/src/stm32f4xx_flash.c **** 
 376:./FWLIB/src/stm32f4xx_flash.c **** /** @defgroup FLASH_Group2 FLASH Memory Programming functions
 377:./FWLIB/src/stm32f4xx_flash.c ****  *  @brief   FLASH Memory Programming functions
 378:./FWLIB/src/stm32f4xx_flash.c ****  *
 379:./FWLIB/src/stm32f4xx_flash.c **** @verbatim   
 380:./FWLIB/src/stm32f4xx_flash.c ****  ===============================================================================
 381:./FWLIB/src/stm32f4xx_flash.c ****                 ##### FLASH Memory Programming functions #####
 382:./FWLIB/src/stm32f4xx_flash.c ****  ===============================================================================   
 383:./FWLIB/src/stm32f4xx_flash.c ****     [..]
 384:./FWLIB/src/stm32f4xx_flash.c ****       This group includes the following functions:
 385:./FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_Unlock(void)
 386:./FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_Lock(void)
 387:./FWLIB/src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
 388:./FWLIB/src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_EraseAllSectors(uint8_t VoltageRange)       
 389:./FWLIB/src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_ProgramDoubleWord(uint32_t Address, uint64_t Data)
 390:./FWLIB/src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
 391:./FWLIB/src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
 392:./FWLIB/src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_ProgramByte(uint32_t Address, uint8_t Data)
 393:./FWLIB/src/stm32f4xx_flash.c ****           The following functions can be used only for STM32F42xxx/43xxx devices. 
 394:./FWLIB/src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_EraseAllBank1Sectors(uint8_t VoltageRange)
 395:./FWLIB/src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_EraseAllBank2Sectors(uint8_t VoltageRange)    
 396:./FWLIB/src/stm32f4xx_flash.c ****     [..]   
 397:./FWLIB/src/stm32f4xx_flash.c ****       Any operation of erase or program should follow these steps:
 398:./FWLIB/src/stm32f4xx_flash.c ****       (#) Call the FLASH_Unlock() function to enable the FLASH control register access
 399:./FWLIB/src/stm32f4xx_flash.c **** 
 400:./FWLIB/src/stm32f4xx_flash.c ****       (#) Call the desired function to erase sector(s) or program data
 401:./FWLIB/src/stm32f4xx_flash.c **** 
 402:./FWLIB/src/stm32f4xx_flash.c ****       (#) Call the FLASH_Lock() function to disable the FLASH control register access
 403:./FWLIB/src/stm32f4xx_flash.c ****           (recommended to protect the FLASH memory against possible unwanted operation)
 404:./FWLIB/src/stm32f4xx_flash.c ****     
 405:./FWLIB/src/stm32f4xx_flash.c **** @endverbatim
ARM GAS  /tmp/ccBmD3SR.s 			page 12


 406:./FWLIB/src/stm32f4xx_flash.c ****   * @{
 407:./FWLIB/src/stm32f4xx_flash.c ****   */
 408:./FWLIB/src/stm32f4xx_flash.c **** 
 409:./FWLIB/src/stm32f4xx_flash.c **** /**
 410:./FWLIB/src/stm32f4xx_flash.c ****   * @brief  Unlocks the FLASH control register access
 411:./FWLIB/src/stm32f4xx_flash.c ****   * @param  None
 412:./FWLIB/src/stm32f4xx_flash.c ****   * @retval None
 413:./FWLIB/src/stm32f4xx_flash.c ****   */
 414:./FWLIB/src/stm32f4xx_flash.c **** void FLASH_Unlock(void)
 415:./FWLIB/src/stm32f4xx_flash.c **** {
 233              		.loc 1 415 0
 234              		.cfi_startproc
 235              		@ args = 0, pretend = 0, frame = 0
 236              		@ frame_needed = 0, uses_anonymous_args = 0
 237              		@ link register save eliminated.
 416:./FWLIB/src/stm32f4xx_flash.c ****   if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 238              		.loc 1 416 0
 239 0000 054B     		ldr	r3, .L31
 240 0002 1B69     		ldr	r3, [r3, #16]
 241 0004 002B     		cmp	r3, #0
 242 0006 00DB     		blt	.L30
 243              	.L28:
 417:./FWLIB/src/stm32f4xx_flash.c ****   {
 418:./FWLIB/src/stm32f4xx_flash.c ****     /* Authorize the FLASH Registers access */
 419:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->KEYR = FLASH_KEY1;
 420:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->KEYR = FLASH_KEY2;
 421:./FWLIB/src/stm32f4xx_flash.c ****   }  
 422:./FWLIB/src/stm32f4xx_flash.c **** }
 244              		.loc 1 422 0
 245 0008 7047     		bx	lr
 246              	.L30:
 419:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->KEYR = FLASH_KEY2;
 247              		.loc 1 419 0
 248 000a 034B     		ldr	r3, .L31
 249 000c 034A     		ldr	r2, .L31+4
 250 000e 5A60     		str	r2, [r3, #4]
 420:./FWLIB/src/stm32f4xx_flash.c ****   }  
 251              		.loc 1 420 0
 252 0010 02F18832 		add	r2, r2, #-2004318072
 253 0014 5A60     		str	r2, [r3, #4]
 254              		.loc 1 422 0
 255 0016 F7E7     		b	.L28
 256              	.L32:
 257              		.align	2
 258              	.L31:
 259 0018 003C0240 		.word	1073888256
 260 001c 23016745 		.word	1164378403
 261              		.cfi_endproc
 262              	.LFE118:
 264              		.section	.text.FLASH_Lock,"ax",%progbits
 265              		.align	1
 266              		.global	FLASH_Lock
 267              		.syntax unified
 268              		.thumb
 269              		.thumb_func
 270              		.fpu fpv4-sp-d16
 272              	FLASH_Lock:
ARM GAS  /tmp/ccBmD3SR.s 			page 13


 273              	.LFB119:
 423:./FWLIB/src/stm32f4xx_flash.c **** 
 424:./FWLIB/src/stm32f4xx_flash.c **** /**
 425:./FWLIB/src/stm32f4xx_flash.c ****   * @brief  Locks the FLASH control register access
 426:./FWLIB/src/stm32f4xx_flash.c ****   * @param  None
 427:./FWLIB/src/stm32f4xx_flash.c ****   * @retval None
 428:./FWLIB/src/stm32f4xx_flash.c ****   */
 429:./FWLIB/src/stm32f4xx_flash.c **** void FLASH_Lock(void)
 430:./FWLIB/src/stm32f4xx_flash.c **** {
 274              		.loc 1 430 0
 275              		.cfi_startproc
 276              		@ args = 0, pretend = 0, frame = 0
 277              		@ frame_needed = 0, uses_anonymous_args = 0
 278              		@ link register save eliminated.
 431:./FWLIB/src/stm32f4xx_flash.c ****   /* Set the LOCK Bit to lock the FLASH Registers access */
 432:./FWLIB/src/stm32f4xx_flash.c ****   FLASH->CR |= FLASH_CR_LOCK;
 279              		.loc 1 432 0
 280 0000 024A     		ldr	r2, .L34
 281 0002 1369     		ldr	r3, [r2, #16]
 282 0004 43F00043 		orr	r3, r3, #-2147483648
 283 0008 1361     		str	r3, [r2, #16]
 433:./FWLIB/src/stm32f4xx_flash.c **** }
 284              		.loc 1 433 0
 285 000a 7047     		bx	lr
 286              	.L35:
 287              		.align	2
 288              	.L34:
 289 000c 003C0240 		.word	1073888256
 290              		.cfi_endproc
 291              	.LFE119:
 293              		.section	.text.FLASH_OB_Unlock,"ax",%progbits
 294              		.align	1
 295              		.global	FLASH_OB_Unlock
 296              		.syntax unified
 297              		.thumb
 298              		.thumb_func
 299              		.fpu fpv4-sp-d16
 301              	FLASH_OB_Unlock:
 302              	.LFB128:
 434:./FWLIB/src/stm32f4xx_flash.c **** 
 435:./FWLIB/src/stm32f4xx_flash.c **** /**
 436:./FWLIB/src/stm32f4xx_flash.c ****   * @brief  Erases a specified FLASH Sector.
 437:./FWLIB/src/stm32f4xx_flash.c ****   *
 438:./FWLIB/src/stm32f4xx_flash.c ****   * @note   If an erase and a program operations are requested simustaneously,    
 439:./FWLIB/src/stm32f4xx_flash.c ****   *         the erase operation is performed before the program one.
 440:./FWLIB/src/stm32f4xx_flash.c ****   *
 441:./FWLIB/src/stm32f4xx_flash.c ****   * @param  FLASH_Sector: The Sector number to be erased.
 442:./FWLIB/src/stm32f4xx_flash.c ****   *
 443:./FWLIB/src/stm32f4xx_flash.c ****   *  @note  For STM32F405xx/407xx and STM32F415xx/417xx devices this parameter can 
 444:./FWLIB/src/stm32f4xx_flash.c ****   *         be a value between FLASH_Sector_0 and FLASH_Sector_11.
 445:./FWLIB/src/stm32f4xx_flash.c ****   *
 446:./FWLIB/src/stm32f4xx_flash.c ****   *         For STM32F42xxx/43xxx devices this parameter can be a value between 
 447:./FWLIB/src/stm32f4xx_flash.c ****   *         FLASH_Sector_0 and FLASH_Sector_23.
 448:./FWLIB/src/stm32f4xx_flash.c ****   *
 449:./FWLIB/src/stm32f4xx_flash.c ****   *         For STM32F401xx devices this parameter can be a value between 
 450:./FWLIB/src/stm32f4xx_flash.c ****   *         FLASH_Sector_0 and FLASH_Sector_5.
 451:./FWLIB/src/stm32f4xx_flash.c ****   *
ARM GAS  /tmp/ccBmD3SR.s 			page 14


 452:./FWLIB/src/stm32f4xx_flash.c ****   *         For STM32F411xE devices this parameter can be a value between 
 453:./FWLIB/src/stm32f4xx_flash.c ****   *         FLASH_Sector_0 and FLASH_Sector_7.
 454:./FWLIB/src/stm32f4xx_flash.c ****   *
 455:./FWLIB/src/stm32f4xx_flash.c ****   * @param  VoltageRange: The device voltage range which defines the erase parallelism.  
 456:./FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
 457:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_1: when the device voltage range is 1.8V to 2.1V, 
 458:./FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by byte (8-bit) 
 459:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_2: when the device voltage range is 2.1V to 2.7V,
 460:./FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by half word (16-bit)
 461:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_3: when the device voltage range is 2.7V to 3.6V,
 462:./FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by word (32-bit)
 463:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_4: when the device voltage range is 2.7V to 3.6V + External Vpp, 
 464:./FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by double word (64-bit)
 465:./FWLIB/src/stm32f4xx_flash.c ****   *       
 466:./FWLIB/src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
 467:./FWLIB/src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
 468:./FWLIB/src/stm32f4xx_flash.c ****   */
 469:./FWLIB/src/stm32f4xx_flash.c **** FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
 470:./FWLIB/src/stm32f4xx_flash.c **** {
 471:./FWLIB/src/stm32f4xx_flash.c ****   uint32_t tmp_psize = 0x0;
 472:./FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 473:./FWLIB/src/stm32f4xx_flash.c **** 
 474:./FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
 475:./FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_SECTOR(FLASH_Sector));
 476:./FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 477:./FWLIB/src/stm32f4xx_flash.c ****   
 478:./FWLIB/src/stm32f4xx_flash.c ****   if(VoltageRange == VoltageRange_1)
 479:./FWLIB/src/stm32f4xx_flash.c ****   {
 480:./FWLIB/src/stm32f4xx_flash.c ****      tmp_psize = FLASH_PSIZE_BYTE;
 481:./FWLIB/src/stm32f4xx_flash.c ****   }
 482:./FWLIB/src/stm32f4xx_flash.c ****   else if(VoltageRange == VoltageRange_2)
 483:./FWLIB/src/stm32f4xx_flash.c ****   {
 484:./FWLIB/src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_HALF_WORD;
 485:./FWLIB/src/stm32f4xx_flash.c ****   }
 486:./FWLIB/src/stm32f4xx_flash.c ****   else if(VoltageRange == VoltageRange_3)
 487:./FWLIB/src/stm32f4xx_flash.c ****   {
 488:./FWLIB/src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_WORD;
 489:./FWLIB/src/stm32f4xx_flash.c ****   }
 490:./FWLIB/src/stm32f4xx_flash.c ****   else
 491:./FWLIB/src/stm32f4xx_flash.c ****   {
 492:./FWLIB/src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 493:./FWLIB/src/stm32f4xx_flash.c ****   }
 494:./FWLIB/src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
 495:./FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
 496:./FWLIB/src/stm32f4xx_flash.c ****   
 497:./FWLIB/src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
 498:./FWLIB/src/stm32f4xx_flash.c ****   { 
 499:./FWLIB/src/stm32f4xx_flash.c ****     /* if the previous operation is completed, proceed to erase the sector */
 500:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= CR_PSIZE_MASK;
 501:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= tmp_psize;
 502:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= SECTOR_MASK;
 503:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 504:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_STRT;
 505:./FWLIB/src/stm32f4xx_flash.c ****     
 506:./FWLIB/src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 507:./FWLIB/src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation();
 508:./FWLIB/src/stm32f4xx_flash.c ****     
ARM GAS  /tmp/ccBmD3SR.s 			page 15


 509:./FWLIB/src/stm32f4xx_flash.c ****     /* if the erase operation is completed, disable the SER Bit */
 510:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= (~FLASH_CR_SER);
 511:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= SECTOR_MASK; 
 512:./FWLIB/src/stm32f4xx_flash.c ****   }
 513:./FWLIB/src/stm32f4xx_flash.c ****   /* Return the Erase Status */
 514:./FWLIB/src/stm32f4xx_flash.c ****   return status;
 515:./FWLIB/src/stm32f4xx_flash.c **** }
 516:./FWLIB/src/stm32f4xx_flash.c **** 
 517:./FWLIB/src/stm32f4xx_flash.c **** /**
 518:./FWLIB/src/stm32f4xx_flash.c ****   * @brief  Erases all FLASH Sectors.
 519:./FWLIB/src/stm32f4xx_flash.c ****   *
 520:./FWLIB/src/stm32f4xx_flash.c ****   * @note   If an erase and a program operations are requested simustaneously,    
 521:./FWLIB/src/stm32f4xx_flash.c ****   *         the erase operation is performed before the program one.
 522:./FWLIB/src/stm32f4xx_flash.c ****   *  
 523:./FWLIB/src/stm32f4xx_flash.c ****   * @param  VoltageRange: The device voltage range which defines the erase parallelism.  
 524:./FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
 525:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_1: when the device voltage range is 1.8V to 2.1V, 
 526:./FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by byte (8-bit) 
 527:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_2: when the device voltage range is 2.1V to 2.7V,
 528:./FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by half word (16-bit)
 529:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_3: when the device voltage range is 2.7V to 3.6V,
 530:./FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by word (32-bit)
 531:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_4: when the device voltage range is 2.7V to 3.6V + External Vpp, 
 532:./FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by double word (64-bit)
 533:./FWLIB/src/stm32f4xx_flash.c ****   *       
 534:./FWLIB/src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
 535:./FWLIB/src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
 536:./FWLIB/src/stm32f4xx_flash.c ****   */
 537:./FWLIB/src/stm32f4xx_flash.c **** FLASH_Status FLASH_EraseAllSectors(uint8_t VoltageRange)
 538:./FWLIB/src/stm32f4xx_flash.c **** {
 539:./FWLIB/src/stm32f4xx_flash.c ****   uint32_t tmp_psize = 0x0;
 540:./FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 541:./FWLIB/src/stm32f4xx_flash.c ****   
 542:./FWLIB/src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
 543:./FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
 544:./FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 545:./FWLIB/src/stm32f4xx_flash.c ****   
 546:./FWLIB/src/stm32f4xx_flash.c ****   if(VoltageRange == VoltageRange_1)
 547:./FWLIB/src/stm32f4xx_flash.c ****   {
 548:./FWLIB/src/stm32f4xx_flash.c ****      tmp_psize = FLASH_PSIZE_BYTE;
 549:./FWLIB/src/stm32f4xx_flash.c ****   }
 550:./FWLIB/src/stm32f4xx_flash.c ****   else if(VoltageRange == VoltageRange_2)
 551:./FWLIB/src/stm32f4xx_flash.c ****   {
 552:./FWLIB/src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_HALF_WORD;
 553:./FWLIB/src/stm32f4xx_flash.c ****   }
 554:./FWLIB/src/stm32f4xx_flash.c ****   else if(VoltageRange == VoltageRange_3)
 555:./FWLIB/src/stm32f4xx_flash.c ****   {
 556:./FWLIB/src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_WORD;
 557:./FWLIB/src/stm32f4xx_flash.c ****   }
 558:./FWLIB/src/stm32f4xx_flash.c ****   else
 559:./FWLIB/src/stm32f4xx_flash.c ****   {
 560:./FWLIB/src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 561:./FWLIB/src/stm32f4xx_flash.c ****   }  
 562:./FWLIB/src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
 563:./FWLIB/src/stm32f4xx_flash.c ****   {
 564:./FWLIB/src/stm32f4xx_flash.c ****     /* if the previous operation is completed, proceed to erase all sectors */
 565:./FWLIB/src/stm32f4xx_flash.c **** #if defined (STM32F427_437xx) || defined (STM32F429_439xx)    
ARM GAS  /tmp/ccBmD3SR.s 			page 16


 566:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= CR_PSIZE_MASK;
 567:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= tmp_psize;
 568:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= (FLASH_CR_MER1 | FLASH_CR_MER2);
 569:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_STRT;
 570:./FWLIB/src/stm32f4xx_flash.c ****     
 571:./FWLIB/src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 572:./FWLIB/src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation();
 573:./FWLIB/src/stm32f4xx_flash.c **** 
 574:./FWLIB/src/stm32f4xx_flash.c ****     /* if the erase operation is completed, disable the MER Bit */
 575:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= ~(FLASH_CR_MER1 | FLASH_CR_MER2);
 576:./FWLIB/src/stm32f4xx_flash.c **** #endif /* STM32F427_437xx ||  STM32F429_439xx */
 577:./FWLIB/src/stm32f4xx_flash.c **** 
 578:./FWLIB/src/stm32f4xx_flash.c **** #if defined (STM32F40_41xxx) || defined (STM32F401xx) || defined (STM32F411xE) 
 579:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= CR_PSIZE_MASK;
 580:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= tmp_psize;
 581:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_MER;
 582:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_STRT;
 583:./FWLIB/src/stm32f4xx_flash.c ****     
 584:./FWLIB/src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 585:./FWLIB/src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation();
 586:./FWLIB/src/stm32f4xx_flash.c **** 
 587:./FWLIB/src/stm32f4xx_flash.c ****     /* if the erase operation is completed, disable the MER Bit */
 588:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= (~FLASH_CR_MER);
 589:./FWLIB/src/stm32f4xx_flash.c **** #endif /* STM32F40_41xxx || STM32F401xx || STM32F411xE */
 590:./FWLIB/src/stm32f4xx_flash.c **** 
 591:./FWLIB/src/stm32f4xx_flash.c ****   }   
 592:./FWLIB/src/stm32f4xx_flash.c ****   /* Return the Erase Status */
 593:./FWLIB/src/stm32f4xx_flash.c ****   return status;
 594:./FWLIB/src/stm32f4xx_flash.c **** }
 595:./FWLIB/src/stm32f4xx_flash.c **** 
 596:./FWLIB/src/stm32f4xx_flash.c **** /**
 597:./FWLIB/src/stm32f4xx_flash.c ****   * @brief  Erases all FLASH Sectors in Bank 1.
 598:./FWLIB/src/stm32f4xx_flash.c ****   *
 599:./FWLIB/src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
 600:./FWLIB/src/stm32f4xx_flash.c ****   *      
 601:./FWLIB/src/stm32f4xx_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 602:./FWLIB/src/stm32f4xx_flash.c ****   *         the erase operation is performed before the program one. 
 603:./FWLIB/src/stm32f4xx_flash.c ****   *  
 604:./FWLIB/src/stm32f4xx_flash.c ****   * @param  VoltageRange: The device voltage range which defines the erase parallelism.  
 605:./FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
 606:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_1: when the device voltage range is 1.8V to 2.1V, 
 607:./FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by byte (8-bit) 
 608:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_2: when the device voltage range is 2.1V to 2.7V,
 609:./FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by half word (16-bit)
 610:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_3: when the device voltage range is 2.7V to 3.6V,
 611:./FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by word (32-bit)
 612:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_4: when the device voltage range is 2.7V to 3.6V + External Vpp, 
 613:./FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by double word (64-bit)
 614:./FWLIB/src/stm32f4xx_flash.c ****   *       
 615:./FWLIB/src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
 616:./FWLIB/src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
 617:./FWLIB/src/stm32f4xx_flash.c ****   */
 618:./FWLIB/src/stm32f4xx_flash.c **** FLASH_Status FLASH_EraseAllBank1Sectors(uint8_t VoltageRange)
 619:./FWLIB/src/stm32f4xx_flash.c **** {
 620:./FWLIB/src/stm32f4xx_flash.c ****   uint32_t tmp_psize = 0x0;
 621:./FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 622:./FWLIB/src/stm32f4xx_flash.c ****   
ARM GAS  /tmp/ccBmD3SR.s 			page 17


 623:./FWLIB/src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
 624:./FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
 625:./FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 626:./FWLIB/src/stm32f4xx_flash.c ****   
 627:./FWLIB/src/stm32f4xx_flash.c ****   if(VoltageRange == VoltageRange_1)
 628:./FWLIB/src/stm32f4xx_flash.c ****   {
 629:./FWLIB/src/stm32f4xx_flash.c ****      tmp_psize = FLASH_PSIZE_BYTE;
 630:./FWLIB/src/stm32f4xx_flash.c ****   }
 631:./FWLIB/src/stm32f4xx_flash.c ****   else if(VoltageRange == VoltageRange_2)
 632:./FWLIB/src/stm32f4xx_flash.c ****   {
 633:./FWLIB/src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_HALF_WORD;
 634:./FWLIB/src/stm32f4xx_flash.c ****   }
 635:./FWLIB/src/stm32f4xx_flash.c ****   else if(VoltageRange == VoltageRange_3)
 636:./FWLIB/src/stm32f4xx_flash.c ****   {
 637:./FWLIB/src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_WORD;
 638:./FWLIB/src/stm32f4xx_flash.c ****   }
 639:./FWLIB/src/stm32f4xx_flash.c ****   else
 640:./FWLIB/src/stm32f4xx_flash.c ****   {
 641:./FWLIB/src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 642:./FWLIB/src/stm32f4xx_flash.c ****   }  
 643:./FWLIB/src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
 644:./FWLIB/src/stm32f4xx_flash.c ****   {
 645:./FWLIB/src/stm32f4xx_flash.c ****     /* if the previous operation is completed, proceed to erase all sectors */
 646:./FWLIB/src/stm32f4xx_flash.c ****      FLASH->CR &= CR_PSIZE_MASK;
 647:./FWLIB/src/stm32f4xx_flash.c ****      FLASH->CR |= tmp_psize;
 648:./FWLIB/src/stm32f4xx_flash.c ****      FLASH->CR |= FLASH_CR_MER1;
 649:./FWLIB/src/stm32f4xx_flash.c ****      FLASH->CR |= FLASH_CR_STRT;
 650:./FWLIB/src/stm32f4xx_flash.c ****     
 651:./FWLIB/src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 652:./FWLIB/src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation();
 653:./FWLIB/src/stm32f4xx_flash.c **** 
 654:./FWLIB/src/stm32f4xx_flash.c ****     /* if the erase operation is completed, disable the MER Bit */
 655:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= (~FLASH_CR_MER1);
 656:./FWLIB/src/stm32f4xx_flash.c **** 
 657:./FWLIB/src/stm32f4xx_flash.c ****   }   
 658:./FWLIB/src/stm32f4xx_flash.c ****   /* Return the Erase Status */
 659:./FWLIB/src/stm32f4xx_flash.c ****   return status;
 660:./FWLIB/src/stm32f4xx_flash.c **** }
 661:./FWLIB/src/stm32f4xx_flash.c **** 
 662:./FWLIB/src/stm32f4xx_flash.c **** 
 663:./FWLIB/src/stm32f4xx_flash.c **** /**
 664:./FWLIB/src/stm32f4xx_flash.c ****   * @brief  Erases all FLASH Sectors in Bank 2.
 665:./FWLIB/src/stm32f4xx_flash.c ****   *
 666:./FWLIB/src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
 667:./FWLIB/src/stm32f4xx_flash.c ****   *     
 668:./FWLIB/src/stm32f4xx_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 669:./FWLIB/src/stm32f4xx_flash.c ****   *         the erase operation is performed before the program one.
 670:./FWLIB/src/stm32f4xx_flash.c ****   *     
 671:./FWLIB/src/stm32f4xx_flash.c ****   * @param  VoltageRange: The device voltage range which defines the erase parallelism.  
 672:./FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
 673:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_1: when the device voltage range is 1.8V to 2.1V, 
 674:./FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by byte (8-bit) 
 675:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_2: when the device voltage range is 2.1V to 2.7V,
 676:./FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by half word (16-bit)
 677:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_3: when the device voltage range is 2.7V to 3.6V,
 678:./FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by word (32-bit)
 679:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_4: when the device voltage range is 2.7V to 3.6V + External Vpp, 
ARM GAS  /tmp/ccBmD3SR.s 			page 18


 680:./FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by double word (64-bit)
 681:./FWLIB/src/stm32f4xx_flash.c ****   *       
 682:./FWLIB/src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
 683:./FWLIB/src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
 684:./FWLIB/src/stm32f4xx_flash.c ****   */
 685:./FWLIB/src/stm32f4xx_flash.c **** FLASH_Status FLASH_EraseAllBank2Sectors(uint8_t VoltageRange)
 686:./FWLIB/src/stm32f4xx_flash.c **** {
 687:./FWLIB/src/stm32f4xx_flash.c ****   uint32_t tmp_psize = 0x0;
 688:./FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 689:./FWLIB/src/stm32f4xx_flash.c ****   
 690:./FWLIB/src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
 691:./FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
 692:./FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 693:./FWLIB/src/stm32f4xx_flash.c ****   
 694:./FWLIB/src/stm32f4xx_flash.c ****   if(VoltageRange == VoltageRange_1)
 695:./FWLIB/src/stm32f4xx_flash.c ****   {
 696:./FWLIB/src/stm32f4xx_flash.c ****      tmp_psize = FLASH_PSIZE_BYTE;
 697:./FWLIB/src/stm32f4xx_flash.c ****   }
 698:./FWLIB/src/stm32f4xx_flash.c ****   else if(VoltageRange == VoltageRange_2)
 699:./FWLIB/src/stm32f4xx_flash.c ****   {
 700:./FWLIB/src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_HALF_WORD;
 701:./FWLIB/src/stm32f4xx_flash.c ****   }
 702:./FWLIB/src/stm32f4xx_flash.c ****   else if(VoltageRange == VoltageRange_3)
 703:./FWLIB/src/stm32f4xx_flash.c ****   {
 704:./FWLIB/src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_WORD;
 705:./FWLIB/src/stm32f4xx_flash.c ****   }
 706:./FWLIB/src/stm32f4xx_flash.c ****   else
 707:./FWLIB/src/stm32f4xx_flash.c ****   {
 708:./FWLIB/src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 709:./FWLIB/src/stm32f4xx_flash.c ****   }  
 710:./FWLIB/src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
 711:./FWLIB/src/stm32f4xx_flash.c ****   {
 712:./FWLIB/src/stm32f4xx_flash.c ****     /* if the previous operation is completed, proceed to erase all sectors */
 713:./FWLIB/src/stm32f4xx_flash.c ****      FLASH->CR &= CR_PSIZE_MASK;
 714:./FWLIB/src/stm32f4xx_flash.c ****      FLASH->CR |= tmp_psize;
 715:./FWLIB/src/stm32f4xx_flash.c ****      FLASH->CR |= FLASH_CR_MER2;
 716:./FWLIB/src/stm32f4xx_flash.c ****      FLASH->CR |= FLASH_CR_STRT;
 717:./FWLIB/src/stm32f4xx_flash.c ****     
 718:./FWLIB/src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 719:./FWLIB/src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation();
 720:./FWLIB/src/stm32f4xx_flash.c **** 
 721:./FWLIB/src/stm32f4xx_flash.c ****     /* if the erase operation is completed, disable the MER Bit */
 722:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= (~FLASH_CR_MER2);
 723:./FWLIB/src/stm32f4xx_flash.c **** 
 724:./FWLIB/src/stm32f4xx_flash.c ****   }   
 725:./FWLIB/src/stm32f4xx_flash.c ****   /* Return the Erase Status */
 726:./FWLIB/src/stm32f4xx_flash.c ****   return status;
 727:./FWLIB/src/stm32f4xx_flash.c **** }
 728:./FWLIB/src/stm32f4xx_flash.c **** 
 729:./FWLIB/src/stm32f4xx_flash.c **** /**
 730:./FWLIB/src/stm32f4xx_flash.c ****   * @brief  Programs a double word (64-bit) at a specified address.
 731:./FWLIB/src/stm32f4xx_flash.c ****   * @note   This function must be used when the device voltage range is from
 732:./FWLIB/src/stm32f4xx_flash.c ****   *         2.7V to 3.6V and an External Vpp is present.
 733:./FWLIB/src/stm32f4xx_flash.c ****   *
 734:./FWLIB/src/stm32f4xx_flash.c ****   * @note   If an erase and a program operations are requested simustaneously,    
 735:./FWLIB/src/stm32f4xx_flash.c ****   *         the erase operation is performed before the program one.
 736:./FWLIB/src/stm32f4xx_flash.c ****   *  
ARM GAS  /tmp/ccBmD3SR.s 			page 19


 737:./FWLIB/src/stm32f4xx_flash.c ****   * @param  Address: specifies the address to be programmed.
 738:./FWLIB/src/stm32f4xx_flash.c ****   * @param  Data: specifies the data to be programmed.
 739:./FWLIB/src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
 740:./FWLIB/src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
 741:./FWLIB/src/stm32f4xx_flash.c ****   */
 742:./FWLIB/src/stm32f4xx_flash.c **** FLASH_Status FLASH_ProgramDoubleWord(uint32_t Address, uint64_t Data)
 743:./FWLIB/src/stm32f4xx_flash.c **** {
 744:./FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 745:./FWLIB/src/stm32f4xx_flash.c **** 
 746:./FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
 747:./FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_ADDRESS(Address));
 748:./FWLIB/src/stm32f4xx_flash.c **** 
 749:./FWLIB/src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
 750:./FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
 751:./FWLIB/src/stm32f4xx_flash.c ****   
 752:./FWLIB/src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
 753:./FWLIB/src/stm32f4xx_flash.c ****   {
 754:./FWLIB/src/stm32f4xx_flash.c ****     /* if the previous operation is completed, proceed to program the new data */
 755:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= CR_PSIZE_MASK;
 756:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 757:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_PG;
 758:./FWLIB/src/stm32f4xx_flash.c ****   
 759:./FWLIB/src/stm32f4xx_flash.c ****     *(__IO uint64_t*)Address = Data;
 760:./FWLIB/src/stm32f4xx_flash.c ****         
 761:./FWLIB/src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 762:./FWLIB/src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation();
 763:./FWLIB/src/stm32f4xx_flash.c **** 
 764:./FWLIB/src/stm32f4xx_flash.c ****     /* if the program operation is completed, disable the PG Bit */
 765:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= (~FLASH_CR_PG);
 766:./FWLIB/src/stm32f4xx_flash.c ****   } 
 767:./FWLIB/src/stm32f4xx_flash.c ****   /* Return the Program Status */
 768:./FWLIB/src/stm32f4xx_flash.c ****   return status;
 769:./FWLIB/src/stm32f4xx_flash.c **** }
 770:./FWLIB/src/stm32f4xx_flash.c **** 
 771:./FWLIB/src/stm32f4xx_flash.c **** /**
 772:./FWLIB/src/stm32f4xx_flash.c ****   * @brief  Programs a word (32-bit) at a specified address.
 773:./FWLIB/src/stm32f4xx_flash.c ****   *
 774:./FWLIB/src/stm32f4xx_flash.c ****   * @note   This function must be used when the device voltage range is from 2.7V to 3.6V. 
 775:./FWLIB/src/stm32f4xx_flash.c ****   *
 776:./FWLIB/src/stm32f4xx_flash.c ****   * @note   If an erase and a program operations are requested simustaneously,    
 777:./FWLIB/src/stm32f4xx_flash.c ****   *         the erase operation is performed before the program one.
 778:./FWLIB/src/stm32f4xx_flash.c ****   *  
 779:./FWLIB/src/stm32f4xx_flash.c ****   * @param  Address: specifies the address to be programmed.
 780:./FWLIB/src/stm32f4xx_flash.c ****   *         This parameter can be any address in Program memory zone or in OTP zone.  
 781:./FWLIB/src/stm32f4xx_flash.c ****   * @param  Data: specifies the data to be programmed.
 782:./FWLIB/src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
 783:./FWLIB/src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
 784:./FWLIB/src/stm32f4xx_flash.c ****   */
 785:./FWLIB/src/stm32f4xx_flash.c **** FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
 786:./FWLIB/src/stm32f4xx_flash.c **** {
 787:./FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 788:./FWLIB/src/stm32f4xx_flash.c **** 
 789:./FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
 790:./FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_ADDRESS(Address));
 791:./FWLIB/src/stm32f4xx_flash.c **** 
 792:./FWLIB/src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
 793:./FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
ARM GAS  /tmp/ccBmD3SR.s 			page 20


 794:./FWLIB/src/stm32f4xx_flash.c ****   
 795:./FWLIB/src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
 796:./FWLIB/src/stm32f4xx_flash.c ****   {
 797:./FWLIB/src/stm32f4xx_flash.c ****     /* if the previous operation is completed, proceed to program the new data */
 798:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= CR_PSIZE_MASK;
 799:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_PSIZE_WORD;
 800:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_PG;
 801:./FWLIB/src/stm32f4xx_flash.c ****   
 802:./FWLIB/src/stm32f4xx_flash.c ****     *(__IO uint32_t*)Address = Data;
 803:./FWLIB/src/stm32f4xx_flash.c ****         
 804:./FWLIB/src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 805:./FWLIB/src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation();
 806:./FWLIB/src/stm32f4xx_flash.c **** 
 807:./FWLIB/src/stm32f4xx_flash.c ****     /* if the program operation is completed, disable the PG Bit */
 808:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= (~FLASH_CR_PG);
 809:./FWLIB/src/stm32f4xx_flash.c ****   } 
 810:./FWLIB/src/stm32f4xx_flash.c ****   /* Return the Program Status */
 811:./FWLIB/src/stm32f4xx_flash.c ****   return status;
 812:./FWLIB/src/stm32f4xx_flash.c **** }
 813:./FWLIB/src/stm32f4xx_flash.c **** 
 814:./FWLIB/src/stm32f4xx_flash.c **** /**
 815:./FWLIB/src/stm32f4xx_flash.c ****   * @brief  Programs a half word (16-bit) at a specified address. 
 816:./FWLIB/src/stm32f4xx_flash.c ****   * @note   This function must be used when the device voltage range is from 2.1V to 3.6V. 
 817:./FWLIB/src/stm32f4xx_flash.c ****   *
 818:./FWLIB/src/stm32f4xx_flash.c ****   * @note   If an erase and a program operations are requested simustaneously,    
 819:./FWLIB/src/stm32f4xx_flash.c ****   *         the erase operation is performed before the program one.
 820:./FWLIB/src/stm32f4xx_flash.c ****   * 
 821:./FWLIB/src/stm32f4xx_flash.c ****   * @param  Address: specifies the address to be programmed.
 822:./FWLIB/src/stm32f4xx_flash.c ****   *         This parameter can be any address in Program memory zone or in OTP zone.  
 823:./FWLIB/src/stm32f4xx_flash.c ****   * @param  Data: specifies the data to be programmed.
 824:./FWLIB/src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
 825:./FWLIB/src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
 826:./FWLIB/src/stm32f4xx_flash.c ****   */
 827:./FWLIB/src/stm32f4xx_flash.c **** FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
 828:./FWLIB/src/stm32f4xx_flash.c **** {
 829:./FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 830:./FWLIB/src/stm32f4xx_flash.c **** 
 831:./FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
 832:./FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_ADDRESS(Address));
 833:./FWLIB/src/stm32f4xx_flash.c **** 
 834:./FWLIB/src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
 835:./FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
 836:./FWLIB/src/stm32f4xx_flash.c ****   
 837:./FWLIB/src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
 838:./FWLIB/src/stm32f4xx_flash.c ****   {
 839:./FWLIB/src/stm32f4xx_flash.c ****     /* if the previous operation is completed, proceed to program the new data */
 840:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= CR_PSIZE_MASK;
 841:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 842:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_PG;
 843:./FWLIB/src/stm32f4xx_flash.c ****   
 844:./FWLIB/src/stm32f4xx_flash.c ****     *(__IO uint16_t*)Address = Data;
 845:./FWLIB/src/stm32f4xx_flash.c ****         
 846:./FWLIB/src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 847:./FWLIB/src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation();
 848:./FWLIB/src/stm32f4xx_flash.c **** 
 849:./FWLIB/src/stm32f4xx_flash.c ****     /* if the program operation is completed, disable the PG Bit */
 850:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= (~FLASH_CR_PG);
ARM GAS  /tmp/ccBmD3SR.s 			page 21


 851:./FWLIB/src/stm32f4xx_flash.c ****   } 
 852:./FWLIB/src/stm32f4xx_flash.c ****   /* Return the Program Status */
 853:./FWLIB/src/stm32f4xx_flash.c ****   return status;
 854:./FWLIB/src/stm32f4xx_flash.c **** }
 855:./FWLIB/src/stm32f4xx_flash.c **** 
 856:./FWLIB/src/stm32f4xx_flash.c **** /**
 857:./FWLIB/src/stm32f4xx_flash.c ****   * @brief  Programs a byte (8-bit) at a specified address.
 858:./FWLIB/src/stm32f4xx_flash.c ****   * @note   This function can be used within all the device supply voltage ranges.  
 859:./FWLIB/src/stm32f4xx_flash.c ****   *
 860:./FWLIB/src/stm32f4xx_flash.c ****   * @note   If an erase and a program operations are requested simustaneously,    
 861:./FWLIB/src/stm32f4xx_flash.c ****   *         the erase operation is performed before the program one.
 862:./FWLIB/src/stm32f4xx_flash.c ****   * 
 863:./FWLIB/src/stm32f4xx_flash.c ****   * @param  Address: specifies the address to be programmed.
 864:./FWLIB/src/stm32f4xx_flash.c ****   *         This parameter can be any address in Program memory zone or in OTP zone.  
 865:./FWLIB/src/stm32f4xx_flash.c ****   * @param  Data: specifies the data to be programmed.
 866:./FWLIB/src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
 867:./FWLIB/src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
 868:./FWLIB/src/stm32f4xx_flash.c ****   */
 869:./FWLIB/src/stm32f4xx_flash.c **** FLASH_Status FLASH_ProgramByte(uint32_t Address, uint8_t Data)
 870:./FWLIB/src/stm32f4xx_flash.c **** {
 871:./FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 872:./FWLIB/src/stm32f4xx_flash.c **** 
 873:./FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
 874:./FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_ADDRESS(Address));
 875:./FWLIB/src/stm32f4xx_flash.c **** 
 876:./FWLIB/src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
 877:./FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
 878:./FWLIB/src/stm32f4xx_flash.c ****   
 879:./FWLIB/src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
 880:./FWLIB/src/stm32f4xx_flash.c ****   {
 881:./FWLIB/src/stm32f4xx_flash.c ****     /* if the previous operation is completed, proceed to program the new data */
 882:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= CR_PSIZE_MASK;
 883:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_PSIZE_BYTE;
 884:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_PG;
 885:./FWLIB/src/stm32f4xx_flash.c ****   
 886:./FWLIB/src/stm32f4xx_flash.c ****     *(__IO uint8_t*)Address = Data;
 887:./FWLIB/src/stm32f4xx_flash.c ****         
 888:./FWLIB/src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 889:./FWLIB/src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation();
 890:./FWLIB/src/stm32f4xx_flash.c **** 
 891:./FWLIB/src/stm32f4xx_flash.c ****     /* if the program operation is completed, disable the PG Bit */
 892:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= (~FLASH_CR_PG);
 893:./FWLIB/src/stm32f4xx_flash.c ****   } 
 894:./FWLIB/src/stm32f4xx_flash.c **** 
 895:./FWLIB/src/stm32f4xx_flash.c ****   /* Return the Program Status */
 896:./FWLIB/src/stm32f4xx_flash.c ****   return status;
 897:./FWLIB/src/stm32f4xx_flash.c **** }
 898:./FWLIB/src/stm32f4xx_flash.c **** 
 899:./FWLIB/src/stm32f4xx_flash.c **** /**
 900:./FWLIB/src/stm32f4xx_flash.c ****   * @}
 901:./FWLIB/src/stm32f4xx_flash.c ****   */
 902:./FWLIB/src/stm32f4xx_flash.c **** 
 903:./FWLIB/src/stm32f4xx_flash.c **** /** @defgroup FLASH_Group3 Option Bytes Programming functions
 904:./FWLIB/src/stm32f4xx_flash.c ****  *  @brief   Option Bytes Programming functions 
 905:./FWLIB/src/stm32f4xx_flash.c ****  *
 906:./FWLIB/src/stm32f4xx_flash.c **** @verbatim   
 907:./FWLIB/src/stm32f4xx_flash.c ****  ===============================================================================
ARM GAS  /tmp/ccBmD3SR.s 			page 22


 908:./FWLIB/src/stm32f4xx_flash.c ****                 ##### Option Bytes Programming functions #####
 909:./FWLIB/src/stm32f4xx_flash.c ****  ===============================================================================  
 910:./FWLIB/src/stm32f4xx_flash.c ****     [..]
 911:./FWLIB/src/stm32f4xx_flash.c ****       This group includes the following functions:
 912:./FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_OB_Unlock(void)
 913:./FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_OB_Lock(void)
 914:./FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_OB_WRPConfig(uint32_t OB_WRP, FunctionalState NewState)
 915:./FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_OB_WRP1Config(uint32_t OB_WRP, FunctionalState NewState)  
 916:./FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_OB_PCROPSelectionConfig(uint8_t OB_PCROPSelect)
 917:./FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_OB_PCROPConfig(uint32_t OB_PCROP, FunctionalState NewState)
 918:./FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_OB_PCROP1Config(uint32_t OB_PCROP, FunctionalState NewState) 
 919:./FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_OB_RDPConfig(uint8_t OB_RDP)
 920:./FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
 921:./FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_OB_BORConfig(uint8_t OB_BOR)
 922:./FWLIB/src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_ProgramOTP(uint32_t Address, uint32_t Data)
 923:./FWLIB/src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_OB_Launch(void)
 924:./FWLIB/src/stm32f4xx_flash.c ****       (+) uint32_t FLASH_OB_GetUser(void)
 925:./FWLIB/src/stm32f4xx_flash.c ****       (+) uint8_t FLASH_OB_GetWRP(void)
 926:./FWLIB/src/stm32f4xx_flash.c ****       (+) uint8_t FLASH_OB_GetWRP1(void)
 927:./FWLIB/src/stm32f4xx_flash.c ****       (+) uint8_t FLASH_OB_GetPCROP(void)
 928:./FWLIB/src/stm32f4xx_flash.c ****       (+) uint8_t FLASH_OB_GetPCROP1(void)
 929:./FWLIB/src/stm32f4xx_flash.c ****       (+) uint8_t FLASH_OB_GetRDP(void)
 930:./FWLIB/src/stm32f4xx_flash.c ****       (+) uint8_t FLASH_OB_GetBOR(void)
 931:./FWLIB/src/stm32f4xx_flash.c ****     [..]  
 932:./FWLIB/src/stm32f4xx_flash.c ****       The following function can be used only for STM32F42xxx/43xxx devices. 
 933:./FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_OB_BootConfig(uint8_t OB_BOOT)
 934:./FWLIB/src/stm32f4xx_flash.c ****     [..]   
 935:./FWLIB/src/stm32f4xx_flash.c ****      Any operation of erase or program should follow these steps:
 936:./FWLIB/src/stm32f4xx_flash.c ****       (#) Call the FLASH_OB_Unlock() function to enable the FLASH option control 
 937:./FWLIB/src/stm32f4xx_flash.c ****           register access
 938:./FWLIB/src/stm32f4xx_flash.c **** 
 939:./FWLIB/src/stm32f4xx_flash.c ****       (#) Call one or several functions to program the desired Option Bytes:
 940:./FWLIB/src/stm32f4xx_flash.c ****         (++) void FLASH_OB_WRPConfig(uint32_t OB_WRP, FunctionalState NewState) 
 941:./FWLIB/src/stm32f4xx_flash.c ****              => to Enable/Disable the desired sector write protection
 942:./FWLIB/src/stm32f4xx_flash.c ****         (++) void FLASH_OB_RDPConfig(uint8_t OB_RDP) => to set the desired read 
 943:./FWLIB/src/stm32f4xx_flash.c ****              Protection Level
 944:./FWLIB/src/stm32f4xx_flash.c ****         (++) void FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY) 
 945:./FWLIB/src/stm32f4xx_flash.c ****              => to configure the user Option Bytes.
 946:./FWLIB/src/stm32f4xx_flash.c ****         (++) void FLASH_OB_BORConfig(uint8_t OB_BOR) => to set the BOR Level 			 
 947:./FWLIB/src/stm32f4xx_flash.c **** 
 948:./FWLIB/src/stm32f4xx_flash.c ****       (#) Once all needed Option Bytes to be programmed are correctly written, 
 949:./FWLIB/src/stm32f4xx_flash.c ****           call the FLASH_OB_Launch() function to launch the Option Bytes 
 950:./FWLIB/src/stm32f4xx_flash.c ****           programming process.
 951:./FWLIB/src/stm32f4xx_flash.c ****      
 952:./FWLIB/src/stm32f4xx_flash.c ****       -@- When changing the IWDG mode from HW to SW or from SW to HW, a system 
 953:./FWLIB/src/stm32f4xx_flash.c ****           reset is needed to make the change effective.  
 954:./FWLIB/src/stm32f4xx_flash.c **** 
 955:./FWLIB/src/stm32f4xx_flash.c ****       (#) Call the FLASH_OB_Lock() function to disable the FLASH option control 
 956:./FWLIB/src/stm32f4xx_flash.c ****           register access (recommended to protect the Option Bytes against 
 957:./FWLIB/src/stm32f4xx_flash.c ****           possible unwanted operations)
 958:./FWLIB/src/stm32f4xx_flash.c ****     
 959:./FWLIB/src/stm32f4xx_flash.c **** @endverbatim
 960:./FWLIB/src/stm32f4xx_flash.c ****   * @{
 961:./FWLIB/src/stm32f4xx_flash.c ****   */
 962:./FWLIB/src/stm32f4xx_flash.c **** 
 963:./FWLIB/src/stm32f4xx_flash.c **** /**
 964:./FWLIB/src/stm32f4xx_flash.c ****   * @brief  Unlocks the FLASH Option Control Registers access.
ARM GAS  /tmp/ccBmD3SR.s 			page 23


 965:./FWLIB/src/stm32f4xx_flash.c ****   * @param  None
 966:./FWLIB/src/stm32f4xx_flash.c ****   * @retval None
 967:./FWLIB/src/stm32f4xx_flash.c ****   */
 968:./FWLIB/src/stm32f4xx_flash.c **** void FLASH_OB_Unlock(void)
 969:./FWLIB/src/stm32f4xx_flash.c **** {
 303              		.loc 1 969 0
 304              		.cfi_startproc
 305              		@ args = 0, pretend = 0, frame = 0
 306              		@ frame_needed = 0, uses_anonymous_args = 0
 307              		@ link register save eliminated.
 970:./FWLIB/src/stm32f4xx_flash.c ****   if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 308              		.loc 1 970 0
 309 0000 054B     		ldr	r3, .L38
 310 0002 5B69     		ldr	r3, [r3, #20]
 311 0004 13F0010F 		tst	r3, #1
 312 0008 05D0     		beq	.L36
 971:./FWLIB/src/stm32f4xx_flash.c ****   {
 972:./FWLIB/src/stm32f4xx_flash.c ****     /* Authorizes the Option Byte register programming */
 973:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->OPTKEYR = FLASH_OPT_KEY1;
 313              		.loc 1 973 0
 314 000a 034B     		ldr	r3, .L38
 315 000c 034A     		ldr	r2, .L38+4
 316 000e 9A60     		str	r2, [r3, #8]
 974:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->OPTKEYR = FLASH_OPT_KEY2;
 317              		.loc 1 974 0
 318 0010 02F14432 		add	r2, r2, #1145324612
 319 0014 9A60     		str	r2, [r3, #8]
 320              	.L36:
 975:./FWLIB/src/stm32f4xx_flash.c ****   }  
 976:./FWLIB/src/stm32f4xx_flash.c **** }
 321              		.loc 1 976 0
 322 0016 7047     		bx	lr
 323              	.L39:
 324              		.align	2
 325              	.L38:
 326 0018 003C0240 		.word	1073888256
 327 001c 3B2A1908 		.word	135866939
 328              		.cfi_endproc
 329              	.LFE128:
 331              		.section	.text.FLASH_OB_Lock,"ax",%progbits
 332              		.align	1
 333              		.global	FLASH_OB_Lock
 334              		.syntax unified
 335              		.thumb
 336              		.thumb_func
 337              		.fpu fpv4-sp-d16
 339              	FLASH_OB_Lock:
 340              	.LFB129:
 977:./FWLIB/src/stm32f4xx_flash.c **** 
 978:./FWLIB/src/stm32f4xx_flash.c **** /**
 979:./FWLIB/src/stm32f4xx_flash.c ****   * @brief  Locks the FLASH Option Control Registers access.
 980:./FWLIB/src/stm32f4xx_flash.c ****   * @param  None
 981:./FWLIB/src/stm32f4xx_flash.c ****   * @retval None
 982:./FWLIB/src/stm32f4xx_flash.c ****   */
 983:./FWLIB/src/stm32f4xx_flash.c **** void FLASH_OB_Lock(void)
 984:./FWLIB/src/stm32f4xx_flash.c **** {
 341              		.loc 1 984 0
ARM GAS  /tmp/ccBmD3SR.s 			page 24


 342              		.cfi_startproc
 343              		@ args = 0, pretend = 0, frame = 0
 344              		@ frame_needed = 0, uses_anonymous_args = 0
 345              		@ link register save eliminated.
 985:./FWLIB/src/stm32f4xx_flash.c ****   /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
 986:./FWLIB/src/stm32f4xx_flash.c ****   FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 346              		.loc 1 986 0
 347 0000 024A     		ldr	r2, .L41
 348 0002 5369     		ldr	r3, [r2, #20]
 349 0004 43F00103 		orr	r3, r3, #1
 350 0008 5361     		str	r3, [r2, #20]
 987:./FWLIB/src/stm32f4xx_flash.c **** }
 351              		.loc 1 987 0
 352 000a 7047     		bx	lr
 353              	.L42:
 354              		.align	2
 355              	.L41:
 356 000c 003C0240 		.word	1073888256
 357              		.cfi_endproc
 358              	.LFE129:
 360              		.section	.text.FLASH_OB_PCROPSelectionConfig,"ax",%progbits
 361              		.align	1
 362              		.global	FLASH_OB_PCROPSelectionConfig
 363              		.syntax unified
 364              		.thumb
 365              		.thumb_func
 366              		.fpu fpv4-sp-d16
 368              	FLASH_OB_PCROPSelectionConfig:
 369              	.LFB132:
 988:./FWLIB/src/stm32f4xx_flash.c **** 
 989:./FWLIB/src/stm32f4xx_flash.c **** /**
 990:./FWLIB/src/stm32f4xx_flash.c ****   * @brief  Enables or disables the write protection of the desired sectors, for the first
 991:./FWLIB/src/stm32f4xx_flash.c ****   *         1 Mb of the Flash  
 992:./FWLIB/src/stm32f4xx_flash.c ****   *
 993:./FWLIB/src/stm32f4xx_flash.c ****   * @note   When the memory read protection level is selected (RDP level = 1), 
 994:./FWLIB/src/stm32f4xx_flash.c ****   *         it is not possible to program or erase the flash sector i if CortexM4  
 995:./FWLIB/src/stm32f4xx_flash.c ****   *         debug features are connected or boot code is executed in RAM, even if nWRPi = 1 
 996:./FWLIB/src/stm32f4xx_flash.c ****   * @note   Active value of nWRPi bits is inverted when PCROP mode is active (SPRMOD =1).   
 997:./FWLIB/src/stm32f4xx_flash.c ****   * 
 998:./FWLIB/src/stm32f4xx_flash.c ****   * @param  OB_WRP: specifies the sector(s) to be write protected or unprotected.
 999:./FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1000:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_WRP: A value between OB_WRP_Sector0 and OB_WRP_Sector11                     
1001:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_WRP_Sector_All
1002:./FWLIB/src/stm32f4xx_flash.c ****   * @param  Newstate: new state of the Write Protection.
1003:./FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be: ENABLE or DISABLE.
1004:./FWLIB/src/stm32f4xx_flash.c ****   * @retval None  
1005:./FWLIB/src/stm32f4xx_flash.c ****   */
1006:./FWLIB/src/stm32f4xx_flash.c **** void FLASH_OB_WRPConfig(uint32_t OB_WRP, FunctionalState NewState)
1007:./FWLIB/src/stm32f4xx_flash.c **** { 
1008:./FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
1009:./FWLIB/src/stm32f4xx_flash.c ****   
1010:./FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
1011:./FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_OB_WRP(OB_WRP));
1012:./FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1013:./FWLIB/src/stm32f4xx_flash.c ****     
1014:./FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
1015:./FWLIB/src/stm32f4xx_flash.c **** 
ARM GAS  /tmp/ccBmD3SR.s 			page 25


1016:./FWLIB/src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
1017:./FWLIB/src/stm32f4xx_flash.c ****   { 
1018:./FWLIB/src/stm32f4xx_flash.c ****     if(NewState != DISABLE)
1019:./FWLIB/src/stm32f4xx_flash.c ****     {
1020:./FWLIB/src/stm32f4xx_flash.c ****       *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_WRP);
1021:./FWLIB/src/stm32f4xx_flash.c ****     }
1022:./FWLIB/src/stm32f4xx_flash.c ****     else
1023:./FWLIB/src/stm32f4xx_flash.c ****     {
1024:./FWLIB/src/stm32f4xx_flash.c ****       *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
1025:./FWLIB/src/stm32f4xx_flash.c ****     }
1026:./FWLIB/src/stm32f4xx_flash.c ****   }
1027:./FWLIB/src/stm32f4xx_flash.c **** }
1028:./FWLIB/src/stm32f4xx_flash.c **** 
1029:./FWLIB/src/stm32f4xx_flash.c **** /**
1030:./FWLIB/src/stm32f4xx_flash.c ****   * @brief  Enables or disables the write protection of the desired sectors, for the second
1031:./FWLIB/src/stm32f4xx_flash.c ****   *         1 Mb of the Flash  
1032:./FWLIB/src/stm32f4xx_flash.c ****   *           
1033:./FWLIB/src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
1034:./FWLIB/src/stm32f4xx_flash.c ****   *   
1035:./FWLIB/src/stm32f4xx_flash.c ****   * @note   When the memory read out protection is selected (RDP level = 1), 
1036:./FWLIB/src/stm32f4xx_flash.c ****   *         it is not possible to program or erase the flash sector i if CortexM4  
1037:./FWLIB/src/stm32f4xx_flash.c ****   *         debug features are connected or boot code is executed in RAM, even if nWRPi = 1 
1038:./FWLIB/src/stm32f4xx_flash.c ****   * @note   Active value of nWRPi bits is inverted when PCROP mode is active (SPRMOD =1).      
1039:./FWLIB/src/stm32f4xx_flash.c ****   * 
1040:./FWLIB/src/stm32f4xx_flash.c ****   * @param  OB_WRP: specifies the sector(s) to be write protected or unprotected.
1041:./FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1042:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_WRP: A value between OB_WRP_Sector12 and OB_WRP_Sector23
1043:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_WRP_Sector_All                        
1044:./FWLIB/src/stm32f4xx_flash.c ****   * @param  Newstate: new state of the Write Protection.
1045:./FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be: ENABLE or DISABLE.
1046:./FWLIB/src/stm32f4xx_flash.c ****   * @retval None  
1047:./FWLIB/src/stm32f4xx_flash.c ****   */
1048:./FWLIB/src/stm32f4xx_flash.c **** void FLASH_OB_WRP1Config(uint32_t OB_WRP, FunctionalState NewState)
1049:./FWLIB/src/stm32f4xx_flash.c **** { 
1050:./FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
1051:./FWLIB/src/stm32f4xx_flash.c ****   
1052:./FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
1053:./FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_OB_WRP(OB_WRP));
1054:./FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1055:./FWLIB/src/stm32f4xx_flash.c ****     
1056:./FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
1057:./FWLIB/src/stm32f4xx_flash.c **** 
1058:./FWLIB/src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
1059:./FWLIB/src/stm32f4xx_flash.c ****   { 
1060:./FWLIB/src/stm32f4xx_flash.c ****     if(NewState != DISABLE)
1061:./FWLIB/src/stm32f4xx_flash.c ****     {
1062:./FWLIB/src/stm32f4xx_flash.c ****       *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS &= (~OB_WRP);
1063:./FWLIB/src/stm32f4xx_flash.c ****     }
1064:./FWLIB/src/stm32f4xx_flash.c ****     else
1065:./FWLIB/src/stm32f4xx_flash.c ****     {
1066:./FWLIB/src/stm32f4xx_flash.c ****       *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
1067:./FWLIB/src/stm32f4xx_flash.c ****     }
1068:./FWLIB/src/stm32f4xx_flash.c ****   }
1069:./FWLIB/src/stm32f4xx_flash.c **** }
1070:./FWLIB/src/stm32f4xx_flash.c **** 
1071:./FWLIB/src/stm32f4xx_flash.c **** /**
1072:./FWLIB/src/stm32f4xx_flash.c ****   * @brief  Select the Protection Mode (SPRMOD). 
ARM GAS  /tmp/ccBmD3SR.s 			page 26


1073:./FWLIB/src/stm32f4xx_flash.c ****   * 
1074:./FWLIB/src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx and STM32F401xx/411xE devices.    
1075:./FWLIB/src/stm32f4xx_flash.c ****   * 
1076:./FWLIB/src/stm32f4xx_flash.c ****   * @note   After PCROP activation, Option Byte modification is not possible. 
1077:./FWLIB/src/stm32f4xx_flash.c ****   *         Exception made for the global Read Out Protection modification level (level1 to level0)
1078:./FWLIB/src/stm32f4xx_flash.c ****   * @note   Once SPRMOD bit is active unprotection of a protected sector is not possible 
1079:./FWLIB/src/stm32f4xx_flash.c ****   *   
1080:./FWLIB/src/stm32f4xx_flash.c ****   * @note   Read a protected sector will set RDERR Flag and write a protected sector will set WRPER
1081:./FWLIB/src/stm32f4xx_flash.c ****   *   
1082:./FWLIB/src/stm32f4xx_flash.c ****   * @note   Some Precautions should be taken when activating the PCROP feature :
1083:./FWLIB/src/stm32f4xx_flash.c ****   *         The active value of nWRPi bits is inverted when PCROP mode is active, this means if SPR
1084:./FWLIB/src/stm32f4xx_flash.c ****   *         and WRPi = 1 (default value), then the user sector i is read/write protected.
1085:./FWLIB/src/stm32f4xx_flash.c ****   *         In order to avoid activation of PCROP Mode for undesired sectors, please follow the
1086:./FWLIB/src/stm32f4xx_flash.c ****   *         below safety sequence :       
1087:./FWLIB/src/stm32f4xx_flash.c ****   *         - Disable PCROP for all Sectors using FLASH_OB_PCROPConfig(OB_PCROP_Sector_All, DISABLE
1088:./FWLIB/src/stm32f4xx_flash.c ****   *           for Bank1 or FLASH_OB_PCROP1Config(OB_PCROP_Sector_All, DISABLE) function for Bank2  
1089:./FWLIB/src/stm32f4xx_flash.c ****   *         - Enable PCROP for the desired Sector i using FLASH_OB_PCROPConfig(Sector i, ENABLE) fu
1090:./FWLIB/src/stm32f4xx_flash.c ****   *         - Activate the PCROP Mode FLASH_OB_PCROPSelectionConfig() function. 
1091:./FWLIB/src/stm32f4xx_flash.c ****   * 
1092:./FWLIB/src/stm32f4xx_flash.c ****   * @param  OB_PCROP:  Select the Protection Mode of nWPRi bits 
1093:./FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1094:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_PcROP_Disable: nWRPi control the write protection of respective user sectors
1095:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_PcROP_Enable: nWRPi control the  read&write protection (PCROP) of respective
1096:./FWLIB/src/stm32f4xx_flash.c ****   * @retval None
1097:./FWLIB/src/stm32f4xx_flash.c ****   */
1098:./FWLIB/src/stm32f4xx_flash.c **** void FLASH_OB_PCROPSelectionConfig(uint8_t OB_PcROP)
1099:./FWLIB/src/stm32f4xx_flash.c **** {  
 370              		.loc 1 1099 0
 371              		.cfi_startproc
 372              		@ args = 0, pretend = 0, frame = 0
 373              		@ frame_needed = 0, uses_anonymous_args = 0
 374              		@ link register save eliminated.
 375              	.LVL5:
1100:./FWLIB/src/stm32f4xx_flash.c ****   uint8_t optiontmp = 0xFF;
1101:./FWLIB/src/stm32f4xx_flash.c ****       
1102:./FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
1103:./FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_OB_PCROP_SELECT(OB_PcROP));
1104:./FWLIB/src/stm32f4xx_flash.c ****   
1105:./FWLIB/src/stm32f4xx_flash.c ****   /* Mask SPRMOD bit */
1106:./FWLIB/src/stm32f4xx_flash.c ****   optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE3_ADDRESS) & (uint8_t)0x7F); 
 376              		.loc 1 1106 0
 377 0000 034A     		ldr	r2, .L44
 378 0002 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 379 0004 03F07F03 		and	r3, r3, #127
 380              	.LVL6:
1107:./FWLIB/src/stm32f4xx_flash.c ****   /* Update Option Byte */
1108:./FWLIB/src/stm32f4xx_flash.c ****   *(__IO uint8_t *)OPTCR_BYTE3_ADDRESS = (uint8_t)(OB_PcROP | optiontmp); 
 381              		.loc 1 1108 0
 382 0008 1843     		orrs	r0, r0, r3
 383              	.LVL7:
 384 000a 1070     		strb	r0, [r2]
1109:./FWLIB/src/stm32f4xx_flash.c ****     
1110:./FWLIB/src/stm32f4xx_flash.c **** }
 385              		.loc 1 1110 0
 386 000c 7047     		bx	lr
 387              	.L45:
 388 000e 00BF     		.align	2
ARM GAS  /tmp/ccBmD3SR.s 			page 27


 389              	.L44:
 390 0010 173C0240 		.word	1073888279
 391              		.cfi_endproc
 392              	.LFE132:
 394              		.section	.text.FLASH_OB_BootConfig,"ax",%progbits
 395              		.align	1
 396              		.global	FLASH_OB_BootConfig
 397              		.syntax unified
 398              		.thumb
 399              		.thumb_func
 400              		.fpu fpv4-sp-d16
 402              	FLASH_OB_BootConfig:
 403              	.LFB137:
1111:./FWLIB/src/stm32f4xx_flash.c **** 
1112:./FWLIB/src/stm32f4xx_flash.c **** /**
1113:./FWLIB/src/stm32f4xx_flash.c ****   * @brief  Enables or disables the read/write protection (PCROP) of the desired 
1114:./FWLIB/src/stm32f4xx_flash.c ****   *         sectors, for the first 1 MB of the Flash.
1115:./FWLIB/src/stm32f4xx_flash.c ****   *           
1116:./FWLIB/src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx and STM32F401xx/411xE devices. 
1117:./FWLIB/src/stm32f4xx_flash.c ****   *   
1118:./FWLIB/src/stm32f4xx_flash.c ****   * @param  OB_PCROP: specifies the sector(s) to be read/write protected or unprotected.
1119:./FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1120:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_PCROP: A value between OB_PCROP_Sector0 and OB_PCROP_Sector11 for 
1121:./FWLIB/src/stm32f4xx_flash.c ****   *                           STM32F42xxx/43xxx devices and between OB_PCROP_Sector0 and 
1122:./FWLIB/src/stm32f4xx_flash.c ****   *                           OB_PCROP_Sector5 for STM32F401xx/411xE devices.
1123:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_PCROP_Sector_All
1124:./FWLIB/src/stm32f4xx_flash.c ****   * @param  Newstate: new state of the Write Protection.
1125:./FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be: ENABLE or DISABLE.
1126:./FWLIB/src/stm32f4xx_flash.c ****   * @retval None  
1127:./FWLIB/src/stm32f4xx_flash.c ****   */
1128:./FWLIB/src/stm32f4xx_flash.c **** void FLASH_OB_PCROPConfig(uint32_t OB_PCROP, FunctionalState NewState)
1129:./FWLIB/src/stm32f4xx_flash.c **** { 
1130:./FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
1131:./FWLIB/src/stm32f4xx_flash.c ****   
1132:./FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
1133:./FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_OB_PCROP(OB_PCROP));
1134:./FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1135:./FWLIB/src/stm32f4xx_flash.c ****     
1136:./FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
1137:./FWLIB/src/stm32f4xx_flash.c **** 
1138:./FWLIB/src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
1139:./FWLIB/src/stm32f4xx_flash.c ****   { 
1140:./FWLIB/src/stm32f4xx_flash.c ****     if(NewState != DISABLE)
1141:./FWLIB/src/stm32f4xx_flash.c ****     {
1142:./FWLIB/src/stm32f4xx_flash.c ****       *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)OB_PCROP;    
1143:./FWLIB/src/stm32f4xx_flash.c ****     }
1144:./FWLIB/src/stm32f4xx_flash.c ****     else
1145:./FWLIB/src/stm32f4xx_flash.c ****     {
1146:./FWLIB/src/stm32f4xx_flash.c ****       *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_PCROP);
1147:./FWLIB/src/stm32f4xx_flash.c ****     }
1148:./FWLIB/src/stm32f4xx_flash.c ****   }
1149:./FWLIB/src/stm32f4xx_flash.c **** }
1150:./FWLIB/src/stm32f4xx_flash.c **** 
1151:./FWLIB/src/stm32f4xx_flash.c **** /**
1152:./FWLIB/src/stm32f4xx_flash.c ****    * @brief Enables or disables the read/write protection (PCROP) of the desired 
1153:./FWLIB/src/stm32f4xx_flash.c ****   *         sectors
1154:./FWLIB/src/stm32f4xx_flash.c ****   *           
ARM GAS  /tmp/ccBmD3SR.s 			page 28


1155:./FWLIB/src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
1156:./FWLIB/src/stm32f4xx_flash.c ****   *   
1157:./FWLIB/src/stm32f4xx_flash.c ****   * @param  OB_PCROP: specifies the sector(s) to be read/write protected or unprotected.
1158:./FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1159:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_PCROP: A value between OB_PCROP_Sector12 and OB_PCROP_Sector23 
1160:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_PCROP_Sector_All
1161:./FWLIB/src/stm32f4xx_flash.c ****   * @param  Newstate: new state of the Write Protection.
1162:./FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be: ENABLE or DISABLE.
1163:./FWLIB/src/stm32f4xx_flash.c ****   * @retval None  
1164:./FWLIB/src/stm32f4xx_flash.c ****   */
1165:./FWLIB/src/stm32f4xx_flash.c **** void FLASH_OB_PCROP1Config(uint32_t OB_PCROP, FunctionalState NewState)
1166:./FWLIB/src/stm32f4xx_flash.c **** { 
1167:./FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
1168:./FWLIB/src/stm32f4xx_flash.c ****   
1169:./FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
1170:./FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_OB_PCROP(OB_PCROP));
1171:./FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1172:./FWLIB/src/stm32f4xx_flash.c ****     
1173:./FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
1174:./FWLIB/src/stm32f4xx_flash.c **** 
1175:./FWLIB/src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
1176:./FWLIB/src/stm32f4xx_flash.c ****   { 
1177:./FWLIB/src/stm32f4xx_flash.c ****     if(NewState != DISABLE)
1178:./FWLIB/src/stm32f4xx_flash.c ****     {
1179:./FWLIB/src/stm32f4xx_flash.c ****       *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS |= (uint16_t)OB_PCROP;
1180:./FWLIB/src/stm32f4xx_flash.c ****     }
1181:./FWLIB/src/stm32f4xx_flash.c ****     else
1182:./FWLIB/src/stm32f4xx_flash.c ****     {
1183:./FWLIB/src/stm32f4xx_flash.c ****       *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS &= (~OB_PCROP);
1184:./FWLIB/src/stm32f4xx_flash.c ****     }
1185:./FWLIB/src/stm32f4xx_flash.c ****   }
1186:./FWLIB/src/stm32f4xx_flash.c **** }
1187:./FWLIB/src/stm32f4xx_flash.c **** 
1188:./FWLIB/src/stm32f4xx_flash.c **** 
1189:./FWLIB/src/stm32f4xx_flash.c **** /**
1190:./FWLIB/src/stm32f4xx_flash.c ****   * @brief  Sets the read protection level.
1191:./FWLIB/src/stm32f4xx_flash.c ****   * @param  OB_RDP: specifies the read protection level.
1192:./FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1193:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_RDP_Level_0: No protection
1194:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_RDP_Level_1: Read protection of the memory
1195:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_RDP_Level_2: Full chip protection
1196:./FWLIB/src/stm32f4xx_flash.c ****   *   
1197:./FWLIB/src/stm32f4xx_flash.c ****   * /!\ Warning /!\ When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
1198:./FWLIB/src/stm32f4xx_flash.c ****   *    
1199:./FWLIB/src/stm32f4xx_flash.c ****   * @retval None
1200:./FWLIB/src/stm32f4xx_flash.c ****   */
1201:./FWLIB/src/stm32f4xx_flash.c **** void FLASH_OB_RDPConfig(uint8_t OB_RDP)
1202:./FWLIB/src/stm32f4xx_flash.c **** {
1203:./FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
1204:./FWLIB/src/stm32f4xx_flash.c **** 
1205:./FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
1206:./FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_OB_RDP(OB_RDP));
1207:./FWLIB/src/stm32f4xx_flash.c **** 
1208:./FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
1209:./FWLIB/src/stm32f4xx_flash.c **** 
1210:./FWLIB/src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
1211:./FWLIB/src/stm32f4xx_flash.c ****   {
ARM GAS  /tmp/ccBmD3SR.s 			page 29


1212:./FWLIB/src/stm32f4xx_flash.c ****     *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = OB_RDP;
1213:./FWLIB/src/stm32f4xx_flash.c **** 
1214:./FWLIB/src/stm32f4xx_flash.c ****   }
1215:./FWLIB/src/stm32f4xx_flash.c **** }
1216:./FWLIB/src/stm32f4xx_flash.c **** 
1217:./FWLIB/src/stm32f4xx_flash.c **** /**
1218:./FWLIB/src/stm32f4xx_flash.c ****   * @brief  Programs the FLASH User Option Byte: IWDG_SW / RST_STOP / RST_STDBY.    
1219:./FWLIB/src/stm32f4xx_flash.c ****   * @param  OB_IWDG: Selects the IWDG mode
1220:./FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1221:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_IWDG_SW: Software IWDG selected
1222:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_IWDG_HW: Hardware IWDG selected
1223:./FWLIB/src/stm32f4xx_flash.c ****   * @param  OB_STOP: Reset event when entering STOP mode.
1224:./FWLIB/src/stm32f4xx_flash.c ****   *          This parameter  can be one of the following values:
1225:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_STOP_NoRST: No reset generated when entering in STOP
1226:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_STOP_RST: Reset generated when entering in STOP
1227:./FWLIB/src/stm32f4xx_flash.c ****   * @param  OB_STDBY: Reset event when entering Standby mode.
1228:./FWLIB/src/stm32f4xx_flash.c ****   *          This parameter  can be one of the following values:
1229:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_STDBY_NoRST: No reset generated when entering in STANDBY
1230:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
1231:./FWLIB/src/stm32f4xx_flash.c ****   * @retval None
1232:./FWLIB/src/stm32f4xx_flash.c ****   */
1233:./FWLIB/src/stm32f4xx_flash.c **** void FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
1234:./FWLIB/src/stm32f4xx_flash.c **** {
1235:./FWLIB/src/stm32f4xx_flash.c ****   uint8_t optiontmp = 0xFF;
1236:./FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE; 
1237:./FWLIB/src/stm32f4xx_flash.c **** 
1238:./FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
1239:./FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
1240:./FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_OB_STOP_SOURCE(OB_STOP));
1241:./FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));
1242:./FWLIB/src/stm32f4xx_flash.c **** 
1243:./FWLIB/src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
1244:./FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
1245:./FWLIB/src/stm32f4xx_flash.c ****   
1246:./FWLIB/src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
1247:./FWLIB/src/stm32f4xx_flash.c ****   { 
1248:./FWLIB/src/stm32f4xx_flash.c **** #if defined (STM32F427_437xx) || defined (STM32F429_439xx)
1249:./FWLIB/src/stm32f4xx_flash.c ****     /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
1250:./FWLIB/src/stm32f4xx_flash.c ****     optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
1251:./FWLIB/src/stm32f4xx_flash.c **** #endif /* STM32F427_437xx ||  STM32F429_439xx */
1252:./FWLIB/src/stm32f4xx_flash.c **** 
1253:./FWLIB/src/stm32f4xx_flash.c **** #if defined (STM32F40_41xxx) || defined (STM32F401xx) || defined (STM32F411xE)
1254:./FWLIB/src/stm32f4xx_flash.c ****     /* Mask OPTLOCK, OPTSTRT and BOR_LEV bits */
1255:./FWLIB/src/stm32f4xx_flash.c ****     optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0F); 
1256:./FWLIB/src/stm32f4xx_flash.c **** #endif /* STM32F40_41xxx || STM32F401xx || STM32F411xE */ 
1257:./FWLIB/src/stm32f4xx_flash.c **** 
1258:./FWLIB/src/stm32f4xx_flash.c ****     /* Update User Option Byte */
1259:./FWLIB/src/stm32f4xx_flash.c ****     *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = OB_IWDG | (uint8_t)(OB_STDBY | (uint8_t)(OB_STOP | ((uin
1260:./FWLIB/src/stm32f4xx_flash.c ****   }  
1261:./FWLIB/src/stm32f4xx_flash.c **** }
1262:./FWLIB/src/stm32f4xx_flash.c **** 
1263:./FWLIB/src/stm32f4xx_flash.c **** /**
1264:./FWLIB/src/stm32f4xx_flash.c ****   * @brief  Configure the Dual Bank Boot.
1265:./FWLIB/src/stm32f4xx_flash.c ****   *   
1266:./FWLIB/src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
1267:./FWLIB/src/stm32f4xx_flash.c ****   *      
1268:./FWLIB/src/stm32f4xx_flash.c ****   * @param  OB_BOOT: specifies the Dual Bank Boot Option byte.
ARM GAS  /tmp/ccBmD3SR.s 			page 30


1269:./FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1270:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_Dual_BootEnabled: Dual Bank Boot Enable
1271:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_Dual_BootDisabled: Dual Bank Boot Disabled
1272:./FWLIB/src/stm32f4xx_flash.c ****   * @retval None
1273:./FWLIB/src/stm32f4xx_flash.c ****   */
1274:./FWLIB/src/stm32f4xx_flash.c **** void FLASH_OB_BootConfig(uint8_t OB_BOOT)
1275:./FWLIB/src/stm32f4xx_flash.c **** {
 404              		.loc 1 1275 0
 405              		.cfi_startproc
 406              		@ args = 0, pretend = 0, frame = 0
 407              		@ frame_needed = 0, uses_anonymous_args = 0
 408              		@ link register save eliminated.
 409              	.LVL8:
1276:./FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
1277:./FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_OB_BOOT(OB_BOOT));
1278:./FWLIB/src/stm32f4xx_flash.c **** 
1279:./FWLIB/src/stm32f4xx_flash.c ****   /* Set Dual Bank Boot */
1280:./FWLIB/src/stm32f4xx_flash.c ****   *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BFB2);
 410              		.loc 1 1280 0
 411 0000 044B     		ldr	r3, .L47
 412 0002 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 413 0004 02F0EF02 		and	r2, r2, #239
 414 0008 1A70     		strb	r2, [r3]
1281:./FWLIB/src/stm32f4xx_flash.c ****   *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= OB_BOOT;
 415              		.loc 1 1281 0
 416 000a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 417 000c 1043     		orrs	r0, r0, r2
 418              	.LVL9:
 419 000e 1870     		strb	r0, [r3]
1282:./FWLIB/src/stm32f4xx_flash.c **** 
1283:./FWLIB/src/stm32f4xx_flash.c **** }
 420              		.loc 1 1283 0
 421 0010 7047     		bx	lr
 422              	.L48:
 423 0012 00BF     		.align	2
 424              	.L47:
 425 0014 143C0240 		.word	1073888276
 426              		.cfi_endproc
 427              	.LFE137:
 429              		.section	.text.FLASH_OB_BORConfig,"ax",%progbits
 430              		.align	1
 431              		.global	FLASH_OB_BORConfig
 432              		.syntax unified
 433              		.thumb
 434              		.thumb_func
 435              		.fpu fpv4-sp-d16
 437              	FLASH_OB_BORConfig:
 438              	.LFB138:
1284:./FWLIB/src/stm32f4xx_flash.c **** 
1285:./FWLIB/src/stm32f4xx_flash.c **** /**
1286:./FWLIB/src/stm32f4xx_flash.c ****   * @brief  Sets the BOR Level. 
1287:./FWLIB/src/stm32f4xx_flash.c ****   * @param  OB_BOR: specifies the Option Bytes BOR Reset Level.
1288:./FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1289:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_BOR_LEVEL3: Supply voltage ranges from 2.7 to 3.6 V
1290:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
1291:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
1292:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
ARM GAS  /tmp/ccBmD3SR.s 			page 31


1293:./FWLIB/src/stm32f4xx_flash.c ****   * @retval None
1294:./FWLIB/src/stm32f4xx_flash.c ****   */
1295:./FWLIB/src/stm32f4xx_flash.c **** void FLASH_OB_BORConfig(uint8_t OB_BOR)
1296:./FWLIB/src/stm32f4xx_flash.c **** {
 439              		.loc 1 1296 0
 440              		.cfi_startproc
 441              		@ args = 0, pretend = 0, frame = 0
 442              		@ frame_needed = 0, uses_anonymous_args = 0
 443              		@ link register save eliminated.
 444              	.LVL10:
1297:./FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
1298:./FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_OB_BOR(OB_BOR));
1299:./FWLIB/src/stm32f4xx_flash.c **** 
1300:./FWLIB/src/stm32f4xx_flash.c ****   /* Set the BOR Level */
1301:./FWLIB/src/stm32f4xx_flash.c ****   *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 445              		.loc 1 1301 0
 446 0000 044B     		ldr	r3, .L50
 447 0002 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 448 0004 02F0F302 		and	r2, r2, #243
 449 0008 1A70     		strb	r2, [r3]
1302:./FWLIB/src/stm32f4xx_flash.c ****   *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= OB_BOR;
 450              		.loc 1 1302 0
 451 000a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 452 000c 1043     		orrs	r0, r0, r2
 453              	.LVL11:
 454 000e 1870     		strb	r0, [r3]
1303:./FWLIB/src/stm32f4xx_flash.c **** 
1304:./FWLIB/src/stm32f4xx_flash.c **** }
 455              		.loc 1 1304 0
 456 0010 7047     		bx	lr
 457              	.L51:
 458 0012 00BF     		.align	2
 459              	.L50:
 460 0014 143C0240 		.word	1073888276
 461              		.cfi_endproc
 462              	.LFE138:
 464              		.section	.text.FLASH_OB_GetUser,"ax",%progbits
 465              		.align	1
 466              		.global	FLASH_OB_GetUser
 467              		.syntax unified
 468              		.thumb
 469              		.thumb_func
 470              		.fpu fpv4-sp-d16
 472              	FLASH_OB_GetUser:
 473              	.LFB140:
1305:./FWLIB/src/stm32f4xx_flash.c **** 
1306:./FWLIB/src/stm32f4xx_flash.c **** /**
1307:./FWLIB/src/stm32f4xx_flash.c ****   * @brief  Launch the option byte loading.
1308:./FWLIB/src/stm32f4xx_flash.c ****   * @param  None
1309:./FWLIB/src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
1310:./FWLIB/src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
1311:./FWLIB/src/stm32f4xx_flash.c ****   */
1312:./FWLIB/src/stm32f4xx_flash.c **** FLASH_Status FLASH_OB_Launch(void)
1313:./FWLIB/src/stm32f4xx_flash.c **** {
1314:./FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
1315:./FWLIB/src/stm32f4xx_flash.c **** 
1316:./FWLIB/src/stm32f4xx_flash.c ****   /* Set the OPTSTRT bit in OPTCR register */
ARM GAS  /tmp/ccBmD3SR.s 			page 32


1317:./FWLIB/src/stm32f4xx_flash.c ****   *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
1318:./FWLIB/src/stm32f4xx_flash.c **** 
1319:./FWLIB/src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
1320:./FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
1321:./FWLIB/src/stm32f4xx_flash.c **** 
1322:./FWLIB/src/stm32f4xx_flash.c ****   return status;
1323:./FWLIB/src/stm32f4xx_flash.c **** }
1324:./FWLIB/src/stm32f4xx_flash.c **** 
1325:./FWLIB/src/stm32f4xx_flash.c **** /**
1326:./FWLIB/src/stm32f4xx_flash.c ****   * @brief  Returns the FLASH User Option Bytes values.
1327:./FWLIB/src/stm32f4xx_flash.c ****   * @param  None
1328:./FWLIB/src/stm32f4xx_flash.c ****   * @retval The FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
1329:./FWLIB/src/stm32f4xx_flash.c ****   *         and RST_STDBY(Bit2).
1330:./FWLIB/src/stm32f4xx_flash.c ****   */
1331:./FWLIB/src/stm32f4xx_flash.c **** uint8_t FLASH_OB_GetUser(void)
1332:./FWLIB/src/stm32f4xx_flash.c **** {
 474              		.loc 1 1332 0
 475              		.cfi_startproc
 476              		@ args = 0, pretend = 0, frame = 0
 477              		@ frame_needed = 0, uses_anonymous_args = 0
 478              		@ link register save eliminated.
1333:./FWLIB/src/stm32f4xx_flash.c ****   /* Return the User Option Byte */
1334:./FWLIB/src/stm32f4xx_flash.c ****   return (uint8_t)(FLASH->OPTCR >> 5);
 479              		.loc 1 1334 0
 480 0000 024B     		ldr	r3, .L53
 481 0002 5869     		ldr	r0, [r3, #20]
1335:./FWLIB/src/stm32f4xx_flash.c **** }
 482              		.loc 1 1335 0
 483 0004 C0F34710 		ubfx	r0, r0, #5, #8
 484 0008 7047     		bx	lr
 485              	.L54:
 486 000a 00BF     		.align	2
 487              	.L53:
 488 000c 003C0240 		.word	1073888256
 489              		.cfi_endproc
 490              	.LFE140:
 492              		.section	.text.FLASH_OB_GetWRP,"ax",%progbits
 493              		.align	1
 494              		.global	FLASH_OB_GetWRP
 495              		.syntax unified
 496              		.thumb
 497              		.thumb_func
 498              		.fpu fpv4-sp-d16
 500              	FLASH_OB_GetWRP:
 501              	.LFB141:
1336:./FWLIB/src/stm32f4xx_flash.c **** 
1337:./FWLIB/src/stm32f4xx_flash.c **** /**
1338:./FWLIB/src/stm32f4xx_flash.c ****   * @brief  Returns the FLASH Write Protection Option Bytes value.
1339:./FWLIB/src/stm32f4xx_flash.c ****   * @param  None
1340:./FWLIB/src/stm32f4xx_flash.c ****   * @retval The FLASH Write Protection  Option Bytes value
1341:./FWLIB/src/stm32f4xx_flash.c ****   */
1342:./FWLIB/src/stm32f4xx_flash.c **** uint16_t FLASH_OB_GetWRP(void)
1343:./FWLIB/src/stm32f4xx_flash.c **** {
 502              		.loc 1 1343 0
 503              		.cfi_startproc
 504              		@ args = 0, pretend = 0, frame = 0
 505              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccBmD3SR.s 			page 33


 506              		@ link register save eliminated.
1344:./FWLIB/src/stm32f4xx_flash.c ****   /* Return the FLASH write protection Register value */
1345:./FWLIB/src/stm32f4xx_flash.c ****   return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 507              		.loc 1 1345 0
 508 0000 014B     		ldr	r3, .L56
 509 0002 1888     		ldrh	r0, [r3]
1346:./FWLIB/src/stm32f4xx_flash.c **** }
 510              		.loc 1 1346 0
 511 0004 7047     		bx	lr
 512              	.L57:
 513 0006 00BF     		.align	2
 514              	.L56:
 515 0008 163C0240 		.word	1073888278
 516              		.cfi_endproc
 517              	.LFE141:
 519              		.section	.text.FLASH_OB_GetWRP1,"ax",%progbits
 520              		.align	1
 521              		.global	FLASH_OB_GetWRP1
 522              		.syntax unified
 523              		.thumb
 524              		.thumb_func
 525              		.fpu fpv4-sp-d16
 527              	FLASH_OB_GetWRP1:
 528              	.LFB142:
1347:./FWLIB/src/stm32f4xx_flash.c **** 
1348:./FWLIB/src/stm32f4xx_flash.c **** /**
1349:./FWLIB/src/stm32f4xx_flash.c ****   * @brief  Returns the FLASH Write Protection Option Bytes value.
1350:./FWLIB/src/stm32f4xx_flash.c ****   *   
1351:./FWLIB/src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
1352:./FWLIB/src/stm32f4xx_flash.c ****   *   
1353:./FWLIB/src/stm32f4xx_flash.c ****   * @param  None
1354:./FWLIB/src/stm32f4xx_flash.c ****   * @retval The FLASH Write Protection  Option Bytes value
1355:./FWLIB/src/stm32f4xx_flash.c ****   */
1356:./FWLIB/src/stm32f4xx_flash.c **** uint16_t FLASH_OB_GetWRP1(void)
1357:./FWLIB/src/stm32f4xx_flash.c **** {
 529              		.loc 1 1357 0
 530              		.cfi_startproc
 531              		@ args = 0, pretend = 0, frame = 0
 532              		@ frame_needed = 0, uses_anonymous_args = 0
 533              		@ link register save eliminated.
1358:./FWLIB/src/stm32f4xx_flash.c ****   /* Return the FLASH write protection Register value */
1359:./FWLIB/src/stm32f4xx_flash.c ****   return (*(__IO uint16_t *)(OPTCR1_BYTE2_ADDRESS));
 534              		.loc 1 1359 0
 535 0000 014B     		ldr	r3, .L59
 536 0002 1888     		ldrh	r0, [r3]
1360:./FWLIB/src/stm32f4xx_flash.c **** }
 537              		.loc 1 1360 0
 538 0004 7047     		bx	lr
 539              	.L60:
 540 0006 00BF     		.align	2
 541              	.L59:
 542 0008 1A3C0240 		.word	1073888282
 543              		.cfi_endproc
 544              	.LFE142:
 546              		.section	.text.FLASH_OB_GetPCROP,"ax",%progbits
 547              		.align	1
 548              		.global	FLASH_OB_GetPCROP
ARM GAS  /tmp/ccBmD3SR.s 			page 34


 549              		.syntax unified
 550              		.thumb
 551              		.thumb_func
 552              		.fpu fpv4-sp-d16
 554              	FLASH_OB_GetPCROP:
 555              	.LFB143:
1361:./FWLIB/src/stm32f4xx_flash.c **** 
1362:./FWLIB/src/stm32f4xx_flash.c **** /**
1363:./FWLIB/src/stm32f4xx_flash.c ****   * @brief  Returns the FLASH PC Read/Write Protection Option Bytes value.
1364:./FWLIB/src/stm32f4xx_flash.c ****   *   
1365:./FWLIB/src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices and STM32F401xx/411xE devi
1366:./FWLIB/src/stm32f4xx_flash.c ****   *   
1367:./FWLIB/src/stm32f4xx_flash.c ****   * @param  None
1368:./FWLIB/src/stm32f4xx_flash.c ****   * @retval The FLASH PC Read/Write Protection Option Bytes value
1369:./FWLIB/src/stm32f4xx_flash.c ****   */
1370:./FWLIB/src/stm32f4xx_flash.c **** uint16_t FLASH_OB_GetPCROP(void)
1371:./FWLIB/src/stm32f4xx_flash.c **** {
 556              		.loc 1 1371 0
 557              		.cfi_startproc
 558              		@ args = 0, pretend = 0, frame = 0
 559              		@ frame_needed = 0, uses_anonymous_args = 0
 560              		@ link register save eliminated.
1372:./FWLIB/src/stm32f4xx_flash.c ****   /* Return the FLASH PC Read/write protection Register value */
1373:./FWLIB/src/stm32f4xx_flash.c ****   return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 561              		.loc 1 1373 0
 562 0000 014B     		ldr	r3, .L62
 563 0002 1888     		ldrh	r0, [r3]
1374:./FWLIB/src/stm32f4xx_flash.c **** }
 564              		.loc 1 1374 0
 565 0004 7047     		bx	lr
 566              	.L63:
 567 0006 00BF     		.align	2
 568              	.L62:
 569 0008 163C0240 		.word	1073888278
 570              		.cfi_endproc
 571              	.LFE143:
 573              		.section	.text.FLASH_OB_GetPCROP1,"ax",%progbits
 574              		.align	1
 575              		.global	FLASH_OB_GetPCROP1
 576              		.syntax unified
 577              		.thumb
 578              		.thumb_func
 579              		.fpu fpv4-sp-d16
 581              	FLASH_OB_GetPCROP1:
 582              	.LFB144:
1375:./FWLIB/src/stm32f4xx_flash.c **** 
1376:./FWLIB/src/stm32f4xx_flash.c **** /**
1377:./FWLIB/src/stm32f4xx_flash.c ****   * @brief  Returns the FLASH PC Read/Write Protection Option Bytes value.
1378:./FWLIB/src/stm32f4xx_flash.c ****   *   
1379:./FWLIB/src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices. 
1380:./FWLIB/src/stm32f4xx_flash.c ****   *     
1381:./FWLIB/src/stm32f4xx_flash.c ****   * @param  None
1382:./FWLIB/src/stm32f4xx_flash.c ****   * @retval The FLASH PC Read/Write Protection Option Bytes value
1383:./FWLIB/src/stm32f4xx_flash.c ****   */
1384:./FWLIB/src/stm32f4xx_flash.c **** uint16_t FLASH_OB_GetPCROP1(void)
1385:./FWLIB/src/stm32f4xx_flash.c **** {
 583              		.loc 1 1385 0
ARM GAS  /tmp/ccBmD3SR.s 			page 35


 584              		.cfi_startproc
 585              		@ args = 0, pretend = 0, frame = 0
 586              		@ frame_needed = 0, uses_anonymous_args = 0
 587              		@ link register save eliminated.
1386:./FWLIB/src/stm32f4xx_flash.c ****   /* Return the FLASH write protection Register value */
1387:./FWLIB/src/stm32f4xx_flash.c ****   return (*(__IO uint16_t *)(OPTCR1_BYTE2_ADDRESS));
 588              		.loc 1 1387 0
 589 0000 014B     		ldr	r3, .L65
 590 0002 1888     		ldrh	r0, [r3]
1388:./FWLIB/src/stm32f4xx_flash.c **** }
 591              		.loc 1 1388 0
 592 0004 7047     		bx	lr
 593              	.L66:
 594 0006 00BF     		.align	2
 595              	.L65:
 596 0008 1A3C0240 		.word	1073888282
 597              		.cfi_endproc
 598              	.LFE144:
 600              		.section	.text.FLASH_OB_GetRDP,"ax",%progbits
 601              		.align	1
 602              		.global	FLASH_OB_GetRDP
 603              		.syntax unified
 604              		.thumb
 605              		.thumb_func
 606              		.fpu fpv4-sp-d16
 608              	FLASH_OB_GetRDP:
 609              	.LFB145:
1389:./FWLIB/src/stm32f4xx_flash.c **** 
1390:./FWLIB/src/stm32f4xx_flash.c **** /**
1391:./FWLIB/src/stm32f4xx_flash.c ****   * @brief  Returns the FLASH Read Protection level.
1392:./FWLIB/src/stm32f4xx_flash.c ****   * @param  None
1393:./FWLIB/src/stm32f4xx_flash.c ****   * @retval FLASH ReadOut Protection Status:
1394:./FWLIB/src/stm32f4xx_flash.c ****   *           - SET, when OB_RDP_Level_1 or OB_RDP_Level_2 is set
1395:./FWLIB/src/stm32f4xx_flash.c ****   *           - RESET, when OB_RDP_Level_0 is set
1396:./FWLIB/src/stm32f4xx_flash.c ****   */
1397:./FWLIB/src/stm32f4xx_flash.c **** FlagStatus FLASH_OB_GetRDP(void)
1398:./FWLIB/src/stm32f4xx_flash.c **** {
 610              		.loc 1 1398 0
 611              		.cfi_startproc
 612              		@ args = 0, pretend = 0, frame = 0
 613              		@ frame_needed = 0, uses_anonymous_args = 0
 614              		@ link register save eliminated.
 615              	.LVL12:
1399:./FWLIB/src/stm32f4xx_flash.c ****   FlagStatus readstatus = RESET;
1400:./FWLIB/src/stm32f4xx_flash.c **** 
1401:./FWLIB/src/stm32f4xx_flash.c ****   if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) != (uint8_t)OB_RDP_Level_0))
 616              		.loc 1 1401 0
 617 0000 044B     		ldr	r3, .L70
 618 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 619 0004 DBB2     		uxtb	r3, r3
 620 0006 AA2B     		cmp	r3, #170
 621 0008 01D0     		beq	.L69
1402:./FWLIB/src/stm32f4xx_flash.c ****   {
1403:./FWLIB/src/stm32f4xx_flash.c ****     readstatus = SET;
 622              		.loc 1 1403 0
 623 000a 0120     		movs	r0, #1
 624 000c 7047     		bx	lr
ARM GAS  /tmp/ccBmD3SR.s 			page 36


 625              	.L69:
1404:./FWLIB/src/stm32f4xx_flash.c ****   }
1405:./FWLIB/src/stm32f4xx_flash.c ****   else
1406:./FWLIB/src/stm32f4xx_flash.c ****   {
1407:./FWLIB/src/stm32f4xx_flash.c ****     readstatus = RESET;
 626              		.loc 1 1407 0
 627 000e 0020     		movs	r0, #0
 628              	.LVL13:
1408:./FWLIB/src/stm32f4xx_flash.c ****   }
1409:./FWLIB/src/stm32f4xx_flash.c ****   return readstatus;
1410:./FWLIB/src/stm32f4xx_flash.c **** }
 629              		.loc 1 1410 0
 630 0010 7047     		bx	lr
 631              	.L71:
 632 0012 00BF     		.align	2
 633              	.L70:
 634 0014 153C0240 		.word	1073888277
 635              		.cfi_endproc
 636              	.LFE145:
 638              		.section	.text.FLASH_OB_GetBOR,"ax",%progbits
 639              		.align	1
 640              		.global	FLASH_OB_GetBOR
 641              		.syntax unified
 642              		.thumb
 643              		.thumb_func
 644              		.fpu fpv4-sp-d16
 646              	FLASH_OB_GetBOR:
 647              	.LFB146:
1411:./FWLIB/src/stm32f4xx_flash.c **** 
1412:./FWLIB/src/stm32f4xx_flash.c **** /**
1413:./FWLIB/src/stm32f4xx_flash.c ****   * @brief  Returns the FLASH BOR level.
1414:./FWLIB/src/stm32f4xx_flash.c ****   * @param  None
1415:./FWLIB/src/stm32f4xx_flash.c ****   * @retval The FLASH BOR level:
1416:./FWLIB/src/stm32f4xx_flash.c ****   *           - OB_BOR_LEVEL3: Supply voltage ranges from 2.7 to 3.6 V
1417:./FWLIB/src/stm32f4xx_flash.c ****   *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
1418:./FWLIB/src/stm32f4xx_flash.c ****   *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
1419:./FWLIB/src/stm32f4xx_flash.c ****   *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
1420:./FWLIB/src/stm32f4xx_flash.c ****   */
1421:./FWLIB/src/stm32f4xx_flash.c **** uint8_t FLASH_OB_GetBOR(void)
1422:./FWLIB/src/stm32f4xx_flash.c **** {
 648              		.loc 1 1422 0
 649              		.cfi_startproc
 650              		@ args = 0, pretend = 0, frame = 0
 651              		@ frame_needed = 0, uses_anonymous_args = 0
 652              		@ link register save eliminated.
1423:./FWLIB/src/stm32f4xx_flash.c ****   /* Return the FLASH BOR level */
1424:./FWLIB/src/stm32f4xx_flash.c ****   return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 653              		.loc 1 1424 0
 654 0000 024B     		ldr	r3, .L73
 655 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
1425:./FWLIB/src/stm32f4xx_flash.c **** }
 656              		.loc 1 1425 0
 657 0004 00F00C00 		and	r0, r0, #12
 658 0008 7047     		bx	lr
 659              	.L74:
 660 000a 00BF     		.align	2
 661              	.L73:
ARM GAS  /tmp/ccBmD3SR.s 			page 37


 662 000c 143C0240 		.word	1073888276
 663              		.cfi_endproc
 664              	.LFE146:
 666              		.section	.text.FLASH_ITConfig,"ax",%progbits
 667              		.align	1
 668              		.global	FLASH_ITConfig
 669              		.syntax unified
 670              		.thumb
 671              		.thumb_func
 672              		.fpu fpv4-sp-d16
 674              	FLASH_ITConfig:
 675              	.LFB147:
1426:./FWLIB/src/stm32f4xx_flash.c **** 
1427:./FWLIB/src/stm32f4xx_flash.c **** /**
1428:./FWLIB/src/stm32f4xx_flash.c ****   * @}
1429:./FWLIB/src/stm32f4xx_flash.c ****   */
1430:./FWLIB/src/stm32f4xx_flash.c **** 
1431:./FWLIB/src/stm32f4xx_flash.c **** /** @defgroup FLASH_Group4 Interrupts and flags management functions
1432:./FWLIB/src/stm32f4xx_flash.c ****  *  @brief   Interrupts and flags management functions
1433:./FWLIB/src/stm32f4xx_flash.c ****  *
1434:./FWLIB/src/stm32f4xx_flash.c **** @verbatim   
1435:./FWLIB/src/stm32f4xx_flash.c ****  ===============================================================================
1436:./FWLIB/src/stm32f4xx_flash.c ****               ##### Interrupts and flags management functions #####
1437:./FWLIB/src/stm32f4xx_flash.c ****  ===============================================================================  
1438:./FWLIB/src/stm32f4xx_flash.c **** @endverbatim
1439:./FWLIB/src/stm32f4xx_flash.c ****   * @{
1440:./FWLIB/src/stm32f4xx_flash.c ****   */
1441:./FWLIB/src/stm32f4xx_flash.c **** 
1442:./FWLIB/src/stm32f4xx_flash.c **** /**
1443:./FWLIB/src/stm32f4xx_flash.c ****   * @brief  Enables or disables the specified FLASH interrupts.
1444:./FWLIB/src/stm32f4xx_flash.c ****   * @param  FLASH_IT: specifies the FLASH interrupt sources to be enabled or disabled.
1445:./FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be any combination of the following values:
1446:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_IT_ERR: FLASH Error Interrupt
1447:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_IT_EOP: FLASH end of operation Interrupt
1448:./FWLIB/src/stm32f4xx_flash.c ****   * @retval None 
1449:./FWLIB/src/stm32f4xx_flash.c ****   */
1450:./FWLIB/src/stm32f4xx_flash.c **** void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState)
1451:./FWLIB/src/stm32f4xx_flash.c **** {
 676              		.loc 1 1451 0
 677              		.cfi_startproc
 678              		@ args = 0, pretend = 0, frame = 0
 679              		@ frame_needed = 0, uses_anonymous_args = 0
 680              		@ link register save eliminated.
 681              	.LVL14:
1452:./FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
1453:./FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_IT(FLASH_IT)); 
1454:./FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1455:./FWLIB/src/stm32f4xx_flash.c **** 
1456:./FWLIB/src/stm32f4xx_flash.c ****   if(NewState != DISABLE)
 682              		.loc 1 1456 0
 683 0000 29B9     		cbnz	r1, .L78
1457:./FWLIB/src/stm32f4xx_flash.c ****   {
1458:./FWLIB/src/stm32f4xx_flash.c ****     /* Enable the interrupt sources */
1459:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_IT;
1460:./FWLIB/src/stm32f4xx_flash.c ****   }
1461:./FWLIB/src/stm32f4xx_flash.c ****   else
1462:./FWLIB/src/stm32f4xx_flash.c ****   {
ARM GAS  /tmp/ccBmD3SR.s 			page 38


1463:./FWLIB/src/stm32f4xx_flash.c ****     /* Disable the interrupt sources */
1464:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= ~(uint32_t)FLASH_IT;
 684              		.loc 1 1464 0
 685 0002 054A     		ldr	r2, .L79
 686 0004 1369     		ldr	r3, [r2, #16]
 687 0006 23EA0000 		bic	r0, r3, r0
 688              	.LVL15:
 689 000a 1061     		str	r0, [r2, #16]
1465:./FWLIB/src/stm32f4xx_flash.c ****   }
1466:./FWLIB/src/stm32f4xx_flash.c **** }
 690              		.loc 1 1466 0
 691 000c 7047     		bx	lr
 692              	.LVL16:
 693              	.L78:
1459:./FWLIB/src/stm32f4xx_flash.c ****   }
 694              		.loc 1 1459 0
 695 000e 024A     		ldr	r2, .L79
 696 0010 1369     		ldr	r3, [r2, #16]
 697 0012 1843     		orrs	r0, r0, r3
 698              	.LVL17:
 699 0014 1061     		str	r0, [r2, #16]
 700 0016 7047     		bx	lr
 701              	.L80:
 702              		.align	2
 703              	.L79:
 704 0018 003C0240 		.word	1073888256
 705              		.cfi_endproc
 706              	.LFE147:
 708              		.section	.text.FLASH_GetFlagStatus,"ax",%progbits
 709              		.align	1
 710              		.global	FLASH_GetFlagStatus
 711              		.syntax unified
 712              		.thumb
 713              		.thumb_func
 714              		.fpu fpv4-sp-d16
 716              	FLASH_GetFlagStatus:
 717              	.LFB148:
1467:./FWLIB/src/stm32f4xx_flash.c **** 
1468:./FWLIB/src/stm32f4xx_flash.c **** /**
1469:./FWLIB/src/stm32f4xx_flash.c ****   * @brief  Checks whether the specified FLASH flag is set or not.
1470:./FWLIB/src/stm32f4xx_flash.c ****   * @param  FLASH_FLAG: specifies the FLASH flag to check.
1471:./FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1472:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_EOP: FLASH End of Operation flag 
1473:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_OPERR: FLASH operation Error flag 
1474:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_WRPERR: FLASH Write protected error flag 
1475:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_PGAERR: FLASH Programming Alignment error flag
1476:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_PGPERR: FLASH Programming Parallelism error flag
1477:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag
1478:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_RDERR: FLASH (PCROP) Read Protection error flag (STM32F42xx/43xxx an
1479:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_BSY: FLASH Busy flag
1480:./FWLIB/src/stm32f4xx_flash.c ****   * @retval The new state of FLASH_FLAG (SET or RESET).
1481:./FWLIB/src/stm32f4xx_flash.c ****   */
1482:./FWLIB/src/stm32f4xx_flash.c **** FlagStatus FLASH_GetFlagStatus(uint32_t FLASH_FLAG)
1483:./FWLIB/src/stm32f4xx_flash.c **** {
 718              		.loc 1 1483 0
 719              		.cfi_startproc
 720              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccBmD3SR.s 			page 39


 721              		@ frame_needed = 0, uses_anonymous_args = 0
 722              		@ link register save eliminated.
 723              	.LVL18:
1484:./FWLIB/src/stm32f4xx_flash.c ****   FlagStatus bitstatus = RESET;
1485:./FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
1486:./FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG));
1487:./FWLIB/src/stm32f4xx_flash.c **** 
1488:./FWLIB/src/stm32f4xx_flash.c ****   if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
 724              		.loc 1 1488 0
 725 0000 034B     		ldr	r3, .L85
 726 0002 DB68     		ldr	r3, [r3, #12]
 727 0004 0342     		tst	r3, r0
 728 0006 01D1     		bne	.L84
1489:./FWLIB/src/stm32f4xx_flash.c ****   {
1490:./FWLIB/src/stm32f4xx_flash.c ****     bitstatus = SET;
1491:./FWLIB/src/stm32f4xx_flash.c ****   }
1492:./FWLIB/src/stm32f4xx_flash.c ****   else
1493:./FWLIB/src/stm32f4xx_flash.c ****   {
1494:./FWLIB/src/stm32f4xx_flash.c ****     bitstatus = RESET;
 729              		.loc 1 1494 0
 730 0008 0020     		movs	r0, #0
 731              	.LVL19:
1495:./FWLIB/src/stm32f4xx_flash.c ****   }
1496:./FWLIB/src/stm32f4xx_flash.c ****   /* Return the new state of FLASH_FLAG (SET or RESET) */
1497:./FWLIB/src/stm32f4xx_flash.c ****   return bitstatus; 
1498:./FWLIB/src/stm32f4xx_flash.c **** }
 732              		.loc 1 1498 0
 733 000a 7047     		bx	lr
 734              	.LVL20:
 735              	.L84:
1490:./FWLIB/src/stm32f4xx_flash.c ****   }
 736              		.loc 1 1490 0
 737 000c 0120     		movs	r0, #1
 738              	.LVL21:
 739 000e 7047     		bx	lr
 740              	.L86:
 741              		.align	2
 742              	.L85:
 743 0010 003C0240 		.word	1073888256
 744              		.cfi_endproc
 745              	.LFE148:
 747              		.section	.text.FLASH_ClearFlag,"ax",%progbits
 748              		.align	1
 749              		.global	FLASH_ClearFlag
 750              		.syntax unified
 751              		.thumb
 752              		.thumb_func
 753              		.fpu fpv4-sp-d16
 755              	FLASH_ClearFlag:
 756              	.LFB149:
1499:./FWLIB/src/stm32f4xx_flash.c **** 
1500:./FWLIB/src/stm32f4xx_flash.c **** /**
1501:./FWLIB/src/stm32f4xx_flash.c ****   * @brief  Clears the FLASH's pending flags.
1502:./FWLIB/src/stm32f4xx_flash.c ****   * @param  FLASH_FLAG: specifies the FLASH flags to clear.
1503:./FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be any combination of the following values:
1504:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_EOP: FLASH End of Operation flag 
1505:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_OPERR: FLASH operation Error flag 
ARM GAS  /tmp/ccBmD3SR.s 			page 40


1506:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_WRPERR: FLASH Write protected error flag 
1507:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_PGAERR: FLASH Programming Alignment error flag 
1508:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_PGPERR: FLASH Programming Parallelism error flag
1509:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag
1510:./FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_RDERR: FLASH Read Protection error flag (STM32F42xx/43xxx and STM32F
1511:./FWLIB/src/stm32f4xx_flash.c ****   * @retval None
1512:./FWLIB/src/stm32f4xx_flash.c ****   */
1513:./FWLIB/src/stm32f4xx_flash.c **** void FLASH_ClearFlag(uint32_t FLASH_FLAG)
1514:./FWLIB/src/stm32f4xx_flash.c **** {
 757              		.loc 1 1514 0
 758              		.cfi_startproc
 759              		@ args = 0, pretend = 0, frame = 0
 760              		@ frame_needed = 0, uses_anonymous_args = 0
 761              		@ link register save eliminated.
 762              	.LVL22:
1515:./FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
1516:./FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
1517:./FWLIB/src/stm32f4xx_flash.c ****   
1518:./FWLIB/src/stm32f4xx_flash.c ****   /* Clear the flags */
1519:./FWLIB/src/stm32f4xx_flash.c ****   FLASH->SR = FLASH_FLAG;
 763              		.loc 1 1519 0
 764 0000 014B     		ldr	r3, .L88
 765 0002 D860     		str	r0, [r3, #12]
1520:./FWLIB/src/stm32f4xx_flash.c **** }
 766              		.loc 1 1520 0
 767 0004 7047     		bx	lr
 768              	.L89:
 769 0006 00BF     		.align	2
 770              	.L88:
 771 0008 003C0240 		.word	1073888256
 772              		.cfi_endproc
 773              	.LFE149:
 775              		.section	.text.FLASH_GetStatus,"ax",%progbits
 776              		.align	1
 777              		.global	FLASH_GetStatus
 778              		.syntax unified
 779              		.thumb
 780              		.thumb_func
 781              		.fpu fpv4-sp-d16
 783              	FLASH_GetStatus:
 784              	.LFB150:
1521:./FWLIB/src/stm32f4xx_flash.c **** 
1522:./FWLIB/src/stm32f4xx_flash.c **** /**
1523:./FWLIB/src/stm32f4xx_flash.c ****   * @brief  Returns the FLASH Status.
1524:./FWLIB/src/stm32f4xx_flash.c ****   * @param  None
1525:./FWLIB/src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
1526:./FWLIB/src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP, FLASH_ERROR_RD, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
1527:./FWLIB/src/stm32f4xx_flash.c ****   */
1528:./FWLIB/src/stm32f4xx_flash.c **** FLASH_Status FLASH_GetStatus(void)
1529:./FWLIB/src/stm32f4xx_flash.c **** {
 785              		.loc 1 1529 0
 786              		.cfi_startproc
 787              		@ args = 0, pretend = 0, frame = 0
 788              		@ frame_needed = 0, uses_anonymous_args = 0
 789              		@ link register save eliminated.
 790              	.LVL23:
1530:./FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status flashstatus = FLASH_COMPLETE;
ARM GAS  /tmp/ccBmD3SR.s 			page 41


1531:./FWLIB/src/stm32f4xx_flash.c ****   
1532:./FWLIB/src/stm32f4xx_flash.c ****   if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 791              		.loc 1 1532 0
 792 0000 124B     		ldr	r3, .L97
 793 0002 DB68     		ldr	r3, [r3, #12]
 794 0004 13F4803F 		tst	r3, #65536
 795 0008 15D1     		bne	.L92
1533:./FWLIB/src/stm32f4xx_flash.c ****   {
1534:./FWLIB/src/stm32f4xx_flash.c ****     flashstatus = FLASH_BUSY;
1535:./FWLIB/src/stm32f4xx_flash.c ****   }
1536:./FWLIB/src/stm32f4xx_flash.c ****   else 
1537:./FWLIB/src/stm32f4xx_flash.c ****   {  
1538:./FWLIB/src/stm32f4xx_flash.c ****     if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 796              		.loc 1 1538 0
 797 000a 104B     		ldr	r3, .L97
 798 000c DB68     		ldr	r3, [r3, #12]
 799 000e 13F0100F 		tst	r3, #16
 800 0012 12D1     		bne	.L93
1539:./FWLIB/src/stm32f4xx_flash.c ****     { 
1540:./FWLIB/src/stm32f4xx_flash.c ****       flashstatus = FLASH_ERROR_WRP;
1541:./FWLIB/src/stm32f4xx_flash.c ****     }
1542:./FWLIB/src/stm32f4xx_flash.c ****     else
1543:./FWLIB/src/stm32f4xx_flash.c ****     {
1544:./FWLIB/src/stm32f4xx_flash.c ****       if((FLASH->SR & FLASH_FLAG_RDERR) != (uint32_t)0x00)
 801              		.loc 1 1544 0
 802 0014 0D4B     		ldr	r3, .L97
 803 0016 DB68     		ldr	r3, [r3, #12]
 804 0018 13F4807F 		tst	r3, #256
 805 001c 0FD1     		bne	.L94
1545:./FWLIB/src/stm32f4xx_flash.c ****       { 
1546:./FWLIB/src/stm32f4xx_flash.c ****         flashstatus = FLASH_ERROR_RD;
1547:./FWLIB/src/stm32f4xx_flash.c ****       } 
1548:./FWLIB/src/stm32f4xx_flash.c ****       else 
1549:./FWLIB/src/stm32f4xx_flash.c ****       {
1550:./FWLIB/src/stm32f4xx_flash.c ****         if((FLASH->SR & (uint32_t)0xEF) != (uint32_t)0x00)
 806              		.loc 1 1550 0
 807 001e 0B4B     		ldr	r3, .L97
 808 0020 DB68     		ldr	r3, [r3, #12]
 809 0022 13F0EF0F 		tst	r3, #239
 810 0026 0CD1     		bne	.L95
1551:./FWLIB/src/stm32f4xx_flash.c ****         {
1552:./FWLIB/src/stm32f4xx_flash.c ****           flashstatus = FLASH_ERROR_PROGRAM; 
1553:./FWLIB/src/stm32f4xx_flash.c ****         }
1554:./FWLIB/src/stm32f4xx_flash.c ****         else
1555:./FWLIB/src/stm32f4xx_flash.c ****         {
1556:./FWLIB/src/stm32f4xx_flash.c ****           if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 811              		.loc 1 1556 0
 812 0028 084B     		ldr	r3, .L97
 813 002a DB68     		ldr	r3, [r3, #12]
 814 002c 13F0020F 		tst	r3, #2
 815 0030 09D0     		beq	.L96
1557:./FWLIB/src/stm32f4xx_flash.c ****           {
1558:./FWLIB/src/stm32f4xx_flash.c ****             flashstatus = FLASH_ERROR_OPERATION;
 816              		.loc 1 1558 0
 817 0032 0820     		movs	r0, #8
 818 0034 7047     		bx	lr
 819              	.L92:
ARM GAS  /tmp/ccBmD3SR.s 			page 42


1534:./FWLIB/src/stm32f4xx_flash.c ****   }
 820              		.loc 1 1534 0
 821 0036 0120     		movs	r0, #1
 822 0038 7047     		bx	lr
 823              	.L93:
1540:./FWLIB/src/stm32f4xx_flash.c ****     }
 824              		.loc 1 1540 0
 825 003a 0620     		movs	r0, #6
 826 003c 7047     		bx	lr
 827              	.L94:
1546:./FWLIB/src/stm32f4xx_flash.c ****       } 
 828              		.loc 1 1546 0
 829 003e 0220     		movs	r0, #2
 830 0040 7047     		bx	lr
 831              	.L95:
1552:./FWLIB/src/stm32f4xx_flash.c ****         }
 832              		.loc 1 1552 0
 833 0042 0720     		movs	r0, #7
 834 0044 7047     		bx	lr
 835              	.L96:
1559:./FWLIB/src/stm32f4xx_flash.c ****           }
1560:./FWLIB/src/stm32f4xx_flash.c ****           else
1561:./FWLIB/src/stm32f4xx_flash.c ****           {
1562:./FWLIB/src/stm32f4xx_flash.c ****             flashstatus = FLASH_COMPLETE;
 836              		.loc 1 1562 0
 837 0046 0920     		movs	r0, #9
 838              	.LVL24:
1563:./FWLIB/src/stm32f4xx_flash.c ****           }
1564:./FWLIB/src/stm32f4xx_flash.c ****         }
1565:./FWLIB/src/stm32f4xx_flash.c ****       }
1566:./FWLIB/src/stm32f4xx_flash.c ****     }
1567:./FWLIB/src/stm32f4xx_flash.c ****   }
1568:./FWLIB/src/stm32f4xx_flash.c ****   /* Return the FLASH Status */
1569:./FWLIB/src/stm32f4xx_flash.c ****   return flashstatus;
1570:./FWLIB/src/stm32f4xx_flash.c **** }
 839              		.loc 1 1570 0
 840 0048 7047     		bx	lr
 841              	.L98:
 842 004a 00BF     		.align	2
 843              	.L97:
 844 004c 003C0240 		.word	1073888256
 845              		.cfi_endproc
 846              	.LFE150:
 848              		.section	.text.FLASH_WaitForLastOperation,"ax",%progbits
 849              		.align	1
 850              		.global	FLASH_WaitForLastOperation
 851              		.syntax unified
 852              		.thumb
 853              		.thumb_func
 854              		.fpu fpv4-sp-d16
 856              	FLASH_WaitForLastOperation:
 857              	.LFB151:
1571:./FWLIB/src/stm32f4xx_flash.c **** 
1572:./FWLIB/src/stm32f4xx_flash.c **** /**
1573:./FWLIB/src/stm32f4xx_flash.c ****   * @brief  Waits for a FLASH operation to complete.
1574:./FWLIB/src/stm32f4xx_flash.c ****   * @param  None
1575:./FWLIB/src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
ARM GAS  /tmp/ccBmD3SR.s 			page 43


1576:./FWLIB/src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
1577:./FWLIB/src/stm32f4xx_flash.c ****   */
1578:./FWLIB/src/stm32f4xx_flash.c **** FLASH_Status FLASH_WaitForLastOperation(void)
1579:./FWLIB/src/stm32f4xx_flash.c **** { 
 858              		.loc 1 1579 0
 859              		.cfi_startproc
 860              		@ args = 0, pretend = 0, frame = 8
 861              		@ frame_needed = 0, uses_anonymous_args = 0
 862 0000 00B5     		push	{lr}
 863              	.LCFI0:
 864              		.cfi_def_cfa_offset 4
 865              		.cfi_offset 14, -4
 866 0002 83B0     		sub	sp, sp, #12
 867              	.LCFI1:
 868              		.cfi_def_cfa_offset 16
1580:./FWLIB/src/stm32f4xx_flash.c ****   __IO FLASH_Status status = FLASH_COMPLETE;
 869              		.loc 1 1580 0
 870 0004 0923     		movs	r3, #9
 871 0006 8DF80730 		strb	r3, [sp, #7]
1581:./FWLIB/src/stm32f4xx_flash.c ****    
1582:./FWLIB/src/stm32f4xx_flash.c ****   /* Check for the FLASH Status */
1583:./FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_GetStatus();
 872              		.loc 1 1583 0
 873 000a FFF7FEFF 		bl	FLASH_GetStatus
 874              	.LVL25:
 875 000e 8DF80700 		strb	r0, [sp, #7]
1584:./FWLIB/src/stm32f4xx_flash.c **** 
1585:./FWLIB/src/stm32f4xx_flash.c ****   /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
1586:./FWLIB/src/stm32f4xx_flash.c ****      Even if the FLASH operation fails, the BUSY flag will be reset and an error
1587:./FWLIB/src/stm32f4xx_flash.c ****      flag will be set */
1588:./FWLIB/src/stm32f4xx_flash.c ****   while(status == FLASH_BUSY)
 876              		.loc 1 1588 0
 877 0012 03E0     		b	.L100
 878              	.L101:
1589:./FWLIB/src/stm32f4xx_flash.c ****   {
1590:./FWLIB/src/stm32f4xx_flash.c ****     status = FLASH_GetStatus();
 879              		.loc 1 1590 0
 880 0014 FFF7FEFF 		bl	FLASH_GetStatus
 881              	.LVL26:
 882 0018 8DF80700 		strb	r0, [sp, #7]
 883              	.L100:
1588:./FWLIB/src/stm32f4xx_flash.c ****   {
 884              		.loc 1 1588 0
 885 001c 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 886 0020 DBB2     		uxtb	r3, r3
 887 0022 012B     		cmp	r3, #1
 888 0024 F6D0     		beq	.L101
1591:./FWLIB/src/stm32f4xx_flash.c ****   }
1592:./FWLIB/src/stm32f4xx_flash.c ****   /* Return the operation status */
1593:./FWLIB/src/stm32f4xx_flash.c ****   return status;
 889              		.loc 1 1593 0
 890 0026 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
1594:./FWLIB/src/stm32f4xx_flash.c **** }
 891              		.loc 1 1594 0
 892 002a 03B0     		add	sp, sp, #12
 893              	.LCFI2:
 894              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccBmD3SR.s 			page 44


 895              		@ sp needed
 896 002c 5DF804FB 		ldr	pc, [sp], #4
 897              		.cfi_endproc
 898              	.LFE151:
 900              		.section	.text.FLASH_EraseSector,"ax",%progbits
 901              		.align	1
 902              		.global	FLASH_EraseSector
 903              		.syntax unified
 904              		.thumb
 905              		.thumb_func
 906              		.fpu fpv4-sp-d16
 908              	FLASH_EraseSector:
 909              	.LFB120:
 470:./FWLIB/src/stm32f4xx_flash.c ****   uint32_t tmp_psize = 0x0;
 910              		.loc 1 470 0
 911              		.cfi_startproc
 912              		@ args = 0, pretend = 0, frame = 0
 913              		@ frame_needed = 0, uses_anonymous_args = 0
 914              	.LVL27:
 915 0000 70B5     		push	{r4, r5, r6, lr}
 916              	.LCFI3:
 917              		.cfi_def_cfa_offset 16
 918              		.cfi_offset 4, -16
 919              		.cfi_offset 5, -12
 920              		.cfi_offset 6, -8
 921              		.cfi_offset 14, -4
 922 0002 0546     		mov	r5, r0
 923              	.LVL28:
 478:./FWLIB/src/stm32f4xx_flash.c ****   {
 924              		.loc 1 478 0
 925 0004 49B1     		cbz	r1, .L106
 482:./FWLIB/src/stm32f4xx_flash.c ****   {
 926              		.loc 1 482 0
 927 0006 0129     		cmp	r1, #1
 928 0008 0DD0     		beq	.L107
 486:./FWLIB/src/stm32f4xx_flash.c ****   {
 929              		.loc 1 486 0
 930 000a 0229     		cmp	r1, #2
 931 000c 02D0     		beq	.L110
 492:./FWLIB/src/stm32f4xx_flash.c ****   }
 932              		.loc 1 492 0
 933 000e 4FF44076 		mov	r6, #768
 934 0012 03E0     		b	.L104
 935              	.L110:
 488:./FWLIB/src/stm32f4xx_flash.c ****   }
 936              		.loc 1 488 0
 937 0014 4FF40076 		mov	r6, #512
 938 0018 00E0     		b	.L104
 939              	.L106:
 480:./FWLIB/src/stm32f4xx_flash.c ****   }
 940              		.loc 1 480 0
 941 001a 0026     		movs	r6, #0
 942              	.L104:
 943              	.LVL29:
 495:./FWLIB/src/stm32f4xx_flash.c ****   
 944              		.loc 1 495 0
 945 001c FFF7FEFF 		bl	FLASH_WaitForLastOperation
ARM GAS  /tmp/ccBmD3SR.s 			page 45


 946              	.LVL30:
 497:./FWLIB/src/stm32f4xx_flash.c ****   { 
 947              		.loc 1 497 0
 948 0020 0928     		cmp	r0, #9
 949 0022 03D0     		beq	.L111
 950              	.LVL31:
 951              	.L105:
 515:./FWLIB/src/stm32f4xx_flash.c **** 
 952              		.loc 1 515 0
 953 0024 70BD     		pop	{r4, r5, r6, pc}
 954              	.LVL32:
 955              	.L107:
 484:./FWLIB/src/stm32f4xx_flash.c ****   }
 956              		.loc 1 484 0
 957 0026 4FF48076 		mov	r6, #256
 958 002a F7E7     		b	.L104
 959              	.LVL33:
 960              	.L111:
 500:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= tmp_psize;
 961              		.loc 1 500 0
 962 002c 0F4C     		ldr	r4, .L112
 963 002e 2369     		ldr	r3, [r4, #16]
 964 0030 23F44073 		bic	r3, r3, #768
 965 0034 2361     		str	r3, [r4, #16]
 501:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= SECTOR_MASK;
 966              		.loc 1 501 0
 967 0036 2369     		ldr	r3, [r4, #16]
 968 0038 1E43     		orrs	r6, r6, r3
 969              	.LVL34:
 970 003a 2661     		str	r6, [r4, #16]
 502:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 971              		.loc 1 502 0
 972 003c 2369     		ldr	r3, [r4, #16]
 973 003e 23F0F803 		bic	r3, r3, #248
 974 0042 2361     		str	r3, [r4, #16]
 503:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_STRT;
 975              		.loc 1 503 0
 976 0044 2069     		ldr	r0, [r4, #16]
 977              	.LVL35:
 978 0046 2843     		orrs	r0, r0, r5
 979 0048 40F00200 		orr	r0, r0, #2
 980 004c 2061     		str	r0, [r4, #16]
 504:./FWLIB/src/stm32f4xx_flash.c ****     
 981              		.loc 1 504 0
 982 004e 2369     		ldr	r3, [r4, #16]
 983 0050 43F48033 		orr	r3, r3, #65536
 984 0054 2361     		str	r3, [r4, #16]
 507:./FWLIB/src/stm32f4xx_flash.c ****     
 985              		.loc 1 507 0
 986 0056 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 987              	.LVL36:
 510:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= SECTOR_MASK; 
 988              		.loc 1 510 0
 989 005a 2369     		ldr	r3, [r4, #16]
 990 005c 23F00203 		bic	r3, r3, #2
 991 0060 2361     		str	r3, [r4, #16]
 511:./FWLIB/src/stm32f4xx_flash.c ****   }
ARM GAS  /tmp/ccBmD3SR.s 			page 46


 992              		.loc 1 511 0
 993 0062 2369     		ldr	r3, [r4, #16]
 994 0064 23F0F803 		bic	r3, r3, #248
 995 0068 2361     		str	r3, [r4, #16]
 996 006a DBE7     		b	.L105
 997              	.L113:
 998              		.align	2
 999              	.L112:
 1000 006c 003C0240 		.word	1073888256
 1001              		.cfi_endproc
 1002              	.LFE120:
 1004              		.section	.text.FLASH_EraseAllSectors,"ax",%progbits
 1005              		.align	1
 1006              		.global	FLASH_EraseAllSectors
 1007              		.syntax unified
 1008              		.thumb
 1009              		.thumb_func
 1010              		.fpu fpv4-sp-d16
 1012              	FLASH_EraseAllSectors:
 1013              	.LFB121:
 538:./FWLIB/src/stm32f4xx_flash.c ****   uint32_t tmp_psize = 0x0;
 1014              		.loc 1 538 0
 1015              		.cfi_startproc
 1016              		@ args = 0, pretend = 0, frame = 0
 1017              		@ frame_needed = 0, uses_anonymous_args = 0
 1018              	.LVL37:
 1019 0000 10B5     		push	{r4, lr}
 1020              	.LCFI4:
 1021              		.cfi_def_cfa_offset 8
 1022              		.cfi_offset 4, -8
 1023              		.cfi_offset 14, -4
 1024 0002 0446     		mov	r4, r0
 1025              	.LVL38:
 543:./FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 1026              		.loc 1 543 0
 1027 0004 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1028              	.LVL39:
 546:./FWLIB/src/stm32f4xx_flash.c ****   {
 1029              		.loc 1 546 0
 1030 0008 4CB1     		cbz	r4, .L117
 550:./FWLIB/src/stm32f4xx_flash.c ****   {
 1031              		.loc 1 550 0
 1032 000a 012C     		cmp	r4, #1
 1033 000c 0BD0     		beq	.L118
 554:./FWLIB/src/stm32f4xx_flash.c ****   {
 1034              		.loc 1 554 0
 1035 000e 022C     		cmp	r4, #2
 1036 0010 02D0     		beq	.L121
 560:./FWLIB/src/stm32f4xx_flash.c ****   }  
 1037              		.loc 1 560 0
 1038 0012 4FF44073 		mov	r3, #768
 1039 0016 03E0     		b	.L115
 1040              	.L121:
 556:./FWLIB/src/stm32f4xx_flash.c ****   }
 1041              		.loc 1 556 0
 1042 0018 4FF40073 		mov	r3, #512
 1043 001c 00E0     		b	.L115
ARM GAS  /tmp/ccBmD3SR.s 			page 47


 1044              	.L117:
 548:./FWLIB/src/stm32f4xx_flash.c ****   }
 1045              		.loc 1 548 0
 1046 001e 0023     		movs	r3, #0
 1047              	.L115:
 1048              	.LVL40:
 562:./FWLIB/src/stm32f4xx_flash.c ****   {
 1049              		.loc 1 562 0
 1050 0020 0928     		cmp	r0, #9
 1051 0022 03D0     		beq	.L122
 1052              	.LVL41:
 1053              	.L116:
 594:./FWLIB/src/stm32f4xx_flash.c **** 
 1054              		.loc 1 594 0
 1055 0024 10BD     		pop	{r4, pc}
 1056              	.LVL42:
 1057              	.L118:
 552:./FWLIB/src/stm32f4xx_flash.c ****   }
 1058              		.loc 1 552 0
 1059 0026 4FF48073 		mov	r3, #256
 1060 002a F9E7     		b	.L115
 1061              	.LVL43:
 1062              	.L122:
 579:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= tmp_psize;
 1063              		.loc 1 579 0
 1064 002c 0B4C     		ldr	r4, .L123
 1065 002e 2269     		ldr	r2, [r4, #16]
 1066 0030 22F44072 		bic	r2, r2, #768
 1067 0034 2261     		str	r2, [r4, #16]
 580:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_MER;
 1068              		.loc 1 580 0
 1069 0036 2269     		ldr	r2, [r4, #16]
 1070 0038 1343     		orrs	r3, r3, r2
 1071              	.LVL44:
 1072 003a 2361     		str	r3, [r4, #16]
 581:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_STRT;
 1073              		.loc 1 581 0
 1074 003c 2369     		ldr	r3, [r4, #16]
 1075 003e 43F00403 		orr	r3, r3, #4
 1076 0042 2361     		str	r3, [r4, #16]
 582:./FWLIB/src/stm32f4xx_flash.c ****     
 1077              		.loc 1 582 0
 1078 0044 2369     		ldr	r3, [r4, #16]
 1079 0046 43F48033 		orr	r3, r3, #65536
 1080 004a 2361     		str	r3, [r4, #16]
 585:./FWLIB/src/stm32f4xx_flash.c **** 
 1081              		.loc 1 585 0
 1082 004c FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1083              	.LVL45:
 588:./FWLIB/src/stm32f4xx_flash.c **** #endif /* STM32F40_41xxx || STM32F401xx || STM32F411xE */
 1084              		.loc 1 588 0
 1085 0050 2369     		ldr	r3, [r4, #16]
 1086 0052 23F00403 		bic	r3, r3, #4
 1087 0056 2361     		str	r3, [r4, #16]
 1088 0058 E4E7     		b	.L116
 1089              	.L124:
 1090 005a 00BF     		.align	2
ARM GAS  /tmp/ccBmD3SR.s 			page 48


 1091              	.L123:
 1092 005c 003C0240 		.word	1073888256
 1093              		.cfi_endproc
 1094              	.LFE121:
 1096              		.section	.text.FLASH_EraseAllBank1Sectors,"ax",%progbits
 1097              		.align	1
 1098              		.global	FLASH_EraseAllBank1Sectors
 1099              		.syntax unified
 1100              		.thumb
 1101              		.thumb_func
 1102              		.fpu fpv4-sp-d16
 1104              	FLASH_EraseAllBank1Sectors:
 1105              	.LFB122:
 619:./FWLIB/src/stm32f4xx_flash.c ****   uint32_t tmp_psize = 0x0;
 1106              		.loc 1 619 0
 1107              		.cfi_startproc
 1108              		@ args = 0, pretend = 0, frame = 0
 1109              		@ frame_needed = 0, uses_anonymous_args = 0
 1110              	.LVL46:
 1111 0000 10B5     		push	{r4, lr}
 1112              	.LCFI5:
 1113              		.cfi_def_cfa_offset 8
 1114              		.cfi_offset 4, -8
 1115              		.cfi_offset 14, -4
 1116 0002 0446     		mov	r4, r0
 1117              	.LVL47:
 624:./FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 1118              		.loc 1 624 0
 1119 0004 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1120              	.LVL48:
 627:./FWLIB/src/stm32f4xx_flash.c ****   {
 1121              		.loc 1 627 0
 1122 0008 4CB1     		cbz	r4, .L128
 631:./FWLIB/src/stm32f4xx_flash.c ****   {
 1123              		.loc 1 631 0
 1124 000a 012C     		cmp	r4, #1
 1125 000c 0BD0     		beq	.L129
 635:./FWLIB/src/stm32f4xx_flash.c ****   {
 1126              		.loc 1 635 0
 1127 000e 022C     		cmp	r4, #2
 1128 0010 02D0     		beq	.L132
 641:./FWLIB/src/stm32f4xx_flash.c ****   }  
 1129              		.loc 1 641 0
 1130 0012 4FF44073 		mov	r3, #768
 1131 0016 03E0     		b	.L126
 1132              	.L132:
 637:./FWLIB/src/stm32f4xx_flash.c ****   }
 1133              		.loc 1 637 0
 1134 0018 4FF40073 		mov	r3, #512
 1135 001c 00E0     		b	.L126
 1136              	.L128:
 629:./FWLIB/src/stm32f4xx_flash.c ****   }
 1137              		.loc 1 629 0
 1138 001e 0023     		movs	r3, #0
 1139              	.L126:
 1140              	.LVL49:
 643:./FWLIB/src/stm32f4xx_flash.c ****   {
ARM GAS  /tmp/ccBmD3SR.s 			page 49


 1141              		.loc 1 643 0
 1142 0020 0928     		cmp	r0, #9
 1143 0022 03D0     		beq	.L133
 1144              	.LVL50:
 1145              	.L127:
 660:./FWLIB/src/stm32f4xx_flash.c **** 
 1146              		.loc 1 660 0
 1147 0024 10BD     		pop	{r4, pc}
 1148              	.LVL51:
 1149              	.L129:
 633:./FWLIB/src/stm32f4xx_flash.c ****   }
 1150              		.loc 1 633 0
 1151 0026 4FF48073 		mov	r3, #256
 1152 002a F9E7     		b	.L126
 1153              	.LVL52:
 1154              	.L133:
 646:./FWLIB/src/stm32f4xx_flash.c ****      FLASH->CR |= tmp_psize;
 1155              		.loc 1 646 0
 1156 002c 0B4C     		ldr	r4, .L134
 1157 002e 2269     		ldr	r2, [r4, #16]
 1158 0030 22F44072 		bic	r2, r2, #768
 1159 0034 2261     		str	r2, [r4, #16]
 647:./FWLIB/src/stm32f4xx_flash.c ****      FLASH->CR |= FLASH_CR_MER1;
 1160              		.loc 1 647 0
 1161 0036 2269     		ldr	r2, [r4, #16]
 1162 0038 1343     		orrs	r3, r3, r2
 1163              	.LVL53:
 1164 003a 2361     		str	r3, [r4, #16]
 648:./FWLIB/src/stm32f4xx_flash.c ****      FLASH->CR |= FLASH_CR_STRT;
 1165              		.loc 1 648 0
 1166 003c 2369     		ldr	r3, [r4, #16]
 1167 003e 43F00403 		orr	r3, r3, #4
 1168 0042 2361     		str	r3, [r4, #16]
 649:./FWLIB/src/stm32f4xx_flash.c ****     
 1169              		.loc 1 649 0
 1170 0044 2369     		ldr	r3, [r4, #16]
 1171 0046 43F48033 		orr	r3, r3, #65536
 1172 004a 2361     		str	r3, [r4, #16]
 652:./FWLIB/src/stm32f4xx_flash.c **** 
 1173              		.loc 1 652 0
 1174 004c FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1175              	.LVL54:
 655:./FWLIB/src/stm32f4xx_flash.c **** 
 1176              		.loc 1 655 0
 1177 0050 2369     		ldr	r3, [r4, #16]
 1178 0052 23F00403 		bic	r3, r3, #4
 1179 0056 2361     		str	r3, [r4, #16]
 1180 0058 E4E7     		b	.L127
 1181              	.L135:
 1182 005a 00BF     		.align	2
 1183              	.L134:
 1184 005c 003C0240 		.word	1073888256
 1185              		.cfi_endproc
 1186              	.LFE122:
 1188              		.section	.text.FLASH_EraseAllBank2Sectors,"ax",%progbits
 1189              		.align	1
 1190              		.global	FLASH_EraseAllBank2Sectors
ARM GAS  /tmp/ccBmD3SR.s 			page 50


 1191              		.syntax unified
 1192              		.thumb
 1193              		.thumb_func
 1194              		.fpu fpv4-sp-d16
 1196              	FLASH_EraseAllBank2Sectors:
 1197              	.LFB123:
 686:./FWLIB/src/stm32f4xx_flash.c ****   uint32_t tmp_psize = 0x0;
 1198              		.loc 1 686 0
 1199              		.cfi_startproc
 1200              		@ args = 0, pretend = 0, frame = 0
 1201              		@ frame_needed = 0, uses_anonymous_args = 0
 1202              	.LVL55:
 1203 0000 10B5     		push	{r4, lr}
 1204              	.LCFI6:
 1205              		.cfi_def_cfa_offset 8
 1206              		.cfi_offset 4, -8
 1207              		.cfi_offset 14, -4
 1208 0002 0446     		mov	r4, r0
 1209              	.LVL56:
 691:./FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 1210              		.loc 1 691 0
 1211 0004 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1212              	.LVL57:
 694:./FWLIB/src/stm32f4xx_flash.c ****   {
 1213              		.loc 1 694 0
 1214 0008 4CB1     		cbz	r4, .L139
 698:./FWLIB/src/stm32f4xx_flash.c ****   {
 1215              		.loc 1 698 0
 1216 000a 012C     		cmp	r4, #1
 1217 000c 0BD0     		beq	.L140
 702:./FWLIB/src/stm32f4xx_flash.c ****   {
 1218              		.loc 1 702 0
 1219 000e 022C     		cmp	r4, #2
 1220 0010 02D0     		beq	.L143
 708:./FWLIB/src/stm32f4xx_flash.c ****   }  
 1221              		.loc 1 708 0
 1222 0012 4FF44073 		mov	r3, #768
 1223 0016 03E0     		b	.L137
 1224              	.L143:
 704:./FWLIB/src/stm32f4xx_flash.c ****   }
 1225              		.loc 1 704 0
 1226 0018 4FF40073 		mov	r3, #512
 1227 001c 00E0     		b	.L137
 1228              	.L139:
 696:./FWLIB/src/stm32f4xx_flash.c ****   }
 1229              		.loc 1 696 0
 1230 001e 0023     		movs	r3, #0
 1231              	.L137:
 1232              	.LVL58:
 710:./FWLIB/src/stm32f4xx_flash.c ****   {
 1233              		.loc 1 710 0
 1234 0020 0928     		cmp	r0, #9
 1235 0022 03D0     		beq	.L144
 1236              	.LVL59:
 1237              	.L138:
 727:./FWLIB/src/stm32f4xx_flash.c **** 
 1238              		.loc 1 727 0
ARM GAS  /tmp/ccBmD3SR.s 			page 51


 1239 0024 10BD     		pop	{r4, pc}
 1240              	.LVL60:
 1241              	.L140:
 700:./FWLIB/src/stm32f4xx_flash.c ****   }
 1242              		.loc 1 700 0
 1243 0026 4FF48073 		mov	r3, #256
 1244 002a F9E7     		b	.L137
 1245              	.LVL61:
 1246              	.L144:
 713:./FWLIB/src/stm32f4xx_flash.c ****      FLASH->CR |= tmp_psize;
 1247              		.loc 1 713 0
 1248 002c 0B4C     		ldr	r4, .L145
 1249 002e 2269     		ldr	r2, [r4, #16]
 1250 0030 22F44072 		bic	r2, r2, #768
 1251 0034 2261     		str	r2, [r4, #16]
 714:./FWLIB/src/stm32f4xx_flash.c ****      FLASH->CR |= FLASH_CR_MER2;
 1252              		.loc 1 714 0
 1253 0036 2269     		ldr	r2, [r4, #16]
 1254 0038 1343     		orrs	r3, r3, r2
 1255              	.LVL62:
 1256 003a 2361     		str	r3, [r4, #16]
 715:./FWLIB/src/stm32f4xx_flash.c ****      FLASH->CR |= FLASH_CR_STRT;
 1257              		.loc 1 715 0
 1258 003c 2369     		ldr	r3, [r4, #16]
 1259 003e 43F40043 		orr	r3, r3, #32768
 1260 0042 2361     		str	r3, [r4, #16]
 716:./FWLIB/src/stm32f4xx_flash.c ****     
 1261              		.loc 1 716 0
 1262 0044 2369     		ldr	r3, [r4, #16]
 1263 0046 43F48033 		orr	r3, r3, #65536
 1264 004a 2361     		str	r3, [r4, #16]
 719:./FWLIB/src/stm32f4xx_flash.c **** 
 1265              		.loc 1 719 0
 1266 004c FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1267              	.LVL63:
 722:./FWLIB/src/stm32f4xx_flash.c **** 
 1268              		.loc 1 722 0
 1269 0050 2369     		ldr	r3, [r4, #16]
 1270 0052 23F40043 		bic	r3, r3, #32768
 1271 0056 2361     		str	r3, [r4, #16]
 1272 0058 E4E7     		b	.L138
 1273              	.L146:
 1274 005a 00BF     		.align	2
 1275              	.L145:
 1276 005c 003C0240 		.word	1073888256
 1277              		.cfi_endproc
 1278              	.LFE123:
 1280              		.section	.text.FLASH_ProgramDoubleWord,"ax",%progbits
 1281              		.align	1
 1282              		.global	FLASH_ProgramDoubleWord
 1283              		.syntax unified
 1284              		.thumb
 1285              		.thumb_func
 1286              		.fpu fpv4-sp-d16
 1288              	FLASH_ProgramDoubleWord:
 1289              	.LFB124:
 743:./FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
ARM GAS  /tmp/ccBmD3SR.s 			page 52


 1290              		.loc 1 743 0
 1291              		.cfi_startproc
 1292              		@ args = 0, pretend = 0, frame = 0
 1293              		@ frame_needed = 0, uses_anonymous_args = 0
 1294              	.LVL64:
 1295 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1296              	.LCFI7:
 1297              		.cfi_def_cfa_offset 24
 1298              		.cfi_offset 3, -24
 1299              		.cfi_offset 4, -20
 1300              		.cfi_offset 5, -16
 1301              		.cfi_offset 6, -12
 1302              		.cfi_offset 7, -8
 1303              		.cfi_offset 14, -4
 1304 0002 0546     		mov	r5, r0
 1305 0004 1646     		mov	r6, r2
 1306 0006 1F46     		mov	r7, r3
 1307              	.LVL65:
 750:./FWLIB/src/stm32f4xx_flash.c ****   
 1308              		.loc 1 750 0
 1309 0008 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1310              	.LVL66:
 752:./FWLIB/src/stm32f4xx_flash.c ****   {
 1311              		.loc 1 752 0
 1312 000c 0928     		cmp	r0, #9
 1313 000e 00D0     		beq	.L150
 1314              	.L148:
 769:./FWLIB/src/stm32f4xx_flash.c **** 
 1315              		.loc 1 769 0
 1316 0010 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1317              	.LVL67:
 1318              	.L150:
 755:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 1319              		.loc 1 755 0
 1320 0012 0B4C     		ldr	r4, .L151
 1321 0014 2369     		ldr	r3, [r4, #16]
 1322 0016 23F44073 		bic	r3, r3, #768
 1323 001a 2361     		str	r3, [r4, #16]
 756:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_PG;
 1324              		.loc 1 756 0
 1325 001c 2369     		ldr	r3, [r4, #16]
 1326 001e 43F44073 		orr	r3, r3, #768
 1327 0022 2361     		str	r3, [r4, #16]
 757:./FWLIB/src/stm32f4xx_flash.c ****   
 1328              		.loc 1 757 0
 1329 0024 2369     		ldr	r3, [r4, #16]
 1330 0026 43F00103 		orr	r3, r3, #1
 1331 002a 2361     		str	r3, [r4, #16]
 759:./FWLIB/src/stm32f4xx_flash.c ****         
 1332              		.loc 1 759 0
 1333 002c C5E90067 		strd	r6, [r5]
 762:./FWLIB/src/stm32f4xx_flash.c **** 
 1334              		.loc 1 762 0
 1335 0030 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1336              	.LVL68:
 765:./FWLIB/src/stm32f4xx_flash.c ****   } 
 1337              		.loc 1 765 0
ARM GAS  /tmp/ccBmD3SR.s 			page 53


 1338 0034 2369     		ldr	r3, [r4, #16]
 1339 0036 23F00103 		bic	r3, r3, #1
 1340 003a 2361     		str	r3, [r4, #16]
 1341 003c E8E7     		b	.L148
 1342              	.L152:
 1343 003e 00BF     		.align	2
 1344              	.L151:
 1345 0040 003C0240 		.word	1073888256
 1346              		.cfi_endproc
 1347              	.LFE124:
 1349              		.section	.text.FLASH_ProgramWord,"ax",%progbits
 1350              		.align	1
 1351              		.global	FLASH_ProgramWord
 1352              		.syntax unified
 1353              		.thumb
 1354              		.thumb_func
 1355              		.fpu fpv4-sp-d16
 1357              	FLASH_ProgramWord:
 1358              	.LFB125:
 786:./FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1359              		.loc 1 786 0
 1360              		.cfi_startproc
 1361              		@ args = 0, pretend = 0, frame = 0
 1362              		@ frame_needed = 0, uses_anonymous_args = 0
 1363              	.LVL69:
 1364 0000 70B5     		push	{r4, r5, r6, lr}
 1365              	.LCFI8:
 1366              		.cfi_def_cfa_offset 16
 1367              		.cfi_offset 4, -16
 1368              		.cfi_offset 5, -12
 1369              		.cfi_offset 6, -8
 1370              		.cfi_offset 14, -4
 1371 0002 0546     		mov	r5, r0
 1372 0004 0E46     		mov	r6, r1
 1373              	.LVL70:
 793:./FWLIB/src/stm32f4xx_flash.c ****   
 1374              		.loc 1 793 0
 1375 0006 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1376              	.LVL71:
 795:./FWLIB/src/stm32f4xx_flash.c ****   {
 1377              		.loc 1 795 0
 1378 000a 0928     		cmp	r0, #9
 1379 000c 00D0     		beq	.L156
 1380              	.L154:
 812:./FWLIB/src/stm32f4xx_flash.c **** 
 1381              		.loc 1 812 0
 1382 000e 70BD     		pop	{r4, r5, r6, pc}
 1383              	.LVL72:
 1384              	.L156:
 798:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_PSIZE_WORD;
 1385              		.loc 1 798 0
 1386 0010 0A4C     		ldr	r4, .L157
 1387 0012 2369     		ldr	r3, [r4, #16]
 1388 0014 23F44073 		bic	r3, r3, #768
 1389 0018 2361     		str	r3, [r4, #16]
 799:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_PG;
 1390              		.loc 1 799 0
ARM GAS  /tmp/ccBmD3SR.s 			page 54


 1391 001a 2369     		ldr	r3, [r4, #16]
 1392 001c 43F40073 		orr	r3, r3, #512
 1393 0020 2361     		str	r3, [r4, #16]
 800:./FWLIB/src/stm32f4xx_flash.c ****   
 1394              		.loc 1 800 0
 1395 0022 2369     		ldr	r3, [r4, #16]
 1396 0024 43F00103 		orr	r3, r3, #1
 1397 0028 2361     		str	r3, [r4, #16]
 802:./FWLIB/src/stm32f4xx_flash.c ****         
 1398              		.loc 1 802 0
 1399 002a 2E60     		str	r6, [r5]
 805:./FWLIB/src/stm32f4xx_flash.c **** 
 1400              		.loc 1 805 0
 1401 002c FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1402              	.LVL73:
 808:./FWLIB/src/stm32f4xx_flash.c ****   } 
 1403              		.loc 1 808 0
 1404 0030 2369     		ldr	r3, [r4, #16]
 1405 0032 23F00103 		bic	r3, r3, #1
 1406 0036 2361     		str	r3, [r4, #16]
 1407 0038 E9E7     		b	.L154
 1408              	.L158:
 1409 003a 00BF     		.align	2
 1410              	.L157:
 1411 003c 003C0240 		.word	1073888256
 1412              		.cfi_endproc
 1413              	.LFE125:
 1415              		.section	.text.FLASH_ProgramHalfWord,"ax",%progbits
 1416              		.align	1
 1417              		.global	FLASH_ProgramHalfWord
 1418              		.syntax unified
 1419              		.thumb
 1420              		.thumb_func
 1421              		.fpu fpv4-sp-d16
 1423              	FLASH_ProgramHalfWord:
 1424              	.LFB126:
 828:./FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1425              		.loc 1 828 0
 1426              		.cfi_startproc
 1427              		@ args = 0, pretend = 0, frame = 0
 1428              		@ frame_needed = 0, uses_anonymous_args = 0
 1429              	.LVL74:
 1430 0000 70B5     		push	{r4, r5, r6, lr}
 1431              	.LCFI9:
 1432              		.cfi_def_cfa_offset 16
 1433              		.cfi_offset 4, -16
 1434              		.cfi_offset 5, -12
 1435              		.cfi_offset 6, -8
 1436              		.cfi_offset 14, -4
 1437 0002 0546     		mov	r5, r0
 1438 0004 0E46     		mov	r6, r1
 1439              	.LVL75:
 835:./FWLIB/src/stm32f4xx_flash.c ****   
 1440              		.loc 1 835 0
 1441 0006 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1442              	.LVL76:
 837:./FWLIB/src/stm32f4xx_flash.c ****   {
ARM GAS  /tmp/ccBmD3SR.s 			page 55


 1443              		.loc 1 837 0
 1444 000a 0928     		cmp	r0, #9
 1445 000c 00D0     		beq	.L162
 1446              	.L160:
 854:./FWLIB/src/stm32f4xx_flash.c **** 
 1447              		.loc 1 854 0
 1448 000e 70BD     		pop	{r4, r5, r6, pc}
 1449              	.LVL77:
 1450              	.L162:
 840:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 1451              		.loc 1 840 0
 1452 0010 0A4C     		ldr	r4, .L163
 1453 0012 2369     		ldr	r3, [r4, #16]
 1454 0014 23F44073 		bic	r3, r3, #768
 1455 0018 2361     		str	r3, [r4, #16]
 841:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_PG;
 1456              		.loc 1 841 0
 1457 001a 2369     		ldr	r3, [r4, #16]
 1458 001c 43F48073 		orr	r3, r3, #256
 1459 0020 2361     		str	r3, [r4, #16]
 842:./FWLIB/src/stm32f4xx_flash.c ****   
 1460              		.loc 1 842 0
 1461 0022 2369     		ldr	r3, [r4, #16]
 1462 0024 43F00103 		orr	r3, r3, #1
 1463 0028 2361     		str	r3, [r4, #16]
 844:./FWLIB/src/stm32f4xx_flash.c ****         
 1464              		.loc 1 844 0
 1465 002a 2E80     		strh	r6, [r5]	@ movhi
 847:./FWLIB/src/stm32f4xx_flash.c **** 
 1466              		.loc 1 847 0
 1467 002c FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1468              	.LVL78:
 850:./FWLIB/src/stm32f4xx_flash.c ****   } 
 1469              		.loc 1 850 0
 1470 0030 2369     		ldr	r3, [r4, #16]
 1471 0032 23F00103 		bic	r3, r3, #1
 1472 0036 2361     		str	r3, [r4, #16]
 1473 0038 E9E7     		b	.L160
 1474              	.L164:
 1475 003a 00BF     		.align	2
 1476              	.L163:
 1477 003c 003C0240 		.word	1073888256
 1478              		.cfi_endproc
 1479              	.LFE126:
 1481              		.section	.text.FLASH_ProgramByte,"ax",%progbits
 1482              		.align	1
 1483              		.global	FLASH_ProgramByte
 1484              		.syntax unified
 1485              		.thumb
 1486              		.thumb_func
 1487              		.fpu fpv4-sp-d16
 1489              	FLASH_ProgramByte:
 1490              	.LFB127:
 870:./FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1491              		.loc 1 870 0
 1492              		.cfi_startproc
 1493              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccBmD3SR.s 			page 56


 1494              		@ frame_needed = 0, uses_anonymous_args = 0
 1495              	.LVL79:
 1496 0000 70B5     		push	{r4, r5, r6, lr}
 1497              	.LCFI10:
 1498              		.cfi_def_cfa_offset 16
 1499              		.cfi_offset 4, -16
 1500              		.cfi_offset 5, -12
 1501              		.cfi_offset 6, -8
 1502              		.cfi_offset 14, -4
 1503 0002 0546     		mov	r5, r0
 1504 0004 0E46     		mov	r6, r1
 1505              	.LVL80:
 877:./FWLIB/src/stm32f4xx_flash.c ****   
 1506              		.loc 1 877 0
 1507 0006 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1508              	.LVL81:
 879:./FWLIB/src/stm32f4xx_flash.c ****   {
 1509              		.loc 1 879 0
 1510 000a 0928     		cmp	r0, #9
 1511 000c 00D0     		beq	.L168
 1512              	.L166:
 897:./FWLIB/src/stm32f4xx_flash.c **** 
 1513              		.loc 1 897 0
 1514 000e 70BD     		pop	{r4, r5, r6, pc}
 1515              	.LVL82:
 1516              	.L168:
 882:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_PSIZE_BYTE;
 1517              		.loc 1 882 0
 1518 0010 094C     		ldr	r4, .L169
 1519 0012 2369     		ldr	r3, [r4, #16]
 1520 0014 23F44073 		bic	r3, r3, #768
 1521 0018 2361     		str	r3, [r4, #16]
 883:./FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_PG;
 1522              		.loc 1 883 0
 1523 001a 2369     		ldr	r3, [r4, #16]
 1524 001c 2361     		str	r3, [r4, #16]
 884:./FWLIB/src/stm32f4xx_flash.c ****   
 1525              		.loc 1 884 0
 1526 001e 2369     		ldr	r3, [r4, #16]
 1527 0020 43F00103 		orr	r3, r3, #1
 1528 0024 2361     		str	r3, [r4, #16]
 886:./FWLIB/src/stm32f4xx_flash.c ****         
 1529              		.loc 1 886 0
 1530 0026 2E70     		strb	r6, [r5]
 889:./FWLIB/src/stm32f4xx_flash.c **** 
 1531              		.loc 1 889 0
 1532 0028 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1533              	.LVL83:
 892:./FWLIB/src/stm32f4xx_flash.c ****   } 
 1534              		.loc 1 892 0
 1535 002c 2369     		ldr	r3, [r4, #16]
 1536 002e 23F00103 		bic	r3, r3, #1
 1537 0032 2361     		str	r3, [r4, #16]
 1538 0034 EBE7     		b	.L166
 1539              	.L170:
 1540 0036 00BF     		.align	2
 1541              	.L169:
ARM GAS  /tmp/ccBmD3SR.s 			page 57


 1542 0038 003C0240 		.word	1073888256
 1543              		.cfi_endproc
 1544              	.LFE127:
 1546              		.section	.text.FLASH_OB_WRPConfig,"ax",%progbits
 1547              		.align	1
 1548              		.global	FLASH_OB_WRPConfig
 1549              		.syntax unified
 1550              		.thumb
 1551              		.thumb_func
 1552              		.fpu fpv4-sp-d16
 1554              	FLASH_OB_WRPConfig:
 1555              	.LFB130:
1007:./FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1556              		.loc 1 1007 0
 1557              		.cfi_startproc
 1558              		@ args = 0, pretend = 0, frame = 0
 1559              		@ frame_needed = 0, uses_anonymous_args = 0
 1560              	.LVL84:
 1561 0000 38B5     		push	{r3, r4, r5, lr}
 1562              	.LCFI11:
 1563              		.cfi_def_cfa_offset 16
 1564              		.cfi_offset 3, -16
 1565              		.cfi_offset 4, -12
 1566              		.cfi_offset 5, -8
 1567              		.cfi_offset 14, -4
 1568 0002 0446     		mov	r4, r0
 1569 0004 0D46     		mov	r5, r1
 1570              	.LVL85:
1014:./FWLIB/src/stm32f4xx_flash.c **** 
 1571              		.loc 1 1014 0
 1572 0006 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1573              	.LVL86:
1016:./FWLIB/src/stm32f4xx_flash.c ****   { 
 1574              		.loc 1 1016 0
 1575 000a 0928     		cmp	r0, #9
 1576 000c 00D0     		beq	.L175
 1577              	.LVL87:
 1578              	.L171:
1027:./FWLIB/src/stm32f4xx_flash.c **** 
 1579              		.loc 1 1027 0
 1580 000e 38BD     		pop	{r3, r4, r5, pc}
 1581              	.LVL88:
 1582              	.L175:
1018:./FWLIB/src/stm32f4xx_flash.c ****     {
 1583              		.loc 1 1018 0
 1584 0010 2DB9     		cbnz	r5, .L176
1024:./FWLIB/src/stm32f4xx_flash.c ****     }
 1585              		.loc 1 1024 0
 1586 0012 064B     		ldr	r3, .L177
 1587 0014 1A88     		ldrh	r2, [r3]
 1588 0016 A4B2     		uxth	r4, r4
 1589              	.LVL89:
 1590 0018 1443     		orrs	r4, r4, r2
 1591 001a 1C80     		strh	r4, [r3]	@ movhi
1027:./FWLIB/src/stm32f4xx_flash.c **** 
 1592              		.loc 1 1027 0
 1593 001c F7E7     		b	.L171
ARM GAS  /tmp/ccBmD3SR.s 			page 58


 1594              	.LVL90:
 1595              	.L176:
1020:./FWLIB/src/stm32f4xx_flash.c ****     }
 1596              		.loc 1 1020 0
 1597 001e 034A     		ldr	r2, .L177
 1598 0020 1388     		ldrh	r3, [r2]
 1599 0022 23EA0404 		bic	r4, r3, r4
 1600              	.LVL91:
 1601 0026 1480     		strh	r4, [r2]	@ movhi
 1602 0028 F1E7     		b	.L171
 1603              	.L178:
 1604 002a 00BF     		.align	2
 1605              	.L177:
 1606 002c 163C0240 		.word	1073888278
 1607              		.cfi_endproc
 1608              	.LFE130:
 1610              		.section	.text.FLASH_OB_WRP1Config,"ax",%progbits
 1611              		.align	1
 1612              		.global	FLASH_OB_WRP1Config
 1613              		.syntax unified
 1614              		.thumb
 1615              		.thumb_func
 1616              		.fpu fpv4-sp-d16
 1618              	FLASH_OB_WRP1Config:
 1619              	.LFB131:
1049:./FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1620              		.loc 1 1049 0
 1621              		.cfi_startproc
 1622              		@ args = 0, pretend = 0, frame = 0
 1623              		@ frame_needed = 0, uses_anonymous_args = 0
 1624              	.LVL92:
 1625 0000 38B5     		push	{r3, r4, r5, lr}
 1626              	.LCFI12:
 1627              		.cfi_def_cfa_offset 16
 1628              		.cfi_offset 3, -16
 1629              		.cfi_offset 4, -12
 1630              		.cfi_offset 5, -8
 1631              		.cfi_offset 14, -4
 1632 0002 0446     		mov	r4, r0
 1633 0004 0D46     		mov	r5, r1
 1634              	.LVL93:
1056:./FWLIB/src/stm32f4xx_flash.c **** 
 1635              		.loc 1 1056 0
 1636 0006 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1637              	.LVL94:
1058:./FWLIB/src/stm32f4xx_flash.c ****   { 
 1638              		.loc 1 1058 0
 1639 000a 0928     		cmp	r0, #9
 1640 000c 00D0     		beq	.L183
 1641              	.LVL95:
 1642              	.L179:
1069:./FWLIB/src/stm32f4xx_flash.c **** 
 1643              		.loc 1 1069 0
 1644 000e 38BD     		pop	{r3, r4, r5, pc}
 1645              	.LVL96:
 1646              	.L183:
1060:./FWLIB/src/stm32f4xx_flash.c ****     {
ARM GAS  /tmp/ccBmD3SR.s 			page 59


 1647              		.loc 1 1060 0
 1648 0010 2DB9     		cbnz	r5, .L184
1066:./FWLIB/src/stm32f4xx_flash.c ****     }
 1649              		.loc 1 1066 0
 1650 0012 064B     		ldr	r3, .L185
 1651 0014 1A88     		ldrh	r2, [r3]
 1652 0016 A4B2     		uxth	r4, r4
 1653              	.LVL97:
 1654 0018 1443     		orrs	r4, r4, r2
 1655 001a 1C80     		strh	r4, [r3]	@ movhi
1069:./FWLIB/src/stm32f4xx_flash.c **** 
 1656              		.loc 1 1069 0
 1657 001c F7E7     		b	.L179
 1658              	.LVL98:
 1659              	.L184:
1062:./FWLIB/src/stm32f4xx_flash.c ****     }
 1660              		.loc 1 1062 0
 1661 001e 034A     		ldr	r2, .L185
 1662 0020 1388     		ldrh	r3, [r2]
 1663 0022 23EA0404 		bic	r4, r3, r4
 1664              	.LVL99:
 1665 0026 1480     		strh	r4, [r2]	@ movhi
 1666 0028 F1E7     		b	.L179
 1667              	.L186:
 1668 002a 00BF     		.align	2
 1669              	.L185:
 1670 002c 1A3C0240 		.word	1073888282
 1671              		.cfi_endproc
 1672              	.LFE131:
 1674              		.section	.text.FLASH_OB_PCROPConfig,"ax",%progbits
 1675              		.align	1
 1676              		.global	FLASH_OB_PCROPConfig
 1677              		.syntax unified
 1678              		.thumb
 1679              		.thumb_func
 1680              		.fpu fpv4-sp-d16
 1682              	FLASH_OB_PCROPConfig:
 1683              	.LFB133:
1129:./FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1684              		.loc 1 1129 0
 1685              		.cfi_startproc
 1686              		@ args = 0, pretend = 0, frame = 0
 1687              		@ frame_needed = 0, uses_anonymous_args = 0
 1688              	.LVL100:
 1689 0000 38B5     		push	{r3, r4, r5, lr}
 1690              	.LCFI13:
 1691              		.cfi_def_cfa_offset 16
 1692              		.cfi_offset 3, -16
 1693              		.cfi_offset 4, -12
 1694              		.cfi_offset 5, -8
 1695              		.cfi_offset 14, -4
 1696 0002 0446     		mov	r4, r0
 1697 0004 0D46     		mov	r5, r1
 1698              	.LVL101:
1136:./FWLIB/src/stm32f4xx_flash.c **** 
 1699              		.loc 1 1136 0
 1700 0006 FFF7FEFF 		bl	FLASH_WaitForLastOperation
ARM GAS  /tmp/ccBmD3SR.s 			page 60


 1701              	.LVL102:
1138:./FWLIB/src/stm32f4xx_flash.c ****   { 
 1702              		.loc 1 1138 0
 1703 000a 0928     		cmp	r0, #9
 1704 000c 00D0     		beq	.L191
 1705              	.LVL103:
 1706              	.L187:
1149:./FWLIB/src/stm32f4xx_flash.c **** 
 1707              		.loc 1 1149 0
 1708 000e 38BD     		pop	{r3, r4, r5, pc}
 1709              	.LVL104:
 1710              	.L191:
1140:./FWLIB/src/stm32f4xx_flash.c ****     {
 1711              		.loc 1 1140 0
 1712 0010 2DB9     		cbnz	r5, .L192
1146:./FWLIB/src/stm32f4xx_flash.c ****     }
 1713              		.loc 1 1146 0
 1714 0012 064A     		ldr	r2, .L193
 1715 0014 1388     		ldrh	r3, [r2]
 1716 0016 23EA0404 		bic	r4, r3, r4
 1717              	.LVL105:
 1718 001a 1480     		strh	r4, [r2]	@ movhi
1149:./FWLIB/src/stm32f4xx_flash.c **** 
 1719              		.loc 1 1149 0
 1720 001c F7E7     		b	.L187
 1721              	.LVL106:
 1722              	.L192:
1142:./FWLIB/src/stm32f4xx_flash.c ****     }
 1723              		.loc 1 1142 0
 1724 001e 034B     		ldr	r3, .L193
 1725 0020 1A88     		ldrh	r2, [r3]
 1726 0022 A4B2     		uxth	r4, r4
 1727              	.LVL107:
 1728 0024 1443     		orrs	r4, r4, r2
 1729 0026 1C80     		strh	r4, [r3]	@ movhi
 1730 0028 F1E7     		b	.L187
 1731              	.L194:
 1732 002a 00BF     		.align	2
 1733              	.L193:
 1734 002c 163C0240 		.word	1073888278
 1735              		.cfi_endproc
 1736              	.LFE133:
 1738              		.section	.text.FLASH_OB_PCROP1Config,"ax",%progbits
 1739              		.align	1
 1740              		.global	FLASH_OB_PCROP1Config
 1741              		.syntax unified
 1742              		.thumb
 1743              		.thumb_func
 1744              		.fpu fpv4-sp-d16
 1746              	FLASH_OB_PCROP1Config:
 1747              	.LFB134:
1166:./FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1748              		.loc 1 1166 0
 1749              		.cfi_startproc
 1750              		@ args = 0, pretend = 0, frame = 0
 1751              		@ frame_needed = 0, uses_anonymous_args = 0
 1752              	.LVL108:
ARM GAS  /tmp/ccBmD3SR.s 			page 61


 1753 0000 38B5     		push	{r3, r4, r5, lr}
 1754              	.LCFI14:
 1755              		.cfi_def_cfa_offset 16
 1756              		.cfi_offset 3, -16
 1757              		.cfi_offset 4, -12
 1758              		.cfi_offset 5, -8
 1759              		.cfi_offset 14, -4
 1760 0002 0446     		mov	r4, r0
 1761 0004 0D46     		mov	r5, r1
 1762              	.LVL109:
1173:./FWLIB/src/stm32f4xx_flash.c **** 
 1763              		.loc 1 1173 0
 1764 0006 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1765              	.LVL110:
1175:./FWLIB/src/stm32f4xx_flash.c ****   { 
 1766              		.loc 1 1175 0
 1767 000a 0928     		cmp	r0, #9
 1768 000c 00D0     		beq	.L199
 1769              	.LVL111:
 1770              	.L195:
1186:./FWLIB/src/stm32f4xx_flash.c **** 
 1771              		.loc 1 1186 0
 1772 000e 38BD     		pop	{r3, r4, r5, pc}
 1773              	.LVL112:
 1774              	.L199:
1177:./FWLIB/src/stm32f4xx_flash.c ****     {
 1775              		.loc 1 1177 0
 1776 0010 2DB9     		cbnz	r5, .L200
1183:./FWLIB/src/stm32f4xx_flash.c ****     }
 1777              		.loc 1 1183 0
 1778 0012 064A     		ldr	r2, .L201
 1779 0014 1388     		ldrh	r3, [r2]
 1780 0016 23EA0404 		bic	r4, r3, r4
 1781              	.LVL113:
 1782 001a 1480     		strh	r4, [r2]	@ movhi
1186:./FWLIB/src/stm32f4xx_flash.c **** 
 1783              		.loc 1 1186 0
 1784 001c F7E7     		b	.L195
 1785              	.LVL114:
 1786              	.L200:
1179:./FWLIB/src/stm32f4xx_flash.c ****     }
 1787              		.loc 1 1179 0
 1788 001e 034B     		ldr	r3, .L201
 1789 0020 1A88     		ldrh	r2, [r3]
 1790 0022 A4B2     		uxth	r4, r4
 1791              	.LVL115:
 1792 0024 1443     		orrs	r4, r4, r2
 1793 0026 1C80     		strh	r4, [r3]	@ movhi
 1794 0028 F1E7     		b	.L195
 1795              	.L202:
 1796 002a 00BF     		.align	2
 1797              	.L201:
 1798 002c 1A3C0240 		.word	1073888282
 1799              		.cfi_endproc
 1800              	.LFE134:
 1802              		.section	.text.FLASH_OB_RDPConfig,"ax",%progbits
 1803              		.align	1
ARM GAS  /tmp/ccBmD3SR.s 			page 62


 1804              		.global	FLASH_OB_RDPConfig
 1805              		.syntax unified
 1806              		.thumb
 1807              		.thumb_func
 1808              		.fpu fpv4-sp-d16
 1810              	FLASH_OB_RDPConfig:
 1811              	.LFB135:
1202:./FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1812              		.loc 1 1202 0
 1813              		.cfi_startproc
 1814              		@ args = 0, pretend = 0, frame = 0
 1815              		@ frame_needed = 0, uses_anonymous_args = 0
 1816              	.LVL116:
 1817 0000 10B5     		push	{r4, lr}
 1818              	.LCFI15:
 1819              		.cfi_def_cfa_offset 8
 1820              		.cfi_offset 4, -8
 1821              		.cfi_offset 14, -4
 1822 0002 0446     		mov	r4, r0
 1823              	.LVL117:
1208:./FWLIB/src/stm32f4xx_flash.c **** 
 1824              		.loc 1 1208 0
 1825 0004 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1826              	.LVL118:
1210:./FWLIB/src/stm32f4xx_flash.c ****   {
 1827              		.loc 1 1210 0
 1828 0008 0928     		cmp	r0, #9
 1829 000a 00D0     		beq	.L206
 1830              	.L203:
1215:./FWLIB/src/stm32f4xx_flash.c **** 
 1831              		.loc 1 1215 0
 1832 000c 10BD     		pop	{r4, pc}
 1833              	.L206:
1212:./FWLIB/src/stm32f4xx_flash.c **** 
 1834              		.loc 1 1212 0
 1835 000e 014B     		ldr	r3, .L207
 1836 0010 1C70     		strb	r4, [r3]
1215:./FWLIB/src/stm32f4xx_flash.c **** 
 1837              		.loc 1 1215 0
 1838 0012 FBE7     		b	.L203
 1839              	.L208:
 1840              		.align	2
 1841              	.L207:
 1842 0014 153C0240 		.word	1073888277
 1843              		.cfi_endproc
 1844              	.LFE135:
 1846              		.section	.text.FLASH_OB_UserConfig,"ax",%progbits
 1847              		.align	1
 1848              		.global	FLASH_OB_UserConfig
 1849              		.syntax unified
 1850              		.thumb
 1851              		.thumb_func
 1852              		.fpu fpv4-sp-d16
 1854              	FLASH_OB_UserConfig:
 1855              	.LFB136:
1234:./FWLIB/src/stm32f4xx_flash.c ****   uint8_t optiontmp = 0xFF;
 1856              		.loc 1 1234 0
ARM GAS  /tmp/ccBmD3SR.s 			page 63


 1857              		.cfi_startproc
 1858              		@ args = 0, pretend = 0, frame = 0
 1859              		@ frame_needed = 0, uses_anonymous_args = 0
 1860              	.LVL119:
 1861 0000 70B5     		push	{r4, r5, r6, lr}
 1862              	.LCFI16:
 1863              		.cfi_def_cfa_offset 16
 1864              		.cfi_offset 4, -16
 1865              		.cfi_offset 5, -12
 1866              		.cfi_offset 6, -8
 1867              		.cfi_offset 14, -4
 1868 0002 0446     		mov	r4, r0
 1869 0004 0E46     		mov	r6, r1
 1870 0006 1546     		mov	r5, r2
 1871              	.LVL120:
1244:./FWLIB/src/stm32f4xx_flash.c ****   
 1872              		.loc 1 1244 0
 1873 0008 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1874              	.LVL121:
1246:./FWLIB/src/stm32f4xx_flash.c ****   { 
 1875              		.loc 1 1246 0
 1876 000c 0928     		cmp	r0, #9
 1877 000e 00D0     		beq	.L212
 1878              	.LVL122:
 1879              	.L209:
1261:./FWLIB/src/stm32f4xx_flash.c **** 
 1880              		.loc 1 1261 0
 1881 0010 70BD     		pop	{r4, r5, r6, pc}
 1882              	.LVL123:
 1883              	.L212:
1255:./FWLIB/src/stm32f4xx_flash.c **** #endif /* STM32F40_41xxx || STM32F401xx || STM32F411xE */ 
 1884              		.loc 1 1255 0
 1885 0012 044B     		ldr	r3, .L213
 1886 0014 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 1887              	.LVL124:
 1888 0016 00F00F00 		and	r0, r0, #15
 1889              	.LVL125:
1259:./FWLIB/src/stm32f4xx_flash.c ****   }  
 1890              		.loc 1 1259 0
 1891 001a 3043     		orrs	r0, r0, r6
 1892              	.LVL126:
 1893 001c 2843     		orrs	r0, r0, r5
 1894 001e 2043     		orrs	r0, r0, r4
 1895 0020 1870     		strb	r0, [r3]
1261:./FWLIB/src/stm32f4xx_flash.c **** 
 1896              		.loc 1 1261 0
 1897 0022 F5E7     		b	.L209
 1898              	.L214:
 1899              		.align	2
 1900              	.L213:
 1901 0024 143C0240 		.word	1073888276
 1902              		.cfi_endproc
 1903              	.LFE136:
 1905              		.section	.text.FLASH_OB_Launch,"ax",%progbits
 1906              		.align	1
 1907              		.global	FLASH_OB_Launch
 1908              		.syntax unified
ARM GAS  /tmp/ccBmD3SR.s 			page 64


 1909              		.thumb
 1910              		.thumb_func
 1911              		.fpu fpv4-sp-d16
 1913              	FLASH_OB_Launch:
 1914              	.LFB139:
1313:./FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1915              		.loc 1 1313 0
 1916              		.cfi_startproc
 1917              		@ args = 0, pretend = 0, frame = 0
 1918              		@ frame_needed = 0, uses_anonymous_args = 0
 1919 0000 08B5     		push	{r3, lr}
 1920              	.LCFI17:
 1921              		.cfi_def_cfa_offset 8
 1922              		.cfi_offset 3, -8
 1923              		.cfi_offset 14, -4
 1924              	.LVL127:
1317:./FWLIB/src/stm32f4xx_flash.c **** 
 1925              		.loc 1 1317 0
 1926 0002 044A     		ldr	r2, .L217
 1927 0004 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 1928 0006 43F00203 		orr	r3, r3, #2
 1929 000a 1370     		strb	r3, [r2]
1320:./FWLIB/src/stm32f4xx_flash.c **** 
 1930              		.loc 1 1320 0
 1931 000c FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1932              	.LVL128:
1323:./FWLIB/src/stm32f4xx_flash.c **** 
 1933              		.loc 1 1323 0
 1934 0010 08BD     		pop	{r3, pc}
 1935              	.L218:
 1936 0012 00BF     		.align	2
 1937              	.L217:
 1938 0014 143C0240 		.word	1073888276
 1939              		.cfi_endproc
 1940              	.LFE139:
 1942              		.text
 1943              	.Letext0:
 1944              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1945              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1946              		.file 4 "build/lnInclude/core_cm4.h"
 1947              		.file 5 "build/lnInclude/system_stm32f4xx.h"
 1948              		.file 6 "build/lnInclude/stm32f4xx.h"
 1949              		.file 7 "build/lnInclude/stm32f4xx_flash.h"
ARM GAS  /tmp/ccBmD3SR.s 			page 65


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_flash.c
     /tmp/ccBmD3SR.s:18     .text.FLASH_SetLatency:0000000000000000 $t
     /tmp/ccBmD3SR.s:25     .text.FLASH_SetLatency:0000000000000000 FLASH_SetLatency
     /tmp/ccBmD3SR.s:44     .text.FLASH_SetLatency:0000000000000008 $d
     /tmp/ccBmD3SR.s:49     .text.FLASH_PrefetchBufferCmd:0000000000000000 $t
     /tmp/ccBmD3SR.s:56     .text.FLASH_PrefetchBufferCmd:0000000000000000 FLASH_PrefetchBufferCmd
     /tmp/ccBmD3SR.s:83     .text.FLASH_PrefetchBufferCmd:000000000000001c $d
     /tmp/ccBmD3SR.s:88     .text.FLASH_InstructionCacheCmd:0000000000000000 $t
     /tmp/ccBmD3SR.s:95     .text.FLASH_InstructionCacheCmd:0000000000000000 FLASH_InstructionCacheCmd
     /tmp/ccBmD3SR.s:122    .text.FLASH_InstructionCacheCmd:000000000000001c $d
     /tmp/ccBmD3SR.s:127    .text.FLASH_DataCacheCmd:0000000000000000 $t
     /tmp/ccBmD3SR.s:134    .text.FLASH_DataCacheCmd:0000000000000000 FLASH_DataCacheCmd
     /tmp/ccBmD3SR.s:161    .text.FLASH_DataCacheCmd:000000000000001c $d
     /tmp/ccBmD3SR.s:166    .text.FLASH_InstructionCacheReset:0000000000000000 $t
     /tmp/ccBmD3SR.s:173    .text.FLASH_InstructionCacheReset:0000000000000000 FLASH_InstructionCacheReset
     /tmp/ccBmD3SR.s:190    .text.FLASH_InstructionCacheReset:000000000000000c $d
     /tmp/ccBmD3SR.s:195    .text.FLASH_DataCacheReset:0000000000000000 $t
     /tmp/ccBmD3SR.s:202    .text.FLASH_DataCacheReset:0000000000000000 FLASH_DataCacheReset
     /tmp/ccBmD3SR.s:219    .text.FLASH_DataCacheReset:000000000000000c $d
     /tmp/ccBmD3SR.s:224    .text.FLASH_Unlock:0000000000000000 $t
     /tmp/ccBmD3SR.s:231    .text.FLASH_Unlock:0000000000000000 FLASH_Unlock
     /tmp/ccBmD3SR.s:259    .text.FLASH_Unlock:0000000000000018 $d
     /tmp/ccBmD3SR.s:265    .text.FLASH_Lock:0000000000000000 $t
     /tmp/ccBmD3SR.s:272    .text.FLASH_Lock:0000000000000000 FLASH_Lock
     /tmp/ccBmD3SR.s:289    .text.FLASH_Lock:000000000000000c $d
     /tmp/ccBmD3SR.s:294    .text.FLASH_OB_Unlock:0000000000000000 $t
     /tmp/ccBmD3SR.s:301    .text.FLASH_OB_Unlock:0000000000000000 FLASH_OB_Unlock
     /tmp/ccBmD3SR.s:326    .text.FLASH_OB_Unlock:0000000000000018 $d
     /tmp/ccBmD3SR.s:332    .text.FLASH_OB_Lock:0000000000000000 $t
     /tmp/ccBmD3SR.s:339    .text.FLASH_OB_Lock:0000000000000000 FLASH_OB_Lock
     /tmp/ccBmD3SR.s:356    .text.FLASH_OB_Lock:000000000000000c $d
     /tmp/ccBmD3SR.s:361    .text.FLASH_OB_PCROPSelectionConfig:0000000000000000 $t
     /tmp/ccBmD3SR.s:368    .text.FLASH_OB_PCROPSelectionConfig:0000000000000000 FLASH_OB_PCROPSelectionConfig
     /tmp/ccBmD3SR.s:390    .text.FLASH_OB_PCROPSelectionConfig:0000000000000010 $d
     /tmp/ccBmD3SR.s:395    .text.FLASH_OB_BootConfig:0000000000000000 $t
     /tmp/ccBmD3SR.s:402    .text.FLASH_OB_BootConfig:0000000000000000 FLASH_OB_BootConfig
     /tmp/ccBmD3SR.s:425    .text.FLASH_OB_BootConfig:0000000000000014 $d
     /tmp/ccBmD3SR.s:430    .text.FLASH_OB_BORConfig:0000000000000000 $t
     /tmp/ccBmD3SR.s:437    .text.FLASH_OB_BORConfig:0000000000000000 FLASH_OB_BORConfig
     /tmp/ccBmD3SR.s:460    .text.FLASH_OB_BORConfig:0000000000000014 $d
     /tmp/ccBmD3SR.s:465    .text.FLASH_OB_GetUser:0000000000000000 $t
     /tmp/ccBmD3SR.s:472    .text.FLASH_OB_GetUser:0000000000000000 FLASH_OB_GetUser
     /tmp/ccBmD3SR.s:488    .text.FLASH_OB_GetUser:000000000000000c $d
     /tmp/ccBmD3SR.s:493    .text.FLASH_OB_GetWRP:0000000000000000 $t
     /tmp/ccBmD3SR.s:500    .text.FLASH_OB_GetWRP:0000000000000000 FLASH_OB_GetWRP
     /tmp/ccBmD3SR.s:515    .text.FLASH_OB_GetWRP:0000000000000008 $d
     /tmp/ccBmD3SR.s:520    .text.FLASH_OB_GetWRP1:0000000000000000 $t
     /tmp/ccBmD3SR.s:527    .text.FLASH_OB_GetWRP1:0000000000000000 FLASH_OB_GetWRP1
     /tmp/ccBmD3SR.s:542    .text.FLASH_OB_GetWRP1:0000000000000008 $d
     /tmp/ccBmD3SR.s:547    .text.FLASH_OB_GetPCROP:0000000000000000 $t
     /tmp/ccBmD3SR.s:554    .text.FLASH_OB_GetPCROP:0000000000000000 FLASH_OB_GetPCROP
     /tmp/ccBmD3SR.s:569    .text.FLASH_OB_GetPCROP:0000000000000008 $d
     /tmp/ccBmD3SR.s:574    .text.FLASH_OB_GetPCROP1:0000000000000000 $t
     /tmp/ccBmD3SR.s:581    .text.FLASH_OB_GetPCROP1:0000000000000000 FLASH_OB_GetPCROP1
     /tmp/ccBmD3SR.s:596    .text.FLASH_OB_GetPCROP1:0000000000000008 $d
     /tmp/ccBmD3SR.s:601    .text.FLASH_OB_GetRDP:0000000000000000 $t
ARM GAS  /tmp/ccBmD3SR.s 			page 66


     /tmp/ccBmD3SR.s:608    .text.FLASH_OB_GetRDP:0000000000000000 FLASH_OB_GetRDP
     /tmp/ccBmD3SR.s:634    .text.FLASH_OB_GetRDP:0000000000000014 $d
     /tmp/ccBmD3SR.s:639    .text.FLASH_OB_GetBOR:0000000000000000 $t
     /tmp/ccBmD3SR.s:646    .text.FLASH_OB_GetBOR:0000000000000000 FLASH_OB_GetBOR
     /tmp/ccBmD3SR.s:662    .text.FLASH_OB_GetBOR:000000000000000c $d
     /tmp/ccBmD3SR.s:667    .text.FLASH_ITConfig:0000000000000000 $t
     /tmp/ccBmD3SR.s:674    .text.FLASH_ITConfig:0000000000000000 FLASH_ITConfig
     /tmp/ccBmD3SR.s:704    .text.FLASH_ITConfig:0000000000000018 $d
     /tmp/ccBmD3SR.s:709    .text.FLASH_GetFlagStatus:0000000000000000 $t
     /tmp/ccBmD3SR.s:716    .text.FLASH_GetFlagStatus:0000000000000000 FLASH_GetFlagStatus
     /tmp/ccBmD3SR.s:743    .text.FLASH_GetFlagStatus:0000000000000010 $d
     /tmp/ccBmD3SR.s:748    .text.FLASH_ClearFlag:0000000000000000 $t
     /tmp/ccBmD3SR.s:755    .text.FLASH_ClearFlag:0000000000000000 FLASH_ClearFlag
     /tmp/ccBmD3SR.s:771    .text.FLASH_ClearFlag:0000000000000008 $d
     /tmp/ccBmD3SR.s:776    .text.FLASH_GetStatus:0000000000000000 $t
     /tmp/ccBmD3SR.s:783    .text.FLASH_GetStatus:0000000000000000 FLASH_GetStatus
     /tmp/ccBmD3SR.s:844    .text.FLASH_GetStatus:000000000000004c $d
     /tmp/ccBmD3SR.s:849    .text.FLASH_WaitForLastOperation:0000000000000000 $t
     /tmp/ccBmD3SR.s:856    .text.FLASH_WaitForLastOperation:0000000000000000 FLASH_WaitForLastOperation
     /tmp/ccBmD3SR.s:901    .text.FLASH_EraseSector:0000000000000000 $t
     /tmp/ccBmD3SR.s:908    .text.FLASH_EraseSector:0000000000000000 FLASH_EraseSector
     /tmp/ccBmD3SR.s:1000   .text.FLASH_EraseSector:000000000000006c $d
     /tmp/ccBmD3SR.s:1005   .text.FLASH_EraseAllSectors:0000000000000000 $t
     /tmp/ccBmD3SR.s:1012   .text.FLASH_EraseAllSectors:0000000000000000 FLASH_EraseAllSectors
     /tmp/ccBmD3SR.s:1092   .text.FLASH_EraseAllSectors:000000000000005c $d
     /tmp/ccBmD3SR.s:1097   .text.FLASH_EraseAllBank1Sectors:0000000000000000 $t
     /tmp/ccBmD3SR.s:1104   .text.FLASH_EraseAllBank1Sectors:0000000000000000 FLASH_EraseAllBank1Sectors
     /tmp/ccBmD3SR.s:1184   .text.FLASH_EraseAllBank1Sectors:000000000000005c $d
     /tmp/ccBmD3SR.s:1189   .text.FLASH_EraseAllBank2Sectors:0000000000000000 $t
     /tmp/ccBmD3SR.s:1196   .text.FLASH_EraseAllBank2Sectors:0000000000000000 FLASH_EraseAllBank2Sectors
     /tmp/ccBmD3SR.s:1276   .text.FLASH_EraseAllBank2Sectors:000000000000005c $d
     /tmp/ccBmD3SR.s:1281   .text.FLASH_ProgramDoubleWord:0000000000000000 $t
     /tmp/ccBmD3SR.s:1288   .text.FLASH_ProgramDoubleWord:0000000000000000 FLASH_ProgramDoubleWord
     /tmp/ccBmD3SR.s:1345   .text.FLASH_ProgramDoubleWord:0000000000000040 $d
     /tmp/ccBmD3SR.s:1350   .text.FLASH_ProgramWord:0000000000000000 $t
     /tmp/ccBmD3SR.s:1357   .text.FLASH_ProgramWord:0000000000000000 FLASH_ProgramWord
     /tmp/ccBmD3SR.s:1411   .text.FLASH_ProgramWord:000000000000003c $d
     /tmp/ccBmD3SR.s:1416   .text.FLASH_ProgramHalfWord:0000000000000000 $t
     /tmp/ccBmD3SR.s:1423   .text.FLASH_ProgramHalfWord:0000000000000000 FLASH_ProgramHalfWord
     /tmp/ccBmD3SR.s:1477   .text.FLASH_ProgramHalfWord:000000000000003c $d
     /tmp/ccBmD3SR.s:1482   .text.FLASH_ProgramByte:0000000000000000 $t
     /tmp/ccBmD3SR.s:1489   .text.FLASH_ProgramByte:0000000000000000 FLASH_ProgramByte
     /tmp/ccBmD3SR.s:1542   .text.FLASH_ProgramByte:0000000000000038 $d
     /tmp/ccBmD3SR.s:1547   .text.FLASH_OB_WRPConfig:0000000000000000 $t
     /tmp/ccBmD3SR.s:1554   .text.FLASH_OB_WRPConfig:0000000000000000 FLASH_OB_WRPConfig
     /tmp/ccBmD3SR.s:1606   .text.FLASH_OB_WRPConfig:000000000000002c $d
     /tmp/ccBmD3SR.s:1611   .text.FLASH_OB_WRP1Config:0000000000000000 $t
     /tmp/ccBmD3SR.s:1618   .text.FLASH_OB_WRP1Config:0000000000000000 FLASH_OB_WRP1Config
     /tmp/ccBmD3SR.s:1670   .text.FLASH_OB_WRP1Config:000000000000002c $d
     /tmp/ccBmD3SR.s:1675   .text.FLASH_OB_PCROPConfig:0000000000000000 $t
     /tmp/ccBmD3SR.s:1682   .text.FLASH_OB_PCROPConfig:0000000000000000 FLASH_OB_PCROPConfig
     /tmp/ccBmD3SR.s:1734   .text.FLASH_OB_PCROPConfig:000000000000002c $d
     /tmp/ccBmD3SR.s:1739   .text.FLASH_OB_PCROP1Config:0000000000000000 $t
     /tmp/ccBmD3SR.s:1746   .text.FLASH_OB_PCROP1Config:0000000000000000 FLASH_OB_PCROP1Config
     /tmp/ccBmD3SR.s:1798   .text.FLASH_OB_PCROP1Config:000000000000002c $d
     /tmp/ccBmD3SR.s:1803   .text.FLASH_OB_RDPConfig:0000000000000000 $t
     /tmp/ccBmD3SR.s:1810   .text.FLASH_OB_RDPConfig:0000000000000000 FLASH_OB_RDPConfig
ARM GAS  /tmp/ccBmD3SR.s 			page 67


     /tmp/ccBmD3SR.s:1842   .text.FLASH_OB_RDPConfig:0000000000000014 $d
     /tmp/ccBmD3SR.s:1847   .text.FLASH_OB_UserConfig:0000000000000000 $t
     /tmp/ccBmD3SR.s:1854   .text.FLASH_OB_UserConfig:0000000000000000 FLASH_OB_UserConfig
     /tmp/ccBmD3SR.s:1901   .text.FLASH_OB_UserConfig:0000000000000024 $d
     /tmp/ccBmD3SR.s:1906   .text.FLASH_OB_Launch:0000000000000000 $t
     /tmp/ccBmD3SR.s:1913   .text.FLASH_OB_Launch:0000000000000000 FLASH_OB_Launch
     /tmp/ccBmD3SR.s:1938   .text.FLASH_OB_Launch:0000000000000014 $d

NO UNDEFINED SYMBOLS
