ARM GAS  /tmp/ccv4OuYc.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_rtc.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.RTC_ByteToBcd2,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	RTC_ByteToBcd2:
  25              	.LFB167:
  26              		.file 1 "./FWLIB/src/stm32f4xx_rtc.c"
   1:./FWLIB/src/stm32f4xx_rtc.c **** /**
   2:./FWLIB/src/stm32f4xx_rtc.c ****   ******************************************************************************
   3:./FWLIB/src/stm32f4xx_rtc.c ****   * @file    stm32f4xx_rtc.c
   4:./FWLIB/src/stm32f4xx_rtc.c ****   * @author  MCD Application Team
   5:./FWLIB/src/stm32f4xx_rtc.c ****   * @version V1.4.0
   6:./FWLIB/src/stm32f4xx_rtc.c ****   * @date    04-August-2014
   7:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:./FWLIB/src/stm32f4xx_rtc.c ****   *          functionalities of the Real-Time Clock (RTC) peripheral:
   9:./FWLIB/src/stm32f4xx_rtc.c ****   *           + Initialization
  10:./FWLIB/src/stm32f4xx_rtc.c ****   *           + Calendar (Time and Date) configuration
  11:./FWLIB/src/stm32f4xx_rtc.c ****   *           + Alarms (Alarm A and Alarm B) configuration
  12:./FWLIB/src/stm32f4xx_rtc.c ****   *           + WakeUp Timer configuration
  13:./FWLIB/src/stm32f4xx_rtc.c ****   *           + Daylight Saving configuration
  14:./FWLIB/src/stm32f4xx_rtc.c ****   *           + Output pin Configuration
  15:./FWLIB/src/stm32f4xx_rtc.c ****   *           + Coarse digital Calibration configuration
  16:./FWLIB/src/stm32f4xx_rtc.c ****   *           + Smooth digital Calibration configuration
  17:./FWLIB/src/stm32f4xx_rtc.c ****   *           + TimeStamp configuration
  18:./FWLIB/src/stm32f4xx_rtc.c ****   *           + Tampers configuration
  19:./FWLIB/src/stm32f4xx_rtc.c ****   *           + Backup Data Registers configuration
  20:./FWLIB/src/stm32f4xx_rtc.c ****   *           + Shift control synchronisation    
  21:./FWLIB/src/stm32f4xx_rtc.c ****   *           + RTC Tamper and TimeStamp Pins Selection and Output Type Config configuration
  22:./FWLIB/src/stm32f4xx_rtc.c ****   *           + Interrupts and flags management
  23:./FWLIB/src/stm32f4xx_rtc.c ****   *
  24:./FWLIB/src/stm32f4xx_rtc.c **** @verbatim
  25:./FWLIB/src/stm32f4xx_rtc.c **** 
  26:./FWLIB/src/stm32f4xx_rtc.c ****  ===================================================================
  27:./FWLIB/src/stm32f4xx_rtc.c ****               ##### Backup Domain Operating Condition #####
  28:./FWLIB/src/stm32f4xx_rtc.c ****  ===================================================================
  29:./FWLIB/src/stm32f4xx_rtc.c ****  [..] The real-time clock (RTC), the RTC backup registers, and the backup 
  30:./FWLIB/src/stm32f4xx_rtc.c ****       SRAM (BKP SRAM) can be powered from the VBAT voltage when the main 
  31:./FWLIB/src/stm32f4xx_rtc.c ****       VDD supply is powered off.
  32:./FWLIB/src/stm32f4xx_rtc.c ****       To retain the content of the RTC backup registers, backup SRAM, and supply 
ARM GAS  /tmp/ccv4OuYc.s 			page 2


  33:./FWLIB/src/stm32f4xx_rtc.c ****       the RTC when VDD is turned off, VBAT pin can be connected to an optional 
  34:./FWLIB/src/stm32f4xx_rtc.c ****       standby voltage supplied by a battery or by another source.
  35:./FWLIB/src/stm32f4xx_rtc.c **** 
  36:./FWLIB/src/stm32f4xx_rtc.c ****  [..] To allow the RTC to operate even when the main digital supply (VDD) is turned
  37:./FWLIB/src/stm32f4xx_rtc.c ****       off, the VBAT pin powers the following blocks:
  38:./FWLIB/src/stm32f4xx_rtc.c ****    (#) The RTC
  39:./FWLIB/src/stm32f4xx_rtc.c ****    (#) The LSE oscillator
  40:./FWLIB/src/stm32f4xx_rtc.c ****    (#) The backup SRAM when the low power backup regulator is enabled
  41:./FWLIB/src/stm32f4xx_rtc.c ****    (#) PC13 to PC15 I/Os, plus PI8 I/O (when available)
  42:./FWLIB/src/stm32f4xx_rtc.c ****   
  43:./FWLIB/src/stm32f4xx_rtc.c ****  [..] When the backup domain is supplied by VDD (analog switch connected to VDD),
  44:./FWLIB/src/stm32f4xx_rtc.c ****       the following functions are available:
  45:./FWLIB/src/stm32f4xx_rtc.c ****    (#) PC14 and PC15 can be used as either GPIO or LSE pins
  46:./FWLIB/src/stm32f4xx_rtc.c ****    (#) PC13 can be used as a GPIO or as the RTC_AF1 pin
  47:./FWLIB/src/stm32f4xx_rtc.c ****    (#) PI8 can be used as a GPIO or as the RTC_AF2 pin
  48:./FWLIB/src/stm32f4xx_rtc.c ****   
  49:./FWLIB/src/stm32f4xx_rtc.c ****  [..] When the backup domain is supplied by VBAT (analog switch connected to VBAT 
  50:./FWLIB/src/stm32f4xx_rtc.c ****       because VDD is not present), the following functions are available:
  51:./FWLIB/src/stm32f4xx_rtc.c ****    (#) PC14 and PC15 can be used as LSE pins only
  52:./FWLIB/src/stm32f4xx_rtc.c ****    (#) PC13 can be used as the RTC_AF1 pin 
  53:./FWLIB/src/stm32f4xx_rtc.c ****    (#) PI8 can be used as the RTC_AF2 pin
  54:./FWLIB/src/stm32f4xx_rtc.c ****   
  55:./FWLIB/src/stm32f4xx_rtc.c ****             
  56:./FWLIB/src/stm32f4xx_rtc.c ****                    ##### Backup Domain Reset #####
  57:./FWLIB/src/stm32f4xx_rtc.c ****  ===================================================================
  58:./FWLIB/src/stm32f4xx_rtc.c ****  [..] The backup domain reset sets all RTC registers and the RCC_BDCR register 
  59:./FWLIB/src/stm32f4xx_rtc.c ****       to their reset values. The BKPSRAM is not affected by this reset. The only
  60:./FWLIB/src/stm32f4xx_rtc.c ****       way of resetting the BKPSRAM is through the Flash interface by requesting 
  61:./FWLIB/src/stm32f4xx_rtc.c ****       a protection level change from 1 to 0.
  62:./FWLIB/src/stm32f4xx_rtc.c ****  [..] A backup domain reset is generated when one of the following events occurs:
  63:./FWLIB/src/stm32f4xx_rtc.c ****    (#) Software reset, triggered by setting the BDRST bit in the 
  64:./FWLIB/src/stm32f4xx_rtc.c ****        RCC Backup domain control register (RCC_BDCR). You can use the
  65:./FWLIB/src/stm32f4xx_rtc.c ****        RCC_BackupResetCmd().
  66:./FWLIB/src/stm32f4xx_rtc.c ****    (#) VDD or VBAT power on, if both supplies have previously been powered off.
  67:./FWLIB/src/stm32f4xx_rtc.c ****   
  68:./FWLIB/src/stm32f4xx_rtc.c **** 
  69:./FWLIB/src/stm32f4xx_rtc.c ****                    ##### Backup Domain Access #####
  70:./FWLIB/src/stm32f4xx_rtc.c ****  ===================================================================
  71:./FWLIB/src/stm32f4xx_rtc.c ****  [..] After reset, the backup domain (RTC registers, RTC backup data 
  72:./FWLIB/src/stm32f4xx_rtc.c ****       registers and backup SRAM) is protected against possible unwanted write 
  73:./FWLIB/src/stm32f4xx_rtc.c ****       accesses. 
  74:./FWLIB/src/stm32f4xx_rtc.c ****  [..] To enable access to the RTC Domain and RTC registers, proceed as follows:
  75:./FWLIB/src/stm32f4xx_rtc.c ****    (+) Enable the Power Controller (PWR) APB1 interface clock using the
  76:./FWLIB/src/stm32f4xx_rtc.c ****        RCC_APB1PeriphClockCmd() function.
  77:./FWLIB/src/stm32f4xx_rtc.c ****    (+) Enable access to RTC domain using the PWR_BackupAccessCmd() function.
  78:./FWLIB/src/stm32f4xx_rtc.c ****    (+) Select the RTC clock source using the RCC_RTCCLKConfig() function.
  79:./FWLIB/src/stm32f4xx_rtc.c ****    (+) Enable RTC Clock using the RCC_RTCCLKCmd() function.
  80:./FWLIB/src/stm32f4xx_rtc.c ****   
  81:./FWLIB/src/stm32f4xx_rtc.c ****   
  82:./FWLIB/src/stm32f4xx_rtc.c ****                   ##### How to use RTC Driver #####
  83:./FWLIB/src/stm32f4xx_rtc.c ****  ===================================================================
  84:./FWLIB/src/stm32f4xx_rtc.c ****  [..] 
  85:./FWLIB/src/stm32f4xx_rtc.c ****    (+) Enable the RTC domain access (see description in the section above)
  86:./FWLIB/src/stm32f4xx_rtc.c ****    (+) Configure the RTC Prescaler (Asynchronous and Synchronous) and RTC hour 
  87:./FWLIB/src/stm32f4xx_rtc.c ****        format using the RTC_Init() function.
  88:./FWLIB/src/stm32f4xx_rtc.c ****   
  89:./FWLIB/src/stm32f4xx_rtc.c ****  *** Time and Date configuration ***
ARM GAS  /tmp/ccv4OuYc.s 			page 3


  90:./FWLIB/src/stm32f4xx_rtc.c ****  ===================================
  91:./FWLIB/src/stm32f4xx_rtc.c ****  [..] 
  92:./FWLIB/src/stm32f4xx_rtc.c ****    (+) To configure the RTC Calendar (Time and Date) use the RTC_SetTime()
  93:./FWLIB/src/stm32f4xx_rtc.c ****        and RTC_SetDate() functions.
  94:./FWLIB/src/stm32f4xx_rtc.c ****    (+) To read the RTC Calendar, use the RTC_GetTime() and RTC_GetDate() functions.
  95:./FWLIB/src/stm32f4xx_rtc.c ****    (+) Use the RTC_DayLightSavingConfig() function to add or sub one
  96:./FWLIB/src/stm32f4xx_rtc.c ****        hour to the RTC Calendar.    
  97:./FWLIB/src/stm32f4xx_rtc.c ****   
  98:./FWLIB/src/stm32f4xx_rtc.c ****  *** Alarm configuration ***
  99:./FWLIB/src/stm32f4xx_rtc.c ****  ===========================
 100:./FWLIB/src/stm32f4xx_rtc.c ****  [..]
 101:./FWLIB/src/stm32f4xx_rtc.c ****    (+) To configure the RTC Alarm use the RTC_SetAlarm() function.
 102:./FWLIB/src/stm32f4xx_rtc.c ****    (+) Enable the selected RTC Alarm using the RTC_AlarmCmd() function
 103:./FWLIB/src/stm32f4xx_rtc.c ****    (+) To read the RTC Alarm, use the RTC_GetAlarm() function.
 104:./FWLIB/src/stm32f4xx_rtc.c ****    (+) To read the RTC alarm SubSecond, use the RTC_GetAlarmSubSecond() function.
 105:./FWLIB/src/stm32f4xx_rtc.c ****   
 106:./FWLIB/src/stm32f4xx_rtc.c ****  *** RTC Wakeup configuration ***
 107:./FWLIB/src/stm32f4xx_rtc.c ****  ================================
 108:./FWLIB/src/stm32f4xx_rtc.c ****  [..] 
 109:./FWLIB/src/stm32f4xx_rtc.c ****    (+) Configure the RTC Wakeup Clock source use the RTC_WakeUpClockConfig()
 110:./FWLIB/src/stm32f4xx_rtc.c ****        function.
 111:./FWLIB/src/stm32f4xx_rtc.c ****    (+) Configure the RTC WakeUp Counter using the RTC_SetWakeUpCounter() function  
 112:./FWLIB/src/stm32f4xx_rtc.c ****    (+) Enable the RTC WakeUp using the RTC_WakeUpCmd() function  
 113:./FWLIB/src/stm32f4xx_rtc.c ****    (+) To read the RTC WakeUp Counter register, use the RTC_GetWakeUpCounter() 
 114:./FWLIB/src/stm32f4xx_rtc.c ****        function.
 115:./FWLIB/src/stm32f4xx_rtc.c ****   
 116:./FWLIB/src/stm32f4xx_rtc.c ****  *** Outputs configuration ***
 117:./FWLIB/src/stm32f4xx_rtc.c ****  =============================
 118:./FWLIB/src/stm32f4xx_rtc.c ****  [..] The RTC has 2 different outputs:
 119:./FWLIB/src/stm32f4xx_rtc.c ****    (+) AFO_ALARM: this output is used to manage the RTC Alarm A, Alarm B
 120:./FWLIB/src/stm32f4xx_rtc.c ****        and WaKeUp signals. To output the selected RTC signal on RTC_AF1 pin, use the 
 121:./FWLIB/src/stm32f4xx_rtc.c ****        RTC_OutputConfig() function.                
 122:./FWLIB/src/stm32f4xx_rtc.c ****    (+) AFO_CALIB: this output is 512Hz signal or 1Hz. To output the RTC Clock on 
 123:./FWLIB/src/stm32f4xx_rtc.c ****        RTC_AF1 pin, use the RTC_CalibOutputCmd() function.
 124:./FWLIB/src/stm32f4xx_rtc.c ****   
 125:./FWLIB/src/stm32f4xx_rtc.c ****  *** Smooth digital Calibration configuration ***
 126:./FWLIB/src/stm32f4xx_rtc.c ****  ================================================    
 127:./FWLIB/src/stm32f4xx_rtc.c ****  [..]
 128:./FWLIB/src/stm32f4xx_rtc.c ****    (+) Configure the RTC Original Digital Calibration Value and the corresponding
 129:./FWLIB/src/stm32f4xx_rtc.c ****        calibration cycle period (32s,16s and 8s) using the RTC_SmoothCalibConfig() 
 130:./FWLIB/src/stm32f4xx_rtc.c ****        function.
 131:./FWLIB/src/stm32f4xx_rtc.c ****   
 132:./FWLIB/src/stm32f4xx_rtc.c ****  *** Coarse digital Calibration configuration ***
 133:./FWLIB/src/stm32f4xx_rtc.c ****  ================================================
 134:./FWLIB/src/stm32f4xx_rtc.c ****  [..]
 135:./FWLIB/src/stm32f4xx_rtc.c ****    (+) Configure the RTC Coarse Calibration Value and the corresponding
 136:./FWLIB/src/stm32f4xx_rtc.c ****        sign using the RTC_CoarseCalibConfig() function.
 137:./FWLIB/src/stm32f4xx_rtc.c ****    (+) Enable the RTC Coarse Calibration using the RTC_CoarseCalibCmd() function  
 138:./FWLIB/src/stm32f4xx_rtc.c ****   
 139:./FWLIB/src/stm32f4xx_rtc.c ****  *** TimeStamp configuration ***
 140:./FWLIB/src/stm32f4xx_rtc.c ****  ===============================
 141:./FWLIB/src/stm32f4xx_rtc.c ****  [..]
 142:./FWLIB/src/stm32f4xx_rtc.c ****    (+) Configure the RTC_AF1 trigger and enables the RTC TimeStamp using the RTC
 143:./FWLIB/src/stm32f4xx_rtc.c ****       _TimeStampCmd() function.
 144:./FWLIB/src/stm32f4xx_rtc.c ****    (+) To read the RTC TimeStamp Time and Date register, use the RTC_GetTimeStamp()
 145:./FWLIB/src/stm32f4xx_rtc.c ****        function.
 146:./FWLIB/src/stm32f4xx_rtc.c ****    (+) To read the RTC TimeStamp SubSecond register, use the 
ARM GAS  /tmp/ccv4OuYc.s 			page 4


 147:./FWLIB/src/stm32f4xx_rtc.c ****        RTC_GetTimeStampSubSecond() function.
 148:./FWLIB/src/stm32f4xx_rtc.c ****    (+) The TAMPER1 alternate function can be mapped either to RTC_AF1(PC13)
 149:./FWLIB/src/stm32f4xx_rtc.c ****        or RTC_AF2 (PI8) depending on the value of TAMP1INSEL bit in 
 150:./FWLIB/src/stm32f4xx_rtc.c ****        RTC_TAFCR register. You can use the  RTC_TamperPinSelection() function to
 151:./FWLIB/src/stm32f4xx_rtc.c ****        select the corresponding pin.     
 152:./FWLIB/src/stm32f4xx_rtc.c ****   
 153:./FWLIB/src/stm32f4xx_rtc.c ****  *** Tamper configuration ***
 154:./FWLIB/src/stm32f4xx_rtc.c ****  ============================
 155:./FWLIB/src/stm32f4xx_rtc.c ****  [..]
 156:./FWLIB/src/stm32f4xx_rtc.c ****    (+) Enable the RTC Tamper using the RTC_TamperCmd() function.
 157:./FWLIB/src/stm32f4xx_rtc.c ****    (+) Configure the Tamper filter count using RTC_TamperFilterConfig()
 158:./FWLIB/src/stm32f4xx_rtc.c ****        function. 
 159:./FWLIB/src/stm32f4xx_rtc.c ****    (+) Configure the RTC Tamper trigger Edge or Level according to the Tamper 
 160:./FWLIB/src/stm32f4xx_rtc.c ****        filter (if equal to 0 Edge else Level) value using the RTC_TamperConfig() 
 161:./FWLIB/src/stm32f4xx_rtc.c ****        function.
 162:./FWLIB/src/stm32f4xx_rtc.c ****    (+) Configure the Tamper sampling frequency using RTC_TamperSamplingFreqConfig()
 163:./FWLIB/src/stm32f4xx_rtc.c ****        function.
 164:./FWLIB/src/stm32f4xx_rtc.c ****    (+) Configure the Tamper precharge or discharge duration using 
 165:./FWLIB/src/stm32f4xx_rtc.c ****        RTC_TamperPinsPrechargeDuration() function.
 166:./FWLIB/src/stm32f4xx_rtc.c ****    (+) Enable the Tamper Pull-UP using RTC_TamperPullUpDisableCmd() function.
 167:./FWLIB/src/stm32f4xx_rtc.c ****    (+) Enable the Time stamp on Tamper detection event using  
 168:./FWLIB/src/stm32f4xx_rtc.c ****        TC_TSOnTamperDetecCmd() function.
 169:./FWLIB/src/stm32f4xx_rtc.c ****    (+) The TIMESTAMP alternate function can be mapped to either RTC_AF1 
 170:./FWLIB/src/stm32f4xx_rtc.c ****        or RTC_AF2 depending on the value of the TSINSEL bit in the RTC_TAFCR 
 171:./FWLIB/src/stm32f4xx_rtc.c ****        register. You can use the  RTC_TimeStampPinSelection() function to select 
 172:./FWLIB/src/stm32f4xx_rtc.c ****        the corresponding pin. 
 173:./FWLIB/src/stm32f4xx_rtc.c ****   
 174:./FWLIB/src/stm32f4xx_rtc.c ****  *** Backup Data Registers configuration ***
 175:./FWLIB/src/stm32f4xx_rtc.c ****  ===========================================
 176:./FWLIB/src/stm32f4xx_rtc.c ****  [..]
 177:./FWLIB/src/stm32f4xx_rtc.c ****    (+) To write to the RTC Backup Data registers, use the RTC_WriteBackupRegister()
 178:./FWLIB/src/stm32f4xx_rtc.c ****        function.  
 179:./FWLIB/src/stm32f4xx_rtc.c ****    (+) To read the RTC Backup Data registers, use the RTC_ReadBackupRegister()
 180:./FWLIB/src/stm32f4xx_rtc.c ****        function.
 181:./FWLIB/src/stm32f4xx_rtc.c ****    
 182:./FWLIB/src/stm32f4xx_rtc.c **** 
 183:./FWLIB/src/stm32f4xx_rtc.c ****                   ##### RTC and low power modes #####
 184:./FWLIB/src/stm32f4xx_rtc.c ****  ===================================================================
 185:./FWLIB/src/stm32f4xx_rtc.c ****  [..] The MCU can be woken up from a low power mode by an RTC alternate 
 186:./FWLIB/src/stm32f4xx_rtc.c ****       function.
 187:./FWLIB/src/stm32f4xx_rtc.c ****  [..] The RTC alternate functions are the RTC alarms (Alarm A and Alarm B), 
 188:./FWLIB/src/stm32f4xx_rtc.c ****       RTC wakeup, RTC tamper event detection and RTC time stamp event detection.
 189:./FWLIB/src/stm32f4xx_rtc.c ****       These RTC alternate functions can wake up the system from the Stop and 
 190:./FWLIB/src/stm32f4xx_rtc.c ****       Standby lowpower modes.
 191:./FWLIB/src/stm32f4xx_rtc.c ****  [..] The system can also wake up from low power modes without depending 
 192:./FWLIB/src/stm32f4xx_rtc.c ****       on an external interrupt (Auto-wakeup mode), by using the RTC alarm 
 193:./FWLIB/src/stm32f4xx_rtc.c ****       or the RTC wakeup events.
 194:./FWLIB/src/stm32f4xx_rtc.c ****  [..] The RTC provides a programmable time base for waking up from the 
 195:./FWLIB/src/stm32f4xx_rtc.c ****       Stop or Standby mode at regular intervals.
 196:./FWLIB/src/stm32f4xx_rtc.c ****       Wakeup from STOP and Standby modes is possible only when the RTC clock source
 197:./FWLIB/src/stm32f4xx_rtc.c ****       is LSE or LSI.
 198:./FWLIB/src/stm32f4xx_rtc.c ****   
 199:./FWLIB/src/stm32f4xx_rtc.c **** 
 200:./FWLIB/src/stm32f4xx_rtc.c ****           ##### Selection of RTC_AF1 alternate functions #####
 201:./FWLIB/src/stm32f4xx_rtc.c ****  ===================================================================
 202:./FWLIB/src/stm32f4xx_rtc.c ****  [..] The RTC_AF1 pin (PC13) can be used for the following purposes:
 203:./FWLIB/src/stm32f4xx_rtc.c ****    (+) AFO_ALARM output
ARM GAS  /tmp/ccv4OuYc.s 			page 5


 204:./FWLIB/src/stm32f4xx_rtc.c ****    (+) AFO_CALIB output
 205:./FWLIB/src/stm32f4xx_rtc.c ****    (+) AFI_TAMPER
 206:./FWLIB/src/stm32f4xx_rtc.c ****    (+) AFI_TIMESTAMP
 207:./FWLIB/src/stm32f4xx_rtc.c ****  
 208:./FWLIB/src/stm32f4xx_rtc.c ****  [..]   
 209:./FWLIB/src/stm32f4xx_rtc.c ****    +-----------------------------------------------------------------------------------------------
 210:./FWLIB/src/stm32f4xx_rtc.c ****    |     Pin         |AFO_ALARM |AFO_CALIB |AFI_TAMPER |AFI_TIMESTAMP | TAMP1INSEL |   TSINSEL    |
 211:./FWLIB/src/stm32f4xx_rtc.c ****    |  configuration  | ENABLED  | ENABLED  |  ENABLED  |   ENABLED    |TAMPER1 pin |TIMESTAMP pin |
 212:./FWLIB/src/stm32f4xx_rtc.c ****    |  and function   |          |          |           |              | selection  |  selection   |
 213:./FWLIB/src/stm32f4xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|------------|--------------|
 214:./FWLIB/src/stm32f4xx_rtc.c ****    |   Alarm out     |          |          |           |              |    Don't   |     Don't    |
 215:./FWLIB/src/stm32f4xx_rtc.c ****    |   output OD     |     1    |Don't care|Don't care | Don't care   |    care    |     care     |
 216:./FWLIB/src/stm32f4xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|------------|--------------|
 217:./FWLIB/src/stm32f4xx_rtc.c ****    |   Alarm out     |          |          |           |              |    Don't   |     Don't    |
 218:./FWLIB/src/stm32f4xx_rtc.c ****    |   output PP     |     1    |Don't care|Don't care | Don't care   |    care    |     care     |
 219:./FWLIB/src/stm32f4xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|------------|--------------|
 220:./FWLIB/src/stm32f4xx_rtc.c ****    | Calibration out |          |          |           |              |    Don't   |     Don't    |
 221:./FWLIB/src/stm32f4xx_rtc.c ****    |   output PP     |     0    |    1     |Don't care | Don't care   |    care    |     care     |
 222:./FWLIB/src/stm32f4xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|------------|--------------|
 223:./FWLIB/src/stm32f4xx_rtc.c ****    |  TAMPER input   |          |          |           |              |            |     Don't    |
 224:./FWLIB/src/stm32f4xx_rtc.c ****    |   floating      |     0    |    0     |     1     |      0       |      0     |     care     |
 225:./FWLIB/src/stm32f4xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|------------|--------------|
 226:./FWLIB/src/stm32f4xx_rtc.c ****    |  TIMESTAMP and  |          |          |           |              |            |              |
 227:./FWLIB/src/stm32f4xx_rtc.c ****    |  TAMPER input   |     0    |    0     |     1     |      1       |      0     |      0       |
 228:./FWLIB/src/stm32f4xx_rtc.c ****    |   floating      |          |          |           |              |            |              |
 229:./FWLIB/src/stm32f4xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|------------|--------------|
 230:./FWLIB/src/stm32f4xx_rtc.c ****    | TIMESTAMP input |          |          |           |              |    Don't   |              |
 231:./FWLIB/src/stm32f4xx_rtc.c ****    |    floating     |     0    |    0     |     0     |      1       |    care    |      0       |
 232:./FWLIB/src/stm32f4xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|------------|--------------|
 233:./FWLIB/src/stm32f4xx_rtc.c ****    |  Standard GPIO  |     0    |    0     |     0     |      0       | Don't care |  Don't care  |
 234:./FWLIB/src/stm32f4xx_rtc.c ****    +-----------------------------------------------------------------------------------------------
 235:./FWLIB/src/stm32f4xx_rtc.c **** 
 236:./FWLIB/src/stm32f4xx_rtc.c ****             
 237:./FWLIB/src/stm32f4xx_rtc.c ****         #####  Selection of RTC_AF2 alternate functions #####
 238:./FWLIB/src/stm32f4xx_rtc.c ****  ===================================================================
 239:./FWLIB/src/stm32f4xx_rtc.c ****  [..] The RTC_AF2 pin (PI8) can be used for the following purposes:
 240:./FWLIB/src/stm32f4xx_rtc.c ****    (+) AFI_TAMPER
 241:./FWLIB/src/stm32f4xx_rtc.c ****    (+) AFI_TIMESTAMP
 242:./FWLIB/src/stm32f4xx_rtc.c ****  [..]
 243:./FWLIB/src/stm32f4xx_rtc.c ****    +---------------------------------------------------------------------------------------+
 244:./FWLIB/src/stm32f4xx_rtc.c ****    |     Pin         |AFI_TAMPER |AFI_TIMESTAMP | TAMP1INSEL |   TSINSEL    |ALARMOUTTYPE  |
 245:./FWLIB/src/stm32f4xx_rtc.c ****    |  configuration  |  ENABLED  |   ENABLED    |TAMPER1 pin |TIMESTAMP pin |  AFO_ALARM   |
 246:./FWLIB/src/stm32f4xx_rtc.c ****    |  and function   |           |              | selection  |  selection   |Configuration |
 247:./FWLIB/src/stm32f4xx_rtc.c ****    |-----------------|-----------|--------------|------------|--------------|--------------|
 248:./FWLIB/src/stm32f4xx_rtc.c ****    |  TAMPER input   |           |              |            |     Don't    |              |
 249:./FWLIB/src/stm32f4xx_rtc.c ****    |   floating      |     1     |      0       |      1     |     care     |  Don't care  |
 250:./FWLIB/src/stm32f4xx_rtc.c ****    |-----------------|-----------|--------------|------------|--------------|--------------|
 251:./FWLIB/src/stm32f4xx_rtc.c ****    |  TIMESTAMP and  |           |              |            |              |              |
 252:./FWLIB/src/stm32f4xx_rtc.c ****    |  TAMPER input   |     1     |      1       |      1     |      1       |  Don't care  |
 253:./FWLIB/src/stm32f4xx_rtc.c ****    |   floating      |           |              |            |              |              |
 254:./FWLIB/src/stm32f4xx_rtc.c ****    |-----------------|-----------|--------------|------------|--------------|--------------|
 255:./FWLIB/src/stm32f4xx_rtc.c ****    | TIMESTAMP input |           |              |    Don't   |              |              |
 256:./FWLIB/src/stm32f4xx_rtc.c ****    |    floating     |     0     |      1       |    care    |      1       |  Don't care  |
 257:./FWLIB/src/stm32f4xx_rtc.c ****    |-----------------|-----------|--------------|------------|--------------|--------------|
 258:./FWLIB/src/stm32f4xx_rtc.c ****    |  Standard GPIO  |     0     |      0       | Don't care |  Don't care  |  Don't care  |
 259:./FWLIB/src/stm32f4xx_rtc.c ****    +---------------------------------------------------------------------------------------+   
 260:./FWLIB/src/stm32f4xx_rtc.c ****  
ARM GAS  /tmp/ccv4OuYc.s 			page 6


 261:./FWLIB/src/stm32f4xx_rtc.c ****      
 262:./FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
 263:./FWLIB/src/stm32f4xx_rtc.c ****   
 264:./FWLIB/src/stm32f4xx_rtc.c ****   ******************************************************************************
 265:./FWLIB/src/stm32f4xx_rtc.c ****   * @attention
 266:./FWLIB/src/stm32f4xx_rtc.c ****   *
 267:./FWLIB/src/stm32f4xx_rtc.c ****   * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
 268:./FWLIB/src/stm32f4xx_rtc.c ****   *
 269:./FWLIB/src/stm32f4xx_rtc.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
 270:./FWLIB/src/stm32f4xx_rtc.c ****   * You may not use this file except in compliance with the License.
 271:./FWLIB/src/stm32f4xx_rtc.c ****   * You may obtain a copy of the License at:
 272:./FWLIB/src/stm32f4xx_rtc.c ****   *
 273:./FWLIB/src/stm32f4xx_rtc.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
 274:./FWLIB/src/stm32f4xx_rtc.c ****   *
 275:./FWLIB/src/stm32f4xx_rtc.c ****   * Unless required by applicable law or agreed to in writing, software 
 276:./FWLIB/src/stm32f4xx_rtc.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
 277:./FWLIB/src/stm32f4xx_rtc.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 278:./FWLIB/src/stm32f4xx_rtc.c ****   * See the License for the specific language governing permissions and
 279:./FWLIB/src/stm32f4xx_rtc.c ****   * limitations under the License.
 280:./FWLIB/src/stm32f4xx_rtc.c ****   *
 281:./FWLIB/src/stm32f4xx_rtc.c ****   ******************************************************************************
 282:./FWLIB/src/stm32f4xx_rtc.c ****   */ 
 283:./FWLIB/src/stm32f4xx_rtc.c **** 
 284:./FWLIB/src/stm32f4xx_rtc.c **** /* Includes ------------------------------------------------------------------*/
 285:./FWLIB/src/stm32f4xx_rtc.c **** #include "stm32f4xx_rtc.h"
 286:./FWLIB/src/stm32f4xx_rtc.c **** 
 287:./FWLIB/src/stm32f4xx_rtc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 288:./FWLIB/src/stm32f4xx_rtc.c ****   * @{
 289:./FWLIB/src/stm32f4xx_rtc.c ****   */
 290:./FWLIB/src/stm32f4xx_rtc.c **** 
 291:./FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC 
 292:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief RTC driver modules
 293:./FWLIB/src/stm32f4xx_rtc.c ****   * @{
 294:./FWLIB/src/stm32f4xx_rtc.c ****   */
 295:./FWLIB/src/stm32f4xx_rtc.c **** 
 296:./FWLIB/src/stm32f4xx_rtc.c **** /* Private typedef -----------------------------------------------------------*/
 297:./FWLIB/src/stm32f4xx_rtc.c **** /* Private define ------------------------------------------------------------*/
 298:./FWLIB/src/stm32f4xx_rtc.c **** 
 299:./FWLIB/src/stm32f4xx_rtc.c **** /* Masks Definition */
 300:./FWLIB/src/stm32f4xx_rtc.c **** #define RTC_TR_RESERVED_MASK    ((uint32_t)0x007F7F7F)
 301:./FWLIB/src/stm32f4xx_rtc.c **** #define RTC_DR_RESERVED_MASK    ((uint32_t)0x00FFFF3F) 
 302:./FWLIB/src/stm32f4xx_rtc.c **** #define RTC_INIT_MASK           ((uint32_t)0xFFFFFFFF)  
 303:./FWLIB/src/stm32f4xx_rtc.c **** #define RTC_RSF_MASK            ((uint32_t)0xFFFFFF5F)
 304:./FWLIB/src/stm32f4xx_rtc.c **** #define RTC_FLAGS_MASK          ((uint32_t)(RTC_FLAG_TSOVF | RTC_FLAG_TSF | RTC_FLAG_WUTF | \
 305:./FWLIB/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_ALRBF | RTC_FLAG_ALRAF | RTC_FLAG_INITF | \
 306:./FWLIB/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_RSF | RTC_FLAG_INITS | RTC_FLAG_WUTWF | \
 307:./FWLIB/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_ALRBWF | RTC_FLAG_ALRAWF | RTC_FLAG_TAMP1F | \
 308:./FWLIB/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_RECALPF | RTC_FLAG_SHPF))
 309:./FWLIB/src/stm32f4xx_rtc.c **** 
 310:./FWLIB/src/stm32f4xx_rtc.c **** #define INITMODE_TIMEOUT         ((uint32_t) 0x00010000)
 311:./FWLIB/src/stm32f4xx_rtc.c **** #define SYNCHRO_TIMEOUT          ((uint32_t) 0x00020000)
 312:./FWLIB/src/stm32f4xx_rtc.c **** #define RECALPF_TIMEOUT          ((uint32_t) 0x00020000)
 313:./FWLIB/src/stm32f4xx_rtc.c **** #define SHPF_TIMEOUT             ((uint32_t) 0x00001000)
 314:./FWLIB/src/stm32f4xx_rtc.c **** 
 315:./FWLIB/src/stm32f4xx_rtc.c **** /* Private macro -------------------------------------------------------------*/
 316:./FWLIB/src/stm32f4xx_rtc.c **** /* Private variables ---------------------------------------------------------*/
 317:./FWLIB/src/stm32f4xx_rtc.c **** /* Private function prototypes -----------------------------------------------*/
ARM GAS  /tmp/ccv4OuYc.s 			page 7


 318:./FWLIB/src/stm32f4xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value);
 319:./FWLIB/src/stm32f4xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value);
 320:./FWLIB/src/stm32f4xx_rtc.c **** 
 321:./FWLIB/src/stm32f4xx_rtc.c **** /* Private functions ---------------------------------------------------------*/
 322:./FWLIB/src/stm32f4xx_rtc.c **** 
 323:./FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Private_Functions
 324:./FWLIB/src/stm32f4xx_rtc.c ****   * @{
 325:./FWLIB/src/stm32f4xx_rtc.c ****   */ 
 326:./FWLIB/src/stm32f4xx_rtc.c **** 
 327:./FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group1 Initialization and Configuration functions
 328:./FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   Initialization and Configuration functions 
 329:./FWLIB/src/stm32f4xx_rtc.c ****  *
 330:./FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
 331:./FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
 332:./FWLIB/src/stm32f4xx_rtc.c ****              ##### Initialization and Configuration functions #####
 333:./FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
 334:./FWLIB/src/stm32f4xx_rtc.c ****  
 335:./FWLIB/src/stm32f4xx_rtc.c ****  [..] This section provide functions allowing to initialize and configure the RTC
 336:./FWLIB/src/stm32f4xx_rtc.c ****       Prescaler (Synchronous and Asynchronous), RTC Hour format, disable RTC registers
 337:./FWLIB/src/stm32f4xx_rtc.c ****       Write protection, enter and exit the RTC initialization mode, RTC registers
 338:./FWLIB/src/stm32f4xx_rtc.c ****       synchronization check and reference clock detection enable.
 339:./FWLIB/src/stm32f4xx_rtc.c ****   
 340:./FWLIB/src/stm32f4xx_rtc.c ****    (#) The RTC Prescaler is programmed to generate the RTC 1Hz time base. It is
 341:./FWLIB/src/stm32f4xx_rtc.c ****        split into 2 programmable prescalers to minimize power consumption.
 342:./FWLIB/src/stm32f4xx_rtc.c ****        (++) A 7-bit asynchronous prescaler and A 13-bit synchronous prescaler.
 343:./FWLIB/src/stm32f4xx_rtc.c ****        (++) When both prescalers are used, it is recommended to configure the 
 344:./FWLIB/src/stm32f4xx_rtc.c ****             asynchronous prescaler to a high value to minimize consumption.
 345:./FWLIB/src/stm32f4xx_rtc.c **** 
 346:./FWLIB/src/stm32f4xx_rtc.c ****    (#) All RTC registers are Write protected. Writing to the RTC registers
 347:./FWLIB/src/stm32f4xx_rtc.c ****        is enabled by writing a key into the Write Protection register, RTC_WPR.
 348:./FWLIB/src/stm32f4xx_rtc.c **** 
 349:./FWLIB/src/stm32f4xx_rtc.c ****    (#) To Configure the RTC Calendar, user application should enter initialization
 350:./FWLIB/src/stm32f4xx_rtc.c ****        mode. In this mode, the calendar counter is stopped and its value can be 
 351:./FWLIB/src/stm32f4xx_rtc.c ****        updated. When the initialization sequence is complete, the calendar restarts 
 352:./FWLIB/src/stm32f4xx_rtc.c ****        counting after 4 RTCCLK cycles.
 353:./FWLIB/src/stm32f4xx_rtc.c **** 
 354:./FWLIB/src/stm32f4xx_rtc.c ****    (#) To read the calendar through the shadow registers after Calendar initialization,
 355:./FWLIB/src/stm32f4xx_rtc.c ****        calendar update or after wakeup from low power modes the software must first 
 356:./FWLIB/src/stm32f4xx_rtc.c ****        clear the RSF flag. The software must then wait until it is set again before 
 357:./FWLIB/src/stm32f4xx_rtc.c ****        reading the calendar, which means that the calendar registers have been 
 358:./FWLIB/src/stm32f4xx_rtc.c ****        correctly copied into the RTC_TR and RTC_DR shadow registers.
 359:./FWLIB/src/stm32f4xx_rtc.c ****        The RTC_WaitForSynchro() function implements the above software sequence 
 360:./FWLIB/src/stm32f4xx_rtc.c ****        (RSF clear and RSF check).
 361:./FWLIB/src/stm32f4xx_rtc.c **** 
 362:./FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
 363:./FWLIB/src/stm32f4xx_rtc.c ****   * @{
 364:./FWLIB/src/stm32f4xx_rtc.c ****   */
 365:./FWLIB/src/stm32f4xx_rtc.c **** 
 366:./FWLIB/src/stm32f4xx_rtc.c **** /**
 367:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Deinitializes the RTC registers to their default reset values.
 368:./FWLIB/src/stm32f4xx_rtc.c ****   * @note   This function doesn't reset the RTC Clock source and RTC Backup Data
 369:./FWLIB/src/stm32f4xx_rtc.c ****   *         registers.       
 370:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  None
 371:./FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 372:./FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are deinitialized
 373:./FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not deinitialized
 374:./FWLIB/src/stm32f4xx_rtc.c ****   */
ARM GAS  /tmp/ccv4OuYc.s 			page 8


 375:./FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_DeInit(void)
 376:./FWLIB/src/stm32f4xx_rtc.c **** {
 377:./FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 378:./FWLIB/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
 379:./FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 380:./FWLIB/src/stm32f4xx_rtc.c ****   
 381:./FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 382:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 383:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 384:./FWLIB/src/stm32f4xx_rtc.c **** 
 385:./FWLIB/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 386:./FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 387:./FWLIB/src/stm32f4xx_rtc.c ****   {
 388:./FWLIB/src/stm32f4xx_rtc.c ****     status = ERROR;
 389:./FWLIB/src/stm32f4xx_rtc.c ****   }  
 390:./FWLIB/src/stm32f4xx_rtc.c ****   else
 391:./FWLIB/src/stm32f4xx_rtc.c ****   {
 392:./FWLIB/src/stm32f4xx_rtc.c ****     /* Reset TR, DR and CR registers */
 393:./FWLIB/src/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)0x00000000;
 394:./FWLIB/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)0x00002101;
 395:./FWLIB/src/stm32f4xx_rtc.c ****     /* Reset All CR bits except CR[2:0] */
 396:./FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)0x00000007;
 397:./FWLIB/src/stm32f4xx_rtc.c ****   
 398:./FWLIB/src/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
 399:./FWLIB/src/stm32f4xx_rtc.c ****     do
 400:./FWLIB/src/stm32f4xx_rtc.c ****     {
 401:./FWLIB/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 402:./FWLIB/src/stm32f4xx_rtc.c ****       wutcounter++;  
 403:./FWLIB/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 404:./FWLIB/src/stm32f4xx_rtc.c ****     
 405:./FWLIB/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 406:./FWLIB/src/stm32f4xx_rtc.c ****     {
 407:./FWLIB/src/stm32f4xx_rtc.c ****       status = ERROR;
 408:./FWLIB/src/stm32f4xx_rtc.c ****     }
 409:./FWLIB/src/stm32f4xx_rtc.c ****     else
 410:./FWLIB/src/stm32f4xx_rtc.c ****     {
 411:./FWLIB/src/stm32f4xx_rtc.c ****       /* Reset all RTC CR register bits */
 412:./FWLIB/src/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)0x00000000;
 413:./FWLIB/src/stm32f4xx_rtc.c ****       RTC->WUTR = (uint32_t)0x0000FFFF;
 414:./FWLIB/src/stm32f4xx_rtc.c ****       RTC->PRER = (uint32_t)0x007F00FF;
 415:./FWLIB/src/stm32f4xx_rtc.c ****       RTC->CALIBR = (uint32_t)0x00000000;
 416:./FWLIB/src/stm32f4xx_rtc.c ****       RTC->ALRMAR = (uint32_t)0x00000000;        
 417:./FWLIB/src/stm32f4xx_rtc.c ****       RTC->ALRMBR = (uint32_t)0x00000000;
 418:./FWLIB/src/stm32f4xx_rtc.c ****       RTC->SHIFTR = (uint32_t)0x00000000;
 419:./FWLIB/src/stm32f4xx_rtc.c ****       RTC->CALR = (uint32_t)0x00000000;
 420:./FWLIB/src/stm32f4xx_rtc.c ****       RTC->ALRMASSR = (uint32_t)0x00000000;
 421:./FWLIB/src/stm32f4xx_rtc.c ****       RTC->ALRMBSSR = (uint32_t)0x00000000;
 422:./FWLIB/src/stm32f4xx_rtc.c ****       
 423:./FWLIB/src/stm32f4xx_rtc.c ****       /* Reset ISR register and exit initialization mode */
 424:./FWLIB/src/stm32f4xx_rtc.c ****       RTC->ISR = (uint32_t)0x00000000;
 425:./FWLIB/src/stm32f4xx_rtc.c ****       
 426:./FWLIB/src/stm32f4xx_rtc.c ****       /* Reset Tamper and alternate functions configuration register */
 427:./FWLIB/src/stm32f4xx_rtc.c ****       RTC->TAFCR = 0x00000000;
 428:./FWLIB/src/stm32f4xx_rtc.c ****   
 429:./FWLIB/src/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
 430:./FWLIB/src/stm32f4xx_rtc.c ****       {
 431:./FWLIB/src/stm32f4xx_rtc.c ****         status = ERROR;
ARM GAS  /tmp/ccv4OuYc.s 			page 9


 432:./FWLIB/src/stm32f4xx_rtc.c ****       }
 433:./FWLIB/src/stm32f4xx_rtc.c ****       else
 434:./FWLIB/src/stm32f4xx_rtc.c ****       {
 435:./FWLIB/src/stm32f4xx_rtc.c ****         status = SUCCESS;      
 436:./FWLIB/src/stm32f4xx_rtc.c ****       }
 437:./FWLIB/src/stm32f4xx_rtc.c ****     }
 438:./FWLIB/src/stm32f4xx_rtc.c ****   }
 439:./FWLIB/src/stm32f4xx_rtc.c ****   
 440:./FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 441:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 442:./FWLIB/src/stm32f4xx_rtc.c ****   
 443:./FWLIB/src/stm32f4xx_rtc.c ****   return status;
 444:./FWLIB/src/stm32f4xx_rtc.c **** }
 445:./FWLIB/src/stm32f4xx_rtc.c **** 
 446:./FWLIB/src/stm32f4xx_rtc.c **** /**
 447:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Initializes the RTC registers according to the specified parameters 
 448:./FWLIB/src/stm32f4xx_rtc.c ****   *         in RTC_InitStruct.
 449:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure that contains 
 450:./FWLIB/src/stm32f4xx_rtc.c ****   *         the configuration information for the RTC peripheral.
 451:./FWLIB/src/stm32f4xx_rtc.c ****   * @note   The RTC Prescaler register is write protected and can be written in 
 452:./FWLIB/src/stm32f4xx_rtc.c ****   *         initialization mode only.  
 453:./FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 454:./FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are initialized
 455:./FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not initialized  
 456:./FWLIB/src/stm32f4xx_rtc.c ****   */
 457:./FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
 458:./FWLIB/src/stm32f4xx_rtc.c **** {
 459:./FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 460:./FWLIB/src/stm32f4xx_rtc.c ****   
 461:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 462:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
 463:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
 464:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));
 465:./FWLIB/src/stm32f4xx_rtc.c **** 
 466:./FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 467:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 468:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 469:./FWLIB/src/stm32f4xx_rtc.c **** 
 470:./FWLIB/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 471:./FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 472:./FWLIB/src/stm32f4xx_rtc.c ****   {
 473:./FWLIB/src/stm32f4xx_rtc.c ****     status = ERROR;
 474:./FWLIB/src/stm32f4xx_rtc.c ****   } 
 475:./FWLIB/src/stm32f4xx_rtc.c ****   else
 476:./FWLIB/src/stm32f4xx_rtc.c ****   {
 477:./FWLIB/src/stm32f4xx_rtc.c ****     /* Clear RTC CR FMT Bit */
 478:./FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 479:./FWLIB/src/stm32f4xx_rtc.c ****     /* Set RTC_CR register */
 480:./FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 481:./FWLIB/src/stm32f4xx_rtc.c ****   
 482:./FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the RTC PRER */
 483:./FWLIB/src/stm32f4xx_rtc.c ****     RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 484:./FWLIB/src/stm32f4xx_rtc.c ****     RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 485:./FWLIB/src/stm32f4xx_rtc.c **** 
 486:./FWLIB/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 487:./FWLIB/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 488:./FWLIB/src/stm32f4xx_rtc.c **** 
ARM GAS  /tmp/ccv4OuYc.s 			page 10


 489:./FWLIB/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 490:./FWLIB/src/stm32f4xx_rtc.c ****   }
 491:./FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 492:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 493:./FWLIB/src/stm32f4xx_rtc.c ****   
 494:./FWLIB/src/stm32f4xx_rtc.c ****   return status;
 495:./FWLIB/src/stm32f4xx_rtc.c **** }
 496:./FWLIB/src/stm32f4xx_rtc.c **** 
 497:./FWLIB/src/stm32f4xx_rtc.c **** /**
 498:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_InitStruct member with its default value.
 499:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure which will be 
 500:./FWLIB/src/stm32f4xx_rtc.c ****   *         initialized.
 501:./FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
 502:./FWLIB/src/stm32f4xx_rtc.c ****   */
 503:./FWLIB/src/stm32f4xx_rtc.c **** void RTC_StructInit(RTC_InitTypeDef* RTC_InitStruct)
 504:./FWLIB/src/stm32f4xx_rtc.c **** {
 505:./FWLIB/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_HourFormat member */
 506:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_HourFormat = RTC_HourFormat_24;
 507:./FWLIB/src/stm32f4xx_rtc.c ****     
 508:./FWLIB/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_AsynchPrediv member */
 509:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;
 510:./FWLIB/src/stm32f4xx_rtc.c **** 
 511:./FWLIB/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_SynchPrediv member */
 512:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 513:./FWLIB/src/stm32f4xx_rtc.c **** }
 514:./FWLIB/src/stm32f4xx_rtc.c **** 
 515:./FWLIB/src/stm32f4xx_rtc.c **** /**
 516:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC registers write protection.
 517:./FWLIB/src/stm32f4xx_rtc.c ****   * @note   All the RTC registers are write protected except for RTC_ISR[13:8], 
 518:./FWLIB/src/stm32f4xx_rtc.c ****   *         RTC_TAFCR and RTC_BKPxR.
 519:./FWLIB/src/stm32f4xx_rtc.c ****   * @note   Writing a wrong key reactivates the write protection.
 520:./FWLIB/src/stm32f4xx_rtc.c ****   * @note   The protection mechanism is not affected by system reset.  
 521:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the write protection.
 522:./FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 523:./FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
 524:./FWLIB/src/stm32f4xx_rtc.c ****   */
 525:./FWLIB/src/stm32f4xx_rtc.c **** void RTC_WriteProtectionCmd(FunctionalState NewState)
 526:./FWLIB/src/stm32f4xx_rtc.c **** {
 527:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 528:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 529:./FWLIB/src/stm32f4xx_rtc.c ****     
 530:./FWLIB/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 531:./FWLIB/src/stm32f4xx_rtc.c ****   {
 532:./FWLIB/src/stm32f4xx_rtc.c ****     /* Enable the write protection for RTC registers */
 533:./FWLIB/src/stm32f4xx_rtc.c ****     RTC->WPR = 0xFF;   
 534:./FWLIB/src/stm32f4xx_rtc.c ****   }
 535:./FWLIB/src/stm32f4xx_rtc.c ****   else
 536:./FWLIB/src/stm32f4xx_rtc.c ****   {
 537:./FWLIB/src/stm32f4xx_rtc.c ****     /* Disable the write protection for RTC registers */
 538:./FWLIB/src/stm32f4xx_rtc.c ****     RTC->WPR = 0xCA;
 539:./FWLIB/src/stm32f4xx_rtc.c ****     RTC->WPR = 0x53;    
 540:./FWLIB/src/stm32f4xx_rtc.c ****   }
 541:./FWLIB/src/stm32f4xx_rtc.c **** }
 542:./FWLIB/src/stm32f4xx_rtc.c **** 
 543:./FWLIB/src/stm32f4xx_rtc.c **** /**
 544:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enters the RTC Initialization mode.
 545:./FWLIB/src/stm32f4xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
ARM GAS  /tmp/ccv4OuYc.s 			page 11


 546:./FWLIB/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.    
 547:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  None
 548:./FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 549:./FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC is in Init mode
 550:./FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC is not in Init mode  
 551:./FWLIB/src/stm32f4xx_rtc.c ****   */
 552:./FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_EnterInitMode(void)
 553:./FWLIB/src/stm32f4xx_rtc.c **** {
 554:./FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t initcounter = 0x00;
 555:./FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 556:./FWLIB/src/stm32f4xx_rtc.c ****   uint32_t initstatus = 0x00;
 557:./FWLIB/src/stm32f4xx_rtc.c ****      
 558:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check if the Initialization mode is set */
 559:./FWLIB/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 560:./FWLIB/src/stm32f4xx_rtc.c ****   {
 561:./FWLIB/src/stm32f4xx_rtc.c ****     /* Set the Initialization mode */
 562:./FWLIB/src/stm32f4xx_rtc.c ****     RTC->ISR = (uint32_t)RTC_INIT_MASK;
 563:./FWLIB/src/stm32f4xx_rtc.c ****     
 564:./FWLIB/src/stm32f4xx_rtc.c ****     /* Wait till RTC is in INIT state and if Time out is reached exit */
 565:./FWLIB/src/stm32f4xx_rtc.c ****     do
 566:./FWLIB/src/stm32f4xx_rtc.c ****     {
 567:./FWLIB/src/stm32f4xx_rtc.c ****       initstatus = RTC->ISR & RTC_ISR_INITF;
 568:./FWLIB/src/stm32f4xx_rtc.c ****       initcounter++;  
 569:./FWLIB/src/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 570:./FWLIB/src/stm32f4xx_rtc.c ****     
 571:./FWLIB/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 572:./FWLIB/src/stm32f4xx_rtc.c ****     {
 573:./FWLIB/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 574:./FWLIB/src/stm32f4xx_rtc.c ****     }
 575:./FWLIB/src/stm32f4xx_rtc.c ****     else
 576:./FWLIB/src/stm32f4xx_rtc.c ****     {
 577:./FWLIB/src/stm32f4xx_rtc.c ****       status = ERROR;
 578:./FWLIB/src/stm32f4xx_rtc.c ****     }        
 579:./FWLIB/src/stm32f4xx_rtc.c ****   }
 580:./FWLIB/src/stm32f4xx_rtc.c ****   else
 581:./FWLIB/src/stm32f4xx_rtc.c ****   {
 582:./FWLIB/src/stm32f4xx_rtc.c ****     status = SUCCESS;  
 583:./FWLIB/src/stm32f4xx_rtc.c ****   } 
 584:./FWLIB/src/stm32f4xx_rtc.c ****     
 585:./FWLIB/src/stm32f4xx_rtc.c ****   return (status);  
 586:./FWLIB/src/stm32f4xx_rtc.c **** }
 587:./FWLIB/src/stm32f4xx_rtc.c **** 
 588:./FWLIB/src/stm32f4xx_rtc.c **** /**
 589:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Exits the RTC Initialization mode.
 590:./FWLIB/src/stm32f4xx_rtc.c ****   * @note   When the initialization sequence is complete, the calendar restarts 
 591:./FWLIB/src/stm32f4xx_rtc.c ****   *         counting after 4 RTCCLK cycles.  
 592:./FWLIB/src/stm32f4xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 593:./FWLIB/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.      
 594:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  None
 595:./FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
 596:./FWLIB/src/stm32f4xx_rtc.c ****   */
 597:./FWLIB/src/stm32f4xx_rtc.c **** void RTC_ExitInitMode(void)
 598:./FWLIB/src/stm32f4xx_rtc.c **** { 
 599:./FWLIB/src/stm32f4xx_rtc.c ****   /* Exit Initialization mode */
 600:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 601:./FWLIB/src/stm32f4xx_rtc.c **** }
 602:./FWLIB/src/stm32f4xx_rtc.c **** 
ARM GAS  /tmp/ccv4OuYc.s 			page 12


 603:./FWLIB/src/stm32f4xx_rtc.c **** /**
 604:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Waits until the RTC Time and Date registers (RTC_TR and RTC_DR) are 
 605:./FWLIB/src/stm32f4xx_rtc.c ****   *         synchronized with RTC APB clock.
 606:./FWLIB/src/stm32f4xx_rtc.c ****   * @note   The RTC Resynchronization mode is write protected, use the 
 607:./FWLIB/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function. 
 608:./FWLIB/src/stm32f4xx_rtc.c ****   * @note   To read the calendar through the shadow registers after Calendar 
 609:./FWLIB/src/stm32f4xx_rtc.c ****   *         initialization, calendar update or after wakeup from low power modes 
 610:./FWLIB/src/stm32f4xx_rtc.c ****   *         the software must first clear the RSF flag. 
 611:./FWLIB/src/stm32f4xx_rtc.c ****   *         The software must then wait until it is set again before reading 
 612:./FWLIB/src/stm32f4xx_rtc.c ****   *         the calendar, which means that the calendar registers have been 
 613:./FWLIB/src/stm32f4xx_rtc.c ****   *         correctly copied into the RTC_TR and RTC_DR shadow registers.   
 614:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  None
 615:./FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 616:./FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are synchronised
 617:./FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not synchronised
 618:./FWLIB/src/stm32f4xx_rtc.c ****   */
 619:./FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_WaitForSynchro(void)
 620:./FWLIB/src/stm32f4xx_rtc.c **** {
 621:./FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t synchrocounter = 0;
 622:./FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 623:./FWLIB/src/stm32f4xx_rtc.c ****   uint32_t synchrostatus = 0x00;
 624:./FWLIB/src/stm32f4xx_rtc.c **** 
 625:./FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 626:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 627:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 628:./FWLIB/src/stm32f4xx_rtc.c ****     
 629:./FWLIB/src/stm32f4xx_rtc.c ****   /* Clear RSF flag */
 630:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 631:./FWLIB/src/stm32f4xx_rtc.c ****     
 632:./FWLIB/src/stm32f4xx_rtc.c ****   /* Wait the registers to be synchronised */
 633:./FWLIB/src/stm32f4xx_rtc.c ****   do
 634:./FWLIB/src/stm32f4xx_rtc.c ****   {
 635:./FWLIB/src/stm32f4xx_rtc.c ****     synchrostatus = RTC->ISR & RTC_ISR_RSF;
 636:./FWLIB/src/stm32f4xx_rtc.c ****     synchrocounter++;  
 637:./FWLIB/src/stm32f4xx_rtc.c ****   } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 638:./FWLIB/src/stm32f4xx_rtc.c ****     
 639:./FWLIB/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 640:./FWLIB/src/stm32f4xx_rtc.c ****   {
 641:./FWLIB/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 642:./FWLIB/src/stm32f4xx_rtc.c ****   }
 643:./FWLIB/src/stm32f4xx_rtc.c ****   else
 644:./FWLIB/src/stm32f4xx_rtc.c ****   {
 645:./FWLIB/src/stm32f4xx_rtc.c ****     status = ERROR;
 646:./FWLIB/src/stm32f4xx_rtc.c ****   }        
 647:./FWLIB/src/stm32f4xx_rtc.c **** 
 648:./FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 649:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 650:./FWLIB/src/stm32f4xx_rtc.c ****     
 651:./FWLIB/src/stm32f4xx_rtc.c ****   return (status); 
 652:./FWLIB/src/stm32f4xx_rtc.c **** }
 653:./FWLIB/src/stm32f4xx_rtc.c **** 
 654:./FWLIB/src/stm32f4xx_rtc.c **** /**
 655:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC reference clock detection.
 656:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the RTC reference clock.
 657:./FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 658:./FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 659:./FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC reference clock detection is enabled
ARM GAS  /tmp/ccv4OuYc.s 			page 13


 660:./FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC reference clock detection is disabled  
 661:./FWLIB/src/stm32f4xx_rtc.c ****   */
 662:./FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_RefClockCmd(FunctionalState NewState)
 663:./FWLIB/src/stm32f4xx_rtc.c **** { 
 664:./FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 665:./FWLIB/src/stm32f4xx_rtc.c ****   
 666:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 667:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 668:./FWLIB/src/stm32f4xx_rtc.c ****   
 669:./FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 670:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 671:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 672:./FWLIB/src/stm32f4xx_rtc.c ****     
 673:./FWLIB/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 674:./FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 675:./FWLIB/src/stm32f4xx_rtc.c ****   {
 676:./FWLIB/src/stm32f4xx_rtc.c ****     status = ERROR;
 677:./FWLIB/src/stm32f4xx_rtc.c ****   } 
 678:./FWLIB/src/stm32f4xx_rtc.c ****   else
 679:./FWLIB/src/stm32f4xx_rtc.c ****   {  
 680:./FWLIB/src/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
 681:./FWLIB/src/stm32f4xx_rtc.c ****     {
 682:./FWLIB/src/stm32f4xx_rtc.c ****       /* Enable the RTC reference clock detection */
 683:./FWLIB/src/stm32f4xx_rtc.c ****       RTC->CR |= RTC_CR_REFCKON;   
 684:./FWLIB/src/stm32f4xx_rtc.c ****     }
 685:./FWLIB/src/stm32f4xx_rtc.c ****     else
 686:./FWLIB/src/stm32f4xx_rtc.c ****     {
 687:./FWLIB/src/stm32f4xx_rtc.c ****       /* Disable the RTC reference clock detection */
 688:./FWLIB/src/stm32f4xx_rtc.c ****       RTC->CR &= ~RTC_CR_REFCKON;    
 689:./FWLIB/src/stm32f4xx_rtc.c ****     }
 690:./FWLIB/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 691:./FWLIB/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 692:./FWLIB/src/stm32f4xx_rtc.c ****     
 693:./FWLIB/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 694:./FWLIB/src/stm32f4xx_rtc.c ****   }
 695:./FWLIB/src/stm32f4xx_rtc.c ****   
 696:./FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 697:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 698:./FWLIB/src/stm32f4xx_rtc.c ****   
 699:./FWLIB/src/stm32f4xx_rtc.c ****   return status; 
 700:./FWLIB/src/stm32f4xx_rtc.c **** }
 701:./FWLIB/src/stm32f4xx_rtc.c **** 
 702:./FWLIB/src/stm32f4xx_rtc.c **** /**
 703:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Bypass Shadow feature.
 704:./FWLIB/src/stm32f4xx_rtc.c ****   * @note   When the Bypass Shadow is enabled the calendar value are taken 
 705:./FWLIB/src/stm32f4xx_rtc.c ****   *         directly from the Calendar counter.
 706:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the Bypass Shadow feature.
 707:./FWLIB/src/stm32f4xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.
 708:./FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
 709:./FWLIB/src/stm32f4xx_rtc.c **** */
 710:./FWLIB/src/stm32f4xx_rtc.c **** void RTC_BypassShadowCmd(FunctionalState NewState)
 711:./FWLIB/src/stm32f4xx_rtc.c **** {
 712:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 713:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 714:./FWLIB/src/stm32f4xx_rtc.c **** 
 715:./FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 716:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
ARM GAS  /tmp/ccv4OuYc.s 			page 14


 717:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 718:./FWLIB/src/stm32f4xx_rtc.c ****   
 719:./FWLIB/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 720:./FWLIB/src/stm32f4xx_rtc.c ****   {
 721:./FWLIB/src/stm32f4xx_rtc.c ****     /* Set the BYPSHAD bit */
 722:./FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 723:./FWLIB/src/stm32f4xx_rtc.c ****   }
 724:./FWLIB/src/stm32f4xx_rtc.c ****   else
 725:./FWLIB/src/stm32f4xx_rtc.c ****   {
 726:./FWLIB/src/stm32f4xx_rtc.c ****     /* Reset the BYPSHAD bit */
 727:./FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint8_t)~RTC_CR_BYPSHAD;
 728:./FWLIB/src/stm32f4xx_rtc.c ****   }
 729:./FWLIB/src/stm32f4xx_rtc.c **** 
 730:./FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 731:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 732:./FWLIB/src/stm32f4xx_rtc.c **** }
 733:./FWLIB/src/stm32f4xx_rtc.c **** 
 734:./FWLIB/src/stm32f4xx_rtc.c **** /**
 735:./FWLIB/src/stm32f4xx_rtc.c ****   * @}
 736:./FWLIB/src/stm32f4xx_rtc.c ****   */
 737:./FWLIB/src/stm32f4xx_rtc.c **** 
 738:./FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group2 Time and Date configuration functions
 739:./FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   Time and Date configuration functions 
 740:./FWLIB/src/stm32f4xx_rtc.c ****  *
 741:./FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
 742:./FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
 743:./FWLIB/src/stm32f4xx_rtc.c ****                  ##### Time and Date configuration functions #####
 744:./FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================  
 745:./FWLIB/src/stm32f4xx_rtc.c ****  
 746:./FWLIB/src/stm32f4xx_rtc.c ****  [..] This section provide functions allowing to program and read the RTC Calendar
 747:./FWLIB/src/stm32f4xx_rtc.c ****       (Time and Date).
 748:./FWLIB/src/stm32f4xx_rtc.c **** 
 749:./FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
 750:./FWLIB/src/stm32f4xx_rtc.c ****   * @{
 751:./FWLIB/src/stm32f4xx_rtc.c ****   */
 752:./FWLIB/src/stm32f4xx_rtc.c **** 
 753:./FWLIB/src/stm32f4xx_rtc.c **** /**
 754:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Set the RTC current time.
 755:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 756:./FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 757:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 758:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 759:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that contains 
 760:./FWLIB/src/stm32f4xx_rtc.c ****   *                        the time configuration information for the RTC.     
 761:./FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 762:./FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Time register is configured
 763:./FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Time register is not configured
 764:./FWLIB/src/stm32f4xx_rtc.c ****   */
 765:./FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 766:./FWLIB/src/stm32f4xx_rtc.c **** {
 767:./FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 768:./FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 769:./FWLIB/src/stm32f4xx_rtc.c ****     
 770:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 771:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 772:./FWLIB/src/stm32f4xx_rtc.c ****   
 773:./FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
ARM GAS  /tmp/ccv4OuYc.s 			page 15


 774:./FWLIB/src/stm32f4xx_rtc.c ****   {
 775:./FWLIB/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 776:./FWLIB/src/stm32f4xx_rtc.c ****     {
 777:./FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
 778:./FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
 779:./FWLIB/src/stm32f4xx_rtc.c ****     } 
 780:./FWLIB/src/stm32f4xx_rtc.c ****     else
 781:./FWLIB/src/stm32f4xx_rtc.c ****     {
 782:./FWLIB/src/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 783:./FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_TimeStruct->RTC_Hours));
 784:./FWLIB/src/stm32f4xx_rtc.c ****     }
 785:./FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
 786:./FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
 787:./FWLIB/src/stm32f4xx_rtc.c ****   }
 788:./FWLIB/src/stm32f4xx_rtc.c ****   else
 789:./FWLIB/src/stm32f4xx_rtc.c ****   {
 790:./FWLIB/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 791:./FWLIB/src/stm32f4xx_rtc.c ****     {
 792:./FWLIB/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 793:./FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
 794:./FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
 795:./FWLIB/src/stm32f4xx_rtc.c ****     } 
 796:./FWLIB/src/stm32f4xx_rtc.c ****     else
 797:./FWLIB/src/stm32f4xx_rtc.c ****     {
 798:./FWLIB/src/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 799:./FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours)));
 800:./FWLIB/src/stm32f4xx_rtc.c ****     }
 801:./FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes)));
 802:./FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds)));
 803:./FWLIB/src/stm32f4xx_rtc.c ****   }
 804:./FWLIB/src/stm32f4xx_rtc.c ****   
 805:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 806:./FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 807:./FWLIB/src/stm32f4xx_rtc.c ****   {
 808:./FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 809:./FWLIB/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 810:./FWLIB/src/stm32f4xx_rtc.c ****              ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 811:./FWLIB/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 812:./FWLIB/src/stm32f4xx_rtc.c ****   }  
 813:./FWLIB/src/stm32f4xx_rtc.c ****   else
 814:./FWLIB/src/stm32f4xx_rtc.c ****   {
 815:./FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 816:./FWLIB/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 817:./FWLIB/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 818:./FWLIB/src/stm32f4xx_rtc.c ****                    (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 819:./FWLIB/src/stm32f4xx_rtc.c ****   }  
 820:./FWLIB/src/stm32f4xx_rtc.c **** 
 821:./FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 822:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 823:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 824:./FWLIB/src/stm32f4xx_rtc.c **** 
 825:./FWLIB/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 826:./FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 827:./FWLIB/src/stm32f4xx_rtc.c ****   {
 828:./FWLIB/src/stm32f4xx_rtc.c ****     status = ERROR;
 829:./FWLIB/src/stm32f4xx_rtc.c ****   } 
 830:./FWLIB/src/stm32f4xx_rtc.c ****   else
ARM GAS  /tmp/ccv4OuYc.s 			page 16


 831:./FWLIB/src/stm32f4xx_rtc.c ****   {
 832:./FWLIB/src/stm32f4xx_rtc.c ****     /* Set the RTC_TR register */
 833:./FWLIB/src/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 834:./FWLIB/src/stm32f4xx_rtc.c **** 
 835:./FWLIB/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 836:./FWLIB/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
 837:./FWLIB/src/stm32f4xx_rtc.c **** 
 838:./FWLIB/src/stm32f4xx_rtc.c ****     /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
 839:./FWLIB/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 840:./FWLIB/src/stm32f4xx_rtc.c ****     {
 841:./FWLIB/src/stm32f4xx_rtc.c ****     if(RTC_WaitForSynchro() == ERROR)
 842:./FWLIB/src/stm32f4xx_rtc.c ****     {
 843:./FWLIB/src/stm32f4xx_rtc.c ****       status = ERROR;
 844:./FWLIB/src/stm32f4xx_rtc.c ****     }
 845:./FWLIB/src/stm32f4xx_rtc.c ****     else
 846:./FWLIB/src/stm32f4xx_rtc.c ****     {
 847:./FWLIB/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 848:./FWLIB/src/stm32f4xx_rtc.c ****     }
 849:./FWLIB/src/stm32f4xx_rtc.c ****   }
 850:./FWLIB/src/stm32f4xx_rtc.c ****     else
 851:./FWLIB/src/stm32f4xx_rtc.c ****     {
 852:./FWLIB/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 853:./FWLIB/src/stm32f4xx_rtc.c ****     }
 854:./FWLIB/src/stm32f4xx_rtc.c ****   }
 855:./FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 856:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 857:./FWLIB/src/stm32f4xx_rtc.c ****     
 858:./FWLIB/src/stm32f4xx_rtc.c ****   return status;
 859:./FWLIB/src/stm32f4xx_rtc.c **** }
 860:./FWLIB/src/stm32f4xx_rtc.c **** 
 861:./FWLIB/src/stm32f4xx_rtc.c **** /**
 862:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_TimeStruct member with its default value
 863:./FWLIB/src/stm32f4xx_rtc.c ****   *         (Time = 00h:00min:00sec).
 864:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure which will be 
 865:./FWLIB/src/stm32f4xx_rtc.c ****   *         initialized.
 866:./FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
 867:./FWLIB/src/stm32f4xx_rtc.c ****   */
 868:./FWLIB/src/stm32f4xx_rtc.c **** void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
 869:./FWLIB/src/stm32f4xx_rtc.c **** {
 870:./FWLIB/src/stm32f4xx_rtc.c ****   /* Time = 00h:00min:00sec */
 871:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 872:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = 0;
 873:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = 0;
 874:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = 0; 
 875:./FWLIB/src/stm32f4xx_rtc.c **** }
 876:./FWLIB/src/stm32f4xx_rtc.c **** 
 877:./FWLIB/src/stm32f4xx_rtc.c **** /**
 878:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC current Time.
 879:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
 880:./FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 881:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 882:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 883:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
 884:./FWLIB/src/stm32f4xx_rtc.c ****   *                        contain the returned current time configuration.     
 885:./FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
 886:./FWLIB/src/stm32f4xx_rtc.c ****   */
 887:./FWLIB/src/stm32f4xx_rtc.c **** void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
ARM GAS  /tmp/ccv4OuYc.s 			page 17


 888:./FWLIB/src/stm32f4xx_rtc.c **** {
 889:./FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 890:./FWLIB/src/stm32f4xx_rtc.c **** 
 891:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 892:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 893:./FWLIB/src/stm32f4xx_rtc.c **** 
 894:./FWLIB/src/stm32f4xx_rtc.c ****   /* Get the RTC_TR register */
 895:./FWLIB/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 896:./FWLIB/src/stm32f4xx_rtc.c ****   
 897:./FWLIB/src/stm32f4xx_rtc.c ****   /* Fill the structure fields with the read parameters */
 898:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 899:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 900:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 901:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 902:./FWLIB/src/stm32f4xx_rtc.c **** 
 903:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 904:./FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 905:./FWLIB/src/stm32f4xx_rtc.c ****   {
 906:./FWLIB/src/stm32f4xx_rtc.c ****     /* Convert the structure parameters to Binary format */
 907:./FWLIB/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 908:./FWLIB/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 909:./FWLIB/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 910:./FWLIB/src/stm32f4xx_rtc.c ****   }
 911:./FWLIB/src/stm32f4xx_rtc.c **** }
 912:./FWLIB/src/stm32f4xx_rtc.c **** 
 913:./FWLIB/src/stm32f4xx_rtc.c **** /**
 914:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Gets the RTC current Calendar Sub seconds value.
 915:./FWLIB/src/stm32f4xx_rtc.c ****   * @note   This function freeze the Time and Date registers after reading the 
 916:./FWLIB/src/stm32f4xx_rtc.c ****   *         SSR register.
 917:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  None
 918:./FWLIB/src/stm32f4xx_rtc.c ****   * @retval RTC current Calendar Sub seconds value.
 919:./FWLIB/src/stm32f4xx_rtc.c ****   */
 920:./FWLIB/src/stm32f4xx_rtc.c **** uint32_t RTC_GetSubSecond(void)
 921:./FWLIB/src/stm32f4xx_rtc.c **** {
 922:./FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 923:./FWLIB/src/stm32f4xx_rtc.c ****   
 924:./FWLIB/src/stm32f4xx_rtc.c ****   /* Get sub seconds values from the correspondent registers*/
 925:./FWLIB/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->SSR);
 926:./FWLIB/src/stm32f4xx_rtc.c ****   
 927:./FWLIB/src/stm32f4xx_rtc.c ****   /* Read DR register to unfroze calendar registers */
 928:./FWLIB/src/stm32f4xx_rtc.c ****   (void) (RTC->DR);
 929:./FWLIB/src/stm32f4xx_rtc.c ****   
 930:./FWLIB/src/stm32f4xx_rtc.c ****   return (tmpreg);
 931:./FWLIB/src/stm32f4xx_rtc.c **** }
 932:./FWLIB/src/stm32f4xx_rtc.c **** 
 933:./FWLIB/src/stm32f4xx_rtc.c **** /**
 934:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Set the RTC current date.
 935:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 936:./FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 937:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 938:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 939:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure that contains 
 940:./FWLIB/src/stm32f4xx_rtc.c ****   *                         the date configuration information for the RTC.
 941:./FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 942:./FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Date register is configured
 943:./FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Date register is not configured
 944:./FWLIB/src/stm32f4xx_rtc.c ****   */
ARM GAS  /tmp/ccv4OuYc.s 			page 18


 945:./FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
 946:./FWLIB/src/stm32f4xx_rtc.c **** {
 947:./FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 948:./FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 949:./FWLIB/src/stm32f4xx_rtc.c ****   
 950:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 951:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 952:./FWLIB/src/stm32f4xx_rtc.c **** 
 953:./FWLIB/src/stm32f4xx_rtc.c ****   if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 954:./FWLIB/src/stm32f4xx_rtc.c ****   {
 955:./FWLIB/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 956:./FWLIB/src/stm32f4xx_rtc.c ****   }  
 957:./FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 958:./FWLIB/src/stm32f4xx_rtc.c ****   {
 959:./FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_DateStruct->RTC_Year));
 960:./FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MONTH(RTC_DateStruct->RTC_Month));
 961:./FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_DATE(RTC_DateStruct->RTC_Date));
 962:./FWLIB/src/stm32f4xx_rtc.c ****   }
 963:./FWLIB/src/stm32f4xx_rtc.c ****   else
 964:./FWLIB/src/stm32f4xx_rtc.c ****   {
 965:./FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year)));
 966:./FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 967:./FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MONTH(tmpreg));
 968:./FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 969:./FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_DATE(tmpreg));
 970:./FWLIB/src/stm32f4xx_rtc.c ****   }
 971:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));
 972:./FWLIB/src/stm32f4xx_rtc.c **** 
 973:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 974:./FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 975:./FWLIB/src/stm32f4xx_rtc.c ****   {
 976:./FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 977:./FWLIB/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 978:./FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_Date) | \
 979:./FWLIB/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 980:./FWLIB/src/stm32f4xx_rtc.c ****   }  
 981:./FWLIB/src/stm32f4xx_rtc.c ****   else
 982:./FWLIB/src/stm32f4xx_rtc.c ****   {
 983:./FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 984:./FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 985:./FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 986:./FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 987:./FWLIB/src/stm32f4xx_rtc.c ****   }
 988:./FWLIB/src/stm32f4xx_rtc.c **** 
 989:./FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 990:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 991:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 992:./FWLIB/src/stm32f4xx_rtc.c **** 
 993:./FWLIB/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 994:./FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 995:./FWLIB/src/stm32f4xx_rtc.c ****   {
 996:./FWLIB/src/stm32f4xx_rtc.c ****     status = ERROR;
 997:./FWLIB/src/stm32f4xx_rtc.c ****   } 
 998:./FWLIB/src/stm32f4xx_rtc.c ****   else
 999:./FWLIB/src/stm32f4xx_rtc.c ****   {
1000:./FWLIB/src/stm32f4xx_rtc.c ****     /* Set the RTC_DR register */
1001:./FWLIB/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
ARM GAS  /tmp/ccv4OuYc.s 			page 19


1002:./FWLIB/src/stm32f4xx_rtc.c **** 
1003:./FWLIB/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1004:./FWLIB/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
1005:./FWLIB/src/stm32f4xx_rtc.c **** 
1006:./FWLIB/src/stm32f4xx_rtc.c ****     /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
1007:./FWLIB/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
1008:./FWLIB/src/stm32f4xx_rtc.c ****     {
1009:./FWLIB/src/stm32f4xx_rtc.c ****     if(RTC_WaitForSynchro() == ERROR)
1010:./FWLIB/src/stm32f4xx_rtc.c ****     {
1011:./FWLIB/src/stm32f4xx_rtc.c ****       status = ERROR;
1012:./FWLIB/src/stm32f4xx_rtc.c ****     }
1013:./FWLIB/src/stm32f4xx_rtc.c ****     else
1014:./FWLIB/src/stm32f4xx_rtc.c ****     {
1015:./FWLIB/src/stm32f4xx_rtc.c ****       status = SUCCESS;
1016:./FWLIB/src/stm32f4xx_rtc.c ****     }
1017:./FWLIB/src/stm32f4xx_rtc.c ****   }
1018:./FWLIB/src/stm32f4xx_rtc.c ****     else
1019:./FWLIB/src/stm32f4xx_rtc.c ****     {
1020:./FWLIB/src/stm32f4xx_rtc.c ****       status = SUCCESS;
1021:./FWLIB/src/stm32f4xx_rtc.c ****     }
1022:./FWLIB/src/stm32f4xx_rtc.c ****   }
1023:./FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1024:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
1025:./FWLIB/src/stm32f4xx_rtc.c ****   
1026:./FWLIB/src/stm32f4xx_rtc.c ****   return status;
1027:./FWLIB/src/stm32f4xx_rtc.c **** }
1028:./FWLIB/src/stm32f4xx_rtc.c **** 
1029:./FWLIB/src/stm32f4xx_rtc.c **** /**
1030:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_DateStruct member with its default value
1031:./FWLIB/src/stm32f4xx_rtc.c ****   *         (Monday, January 01 xx00).
1032:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure which will be 
1033:./FWLIB/src/stm32f4xx_rtc.c ****   *         initialized.
1034:./FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1035:./FWLIB/src/stm32f4xx_rtc.c ****   */
1036:./FWLIB/src/stm32f4xx_rtc.c **** void RTC_DateStructInit(RTC_DateTypeDef* RTC_DateStruct)
1037:./FWLIB/src/stm32f4xx_rtc.c **** {
1038:./FWLIB/src/stm32f4xx_rtc.c ****   /* Monday, January 01 xx00 */
1039:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
1040:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = 1;
1041:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = RTC_Month_January;
1042:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = 0;
1043:./FWLIB/src/stm32f4xx_rtc.c **** }
1044:./FWLIB/src/stm32f4xx_rtc.c **** 
1045:./FWLIB/src/stm32f4xx_rtc.c **** /**
1046:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC current date. 
1047:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1048:./FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1049:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1050:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1051:./FWLIB/src/stm32f4xx_rtc.c ****   * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
1052:./FWLIB/src/stm32f4xx_rtc.c ****   *                        contain the returned current date configuration.     
1053:./FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1054:./FWLIB/src/stm32f4xx_rtc.c ****   */
1055:./FWLIB/src/stm32f4xx_rtc.c **** void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
1056:./FWLIB/src/stm32f4xx_rtc.c **** {
1057:./FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1058:./FWLIB/src/stm32f4xx_rtc.c **** 
ARM GAS  /tmp/ccv4OuYc.s 			page 20


1059:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1060:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1061:./FWLIB/src/stm32f4xx_rtc.c ****   
1062:./FWLIB/src/stm32f4xx_rtc.c ****   /* Get the RTC_TR register */
1063:./FWLIB/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
1064:./FWLIB/src/stm32f4xx_rtc.c **** 
1065:./FWLIB/src/stm32f4xx_rtc.c ****   /* Fill the structure fields with the read parameters */
1066:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
1067:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
1068:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
1069:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
1070:./FWLIB/src/stm32f4xx_rtc.c **** 
1071:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
1072:./FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
1073:./FWLIB/src/stm32f4xx_rtc.c ****   {
1074:./FWLIB/src/stm32f4xx_rtc.c ****     /* Convert the structure parameters to Binary format */
1075:./FWLIB/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
1076:./FWLIB/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
1077:./FWLIB/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
1078:./FWLIB/src/stm32f4xx_rtc.c ****   }
1079:./FWLIB/src/stm32f4xx_rtc.c **** }
1080:./FWLIB/src/stm32f4xx_rtc.c **** 
1081:./FWLIB/src/stm32f4xx_rtc.c **** /**
1082:./FWLIB/src/stm32f4xx_rtc.c ****   * @}
1083:./FWLIB/src/stm32f4xx_rtc.c ****   */
1084:./FWLIB/src/stm32f4xx_rtc.c **** 
1085:./FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group3 Alarms configuration functions
1086:./FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   Alarms (Alarm A and Alarm B) configuration functions 
1087:./FWLIB/src/stm32f4xx_rtc.c ****  *
1088:./FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
1089:./FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
1090:./FWLIB/src/stm32f4xx_rtc.c ****          ##### Alarms A and B configuration functions #####
1091:./FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================  
1092:./FWLIB/src/stm32f4xx_rtc.c ****  
1093:./FWLIB/src/stm32f4xx_rtc.c ****  [..] This section provide functions allowing to program and read the RTC Alarms.
1094:./FWLIB/src/stm32f4xx_rtc.c **** 
1095:./FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
1096:./FWLIB/src/stm32f4xx_rtc.c ****   * @{
1097:./FWLIB/src/stm32f4xx_rtc.c ****   */
1098:./FWLIB/src/stm32f4xx_rtc.c **** 
1099:./FWLIB/src/stm32f4xx_rtc.c **** /**
1100:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Set the specified RTC Alarm.
1101:./FWLIB/src/stm32f4xx_rtc.c ****   * @note   The Alarm register can only be written when the corresponding Alarm
1102:./FWLIB/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_AlarmCmd(DISABLE)).    
1103:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1104:./FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1105:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1106:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1107:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1108:./FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1109:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1110:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1111:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that 
1112:./FWLIB/src/stm32f4xx_rtc.c ****   *                          contains the alarm configuration parameters.     
1113:./FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1114:./FWLIB/src/stm32f4xx_rtc.c ****   */
1115:./FWLIB/src/stm32f4xx_rtc.c **** void RTC_SetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
ARM GAS  /tmp/ccv4OuYc.s 			page 21


1116:./FWLIB/src/stm32f4xx_rtc.c **** {
1117:./FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1118:./FWLIB/src/stm32f4xx_rtc.c ****   
1119:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1120:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1121:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1122:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
1123:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));
1124:./FWLIB/src/stm32f4xx_rtc.c **** 
1125:./FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
1126:./FWLIB/src/stm32f4xx_rtc.c ****   {
1127:./FWLIB/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
1128:./FWLIB/src/stm32f4xx_rtc.c ****     {
1129:./FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1130:./FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1131:./FWLIB/src/stm32f4xx_rtc.c ****     } 
1132:./FWLIB/src/stm32f4xx_rtc.c ****     else
1133:./FWLIB/src/stm32f4xx_rtc.c ****     {
1134:./FWLIB/src/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
1135:./FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1136:./FWLIB/src/stm32f4xx_rtc.c ****     }
1137:./FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes));
1138:./FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds));
1139:./FWLIB/src/stm32f4xx_rtc.c ****     
1140:./FWLIB/src/stm32f4xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
1141:./FWLIB/src/stm32f4xx_rtc.c ****     {
1142:./FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1143:./FWLIB/src/stm32f4xx_rtc.c ****     }
1144:./FWLIB/src/stm32f4xx_rtc.c ****     else
1145:./FWLIB/src/stm32f4xx_rtc.c ****     {
1146:./FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1147:./FWLIB/src/stm32f4xx_rtc.c ****     }
1148:./FWLIB/src/stm32f4xx_rtc.c ****   }
1149:./FWLIB/src/stm32f4xx_rtc.c ****   else
1150:./FWLIB/src/stm32f4xx_rtc.c ****   {
1151:./FWLIB/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
1152:./FWLIB/src/stm32f4xx_rtc.c ****     {
1153:./FWLIB/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours);
1154:./FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
1155:./FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1156:./FWLIB/src/stm32f4xx_rtc.c ****     } 
1157:./FWLIB/src/stm32f4xx_rtc.c ****     else
1158:./FWLIB/src/stm32f4xx_rtc.c ****     {
1159:./FWLIB/src/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
1160:./FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours)));
1161:./FWLIB/src/stm32f4xx_rtc.c ****     }
1162:./FWLIB/src/stm32f4xx_rtc.c ****     
1163:./FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes)));
1164:./FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)));
1165:./FWLIB/src/stm32f4xx_rtc.c ****     
1166:./FWLIB/src/stm32f4xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
1167:./FWLIB/src/stm32f4xx_rtc.c ****     {
1168:./FWLIB/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
1169:./FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
1170:./FWLIB/src/stm32f4xx_rtc.c ****     }
1171:./FWLIB/src/stm32f4xx_rtc.c ****     else
1172:./FWLIB/src/stm32f4xx_rtc.c ****     {
ARM GAS  /tmp/ccv4OuYc.s 			page 22


1173:./FWLIB/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
1174:./FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
1175:./FWLIB/src/stm32f4xx_rtc.c ****     }    
1176:./FWLIB/src/stm32f4xx_rtc.c ****   }
1177:./FWLIB/src/stm32f4xx_rtc.c **** 
1178:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
1179:./FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
1180:./FWLIB/src/stm32f4xx_rtc.c ****   {
1181:./FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
1182:./FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
1183:./FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
1184:./FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
1185:./FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
1186:./FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
1187:./FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
1188:./FWLIB/src/stm32f4xx_rtc.c ****   }  
1189:./FWLIB/src/stm32f4xx_rtc.c ****   else
1190:./FWLIB/src/stm32f4xx_rtc.c ****   {
1191:./FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
1192:./FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
1193:./FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
1194:./FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
1195:./FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
1196:./FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
1197:./FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
1198:./FWLIB/src/stm32f4xx_rtc.c ****   } 
1199:./FWLIB/src/stm32f4xx_rtc.c **** 
1200:./FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1201:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1202:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1203:./FWLIB/src/stm32f4xx_rtc.c **** 
1204:./FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the Alarm register */
1205:./FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
1206:./FWLIB/src/stm32f4xx_rtc.c ****   {
1207:./FWLIB/src/stm32f4xx_rtc.c ****     RTC->ALRMAR = (uint32_t)tmpreg;
1208:./FWLIB/src/stm32f4xx_rtc.c ****   }
1209:./FWLIB/src/stm32f4xx_rtc.c ****   else
1210:./FWLIB/src/stm32f4xx_rtc.c ****   {
1211:./FWLIB/src/stm32f4xx_rtc.c ****     RTC->ALRMBR = (uint32_t)tmpreg;
1212:./FWLIB/src/stm32f4xx_rtc.c ****   }
1213:./FWLIB/src/stm32f4xx_rtc.c **** 
1214:./FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1215:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
1216:./FWLIB/src/stm32f4xx_rtc.c **** }
1217:./FWLIB/src/stm32f4xx_rtc.c **** 
1218:./FWLIB/src/stm32f4xx_rtc.c **** /**
1219:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_AlarmStruct member with its default value
1220:./FWLIB/src/stm32f4xx_rtc.c ****   *         (Time = 00h:00mn:00sec / Date = 1st day of the month/Mask =
1221:./FWLIB/src/stm32f4xx_rtc.c ****   *         all fields are masked).
1222:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a @ref RTC_AlarmTypeDef structure which
1223:./FWLIB/src/stm32f4xx_rtc.c ****   *         will be initialized.
1224:./FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1225:./FWLIB/src/stm32f4xx_rtc.c ****   */
1226:./FWLIB/src/stm32f4xx_rtc.c **** void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)
1227:./FWLIB/src/stm32f4xx_rtc.c **** {
1228:./FWLIB/src/stm32f4xx_rtc.c ****   /* Alarm Time Settings : Time = 00h:00mn:00sec */
1229:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
ARM GAS  /tmp/ccv4OuYc.s 			page 23


1230:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
1231:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
1232:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
1233:./FWLIB/src/stm32f4xx_rtc.c **** 
1234:./FWLIB/src/stm32f4xx_rtc.c ****   /* Alarm Date Settings : Date = 1st day of the month */
1235:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
1236:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
1237:./FWLIB/src/stm32f4xx_rtc.c **** 
1238:./FWLIB/src/stm32f4xx_rtc.c ****   /* Alarm Masks Settings : Mask =  all fields are not masked */
1239:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
1240:./FWLIB/src/stm32f4xx_rtc.c **** }
1241:./FWLIB/src/stm32f4xx_rtc.c **** 
1242:./FWLIB/src/stm32f4xx_rtc.c **** /**
1243:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC Alarm value and masks.
1244:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
1245:./FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1246:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1247:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1248:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1249:./FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1250:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1251:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1252:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that will 
1253:./FWLIB/src/stm32f4xx_rtc.c ****   *                          contains the output alarm configuration values.     
1254:./FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1255:./FWLIB/src/stm32f4xx_rtc.c ****   */
1256:./FWLIB/src/stm32f4xx_rtc.c **** void RTC_GetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1257:./FWLIB/src/stm32f4xx_rtc.c **** {
1258:./FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1259:./FWLIB/src/stm32f4xx_rtc.c **** 
1260:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1261:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1262:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm)); 
1263:./FWLIB/src/stm32f4xx_rtc.c **** 
1264:./FWLIB/src/stm32f4xx_rtc.c ****   /* Get the RTC_ALRMxR register */
1265:./FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
1266:./FWLIB/src/stm32f4xx_rtc.c ****   {
1267:./FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMAR);
1268:./FWLIB/src/stm32f4xx_rtc.c ****   }
1269:./FWLIB/src/stm32f4xx_rtc.c ****   else
1270:./FWLIB/src/stm32f4xx_rtc.c ****   {
1271:./FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMBR);
1272:./FWLIB/src/stm32f4xx_rtc.c ****   }
1273:./FWLIB/src/stm32f4xx_rtc.c **** 
1274:./FWLIB/src/stm32f4xx_rtc.c ****   /* Fill the structure with the read parameters */
1275:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
1276:./FWLIB/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_HU)) >> 16);
1277:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
1278:./FWLIB/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_MNU)) >> 8);
1279:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
1280:./FWLIB/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_SU));
1281:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
1282:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 
1283:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
1284:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
1285:./FWLIB/src/stm32f4xx_rtc.c **** 
1286:./FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
ARM GAS  /tmp/ccv4OuYc.s 			page 24


1287:./FWLIB/src/stm32f4xx_rtc.c ****   {
1288:./FWLIB/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
1289:./FWLIB/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Hours);
1290:./FWLIB/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
1291:./FWLIB/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Minutes);
1292:./FWLIB/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
1293:./FWLIB/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Seconds);
1294:./FWLIB/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
1295:./FWLIB/src/stm32f4xx_rtc.c ****   }  
1296:./FWLIB/src/stm32f4xx_rtc.c **** }
1297:./FWLIB/src/stm32f4xx_rtc.c **** 
1298:./FWLIB/src/stm32f4xx_rtc.c **** /**
1299:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the specified RTC Alarm.
1300:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1301:./FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
1302:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1303:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1304:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the specified alarm.
1305:./FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1306:./FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1307:./FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Alarm is enabled/disabled
1308:./FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Alarm is not enabled/disabled  
1309:./FWLIB/src/stm32f4xx_rtc.c ****   */
1310:./FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_AlarmCmd(uint32_t RTC_Alarm, FunctionalState NewState)
1311:./FWLIB/src/stm32f4xx_rtc.c **** {
1312:./FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t alarmcounter = 0x00;
1313:./FWLIB/src/stm32f4xx_rtc.c ****   uint32_t alarmstatus = 0x00;
1314:./FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
1315:./FWLIB/src/stm32f4xx_rtc.c ****     
1316:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1317:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CMD_ALARM(RTC_Alarm));
1318:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1319:./FWLIB/src/stm32f4xx_rtc.c **** 
1320:./FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1321:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1322:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1323:./FWLIB/src/stm32f4xx_rtc.c **** 
1324:./FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the Alarm state */
1325:./FWLIB/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
1326:./FWLIB/src/stm32f4xx_rtc.c ****   {
1327:./FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_Alarm;
1328:./FWLIB/src/stm32f4xx_rtc.c **** 
1329:./FWLIB/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
1330:./FWLIB/src/stm32f4xx_rtc.c ****   }
1331:./FWLIB/src/stm32f4xx_rtc.c ****   else
1332:./FWLIB/src/stm32f4xx_rtc.c ****   { 
1333:./FWLIB/src/stm32f4xx_rtc.c ****     /* Disable the Alarm in RTC_CR register */
1334:./FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_Alarm;
1335:./FWLIB/src/stm32f4xx_rtc.c ****    
1336:./FWLIB/src/stm32f4xx_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
1337:./FWLIB/src/stm32f4xx_rtc.c ****     do
1338:./FWLIB/src/stm32f4xx_rtc.c ****     {
1339:./FWLIB/src/stm32f4xx_rtc.c ****       alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
1340:./FWLIB/src/stm32f4xx_rtc.c ****       alarmcounter++;  
1341:./FWLIB/src/stm32f4xx_rtc.c ****     } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
1342:./FWLIB/src/stm32f4xx_rtc.c ****     
1343:./FWLIB/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
ARM GAS  /tmp/ccv4OuYc.s 			page 25


1344:./FWLIB/src/stm32f4xx_rtc.c ****     {
1345:./FWLIB/src/stm32f4xx_rtc.c ****       status = ERROR;
1346:./FWLIB/src/stm32f4xx_rtc.c ****     } 
1347:./FWLIB/src/stm32f4xx_rtc.c ****     else
1348:./FWLIB/src/stm32f4xx_rtc.c ****     {
1349:./FWLIB/src/stm32f4xx_rtc.c ****       status = SUCCESS;
1350:./FWLIB/src/stm32f4xx_rtc.c ****     }        
1351:./FWLIB/src/stm32f4xx_rtc.c ****   } 
1352:./FWLIB/src/stm32f4xx_rtc.c **** 
1353:./FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1354:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1355:./FWLIB/src/stm32f4xx_rtc.c ****   
1356:./FWLIB/src/stm32f4xx_rtc.c ****   return status;
1357:./FWLIB/src/stm32f4xx_rtc.c **** }
1358:./FWLIB/src/stm32f4xx_rtc.c **** 
1359:./FWLIB/src/stm32f4xx_rtc.c **** /**
1360:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configure the RTC AlarmA/B Sub seconds value and mask.*
1361:./FWLIB/src/stm32f4xx_rtc.c ****   * @note   This function is performed only when the Alarm is disabled. 
1362:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1363:./FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1364:./FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_A: to select Alarm A
1365:./FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_B: to select Alarm B
1366:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmSubSecondValue: specifies the Sub seconds value.
1367:./FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be a value from 0 to 0x00007FFF.
1368:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmSubSecondMask:  specifies the Sub seconds Mask.
1369:./FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be any combination of the following values:
1370:./FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_All    : All Alarm SS fields are masked.
1371:./FWLIB/src/stm32f4xx_rtc.c ****   *                                          There is no comparison on sub seconds for Alarm.
1372:./FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_1 : SS[14:1] are don't care in Alarm comparison.
1373:./FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[0] is compared
1374:./FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_2 : SS[14:2] are don't care in Alarm comparison.
1375:./FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[1:0] are compared
1376:./FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_3 : SS[14:3] are don't care in Alarm comparison.
1377:./FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[2:0] are compared
1378:./FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_4 : SS[14:4] are don't care in Alarm comparison.
1379:./FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[3:0] are compared
1380:./FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_5 : SS[14:5] are don't care in Alarm comparison.
1381:./FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[4:0] are compared
1382:./FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_6 : SS[14:6] are don't care in Alarm comparison.
1383:./FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[5:0] are compared
1384:./FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_7 : SS[14:7] are don't care in Alarm comparison.
1385:./FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[6:0] are compared
1386:./FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_8 : SS[14:8] are don't care in Alarm comparison.
1387:./FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[7:0] are compared
1388:./FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_9 : SS[14:9] are don't care in Alarm comparison.
1389:./FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[8:0] are compared
1390:./FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_10: SS[14:10] are don't care in Alarm comparison.
1391:./FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[9:0] are compared
1392:./FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_11: SS[14:11] are don't care in Alarm comparison.
1393:./FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[10:0] are compared
1394:./FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_12: SS[14:12] are don't care in Alarm comparison.
1395:./FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[11:0] are compared
1396:./FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_13: SS[14:13] are don't care in Alarm comparison.
1397:./FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[12:0] are compared
1398:./FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14   : SS[14] is don't care in Alarm comparison.
1399:./FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[13:0] are compared
1400:./FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_None   : SS[14:0] are compared and must match
ARM GAS  /tmp/ccv4OuYc.s 			page 26


1401:./FWLIB/src/stm32f4xx_rtc.c ****   *                                          to activate alarm
1402:./FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1403:./FWLIB/src/stm32f4xx_rtc.c ****   */
1404:./FWLIB/src/stm32f4xx_rtc.c **** void RTC_AlarmSubSecondConfig(uint32_t RTC_Alarm, uint32_t RTC_AlarmSubSecondValue, uint32_t RTC_Al
1405:./FWLIB/src/stm32f4xx_rtc.c **** {
1406:./FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1407:./FWLIB/src/stm32f4xx_rtc.c **** 
1408:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1409:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1410:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
1411:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
1412:./FWLIB/src/stm32f4xx_rtc.c ****   
1413:./FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1414:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1415:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1416:./FWLIB/src/stm32f4xx_rtc.c ****   
1417:./FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the Alarm A or Alarm B Sub Second registers */
1418:./FWLIB/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
1419:./FWLIB/src/stm32f4xx_rtc.c ****   
1420:./FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
1421:./FWLIB/src/stm32f4xx_rtc.c ****   {
1422:./FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the Alarm A Sub Second register */
1423:./FWLIB/src/stm32f4xx_rtc.c ****     RTC->ALRMASSR = tmpreg;
1424:./FWLIB/src/stm32f4xx_rtc.c ****   }
1425:./FWLIB/src/stm32f4xx_rtc.c ****   else
1426:./FWLIB/src/stm32f4xx_rtc.c ****   {
1427:./FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the Alarm B Sub Second register */
1428:./FWLIB/src/stm32f4xx_rtc.c ****     RTC->ALRMBSSR = tmpreg;
1429:./FWLIB/src/stm32f4xx_rtc.c ****   }
1430:./FWLIB/src/stm32f4xx_rtc.c **** 
1431:./FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1432:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
1433:./FWLIB/src/stm32f4xx_rtc.c **** 
1434:./FWLIB/src/stm32f4xx_rtc.c **** }
1435:./FWLIB/src/stm32f4xx_rtc.c **** 
1436:./FWLIB/src/stm32f4xx_rtc.c **** /**
1437:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Gets the RTC Alarm Sub seconds value.
1438:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1439:./FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1440:./FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_A: to select Alarm A
1441:./FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_B: to select Alarm B
1442:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  None
1443:./FWLIB/src/stm32f4xx_rtc.c ****   * @retval RTC Alarm Sub seconds value.
1444:./FWLIB/src/stm32f4xx_rtc.c ****   */
1445:./FWLIB/src/stm32f4xx_rtc.c **** uint32_t RTC_GetAlarmSubSecond(uint32_t RTC_Alarm)
1446:./FWLIB/src/stm32f4xx_rtc.c **** {
1447:./FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1448:./FWLIB/src/stm32f4xx_rtc.c ****   
1449:./FWLIB/src/stm32f4xx_rtc.c ****   /* Get the RTC_ALRMxR register */
1450:./FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
1451:./FWLIB/src/stm32f4xx_rtc.c ****   {
1452:./FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
1453:./FWLIB/src/stm32f4xx_rtc.c ****   }
1454:./FWLIB/src/stm32f4xx_rtc.c ****   else
1455:./FWLIB/src/stm32f4xx_rtc.c ****   {
1456:./FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMBSSR) & RTC_ALRMBSSR_SS);
1457:./FWLIB/src/stm32f4xx_rtc.c ****   } 
ARM GAS  /tmp/ccv4OuYc.s 			page 27


1458:./FWLIB/src/stm32f4xx_rtc.c ****   
1459:./FWLIB/src/stm32f4xx_rtc.c ****   return (tmpreg);
1460:./FWLIB/src/stm32f4xx_rtc.c **** }
1461:./FWLIB/src/stm32f4xx_rtc.c **** 
1462:./FWLIB/src/stm32f4xx_rtc.c **** /**
1463:./FWLIB/src/stm32f4xx_rtc.c ****   * @}
1464:./FWLIB/src/stm32f4xx_rtc.c ****   */
1465:./FWLIB/src/stm32f4xx_rtc.c **** 
1466:./FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group4 WakeUp Timer configuration functions
1467:./FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   WakeUp Timer configuration functions 
1468:./FWLIB/src/stm32f4xx_rtc.c ****  *
1469:./FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
1470:./FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
1471:./FWLIB/src/stm32f4xx_rtc.c ****                  ##### WakeUp Timer configuration functions #####
1472:./FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================  
1473:./FWLIB/src/stm32f4xx_rtc.c **** 
1474:./FWLIB/src/stm32f4xx_rtc.c ****  [..] This section provide functions allowing to program and read the RTC WakeUp.
1475:./FWLIB/src/stm32f4xx_rtc.c **** 
1476:./FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
1477:./FWLIB/src/stm32f4xx_rtc.c ****   * @{
1478:./FWLIB/src/stm32f4xx_rtc.c ****   */
1479:./FWLIB/src/stm32f4xx_rtc.c **** 
1480:./FWLIB/src/stm32f4xx_rtc.c **** /**
1481:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Wakeup clock source.
1482:./FWLIB/src/stm32f4xx_rtc.c ****   * @note   The WakeUp Clock source can only be changed when the RTC WakeUp
1483:./FWLIB/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).      
1484:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_WakeUpClock: Wakeup Clock source.
1485:./FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1486:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div16: RTC Wakeup Counter Clock = RTCCLK/16
1487:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div8: RTC Wakeup Counter Clock = RTCCLK/8
1488:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div4: RTC Wakeup Counter Clock = RTCCLK/4
1489:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div2: RTC Wakeup Counter Clock = RTCCLK/2
1490:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_16bits: RTC Wakeup Counter Clock = CK_SPRE
1491:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_17bits: RTC Wakeup Counter Clock = CK_SPRE
1492:./FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1493:./FWLIB/src/stm32f4xx_rtc.c ****   */
1494:./FWLIB/src/stm32f4xx_rtc.c **** void RTC_WakeUpClockConfig(uint32_t RTC_WakeUpClock)
1495:./FWLIB/src/stm32f4xx_rtc.c **** {
1496:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1497:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_CLOCK(RTC_WakeUpClock));
1498:./FWLIB/src/stm32f4xx_rtc.c **** 
1499:./FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1500:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1501:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1502:./FWLIB/src/stm32f4xx_rtc.c **** 
1503:./FWLIB/src/stm32f4xx_rtc.c ****   /* Clear the Wakeup Timer clock source bits in CR register */
1504:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
1505:./FWLIB/src/stm32f4xx_rtc.c **** 
1506:./FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the clock source */
1507:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_WakeUpClock;
1508:./FWLIB/src/stm32f4xx_rtc.c ****   
1509:./FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1510:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1511:./FWLIB/src/stm32f4xx_rtc.c **** }
1512:./FWLIB/src/stm32f4xx_rtc.c **** 
1513:./FWLIB/src/stm32f4xx_rtc.c **** /**
1514:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Wakeup counter.
ARM GAS  /tmp/ccv4OuYc.s 			page 28


1515:./FWLIB/src/stm32f4xx_rtc.c ****   * @note   The RTC WakeUp counter can only be written when the RTC WakeUp
1516:./FWLIB/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).        
1517:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_WakeUpCounter: specifies the WakeUp counter.
1518:./FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be a value from 0x0000 to 0xFFFF. 
1519:./FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1520:./FWLIB/src/stm32f4xx_rtc.c ****   */
1521:./FWLIB/src/stm32f4xx_rtc.c **** void RTC_SetWakeUpCounter(uint32_t RTC_WakeUpCounter)
1522:./FWLIB/src/stm32f4xx_rtc.c **** {
1523:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1524:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_COUNTER(RTC_WakeUpCounter));
1525:./FWLIB/src/stm32f4xx_rtc.c ****   
1526:./FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1527:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1528:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1529:./FWLIB/src/stm32f4xx_rtc.c ****   
1530:./FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the Wakeup Timer counter */
1531:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
1532:./FWLIB/src/stm32f4xx_rtc.c ****   
1533:./FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1534:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1535:./FWLIB/src/stm32f4xx_rtc.c **** }
1536:./FWLIB/src/stm32f4xx_rtc.c **** 
1537:./FWLIB/src/stm32f4xx_rtc.c **** /**
1538:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Returns the RTC WakeUp timer counter value.
1539:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  None
1540:./FWLIB/src/stm32f4xx_rtc.c ****   * @retval The RTC WakeUp Counter value.
1541:./FWLIB/src/stm32f4xx_rtc.c ****   */
1542:./FWLIB/src/stm32f4xx_rtc.c **** uint32_t RTC_GetWakeUpCounter(void)
1543:./FWLIB/src/stm32f4xx_rtc.c **** {
1544:./FWLIB/src/stm32f4xx_rtc.c ****   /* Get the counter value */
1545:./FWLIB/src/stm32f4xx_rtc.c ****   return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
1546:./FWLIB/src/stm32f4xx_rtc.c **** }
1547:./FWLIB/src/stm32f4xx_rtc.c **** 
1548:./FWLIB/src/stm32f4xx_rtc.c **** /**
1549:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the RTC WakeUp timer.
1550:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the WakeUp timer.
1551:./FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1552:./FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1553:./FWLIB/src/stm32f4xx_rtc.c ****   */
1554:./FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_WakeUpCmd(FunctionalState NewState)
1555:./FWLIB/src/stm32f4xx_rtc.c **** {
1556:./FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
1557:./FWLIB/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
1558:./FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
1559:./FWLIB/src/stm32f4xx_rtc.c ****   
1560:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1561:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1562:./FWLIB/src/stm32f4xx_rtc.c **** 
1563:./FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1564:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1565:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1566:./FWLIB/src/stm32f4xx_rtc.c **** 
1567:./FWLIB/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
1568:./FWLIB/src/stm32f4xx_rtc.c ****   {
1569:./FWLIB/src/stm32f4xx_rtc.c ****     /* Enable the Wakeup Timer */
1570:./FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_WUTE;
1571:./FWLIB/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
ARM GAS  /tmp/ccv4OuYc.s 			page 29


1572:./FWLIB/src/stm32f4xx_rtc.c ****   }
1573:./FWLIB/src/stm32f4xx_rtc.c ****   else
1574:./FWLIB/src/stm32f4xx_rtc.c ****   {
1575:./FWLIB/src/stm32f4xx_rtc.c ****     /* Disable the Wakeup Timer */
1576:./FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_WUTE;
1577:./FWLIB/src/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
1578:./FWLIB/src/stm32f4xx_rtc.c ****     do
1579:./FWLIB/src/stm32f4xx_rtc.c ****     {
1580:./FWLIB/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
1581:./FWLIB/src/stm32f4xx_rtc.c ****       wutcounter++;  
1582:./FWLIB/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
1583:./FWLIB/src/stm32f4xx_rtc.c ****     
1584:./FWLIB/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
1585:./FWLIB/src/stm32f4xx_rtc.c ****     {
1586:./FWLIB/src/stm32f4xx_rtc.c ****       status = ERROR;
1587:./FWLIB/src/stm32f4xx_rtc.c ****     }
1588:./FWLIB/src/stm32f4xx_rtc.c ****     else
1589:./FWLIB/src/stm32f4xx_rtc.c ****     {
1590:./FWLIB/src/stm32f4xx_rtc.c ****       status = SUCCESS;
1591:./FWLIB/src/stm32f4xx_rtc.c ****     }    
1592:./FWLIB/src/stm32f4xx_rtc.c ****   }
1593:./FWLIB/src/stm32f4xx_rtc.c **** 
1594:./FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1595:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1596:./FWLIB/src/stm32f4xx_rtc.c ****   
1597:./FWLIB/src/stm32f4xx_rtc.c ****   return status;
1598:./FWLIB/src/stm32f4xx_rtc.c **** }
1599:./FWLIB/src/stm32f4xx_rtc.c **** 
1600:./FWLIB/src/stm32f4xx_rtc.c **** /**
1601:./FWLIB/src/stm32f4xx_rtc.c ****   * @}
1602:./FWLIB/src/stm32f4xx_rtc.c ****   */
1603:./FWLIB/src/stm32f4xx_rtc.c **** 
1604:./FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group5 Daylight Saving configuration functions
1605:./FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   Daylight Saving configuration functions 
1606:./FWLIB/src/stm32f4xx_rtc.c ****  *
1607:./FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
1608:./FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
1609:./FWLIB/src/stm32f4xx_rtc.c ****               ##### Daylight Saving configuration functions #####
1610:./FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================  
1611:./FWLIB/src/stm32f4xx_rtc.c **** 
1612:./FWLIB/src/stm32f4xx_rtc.c ****  [..] This section provide functions allowing to configure the RTC DayLight Saving.
1613:./FWLIB/src/stm32f4xx_rtc.c **** 
1614:./FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
1615:./FWLIB/src/stm32f4xx_rtc.c ****   * @{
1616:./FWLIB/src/stm32f4xx_rtc.c ****   */
1617:./FWLIB/src/stm32f4xx_rtc.c **** 
1618:./FWLIB/src/stm32f4xx_rtc.c **** /**
1619:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Adds or substract one hour from the current time.
1620:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_DayLightSaveOperation: the value of hour adjustment. 
1621:./FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1622:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_DayLightSaving_SUB1H: Substract one hour (winter time)
1623:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_DayLightSaving_ADD1H: Add one hour (summer time)
1624:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_StoreOperation: Specifies the value to be written in the BCK bit 
1625:./FWLIB/src/stm32f4xx_rtc.c ****   *                            in CR register to store the operation.
1626:./FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1627:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_StoreOperation_Reset: BCK Bit Reset
1628:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_StoreOperation_Set: BCK Bit Set
ARM GAS  /tmp/ccv4OuYc.s 			page 30


1629:./FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1630:./FWLIB/src/stm32f4xx_rtc.c ****   */
1631:./FWLIB/src/stm32f4xx_rtc.c **** void RTC_DayLightSavingConfig(uint32_t RTC_DayLightSaving, uint32_t RTC_StoreOperation)
1632:./FWLIB/src/stm32f4xx_rtc.c **** {
1633:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1634:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_DAYLIGHT_SAVING(RTC_DayLightSaving));
1635:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_STORE_OPERATION(RTC_StoreOperation));
1636:./FWLIB/src/stm32f4xx_rtc.c **** 
1637:./FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1638:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1639:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1640:./FWLIB/src/stm32f4xx_rtc.c **** 
1641:./FWLIB/src/stm32f4xx_rtc.c ****   /* Clear the bits to be configured */
1642:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_BCK);
1643:./FWLIB/src/stm32f4xx_rtc.c **** 
1644:./FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the RTC_CR register */
1645:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
1646:./FWLIB/src/stm32f4xx_rtc.c **** 
1647:./FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1648:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1649:./FWLIB/src/stm32f4xx_rtc.c **** }
1650:./FWLIB/src/stm32f4xx_rtc.c **** 
1651:./FWLIB/src/stm32f4xx_rtc.c **** /**
1652:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Returns the RTC Day Light Saving stored operation.
1653:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  None
1654:./FWLIB/src/stm32f4xx_rtc.c ****   * @retval RTC Day Light Saving stored operation.
1655:./FWLIB/src/stm32f4xx_rtc.c ****   *          - RTC_StoreOperation_Reset
1656:./FWLIB/src/stm32f4xx_rtc.c ****   *          - RTC_StoreOperation_Set       
1657:./FWLIB/src/stm32f4xx_rtc.c ****   */
1658:./FWLIB/src/stm32f4xx_rtc.c **** uint32_t RTC_GetStoreOperation(void)
1659:./FWLIB/src/stm32f4xx_rtc.c **** {
1660:./FWLIB/src/stm32f4xx_rtc.c ****   return (RTC->CR & RTC_CR_BCK);
1661:./FWLIB/src/stm32f4xx_rtc.c **** }
1662:./FWLIB/src/stm32f4xx_rtc.c **** 
1663:./FWLIB/src/stm32f4xx_rtc.c **** /**
1664:./FWLIB/src/stm32f4xx_rtc.c ****   * @}
1665:./FWLIB/src/stm32f4xx_rtc.c ****   */
1666:./FWLIB/src/stm32f4xx_rtc.c **** 
1667:./FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group6 Output pin Configuration function
1668:./FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   Output pin Configuration function 
1669:./FWLIB/src/stm32f4xx_rtc.c ****  *
1670:./FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
1671:./FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
1672:./FWLIB/src/stm32f4xx_rtc.c ****                  ##### Output pin Configuration function #####
1673:./FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================  
1674:./FWLIB/src/stm32f4xx_rtc.c **** 
1675:./FWLIB/src/stm32f4xx_rtc.c ****  [..] This section provide functions allowing to configure the RTC Output source.
1676:./FWLIB/src/stm32f4xx_rtc.c **** 
1677:./FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
1678:./FWLIB/src/stm32f4xx_rtc.c ****   * @{
1679:./FWLIB/src/stm32f4xx_rtc.c ****   */
1680:./FWLIB/src/stm32f4xx_rtc.c **** 
1681:./FWLIB/src/stm32f4xx_rtc.c **** /**
1682:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC output source (AFO_ALARM).
1683:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Output: Specifies which signal will be routed to the RTC output. 
1684:./FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1685:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_Disable: No output selected
ARM GAS  /tmp/ccv4OuYc.s 			page 31


1686:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_AlarmA: signal of AlarmA mapped to output
1687:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_AlarmB: signal of AlarmB mapped to output
1688:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_WakeUp: signal of WakeUp mapped to output
1689:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_OutputPolarity: Specifies the polarity of the output signal. 
1690:./FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following:
1691:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputPolarity_High: The output pin is high when the 
1692:./FWLIB/src/stm32f4xx_rtc.c ****   *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
1693:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputPolarity_Low: The output pin is low when the 
1694:./FWLIB/src/stm32f4xx_rtc.c ****   *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
1695:./FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1696:./FWLIB/src/stm32f4xx_rtc.c ****   */
1697:./FWLIB/src/stm32f4xx_rtc.c **** void RTC_OutputConfig(uint32_t RTC_Output, uint32_t RTC_OutputPolarity)
1698:./FWLIB/src/stm32f4xx_rtc.c **** {
1699:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1700:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT(RTC_Output));
1701:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_POL(RTC_OutputPolarity));
1702:./FWLIB/src/stm32f4xx_rtc.c **** 
1703:./FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1704:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1705:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1706:./FWLIB/src/stm32f4xx_rtc.c **** 
1707:./FWLIB/src/stm32f4xx_rtc.c ****   /* Clear the bits to be configured */
1708:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
1709:./FWLIB/src/stm32f4xx_rtc.c **** 
1710:./FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the output selection and polarity */
1711:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
1712:./FWLIB/src/stm32f4xx_rtc.c **** 
1713:./FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1714:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1715:./FWLIB/src/stm32f4xx_rtc.c **** }
1716:./FWLIB/src/stm32f4xx_rtc.c **** 
1717:./FWLIB/src/stm32f4xx_rtc.c **** /**
1718:./FWLIB/src/stm32f4xx_rtc.c ****   * @}
1719:./FWLIB/src/stm32f4xx_rtc.c ****   */
1720:./FWLIB/src/stm32f4xx_rtc.c **** 
1721:./FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group7 Digital Calibration configuration functions
1722:./FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   Coarse Calibration configuration functions 
1723:./FWLIB/src/stm32f4xx_rtc.c ****  *
1724:./FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
1725:./FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
1726:./FWLIB/src/stm32f4xx_rtc.c ****               ##### Digital Calibration configuration functions #####
1727:./FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================  
1728:./FWLIB/src/stm32f4xx_rtc.c **** 
1729:./FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
1730:./FWLIB/src/stm32f4xx_rtc.c ****   * @{
1731:./FWLIB/src/stm32f4xx_rtc.c ****   */
1732:./FWLIB/src/stm32f4xx_rtc.c **** 
1733:./FWLIB/src/stm32f4xx_rtc.c **** /**
1734:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configures the Coarse calibration parameters.
1735:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_CalibSign: specifies the sign of the coarse calibration value.
1736:./FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
1737:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_CalibSign_Positive: The value sign is positive 
1738:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_CalibSign_Negative: The value sign is negative
1739:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  Value: value of coarse calibration expressed in ppm (coded on 5 bits).
1740:./FWLIB/src/stm32f4xx_rtc.c ****   *    
1741:./FWLIB/src/stm32f4xx_rtc.c ****   * @note   This Calibration value should be between 0 and 63 when using negative
1742:./FWLIB/src/stm32f4xx_rtc.c ****   *         sign with a 2-ppm step.
ARM GAS  /tmp/ccv4OuYc.s 			page 32


1743:./FWLIB/src/stm32f4xx_rtc.c ****   *           
1744:./FWLIB/src/stm32f4xx_rtc.c ****   * @note   This Calibration value should be between 0 and 126 when using positive
1745:./FWLIB/src/stm32f4xx_rtc.c ****   *         sign with a 4-ppm step.
1746:./FWLIB/src/stm32f4xx_rtc.c ****   *           
1747:./FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1748:./FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Coarse calibration are initialized
1749:./FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Coarse calibration are not initialized     
1750:./FWLIB/src/stm32f4xx_rtc.c ****   */
1751:./FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_CoarseCalibConfig(uint32_t RTC_CalibSign, uint32_t Value)
1752:./FWLIB/src/stm32f4xx_rtc.c **** {
1753:./FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
1754:./FWLIB/src/stm32f4xx_rtc.c ****    
1755:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1756:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_SIGN(RTC_CalibSign));
1757:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_VALUE(Value)); 
1758:./FWLIB/src/stm32f4xx_rtc.c **** 
1759:./FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1760:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1761:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1762:./FWLIB/src/stm32f4xx_rtc.c **** 
1763:./FWLIB/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
1764:./FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
1765:./FWLIB/src/stm32f4xx_rtc.c ****   {
1766:./FWLIB/src/stm32f4xx_rtc.c ****     status = ERROR;
1767:./FWLIB/src/stm32f4xx_rtc.c ****   } 
1768:./FWLIB/src/stm32f4xx_rtc.c ****   else
1769:./FWLIB/src/stm32f4xx_rtc.c ****   {
1770:./FWLIB/src/stm32f4xx_rtc.c ****     /* Set the coarse calibration value */
1771:./FWLIB/src/stm32f4xx_rtc.c ****     RTC->CALIBR = (uint32_t)(RTC_CalibSign | Value);
1772:./FWLIB/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1773:./FWLIB/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
1774:./FWLIB/src/stm32f4xx_rtc.c ****     
1775:./FWLIB/src/stm32f4xx_rtc.c ****     status = SUCCESS;
1776:./FWLIB/src/stm32f4xx_rtc.c ****   } 
1777:./FWLIB/src/stm32f4xx_rtc.c **** 
1778:./FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1779:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1780:./FWLIB/src/stm32f4xx_rtc.c ****   
1781:./FWLIB/src/stm32f4xx_rtc.c ****   return status;
1782:./FWLIB/src/stm32f4xx_rtc.c **** }
1783:./FWLIB/src/stm32f4xx_rtc.c **** 
1784:./FWLIB/src/stm32f4xx_rtc.c **** /**
1785:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the Coarse calibration process.
1786:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the Coarse calibration.
1787:./FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1788:./FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1789:./FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Coarse calibration are enabled/disabled
1790:./FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Coarse calibration are not enabled/disabled    
1791:./FWLIB/src/stm32f4xx_rtc.c ****   */
1792:./FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_CoarseCalibCmd(FunctionalState NewState)
1793:./FWLIB/src/stm32f4xx_rtc.c **** {
1794:./FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
1795:./FWLIB/src/stm32f4xx_rtc.c ****   
1796:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1797:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1798:./FWLIB/src/stm32f4xx_rtc.c **** 
1799:./FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
ARM GAS  /tmp/ccv4OuYc.s 			page 33


1800:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1801:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1802:./FWLIB/src/stm32f4xx_rtc.c ****   
1803:./FWLIB/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
1804:./FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
1805:./FWLIB/src/stm32f4xx_rtc.c ****   {
1806:./FWLIB/src/stm32f4xx_rtc.c ****     status =  ERROR;
1807:./FWLIB/src/stm32f4xx_rtc.c ****   }
1808:./FWLIB/src/stm32f4xx_rtc.c ****   else
1809:./FWLIB/src/stm32f4xx_rtc.c ****   {
1810:./FWLIB/src/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
1811:./FWLIB/src/stm32f4xx_rtc.c ****     {
1812:./FWLIB/src/stm32f4xx_rtc.c ****       /* Enable the Coarse Calibration */
1813:./FWLIB/src/stm32f4xx_rtc.c ****       RTC->CR |= (uint32_t)RTC_CR_DCE;
1814:./FWLIB/src/stm32f4xx_rtc.c ****     }
1815:./FWLIB/src/stm32f4xx_rtc.c ****     else
1816:./FWLIB/src/stm32f4xx_rtc.c ****     { 
1817:./FWLIB/src/stm32f4xx_rtc.c ****       /* Disable the Coarse Calibration */
1818:./FWLIB/src/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)~RTC_CR_DCE;
1819:./FWLIB/src/stm32f4xx_rtc.c ****     }
1820:./FWLIB/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1821:./FWLIB/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
1822:./FWLIB/src/stm32f4xx_rtc.c ****     
1823:./FWLIB/src/stm32f4xx_rtc.c ****     status = SUCCESS;
1824:./FWLIB/src/stm32f4xx_rtc.c ****   } 
1825:./FWLIB/src/stm32f4xx_rtc.c ****   
1826:./FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1827:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1828:./FWLIB/src/stm32f4xx_rtc.c ****   
1829:./FWLIB/src/stm32f4xx_rtc.c ****   return status;
1830:./FWLIB/src/stm32f4xx_rtc.c **** }
1831:./FWLIB/src/stm32f4xx_rtc.c **** 
1832:./FWLIB/src/stm32f4xx_rtc.c **** /**
1833:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC clock to be output through the relative pin.
1834:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the digital calibration Output.
1835:./FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1836:./FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1837:./FWLIB/src/stm32f4xx_rtc.c ****   */
1838:./FWLIB/src/stm32f4xx_rtc.c **** void RTC_CalibOutputCmd(FunctionalState NewState)
1839:./FWLIB/src/stm32f4xx_rtc.c **** {
1840:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1841:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1842:./FWLIB/src/stm32f4xx_rtc.c ****   
1843:./FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1844:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1845:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1846:./FWLIB/src/stm32f4xx_rtc.c ****   
1847:./FWLIB/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
1848:./FWLIB/src/stm32f4xx_rtc.c ****   {
1849:./FWLIB/src/stm32f4xx_rtc.c ****     /* Enable the RTC clock output */
1850:./FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_COE;
1851:./FWLIB/src/stm32f4xx_rtc.c ****   }
1852:./FWLIB/src/stm32f4xx_rtc.c ****   else
1853:./FWLIB/src/stm32f4xx_rtc.c ****   { 
1854:./FWLIB/src/stm32f4xx_rtc.c ****     /* Disable the RTC clock output */
1855:./FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_COE;
1856:./FWLIB/src/stm32f4xx_rtc.c ****   }
ARM GAS  /tmp/ccv4OuYc.s 			page 34


1857:./FWLIB/src/stm32f4xx_rtc.c ****   
1858:./FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1859:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1860:./FWLIB/src/stm32f4xx_rtc.c **** }
1861:./FWLIB/src/stm32f4xx_rtc.c **** 
1862:./FWLIB/src/stm32f4xx_rtc.c **** /**
1863:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configure the Calibration Pinout (RTC_CALIB) Selection (1Hz or 512Hz).
1864:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_CalibOutput : Select the Calibration output Selection .
1865:./FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1866:./FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_CalibOutput_512Hz: A signal has a regular waveform at 512Hz. 
1867:./FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_CalibOutput_1Hz  : A signal has a regular waveform at 1Hz.
1868:./FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1869:./FWLIB/src/stm32f4xx_rtc.c **** */
1870:./FWLIB/src/stm32f4xx_rtc.c **** void RTC_CalibOutputConfig(uint32_t RTC_CalibOutput)
1871:./FWLIB/src/stm32f4xx_rtc.c **** {
1872:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1873:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_OUTPUT(RTC_CalibOutput));
1874:./FWLIB/src/stm32f4xx_rtc.c **** 
1875:./FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1876:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1877:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1878:./FWLIB/src/stm32f4xx_rtc.c ****   
1879:./FWLIB/src/stm32f4xx_rtc.c ****   /*clear flags before configuration */
1880:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_COSEL);
1881:./FWLIB/src/stm32f4xx_rtc.c **** 
1882:./FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the RTC_CR register */
1883:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_CalibOutput;
1884:./FWLIB/src/stm32f4xx_rtc.c **** 
1885:./FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1886:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
1887:./FWLIB/src/stm32f4xx_rtc.c **** }
1888:./FWLIB/src/stm32f4xx_rtc.c **** 
1889:./FWLIB/src/stm32f4xx_rtc.c **** /**
1890:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configures the Smooth Calibration Settings.
1891:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_SmoothCalibPeriod : Select the Smooth Calibration Period.
1892:./FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be can be one of the following values:
1893:./FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_32sec : The smooth calibration period is 32s.
1894:./FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_16sec : The smooth calibration period is 16s.
1895:./FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_8sec  : The smooth calibartion period is 8s.
1896:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_SmoothCalibPlusPulses : Select to Set or reset the CALP bit.
1897:./FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1898:./FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPlusPulses_Set  : Add one RTCCLK puls every 2**11 pulses.
1899:./FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPlusPulses_Reset: No RTCCLK pulses are added.
1900:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_SmouthCalibMinusPulsesValue: Select the value of CALM[8:0] bits.
1901:./FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be one any value from 0 to 0x000001FF.
1902:./FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1903:./FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Calib registers are configured
1904:./FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Calib registers are not configured
1905:./FWLIB/src/stm32f4xx_rtc.c **** */
1906:./FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SmoothCalibConfig(uint32_t RTC_SmoothCalibPeriod,
1907:./FWLIB/src/stm32f4xx_rtc.c ****                                   uint32_t RTC_SmoothCalibPlusPulses,
1908:./FWLIB/src/stm32f4xx_rtc.c ****                                   uint32_t RTC_SmouthCalibMinusPulsesValue)
1909:./FWLIB/src/stm32f4xx_rtc.c **** {
1910:./FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
1911:./FWLIB/src/stm32f4xx_rtc.c ****   uint32_t recalpfcount = 0;
1912:./FWLIB/src/stm32f4xx_rtc.c **** 
1913:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
ARM GAS  /tmp/ccv4OuYc.s 			page 35


1914:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(RTC_SmoothCalibPeriod));
1915:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PLUS(RTC_SmoothCalibPlusPulses));
1916:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_MINUS(RTC_SmouthCalibMinusPulsesValue));
1917:./FWLIB/src/stm32f4xx_rtc.c **** 
1918:./FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1919:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1920:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1921:./FWLIB/src/stm32f4xx_rtc.c ****   
1922:./FWLIB/src/stm32f4xx_rtc.c ****   /* check if a calibration is pending*/
1923:./FWLIB/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
1924:./FWLIB/src/stm32f4xx_rtc.c ****   {
1925:./FWLIB/src/stm32f4xx_rtc.c ****     /* wait until the Calibration is completed*/
1926:./FWLIB/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
1927:./FWLIB/src/stm32f4xx_rtc.c ****     {
1928:./FWLIB/src/stm32f4xx_rtc.c ****       recalpfcount++;
1929:./FWLIB/src/stm32f4xx_rtc.c ****     }
1930:./FWLIB/src/stm32f4xx_rtc.c ****   }
1931:./FWLIB/src/stm32f4xx_rtc.c **** 
1932:./FWLIB/src/stm32f4xx_rtc.c ****   /* check if the calibration pending is completed or if there is no calibration operation at all*/
1933:./FWLIB/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
1934:./FWLIB/src/stm32f4xx_rtc.c ****   {
1935:./FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the Smooth calibration settings */
1936:./FWLIB/src/stm32f4xx_rtc.c ****     RTC->CALR = (uint32_t)((uint32_t)RTC_SmoothCalibPeriod | (uint32_t)RTC_SmoothCalibPlusPulses | 
1937:./FWLIB/src/stm32f4xx_rtc.c **** 
1938:./FWLIB/src/stm32f4xx_rtc.c ****     status = SUCCESS;
1939:./FWLIB/src/stm32f4xx_rtc.c ****   }
1940:./FWLIB/src/stm32f4xx_rtc.c ****   else
1941:./FWLIB/src/stm32f4xx_rtc.c ****   {
1942:./FWLIB/src/stm32f4xx_rtc.c ****     status = ERROR;
1943:./FWLIB/src/stm32f4xx_rtc.c ****   }
1944:./FWLIB/src/stm32f4xx_rtc.c **** 
1945:./FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1946:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
1947:./FWLIB/src/stm32f4xx_rtc.c ****   
1948:./FWLIB/src/stm32f4xx_rtc.c ****   return (ErrorStatus)(status);
1949:./FWLIB/src/stm32f4xx_rtc.c **** }
1950:./FWLIB/src/stm32f4xx_rtc.c **** 
1951:./FWLIB/src/stm32f4xx_rtc.c **** /**
1952:./FWLIB/src/stm32f4xx_rtc.c ****   * @}
1953:./FWLIB/src/stm32f4xx_rtc.c ****   */
1954:./FWLIB/src/stm32f4xx_rtc.c **** 
1955:./FWLIB/src/stm32f4xx_rtc.c **** 
1956:./FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group8 TimeStamp configuration functions
1957:./FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   TimeStamp configuration functions 
1958:./FWLIB/src/stm32f4xx_rtc.c ****  *
1959:./FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
1960:./FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
1961:./FWLIB/src/stm32f4xx_rtc.c ****                  ##### TimeStamp configuration functions #####
1962:./FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================  
1963:./FWLIB/src/stm32f4xx_rtc.c **** 
1964:./FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
1965:./FWLIB/src/stm32f4xx_rtc.c ****   * @{
1966:./FWLIB/src/stm32f4xx_rtc.c ****   */
1967:./FWLIB/src/stm32f4xx_rtc.c **** 
1968:./FWLIB/src/stm32f4xx_rtc.c **** /**
1969:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the RTC TimeStamp functionality with the 
1970:./FWLIB/src/stm32f4xx_rtc.c ****   *         specified time stamp pin stimulating edge.
ARM GAS  /tmp/ccv4OuYc.s 			page 36


1971:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStampEdge: Specifies the pin edge on which the TimeStamp is 
1972:./FWLIB/src/stm32f4xx_rtc.c ****   *         activated.
1973:./FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following:
1974:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Rising: the Time stamp event occurs on the rising 
1975:./FWLIB/src/stm32f4xx_rtc.c ****   *                                    edge of the related pin.
1976:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Falling: the Time stamp event occurs on the 
1977:./FWLIB/src/stm32f4xx_rtc.c ****   *                                     falling edge of the related pin.
1978:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the TimeStamp.
1979:./FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1980:./FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1981:./FWLIB/src/stm32f4xx_rtc.c ****   */
1982:./FWLIB/src/stm32f4xx_rtc.c **** void RTC_TimeStampCmd(uint32_t RTC_TimeStampEdge, FunctionalState NewState)
1983:./FWLIB/src/stm32f4xx_rtc.c **** {
1984:./FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1985:./FWLIB/src/stm32f4xx_rtc.c **** 
1986:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1987:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_EDGE(RTC_TimeStampEdge));
1988:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1989:./FWLIB/src/stm32f4xx_rtc.c **** 
1990:./FWLIB/src/stm32f4xx_rtc.c ****   /* Get the RTC_CR register and clear the bits to be configured */
1991:./FWLIB/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
1992:./FWLIB/src/stm32f4xx_rtc.c **** 
1993:./FWLIB/src/stm32f4xx_rtc.c ****   /* Get the new configuration */
1994:./FWLIB/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
1995:./FWLIB/src/stm32f4xx_rtc.c ****   {
1996:./FWLIB/src/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
1997:./FWLIB/src/stm32f4xx_rtc.c ****   }
1998:./FWLIB/src/stm32f4xx_rtc.c ****   else
1999:./FWLIB/src/stm32f4xx_rtc.c ****   {
2000:./FWLIB/src/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge);
2001:./FWLIB/src/stm32f4xx_rtc.c ****   }
2002:./FWLIB/src/stm32f4xx_rtc.c **** 
2003:./FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2004:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
2005:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
2006:./FWLIB/src/stm32f4xx_rtc.c **** 
2007:./FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the Time Stamp TSEDGE and Enable bits */
2008:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->CR = (uint32_t)tmpreg;
2009:./FWLIB/src/stm32f4xx_rtc.c **** 
2010:./FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2011:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
2012:./FWLIB/src/stm32f4xx_rtc.c **** }
2013:./FWLIB/src/stm32f4xx_rtc.c **** 
2014:./FWLIB/src/stm32f4xx_rtc.c **** /**
2015:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC TimeStamp value and masks.
2016:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
2017:./FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2018:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
2019:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
2020:./FWLIB/src/stm32f4xx_rtc.c ****   * @param RTC_StampTimeStruct: pointer to a RTC_TimeTypeDef structure that will 
2021:./FWLIB/src/stm32f4xx_rtc.c ****   *                             contains the TimeStamp time values. 
2022:./FWLIB/src/stm32f4xx_rtc.c ****   * @param RTC_StampDateStruct: pointer to a RTC_DateTypeDef structure that will 
2023:./FWLIB/src/stm32f4xx_rtc.c ****   *                             contains the TimeStamp date values.     
2024:./FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2025:./FWLIB/src/stm32f4xx_rtc.c ****   */
2026:./FWLIB/src/stm32f4xx_rtc.c **** void RTC_GetTimeStamp(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_StampTimeStruct, 
2027:./FWLIB/src/stm32f4xx_rtc.c ****                                       RTC_DateTypeDef* RTC_StampDateStruct)
ARM GAS  /tmp/ccv4OuYc.s 			page 37


2028:./FWLIB/src/stm32f4xx_rtc.c **** {
2029:./FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmptime = 0, tmpdate = 0;
2030:./FWLIB/src/stm32f4xx_rtc.c **** 
2031:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2032:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
2033:./FWLIB/src/stm32f4xx_rtc.c **** 
2034:./FWLIB/src/stm32f4xx_rtc.c ****   /* Get the TimeStamp time and date registers values */
2035:./FWLIB/src/stm32f4xx_rtc.c ****   tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
2036:./FWLIB/src/stm32f4xx_rtc.c ****   tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
2037:./FWLIB/src/stm32f4xx_rtc.c **** 
2038:./FWLIB/src/stm32f4xx_rtc.c ****   /* Fill the Time structure fields with the read parameters */
2039:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
2040:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
2041:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
2042:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
2043:./FWLIB/src/stm32f4xx_rtc.c **** 
2044:./FWLIB/src/stm32f4xx_rtc.c ****   /* Fill the Date structure fields with the read parameters */
2045:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Year = 0;
2046:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
2047:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
2048:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
2049:./FWLIB/src/stm32f4xx_rtc.c **** 
2050:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
2051:./FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
2052:./FWLIB/src/stm32f4xx_rtc.c ****   {
2053:./FWLIB/src/stm32f4xx_rtc.c ****     /* Convert the Time structure parameters to Binary format */
2054:./FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
2055:./FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
2056:./FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
2057:./FWLIB/src/stm32f4xx_rtc.c **** 
2058:./FWLIB/src/stm32f4xx_rtc.c ****     /* Convert the Date structure parameters to Binary format */
2059:./FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
2060:./FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
2061:./FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
2062:./FWLIB/src/stm32f4xx_rtc.c ****   }
2063:./FWLIB/src/stm32f4xx_rtc.c **** }
2064:./FWLIB/src/stm32f4xx_rtc.c **** 
2065:./FWLIB/src/stm32f4xx_rtc.c **** /**
2066:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC timestamp Sub seconds value.
2067:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  None
2068:./FWLIB/src/stm32f4xx_rtc.c ****   * @retval RTC current timestamp Sub seconds value.
2069:./FWLIB/src/stm32f4xx_rtc.c ****   */
2070:./FWLIB/src/stm32f4xx_rtc.c **** uint32_t RTC_GetTimeStampSubSecond(void)
2071:./FWLIB/src/stm32f4xx_rtc.c **** {
2072:./FWLIB/src/stm32f4xx_rtc.c ****   /* Get timestamp sub seconds values from the correspondent registers */
2073:./FWLIB/src/stm32f4xx_rtc.c ****   return (uint32_t)(RTC->TSSSR);
2074:./FWLIB/src/stm32f4xx_rtc.c **** }
2075:./FWLIB/src/stm32f4xx_rtc.c **** 
2076:./FWLIB/src/stm32f4xx_rtc.c **** /**
2077:./FWLIB/src/stm32f4xx_rtc.c ****   * @}
2078:./FWLIB/src/stm32f4xx_rtc.c ****   */
2079:./FWLIB/src/stm32f4xx_rtc.c **** 
2080:./FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group9 Tampers configuration functions
2081:./FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   Tampers configuration functions 
2082:./FWLIB/src/stm32f4xx_rtc.c ****  *
2083:./FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
2084:./FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
ARM GAS  /tmp/ccv4OuYc.s 			page 38


2085:./FWLIB/src/stm32f4xx_rtc.c ****                  ##### Tampers configuration functions #####
2086:./FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================  
2087:./FWLIB/src/stm32f4xx_rtc.c **** 
2088:./FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
2089:./FWLIB/src/stm32f4xx_rtc.c ****   * @{
2090:./FWLIB/src/stm32f4xx_rtc.c ****   */
2091:./FWLIB/src/stm32f4xx_rtc.c **** 
2092:./FWLIB/src/stm32f4xx_rtc.c **** /**
2093:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configures the select Tamper pin edge.
2094:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
2095:./FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be RTC_Tamper_1.
2096:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperTrigger: Specifies the trigger on the tamper pin that 
2097:./FWLIB/src/stm32f4xx_rtc.c ****   *         stimulates tamper event. 
2098:./FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2099:./FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_RisingEdge: Rising Edge of the tamper pin causes tamper event.
2100:./FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_FallingEdge: Falling Edge of the tamper pin causes tamper event.
2101:./FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_LowLevel: Low Level of the tamper pin causes tamper event.
2102:./FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_HighLevel: High Level of the tamper pin causes tamper event.
2103:./FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2104:./FWLIB/src/stm32f4xx_rtc.c ****   */
2105:./FWLIB/src/stm32f4xx_rtc.c **** void RTC_TamperTriggerConfig(uint32_t RTC_Tamper, uint32_t RTC_TamperTrigger)
2106:./FWLIB/src/stm32f4xx_rtc.c **** {
2107:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2108:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper)); 
2109:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
2110:./FWLIB/src/stm32f4xx_rtc.c ****  
2111:./FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
2112:./FWLIB/src/stm32f4xx_rtc.c ****   {  
2113:./FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the RTC_TAFCR register */
2114:./FWLIB/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
2115:./FWLIB/src/stm32f4xx_rtc.c ****   }
2116:./FWLIB/src/stm32f4xx_rtc.c ****   else
2117:./FWLIB/src/stm32f4xx_rtc.c ****   { 
2118:./FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the RTC_TAFCR register */
2119:./FWLIB/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
2120:./FWLIB/src/stm32f4xx_rtc.c ****   }  
2121:./FWLIB/src/stm32f4xx_rtc.c **** }
2122:./FWLIB/src/stm32f4xx_rtc.c **** 
2123:./FWLIB/src/stm32f4xx_rtc.c **** /**
2124:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Tamper detection.
2125:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
2126:./FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be RTC_Tamper_1.
2127:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the tamper pin.
2128:./FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.                   
2129:./FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2130:./FWLIB/src/stm32f4xx_rtc.c ****   */
2131:./FWLIB/src/stm32f4xx_rtc.c **** void RTC_TamperCmd(uint32_t RTC_Tamper, FunctionalState NewState)
2132:./FWLIB/src/stm32f4xx_rtc.c **** {
2133:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2134:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper));  
2135:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2136:./FWLIB/src/stm32f4xx_rtc.c ****   
2137:./FWLIB/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
2138:./FWLIB/src/stm32f4xx_rtc.c ****   {
2139:./FWLIB/src/stm32f4xx_rtc.c ****     /* Enable the selected Tamper pin */
2140:./FWLIB/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_Tamper;
2141:./FWLIB/src/stm32f4xx_rtc.c ****   }
ARM GAS  /tmp/ccv4OuYc.s 			page 39


2142:./FWLIB/src/stm32f4xx_rtc.c ****   else
2143:./FWLIB/src/stm32f4xx_rtc.c ****   {
2144:./FWLIB/src/stm32f4xx_rtc.c ****     /* Disable the selected Tamper pin */
2145:./FWLIB/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
2146:./FWLIB/src/stm32f4xx_rtc.c ****   }  
2147:./FWLIB/src/stm32f4xx_rtc.c **** }
2148:./FWLIB/src/stm32f4xx_rtc.c **** 
2149:./FWLIB/src/stm32f4xx_rtc.c **** /**
2150:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Filter.
2151:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperFilter: Specifies the tampers filter.
2152:./FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2153:./FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_Disable: Tamper filter is disabled.
2154:./FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_2Sample: Tamper is activated after 2 consecutive 
2155:./FWLIB/src/stm32f4xx_rtc.c ****   *                                    samples at the active level 
2156:./FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_4Sample: Tamper is activated after 4 consecutive 
2157:./FWLIB/src/stm32f4xx_rtc.c ****   *                                    samples at the active level
2158:./FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_8Sample: Tamper is activated after 8 consecutive 
2159:./FWLIB/src/stm32f4xx_rtc.c ****   *                                    samples at the active level 
2160:./FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2161:./FWLIB/src/stm32f4xx_rtc.c ****   */
2162:./FWLIB/src/stm32f4xx_rtc.c **** void RTC_TamperFilterConfig(uint32_t RTC_TamperFilter)
2163:./FWLIB/src/stm32f4xx_rtc.c **** {
2164:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2165:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_FILTER(RTC_TamperFilter));
2166:./FWLIB/src/stm32f4xx_rtc.c ****    
2167:./FWLIB/src/stm32f4xx_rtc.c ****   /* Clear TAMPFLT[1:0] bits in the RTC_TAFCR register */
2168:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFLT);
2169:./FWLIB/src/stm32f4xx_rtc.c **** 
2170:./FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2171:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperFilter;
2172:./FWLIB/src/stm32f4xx_rtc.c **** }
2173:./FWLIB/src/stm32f4xx_rtc.c **** 
2174:./FWLIB/src/stm32f4xx_rtc.c **** /**
2175:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Sampling Frequency.
2176:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperSamplingFreq: Specifies the tampers Sampling Frequency.
2177:./FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2178:./FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div32768: Each of the tamper inputs are sampled
2179:./FWLIB/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 32768
2180:./FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div16384: Each of the tamper inputs are sampled
2181:./FWLIB/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 16384
2182:./FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div8192: Each of the tamper inputs are sampled
2183:./FWLIB/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 8192
2184:./FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div4096: Each of the tamper inputs are sampled
2185:./FWLIB/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 4096
2186:./FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div2048: Each of the tamper inputs are sampled
2187:./FWLIB/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 2048
2188:./FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div1024: Each of the tamper inputs are sampled
2189:./FWLIB/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 1024
2190:./FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div512: Each of the tamper inputs are sampled
2191:./FWLIB/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 512  
2192:./FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div256: Each of the tamper inputs are sampled
2193:./FWLIB/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 256  
2194:./FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2195:./FWLIB/src/stm32f4xx_rtc.c ****   */
2196:./FWLIB/src/stm32f4xx_rtc.c **** void RTC_TamperSamplingFreqConfig(uint32_t RTC_TamperSamplingFreq)
2197:./FWLIB/src/stm32f4xx_rtc.c **** {
2198:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
ARM GAS  /tmp/ccv4OuYc.s 			page 40


2199:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_SAMPLING_FREQ(RTC_TamperSamplingFreq));
2200:./FWLIB/src/stm32f4xx_rtc.c ****  
2201:./FWLIB/src/stm32f4xx_rtc.c ****   /* Clear TAMPFREQ[2:0] bits in the RTC_TAFCR register */
2202:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFREQ);
2203:./FWLIB/src/stm32f4xx_rtc.c **** 
2204:./FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2205:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperSamplingFreq;
2206:./FWLIB/src/stm32f4xx_rtc.c **** }
2207:./FWLIB/src/stm32f4xx_rtc.c **** 
2208:./FWLIB/src/stm32f4xx_rtc.c **** /**
2209:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Pins input Precharge Duration.
2210:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperPrechargeDuration: Specifies the Tampers Pins input
2211:./FWLIB/src/stm32f4xx_rtc.c ****   *         Precharge Duration.
2212:./FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2213:./FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_1RTCCLK: Tamper pins are precharged before sampling during
2214:./FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_2RTCCLK: Tamper pins are precharged before sampling during
2215:./FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_4RTCCLK: Tamper pins are precharged before sampling during
2216:./FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_8RTCCLK: Tamper pins are precharged before sampling during
2217:./FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2218:./FWLIB/src/stm32f4xx_rtc.c ****   */
2219:./FWLIB/src/stm32f4xx_rtc.c **** void RTC_TamperPinsPrechargeDuration(uint32_t RTC_TamperPrechargeDuration)
2220:./FWLIB/src/stm32f4xx_rtc.c **** {
2221:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2222:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(RTC_TamperPrechargeDuration));
2223:./FWLIB/src/stm32f4xx_rtc.c ****    
2224:./FWLIB/src/stm32f4xx_rtc.c ****   /* Clear TAMPPRCH[1:0] bits in the RTC_TAFCR register */
2225:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPPRCH);
2226:./FWLIB/src/stm32f4xx_rtc.c **** 
2227:./FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2228:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperPrechargeDuration;
2229:./FWLIB/src/stm32f4xx_rtc.c **** }
2230:./FWLIB/src/stm32f4xx_rtc.c **** 
2231:./FWLIB/src/stm32f4xx_rtc.c **** /**
2232:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the TimeStamp on Tamper Detection Event.
2233:./FWLIB/src/stm32f4xx_rtc.c ****   * @note   The timestamp is valid even the TSE bit in tamper control register 
2234:./FWLIB/src/stm32f4xx_rtc.c ****   *         is reset.   
2235:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the timestamp on tamper event.
2236:./FWLIB/src/stm32f4xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.
2237:./FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2238:./FWLIB/src/stm32f4xx_rtc.c ****   */
2239:./FWLIB/src/stm32f4xx_rtc.c **** void RTC_TimeStampOnTamperDetectionCmd(FunctionalState NewState)
2240:./FWLIB/src/stm32f4xx_rtc.c **** {
2241:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2242:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2243:./FWLIB/src/stm32f4xx_rtc.c ****    
2244:./FWLIB/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
2245:./FWLIB/src/stm32f4xx_rtc.c ****   {
2246:./FWLIB/src/stm32f4xx_rtc.c ****     /* Save timestamp on tamper detection event */
2247:./FWLIB/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
2248:./FWLIB/src/stm32f4xx_rtc.c ****   }
2249:./FWLIB/src/stm32f4xx_rtc.c ****   else
2250:./FWLIB/src/stm32f4xx_rtc.c ****   {
2251:./FWLIB/src/stm32f4xx_rtc.c ****     /* Tamper detection does not cause a timestamp to be saved */
2252:./FWLIB/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
2253:./FWLIB/src/stm32f4xx_rtc.c ****   }
2254:./FWLIB/src/stm32f4xx_rtc.c **** }
2255:./FWLIB/src/stm32f4xx_rtc.c **** 
ARM GAS  /tmp/ccv4OuYc.s 			page 41


2256:./FWLIB/src/stm32f4xx_rtc.c **** /**
2257:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Precharge of Tamper pin.
2258:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of tamper pull up.
2259:./FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be: ENABLE or DISABLE.                   
2260:./FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2261:./FWLIB/src/stm32f4xx_rtc.c ****   */
2262:./FWLIB/src/stm32f4xx_rtc.c **** void RTC_TamperPullUpCmd(FunctionalState NewState)
2263:./FWLIB/src/stm32f4xx_rtc.c **** {
2264:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2265:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2266:./FWLIB/src/stm32f4xx_rtc.c ****   
2267:./FWLIB/src/stm32f4xx_rtc.c ****  if (NewState != DISABLE)
2268:./FWLIB/src/stm32f4xx_rtc.c ****   {
2269:./FWLIB/src/stm32f4xx_rtc.c ****     /* Enable precharge of the selected Tamper pin */
2270:./FWLIB/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
2271:./FWLIB/src/stm32f4xx_rtc.c ****   }
2272:./FWLIB/src/stm32f4xx_rtc.c ****   else
2273:./FWLIB/src/stm32f4xx_rtc.c ****   {
2274:./FWLIB/src/stm32f4xx_rtc.c ****     /* Disable precharge of the selected Tamper pin */
2275:./FWLIB/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
2276:./FWLIB/src/stm32f4xx_rtc.c ****   } 
2277:./FWLIB/src/stm32f4xx_rtc.c **** }
2278:./FWLIB/src/stm32f4xx_rtc.c **** 
2279:./FWLIB/src/stm32f4xx_rtc.c **** /**
2280:./FWLIB/src/stm32f4xx_rtc.c ****   * @}
2281:./FWLIB/src/stm32f4xx_rtc.c ****   */
2282:./FWLIB/src/stm32f4xx_rtc.c **** 
2283:./FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group10 Backup Data Registers configuration functions
2284:./FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   Backup Data Registers configuration functions  
2285:./FWLIB/src/stm32f4xx_rtc.c ****  *
2286:./FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
2287:./FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
2288:./FWLIB/src/stm32f4xx_rtc.c ****              ##### Backup Data Registers configuration functions ##### 
2289:./FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================  
2290:./FWLIB/src/stm32f4xx_rtc.c **** 
2291:./FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
2292:./FWLIB/src/stm32f4xx_rtc.c ****   * @{
2293:./FWLIB/src/stm32f4xx_rtc.c ****   */
2294:./FWLIB/src/stm32f4xx_rtc.c **** 
2295:./FWLIB/src/stm32f4xx_rtc.c **** /**
2296:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Writes a data in a specified RTC Backup data register.
2297:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2298:./FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
2299:./FWLIB/src/stm32f4xx_rtc.c ****   *                          specify the register.
2300:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  Data: Data to be written in the specified RTC Backup data register.                    
2301:./FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2302:./FWLIB/src/stm32f4xx_rtc.c ****   */
2303:./FWLIB/src/stm32f4xx_rtc.c **** void RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data)
2304:./FWLIB/src/stm32f4xx_rtc.c **** {
2305:./FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
2306:./FWLIB/src/stm32f4xx_rtc.c ****   
2307:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2308:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2309:./FWLIB/src/stm32f4xx_rtc.c **** 
2310:./FWLIB/src/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
2311:./FWLIB/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
2312:./FWLIB/src/stm32f4xx_rtc.c **** 
ARM GAS  /tmp/ccv4OuYc.s 			page 42


2313:./FWLIB/src/stm32f4xx_rtc.c ****   /* Write the specified register */
2314:./FWLIB/src/stm32f4xx_rtc.c ****   *(__IO uint32_t *)tmp = (uint32_t)Data;
2315:./FWLIB/src/stm32f4xx_rtc.c **** }
2316:./FWLIB/src/stm32f4xx_rtc.c **** 
2317:./FWLIB/src/stm32f4xx_rtc.c **** /**
2318:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Reads data from the specified RTC Backup data Register.
2319:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2320:./FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
2321:./FWLIB/src/stm32f4xx_rtc.c ****   *                          specify the register.                   
2322:./FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2323:./FWLIB/src/stm32f4xx_rtc.c ****   */
2324:./FWLIB/src/stm32f4xx_rtc.c **** uint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR)
2325:./FWLIB/src/stm32f4xx_rtc.c **** {
2326:./FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
2327:./FWLIB/src/stm32f4xx_rtc.c ****   
2328:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2329:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2330:./FWLIB/src/stm32f4xx_rtc.c **** 
2331:./FWLIB/src/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
2332:./FWLIB/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
2333:./FWLIB/src/stm32f4xx_rtc.c ****   
2334:./FWLIB/src/stm32f4xx_rtc.c ****   /* Read the specified register */
2335:./FWLIB/src/stm32f4xx_rtc.c ****   return (*(__IO uint32_t *)tmp);
2336:./FWLIB/src/stm32f4xx_rtc.c **** }
2337:./FWLIB/src/stm32f4xx_rtc.c **** 
2338:./FWLIB/src/stm32f4xx_rtc.c **** /**
2339:./FWLIB/src/stm32f4xx_rtc.c ****   * @}
2340:./FWLIB/src/stm32f4xx_rtc.c ****   */
2341:./FWLIB/src/stm32f4xx_rtc.c **** 
2342:./FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group11 RTC Tamper and TimeStamp Pins Selection and Output Type Config configurat
2343:./FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   RTC Tamper and TimeStamp Pins Selection and Output Type Config 
2344:./FWLIB/src/stm32f4xx_rtc.c ****  *           configuration functions  
2345:./FWLIB/src/stm32f4xx_rtc.c ****  *
2346:./FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
2347:./FWLIB/src/stm32f4xx_rtc.c ****  ==================================================================================================
2348:./FWLIB/src/stm32f4xx_rtc.c ****  ##### RTC Tamper and TimeStamp Pins Selection and Output Type Config configuration functions #####
2349:./FWLIB/src/stm32f4xx_rtc.c ****  ==================================================================================================
2350:./FWLIB/src/stm32f4xx_rtc.c **** 
2351:./FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
2352:./FWLIB/src/stm32f4xx_rtc.c ****   * @{
2353:./FWLIB/src/stm32f4xx_rtc.c ****   */
2354:./FWLIB/src/stm32f4xx_rtc.c **** 
2355:./FWLIB/src/stm32f4xx_rtc.c **** /**
2356:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Selects the RTC Tamper Pin.
2357:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperPin: specifies the RTC Tamper Pin.
2358:./FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2359:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_TamperPin_PC13: PC13 is selected as RTC Tamper Pin.
2360:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_TamperPin_PI8: PI8 is selected as RTC Tamper Pin.    
2361:./FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2362:./FWLIB/src/stm32f4xx_rtc.c ****   */
2363:./FWLIB/src/stm32f4xx_rtc.c **** void RTC_TamperPinSelection(uint32_t RTC_TamperPin)
2364:./FWLIB/src/stm32f4xx_rtc.c **** {
2365:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2366:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_PIN(RTC_TamperPin));
2367:./FWLIB/src/stm32f4xx_rtc.c ****   
2368:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPINSEL);
2369:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
ARM GAS  /tmp/ccv4OuYc.s 			page 43


2370:./FWLIB/src/stm32f4xx_rtc.c **** }
2371:./FWLIB/src/stm32f4xx_rtc.c **** 
2372:./FWLIB/src/stm32f4xx_rtc.c **** /**
2373:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Selects the RTC TimeStamp Pin.
2374:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStampPin: specifies the RTC TimeStamp Pin.
2375:./FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2376:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampPin_PC13: PC13 is selected as RTC TimeStamp Pin.
2377:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampPin_PI8: PI8 is selected as RTC TimeStamp Pin.    
2378:./FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2379:./FWLIB/src/stm32f4xx_rtc.c ****   */
2380:./FWLIB/src/stm32f4xx_rtc.c **** void RTC_TimeStampPinSelection(uint32_t RTC_TimeStampPin)
2381:./FWLIB/src/stm32f4xx_rtc.c **** {
2382:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2383:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
2384:./FWLIB/src/stm32f4xx_rtc.c ****   
2385:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TSINSEL);
2386:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
2387:./FWLIB/src/stm32f4xx_rtc.c **** }
2388:./FWLIB/src/stm32f4xx_rtc.c **** 
2389:./FWLIB/src/stm32f4xx_rtc.c **** /**
2390:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Output Pin mode. 
2391:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_OutputType: specifies the RTC Output (PC13) pin mode.
2392:./FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2393:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputType_OpenDrain: RTC Output (PC13) is configured in 
2394:./FWLIB/src/stm32f4xx_rtc.c ****   *                                    Open Drain mode.
2395:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputType_PushPull:  RTC Output (PC13) is configured in 
2396:./FWLIB/src/stm32f4xx_rtc.c ****   *                                    Push Pull mode.    
2397:./FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2398:./FWLIB/src/stm32f4xx_rtc.c ****   */
2399:./FWLIB/src/stm32f4xx_rtc.c **** void RTC_OutputTypeConfig(uint32_t RTC_OutputType)
2400:./FWLIB/src/stm32f4xx_rtc.c **** {
2401:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2402:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_TYPE(RTC_OutputType));
2403:./FWLIB/src/stm32f4xx_rtc.c ****   
2404:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
2405:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
2406:./FWLIB/src/stm32f4xx_rtc.c **** }
2407:./FWLIB/src/stm32f4xx_rtc.c **** 
2408:./FWLIB/src/stm32f4xx_rtc.c **** /**
2409:./FWLIB/src/stm32f4xx_rtc.c ****   * @}
2410:./FWLIB/src/stm32f4xx_rtc.c ****   */
2411:./FWLIB/src/stm32f4xx_rtc.c **** 
2412:./FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group12 Shift control synchronisation functions
2413:./FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   Shift control synchronisation functions 
2414:./FWLIB/src/stm32f4xx_rtc.c ****  *
2415:./FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
2416:./FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
2417:./FWLIB/src/stm32f4xx_rtc.c ****               ##### Shift control synchronisation functions #####
2418:./FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================  
2419:./FWLIB/src/stm32f4xx_rtc.c **** 
2420:./FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
2421:./FWLIB/src/stm32f4xx_rtc.c ****   * @{
2422:./FWLIB/src/stm32f4xx_rtc.c ****   */
2423:./FWLIB/src/stm32f4xx_rtc.c **** 
2424:./FWLIB/src/stm32f4xx_rtc.c **** /**
2425:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configures the Synchronization Shift Control Settings.
2426:./FWLIB/src/stm32f4xx_rtc.c ****   * @note   When REFCKON is set, firmware must not write to Shift control register 
ARM GAS  /tmp/ccv4OuYc.s 			page 44


2427:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_ShiftAdd1S : Select to add or not 1 second to the time Calendar.
2428:./FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values :
2429:./FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_ShiftAdd1S_Set  : Add one second to the clock calendar. 
2430:./FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_ShiftAdd1S_Reset: No effect.
2431:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_ShiftSubFS: Select the number of Second Fractions to Substitute.
2432:./FWLIB/src/stm32f4xx_rtc.c ****   *         This parameter can be one any value from 0 to 0x7FFF.
2433:./FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
2434:./FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Shift registers are configured
2435:./FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Shift registers are not configured
2436:./FWLIB/src/stm32f4xx_rtc.c **** */
2437:./FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SynchroShiftConfig(uint32_t RTC_ShiftAdd1S, uint32_t RTC_ShiftSubFS)
2438:./FWLIB/src/stm32f4xx_rtc.c **** {
2439:./FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
2440:./FWLIB/src/stm32f4xx_rtc.c ****   uint32_t shpfcount = 0;
2441:./FWLIB/src/stm32f4xx_rtc.c **** 
2442:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2443:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SHIFT_ADD1S(RTC_ShiftAdd1S));
2444:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SHIFT_SUBFS(RTC_ShiftSubFS));
2445:./FWLIB/src/stm32f4xx_rtc.c **** 
2446:./FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2447:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
2448:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
2449:./FWLIB/src/stm32f4xx_rtc.c ****   
2450:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check if a Shift is pending*/
2451:./FWLIB/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
2452:./FWLIB/src/stm32f4xx_rtc.c ****   {
2453:./FWLIB/src/stm32f4xx_rtc.c ****     /* Wait until the shift is completed*/
2454:./FWLIB/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
2455:./FWLIB/src/stm32f4xx_rtc.c ****     {
2456:./FWLIB/src/stm32f4xx_rtc.c ****       shpfcount++;
2457:./FWLIB/src/stm32f4xx_rtc.c ****     }
2458:./FWLIB/src/stm32f4xx_rtc.c ****   }
2459:./FWLIB/src/stm32f4xx_rtc.c **** 
2460:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check if the Shift pending is completed or if there is no Shift operation at all*/
2461:./FWLIB/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
2462:./FWLIB/src/stm32f4xx_rtc.c ****   {
2463:./FWLIB/src/stm32f4xx_rtc.c ****     /* check if the reference clock detection is disabled */
2464:./FWLIB/src/stm32f4xx_rtc.c ****     if((RTC->CR & RTC_CR_REFCKON) == RESET)
2465:./FWLIB/src/stm32f4xx_rtc.c ****     {
2466:./FWLIB/src/stm32f4xx_rtc.c ****       /* Configure the Shift settings */
2467:./FWLIB/src/stm32f4xx_rtc.c ****       RTC->SHIFTR = (uint32_t)(uint32_t)(RTC_ShiftSubFS) | (uint32_t)(RTC_ShiftAdd1S);
2468:./FWLIB/src/stm32f4xx_rtc.c ****     
2469:./FWLIB/src/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
2470:./FWLIB/src/stm32f4xx_rtc.c ****       {
2471:./FWLIB/src/stm32f4xx_rtc.c ****         status = ERROR;
2472:./FWLIB/src/stm32f4xx_rtc.c ****       }
2473:./FWLIB/src/stm32f4xx_rtc.c ****       else
2474:./FWLIB/src/stm32f4xx_rtc.c ****       {
2475:./FWLIB/src/stm32f4xx_rtc.c ****         status = SUCCESS;
2476:./FWLIB/src/stm32f4xx_rtc.c ****       }
2477:./FWLIB/src/stm32f4xx_rtc.c ****     }
2478:./FWLIB/src/stm32f4xx_rtc.c ****     else
2479:./FWLIB/src/stm32f4xx_rtc.c ****     {
2480:./FWLIB/src/stm32f4xx_rtc.c ****       status = ERROR;
2481:./FWLIB/src/stm32f4xx_rtc.c ****     }
2482:./FWLIB/src/stm32f4xx_rtc.c ****   }
2483:./FWLIB/src/stm32f4xx_rtc.c ****   else
ARM GAS  /tmp/ccv4OuYc.s 			page 45


2484:./FWLIB/src/stm32f4xx_rtc.c ****   {
2485:./FWLIB/src/stm32f4xx_rtc.c ****     status = ERROR;
2486:./FWLIB/src/stm32f4xx_rtc.c ****   }
2487:./FWLIB/src/stm32f4xx_rtc.c **** 
2488:./FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2489:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
2490:./FWLIB/src/stm32f4xx_rtc.c ****   
2491:./FWLIB/src/stm32f4xx_rtc.c ****   return (ErrorStatus)(status);
2492:./FWLIB/src/stm32f4xx_rtc.c **** }
2493:./FWLIB/src/stm32f4xx_rtc.c **** 
2494:./FWLIB/src/stm32f4xx_rtc.c **** /**
2495:./FWLIB/src/stm32f4xx_rtc.c ****   * @}
2496:./FWLIB/src/stm32f4xx_rtc.c ****   */
2497:./FWLIB/src/stm32f4xx_rtc.c **** 
2498:./FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group13 Interrupts and flags management functions
2499:./FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   Interrupts and flags management functions  
2500:./FWLIB/src/stm32f4xx_rtc.c ****  *
2501:./FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
2502:./FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
2503:./FWLIB/src/stm32f4xx_rtc.c ****               ##### Interrupts and flags management functions #####
2504:./FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================  
2505:./FWLIB/src/stm32f4xx_rtc.c ****  [..] All RTC interrupts are connected to the EXTI controller.
2506:./FWLIB/src/stm32f4xx_rtc.c ****  
2507:./FWLIB/src/stm32f4xx_rtc.c ****    (+) To enable the RTC Alarm interrupt, the following sequence is required:
2508:./FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure and enable the EXTI Line 17 in interrupt mode and select 
2509:./FWLIB/src/stm32f4xx_rtc.c ****             the rising edge sensitivity using the EXTI_Init() function.
2510:./FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure and enable the RTC_Alarm IRQ channel in the NVIC using the 
2511:./FWLIB/src/stm32f4xx_rtc.c ****             NVIC_Init() function.
2512:./FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure the RTC to generate RTC alarms (Alarm A and/or Alarm B) using
2513:./FWLIB/src/stm32f4xx_rtc.c ****             the RTC_SetAlarm() and RTC_AlarmCmd() functions.
2514:./FWLIB/src/stm32f4xx_rtc.c **** 
2515:./FWLIB/src/stm32f4xx_rtc.c ****    (+) To enable the RTC Wakeup interrupt, the following sequence is required:
2516:./FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure and enable the EXTI Line 22 in interrupt mode and select the
2517:./FWLIB/src/stm32f4xx_rtc.c ****             rising edge sensitivity using the EXTI_Init() function.
2518:./FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure and enable the RTC_WKUP IRQ channel in the NVIC using the 
2519:./FWLIB/src/stm32f4xx_rtc.c ****             NVIC_Init() function.
2520:./FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure the RTC to generate the RTC wakeup timer event using the 
2521:./FWLIB/src/stm32f4xx_rtc.c ****             RTC_WakeUpClockConfig(), RTC_SetWakeUpCounter() and RTC_WakeUpCmd() 
2522:./FWLIB/src/stm32f4xx_rtc.c ****             functions.
2523:./FWLIB/src/stm32f4xx_rtc.c **** 
2524:./FWLIB/src/stm32f4xx_rtc.c ****    (+) To enable the RTC Tamper interrupt, the following sequence is required:
2525:./FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure and enable the EXTI Line 21 in interrupt mode and select 
2526:./FWLIB/src/stm32f4xx_rtc.c ****             the rising edge sensitivity using the EXTI_Init() function.
2527:./FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the
2528:./FWLIB/src/stm32f4xx_rtc.c ****             NVIC_Init() function.
2529:./FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure the RTC to detect the RTC tamper event using the 
2530:./FWLIB/src/stm32f4xx_rtc.c ****             RTC_TamperTriggerConfig() and RTC_TamperCmd() functions.
2531:./FWLIB/src/stm32f4xx_rtc.c **** 
2532:./FWLIB/src/stm32f4xx_rtc.c ****    (+) To enable the RTC TimeStamp interrupt, the following sequence is required:
2533:./FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure and enable the EXTI Line 21 in interrupt mode and select the
2534:./FWLIB/src/stm32f4xx_rtc.c ****             rising edge sensitivity using the EXTI_Init() function.
2535:./FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the 
2536:./FWLIB/src/stm32f4xx_rtc.c ****             NVIC_Init() function.
2537:./FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure the RTC to detect the RTC time stamp event using the 
2538:./FWLIB/src/stm32f4xx_rtc.c ****             RTC_TimeStampCmd() functions.
2539:./FWLIB/src/stm32f4xx_rtc.c **** 
2540:./FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
ARM GAS  /tmp/ccv4OuYc.s 			page 46


2541:./FWLIB/src/stm32f4xx_rtc.c ****   * @{
2542:./FWLIB/src/stm32f4xx_rtc.c ****   */
2543:./FWLIB/src/stm32f4xx_rtc.c **** 
2544:./FWLIB/src/stm32f4xx_rtc.c **** /**
2545:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the specified RTC interrupts.
2546:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt sources to be enabled or disabled. 
2547:./FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2548:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS:  Time Stamp interrupt mask
2549:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT:  WakeUp Timer interrupt mask
2550:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB:  Alarm B interrupt mask
2551:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA:  Alarm A interrupt mask
2552:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP: Tamper event interrupt mask
2553:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the specified RTC interrupts.
2554:./FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
2555:./FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2556:./FWLIB/src/stm32f4xx_rtc.c ****   */
2557:./FWLIB/src/stm32f4xx_rtc.c **** void RTC_ITConfig(uint32_t RTC_IT, FunctionalState NewState)
2558:./FWLIB/src/stm32f4xx_rtc.c **** {
2559:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2560:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CONFIG_IT(RTC_IT));
2561:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2562:./FWLIB/src/stm32f4xx_rtc.c **** 
2563:./FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2564:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
2565:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
2566:./FWLIB/src/stm32f4xx_rtc.c **** 
2567:./FWLIB/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
2568:./FWLIB/src/stm32f4xx_rtc.c ****   {
2569:./FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2570:./FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
2571:./FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2572:./FWLIB/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
2573:./FWLIB/src/stm32f4xx_rtc.c ****   }
2574:./FWLIB/src/stm32f4xx_rtc.c ****   else
2575:./FWLIB/src/stm32f4xx_rtc.c ****   {
2576:./FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2577:./FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
2578:./FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2579:./FWLIB/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
2580:./FWLIB/src/stm32f4xx_rtc.c ****   }
2581:./FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2582:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
2583:./FWLIB/src/stm32f4xx_rtc.c **** }
2584:./FWLIB/src/stm32f4xx_rtc.c **** 
2585:./FWLIB/src/stm32f4xx_rtc.c **** /**
2586:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Checks whether the specified RTC flag is set or not.
2587:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_FLAG: specifies the flag to check.
2588:./FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2589:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RECALPF: RECALPF event flag.
2590:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2591:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp OverFlow flag
2592:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2593:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2594:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
2595:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2596:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_INITF: Initialization mode flag
2597:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
ARM GAS  /tmp/ccv4OuYc.s 			page 47


2598:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_INITS: Registers Configured flag
2599:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_SHPF: Shift operation pending flag.
2600:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTWF: WakeUp Timer Write flag
2601:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBWF: Alarm B Write flag
2602:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAWF: Alarm A write flag
2603:./FWLIB/src/stm32f4xx_rtc.c ****   * @retval The new state of RTC_FLAG (SET or RESET).
2604:./FWLIB/src/stm32f4xx_rtc.c ****   */
2605:./FWLIB/src/stm32f4xx_rtc.c **** FlagStatus RTC_GetFlagStatus(uint32_t RTC_FLAG)
2606:./FWLIB/src/stm32f4xx_rtc.c **** {
2607:./FWLIB/src/stm32f4xx_rtc.c ****   FlagStatus bitstatus = RESET;
2608:./FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
2609:./FWLIB/src/stm32f4xx_rtc.c ****   
2610:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2611:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_GET_FLAG(RTC_FLAG));
2612:./FWLIB/src/stm32f4xx_rtc.c ****   
2613:./FWLIB/src/stm32f4xx_rtc.c ****   /* Get all the flags */
2614:./FWLIB/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
2615:./FWLIB/src/stm32f4xx_rtc.c ****   
2616:./FWLIB/src/stm32f4xx_rtc.c ****   /* Return the status of the flag */
2617:./FWLIB/src/stm32f4xx_rtc.c ****   if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
2618:./FWLIB/src/stm32f4xx_rtc.c ****   {
2619:./FWLIB/src/stm32f4xx_rtc.c ****     bitstatus = SET;
2620:./FWLIB/src/stm32f4xx_rtc.c ****   }
2621:./FWLIB/src/stm32f4xx_rtc.c ****   else
2622:./FWLIB/src/stm32f4xx_rtc.c ****   {
2623:./FWLIB/src/stm32f4xx_rtc.c ****     bitstatus = RESET;
2624:./FWLIB/src/stm32f4xx_rtc.c ****   }
2625:./FWLIB/src/stm32f4xx_rtc.c ****   return bitstatus;
2626:./FWLIB/src/stm32f4xx_rtc.c **** }
2627:./FWLIB/src/stm32f4xx_rtc.c **** 
2628:./FWLIB/src/stm32f4xx_rtc.c **** /**
2629:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Clears the RTC's pending flags.
2630:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_FLAG: specifies the RTC flag to clear.
2631:./FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2632:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2633:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp Overflow flag 
2634:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2635:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2636:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
2637:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2638:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2639:./FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2640:./FWLIB/src/stm32f4xx_rtc.c ****   */
2641:./FWLIB/src/stm32f4xx_rtc.c **** void RTC_ClearFlag(uint32_t RTC_FLAG)
2642:./FWLIB/src/stm32f4xx_rtc.c **** {
2643:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2644:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG));
2645:./FWLIB/src/stm32f4xx_rtc.c **** 
2646:./FWLIB/src/stm32f4xx_rtc.c ****   /* Clear the Flags in the RTC_ISR register */
2647:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR &
2648:./FWLIB/src/stm32f4xx_rtc.c **** }
2649:./FWLIB/src/stm32f4xx_rtc.c **** 
2650:./FWLIB/src/stm32f4xx_rtc.c **** /**
2651:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Checks whether the specified RTC interrupt has occurred or not.
2652:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt source to check.
2653:./FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2654:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
ARM GAS  /tmp/ccv4OuYc.s 			page 48


2655:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2656:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
2657:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2658:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
2659:./FWLIB/src/stm32f4xx_rtc.c ****   * @retval The new state of RTC_IT (SET or RESET).
2660:./FWLIB/src/stm32f4xx_rtc.c ****   */
2661:./FWLIB/src/stm32f4xx_rtc.c **** ITStatus RTC_GetITStatus(uint32_t RTC_IT)
2662:./FWLIB/src/stm32f4xx_rtc.c **** {
2663:./FWLIB/src/stm32f4xx_rtc.c ****   ITStatus bitstatus = RESET;
2664:./FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0, enablestatus = 0;
2665:./FWLIB/src/stm32f4xx_rtc.c ****  
2666:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2667:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_GET_IT(RTC_IT));
2668:./FWLIB/src/stm32f4xx_rtc.c ****   
2669:./FWLIB/src/stm32f4xx_rtc.c ****   /* Get the TAMPER Interrupt enable bit and pending bit */
2670:./FWLIB/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
2671:./FWLIB/src/stm32f4xx_rtc.c ****  
2672:./FWLIB/src/stm32f4xx_rtc.c ****   /* Get the Interrupt enable Status */
2673:./FWLIB/src/stm32f4xx_rtc.c ****   enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
2674:./FWLIB/src/stm32f4xx_rtc.c ****   
2675:./FWLIB/src/stm32f4xx_rtc.c ****   /* Get the Interrupt pending bit */
2676:./FWLIB/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
2677:./FWLIB/src/stm32f4xx_rtc.c ****   
2678:./FWLIB/src/stm32f4xx_rtc.c ****   /* Get the status of the Interrupt */
2679:./FWLIB/src/stm32f4xx_rtc.c ****   if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
2680:./FWLIB/src/stm32f4xx_rtc.c ****   {
2681:./FWLIB/src/stm32f4xx_rtc.c ****     bitstatus = SET;
2682:./FWLIB/src/stm32f4xx_rtc.c ****   }
2683:./FWLIB/src/stm32f4xx_rtc.c ****   else
2684:./FWLIB/src/stm32f4xx_rtc.c ****   {
2685:./FWLIB/src/stm32f4xx_rtc.c ****     bitstatus = RESET;
2686:./FWLIB/src/stm32f4xx_rtc.c ****   }
2687:./FWLIB/src/stm32f4xx_rtc.c ****   return bitstatus;
2688:./FWLIB/src/stm32f4xx_rtc.c **** }
2689:./FWLIB/src/stm32f4xx_rtc.c **** 
2690:./FWLIB/src/stm32f4xx_rtc.c **** /**
2691:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Clears the RTC's interrupt pending bits.
2692:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt pending bit to clear.
2693:./FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2694:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2695:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2696:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
2697:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2698:./FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
2699:./FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2700:./FWLIB/src/stm32f4xx_rtc.c ****   */
2701:./FWLIB/src/stm32f4xx_rtc.c **** void RTC_ClearITPendingBit(uint32_t RTC_IT)
2702:./FWLIB/src/stm32f4xx_rtc.c **** {
2703:./FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
2704:./FWLIB/src/stm32f4xx_rtc.c **** 
2705:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2706:./FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CLEAR_IT(RTC_IT));
2707:./FWLIB/src/stm32f4xx_rtc.c **** 
2708:./FWLIB/src/stm32f4xx_rtc.c ****   /* Get the RTC_ISR Interrupt pending bits mask */
2709:./FWLIB/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC_IT >> 4);
2710:./FWLIB/src/stm32f4xx_rtc.c **** 
2711:./FWLIB/src/stm32f4xx_rtc.c ****   /* Clear the interrupt pending bits in the RTC_ISR register */
ARM GAS  /tmp/ccv4OuYc.s 			page 49


2712:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & R
2713:./FWLIB/src/stm32f4xx_rtc.c **** }
2714:./FWLIB/src/stm32f4xx_rtc.c **** 
2715:./FWLIB/src/stm32f4xx_rtc.c **** /**
2716:./FWLIB/src/stm32f4xx_rtc.c ****   * @}
2717:./FWLIB/src/stm32f4xx_rtc.c ****   */
2718:./FWLIB/src/stm32f4xx_rtc.c **** 
2719:./FWLIB/src/stm32f4xx_rtc.c **** /**
2720:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Converts a 2 digit decimal to BCD format.
2721:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  Value: Byte to be converted.
2722:./FWLIB/src/stm32f4xx_rtc.c ****   * @retval Converted byte
2723:./FWLIB/src/stm32f4xx_rtc.c ****   */
2724:./FWLIB/src/stm32f4xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value)
2725:./FWLIB/src/stm32f4xx_rtc.c **** {
  27              		.loc 1 2725 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
2726:./FWLIB/src/stm32f4xx_rtc.c ****   uint8_t bcdhigh = 0;
  33              		.loc 1 2726 0
  34 0000 0023     		movs	r3, #0
2727:./FWLIB/src/stm32f4xx_rtc.c ****   
2728:./FWLIB/src/stm32f4xx_rtc.c ****   while (Value >= 10)
  35              		.loc 1 2728 0
  36 0002 03E0     		b	.L2
  37              	.LVL1:
  38              	.L3:
2729:./FWLIB/src/stm32f4xx_rtc.c ****   {
2730:./FWLIB/src/stm32f4xx_rtc.c ****     bcdhigh++;
  39              		.loc 1 2730 0
  40 0004 0133     		adds	r3, r3, #1
  41              	.LVL2:
  42 0006 DBB2     		uxtb	r3, r3
  43              	.LVL3:
2731:./FWLIB/src/stm32f4xx_rtc.c ****     Value -= 10;
  44              		.loc 1 2731 0
  45 0008 0A38     		subs	r0, r0, #10
  46              	.LVL4:
  47 000a C0B2     		uxtb	r0, r0
  48              	.LVL5:
  49              	.L2:
2728:./FWLIB/src/stm32f4xx_rtc.c ****   {
  50              		.loc 1 2728 0
  51 000c 0928     		cmp	r0, #9
  52 000e F9D8     		bhi	.L3
2732:./FWLIB/src/stm32f4xx_rtc.c ****   }
2733:./FWLIB/src/stm32f4xx_rtc.c ****   
2734:./FWLIB/src/stm32f4xx_rtc.c ****   return  ((uint8_t)(bcdhigh << 4) | Value);
  53              		.loc 1 2734 0
  54 0010 1B01     		lsls	r3, r3, #4
  55              	.LVL6:
  56 0012 DBB2     		uxtb	r3, r3
2735:./FWLIB/src/stm32f4xx_rtc.c **** }
  57              		.loc 1 2735 0
  58 0014 1843     		orrs	r0, r0, r3
ARM GAS  /tmp/ccv4OuYc.s 			page 50


  59              	.LVL7:
  60 0016 7047     		bx	lr
  61              		.cfi_endproc
  62              	.LFE167:
  64              		.section	.text.RTC_Bcd2ToByte,"ax",%progbits
  65              		.align	1
  66              		.syntax unified
  67              		.thumb
  68              		.thumb_func
  69              		.fpu fpv4-sp-d16
  71              	RTC_Bcd2ToByte:
  72              	.LFB168:
2736:./FWLIB/src/stm32f4xx_rtc.c **** 
2737:./FWLIB/src/stm32f4xx_rtc.c **** /**
2738:./FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Convert from 2 digit BCD to Binary.
2739:./FWLIB/src/stm32f4xx_rtc.c ****   * @param  Value: BCD value to be converted.
2740:./FWLIB/src/stm32f4xx_rtc.c ****   * @retval Converted word
2741:./FWLIB/src/stm32f4xx_rtc.c ****   */
2742:./FWLIB/src/stm32f4xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value)
2743:./FWLIB/src/stm32f4xx_rtc.c **** {
  73              		.loc 1 2743 0
  74              		.cfi_startproc
  75              		@ args = 0, pretend = 0, frame = 0
  76              		@ frame_needed = 0, uses_anonymous_args = 0
  77              		@ link register save eliminated.
  78              	.LVL8:
2744:./FWLIB/src/stm32f4xx_rtc.c ****   uint8_t tmp = 0;
2745:./FWLIB/src/stm32f4xx_rtc.c ****   tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
  79              		.loc 1 2745 0
  80 0000 0309     		lsrs	r3, r0, #4
  81 0002 03EB8303 		add	r3, r3, r3, lsl #2
  82 0006 5A00     		lsls	r2, r3, #1
  83              	.LVL9:
2746:./FWLIB/src/stm32f4xx_rtc.c ****   return (tmp + (Value & (uint8_t)0x0F));
  84              		.loc 1 2746 0
  85 0008 00F00F00 		and	r0, r0, #15
  86              	.LVL10:
  87 000c 1044     		add	r0, r0, r2
2747:./FWLIB/src/stm32f4xx_rtc.c **** }
  88              		.loc 1 2747 0
  89 000e C0B2     		uxtb	r0, r0
  90 0010 7047     		bx	lr
  91              		.cfi_endproc
  92              	.LFE168:
  94              		.section	.text.RTC_StructInit,"ax",%progbits
  95              		.align	1
  96              		.global	RTC_StructInit
  97              		.syntax unified
  98              		.thumb
  99              		.thumb_func
 100              		.fpu fpv4-sp-d16
 102              	RTC_StructInit:
 103              	.LFB114:
 504:./FWLIB/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_HourFormat member */
 104              		.loc 1 504 0
 105              		.cfi_startproc
 106              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccv4OuYc.s 			page 51


 107              		@ frame_needed = 0, uses_anonymous_args = 0
 108              		@ link register save eliminated.
 109              	.LVL11:
 506:./FWLIB/src/stm32f4xx_rtc.c ****     
 110              		.loc 1 506 0
 111 0000 0023     		movs	r3, #0
 112 0002 0360     		str	r3, [r0]
 509:./FWLIB/src/stm32f4xx_rtc.c **** 
 113              		.loc 1 509 0
 114 0004 7F23     		movs	r3, #127
 115 0006 4360     		str	r3, [r0, #4]
 512:./FWLIB/src/stm32f4xx_rtc.c **** }
 116              		.loc 1 512 0
 117 0008 FF23     		movs	r3, #255
 118 000a 8360     		str	r3, [r0, #8]
 513:./FWLIB/src/stm32f4xx_rtc.c **** 
 119              		.loc 1 513 0
 120 000c 7047     		bx	lr
 121              		.cfi_endproc
 122              	.LFE114:
 124              		.section	.text.RTC_WriteProtectionCmd,"ax",%progbits
 125              		.align	1
 126              		.global	RTC_WriteProtectionCmd
 127              		.syntax unified
 128              		.thumb
 129              		.thumb_func
 130              		.fpu fpv4-sp-d16
 132              	RTC_WriteProtectionCmd:
 133              	.LFB115:
 526:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 134              		.loc 1 526 0
 135              		.cfi_startproc
 136              		@ args = 0, pretend = 0, frame = 0
 137              		@ frame_needed = 0, uses_anonymous_args = 0
 138              		@ link register save eliminated.
 139              	.LVL12:
 530:./FWLIB/src/stm32f4xx_rtc.c ****   {
 140              		.loc 1 530 0
 141 0000 28B9     		cbnz	r0, .L9
 538:./FWLIB/src/stm32f4xx_rtc.c ****     RTC->WPR = 0x53;    
 142              		.loc 1 538 0
 143 0002 054B     		ldr	r3, .L10
 144 0004 CA22     		movs	r2, #202
 145 0006 5A62     		str	r2, [r3, #36]
 539:./FWLIB/src/stm32f4xx_rtc.c ****   }
 146              		.loc 1 539 0
 147 0008 5322     		movs	r2, #83
 148 000a 5A62     		str	r2, [r3, #36]
 541:./FWLIB/src/stm32f4xx_rtc.c **** 
 149              		.loc 1 541 0
 150 000c 7047     		bx	lr
 151              	.L9:
 533:./FWLIB/src/stm32f4xx_rtc.c ****   }
 152              		.loc 1 533 0
 153 000e 024B     		ldr	r3, .L10
 154 0010 FF22     		movs	r2, #255
 155 0012 5A62     		str	r2, [r3, #36]
ARM GAS  /tmp/ccv4OuYc.s 			page 52


 156 0014 7047     		bx	lr
 157              	.L11:
 158 0016 00BF     		.align	2
 159              	.L10:
 160 0018 00280040 		.word	1073752064
 161              		.cfi_endproc
 162              	.LFE115:
 164              		.section	.text.RTC_EnterInitMode,"ax",%progbits
 165              		.align	1
 166              		.global	RTC_EnterInitMode
 167              		.syntax unified
 168              		.thumb
 169              		.thumb_func
 170              		.fpu fpv4-sp-d16
 172              	RTC_EnterInitMode:
 173              	.LFB116:
 553:./FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t initcounter = 0x00;
 174              		.loc 1 553 0
 175              		.cfi_startproc
 176              		@ args = 0, pretend = 0, frame = 8
 177              		@ frame_needed = 0, uses_anonymous_args = 0
 178              		@ link register save eliminated.
 179 0000 82B0     		sub	sp, sp, #8
 180              	.LCFI0:
 181              		.cfi_def_cfa_offset 8
 554:./FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 182              		.loc 1 554 0
 183 0002 0023     		movs	r3, #0
 184 0004 0193     		str	r3, [sp, #4]
 185              	.LVL13:
 559:./FWLIB/src/stm32f4xx_rtc.c ****   {
 186              		.loc 1 559 0
 187 0006 114B     		ldr	r3, .L20
 188 0008 DB68     		ldr	r3, [r3, #12]
 189 000a 13F0400F 		tst	r3, #64
 190 000e 19D1     		bne	.L16
 562:./FWLIB/src/stm32f4xx_rtc.c ****     
 191              		.loc 1 562 0
 192 0010 0E4B     		ldr	r3, .L20
 193 0012 4FF0FF32 		mov	r2, #-1
 194 0016 DA60     		str	r2, [r3, #12]
 195              	.LVL14:
 196              	.L15:
 567:./FWLIB/src/stm32f4xx_rtc.c ****       initcounter++;  
 197              		.loc 1 567 0 discriminator 2
 198 0018 0C4B     		ldr	r3, .L20
 199 001a DA68     		ldr	r2, [r3, #12]
 200 001c 02F04002 		and	r2, r2, #64
 201              	.LVL15:
 568:./FWLIB/src/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 202              		.loc 1 568 0 discriminator 2
 203 0020 019B     		ldr	r3, [sp, #4]
 204 0022 0133     		adds	r3, r3, #1
 205 0024 0193     		str	r3, [sp, #4]
 569:./FWLIB/src/stm32f4xx_rtc.c ****     
 206              		.loc 1 569 0 discriminator 2
 207 0026 019B     		ldr	r3, [sp, #4]
ARM GAS  /tmp/ccv4OuYc.s 			page 53


 208 0028 B3F5803F 		cmp	r3, #65536
 209 002c 01D0     		beq	.L14
 569:./FWLIB/src/stm32f4xx_rtc.c ****     
 210              		.loc 1 569 0 is_stmt 0 discriminator 1
 211 002e 002A     		cmp	r2, #0
 212 0030 F2D0     		beq	.L15
 213              	.L14:
 571:./FWLIB/src/stm32f4xx_rtc.c ****     {
 214              		.loc 1 571 0 is_stmt 1
 215 0032 064B     		ldr	r3, .L20
 216 0034 DB68     		ldr	r3, [r3, #12]
 217 0036 13F0400F 		tst	r3, #64
 218 003a 01D1     		bne	.L19
 577:./FWLIB/src/stm32f4xx_rtc.c ****     }        
 219              		.loc 1 577 0
 220 003c 0020     		movs	r0, #0
 221 003e 02E0     		b	.L13
 222              	.L19:
 573:./FWLIB/src/stm32f4xx_rtc.c ****     }
 223              		.loc 1 573 0
 224 0040 0120     		movs	r0, #1
 225 0042 00E0     		b	.L13
 226              	.LVL16:
 227              	.L16:
 582:./FWLIB/src/stm32f4xx_rtc.c ****   } 
 228              		.loc 1 582 0
 229 0044 0120     		movs	r0, #1
 230              	.LVL17:
 231              	.L13:
 586:./FWLIB/src/stm32f4xx_rtc.c **** 
 232              		.loc 1 586 0
 233 0046 02B0     		add	sp, sp, #8
 234              	.LCFI1:
 235              		.cfi_def_cfa_offset 0
 236              		@ sp needed
 237 0048 7047     		bx	lr
 238              	.L21:
 239 004a 00BF     		.align	2
 240              	.L20:
 241 004c 00280040 		.word	1073752064
 242              		.cfi_endproc
 243              	.LFE116:
 245              		.section	.text.RTC_ExitInitMode,"ax",%progbits
 246              		.align	1
 247              		.global	RTC_ExitInitMode
 248              		.syntax unified
 249              		.thumb
 250              		.thumb_func
 251              		.fpu fpv4-sp-d16
 253              	RTC_ExitInitMode:
 254              	.LFB117:
 598:./FWLIB/src/stm32f4xx_rtc.c ****   /* Exit Initialization mode */
 255              		.loc 1 598 0
 256              		.cfi_startproc
 257              		@ args = 0, pretend = 0, frame = 0
 258              		@ frame_needed = 0, uses_anonymous_args = 0
 259              		@ link register save eliminated.
ARM GAS  /tmp/ccv4OuYc.s 			page 54


 600:./FWLIB/src/stm32f4xx_rtc.c **** }
 260              		.loc 1 600 0
 261 0000 024A     		ldr	r2, .L23
 262 0002 D368     		ldr	r3, [r2, #12]
 263 0004 23F08003 		bic	r3, r3, #128
 264 0008 D360     		str	r3, [r2, #12]
 601:./FWLIB/src/stm32f4xx_rtc.c **** 
 265              		.loc 1 601 0
 266 000a 7047     		bx	lr
 267              	.L24:
 268              		.align	2
 269              	.L23:
 270 000c 00280040 		.word	1073752064
 271              		.cfi_endproc
 272              	.LFE117:
 274              		.section	.text.RTC_Init,"ax",%progbits
 275              		.align	1
 276              		.global	RTC_Init
 277              		.syntax unified
 278              		.thumb
 279              		.thumb_func
 280              		.fpu fpv4-sp-d16
 282              	RTC_Init:
 283              	.LFB113:
 458:./FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 284              		.loc 1 458 0
 285              		.cfi_startproc
 286              		@ args = 0, pretend = 0, frame = 0
 287              		@ frame_needed = 0, uses_anonymous_args = 0
 288              	.LVL18:
 289 0000 10B5     		push	{r4, lr}
 290              	.LCFI2:
 291              		.cfi_def_cfa_offset 8
 292              		.cfi_offset 4, -8
 293              		.cfi_offset 14, -4
 294 0002 0446     		mov	r4, r0
 295              	.LVL19:
 467:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 296              		.loc 1 467 0
 297 0004 104B     		ldr	r3, .L29
 298 0006 CA22     		movs	r2, #202
 299 0008 5A62     		str	r2, [r3, #36]
 468:./FWLIB/src/stm32f4xx_rtc.c **** 
 300              		.loc 1 468 0
 301 000a 5322     		movs	r2, #83
 302 000c 5A62     		str	r2, [r3, #36]
 471:./FWLIB/src/stm32f4xx_rtc.c ****   {
 303              		.loc 1 471 0
 304 000e FFF7FEFF 		bl	RTC_EnterInitMode
 305              	.LVL20:
 306 0012 0346     		mov	r3, r0
 307 0014 20B9     		cbnz	r0, .L28
 308              	.LVL21:
 309              	.L26:
 492:./FWLIB/src/stm32f4xx_rtc.c ****   
 310              		.loc 1 492 0
 311 0016 0C4A     		ldr	r2, .L29
ARM GAS  /tmp/ccv4OuYc.s 			page 55


 312 0018 FF21     		movs	r1, #255
 313 001a 5162     		str	r1, [r2, #36]
 495:./FWLIB/src/stm32f4xx_rtc.c **** 
 314              		.loc 1 495 0
 315 001c 1846     		mov	r0, r3
 316 001e 10BD     		pop	{r4, pc}
 317              	.LVL22:
 318              	.L28:
 478:./FWLIB/src/stm32f4xx_rtc.c ****     /* Set RTC_CR register */
 319              		.loc 1 478 0
 320 0020 094B     		ldr	r3, .L29
 321 0022 9A68     		ldr	r2, [r3, #8]
 322 0024 22F04002 		bic	r2, r2, #64
 323 0028 9A60     		str	r2, [r3, #8]
 480:./FWLIB/src/stm32f4xx_rtc.c ****   
 324              		.loc 1 480 0
 325 002a 9A68     		ldr	r2, [r3, #8]
 326 002c 2168     		ldr	r1, [r4]
 327 002e 0A43     		orrs	r2, r2, r1
 328 0030 9A60     		str	r2, [r3, #8]
 483:./FWLIB/src/stm32f4xx_rtc.c ****     RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 329              		.loc 1 483 0
 330 0032 A268     		ldr	r2, [r4, #8]
 331 0034 1A61     		str	r2, [r3, #16]
 484:./FWLIB/src/stm32f4xx_rtc.c **** 
 332              		.loc 1 484 0
 333 0036 1A69     		ldr	r2, [r3, #16]
 334 0038 6168     		ldr	r1, [r4, #4]
 335 003a 42EA0142 		orr	r2, r2, r1, lsl #16
 336 003e 1A61     		str	r2, [r3, #16]
 487:./FWLIB/src/stm32f4xx_rtc.c **** 
 337              		.loc 1 487 0
 338 0040 FFF7FEFF 		bl	RTC_ExitInitMode
 339              	.LVL23:
 489:./FWLIB/src/stm32f4xx_rtc.c ****   }
 340              		.loc 1 489 0
 341 0044 0123     		movs	r3, #1
 342 0046 E6E7     		b	.L26
 343              	.L30:
 344              		.align	2
 345              	.L29:
 346 0048 00280040 		.word	1073752064
 347              		.cfi_endproc
 348              	.LFE113:
 350              		.section	.text.RTC_WaitForSynchro,"ax",%progbits
 351              		.align	1
 352              		.global	RTC_WaitForSynchro
 353              		.syntax unified
 354              		.thumb
 355              		.thumb_func
 356              		.fpu fpv4-sp-d16
 358              	RTC_WaitForSynchro:
 359              	.LFB118:
 620:./FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t synchrocounter = 0;
 360              		.loc 1 620 0
 361              		.cfi_startproc
 362              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/ccv4OuYc.s 			page 56


 363              		@ frame_needed = 0, uses_anonymous_args = 0
 364              		@ link register save eliminated.
 365 0000 82B0     		sub	sp, sp, #8
 366              	.LCFI3:
 367              		.cfi_def_cfa_offset 8
 621:./FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 368              		.loc 1 621 0
 369 0002 0023     		movs	r3, #0
 370 0004 0193     		str	r3, [sp, #4]
 371              	.LVL24:
 626:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 372              		.loc 1 626 0
 373 0006 114B     		ldr	r3, .L38
 374 0008 CA22     		movs	r2, #202
 375 000a 5A62     		str	r2, [r3, #36]
 627:./FWLIB/src/stm32f4xx_rtc.c ****     
 376              		.loc 1 627 0
 377 000c 5322     		movs	r2, #83
 378 000e 5A62     		str	r2, [r3, #36]
 630:./FWLIB/src/stm32f4xx_rtc.c ****     
 379              		.loc 1 630 0
 380 0010 DA68     		ldr	r2, [r3, #12]
 381 0012 22F0A002 		bic	r2, r2, #160
 382 0016 DA60     		str	r2, [r3, #12]
 383              	.LVL25:
 384              	.L33:
 635:./FWLIB/src/stm32f4xx_rtc.c ****     synchrocounter++;  
 385              		.loc 1 635 0 discriminator 2
 386 0018 0C4B     		ldr	r3, .L38
 387 001a DA68     		ldr	r2, [r3, #12]
 388 001c 02F02002 		and	r2, r2, #32
 389              	.LVL26:
 636:./FWLIB/src/stm32f4xx_rtc.c ****   } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 390              		.loc 1 636 0 discriminator 2
 391 0020 019B     		ldr	r3, [sp, #4]
 392 0022 0133     		adds	r3, r3, #1
 393 0024 0193     		str	r3, [sp, #4]
 637:./FWLIB/src/stm32f4xx_rtc.c ****     
 394              		.loc 1 637 0 discriminator 2
 395 0026 019B     		ldr	r3, [sp, #4]
 396 0028 B3F5003F 		cmp	r3, #131072
 397 002c 01D0     		beq	.L32
 637:./FWLIB/src/stm32f4xx_rtc.c ****     
 398              		.loc 1 637 0 is_stmt 0 discriminator 1
 399 002e 002A     		cmp	r2, #0
 400 0030 F2D0     		beq	.L33
 401              	.L32:
 639:./FWLIB/src/stm32f4xx_rtc.c ****   {
 402              		.loc 1 639 0 is_stmt 1
 403 0032 064B     		ldr	r3, .L38
 404 0034 DB68     		ldr	r3, [r3, #12]
 405 0036 13F0200F 		tst	r3, #32
 406 003a 05D1     		bne	.L37
 645:./FWLIB/src/stm32f4xx_rtc.c ****   }        
 407              		.loc 1 645 0
 408 003c 0020     		movs	r0, #0
 409              	.L34:
ARM GAS  /tmp/ccv4OuYc.s 			page 57


 410              	.LVL27:
 649:./FWLIB/src/stm32f4xx_rtc.c ****     
 411              		.loc 1 649 0
 412 003e 034B     		ldr	r3, .L38
 413 0040 FF22     		movs	r2, #255
 414              	.LVL28:
 415 0042 5A62     		str	r2, [r3, #36]
 652:./FWLIB/src/stm32f4xx_rtc.c **** 
 416              		.loc 1 652 0
 417 0044 02B0     		add	sp, sp, #8
 418              	.LCFI4:
 419              		.cfi_remember_state
 420              		.cfi_def_cfa_offset 0
 421              		@ sp needed
 422 0046 7047     		bx	lr
 423              	.LVL29:
 424              	.L37:
 425              	.LCFI5:
 426              		.cfi_restore_state
 641:./FWLIB/src/stm32f4xx_rtc.c ****   }
 427              		.loc 1 641 0
 428 0048 0120     		movs	r0, #1
 429 004a F8E7     		b	.L34
 430              	.L39:
 431              		.align	2
 432              	.L38:
 433 004c 00280040 		.word	1073752064
 434              		.cfi_endproc
 435              	.LFE118:
 437              		.section	.text.RTC_DeInit,"ax",%progbits
 438              		.align	1
 439              		.global	RTC_DeInit
 440              		.syntax unified
 441              		.thumb
 442              		.thumb_func
 443              		.fpu fpv4-sp-d16
 445              	RTC_DeInit:
 446              	.LFB112:
 376:./FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 447              		.loc 1 376 0
 448              		.cfi_startproc
 449              		@ args = 0, pretend = 0, frame = 8
 450              		@ frame_needed = 0, uses_anonymous_args = 0
 451 0000 00B5     		push	{lr}
 452              	.LCFI6:
 453              		.cfi_def_cfa_offset 4
 454              		.cfi_offset 14, -4
 455 0002 83B0     		sub	sp, sp, #12
 456              	.LCFI7:
 457              		.cfi_def_cfa_offset 16
 377:./FWLIB/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
 458              		.loc 1 377 0
 459 0004 0023     		movs	r3, #0
 460 0006 0193     		str	r3, [sp, #4]
 461              	.LVL30:
 382:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 462              		.loc 1 382 0
ARM GAS  /tmp/ccv4OuYc.s 			page 58


 463 0008 224B     		ldr	r3, .L48
 464 000a CA22     		movs	r2, #202
 465 000c 5A62     		str	r2, [r3, #36]
 383:./FWLIB/src/stm32f4xx_rtc.c **** 
 466              		.loc 1 383 0
 467 000e 5322     		movs	r2, #83
 468 0010 5A62     		str	r2, [r3, #36]
 386:./FWLIB/src/stm32f4xx_rtc.c ****   {
 469              		.loc 1 386 0
 470 0012 FFF7FEFF 		bl	RTC_EnterInitMode
 471              	.LVL31:
 472 0016 0346     		mov	r3, r0
 473 0018 E0B1     		cbz	r0, .L41
 393:./FWLIB/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)0x00002101;
 474              		.loc 1 393 0
 475 001a 1E4B     		ldr	r3, .L48
 476 001c 0022     		movs	r2, #0
 477 001e 1A60     		str	r2, [r3]
 394:./FWLIB/src/stm32f4xx_rtc.c ****     /* Reset All CR bits except CR[2:0] */
 478              		.loc 1 394 0
 479 0020 42F20112 		movw	r2, #8449
 480 0024 5A60     		str	r2, [r3, #4]
 396:./FWLIB/src/stm32f4xx_rtc.c ****   
 481              		.loc 1 396 0
 482 0026 9A68     		ldr	r2, [r3, #8]
 483 0028 02F00702 		and	r2, r2, #7
 484 002c 9A60     		str	r2, [r3, #8]
 485              	.LVL32:
 486              	.L43:
 401:./FWLIB/src/stm32f4xx_rtc.c ****       wutcounter++;  
 487              		.loc 1 401 0 discriminator 2
 488 002e 194B     		ldr	r3, .L48
 489 0030 DA68     		ldr	r2, [r3, #12]
 490 0032 02F00402 		and	r2, r2, #4
 491              	.LVL33:
 402:./FWLIB/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 492              		.loc 1 402 0 discriminator 2
 493 0036 019B     		ldr	r3, [sp, #4]
 494 0038 0133     		adds	r3, r3, #1
 495 003a 0193     		str	r3, [sp, #4]
 403:./FWLIB/src/stm32f4xx_rtc.c ****     
 496              		.loc 1 403 0 discriminator 2
 497 003c 019B     		ldr	r3, [sp, #4]
 498 003e B3F5803F 		cmp	r3, #65536
 499 0042 01D0     		beq	.L42
 403:./FWLIB/src/stm32f4xx_rtc.c ****     
 500              		.loc 1 403 0 is_stmt 0 discriminator 1
 501 0044 002A     		cmp	r2, #0
 502 0046 F2D0     		beq	.L43
 503              	.L42:
 405:./FWLIB/src/stm32f4xx_rtc.c ****     {
 504              		.loc 1 405 0 is_stmt 1
 505 0048 124B     		ldr	r3, .L48
 506 004a DB68     		ldr	r3, [r3, #12]
 507 004c 13F0040F 		tst	r3, #4
 508 0050 07D1     		bne	.L47
 407:./FWLIB/src/stm32f4xx_rtc.c ****     }
ARM GAS  /tmp/ccv4OuYc.s 			page 59


 509              		.loc 1 407 0
 510 0052 0023     		movs	r3, #0
 511              	.LVL34:
 512              	.L41:
 441:./FWLIB/src/stm32f4xx_rtc.c ****   
 513              		.loc 1 441 0
 514 0054 0F4A     		ldr	r2, .L48
 515 0056 FF21     		movs	r1, #255
 516 0058 5162     		str	r1, [r2, #36]
 444:./FWLIB/src/stm32f4xx_rtc.c **** 
 517              		.loc 1 444 0
 518 005a 1846     		mov	r0, r3
 519 005c 03B0     		add	sp, sp, #12
 520              	.LCFI8:
 521              		.cfi_remember_state
 522              		.cfi_def_cfa_offset 4
 523              		@ sp needed
 524 005e 5DF804FB 		ldr	pc, [sp], #4
 525              	.LVL35:
 526              	.L47:
 527              	.LCFI9:
 528              		.cfi_restore_state
 412:./FWLIB/src/stm32f4xx_rtc.c ****       RTC->WUTR = (uint32_t)0x0000FFFF;
 529              		.loc 1 412 0
 530 0062 0C4B     		ldr	r3, .L48
 531 0064 9A68     		ldr	r2, [r3, #8]
 532              	.LVL36:
 533 0066 0022     		movs	r2, #0
 534 0068 9A60     		str	r2, [r3, #8]
 413:./FWLIB/src/stm32f4xx_rtc.c ****       RTC->PRER = (uint32_t)0x007F00FF;
 535              		.loc 1 413 0
 536 006a 4FF6FF71 		movw	r1, #65535
 537 006e 5961     		str	r1, [r3, #20]
 414:./FWLIB/src/stm32f4xx_rtc.c ****       RTC->CALIBR = (uint32_t)0x00000000;
 538              		.loc 1 414 0
 539 0070 0949     		ldr	r1, .L48+4
 540 0072 1961     		str	r1, [r3, #16]
 415:./FWLIB/src/stm32f4xx_rtc.c ****       RTC->ALRMAR = (uint32_t)0x00000000;        
 541              		.loc 1 415 0
 542 0074 9A61     		str	r2, [r3, #24]
 416:./FWLIB/src/stm32f4xx_rtc.c ****       RTC->ALRMBR = (uint32_t)0x00000000;
 543              		.loc 1 416 0
 544 0076 DA61     		str	r2, [r3, #28]
 417:./FWLIB/src/stm32f4xx_rtc.c ****       RTC->SHIFTR = (uint32_t)0x00000000;
 545              		.loc 1 417 0
 546 0078 1A62     		str	r2, [r3, #32]
 418:./FWLIB/src/stm32f4xx_rtc.c ****       RTC->CALR = (uint32_t)0x00000000;
 547              		.loc 1 418 0
 548 007a DA62     		str	r2, [r3, #44]
 419:./FWLIB/src/stm32f4xx_rtc.c ****       RTC->ALRMASSR = (uint32_t)0x00000000;
 549              		.loc 1 419 0
 550 007c DA63     		str	r2, [r3, #60]
 420:./FWLIB/src/stm32f4xx_rtc.c ****       RTC->ALRMBSSR = (uint32_t)0x00000000;
 551              		.loc 1 420 0
 552 007e 5A64     		str	r2, [r3, #68]
 421:./FWLIB/src/stm32f4xx_rtc.c ****       
 553              		.loc 1 421 0
ARM GAS  /tmp/ccv4OuYc.s 			page 60


 554 0080 9A64     		str	r2, [r3, #72]
 424:./FWLIB/src/stm32f4xx_rtc.c ****       
 555              		.loc 1 424 0
 556 0082 DA60     		str	r2, [r3, #12]
 427:./FWLIB/src/stm32f4xx_rtc.c ****   
 557              		.loc 1 427 0
 558 0084 1A64     		str	r2, [r3, #64]
 429:./FWLIB/src/stm32f4xx_rtc.c ****       {
 559              		.loc 1 429 0
 560 0086 FFF7FEFF 		bl	RTC_WaitForSynchro
 561              	.LVL37:
 562 008a 0346     		mov	r3, r0
 563 008c 0028     		cmp	r0, #0
 564 008e E1D0     		beq	.L41
 435:./FWLIB/src/stm32f4xx_rtc.c ****       }
 565              		.loc 1 435 0
 566 0090 0123     		movs	r3, #1
 567 0092 DFE7     		b	.L41
 568              	.L49:
 569              		.align	2
 570              	.L48:
 571 0094 00280040 		.word	1073752064
 572 0098 FF007F00 		.word	8323327
 573              		.cfi_endproc
 574              	.LFE112:
 576              		.section	.text.RTC_RefClockCmd,"ax",%progbits
 577              		.align	1
 578              		.global	RTC_RefClockCmd
 579              		.syntax unified
 580              		.thumb
 581              		.thumb_func
 582              		.fpu fpv4-sp-d16
 584              	RTC_RefClockCmd:
 585              	.LFB119:
 663:./FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 586              		.loc 1 663 0
 587              		.cfi_startproc
 588              		@ args = 0, pretend = 0, frame = 0
 589              		@ frame_needed = 0, uses_anonymous_args = 0
 590              	.LVL38:
 591 0000 10B5     		push	{r4, lr}
 592              	.LCFI10:
 593              		.cfi_def_cfa_offset 8
 594              		.cfi_offset 4, -8
 595              		.cfi_offset 14, -4
 596 0002 0446     		mov	r4, r0
 597              	.LVL39:
 670:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 598              		.loc 1 670 0
 599 0004 0E4B     		ldr	r3, .L55
 600 0006 CA22     		movs	r2, #202
 601 0008 5A62     		str	r2, [r3, #36]
 671:./FWLIB/src/stm32f4xx_rtc.c ****     
 602              		.loc 1 671 0
 603 000a 5322     		movs	r2, #83
 604 000c 5A62     		str	r2, [r3, #36]
 674:./FWLIB/src/stm32f4xx_rtc.c ****   {
ARM GAS  /tmp/ccv4OuYc.s 			page 61


 605              		.loc 1 674 0
 606 000e FFF7FEFF 		bl	RTC_EnterInitMode
 607              	.LVL40:
 608 0012 0346     		mov	r3, r0
 609 0014 40B1     		cbz	r0, .L51
 680:./FWLIB/src/stm32f4xx_rtc.c ****     {
 610              		.loc 1 680 0
 611 0016 64B1     		cbz	r4, .L52
 683:./FWLIB/src/stm32f4xx_rtc.c ****     }
 612              		.loc 1 683 0
 613 0018 094A     		ldr	r2, .L55
 614 001a 9368     		ldr	r3, [r2, #8]
 615 001c 43F01003 		orr	r3, r3, #16
 616 0020 9360     		str	r3, [r2, #8]
 617              	.L53:
 691:./FWLIB/src/stm32f4xx_rtc.c ****     
 618              		.loc 1 691 0
 619 0022 FFF7FEFF 		bl	RTC_ExitInitMode
 620              	.LVL41:
 693:./FWLIB/src/stm32f4xx_rtc.c ****   }
 621              		.loc 1 693 0
 622 0026 0123     		movs	r3, #1
 623              	.LVL42:
 624              	.L51:
 697:./FWLIB/src/stm32f4xx_rtc.c ****   
 625              		.loc 1 697 0
 626 0028 054A     		ldr	r2, .L55
 627 002a FF21     		movs	r1, #255
 628 002c 5162     		str	r1, [r2, #36]
 700:./FWLIB/src/stm32f4xx_rtc.c **** 
 629              		.loc 1 700 0
 630 002e 1846     		mov	r0, r3
 631 0030 10BD     		pop	{r4, pc}
 632              	.LVL43:
 633              	.L52:
 688:./FWLIB/src/stm32f4xx_rtc.c ****     }
 634              		.loc 1 688 0
 635 0032 034A     		ldr	r2, .L55
 636 0034 9368     		ldr	r3, [r2, #8]
 637 0036 23F01003 		bic	r3, r3, #16
 638 003a 9360     		str	r3, [r2, #8]
 639 003c F1E7     		b	.L53
 640              	.L56:
 641 003e 00BF     		.align	2
 642              	.L55:
 643 0040 00280040 		.word	1073752064
 644              		.cfi_endproc
 645              	.LFE119:
 647              		.section	.text.RTC_BypassShadowCmd,"ax",%progbits
 648              		.align	1
 649              		.global	RTC_BypassShadowCmd
 650              		.syntax unified
 651              		.thumb
 652              		.thumb_func
 653              		.fpu fpv4-sp-d16
 655              	RTC_BypassShadowCmd:
 656              	.LFB120:
ARM GAS  /tmp/ccv4OuYc.s 			page 62


 711:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 657              		.loc 1 711 0
 658              		.cfi_startproc
 659              		@ args = 0, pretend = 0, frame = 0
 660              		@ frame_needed = 0, uses_anonymous_args = 0
 661              		@ link register save eliminated.
 662              	.LVL44:
 716:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 663              		.loc 1 716 0
 664 0000 0A4B     		ldr	r3, .L61
 665 0002 CA22     		movs	r2, #202
 666 0004 5A62     		str	r2, [r3, #36]
 717:./FWLIB/src/stm32f4xx_rtc.c ****   
 667              		.loc 1 717 0
 668 0006 5322     		movs	r2, #83
 669 0008 5A62     		str	r2, [r3, #36]
 719:./FWLIB/src/stm32f4xx_rtc.c ****   {
 670              		.loc 1 719 0
 671 000a 40B9     		cbnz	r0, .L60
 727:./FWLIB/src/stm32f4xx_rtc.c ****   }
 672              		.loc 1 727 0
 673 000c 074A     		ldr	r2, .L61
 674 000e 9368     		ldr	r3, [r2, #8]
 675 0010 03F0DF03 		and	r3, r3, #223
 676 0014 9360     		str	r3, [r2, #8]
 677              	.L59:
 731:./FWLIB/src/stm32f4xx_rtc.c **** }
 678              		.loc 1 731 0
 679 0016 054B     		ldr	r3, .L61
 680 0018 FF22     		movs	r2, #255
 681 001a 5A62     		str	r2, [r3, #36]
 732:./FWLIB/src/stm32f4xx_rtc.c **** 
 682              		.loc 1 732 0
 683 001c 7047     		bx	lr
 684              	.L60:
 722:./FWLIB/src/stm32f4xx_rtc.c ****   }
 685              		.loc 1 722 0
 686 001e 1A46     		mov	r2, r3
 687 0020 9B68     		ldr	r3, [r3, #8]
 688 0022 43F02003 		orr	r3, r3, #32
 689 0026 9360     		str	r3, [r2, #8]
 690 0028 F5E7     		b	.L59
 691              	.L62:
 692 002a 00BF     		.align	2
 693              	.L61:
 694 002c 00280040 		.word	1073752064
 695              		.cfi_endproc
 696              	.LFE120:
 698              		.section	.text.RTC_SetTime,"ax",%progbits
 699              		.align	1
 700              		.global	RTC_SetTime
 701              		.syntax unified
 702              		.thumb
 703              		.thumb_func
 704              		.fpu fpv4-sp-d16
 706              	RTC_SetTime:
 707              	.LFB121:
ARM GAS  /tmp/ccv4OuYc.s 			page 63


 766:./FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 708              		.loc 1 766 0
 709              		.cfi_startproc
 710              		@ args = 0, pretend = 0, frame = 0
 711              		@ frame_needed = 0, uses_anonymous_args = 0
 712              	.LVL45:
 713 0000 38B5     		push	{r3, r4, r5, lr}
 714              	.LCFI11:
 715              		.cfi_def_cfa_offset 16
 716              		.cfi_offset 3, -16
 717              		.cfi_offset 4, -12
 718              		.cfi_offset 5, -8
 719              		.cfi_offset 14, -4
 720 0002 0D46     		mov	r5, r1
 721              	.LVL46:
 773:./FWLIB/src/stm32f4xx_rtc.c ****   {
 722              		.loc 1 773 0
 723 0004 0346     		mov	r3, r0
 724 0006 F8B9     		cbnz	r0, .L64
 775:./FWLIB/src/stm32f4xx_rtc.c ****     {
 725              		.loc 1 775 0
 726 0008 264A     		ldr	r2, .L74
 727 000a 9268     		ldr	r2, [r2, #8]
 728 000c 12F0400F 		tst	r2, #64
 729 0010 01D1     		bne	.L65
 782:./FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_TimeStruct->RTC_Hours));
 730              		.loc 1 782 0
 731 0012 0022     		movs	r2, #0
 732 0014 CA70     		strb	r2, [r1, #3]
 733              	.L65:
 806:./FWLIB/src/stm32f4xx_rtc.c ****   {
 734              		.loc 1 806 0
 735 0016 FBB1     		cbz	r3, .L66
 808:./FWLIB/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 736              		.loc 1 808 0
 737 0018 2C78     		ldrb	r4, [r5]	@ zero_extendqisi2
 809:./FWLIB/src/stm32f4xx_rtc.c ****              ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 738              		.loc 1 809 0
 739 001a 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 740              	.LVL47:
 741 001c 0002     		lsls	r0, r0, #8
 808:./FWLIB/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 742              		.loc 1 808 0
 743 001e 40EA0440 		orr	r0, r0, r4, lsl #16
 810:./FWLIB/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 744              		.loc 1 810 0
 745 0022 AC78     		ldrb	r4, [r5, #2]	@ zero_extendqisi2
 809:./FWLIB/src/stm32f4xx_rtc.c ****              ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 746              		.loc 1 809 0
 747 0024 2043     		orrs	r0, r0, r4
 811:./FWLIB/src/stm32f4xx_rtc.c ****   }  
 748              		.loc 1 811 0
 749 0026 EC78     		ldrb	r4, [r5, #3]	@ zero_extendqisi2
 808:./FWLIB/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 750              		.loc 1 808 0
 751 0028 40EA0444 		orr	r4, r0, r4, lsl #16
 752              	.LVL48:
ARM GAS  /tmp/ccv4OuYc.s 			page 64


 753              	.L67:
 822:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 754              		.loc 1 822 0
 755 002c 1D4B     		ldr	r3, .L74
 756 002e CA22     		movs	r2, #202
 757 0030 5A62     		str	r2, [r3, #36]
 823:./FWLIB/src/stm32f4xx_rtc.c **** 
 758              		.loc 1 823 0
 759 0032 5322     		movs	r2, #83
 760 0034 5A62     		str	r2, [r3, #36]
 826:./FWLIB/src/stm32f4xx_rtc.c ****   {
 761              		.loc 1 826 0
 762 0036 FFF7FEFF 		bl	RTC_EnterInitMode
 763              	.LVL49:
 764 003a 0346     		mov	r3, r0
 765 003c E8B9     		cbnz	r0, .L72
 766              	.LVL50:
 767              	.L68:
 856:./FWLIB/src/stm32f4xx_rtc.c ****     
 768              		.loc 1 856 0
 769 003e 194A     		ldr	r2, .L74
 770 0040 FF21     		movs	r1, #255
 771 0042 5162     		str	r1, [r2, #36]
 859:./FWLIB/src/stm32f4xx_rtc.c **** 
 772              		.loc 1 859 0
 773 0044 1846     		mov	r0, r3
 774 0046 38BD     		pop	{r3, r4, r5, pc}
 775              	.LVL51:
 776              	.L64:
 790:./FWLIB/src/stm32f4xx_rtc.c ****     {
 777              		.loc 1 790 0
 778 0048 164A     		ldr	r2, .L74
 779 004a 9268     		ldr	r2, [r2, #8]
 780 004c 12F0400F 		tst	r2, #64
 781 0050 E1D1     		bne	.L65
 798:./FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours)));
 782              		.loc 1 798 0
 783 0052 0022     		movs	r2, #0
 784 0054 CA70     		strb	r2, [r1, #3]
 785 0056 DEE7     		b	.L65
 786              	.L66:
 815:./FWLIB/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 787              		.loc 1 815 0
 788 0058 2878     		ldrb	r0, [r5]	@ zero_extendqisi2
 789              	.LVL52:
 790 005a FFF7FEFF 		bl	RTC_ByteToBcd2
 791              	.LVL53:
 792 005e 0404     		lsls	r4, r0, #16
 816:./FWLIB/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 793              		.loc 1 816 0
 794 0060 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 795 0062 FFF7FEFF 		bl	RTC_ByteToBcd2
 796              	.LVL54:
 815:./FWLIB/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 797              		.loc 1 815 0
 798 0066 44EA0024 		orr	r4, r4, r0, lsl #8
 817:./FWLIB/src/stm32f4xx_rtc.c ****                    (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
ARM GAS  /tmp/ccv4OuYc.s 			page 65


 799              		.loc 1 817 0
 800 006a A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2
 801 006c FFF7FEFF 		bl	RTC_ByteToBcd2
 802              	.LVL55:
 816:./FWLIB/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 803              		.loc 1 816 0
 804 0070 2043     		orrs	r0, r0, r4
 818:./FWLIB/src/stm32f4xx_rtc.c ****   }  
 805              		.loc 1 818 0
 806 0072 EC78     		ldrb	r4, [r5, #3]	@ zero_extendqisi2
 815:./FWLIB/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 807              		.loc 1 815 0
 808 0074 40EA0444 		orr	r4, r0, r4, lsl #16
 809              	.LVL56:
 810 0078 D8E7     		b	.L67
 811              	.L72:
 833:./FWLIB/src/stm32f4xx_rtc.c **** 
 812              		.loc 1 833 0
 813 007a 04F07F30 		and	r0, r4, #2139062143
 814 007e 20F0FE40 		bic	r0, r0, #2130706432
 815 0082 084C     		ldr	r4, .L74
 816              	.LVL57:
 817 0084 2060     		str	r0, [r4]
 836:./FWLIB/src/stm32f4xx_rtc.c **** 
 818              		.loc 1 836 0
 819 0086 FFF7FEFF 		bl	RTC_ExitInitMode
 820              	.LVL58:
 839:./FWLIB/src/stm32f4xx_rtc.c ****     {
 821              		.loc 1 839 0
 822 008a A368     		ldr	r3, [r4, #8]
 823 008c 13F0200F 		tst	r3, #32
 824 0090 01D0     		beq	.L73
 852:./FWLIB/src/stm32f4xx_rtc.c ****     }
 825              		.loc 1 852 0
 826 0092 0123     		movs	r3, #1
 827 0094 D3E7     		b	.L68
 828              	.L73:
 841:./FWLIB/src/stm32f4xx_rtc.c ****     {
 829              		.loc 1 841 0
 830 0096 FFF7FEFF 		bl	RTC_WaitForSynchro
 831              	.LVL59:
 832 009a 0346     		mov	r3, r0
 833 009c 0028     		cmp	r0, #0
 834 009e CED0     		beq	.L68
 847:./FWLIB/src/stm32f4xx_rtc.c ****     }
 835              		.loc 1 847 0
 836 00a0 0123     		movs	r3, #1
 837 00a2 CCE7     		b	.L68
 838              	.L75:
 839              		.align	2
 840              	.L74:
 841 00a4 00280040 		.word	1073752064
 842              		.cfi_endproc
 843              	.LFE121:
 845              		.section	.text.RTC_TimeStructInit,"ax",%progbits
 846              		.align	1
 847              		.global	RTC_TimeStructInit
ARM GAS  /tmp/ccv4OuYc.s 			page 66


 848              		.syntax unified
 849              		.thumb
 850              		.thumb_func
 851              		.fpu fpv4-sp-d16
 853              	RTC_TimeStructInit:
 854              	.LFB122:
 869:./FWLIB/src/stm32f4xx_rtc.c ****   /* Time = 00h:00min:00sec */
 855              		.loc 1 869 0
 856              		.cfi_startproc
 857              		@ args = 0, pretend = 0, frame = 0
 858              		@ frame_needed = 0, uses_anonymous_args = 0
 859              		@ link register save eliminated.
 860              	.LVL60:
 871:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = 0;
 861              		.loc 1 871 0
 862 0000 0023     		movs	r3, #0
 863 0002 C370     		strb	r3, [r0, #3]
 872:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = 0;
 864              		.loc 1 872 0
 865 0004 0370     		strb	r3, [r0]
 873:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = 0; 
 866              		.loc 1 873 0
 867 0006 4370     		strb	r3, [r0, #1]
 874:./FWLIB/src/stm32f4xx_rtc.c **** }
 868              		.loc 1 874 0
 869 0008 8370     		strb	r3, [r0, #2]
 875:./FWLIB/src/stm32f4xx_rtc.c **** 
 870              		.loc 1 875 0
 871 000a 7047     		bx	lr
 872              		.cfi_endproc
 873              	.LFE122:
 875              		.section	.text.RTC_GetTime,"ax",%progbits
 876              		.align	1
 877              		.global	RTC_GetTime
 878              		.syntax unified
 879              		.thumb
 880              		.thumb_func
 881              		.fpu fpv4-sp-d16
 883              	RTC_GetTime:
 884              	.LFB123:
 888:./FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 885              		.loc 1 888 0
 886              		.cfi_startproc
 887              		@ args = 0, pretend = 0, frame = 0
 888              		@ frame_needed = 0, uses_anonymous_args = 0
 889              	.LVL61:
 890 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 891              	.LCFI12:
 892              		.cfi_def_cfa_offset 24
 893              		.cfi_offset 3, -24
 894              		.cfi_offset 4, -20
 895              		.cfi_offset 5, -16
 896              		.cfi_offset 6, -12
 897              		.cfi_offset 7, -8
 898              		.cfi_offset 14, -4
 899              	.LVL62:
 895:./FWLIB/src/stm32f4xx_rtc.c ****   
ARM GAS  /tmp/ccv4OuYc.s 			page 67


 900              		.loc 1 895 0
 901 0002 114B     		ldr	r3, .L80
 902 0004 1B68     		ldr	r3, [r3]
 903 0006 03F07F33 		and	r3, r3, #2139062143
 904 000a 23F0FE43 		bic	r3, r3, #2130706432
 905              	.LVL63:
 898:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 906              		.loc 1 898 0
 907 000e 1A0C     		lsrs	r2, r3, #16
 908 0010 02F03F07 		and	r7, r2, #63
 909 0014 0F70     		strb	r7, [r1]
 899:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 910              		.loc 1 899 0
 911 0016 C3F30626 		ubfx	r6, r3, #8, #7
 912 001a 4E70     		strb	r6, [r1, #1]
 900:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 913              		.loc 1 900 0
 914 001c 03F07F04 		and	r4, r3, #127
 915 0020 8C70     		strb	r4, [r1, #2]
 901:./FWLIB/src/stm32f4xx_rtc.c **** 
 916              		.loc 1 901 0
 917 0022 02F04002 		and	r2, r2, #64
 918 0026 CA70     		strb	r2, [r1, #3]
 904:./FWLIB/src/stm32f4xx_rtc.c ****   {
 919              		.loc 1 904 0
 920 0028 60B9     		cbnz	r0, .L77
 921 002a 0D46     		mov	r5, r1
 907:./FWLIB/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 922              		.loc 1 907 0
 923 002c 3846     		mov	r0, r7
 924              	.LVL64:
 925 002e FFF7FEFF 		bl	RTC_Bcd2ToByte
 926              	.LVL65:
 927 0032 2870     		strb	r0, [r5]
 908:./FWLIB/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 928              		.loc 1 908 0
 929 0034 3046     		mov	r0, r6
 930 0036 FFF7FEFF 		bl	RTC_Bcd2ToByte
 931              	.LVL66:
 932 003a 6870     		strb	r0, [r5, #1]
 909:./FWLIB/src/stm32f4xx_rtc.c ****   }
 933              		.loc 1 909 0
 934 003c 2046     		mov	r0, r4
 935 003e FFF7FEFF 		bl	RTC_Bcd2ToByte
 936              	.LVL67:
 937 0042 A870     		strb	r0, [r5, #2]
 938              	.LVL68:
 939              	.L77:
 911:./FWLIB/src/stm32f4xx_rtc.c **** 
 940              		.loc 1 911 0
 941 0044 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 942              	.L81:
 943 0046 00BF     		.align	2
 944              	.L80:
 945 0048 00280040 		.word	1073752064
 946              		.cfi_endproc
 947              	.LFE123:
ARM GAS  /tmp/ccv4OuYc.s 			page 68


 949              		.section	.text.RTC_GetSubSecond,"ax",%progbits
 950              		.align	1
 951              		.global	RTC_GetSubSecond
 952              		.syntax unified
 953              		.thumb
 954              		.thumb_func
 955              		.fpu fpv4-sp-d16
 957              	RTC_GetSubSecond:
 958              	.LFB124:
 921:./FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 959              		.loc 1 921 0
 960              		.cfi_startproc
 961              		@ args = 0, pretend = 0, frame = 0
 962              		@ frame_needed = 0, uses_anonymous_args = 0
 963              		@ link register save eliminated.
 964              	.LVL69:
 925:./FWLIB/src/stm32f4xx_rtc.c ****   
 965              		.loc 1 925 0
 966 0000 014B     		ldr	r3, .L83
 967 0002 986A     		ldr	r0, [r3, #40]
 968              	.LVL70:
 928:./FWLIB/src/stm32f4xx_rtc.c ****   
 969              		.loc 1 928 0
 970 0004 5B68     		ldr	r3, [r3, #4]
 931:./FWLIB/src/stm32f4xx_rtc.c **** 
 971              		.loc 1 931 0
 972 0006 7047     		bx	lr
 973              	.L84:
 974              		.align	2
 975              	.L83:
 976 0008 00280040 		.word	1073752064
 977              		.cfi_endproc
 978              	.LFE124:
 980              		.section	.text.RTC_SetDate,"ax",%progbits
 981              		.align	1
 982              		.global	RTC_SetDate
 983              		.syntax unified
 984              		.thumb
 985              		.thumb_func
 986              		.fpu fpv4-sp-d16
 988              	RTC_SetDate:
 989              	.LFB125:
 946:./FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 990              		.loc 1 946 0
 991              		.cfi_startproc
 992              		@ args = 0, pretend = 0, frame = 0
 993              		@ frame_needed = 0, uses_anonymous_args = 0
 994              	.LVL71:
 995 0000 38B5     		push	{r3, r4, r5, lr}
 996              	.LCFI13:
 997              		.cfi_def_cfa_offset 16
 998              		.cfi_offset 3, -16
 999              		.cfi_offset 4, -12
 1000              		.cfi_offset 5, -8
 1001              		.cfi_offset 14, -4
 1002 0002 0D46     		mov	r5, r1
 1003              	.LVL72:
ARM GAS  /tmp/ccv4OuYc.s 			page 69


 953:./FWLIB/src/stm32f4xx_rtc.c ****   {
 1004              		.loc 1 953 0
 1005 0004 0246     		mov	r2, r0
 1006 0006 38B9     		cbnz	r0, .L86
 953:./FWLIB/src/stm32f4xx_rtc.c ****   {
 1007              		.loc 1 953 0 is_stmt 0 discriminator 1
 1008 0008 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2
 1009 000a 13F0100F 		tst	r3, #16
 1010 000e 03D0     		beq	.L86
 955:./FWLIB/src/stm32f4xx_rtc.c ****   }  
 1011              		.loc 1 955 0 is_stmt 1
 1012 0010 03F0EF03 		and	r3, r3, #239
 1013 0014 0A33     		adds	r3, r3, #10
 1014 0016 4B70     		strb	r3, [r1, #1]
 1015              	.L86:
 974:./FWLIB/src/stm32f4xx_rtc.c ****   {
 1016              		.loc 1 974 0
 1017 0018 BAB1     		cbz	r2, .L87
 976:./FWLIB/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1018              		.loc 1 976 0
 1019 001a EC78     		ldrb	r4, [r5, #3]	@ zero_extendqisi2
 977:./FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_Date) | \
 1020              		.loc 1 977 0
 1021 001c 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 1022              	.LVL73:
 1023 001e 0002     		lsls	r0, r0, #8
 976:./FWLIB/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1024              		.loc 1 976 0
 1025 0020 40EA0440 		orr	r0, r0, r4, lsl #16
 978:./FWLIB/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 1026              		.loc 1 978 0
 1027 0024 AC78     		ldrb	r4, [r5, #2]	@ zero_extendqisi2
 977:./FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_Date) | \
 1028              		.loc 1 977 0
 1029 0026 2043     		orrs	r0, r0, r4
 979:./FWLIB/src/stm32f4xx_rtc.c ****   }  
 1030              		.loc 1 979 0
 1031 0028 2C78     		ldrb	r4, [r5]	@ zero_extendqisi2
 976:./FWLIB/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1032              		.loc 1 976 0
 1033 002a 40EA4434 		orr	r4, r0, r4, lsl #13
 1034              	.LVL74:
 1035              	.L88:
 990:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1036              		.loc 1 990 0
 1037 002e 1A4B     		ldr	r3, .L95
 1038 0030 CA22     		movs	r2, #202
 1039 0032 5A62     		str	r2, [r3, #36]
 991:./FWLIB/src/stm32f4xx_rtc.c **** 
 1040              		.loc 1 991 0
 1041 0034 5322     		movs	r2, #83
 1042 0036 5A62     		str	r2, [r3, #36]
 994:./FWLIB/src/stm32f4xx_rtc.c ****   {
 1043              		.loc 1 994 0
 1044 0038 FFF7FEFF 		bl	RTC_EnterInitMode
 1045              	.LVL75:
 1046 003c 0346     		mov	r3, r0
ARM GAS  /tmp/ccv4OuYc.s 			page 70


 1047 003e A8B9     		cbnz	r0, .L93
 1048              	.LVL76:
 1049              	.L89:
1024:./FWLIB/src/stm32f4xx_rtc.c ****   
 1050              		.loc 1 1024 0
 1051 0040 154A     		ldr	r2, .L95
 1052 0042 FF21     		movs	r1, #255
 1053 0044 5162     		str	r1, [r2, #36]
1027:./FWLIB/src/stm32f4xx_rtc.c **** 
 1054              		.loc 1 1027 0
 1055 0046 1846     		mov	r0, r3
 1056 0048 38BD     		pop	{r3, r4, r5, pc}
 1057              	.LVL77:
 1058              	.L87:
 983:./FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1059              		.loc 1 983 0
 1060 004a E878     		ldrb	r0, [r5, #3]	@ zero_extendqisi2
 1061              	.LVL78:
 1062 004c FFF7FEFF 		bl	RTC_ByteToBcd2
 1063              	.LVL79:
 1064 0050 0404     		lsls	r4, r0, #16
 984:./FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 1065              		.loc 1 984 0
 1066 0052 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 1067 0054 FFF7FEFF 		bl	RTC_ByteToBcd2
 1068              	.LVL80:
 983:./FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1069              		.loc 1 983 0
 1070 0058 44EA0024 		orr	r4, r4, r0, lsl #8
 985:./FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 1071              		.loc 1 985 0
 1072 005c A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2
 1073 005e FFF7FEFF 		bl	RTC_ByteToBcd2
 1074              	.LVL81:
 984:./FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 1075              		.loc 1 984 0
 1076 0062 2043     		orrs	r0, r0, r4
 986:./FWLIB/src/stm32f4xx_rtc.c ****   }
 1077              		.loc 1 986 0
 1078 0064 2C78     		ldrb	r4, [r5]	@ zero_extendqisi2
 983:./FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1079              		.loc 1 983 0
 1080 0066 40EA4434 		orr	r4, r0, r4, lsl #13
 1081              	.LVL82:
 1082 006a E0E7     		b	.L88
 1083              	.L93:
1001:./FWLIB/src/stm32f4xx_rtc.c **** 
 1084              		.loc 1 1001 0
 1085 006c 24F07F40 		bic	r0, r4, #-16777216
 1086 0070 20F0C000 		bic	r0, r0, #192
 1087 0074 084C     		ldr	r4, .L95
 1088              	.LVL83:
 1089 0076 6060     		str	r0, [r4, #4]
1004:./FWLIB/src/stm32f4xx_rtc.c **** 
 1090              		.loc 1 1004 0
 1091 0078 FFF7FEFF 		bl	RTC_ExitInitMode
 1092              	.LVL84:
ARM GAS  /tmp/ccv4OuYc.s 			page 71


1007:./FWLIB/src/stm32f4xx_rtc.c ****     {
 1093              		.loc 1 1007 0
 1094 007c A368     		ldr	r3, [r4, #8]
 1095 007e 13F0200F 		tst	r3, #32
 1096 0082 01D0     		beq	.L94
1020:./FWLIB/src/stm32f4xx_rtc.c ****     }
 1097              		.loc 1 1020 0
 1098 0084 0123     		movs	r3, #1
 1099 0086 DBE7     		b	.L89
 1100              	.L94:
1009:./FWLIB/src/stm32f4xx_rtc.c ****     {
 1101              		.loc 1 1009 0
 1102 0088 FFF7FEFF 		bl	RTC_WaitForSynchro
 1103              	.LVL85:
 1104 008c 0346     		mov	r3, r0
 1105 008e 0028     		cmp	r0, #0
 1106 0090 D6D0     		beq	.L89
1015:./FWLIB/src/stm32f4xx_rtc.c ****     }
 1107              		.loc 1 1015 0
 1108 0092 0123     		movs	r3, #1
 1109 0094 D4E7     		b	.L89
 1110              	.L96:
 1111 0096 00BF     		.align	2
 1112              	.L95:
 1113 0098 00280040 		.word	1073752064
 1114              		.cfi_endproc
 1115              	.LFE125:
 1117              		.section	.text.RTC_DateStructInit,"ax",%progbits
 1118              		.align	1
 1119              		.global	RTC_DateStructInit
 1120              		.syntax unified
 1121              		.thumb
 1122              		.thumb_func
 1123              		.fpu fpv4-sp-d16
 1125              	RTC_DateStructInit:
 1126              	.LFB126:
1037:./FWLIB/src/stm32f4xx_rtc.c ****   /* Monday, January 01 xx00 */
 1127              		.loc 1 1037 0
 1128              		.cfi_startproc
 1129              		@ args = 0, pretend = 0, frame = 0
 1130              		@ frame_needed = 0, uses_anonymous_args = 0
 1131              		@ link register save eliminated.
 1132              	.LVL86:
1039:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = 1;
 1133              		.loc 1 1039 0
 1134 0000 0123     		movs	r3, #1
 1135 0002 0370     		strb	r3, [r0]
1040:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = RTC_Month_January;
 1136              		.loc 1 1040 0
 1137 0004 8370     		strb	r3, [r0, #2]
1041:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = 0;
 1138              		.loc 1 1041 0
 1139 0006 4370     		strb	r3, [r0, #1]
1042:./FWLIB/src/stm32f4xx_rtc.c **** }
 1140              		.loc 1 1042 0
 1141 0008 0023     		movs	r3, #0
 1142 000a C370     		strb	r3, [r0, #3]
ARM GAS  /tmp/ccv4OuYc.s 			page 72


1043:./FWLIB/src/stm32f4xx_rtc.c **** 
 1143              		.loc 1 1043 0
 1144 000c 7047     		bx	lr
 1145              		.cfi_endproc
 1146              	.LFE126:
 1148              		.section	.text.RTC_GetDate,"ax",%progbits
 1149              		.align	1
 1150              		.global	RTC_GetDate
 1151              		.syntax unified
 1152              		.thumb
 1153              		.thumb_func
 1154              		.fpu fpv4-sp-d16
 1156              	RTC_GetDate:
 1157              	.LFB127:
1056:./FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1158              		.loc 1 1056 0
 1159              		.cfi_startproc
 1160              		@ args = 0, pretend = 0, frame = 0
 1161              		@ frame_needed = 0, uses_anonymous_args = 0
 1162              	.LVL87:
 1163 0000 70B5     		push	{r4, r5, r6, lr}
 1164              	.LCFI14:
 1165              		.cfi_def_cfa_offset 16
 1166              		.cfi_offset 4, -16
 1167              		.cfi_offset 5, -12
 1168              		.cfi_offset 6, -8
 1169              		.cfi_offset 14, -4
 1170              	.LVL88:
1063:./FWLIB/src/stm32f4xx_rtc.c **** 
 1171              		.loc 1 1063 0
 1172 0002 104B     		ldr	r3, .L101
 1173 0004 5B68     		ldr	r3, [r3, #4]
 1174 0006 23F07F43 		bic	r3, r3, #-16777216
 1175 000a 23F0C003 		bic	r3, r3, #192
 1176              	.LVL89:
1066:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 1177              		.loc 1 1066 0
 1178 000e 1A0C     		lsrs	r2, r3, #16
 1179 0010 CA70     		strb	r2, [r1, #3]
1067:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 1180              		.loc 1 1067 0
 1181 0012 C3F30426 		ubfx	r6, r3, #8, #5
 1182 0016 4E70     		strb	r6, [r1, #1]
1068:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
 1183              		.loc 1 1068 0
 1184 0018 03F03F05 		and	r5, r3, #63
 1185 001c 8D70     		strb	r5, [r1, #2]
1069:./FWLIB/src/stm32f4xx_rtc.c **** 
 1186              		.loc 1 1069 0
 1187 001e C3F34233 		ubfx	r3, r3, #13, #3
 1188              	.LVL90:
 1189 0022 0B70     		strb	r3, [r1]
1072:./FWLIB/src/stm32f4xx_rtc.c ****   {
 1190              		.loc 1 1072 0
 1191 0024 60B9     		cbnz	r0, .L98
 1192 0026 0C46     		mov	r4, r1
1075:./FWLIB/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
ARM GAS  /tmp/ccv4OuYc.s 			page 73


 1193              		.loc 1 1075 0
 1194 0028 1046     		mov	r0, r2
 1195              	.LVL91:
 1196 002a FFF7FEFF 		bl	RTC_Bcd2ToByte
 1197              	.LVL92:
 1198 002e E070     		strb	r0, [r4, #3]
1076:./FWLIB/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 1199              		.loc 1 1076 0
 1200 0030 3046     		mov	r0, r6
 1201 0032 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1202              	.LVL93:
 1203 0036 6070     		strb	r0, [r4, #1]
1077:./FWLIB/src/stm32f4xx_rtc.c ****   }
 1204              		.loc 1 1077 0
 1205 0038 2846     		mov	r0, r5
 1206 003a FFF7FEFF 		bl	RTC_Bcd2ToByte
 1207              	.LVL94:
 1208 003e A070     		strb	r0, [r4, #2]
 1209              	.LVL95:
 1210              	.L98:
1079:./FWLIB/src/stm32f4xx_rtc.c **** 
 1211              		.loc 1 1079 0
 1212 0040 70BD     		pop	{r4, r5, r6, pc}
 1213              	.L102:
 1214 0042 00BF     		.align	2
 1215              	.L101:
 1216 0044 00280040 		.word	1073752064
 1217              		.cfi_endproc
 1218              	.LFE127:
 1220              		.section	.text.RTC_SetAlarm,"ax",%progbits
 1221              		.align	1
 1222              		.global	RTC_SetAlarm
 1223              		.syntax unified
 1224              		.thumb
 1225              		.thumb_func
 1226              		.fpu fpv4-sp-d16
 1228              	RTC_SetAlarm:
 1229              	.LFB128:
1116:./FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1230              		.loc 1 1116 0
 1231              		.cfi_startproc
 1232              		@ args = 0, pretend = 0, frame = 0
 1233              		@ frame_needed = 0, uses_anonymous_args = 0
 1234              	.LVL96:
 1235 0000 70B5     		push	{r4, r5, r6, lr}
 1236              	.LCFI15:
 1237              		.cfi_def_cfa_offset 16
 1238              		.cfi_offset 4, -16
 1239              		.cfi_offset 5, -12
 1240              		.cfi_offset 6, -8
 1241              		.cfi_offset 14, -4
 1242 0002 0D46     		mov	r5, r1
 1243 0004 1646     		mov	r6, r2
 1244              	.LVL97:
1125:./FWLIB/src/stm32f4xx_rtc.c ****   {
 1245              		.loc 1 1125 0
 1246 0006 0346     		mov	r3, r0
ARM GAS  /tmp/ccv4OuYc.s 			page 74


 1247 0008 30BB     		cbnz	r0, .L104
1127:./FWLIB/src/stm32f4xx_rtc.c ****     {
 1248              		.loc 1 1127 0
 1249 000a 254A     		ldr	r2, .L114
 1250              	.LVL98:
 1251 000c 9268     		ldr	r2, [r2, #8]
 1252 000e 12F0400F 		tst	r2, #64
 1253 0012 01D1     		bne	.L106
1134:./FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
 1254              		.loc 1 1134 0
 1255 0014 0022     		movs	r2, #0
 1256 0016 F270     		strb	r2, [r6, #3]
 1257              	.L106:
1179:./FWLIB/src/stm32f4xx_rtc.c ****   {
 1258              		.loc 1 1179 0
 1259 0018 33B3     		cbz	r3, .L108
1181:./FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1260              		.loc 1 1181 0
 1261 001a 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
1182:./FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 1262              		.loc 1 1182 0
 1263 001c 7078     		ldrb	r0, [r6, #1]	@ zero_extendqisi2
 1264              	.LVL99:
 1265 001e 0002     		lsls	r0, r0, #8
1181:./FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1266              		.loc 1 1181 0
 1267 0020 40EA0340 		orr	r0, r0, r3, lsl #16
1183:./FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1268              		.loc 1 1183 0
 1269 0024 B378     		ldrb	r3, [r6, #2]	@ zero_extendqisi2
1182:./FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 1270              		.loc 1 1182 0
 1271 0026 1843     		orrs	r0, r0, r3
1184:./FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1272              		.loc 1 1184 0
 1273 0028 F378     		ldrb	r3, [r6, #3]	@ zero_extendqisi2
1183:./FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1274              		.loc 1 1183 0
 1275 002a 40EA0340 		orr	r0, r0, r3, lsl #16
1185:./FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1276              		.loc 1 1185 0
 1277 002e 337B     		ldrb	r3, [r6, #12]	@ zero_extendqisi2
1184:./FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1278              		.loc 1 1184 0
 1279 0030 40EA0360 		orr	r0, r0, r3, lsl #24
1186:./FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 1280              		.loc 1 1186 0
 1281 0034 B368     		ldr	r3, [r6, #8]
1185:./FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1282              		.loc 1 1185 0
 1283 0036 1843     		orrs	r0, r0, r3
1187:./FWLIB/src/stm32f4xx_rtc.c ****   }  
 1284              		.loc 1 1187 0
 1285 0038 7368     		ldr	r3, [r6, #4]
1181:./FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1286              		.loc 1 1181 0
 1287 003a 1843     		orrs	r0, r0, r3
ARM GAS  /tmp/ccv4OuYc.s 			page 75


 1288              	.LVL100:
 1289              	.L109:
1201:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1290              		.loc 1 1201 0
 1291 003c 184B     		ldr	r3, .L114
 1292 003e CA22     		movs	r2, #202
 1293 0040 5A62     		str	r2, [r3, #36]
1202:./FWLIB/src/stm32f4xx_rtc.c **** 
 1294              		.loc 1 1202 0
 1295 0042 5322     		movs	r2, #83
 1296 0044 5A62     		str	r2, [r3, #36]
1205:./FWLIB/src/stm32f4xx_rtc.c ****   {
 1297              		.loc 1 1205 0
 1298 0046 B5F5807F 		cmp	r5, #256
 1299 004a 27D0     		beq	.L113
1211:./FWLIB/src/stm32f4xx_rtc.c ****   }
 1300              		.loc 1 1211 0
 1301 004c 144B     		ldr	r3, .L114
 1302 004e 1862     		str	r0, [r3, #32]
 1303              	.L111:
1215:./FWLIB/src/stm32f4xx_rtc.c **** }
 1304              		.loc 1 1215 0
 1305 0050 134B     		ldr	r3, .L114
 1306 0052 FF22     		movs	r2, #255
 1307 0054 5A62     		str	r2, [r3, #36]
1216:./FWLIB/src/stm32f4xx_rtc.c **** 
 1308              		.loc 1 1216 0
 1309 0056 70BD     		pop	{r4, r5, r6, pc}
 1310              	.LVL101:
 1311              	.L104:
1151:./FWLIB/src/stm32f4xx_rtc.c ****     {
 1312              		.loc 1 1151 0
 1313 0058 114A     		ldr	r2, .L114
 1314              	.LVL102:
 1315 005a 9268     		ldr	r2, [r2, #8]
 1316 005c 12F0400F 		tst	r2, #64
 1317 0060 DAD1     		bne	.L106
1159:./FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours)));
 1318              		.loc 1 1159 0
 1319 0062 0022     		movs	r2, #0
 1320 0064 F270     		strb	r2, [r6, #3]
 1321 0066 D7E7     		b	.L106
 1322              	.L108:
1191:./FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1323              		.loc 1 1191 0
 1324 0068 3078     		ldrb	r0, [r6]	@ zero_extendqisi2
 1325              	.LVL103:
 1326 006a FFF7FEFF 		bl	RTC_ByteToBcd2
 1327              	.LVL104:
 1328 006e 0404     		lsls	r4, r0, #16
1192:./FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 1329              		.loc 1 1192 0
 1330 0070 7078     		ldrb	r0, [r6, #1]	@ zero_extendqisi2
 1331 0072 FFF7FEFF 		bl	RTC_ByteToBcd2
 1332              	.LVL105:
1191:./FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1333              		.loc 1 1191 0
ARM GAS  /tmp/ccv4OuYc.s 			page 76


 1334 0076 44EA0024 		orr	r4, r4, r0, lsl #8
1193:./FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1335              		.loc 1 1193 0
 1336 007a B078     		ldrb	r0, [r6, #2]	@ zero_extendqisi2
 1337 007c FFF7FEFF 		bl	RTC_ByteToBcd2
 1338              	.LVL106:
1192:./FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 1339              		.loc 1 1192 0
 1340 0080 0443     		orrs	r4, r4, r0
1194:./FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1341              		.loc 1 1194 0
 1342 0082 F078     		ldrb	r0, [r6, #3]	@ zero_extendqisi2
1193:./FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1343              		.loc 1 1193 0
 1344 0084 44EA0044 		orr	r4, r4, r0, lsl #16
1195:./FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1345              		.loc 1 1195 0
 1346 0088 307B     		ldrb	r0, [r6, #12]	@ zero_extendqisi2
 1347 008a FFF7FEFF 		bl	RTC_ByteToBcd2
 1348              	.LVL107:
1194:./FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1349              		.loc 1 1194 0
 1350 008e 44EA0060 		orr	r0, r4, r0, lsl #24
1196:./FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 1351              		.loc 1 1196 0
 1352 0092 B468     		ldr	r4, [r6, #8]
1195:./FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1353              		.loc 1 1195 0
 1354 0094 2043     		orrs	r0, r0, r4
1197:./FWLIB/src/stm32f4xx_rtc.c ****   } 
 1355              		.loc 1 1197 0
 1356 0096 7368     		ldr	r3, [r6, #4]
1191:./FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1357              		.loc 1 1191 0
 1358 0098 1843     		orrs	r0, r0, r3
 1359              	.LVL108:
 1360 009a CFE7     		b	.L109
 1361              	.L113:
1207:./FWLIB/src/stm32f4xx_rtc.c ****   }
 1362              		.loc 1 1207 0
 1363 009c D861     		str	r0, [r3, #28]
 1364 009e D7E7     		b	.L111
 1365              	.L115:
 1366              		.align	2
 1367              	.L114:
 1368 00a0 00280040 		.word	1073752064
 1369              		.cfi_endproc
 1370              	.LFE128:
 1372              		.section	.text.RTC_AlarmStructInit,"ax",%progbits
 1373              		.align	1
 1374              		.global	RTC_AlarmStructInit
 1375              		.syntax unified
 1376              		.thumb
 1377              		.thumb_func
 1378              		.fpu fpv4-sp-d16
 1380              	RTC_AlarmStructInit:
 1381              	.LFB129:
ARM GAS  /tmp/ccv4OuYc.s 			page 77


1227:./FWLIB/src/stm32f4xx_rtc.c ****   /* Alarm Time Settings : Time = 00h:00mn:00sec */
 1382              		.loc 1 1227 0
 1383              		.cfi_startproc
 1384              		@ args = 0, pretend = 0, frame = 0
 1385              		@ frame_needed = 0, uses_anonymous_args = 0
 1386              		@ link register save eliminated.
 1387              	.LVL109:
1229:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
 1388              		.loc 1 1229 0
 1389 0000 0023     		movs	r3, #0
 1390 0002 C370     		strb	r3, [r0, #3]
1230:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
 1391              		.loc 1 1230 0
 1392 0004 0370     		strb	r3, [r0]
1231:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
 1393              		.loc 1 1231 0
 1394 0006 4370     		strb	r3, [r0, #1]
1232:./FWLIB/src/stm32f4xx_rtc.c **** 
 1395              		.loc 1 1232 0
 1396 0008 8370     		strb	r3, [r0, #2]
1235:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 1397              		.loc 1 1235 0
 1398 000a 8360     		str	r3, [r0, #8]
1236:./FWLIB/src/stm32f4xx_rtc.c **** 
 1399              		.loc 1 1236 0
 1400 000c 0122     		movs	r2, #1
 1401 000e 0273     		strb	r2, [r0, #12]
1239:./FWLIB/src/stm32f4xx_rtc.c **** }
 1402              		.loc 1 1239 0
 1403 0010 4360     		str	r3, [r0, #4]
1240:./FWLIB/src/stm32f4xx_rtc.c **** 
 1404              		.loc 1 1240 0
 1405 0012 7047     		bx	lr
 1406              		.cfi_endproc
 1407              	.LFE129:
 1409              		.section	.text.RTC_GetAlarm,"ax",%progbits
 1410              		.align	1
 1411              		.global	RTC_GetAlarm
 1412              		.syntax unified
 1413              		.thumb
 1414              		.thumb_func
 1415              		.fpu fpv4-sp-d16
 1417              	RTC_GetAlarm:
 1418              	.LFB130:
1257:./FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1419              		.loc 1 1257 0
 1420              		.cfi_startproc
 1421              		@ args = 0, pretend = 0, frame = 0
 1422              		@ frame_needed = 0, uses_anonymous_args = 0
 1423              	.LVL110:
 1424 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1425              	.LCFI16:
 1426              		.cfi_def_cfa_offset 24
 1427              		.cfi_offset 3, -24
 1428              		.cfi_offset 4, -20
 1429              		.cfi_offset 5, -16
 1430              		.cfi_offset 6, -12
ARM GAS  /tmp/ccv4OuYc.s 			page 78


 1431              		.cfi_offset 7, -8
 1432              		.cfi_offset 14, -4
 1433              	.LVL111:
1265:./FWLIB/src/stm32f4xx_rtc.c ****   {
 1434              		.loc 1 1265 0
 1435 0002 B1F5807F 		cmp	r1, #256
 1436 0006 2CD0     		beq	.L122
1271:./FWLIB/src/stm32f4xx_rtc.c ****   }
 1437              		.loc 1 1271 0
 1438 0008 174B     		ldr	r3, .L123
 1439 000a 1B6A     		ldr	r3, [r3, #32]
 1440              	.LVL112:
 1441              	.L119:
1275:./FWLIB/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_HU)) >> 16);
 1442              		.loc 1 1275 0
 1443 000c C3F30741 		ubfx	r1, r3, #16, #8
 1444              	.LVL113:
 1445 0010 01F03F0C 		and	ip, r1, #63
 1446 0014 82F800C0 		strb	ip, [r2]
1277:./FWLIB/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_MNU)) >> 8);
 1447              		.loc 1 1277 0
 1448 0018 C3F30626 		ubfx	r6, r3, #8, #7
 1449 001c 5670     		strb	r6, [r2, #1]
1279:./FWLIB/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_SU));
 1450              		.loc 1 1279 0
 1451 001e 03F07F05 		and	r5, r3, #127
 1452 0022 9570     		strb	r5, [r2, #2]
1281:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 
 1453              		.loc 1 1281 0
 1454 0024 01F04001 		and	r1, r1, #64
 1455 0028 D170     		strb	r1, [r2, #3]
1282:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 1456              		.loc 1 1282 0
 1457 002a C3F30567 		ubfx	r7, r3, #24, #6
 1458 002e 1773     		strb	r7, [r2, #12]
1283:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 1459              		.loc 1 1283 0
 1460 0030 03F08041 		and	r1, r3, #1073741824
 1461 0034 9160     		str	r1, [r2, #8]
1284:./FWLIB/src/stm32f4xx_rtc.c **** 
 1462              		.loc 1 1284 0
 1463 0036 03F08033 		and	r3, r3, #-2139062144
 1464              	.LVL114:
 1465 003a 5360     		str	r3, [r2, #4]
1286:./FWLIB/src/stm32f4xx_rtc.c ****   {
 1466              		.loc 1 1286 0
 1467 003c 80B9     		cbnz	r0, .L117
 1468 003e 1446     		mov	r4, r2
1288:./FWLIB/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Hours);
 1469              		.loc 1 1288 0
 1470 0040 6046     		mov	r0, ip
 1471              	.LVL115:
 1472 0042 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1473              	.LVL116:
 1474 0046 2070     		strb	r0, [r4]
1290:./FWLIB/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Minutes);
 1475              		.loc 1 1290 0
ARM GAS  /tmp/ccv4OuYc.s 			page 79


 1476 0048 3046     		mov	r0, r6
 1477 004a FFF7FEFF 		bl	RTC_Bcd2ToByte
 1478              	.LVL117:
 1479 004e 6070     		strb	r0, [r4, #1]
1292:./FWLIB/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Seconds);
 1480              		.loc 1 1292 0
 1481 0050 2846     		mov	r0, r5
 1482 0052 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1483              	.LVL118:
 1484 0056 A070     		strb	r0, [r4, #2]
1294:./FWLIB/src/stm32f4xx_rtc.c ****   }  
 1485              		.loc 1 1294 0
 1486 0058 3846     		mov	r0, r7
 1487 005a FFF7FEFF 		bl	RTC_Bcd2ToByte
 1488              	.LVL119:
 1489 005e 2073     		strb	r0, [r4, #12]
 1490              	.LVL120:
 1491              	.L117:
1296:./FWLIB/src/stm32f4xx_rtc.c **** 
 1492              		.loc 1 1296 0
 1493 0060 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1494              	.LVL121:
 1495              	.L122:
1267:./FWLIB/src/stm32f4xx_rtc.c ****   }
 1496              		.loc 1 1267 0
 1497 0062 014B     		ldr	r3, .L123
 1498 0064 DB69     		ldr	r3, [r3, #28]
 1499              	.LVL122:
 1500 0066 D1E7     		b	.L119
 1501              	.L124:
 1502              		.align	2
 1503              	.L123:
 1504 0068 00280040 		.word	1073752064
 1505              		.cfi_endproc
 1506              	.LFE130:
 1508              		.section	.text.RTC_AlarmCmd,"ax",%progbits
 1509              		.align	1
 1510              		.global	RTC_AlarmCmd
 1511              		.syntax unified
 1512              		.thumb
 1513              		.thumb_func
 1514              		.fpu fpv4-sp-d16
 1516              	RTC_AlarmCmd:
 1517              	.LFB131:
1311:./FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t alarmcounter = 0x00;
 1518              		.loc 1 1311 0
 1519              		.cfi_startproc
 1520              		@ args = 0, pretend = 0, frame = 8
 1521              		@ frame_needed = 0, uses_anonymous_args = 0
 1522              		@ link register save eliminated.
 1523              	.LVL123:
 1524 0000 82B0     		sub	sp, sp, #8
 1525              	.LCFI17:
 1526              		.cfi_def_cfa_offset 8
1312:./FWLIB/src/stm32f4xx_rtc.c ****   uint32_t alarmstatus = 0x00;
 1527              		.loc 1 1312 0
 1528 0002 0023     		movs	r3, #0
ARM GAS  /tmp/ccv4OuYc.s 			page 80


 1529 0004 0193     		str	r3, [sp, #4]
 1530              	.LVL124:
1321:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1531              		.loc 1 1321 0
 1532 0006 154B     		ldr	r3, .L134
 1533 0008 CA22     		movs	r2, #202
 1534 000a 5A62     		str	r2, [r3, #36]
1322:./FWLIB/src/stm32f4xx_rtc.c **** 
 1535              		.loc 1 1322 0
 1536 000c 5322     		movs	r2, #83
 1537 000e 5A62     		str	r2, [r3, #36]
1325:./FWLIB/src/stm32f4xx_rtc.c ****   {
 1538              		.loc 1 1325 0
 1539 0010 B9B9     		cbnz	r1, .L132
1334:./FWLIB/src/stm32f4xx_rtc.c ****    
 1540              		.loc 1 1334 0
 1541 0012 124A     		ldr	r2, .L134
 1542 0014 9368     		ldr	r3, [r2, #8]
 1543 0016 23EA0003 		bic	r3, r3, r0
 1544 001a 9360     		str	r3, [r2, #8]
 1545              	.LVL125:
 1546              	.L129:
1339:./FWLIB/src/stm32f4xx_rtc.c ****       alarmcounter++;  
 1547              		.loc 1 1339 0 discriminator 2
 1548 001c 0F4B     		ldr	r3, .L134
 1549 001e DA68     		ldr	r2, [r3, #12]
 1550 0020 010A     		lsrs	r1, r0, #8
 1551 0022 0A40     		ands	r2, r2, r1
 1552              	.LVL126:
1340:./FWLIB/src/stm32f4xx_rtc.c ****     } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 1553              		.loc 1 1340 0 discriminator 2
 1554 0024 019B     		ldr	r3, [sp, #4]
 1555 0026 0133     		adds	r3, r3, #1
 1556 0028 0193     		str	r3, [sp, #4]
1341:./FWLIB/src/stm32f4xx_rtc.c ****     
 1557              		.loc 1 1341 0 discriminator 2
 1558 002a 019B     		ldr	r3, [sp, #4]
 1559 002c B3F5803F 		cmp	r3, #65536
 1560 0030 01D0     		beq	.L128
1341:./FWLIB/src/stm32f4xx_rtc.c ****     
 1561              		.loc 1 1341 0 is_stmt 0 discriminator 1
 1562 0032 002A     		cmp	r2, #0
 1563 0034 F2D0     		beq	.L129
 1564              	.L128:
1343:./FWLIB/src/stm32f4xx_rtc.c ****     {
 1565              		.loc 1 1343 0 is_stmt 1
 1566 0036 094B     		ldr	r3, .L134
 1567 0038 DB68     		ldr	r3, [r3, #12]
 1568 003a 1942     		tst	r1, r3
 1569 003c 0BD0     		beq	.L133
1349:./FWLIB/src/stm32f4xx_rtc.c ****     }        
 1570              		.loc 1 1349 0
 1571 003e 0120     		movs	r0, #1
 1572              	.LVL127:
 1573 0040 04E0     		b	.L127
 1574              	.LVL128:
 1575              	.L132:
ARM GAS  /tmp/ccv4OuYc.s 			page 81


1327:./FWLIB/src/stm32f4xx_rtc.c **** 
 1576              		.loc 1 1327 0
 1577 0042 1A46     		mov	r2, r3
 1578 0044 9B68     		ldr	r3, [r3, #8]
 1579 0046 1843     		orrs	r0, r0, r3
 1580              	.LVL129:
 1581 0048 9060     		str	r0, [r2, #8]
 1582              	.LVL130:
1329:./FWLIB/src/stm32f4xx_rtc.c ****   }
 1583              		.loc 1 1329 0
 1584 004a 0120     		movs	r0, #1
 1585              	.LVL131:
 1586              	.L127:
1354:./FWLIB/src/stm32f4xx_rtc.c ****   
 1587              		.loc 1 1354 0
 1588 004c 034B     		ldr	r3, .L134
 1589 004e FF22     		movs	r2, #255
 1590 0050 5A62     		str	r2, [r3, #36]
1357:./FWLIB/src/stm32f4xx_rtc.c **** 
 1591              		.loc 1 1357 0
 1592 0052 02B0     		add	sp, sp, #8
 1593              	.LCFI18:
 1594              		.cfi_remember_state
 1595              		.cfi_def_cfa_offset 0
 1596              		@ sp needed
 1597 0054 7047     		bx	lr
 1598              	.LVL132:
 1599              	.L133:
 1600              	.LCFI19:
 1601              		.cfi_restore_state
1345:./FWLIB/src/stm32f4xx_rtc.c ****     } 
 1602              		.loc 1 1345 0
 1603 0056 0020     		movs	r0, #0
 1604              	.LVL133:
 1605 0058 F8E7     		b	.L127
 1606              	.L135:
 1607 005a 00BF     		.align	2
 1608              	.L134:
 1609 005c 00280040 		.word	1073752064
 1610              		.cfi_endproc
 1611              	.LFE131:
 1613              		.section	.text.RTC_AlarmSubSecondConfig,"ax",%progbits
 1614              		.align	1
 1615              		.global	RTC_AlarmSubSecondConfig
 1616              		.syntax unified
 1617              		.thumb
 1618              		.thumb_func
 1619              		.fpu fpv4-sp-d16
 1621              	RTC_AlarmSubSecondConfig:
 1622              	.LFB132:
1405:./FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1623              		.loc 1 1405 0
 1624              		.cfi_startproc
 1625              		@ args = 0, pretend = 0, frame = 0
 1626              		@ frame_needed = 0, uses_anonymous_args = 0
 1627              		@ link register save eliminated.
 1628              	.LVL134:
ARM GAS  /tmp/ccv4OuYc.s 			page 82


 1629 0000 10B4     		push	{r4}
 1630              	.LCFI20:
 1631              		.cfi_def_cfa_offset 4
 1632              		.cfi_offset 4, -4
 1633              	.LVL135:
1414:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1634              		.loc 1 1414 0
 1635 0002 094B     		ldr	r3, .L141
 1636 0004 CA24     		movs	r4, #202
 1637 0006 5C62     		str	r4, [r3, #36]
1415:./FWLIB/src/stm32f4xx_rtc.c ****   
 1638              		.loc 1 1415 0
 1639 0008 5324     		movs	r4, #83
 1640 000a 5C62     		str	r4, [r3, #36]
1418:./FWLIB/src/stm32f4xx_rtc.c ****   
 1641              		.loc 1 1418 0
 1642 000c 0A43     		orrs	r2, r2, r1
 1643              	.LVL136:
1420:./FWLIB/src/stm32f4xx_rtc.c ****   {
 1644              		.loc 1 1420 0
 1645 000e B0F5807F 		cmp	r0, #256
 1646 0012 07D0     		beq	.L140
1428:./FWLIB/src/stm32f4xx_rtc.c ****   }
 1647              		.loc 1 1428 0
 1648 0014 044B     		ldr	r3, .L141
 1649 0016 9A64     		str	r2, [r3, #72]
 1650              	.L138:
1432:./FWLIB/src/stm32f4xx_rtc.c **** 
 1651              		.loc 1 1432 0
 1652 0018 034B     		ldr	r3, .L141
 1653 001a FF22     		movs	r2, #255
 1654              	.LVL137:
 1655 001c 5A62     		str	r2, [r3, #36]
1434:./FWLIB/src/stm32f4xx_rtc.c **** 
 1656              		.loc 1 1434 0
 1657 001e 5DF8044B 		ldr	r4, [sp], #4
 1658              	.LCFI21:
 1659              		.cfi_remember_state
 1660              		.cfi_restore 4
 1661              		.cfi_def_cfa_offset 0
 1662 0022 7047     		bx	lr
 1663              	.LVL138:
 1664              	.L140:
 1665              	.LCFI22:
 1666              		.cfi_restore_state
1423:./FWLIB/src/stm32f4xx_rtc.c ****   }
 1667              		.loc 1 1423 0
 1668 0024 5A64     		str	r2, [r3, #68]
 1669 0026 F7E7     		b	.L138
 1670              	.L142:
 1671              		.align	2
 1672              	.L141:
 1673 0028 00280040 		.word	1073752064
 1674              		.cfi_endproc
 1675              	.LFE132:
 1677              		.section	.text.RTC_GetAlarmSubSecond,"ax",%progbits
 1678              		.align	1
ARM GAS  /tmp/ccv4OuYc.s 			page 83


 1679              		.global	RTC_GetAlarmSubSecond
 1680              		.syntax unified
 1681              		.thumb
 1682              		.thumb_func
 1683              		.fpu fpv4-sp-d16
 1685              	RTC_GetAlarmSubSecond:
 1686              	.LFB133:
1446:./FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1687              		.loc 1 1446 0
 1688              		.cfi_startproc
 1689              		@ args = 0, pretend = 0, frame = 0
 1690              		@ frame_needed = 0, uses_anonymous_args = 0
 1691              		@ link register save eliminated.
 1692              	.LVL139:
1450:./FWLIB/src/stm32f4xx_rtc.c ****   {
 1693              		.loc 1 1450 0
 1694 0000 B0F5807F 		cmp	r0, #256
 1695 0004 04D0     		beq	.L146
1456:./FWLIB/src/stm32f4xx_rtc.c ****   } 
 1696              		.loc 1 1456 0
 1697 0006 054B     		ldr	r3, .L147
 1698 0008 986C     		ldr	r0, [r3, #72]
 1699              	.LVL140:
 1700 000a C0F30E00 		ubfx	r0, r0, #0, #15
 1701              	.LVL141:
1460:./FWLIB/src/stm32f4xx_rtc.c **** 
 1702              		.loc 1 1460 0
 1703 000e 7047     		bx	lr
 1704              	.LVL142:
 1705              	.L146:
1452:./FWLIB/src/stm32f4xx_rtc.c ****   }
 1706              		.loc 1 1452 0
 1707 0010 024B     		ldr	r3, .L147
 1708 0012 586C     		ldr	r0, [r3, #68]
 1709              	.LVL143:
 1710 0014 C0F30E00 		ubfx	r0, r0, #0, #15
 1711              	.LVL144:
 1712 0018 7047     		bx	lr
 1713              	.L148:
 1714 001a 00BF     		.align	2
 1715              	.L147:
 1716 001c 00280040 		.word	1073752064
 1717              		.cfi_endproc
 1718              	.LFE133:
 1720              		.section	.text.RTC_WakeUpClockConfig,"ax",%progbits
 1721              		.align	1
 1722              		.global	RTC_WakeUpClockConfig
 1723              		.syntax unified
 1724              		.thumb
 1725              		.thumb_func
 1726              		.fpu fpv4-sp-d16
 1728              	RTC_WakeUpClockConfig:
 1729              	.LFB134:
1495:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 1730              		.loc 1 1495 0
 1731              		.cfi_startproc
 1732              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccv4OuYc.s 			page 84


 1733              		@ frame_needed = 0, uses_anonymous_args = 0
 1734              		@ link register save eliminated.
 1735              	.LVL145:
1500:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1736              		.loc 1 1500 0
 1737 0000 074B     		ldr	r3, .L150
 1738 0002 CA22     		movs	r2, #202
 1739 0004 5A62     		str	r2, [r3, #36]
1501:./FWLIB/src/stm32f4xx_rtc.c **** 
 1740              		.loc 1 1501 0
 1741 0006 5322     		movs	r2, #83
 1742 0008 5A62     		str	r2, [r3, #36]
1504:./FWLIB/src/stm32f4xx_rtc.c **** 
 1743              		.loc 1 1504 0
 1744 000a 9A68     		ldr	r2, [r3, #8]
 1745 000c 22F00702 		bic	r2, r2, #7
 1746 0010 9A60     		str	r2, [r3, #8]
1507:./FWLIB/src/stm32f4xx_rtc.c ****   
 1747              		.loc 1 1507 0
 1748 0012 9A68     		ldr	r2, [r3, #8]
 1749 0014 1043     		orrs	r0, r0, r2
 1750              	.LVL146:
 1751 0016 9860     		str	r0, [r3, #8]
1510:./FWLIB/src/stm32f4xx_rtc.c **** }
 1752              		.loc 1 1510 0
 1753 0018 FF22     		movs	r2, #255
 1754 001a 5A62     		str	r2, [r3, #36]
1511:./FWLIB/src/stm32f4xx_rtc.c **** 
 1755              		.loc 1 1511 0
 1756 001c 7047     		bx	lr
 1757              	.L151:
 1758 001e 00BF     		.align	2
 1759              	.L150:
 1760 0020 00280040 		.word	1073752064
 1761              		.cfi_endproc
 1762              	.LFE134:
 1764              		.section	.text.RTC_SetWakeUpCounter,"ax",%progbits
 1765              		.align	1
 1766              		.global	RTC_SetWakeUpCounter
 1767              		.syntax unified
 1768              		.thumb
 1769              		.thumb_func
 1770              		.fpu fpv4-sp-d16
 1772              	RTC_SetWakeUpCounter:
 1773              	.LFB135:
1522:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 1774              		.loc 1 1522 0
 1775              		.cfi_startproc
 1776              		@ args = 0, pretend = 0, frame = 0
 1777              		@ frame_needed = 0, uses_anonymous_args = 0
 1778              		@ link register save eliminated.
 1779              	.LVL147:
1527:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1780              		.loc 1 1527 0
 1781 0000 044B     		ldr	r3, .L153
 1782 0002 CA22     		movs	r2, #202
 1783 0004 5A62     		str	r2, [r3, #36]
ARM GAS  /tmp/ccv4OuYc.s 			page 85


1528:./FWLIB/src/stm32f4xx_rtc.c ****   
 1784              		.loc 1 1528 0
 1785 0006 5322     		movs	r2, #83
 1786 0008 5A62     		str	r2, [r3, #36]
1531:./FWLIB/src/stm32f4xx_rtc.c ****   
 1787              		.loc 1 1531 0
 1788 000a 5861     		str	r0, [r3, #20]
1534:./FWLIB/src/stm32f4xx_rtc.c **** }
 1789              		.loc 1 1534 0
 1790 000c FF22     		movs	r2, #255
 1791 000e 5A62     		str	r2, [r3, #36]
1535:./FWLIB/src/stm32f4xx_rtc.c **** 
 1792              		.loc 1 1535 0
 1793 0010 7047     		bx	lr
 1794              	.L154:
 1795 0012 00BF     		.align	2
 1796              	.L153:
 1797 0014 00280040 		.word	1073752064
 1798              		.cfi_endproc
 1799              	.LFE135:
 1801              		.section	.text.RTC_GetWakeUpCounter,"ax",%progbits
 1802              		.align	1
 1803              		.global	RTC_GetWakeUpCounter
 1804              		.syntax unified
 1805              		.thumb
 1806              		.thumb_func
 1807              		.fpu fpv4-sp-d16
 1809              	RTC_GetWakeUpCounter:
 1810              	.LFB136:
1543:./FWLIB/src/stm32f4xx_rtc.c ****   /* Get the counter value */
 1811              		.loc 1 1543 0
 1812              		.cfi_startproc
 1813              		@ args = 0, pretend = 0, frame = 0
 1814              		@ frame_needed = 0, uses_anonymous_args = 0
 1815              		@ link register save eliminated.
1545:./FWLIB/src/stm32f4xx_rtc.c **** }
 1816              		.loc 1 1545 0
 1817 0000 014B     		ldr	r3, .L156
 1818 0002 5869     		ldr	r0, [r3, #20]
1546:./FWLIB/src/stm32f4xx_rtc.c **** 
 1819              		.loc 1 1546 0
 1820 0004 80B2     		uxth	r0, r0
 1821 0006 7047     		bx	lr
 1822              	.L157:
 1823              		.align	2
 1824              	.L156:
 1825 0008 00280040 		.word	1073752064
 1826              		.cfi_endproc
 1827              	.LFE136:
 1829              		.section	.text.RTC_WakeUpCmd,"ax",%progbits
 1830              		.align	1
 1831              		.global	RTC_WakeUpCmd
 1832              		.syntax unified
 1833              		.thumb
 1834              		.thumb_func
 1835              		.fpu fpv4-sp-d16
 1837              	RTC_WakeUpCmd:
ARM GAS  /tmp/ccv4OuYc.s 			page 86


 1838              	.LFB137:
1555:./FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 1839              		.loc 1 1555 0
 1840              		.cfi_startproc
 1841              		@ args = 0, pretend = 0, frame = 8
 1842              		@ frame_needed = 0, uses_anonymous_args = 0
 1843              		@ link register save eliminated.
 1844              	.LVL148:
 1845 0000 82B0     		sub	sp, sp, #8
 1846              	.LCFI23:
 1847              		.cfi_def_cfa_offset 8
1556:./FWLIB/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
 1848              		.loc 1 1556 0
 1849 0002 0023     		movs	r3, #0
 1850 0004 0193     		str	r3, [sp, #4]
 1851              	.LVL149:
1564:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1852              		.loc 1 1564 0
 1853 0006 164B     		ldr	r3, .L167
 1854 0008 CA22     		movs	r2, #202
 1855 000a 5A62     		str	r2, [r3, #36]
1565:./FWLIB/src/stm32f4xx_rtc.c **** 
 1856              		.loc 1 1565 0
 1857 000c 5322     		movs	r2, #83
 1858 000e 5A62     		str	r2, [r3, #36]
1567:./FWLIB/src/stm32f4xx_rtc.c ****   {
 1859              		.loc 1 1567 0
 1860 0010 C0B9     		cbnz	r0, .L165
1576:./FWLIB/src/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
 1861              		.loc 1 1576 0
 1862 0012 134A     		ldr	r2, .L167
 1863 0014 9368     		ldr	r3, [r2, #8]
 1864 0016 23F48063 		bic	r3, r3, #1024
 1865 001a 9360     		str	r3, [r2, #8]
 1866              	.LVL150:
 1867              	.L162:
1580:./FWLIB/src/stm32f4xx_rtc.c ****       wutcounter++;  
 1868              		.loc 1 1580 0 discriminator 2
 1869 001c 104B     		ldr	r3, .L167
 1870 001e DA68     		ldr	r2, [r3, #12]
 1871 0020 02F00402 		and	r2, r2, #4
 1872              	.LVL151:
1581:./FWLIB/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 1873              		.loc 1 1581 0 discriminator 2
 1874 0024 019B     		ldr	r3, [sp, #4]
 1875 0026 0133     		adds	r3, r3, #1
 1876 0028 0193     		str	r3, [sp, #4]
1582:./FWLIB/src/stm32f4xx_rtc.c ****     
 1877              		.loc 1 1582 0 discriminator 2
 1878 002a 019B     		ldr	r3, [sp, #4]
 1879 002c B3F5803F 		cmp	r3, #65536
 1880 0030 01D0     		beq	.L161
1582:./FWLIB/src/stm32f4xx_rtc.c ****     
 1881              		.loc 1 1582 0 is_stmt 0 discriminator 1
 1882 0032 002A     		cmp	r2, #0
 1883 0034 F2D0     		beq	.L162
 1884              	.L161:
ARM GAS  /tmp/ccv4OuYc.s 			page 87


1584:./FWLIB/src/stm32f4xx_rtc.c ****     {
 1885              		.loc 1 1584 0 is_stmt 1
 1886 0036 0A4B     		ldr	r3, .L167
 1887 0038 DB68     		ldr	r3, [r3, #12]
 1888 003a 13F0040F 		tst	r3, #4
 1889 003e 0CD0     		beq	.L166
1590:./FWLIB/src/stm32f4xx_rtc.c ****     }    
 1890              		.loc 1 1590 0
 1891 0040 0120     		movs	r0, #1
 1892              	.LVL152:
 1893 0042 05E0     		b	.L160
 1894              	.LVL153:
 1895              	.L165:
1570:./FWLIB/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 1896              		.loc 1 1570 0
 1897 0044 1A46     		mov	r2, r3
 1898 0046 9B68     		ldr	r3, [r3, #8]
 1899 0048 43F48063 		orr	r3, r3, #1024
 1900 004c 9360     		str	r3, [r2, #8]
 1901              	.LVL154:
1571:./FWLIB/src/stm32f4xx_rtc.c ****   }
 1902              		.loc 1 1571 0
 1903 004e 0120     		movs	r0, #1
 1904              	.LVL155:
 1905              	.L160:
1595:./FWLIB/src/stm32f4xx_rtc.c ****   
 1906              		.loc 1 1595 0
 1907 0050 034B     		ldr	r3, .L167
 1908 0052 FF22     		movs	r2, #255
 1909 0054 5A62     		str	r2, [r3, #36]
1598:./FWLIB/src/stm32f4xx_rtc.c **** 
 1910              		.loc 1 1598 0
 1911 0056 02B0     		add	sp, sp, #8
 1912              	.LCFI24:
 1913              		.cfi_remember_state
 1914              		.cfi_def_cfa_offset 0
 1915              		@ sp needed
 1916 0058 7047     		bx	lr
 1917              	.LVL156:
 1918              	.L166:
 1919              	.LCFI25:
 1920              		.cfi_restore_state
1586:./FWLIB/src/stm32f4xx_rtc.c ****     }
 1921              		.loc 1 1586 0
 1922 005a 0020     		movs	r0, #0
 1923              	.LVL157:
 1924 005c F8E7     		b	.L160
 1925              	.L168:
 1926 005e 00BF     		.align	2
 1927              	.L167:
 1928 0060 00280040 		.word	1073752064
 1929              		.cfi_endproc
 1930              	.LFE137:
 1932              		.section	.text.RTC_DayLightSavingConfig,"ax",%progbits
 1933              		.align	1
 1934              		.global	RTC_DayLightSavingConfig
 1935              		.syntax unified
ARM GAS  /tmp/ccv4OuYc.s 			page 88


 1936              		.thumb
 1937              		.thumb_func
 1938              		.fpu fpv4-sp-d16
 1940              	RTC_DayLightSavingConfig:
 1941              	.LFB138:
1632:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 1942              		.loc 1 1632 0
 1943              		.cfi_startproc
 1944              		@ args = 0, pretend = 0, frame = 0
 1945              		@ frame_needed = 0, uses_anonymous_args = 0
 1946              		@ link register save eliminated.
 1947              	.LVL158:
1638:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1948              		.loc 1 1638 0
 1949 0000 074B     		ldr	r3, .L170
 1950 0002 CA22     		movs	r2, #202
 1951 0004 5A62     		str	r2, [r3, #36]
1639:./FWLIB/src/stm32f4xx_rtc.c **** 
 1952              		.loc 1 1639 0
 1953 0006 5322     		movs	r2, #83
 1954 0008 5A62     		str	r2, [r3, #36]
1642:./FWLIB/src/stm32f4xx_rtc.c **** 
 1955              		.loc 1 1642 0
 1956 000a 9A68     		ldr	r2, [r3, #8]
 1957 000c 22F48022 		bic	r2, r2, #262144
 1958 0010 9A60     		str	r2, [r3, #8]
1645:./FWLIB/src/stm32f4xx_rtc.c **** 
 1959              		.loc 1 1645 0
 1960 0012 9A68     		ldr	r2, [r3, #8]
 1961 0014 0143     		orrs	r1, r1, r0
 1962              	.LVL159:
 1963 0016 0A43     		orrs	r2, r2, r1
 1964 0018 9A60     		str	r2, [r3, #8]
1648:./FWLIB/src/stm32f4xx_rtc.c **** }
 1965              		.loc 1 1648 0
 1966 001a FF22     		movs	r2, #255
 1967 001c 5A62     		str	r2, [r3, #36]
1649:./FWLIB/src/stm32f4xx_rtc.c **** 
 1968              		.loc 1 1649 0
 1969 001e 7047     		bx	lr
 1970              	.L171:
 1971              		.align	2
 1972              	.L170:
 1973 0020 00280040 		.word	1073752064
 1974              		.cfi_endproc
 1975              	.LFE138:
 1977              		.section	.text.RTC_GetStoreOperation,"ax",%progbits
 1978              		.align	1
 1979              		.global	RTC_GetStoreOperation
 1980              		.syntax unified
 1981              		.thumb
 1982              		.thumb_func
 1983              		.fpu fpv4-sp-d16
 1985              	RTC_GetStoreOperation:
 1986              	.LFB139:
1659:./FWLIB/src/stm32f4xx_rtc.c ****   return (RTC->CR & RTC_CR_BCK);
 1987              		.loc 1 1659 0
ARM GAS  /tmp/ccv4OuYc.s 			page 89


 1988              		.cfi_startproc
 1989              		@ args = 0, pretend = 0, frame = 0
 1990              		@ frame_needed = 0, uses_anonymous_args = 0
 1991              		@ link register save eliminated.
1660:./FWLIB/src/stm32f4xx_rtc.c **** }
 1992              		.loc 1 1660 0
 1993 0000 024B     		ldr	r3, .L173
 1994 0002 9868     		ldr	r0, [r3, #8]
1661:./FWLIB/src/stm32f4xx_rtc.c **** 
 1995              		.loc 1 1661 0
 1996 0004 00F48020 		and	r0, r0, #262144
 1997 0008 7047     		bx	lr
 1998              	.L174:
 1999 000a 00BF     		.align	2
 2000              	.L173:
 2001 000c 00280040 		.word	1073752064
 2002              		.cfi_endproc
 2003              	.LFE139:
 2005              		.section	.text.RTC_OutputConfig,"ax",%progbits
 2006              		.align	1
 2007              		.global	RTC_OutputConfig
 2008              		.syntax unified
 2009              		.thumb
 2010              		.thumb_func
 2011              		.fpu fpv4-sp-d16
 2013              	RTC_OutputConfig:
 2014              	.LFB140:
1698:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2015              		.loc 1 1698 0
 2016              		.cfi_startproc
 2017              		@ args = 0, pretend = 0, frame = 0
 2018              		@ frame_needed = 0, uses_anonymous_args = 0
 2019              		@ link register save eliminated.
 2020              	.LVL160:
1704:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2021              		.loc 1 1704 0
 2022 0000 074B     		ldr	r3, .L176
 2023 0002 CA22     		movs	r2, #202
 2024 0004 5A62     		str	r2, [r3, #36]
1705:./FWLIB/src/stm32f4xx_rtc.c **** 
 2025              		.loc 1 1705 0
 2026 0006 5322     		movs	r2, #83
 2027 0008 5A62     		str	r2, [r3, #36]
1708:./FWLIB/src/stm32f4xx_rtc.c **** 
 2028              		.loc 1 1708 0
 2029 000a 9A68     		ldr	r2, [r3, #8]
 2030 000c 22F4E002 		bic	r2, r2, #7340032
 2031 0010 9A60     		str	r2, [r3, #8]
1711:./FWLIB/src/stm32f4xx_rtc.c **** 
 2032              		.loc 1 1711 0
 2033 0012 9A68     		ldr	r2, [r3, #8]
 2034 0014 0143     		orrs	r1, r1, r0
 2035              	.LVL161:
 2036 0016 0A43     		orrs	r2, r2, r1
 2037 0018 9A60     		str	r2, [r3, #8]
1714:./FWLIB/src/stm32f4xx_rtc.c **** }
 2038              		.loc 1 1714 0
ARM GAS  /tmp/ccv4OuYc.s 			page 90


 2039 001a FF22     		movs	r2, #255
 2040 001c 5A62     		str	r2, [r3, #36]
1715:./FWLIB/src/stm32f4xx_rtc.c **** 
 2041              		.loc 1 1715 0
 2042 001e 7047     		bx	lr
 2043              	.L177:
 2044              		.align	2
 2045              	.L176:
 2046 0020 00280040 		.word	1073752064
 2047              		.cfi_endproc
 2048              	.LFE140:
 2050              		.section	.text.RTC_CoarseCalibConfig,"ax",%progbits
 2051              		.align	1
 2052              		.global	RTC_CoarseCalibConfig
 2053              		.syntax unified
 2054              		.thumb
 2055              		.thumb_func
 2056              		.fpu fpv4-sp-d16
 2058              	RTC_CoarseCalibConfig:
 2059              	.LFB141:
1752:./FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2060              		.loc 1 1752 0
 2061              		.cfi_startproc
 2062              		@ args = 0, pretend = 0, frame = 0
 2063              		@ frame_needed = 0, uses_anonymous_args = 0
 2064              	.LVL162:
 2065 0000 38B5     		push	{r3, r4, r5, lr}
 2066              	.LCFI26:
 2067              		.cfi_def_cfa_offset 16
 2068              		.cfi_offset 3, -16
 2069              		.cfi_offset 4, -12
 2070              		.cfi_offset 5, -8
 2071              		.cfi_offset 14, -4
 2072 0002 0446     		mov	r4, r0
 2073 0004 0D46     		mov	r5, r1
 2074              	.LVL163:
1760:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2075              		.loc 1 1760 0
 2076 0006 0A4B     		ldr	r3, .L182
 2077 0008 CA22     		movs	r2, #202
 2078 000a 5A62     		str	r2, [r3, #36]
1761:./FWLIB/src/stm32f4xx_rtc.c **** 
 2079              		.loc 1 1761 0
 2080 000c 5322     		movs	r2, #83
 2081 000e 5A62     		str	r2, [r3, #36]
1764:./FWLIB/src/stm32f4xx_rtc.c ****   {
 2082              		.loc 1 1764 0
 2083 0010 FFF7FEFF 		bl	RTC_EnterInitMode
 2084              	.LVL164:
 2085 0014 0346     		mov	r3, r0
 2086 0016 20B9     		cbnz	r0, .L181
 2087              	.LVL165:
 2088              	.L179:
1779:./FWLIB/src/stm32f4xx_rtc.c ****   
 2089              		.loc 1 1779 0
 2090 0018 054A     		ldr	r2, .L182
 2091 001a FF21     		movs	r1, #255
ARM GAS  /tmp/ccv4OuYc.s 			page 91


 2092 001c 5162     		str	r1, [r2, #36]
1782:./FWLIB/src/stm32f4xx_rtc.c **** 
 2093              		.loc 1 1782 0
 2094 001e 1846     		mov	r0, r3
 2095 0020 38BD     		pop	{r3, r4, r5, pc}
 2096              	.LVL166:
 2097              	.L181:
1771:./FWLIB/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 2098              		.loc 1 1771 0
 2099 0022 2C43     		orrs	r4, r4, r5
 2100              	.LVL167:
 2101 0024 024B     		ldr	r3, .L182
 2102 0026 9C61     		str	r4, [r3, #24]
1773:./FWLIB/src/stm32f4xx_rtc.c ****     
 2103              		.loc 1 1773 0
 2104 0028 FFF7FEFF 		bl	RTC_ExitInitMode
 2105              	.LVL168:
1775:./FWLIB/src/stm32f4xx_rtc.c ****   } 
 2106              		.loc 1 1775 0
 2107 002c 0123     		movs	r3, #1
 2108 002e F3E7     		b	.L179
 2109              	.L183:
 2110              		.align	2
 2111              	.L182:
 2112 0030 00280040 		.word	1073752064
 2113              		.cfi_endproc
 2114              	.LFE141:
 2116              		.section	.text.RTC_CoarseCalibCmd,"ax",%progbits
 2117              		.align	1
 2118              		.global	RTC_CoarseCalibCmd
 2119              		.syntax unified
 2120              		.thumb
 2121              		.thumb_func
 2122              		.fpu fpv4-sp-d16
 2124              	RTC_CoarseCalibCmd:
 2125              	.LFB142:
1793:./FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2126              		.loc 1 1793 0
 2127              		.cfi_startproc
 2128              		@ args = 0, pretend = 0, frame = 0
 2129              		@ frame_needed = 0, uses_anonymous_args = 0
 2130              	.LVL169:
 2131 0000 10B5     		push	{r4, lr}
 2132              	.LCFI27:
 2133              		.cfi_def_cfa_offset 8
 2134              		.cfi_offset 4, -8
 2135              		.cfi_offset 14, -4
 2136 0002 0446     		mov	r4, r0
 2137              	.LVL170:
1800:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2138              		.loc 1 1800 0
 2139 0004 0E4B     		ldr	r3, .L189
 2140 0006 CA22     		movs	r2, #202
 2141 0008 5A62     		str	r2, [r3, #36]
1801:./FWLIB/src/stm32f4xx_rtc.c ****   
 2142              		.loc 1 1801 0
 2143 000a 5322     		movs	r2, #83
ARM GAS  /tmp/ccv4OuYc.s 			page 92


 2144 000c 5A62     		str	r2, [r3, #36]
1804:./FWLIB/src/stm32f4xx_rtc.c ****   {
 2145              		.loc 1 1804 0
 2146 000e FFF7FEFF 		bl	RTC_EnterInitMode
 2147              	.LVL171:
 2148 0012 0346     		mov	r3, r0
 2149 0014 40B1     		cbz	r0, .L185
1810:./FWLIB/src/stm32f4xx_rtc.c ****     {
 2150              		.loc 1 1810 0
 2151 0016 64B1     		cbz	r4, .L186
1813:./FWLIB/src/stm32f4xx_rtc.c ****     }
 2152              		.loc 1 1813 0
 2153 0018 094A     		ldr	r2, .L189
 2154 001a 9368     		ldr	r3, [r2, #8]
 2155 001c 43F08003 		orr	r3, r3, #128
 2156 0020 9360     		str	r3, [r2, #8]
 2157              	.L187:
1821:./FWLIB/src/stm32f4xx_rtc.c ****     
 2158              		.loc 1 1821 0
 2159 0022 FFF7FEFF 		bl	RTC_ExitInitMode
 2160              	.LVL172:
1823:./FWLIB/src/stm32f4xx_rtc.c ****   } 
 2161              		.loc 1 1823 0
 2162 0026 0123     		movs	r3, #1
 2163              	.LVL173:
 2164              	.L185:
1827:./FWLIB/src/stm32f4xx_rtc.c ****   
 2165              		.loc 1 1827 0
 2166 0028 054A     		ldr	r2, .L189
 2167 002a FF21     		movs	r1, #255
 2168 002c 5162     		str	r1, [r2, #36]
1830:./FWLIB/src/stm32f4xx_rtc.c **** 
 2169              		.loc 1 1830 0
 2170 002e 1846     		mov	r0, r3
 2171 0030 10BD     		pop	{r4, pc}
 2172              	.LVL174:
 2173              	.L186:
1818:./FWLIB/src/stm32f4xx_rtc.c ****     }
 2174              		.loc 1 1818 0
 2175 0032 034A     		ldr	r2, .L189
 2176 0034 9368     		ldr	r3, [r2, #8]
 2177 0036 23F08003 		bic	r3, r3, #128
 2178 003a 9360     		str	r3, [r2, #8]
 2179 003c F1E7     		b	.L187
 2180              	.L190:
 2181 003e 00BF     		.align	2
 2182              	.L189:
 2183 0040 00280040 		.word	1073752064
 2184              		.cfi_endproc
 2185              	.LFE142:
 2187              		.section	.text.RTC_CalibOutputCmd,"ax",%progbits
 2188              		.align	1
 2189              		.global	RTC_CalibOutputCmd
 2190              		.syntax unified
 2191              		.thumb
 2192              		.thumb_func
 2193              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccv4OuYc.s 			page 93


 2195              	RTC_CalibOutputCmd:
 2196              	.LFB143:
1839:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2197              		.loc 1 1839 0
 2198              		.cfi_startproc
 2199              		@ args = 0, pretend = 0, frame = 0
 2200              		@ frame_needed = 0, uses_anonymous_args = 0
 2201              		@ link register save eliminated.
 2202              	.LVL175:
1844:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2203              		.loc 1 1844 0
 2204 0000 0A4B     		ldr	r3, .L195
 2205 0002 CA22     		movs	r2, #202
 2206 0004 5A62     		str	r2, [r3, #36]
1845:./FWLIB/src/stm32f4xx_rtc.c ****   
 2207              		.loc 1 1845 0
 2208 0006 5322     		movs	r2, #83
 2209 0008 5A62     		str	r2, [r3, #36]
1847:./FWLIB/src/stm32f4xx_rtc.c ****   {
 2210              		.loc 1 1847 0
 2211 000a 40B9     		cbnz	r0, .L194
1855:./FWLIB/src/stm32f4xx_rtc.c ****   }
 2212              		.loc 1 1855 0
 2213 000c 074A     		ldr	r2, .L195
 2214 000e 9368     		ldr	r3, [r2, #8]
 2215 0010 23F40003 		bic	r3, r3, #8388608
 2216 0014 9360     		str	r3, [r2, #8]
 2217              	.L193:
1859:./FWLIB/src/stm32f4xx_rtc.c **** }
 2218              		.loc 1 1859 0
 2219 0016 054B     		ldr	r3, .L195
 2220 0018 FF22     		movs	r2, #255
 2221 001a 5A62     		str	r2, [r3, #36]
1860:./FWLIB/src/stm32f4xx_rtc.c **** 
 2222              		.loc 1 1860 0
 2223 001c 7047     		bx	lr
 2224              	.L194:
1850:./FWLIB/src/stm32f4xx_rtc.c ****   }
 2225              		.loc 1 1850 0
 2226 001e 1A46     		mov	r2, r3
 2227 0020 9B68     		ldr	r3, [r3, #8]
 2228 0022 43F40003 		orr	r3, r3, #8388608
 2229 0026 9360     		str	r3, [r2, #8]
 2230 0028 F5E7     		b	.L193
 2231              	.L196:
 2232 002a 00BF     		.align	2
 2233              	.L195:
 2234 002c 00280040 		.word	1073752064
 2235              		.cfi_endproc
 2236              	.LFE143:
 2238              		.section	.text.RTC_CalibOutputConfig,"ax",%progbits
 2239              		.align	1
 2240              		.global	RTC_CalibOutputConfig
 2241              		.syntax unified
 2242              		.thumb
 2243              		.thumb_func
 2244              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccv4OuYc.s 			page 94


 2246              	RTC_CalibOutputConfig:
 2247              	.LFB144:
1871:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2248              		.loc 1 1871 0
 2249              		.cfi_startproc
 2250              		@ args = 0, pretend = 0, frame = 0
 2251              		@ frame_needed = 0, uses_anonymous_args = 0
 2252              		@ link register save eliminated.
 2253              	.LVL176:
1876:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2254              		.loc 1 1876 0
 2255 0000 074B     		ldr	r3, .L198
 2256 0002 CA22     		movs	r2, #202
 2257 0004 5A62     		str	r2, [r3, #36]
1877:./FWLIB/src/stm32f4xx_rtc.c ****   
 2258              		.loc 1 1877 0
 2259 0006 5322     		movs	r2, #83
 2260 0008 5A62     		str	r2, [r3, #36]
1880:./FWLIB/src/stm32f4xx_rtc.c **** 
 2261              		.loc 1 1880 0
 2262 000a 9A68     		ldr	r2, [r3, #8]
 2263 000c 22F40022 		bic	r2, r2, #524288
 2264 0010 9A60     		str	r2, [r3, #8]
1883:./FWLIB/src/stm32f4xx_rtc.c **** 
 2265              		.loc 1 1883 0
 2266 0012 9A68     		ldr	r2, [r3, #8]
 2267 0014 1043     		orrs	r0, r0, r2
 2268              	.LVL177:
 2269 0016 9860     		str	r0, [r3, #8]
1886:./FWLIB/src/stm32f4xx_rtc.c **** }
 2270              		.loc 1 1886 0
 2271 0018 FF22     		movs	r2, #255
 2272 001a 5A62     		str	r2, [r3, #36]
1887:./FWLIB/src/stm32f4xx_rtc.c **** 
 2273              		.loc 1 1887 0
 2274 001c 7047     		bx	lr
 2275              	.L199:
 2276 001e 00BF     		.align	2
 2277              	.L198:
 2278 0020 00280040 		.word	1073752064
 2279              		.cfi_endproc
 2280              	.LFE144:
 2282              		.section	.text.RTC_SmoothCalibConfig,"ax",%progbits
 2283              		.align	1
 2284              		.global	RTC_SmoothCalibConfig
 2285              		.syntax unified
 2286              		.thumb
 2287              		.thumb_func
 2288              		.fpu fpv4-sp-d16
 2290              	RTC_SmoothCalibConfig:
 2291              	.LFB145:
1909:./FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2292              		.loc 1 1909 0
 2293              		.cfi_startproc
 2294              		@ args = 0, pretend = 0, frame = 0
 2295              		@ frame_needed = 0, uses_anonymous_args = 0
 2296              		@ link register save eliminated.
ARM GAS  /tmp/ccv4OuYc.s 			page 95


 2297              	.LVL178:
 2298 0000 10B4     		push	{r4}
 2299              	.LCFI28:
 2300              		.cfi_def_cfa_offset 4
 2301              		.cfi_offset 4, -4
 2302              	.LVL179:
1919:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2303              		.loc 1 1919 0
 2304 0002 134B     		ldr	r3, .L208
 2305 0004 CA24     		movs	r4, #202
 2306 0006 5C62     		str	r4, [r3, #36]
1920:./FWLIB/src/stm32f4xx_rtc.c ****   
 2307              		.loc 1 1920 0
 2308 0008 5324     		movs	r4, #83
 2309 000a 5C62     		str	r4, [r3, #36]
1923:./FWLIB/src/stm32f4xx_rtc.c ****   {
 2310              		.loc 1 1923 0
 2311 000c DB68     		ldr	r3, [r3, #12]
 2312 000e 13F4803F 		tst	r3, #65536
 2313 0012 0FD1     		bne	.L205
 2314              	.LVL180:
 2315              	.L202:
1933:./FWLIB/src/stm32f4xx_rtc.c ****   {
 2316              		.loc 1 1933 0
 2317 0014 0E4B     		ldr	r3, .L208
 2318 0016 DB68     		ldr	r3, [r3, #12]
 2319 0018 13F4803F 		tst	r3, #65536
 2320 001c 15D1     		bne	.L206
1936:./FWLIB/src/stm32f4xx_rtc.c **** 
 2321              		.loc 1 1936 0
 2322 001e 0843     		orrs	r0, r0, r1
 2323              	.LVL181:
 2324 0020 0243     		orrs	r2, r2, r0
 2325              	.LVL182:
 2326 0022 0B4B     		ldr	r3, .L208
 2327 0024 DA63     		str	r2, [r3, #60]
 2328              	.LVL183:
1938:./FWLIB/src/stm32f4xx_rtc.c ****   }
 2329              		.loc 1 1938 0
 2330 0026 0120     		movs	r0, #1
 2331              	.LVL184:
 2332              	.L204:
1946:./FWLIB/src/stm32f4xx_rtc.c ****   
 2333              		.loc 1 1946 0
 2334 0028 094B     		ldr	r3, .L208
 2335 002a FF22     		movs	r2, #255
 2336 002c 5A62     		str	r2, [r3, #36]
1949:./FWLIB/src/stm32f4xx_rtc.c **** 
 2337              		.loc 1 1949 0
 2338 002e 5DF8044B 		ldr	r4, [sp], #4
 2339              	.LCFI29:
 2340              		.cfi_remember_state
 2341              		.cfi_restore 4
 2342              		.cfi_def_cfa_offset 0
 2343 0032 7047     		bx	lr
 2344              	.LVL185:
 2345              	.L205:
ARM GAS  /tmp/ccv4OuYc.s 			page 96


 2346              	.LCFI30:
 2347              		.cfi_restore_state
1911:./FWLIB/src/stm32f4xx_rtc.c **** 
 2348              		.loc 1 1911 0
 2349 0034 0023     		movs	r3, #0
 2350              	.LVL186:
 2351              	.L201:
1926:./FWLIB/src/stm32f4xx_rtc.c ****     {
 2352              		.loc 1 1926 0
 2353 0036 064C     		ldr	r4, .L208
 2354 0038 E468     		ldr	r4, [r4, #12]
 2355 003a 14F4803F 		tst	r4, #65536
 2356 003e E9D0     		beq	.L202
1926:./FWLIB/src/stm32f4xx_rtc.c ****     {
 2357              		.loc 1 1926 0 is_stmt 0 discriminator 1
 2358 0040 B3F5003F 		cmp	r3, #131072
 2359 0044 E6D0     		beq	.L202
1928:./FWLIB/src/stm32f4xx_rtc.c ****     }
 2360              		.loc 1 1928 0 is_stmt 1
 2361 0046 0133     		adds	r3, r3, #1
 2362              	.LVL187:
 2363 0048 F5E7     		b	.L201
 2364              	.LVL188:
 2365              	.L206:
1942:./FWLIB/src/stm32f4xx_rtc.c ****   }
 2366              		.loc 1 1942 0
 2367 004a 0020     		movs	r0, #0
 2368              	.LVL189:
 2369 004c ECE7     		b	.L204
 2370              	.L209:
 2371 004e 00BF     		.align	2
 2372              	.L208:
 2373 0050 00280040 		.word	1073752064
 2374              		.cfi_endproc
 2375              	.LFE145:
 2377              		.section	.text.RTC_TimeStampCmd,"ax",%progbits
 2378              		.align	1
 2379              		.global	RTC_TimeStampCmd
 2380              		.syntax unified
 2381              		.thumb
 2382              		.thumb_func
 2383              		.fpu fpv4-sp-d16
 2385              	RTC_TimeStampCmd:
 2386              	.LFB146:
1983:./FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 2387              		.loc 1 1983 0
 2388              		.cfi_startproc
 2389              		@ args = 0, pretend = 0, frame = 0
 2390              		@ frame_needed = 0, uses_anonymous_args = 0
 2391              		@ link register save eliminated.
 2392              	.LVL190:
1991:./FWLIB/src/stm32f4xx_rtc.c **** 
 2393              		.loc 1 1991 0
 2394 0000 0A4B     		ldr	r3, .L214
 2395 0002 9B68     		ldr	r3, [r3, #8]
 2396 0004 23F40063 		bic	r3, r3, #2048
 2397 0008 23F00803 		bic	r3, r3, #8
ARM GAS  /tmp/ccv4OuYc.s 			page 97


 2398              	.LVL191:
1994:./FWLIB/src/stm32f4xx_rtc.c ****   {
 2399              		.loc 1 1994 0
 2400 000c 49B9     		cbnz	r1, .L213
2000:./FWLIB/src/stm32f4xx_rtc.c ****   }
 2401              		.loc 1 2000 0
 2402 000e 0343     		orrs	r3, r3, r0
 2403              	.LVL192:
 2404              	.L212:
2004:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2405              		.loc 1 2004 0
 2406 0010 064A     		ldr	r2, .L214
 2407 0012 CA21     		movs	r1, #202
 2408              	.LVL193:
 2409 0014 5162     		str	r1, [r2, #36]
2005:./FWLIB/src/stm32f4xx_rtc.c **** 
 2410              		.loc 1 2005 0
 2411 0016 5321     		movs	r1, #83
 2412 0018 5162     		str	r1, [r2, #36]
2008:./FWLIB/src/stm32f4xx_rtc.c **** 
 2413              		.loc 1 2008 0
 2414 001a 9360     		str	r3, [r2, #8]
2011:./FWLIB/src/stm32f4xx_rtc.c **** }
 2415              		.loc 1 2011 0
 2416 001c FF23     		movs	r3, #255
 2417              	.LVL194:
 2418 001e 5362     		str	r3, [r2, #36]
 2419              	.LVL195:
2012:./FWLIB/src/stm32f4xx_rtc.c **** 
 2420              		.loc 1 2012 0
 2421 0020 7047     		bx	lr
 2422              	.LVL196:
 2423              	.L213:
1996:./FWLIB/src/stm32f4xx_rtc.c ****   }
 2424              		.loc 1 1996 0
 2425 0022 0343     		orrs	r3, r3, r0
 2426              	.LVL197:
 2427 0024 43F40063 		orr	r3, r3, #2048
 2428              	.LVL198:
 2429 0028 F2E7     		b	.L212
 2430              	.L215:
 2431 002a 00BF     		.align	2
 2432              	.L214:
 2433 002c 00280040 		.word	1073752064
 2434              		.cfi_endproc
 2435              	.LFE146:
 2437              		.section	.text.RTC_GetTimeStamp,"ax",%progbits
 2438              		.align	1
 2439              		.global	RTC_GetTimeStamp
 2440              		.syntax unified
 2441              		.thumb
 2442              		.thumb_func
 2443              		.fpu fpv4-sp-d16
 2445              	RTC_GetTimeStamp:
 2446              	.LFB147:
2028:./FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmptime = 0, tmpdate = 0;
 2447              		.loc 1 2028 0
ARM GAS  /tmp/ccv4OuYc.s 			page 98


 2448              		.cfi_startproc
 2449              		@ args = 0, pretend = 0, frame = 0
 2450              		@ frame_needed = 0, uses_anonymous_args = 0
 2451              	.LVL199:
 2452 0000 70B5     		push	{r4, r5, r6, lr}
 2453              	.LCFI31:
 2454              		.cfi_def_cfa_offset 16
 2455              		.cfi_offset 4, -16
 2456              		.cfi_offset 5, -12
 2457              		.cfi_offset 6, -8
 2458              		.cfi_offset 14, -4
 2459              	.LVL200:
2035:./FWLIB/src/stm32f4xx_rtc.c ****   tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 2460              		.loc 1 2035 0
 2461 0002 1D4B     		ldr	r3, .L219
 2462 0004 1C6B     		ldr	r4, [r3, #48]
 2463 0006 04F07F34 		and	r4, r4, #2139062143
 2464 000a 24F0FE44 		bic	r4, r4, #2130706432
 2465              	.LVL201:
2036:./FWLIB/src/stm32f4xx_rtc.c **** 
 2466              		.loc 1 2036 0
 2467 000e 5B6B     		ldr	r3, [r3, #52]
 2468 0010 23F07F43 		bic	r3, r3, #-16777216
 2469 0014 23F0C003 		bic	r3, r3, #192
 2470              	.LVL202:
2039:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 2471              		.loc 1 2039 0
 2472 0018 250C     		lsrs	r5, r4, #16
 2473 001a 05F03F06 		and	r6, r5, #63
 2474 001e 0E70     		strb	r6, [r1]
2040:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 2475              		.loc 1 2040 0
 2476 0020 C4F30626 		ubfx	r6, r4, #8, #7
 2477 0024 4E70     		strb	r6, [r1, #1]
2041:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 2478              		.loc 1 2041 0
 2479 0026 8C70     		strb	r4, [r1, #2]
2042:./FWLIB/src/stm32f4xx_rtc.c **** 
 2480              		.loc 1 2042 0
 2481 0028 05F04005 		and	r5, r5, #64
 2482 002c CD70     		strb	r5, [r1, #3]
2045:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 2483              		.loc 1 2045 0
 2484 002e 0024     		movs	r4, #0
 2485              	.LVL203:
 2486 0030 D470     		strb	r4, [r2, #3]
2046:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 2487              		.loc 1 2046 0
 2488 0032 C3F30424 		ubfx	r4, r3, #8, #5
 2489 0036 5470     		strb	r4, [r2, #1]
2047:./FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 2490              		.loc 1 2047 0
 2491 0038 9370     		strb	r3, [r2, #2]
2048:./FWLIB/src/stm32f4xx_rtc.c **** 
 2492              		.loc 1 2048 0
 2493 003a C3F34233 		ubfx	r3, r3, #13, #3
 2494              	.LVL204:
ARM GAS  /tmp/ccv4OuYc.s 			page 99


 2495 003e 1370     		strb	r3, [r2]
2051:./FWLIB/src/stm32f4xx_rtc.c ****   {
 2496              		.loc 1 2051 0
 2497 0040 C8B9     		cbnz	r0, .L216
 2498 0042 1446     		mov	r4, r2
 2499 0044 0D46     		mov	r5, r1
2054:./FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 2500              		.loc 1 2054 0
 2501 0046 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
 2502              	.LVL205:
 2503 0048 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2504              	.LVL206:
 2505 004c 2870     		strb	r0, [r5]
2055:./FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 2506              		.loc 1 2055 0
 2507 004e 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 2508 0050 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2509              	.LVL207:
 2510 0054 6870     		strb	r0, [r5, #1]
2056:./FWLIB/src/stm32f4xx_rtc.c **** 
 2511              		.loc 1 2056 0
 2512 0056 A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2
 2513 0058 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2514              	.LVL208:
 2515 005c A870     		strb	r0, [r5, #2]
2059:./FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 2516              		.loc 1 2059 0
 2517 005e 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 2518 0060 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2519              	.LVL209:
 2520 0064 6070     		strb	r0, [r4, #1]
2060:./FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 2521              		.loc 1 2060 0
 2522 0066 A078     		ldrb	r0, [r4, #2]	@ zero_extendqisi2
 2523 0068 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2524              	.LVL210:
 2525 006c A070     		strb	r0, [r4, #2]
2061:./FWLIB/src/stm32f4xx_rtc.c ****   }
 2526              		.loc 1 2061 0
 2527 006e 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
 2528 0070 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2529              	.LVL211:
 2530 0074 2070     		strb	r0, [r4]
 2531              	.LVL212:
 2532              	.L216:
2063:./FWLIB/src/stm32f4xx_rtc.c **** 
 2533              		.loc 1 2063 0
 2534 0076 70BD     		pop	{r4, r5, r6, pc}
 2535              	.L220:
 2536              		.align	2
 2537              	.L219:
 2538 0078 00280040 		.word	1073752064
 2539              		.cfi_endproc
 2540              	.LFE147:
 2542              		.section	.text.RTC_GetTimeStampSubSecond,"ax",%progbits
 2543              		.align	1
 2544              		.global	RTC_GetTimeStampSubSecond
ARM GAS  /tmp/ccv4OuYc.s 			page 100


 2545              		.syntax unified
 2546              		.thumb
 2547              		.thumb_func
 2548              		.fpu fpv4-sp-d16
 2550              	RTC_GetTimeStampSubSecond:
 2551              	.LFB148:
2071:./FWLIB/src/stm32f4xx_rtc.c ****   /* Get timestamp sub seconds values from the correspondent registers */
 2552              		.loc 1 2071 0
 2553              		.cfi_startproc
 2554              		@ args = 0, pretend = 0, frame = 0
 2555              		@ frame_needed = 0, uses_anonymous_args = 0
 2556              		@ link register save eliminated.
2073:./FWLIB/src/stm32f4xx_rtc.c **** }
 2557              		.loc 1 2073 0
 2558 0000 014B     		ldr	r3, .L222
 2559 0002 986B     		ldr	r0, [r3, #56]
2074:./FWLIB/src/stm32f4xx_rtc.c **** 
 2560              		.loc 1 2074 0
 2561 0004 7047     		bx	lr
 2562              	.L223:
 2563 0006 00BF     		.align	2
 2564              	.L222:
 2565 0008 00280040 		.word	1073752064
 2566              		.cfi_endproc
 2567              	.LFE148:
 2569              		.section	.text.RTC_TamperTriggerConfig,"ax",%progbits
 2570              		.align	1
 2571              		.global	RTC_TamperTriggerConfig
 2572              		.syntax unified
 2573              		.thumb
 2574              		.thumb_func
 2575              		.fpu fpv4-sp-d16
 2577              	RTC_TamperTriggerConfig:
 2578              	.LFB149:
2106:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2579              		.loc 1 2106 0
 2580              		.cfi_startproc
 2581              		@ args = 0, pretend = 0, frame = 0
 2582              		@ frame_needed = 0, uses_anonymous_args = 0
 2583              		@ link register save eliminated.
 2584              	.LVL213:
2111:./FWLIB/src/stm32f4xx_rtc.c ****   {  
 2585              		.loc 1 2111 0
 2586 0000 29B1     		cbz	r1, .L227
2119:./FWLIB/src/stm32f4xx_rtc.c ****   }  
 2587              		.loc 1 2119 0
 2588 0002 064A     		ldr	r2, .L228
 2589 0004 136C     		ldr	r3, [r2, #64]
 2590 0006 43EA4000 		orr	r0, r3, r0, lsl #1
 2591              	.LVL214:
 2592 000a 1064     		str	r0, [r2, #64]
2121:./FWLIB/src/stm32f4xx_rtc.c **** 
 2593              		.loc 1 2121 0
 2594 000c 7047     		bx	lr
 2595              	.LVL215:
 2596              	.L227:
2114:./FWLIB/src/stm32f4xx_rtc.c ****   }
ARM GAS  /tmp/ccv4OuYc.s 			page 101


 2597              		.loc 1 2114 0
 2598 000e 034A     		ldr	r2, .L228
 2599 0010 136C     		ldr	r3, [r2, #64]
 2600 0012 23EA4000 		bic	r0, r3, r0, lsl #1
 2601              	.LVL216:
 2602 0016 1064     		str	r0, [r2, #64]
 2603 0018 7047     		bx	lr
 2604              	.L229:
 2605 001a 00BF     		.align	2
 2606              	.L228:
 2607 001c 00280040 		.word	1073752064
 2608              		.cfi_endproc
 2609              	.LFE149:
 2611              		.section	.text.RTC_TamperCmd,"ax",%progbits
 2612              		.align	1
 2613              		.global	RTC_TamperCmd
 2614              		.syntax unified
 2615              		.thumb
 2616              		.thumb_func
 2617              		.fpu fpv4-sp-d16
 2619              	RTC_TamperCmd:
 2620              	.LFB150:
2132:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2621              		.loc 1 2132 0
 2622              		.cfi_startproc
 2623              		@ args = 0, pretend = 0, frame = 0
 2624              		@ frame_needed = 0, uses_anonymous_args = 0
 2625              		@ link register save eliminated.
 2626              	.LVL217:
2137:./FWLIB/src/stm32f4xx_rtc.c ****   {
 2627              		.loc 1 2137 0
 2628 0000 29B9     		cbnz	r1, .L233
2145:./FWLIB/src/stm32f4xx_rtc.c ****   }  
 2629              		.loc 1 2145 0
 2630 0002 054A     		ldr	r2, .L234
 2631 0004 136C     		ldr	r3, [r2, #64]
 2632 0006 23EA0000 		bic	r0, r3, r0
 2633              	.LVL218:
 2634 000a 1064     		str	r0, [r2, #64]
2147:./FWLIB/src/stm32f4xx_rtc.c **** 
 2635              		.loc 1 2147 0
 2636 000c 7047     		bx	lr
 2637              	.LVL219:
 2638              	.L233:
2140:./FWLIB/src/stm32f4xx_rtc.c ****   }
 2639              		.loc 1 2140 0
 2640 000e 024A     		ldr	r2, .L234
 2641 0010 136C     		ldr	r3, [r2, #64]
 2642 0012 1843     		orrs	r0, r0, r3
 2643              	.LVL220:
 2644 0014 1064     		str	r0, [r2, #64]
 2645 0016 7047     		bx	lr
 2646              	.L235:
 2647              		.align	2
 2648              	.L234:
 2649 0018 00280040 		.word	1073752064
 2650              		.cfi_endproc
ARM GAS  /tmp/ccv4OuYc.s 			page 102


 2651              	.LFE150:
 2653              		.section	.text.RTC_TamperFilterConfig,"ax",%progbits
 2654              		.align	1
 2655              		.global	RTC_TamperFilterConfig
 2656              		.syntax unified
 2657              		.thumb
 2658              		.thumb_func
 2659              		.fpu fpv4-sp-d16
 2661              	RTC_TamperFilterConfig:
 2662              	.LFB151:
2163:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2663              		.loc 1 2163 0
 2664              		.cfi_startproc
 2665              		@ args = 0, pretend = 0, frame = 0
 2666              		@ frame_needed = 0, uses_anonymous_args = 0
 2667              		@ link register save eliminated.
 2668              	.LVL221:
2168:./FWLIB/src/stm32f4xx_rtc.c **** 
 2669              		.loc 1 2168 0
 2670 0000 044B     		ldr	r3, .L237
 2671 0002 1A6C     		ldr	r2, [r3, #64]
 2672 0004 22F4C052 		bic	r2, r2, #6144
 2673 0008 1A64     		str	r2, [r3, #64]
2171:./FWLIB/src/stm32f4xx_rtc.c **** }
 2674              		.loc 1 2171 0
 2675 000a 1A6C     		ldr	r2, [r3, #64]
 2676 000c 1043     		orrs	r0, r0, r2
 2677              	.LVL222:
 2678 000e 1864     		str	r0, [r3, #64]
2172:./FWLIB/src/stm32f4xx_rtc.c **** 
 2679              		.loc 1 2172 0
 2680 0010 7047     		bx	lr
 2681              	.L238:
 2682 0012 00BF     		.align	2
 2683              	.L237:
 2684 0014 00280040 		.word	1073752064
 2685              		.cfi_endproc
 2686              	.LFE151:
 2688              		.section	.text.RTC_TamperSamplingFreqConfig,"ax",%progbits
 2689              		.align	1
 2690              		.global	RTC_TamperSamplingFreqConfig
 2691              		.syntax unified
 2692              		.thumb
 2693              		.thumb_func
 2694              		.fpu fpv4-sp-d16
 2696              	RTC_TamperSamplingFreqConfig:
 2697              	.LFB152:
2197:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2698              		.loc 1 2197 0
 2699              		.cfi_startproc
 2700              		@ args = 0, pretend = 0, frame = 0
 2701              		@ frame_needed = 0, uses_anonymous_args = 0
 2702              		@ link register save eliminated.
 2703              	.LVL223:
2202:./FWLIB/src/stm32f4xx_rtc.c **** 
 2704              		.loc 1 2202 0
 2705 0000 044B     		ldr	r3, .L240
ARM GAS  /tmp/ccv4OuYc.s 			page 103


 2706 0002 1A6C     		ldr	r2, [r3, #64]
 2707 0004 22F4E062 		bic	r2, r2, #1792
 2708 0008 1A64     		str	r2, [r3, #64]
2205:./FWLIB/src/stm32f4xx_rtc.c **** }
 2709              		.loc 1 2205 0
 2710 000a 1A6C     		ldr	r2, [r3, #64]
 2711 000c 1043     		orrs	r0, r0, r2
 2712              	.LVL224:
 2713 000e 1864     		str	r0, [r3, #64]
2206:./FWLIB/src/stm32f4xx_rtc.c **** 
 2714              		.loc 1 2206 0
 2715 0010 7047     		bx	lr
 2716              	.L241:
 2717 0012 00BF     		.align	2
 2718              	.L240:
 2719 0014 00280040 		.word	1073752064
 2720              		.cfi_endproc
 2721              	.LFE152:
 2723              		.section	.text.RTC_TamperPinsPrechargeDuration,"ax",%progbits
 2724              		.align	1
 2725              		.global	RTC_TamperPinsPrechargeDuration
 2726              		.syntax unified
 2727              		.thumb
 2728              		.thumb_func
 2729              		.fpu fpv4-sp-d16
 2731              	RTC_TamperPinsPrechargeDuration:
 2732              	.LFB153:
2220:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2733              		.loc 1 2220 0
 2734              		.cfi_startproc
 2735              		@ args = 0, pretend = 0, frame = 0
 2736              		@ frame_needed = 0, uses_anonymous_args = 0
 2737              		@ link register save eliminated.
 2738              	.LVL225:
2225:./FWLIB/src/stm32f4xx_rtc.c **** 
 2739              		.loc 1 2225 0
 2740 0000 044B     		ldr	r3, .L243
 2741 0002 1A6C     		ldr	r2, [r3, #64]
 2742 0004 22F4C042 		bic	r2, r2, #24576
 2743 0008 1A64     		str	r2, [r3, #64]
2228:./FWLIB/src/stm32f4xx_rtc.c **** }
 2744              		.loc 1 2228 0
 2745 000a 1A6C     		ldr	r2, [r3, #64]
 2746 000c 1043     		orrs	r0, r0, r2
 2747              	.LVL226:
 2748 000e 1864     		str	r0, [r3, #64]
2229:./FWLIB/src/stm32f4xx_rtc.c **** 
 2749              		.loc 1 2229 0
 2750 0010 7047     		bx	lr
 2751              	.L244:
 2752 0012 00BF     		.align	2
 2753              	.L243:
 2754 0014 00280040 		.word	1073752064
 2755              		.cfi_endproc
 2756              	.LFE153:
 2758              		.section	.text.RTC_TimeStampOnTamperDetectionCmd,"ax",%progbits
 2759              		.align	1
ARM GAS  /tmp/ccv4OuYc.s 			page 104


 2760              		.global	RTC_TimeStampOnTamperDetectionCmd
 2761              		.syntax unified
 2762              		.thumb
 2763              		.thumb_func
 2764              		.fpu fpv4-sp-d16
 2766              	RTC_TimeStampOnTamperDetectionCmd:
 2767              	.LFB154:
2240:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2768              		.loc 1 2240 0
 2769              		.cfi_startproc
 2770              		@ args = 0, pretend = 0, frame = 0
 2771              		@ frame_needed = 0, uses_anonymous_args = 0
 2772              		@ link register save eliminated.
 2773              	.LVL227:
2244:./FWLIB/src/stm32f4xx_rtc.c ****   {
 2774              		.loc 1 2244 0
 2775 0000 28B9     		cbnz	r0, .L248
2252:./FWLIB/src/stm32f4xx_rtc.c ****   }
 2776              		.loc 1 2252 0
 2777 0002 064A     		ldr	r2, .L249
 2778 0004 136C     		ldr	r3, [r2, #64]
 2779 0006 23F08003 		bic	r3, r3, #128
 2780 000a 1364     		str	r3, [r2, #64]
2254:./FWLIB/src/stm32f4xx_rtc.c **** 
 2781              		.loc 1 2254 0
 2782 000c 7047     		bx	lr
 2783              	.L248:
2247:./FWLIB/src/stm32f4xx_rtc.c ****   }
 2784              		.loc 1 2247 0
 2785 000e 034A     		ldr	r2, .L249
 2786 0010 136C     		ldr	r3, [r2, #64]
 2787 0012 43F08003 		orr	r3, r3, #128
 2788 0016 1364     		str	r3, [r2, #64]
 2789 0018 7047     		bx	lr
 2790              	.L250:
 2791 001a 00BF     		.align	2
 2792              	.L249:
 2793 001c 00280040 		.word	1073752064
 2794              		.cfi_endproc
 2795              	.LFE154:
 2797              		.section	.text.RTC_TamperPullUpCmd,"ax",%progbits
 2798              		.align	1
 2799              		.global	RTC_TamperPullUpCmd
 2800              		.syntax unified
 2801              		.thumb
 2802              		.thumb_func
 2803              		.fpu fpv4-sp-d16
 2805              	RTC_TamperPullUpCmd:
 2806              	.LFB155:
2263:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2807              		.loc 1 2263 0
 2808              		.cfi_startproc
 2809              		@ args = 0, pretend = 0, frame = 0
 2810              		@ frame_needed = 0, uses_anonymous_args = 0
 2811              		@ link register save eliminated.
 2812              	.LVL228:
2267:./FWLIB/src/stm32f4xx_rtc.c ****   {
ARM GAS  /tmp/ccv4OuYc.s 			page 105


 2813              		.loc 1 2267 0
 2814 0000 28B9     		cbnz	r0, .L254
2275:./FWLIB/src/stm32f4xx_rtc.c ****   } 
 2815              		.loc 1 2275 0
 2816 0002 064A     		ldr	r2, .L255
 2817 0004 136C     		ldr	r3, [r2, #64]
 2818 0006 43F40043 		orr	r3, r3, #32768
 2819 000a 1364     		str	r3, [r2, #64]
2277:./FWLIB/src/stm32f4xx_rtc.c **** 
 2820              		.loc 1 2277 0
 2821 000c 7047     		bx	lr
 2822              	.L254:
2270:./FWLIB/src/stm32f4xx_rtc.c ****   }
 2823              		.loc 1 2270 0
 2824 000e 034A     		ldr	r2, .L255
 2825 0010 136C     		ldr	r3, [r2, #64]
 2826 0012 23F40043 		bic	r3, r3, #32768
 2827 0016 1364     		str	r3, [r2, #64]
 2828 0018 7047     		bx	lr
 2829              	.L256:
 2830 001a 00BF     		.align	2
 2831              	.L255:
 2832 001c 00280040 		.word	1073752064
 2833              		.cfi_endproc
 2834              	.LFE155:
 2836              		.section	.text.RTC_WriteBackupRegister,"ax",%progbits
 2837              		.align	1
 2838              		.global	RTC_WriteBackupRegister
 2839              		.syntax unified
 2840              		.thumb
 2841              		.thumb_func
 2842              		.fpu fpv4-sp-d16
 2844              	RTC_WriteBackupRegister:
 2845              	.LFB156:
2304:./FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
 2846              		.loc 1 2304 0
 2847              		.cfi_startproc
 2848              		@ args = 0, pretend = 0, frame = 8
 2849              		@ frame_needed = 0, uses_anonymous_args = 0
 2850              		@ link register save eliminated.
 2851              	.LVL229:
 2852 0000 82B0     		sub	sp, sp, #8
 2853              	.LCFI32:
 2854              		.cfi_def_cfa_offset 8
2305:./FWLIB/src/stm32f4xx_rtc.c ****   
 2855              		.loc 1 2305 0
 2856 0002 0023     		movs	r3, #0
 2857 0004 0193     		str	r3, [sp, #4]
2310:./FWLIB/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 2858              		.loc 1 2310 0
 2859 0006 054B     		ldr	r3, .L259
 2860 0008 0193     		str	r3, [sp, #4]
2311:./FWLIB/src/stm32f4xx_rtc.c **** 
 2861              		.loc 1 2311 0
 2862 000a 019B     		ldr	r3, [sp, #4]
 2863 000c 03EB8000 		add	r0, r3, r0, lsl #2
 2864              	.LVL230:
ARM GAS  /tmp/ccv4OuYc.s 			page 106


 2865 0010 0190     		str	r0, [sp, #4]
2314:./FWLIB/src/stm32f4xx_rtc.c **** }
 2866              		.loc 1 2314 0
 2867 0012 019B     		ldr	r3, [sp, #4]
 2868 0014 1960     		str	r1, [r3]
2315:./FWLIB/src/stm32f4xx_rtc.c **** 
 2869              		.loc 1 2315 0
 2870 0016 02B0     		add	sp, sp, #8
 2871              	.LCFI33:
 2872              		.cfi_def_cfa_offset 0
 2873              		@ sp needed
 2874 0018 7047     		bx	lr
 2875              	.L260:
 2876 001a 00BF     		.align	2
 2877              	.L259:
 2878 001c 50280040 		.word	1073752144
 2879              		.cfi_endproc
 2880              	.LFE156:
 2882              		.section	.text.RTC_ReadBackupRegister,"ax",%progbits
 2883              		.align	1
 2884              		.global	RTC_ReadBackupRegister
 2885              		.syntax unified
 2886              		.thumb
 2887              		.thumb_func
 2888              		.fpu fpv4-sp-d16
 2890              	RTC_ReadBackupRegister:
 2891              	.LFB157:
2325:./FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
 2892              		.loc 1 2325 0
 2893              		.cfi_startproc
 2894              		@ args = 0, pretend = 0, frame = 8
 2895              		@ frame_needed = 0, uses_anonymous_args = 0
 2896              		@ link register save eliminated.
 2897              	.LVL231:
 2898 0000 82B0     		sub	sp, sp, #8
 2899              	.LCFI34:
 2900              		.cfi_def_cfa_offset 8
2326:./FWLIB/src/stm32f4xx_rtc.c ****   
 2901              		.loc 1 2326 0
 2902 0002 0023     		movs	r3, #0
 2903 0004 0193     		str	r3, [sp, #4]
2331:./FWLIB/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 2904              		.loc 1 2331 0
 2905 0006 054B     		ldr	r3, .L263
 2906 0008 0193     		str	r3, [sp, #4]
2332:./FWLIB/src/stm32f4xx_rtc.c ****   
 2907              		.loc 1 2332 0
 2908 000a 019B     		ldr	r3, [sp, #4]
 2909 000c 03EB8000 		add	r0, r3, r0, lsl #2
 2910              	.LVL232:
 2911 0010 0190     		str	r0, [sp, #4]
2335:./FWLIB/src/stm32f4xx_rtc.c **** }
 2912              		.loc 1 2335 0
 2913 0012 019B     		ldr	r3, [sp, #4]
 2914 0014 1868     		ldr	r0, [r3]
2336:./FWLIB/src/stm32f4xx_rtc.c **** 
 2915              		.loc 1 2336 0
ARM GAS  /tmp/ccv4OuYc.s 			page 107


 2916 0016 02B0     		add	sp, sp, #8
 2917              	.LCFI35:
 2918              		.cfi_def_cfa_offset 0
 2919              		@ sp needed
 2920 0018 7047     		bx	lr
 2921              	.L264:
 2922 001a 00BF     		.align	2
 2923              	.L263:
 2924 001c 50280040 		.word	1073752144
 2925              		.cfi_endproc
 2926              	.LFE157:
 2928              		.section	.text.RTC_TamperPinSelection,"ax",%progbits
 2929              		.align	1
 2930              		.global	RTC_TamperPinSelection
 2931              		.syntax unified
 2932              		.thumb
 2933              		.thumb_func
 2934              		.fpu fpv4-sp-d16
 2936              	RTC_TamperPinSelection:
 2937              	.LFB158:
2364:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2938              		.loc 1 2364 0
 2939              		.cfi_startproc
 2940              		@ args = 0, pretend = 0, frame = 0
 2941              		@ frame_needed = 0, uses_anonymous_args = 0
 2942              		@ link register save eliminated.
 2943              	.LVL233:
2368:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
 2944              		.loc 1 2368 0
 2945 0000 044B     		ldr	r3, .L266
 2946 0002 1A6C     		ldr	r2, [r3, #64]
 2947 0004 22F48032 		bic	r2, r2, #65536
 2948 0008 1A64     		str	r2, [r3, #64]
2369:./FWLIB/src/stm32f4xx_rtc.c **** }
 2949              		.loc 1 2369 0
 2950 000a 1A6C     		ldr	r2, [r3, #64]
 2951 000c 1043     		orrs	r0, r0, r2
 2952              	.LVL234:
 2953 000e 1864     		str	r0, [r3, #64]
2370:./FWLIB/src/stm32f4xx_rtc.c **** 
 2954              		.loc 1 2370 0
 2955 0010 7047     		bx	lr
 2956              	.L267:
 2957 0012 00BF     		.align	2
 2958              	.L266:
 2959 0014 00280040 		.word	1073752064
 2960              		.cfi_endproc
 2961              	.LFE158:
 2963              		.section	.text.RTC_TimeStampPinSelection,"ax",%progbits
 2964              		.align	1
 2965              		.global	RTC_TimeStampPinSelection
 2966              		.syntax unified
 2967              		.thumb
 2968              		.thumb_func
 2969              		.fpu fpv4-sp-d16
 2971              	RTC_TimeStampPinSelection:
 2972              	.LFB159:
ARM GAS  /tmp/ccv4OuYc.s 			page 108


2381:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2973              		.loc 1 2381 0
 2974              		.cfi_startproc
 2975              		@ args = 0, pretend = 0, frame = 0
 2976              		@ frame_needed = 0, uses_anonymous_args = 0
 2977              		@ link register save eliminated.
 2978              	.LVL235:
2385:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
 2979              		.loc 1 2385 0
 2980 0000 044B     		ldr	r3, .L269
 2981 0002 1A6C     		ldr	r2, [r3, #64]
 2982 0004 22F40032 		bic	r2, r2, #131072
 2983 0008 1A64     		str	r2, [r3, #64]
2386:./FWLIB/src/stm32f4xx_rtc.c **** }
 2984              		.loc 1 2386 0
 2985 000a 1A6C     		ldr	r2, [r3, #64]
 2986 000c 1043     		orrs	r0, r0, r2
 2987              	.LVL236:
 2988 000e 1864     		str	r0, [r3, #64]
2387:./FWLIB/src/stm32f4xx_rtc.c **** 
 2989              		.loc 1 2387 0
 2990 0010 7047     		bx	lr
 2991              	.L270:
 2992 0012 00BF     		.align	2
 2993              	.L269:
 2994 0014 00280040 		.word	1073752064
 2995              		.cfi_endproc
 2996              	.LFE159:
 2998              		.section	.text.RTC_OutputTypeConfig,"ax",%progbits
 2999              		.align	1
 3000              		.global	RTC_OutputTypeConfig
 3001              		.syntax unified
 3002              		.thumb
 3003              		.thumb_func
 3004              		.fpu fpv4-sp-d16
 3006              	RTC_OutputTypeConfig:
 3007              	.LFB160:
2400:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 3008              		.loc 1 2400 0
 3009              		.cfi_startproc
 3010              		@ args = 0, pretend = 0, frame = 0
 3011              		@ frame_needed = 0, uses_anonymous_args = 0
 3012              		@ link register save eliminated.
 3013              	.LVL237:
2404:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
 3014              		.loc 1 2404 0
 3015 0000 044B     		ldr	r3, .L272
 3016 0002 1A6C     		ldr	r2, [r3, #64]
 3017 0004 22F48022 		bic	r2, r2, #262144
 3018 0008 1A64     		str	r2, [r3, #64]
2405:./FWLIB/src/stm32f4xx_rtc.c **** }
 3019              		.loc 1 2405 0
 3020 000a 1A6C     		ldr	r2, [r3, #64]
 3021 000c 1043     		orrs	r0, r0, r2
 3022              	.LVL238:
 3023 000e 1864     		str	r0, [r3, #64]
2406:./FWLIB/src/stm32f4xx_rtc.c **** 
ARM GAS  /tmp/ccv4OuYc.s 			page 109


 3024              		.loc 1 2406 0
 3025 0010 7047     		bx	lr
 3026              	.L273:
 3027 0012 00BF     		.align	2
 3028              	.L272:
 3029 0014 00280040 		.word	1073752064
 3030              		.cfi_endproc
 3031              	.LFE160:
 3033              		.section	.text.RTC_SynchroShiftConfig,"ax",%progbits
 3034              		.align	1
 3035              		.global	RTC_SynchroShiftConfig
 3036              		.syntax unified
 3037              		.thumb
 3038              		.thumb_func
 3039              		.fpu fpv4-sp-d16
 3041              	RTC_SynchroShiftConfig:
 3042              	.LFB161:
2438:./FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 3043              		.loc 1 2438 0
 3044              		.cfi_startproc
 3045              		@ args = 0, pretend = 0, frame = 0
 3046              		@ frame_needed = 0, uses_anonymous_args = 0
 3047              	.LVL239:
 3048 0000 08B5     		push	{r3, lr}
 3049              	.LCFI36:
 3050              		.cfi_def_cfa_offset 8
 3051              		.cfi_offset 3, -8
 3052              		.cfi_offset 14, -4
 3053              	.LVL240:
2447:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 3054              		.loc 1 2447 0
 3055 0002 174B     		ldr	r3, .L285
 3056 0004 CA22     		movs	r2, #202
 3057 0006 5A62     		str	r2, [r3, #36]
2448:./FWLIB/src/stm32f4xx_rtc.c ****   
 3058              		.loc 1 2448 0
 3059 0008 5322     		movs	r2, #83
 3060 000a 5A62     		str	r2, [r3, #36]
2451:./FWLIB/src/stm32f4xx_rtc.c ****   {
 3061              		.loc 1 2451 0
 3062 000c DB68     		ldr	r3, [r3, #12]
 3063 000e 13F0080F 		tst	r3, #8
 3064 0012 0BD1     		bne	.L279
 3065              	.LVL241:
 3066              	.L276:
2461:./FWLIB/src/stm32f4xx_rtc.c ****   {
 3067              		.loc 1 2461 0
 3068 0014 124B     		ldr	r3, .L285
 3069 0016 DB68     		ldr	r3, [r3, #12]
 3070 0018 13F0080F 		tst	r3, #8
 3071 001c 1AD1     		bne	.L280
2464:./FWLIB/src/stm32f4xx_rtc.c ****     {
 3072              		.loc 1 2464 0
 3073 001e 104B     		ldr	r3, .L285
 3074 0020 9B68     		ldr	r3, [r3, #8]
 3075 0022 13F0100F 		tst	r3, #16
 3076 0026 0CD0     		beq	.L284
ARM GAS  /tmp/ccv4OuYc.s 			page 110


2480:./FWLIB/src/stm32f4xx_rtc.c ****     }
 3077              		.loc 1 2480 0
 3078 0028 0023     		movs	r3, #0
 3079 002a 14E0     		b	.L278
 3080              	.LVL242:
 3081              	.L279:
2440:./FWLIB/src/stm32f4xx_rtc.c **** 
 3082              		.loc 1 2440 0
 3083 002c 0023     		movs	r3, #0
 3084              	.LVL243:
 3085              	.L275:
2454:./FWLIB/src/stm32f4xx_rtc.c ****     {
 3086              		.loc 1 2454 0
 3087 002e 0C4A     		ldr	r2, .L285
 3088 0030 D268     		ldr	r2, [r2, #12]
 3089 0032 12F0080F 		tst	r2, #8
 3090 0036 EDD0     		beq	.L276
2454:./FWLIB/src/stm32f4xx_rtc.c ****     {
 3091              		.loc 1 2454 0 is_stmt 0 discriminator 1
 3092 0038 B3F5805F 		cmp	r3, #4096
 3093 003c EAD0     		beq	.L276
2456:./FWLIB/src/stm32f4xx_rtc.c ****     }
 3094              		.loc 1 2456 0 is_stmt 1
 3095 003e 0133     		adds	r3, r3, #1
 3096              	.LVL244:
 3097 0040 F5E7     		b	.L275
 3098              	.LVL245:
 3099              	.L284:
2467:./FWLIB/src/stm32f4xx_rtc.c ****     
 3100              		.loc 1 2467 0
 3101 0042 0143     		orrs	r1, r1, r0
 3102              	.LVL246:
 3103 0044 064B     		ldr	r3, .L285
 3104 0046 D962     		str	r1, [r3, #44]
2469:./FWLIB/src/stm32f4xx_rtc.c ****       {
 3105              		.loc 1 2469 0
 3106 0048 FFF7FEFF 		bl	RTC_WaitForSynchro
 3107              	.LVL247:
 3108 004c 0346     		mov	r3, r0
 3109 004e 10B1     		cbz	r0, .L278
2475:./FWLIB/src/stm32f4xx_rtc.c ****       }
 3110              		.loc 1 2475 0
 3111 0050 0123     		movs	r3, #1
 3112 0052 00E0     		b	.L278
 3113              	.LVL248:
 3114              	.L280:
2485:./FWLIB/src/stm32f4xx_rtc.c ****   }
 3115              		.loc 1 2485 0
 3116 0054 0023     		movs	r3, #0
 3117              	.LVL249:
 3118              	.L278:
2489:./FWLIB/src/stm32f4xx_rtc.c ****   
 3119              		.loc 1 2489 0
 3120 0056 024A     		ldr	r2, .L285
 3121 0058 FF21     		movs	r1, #255
 3122 005a 5162     		str	r1, [r2, #36]
2492:./FWLIB/src/stm32f4xx_rtc.c **** 
ARM GAS  /tmp/ccv4OuYc.s 			page 111


 3123              		.loc 1 2492 0
 3124 005c 1846     		mov	r0, r3
 3125 005e 08BD     		pop	{r3, pc}
 3126              	.LVL250:
 3127              	.L286:
 3128              		.align	2
 3129              	.L285:
 3130 0060 00280040 		.word	1073752064
 3131              		.cfi_endproc
 3132              	.LFE161:
 3134              		.section	.text.RTC_ITConfig,"ax",%progbits
 3135              		.align	1
 3136              		.global	RTC_ITConfig
 3137              		.syntax unified
 3138              		.thumb
 3139              		.thumb_func
 3140              		.fpu fpv4-sp-d16
 3142              	RTC_ITConfig:
 3143              	.LFB162:
2558:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 3144              		.loc 1 2558 0
 3145              		.cfi_startproc
 3146              		@ args = 0, pretend = 0, frame = 0
 3147              		@ frame_needed = 0, uses_anonymous_args = 0
 3148              		@ link register save eliminated.
 3149              	.LVL251:
2564:./FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 3150              		.loc 1 2564 0
 3151 0000 104B     		ldr	r3, .L291
 3152 0002 CA22     		movs	r2, #202
 3153 0004 5A62     		str	r2, [r3, #36]
2565:./FWLIB/src/stm32f4xx_rtc.c **** 
 3154              		.loc 1 2565 0
 3155 0006 5322     		movs	r2, #83
 3156 0008 5A62     		str	r2, [r3, #36]
2567:./FWLIB/src/stm32f4xx_rtc.c ****   {
 3157              		.loc 1 2567 0
 3158 000a 81B9     		cbnz	r1, .L290
2577:./FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
 3159              		.loc 1 2577 0
 3160 000c 0D4B     		ldr	r3, .L291
 3161 000e 9A68     		ldr	r2, [r3, #8]
 3162 0010 20F00401 		bic	r1, r0, #4
 3163              	.LVL252:
 3164 0014 22EA0102 		bic	r2, r2, r1
 3165 0018 9A60     		str	r2, [r3, #8]
2579:./FWLIB/src/stm32f4xx_rtc.c ****   }
 3166              		.loc 1 2579 0
 3167 001a 1A6C     		ldr	r2, [r3, #64]
 3168 001c 00F00400 		and	r0, r0, #4
 3169              	.LVL253:
 3170 0020 22EA0000 		bic	r0, r2, r0
 3171 0024 1864     		str	r0, [r3, #64]
 3172              	.L289:
2582:./FWLIB/src/stm32f4xx_rtc.c **** }
 3173              		.loc 1 2582 0
 3174 0026 074B     		ldr	r3, .L291
ARM GAS  /tmp/ccv4OuYc.s 			page 112


 3175 0028 FF22     		movs	r2, #255
 3176 002a 5A62     		str	r2, [r3, #36]
2583:./FWLIB/src/stm32f4xx_rtc.c **** 
 3177              		.loc 1 2583 0
 3178 002c 7047     		bx	lr
 3179              	.LVL254:
 3180              	.L290:
2570:./FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
 3181              		.loc 1 2570 0
 3182 002e 9A68     		ldr	r2, [r3, #8]
 3183 0030 20F00401 		bic	r1, r0, #4
 3184              	.LVL255:
 3185 0034 0A43     		orrs	r2, r2, r1
 3186 0036 9A60     		str	r2, [r3, #8]
2572:./FWLIB/src/stm32f4xx_rtc.c ****   }
 3187              		.loc 1 2572 0
 3188 0038 1A6C     		ldr	r2, [r3, #64]
 3189 003a 00F00400 		and	r0, r0, #4
 3190              	.LVL256:
 3191 003e 1043     		orrs	r0, r0, r2
 3192 0040 1864     		str	r0, [r3, #64]
 3193 0042 F0E7     		b	.L289
 3194              	.L292:
 3195              		.align	2
 3196              	.L291:
 3197 0044 00280040 		.word	1073752064
 3198              		.cfi_endproc
 3199              	.LFE162:
 3201              		.section	.text.RTC_GetFlagStatus,"ax",%progbits
 3202              		.align	1
 3203              		.global	RTC_GetFlagStatus
 3204              		.syntax unified
 3205              		.thumb
 3206              		.thumb_func
 3207              		.fpu fpv4-sp-d16
 3209              	RTC_GetFlagStatus:
 3210              	.LFB163:
2606:./FWLIB/src/stm32f4xx_rtc.c ****   FlagStatus bitstatus = RESET;
 3211              		.loc 1 2606 0
 3212              		.cfi_startproc
 3213              		@ args = 0, pretend = 0, frame = 0
 3214              		@ frame_needed = 0, uses_anonymous_args = 0
 3215              		@ link register save eliminated.
 3216              	.LVL257:
2614:./FWLIB/src/stm32f4xx_rtc.c ****   
 3217              		.loc 1 2614 0
 3218 0000 074B     		ldr	r3, .L297
 3219 0002 DB68     		ldr	r3, [r3, #12]
 3220 0004 23F07F43 		bic	r3, r3, #-16777216
 3221 0008 23F47E03 		bic	r3, r3, #16646144
 3222 000c 23F44043 		bic	r3, r3, #49152
 3223 0010 23F08003 		bic	r3, r3, #128
 3224              	.LVL258:
2617:./FWLIB/src/stm32f4xx_rtc.c ****   {
 3225              		.loc 1 2617 0
 3226 0014 0342     		tst	r3, r0
 3227 0016 01D1     		bne	.L296
ARM GAS  /tmp/ccv4OuYc.s 			page 113


2623:./FWLIB/src/stm32f4xx_rtc.c ****   }
 3228              		.loc 1 2623 0
 3229 0018 0020     		movs	r0, #0
 3230              	.LVL259:
2626:./FWLIB/src/stm32f4xx_rtc.c **** 
 3231              		.loc 1 2626 0
 3232 001a 7047     		bx	lr
 3233              	.LVL260:
 3234              	.L296:
2619:./FWLIB/src/stm32f4xx_rtc.c ****   }
 3235              		.loc 1 2619 0
 3236 001c 0120     		movs	r0, #1
 3237              	.LVL261:
 3238 001e 7047     		bx	lr
 3239              	.L298:
 3240              		.align	2
 3241              	.L297:
 3242 0020 00280040 		.word	1073752064
 3243              		.cfi_endproc
 3244              	.LFE163:
 3246              		.section	.text.RTC_ClearFlag,"ax",%progbits
 3247              		.align	1
 3248              		.global	RTC_ClearFlag
 3249              		.syntax unified
 3250              		.thumb
 3251              		.thumb_func
 3252              		.fpu fpv4-sp-d16
 3254              	RTC_ClearFlag:
 3255              	.LFB164:
2642:./FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 3256              		.loc 1 2642 0
 3257              		.cfi_startproc
 3258              		@ args = 0, pretend = 0, frame = 0
 3259              		@ frame_needed = 0, uses_anonymous_args = 0
 3260              		@ link register save eliminated.
 3261              	.LVL262:
2647:./FWLIB/src/stm32f4xx_rtc.c **** }
 3262              		.loc 1 2647 0
 3263 0000 80B2     		uxth	r0, r0
 3264              	.LVL263:
 3265 0002 40F08003 		orr	r3, r0, #128
 3266 0006 044A     		ldr	r2, .L300
 3267 0008 D068     		ldr	r0, [r2, #12]
 3268 000a 00F08000 		and	r0, r0, #128
 3269 000e 60EA0300 		orn	r0, r0, r3
 3270 0012 D060     		str	r0, [r2, #12]
2648:./FWLIB/src/stm32f4xx_rtc.c **** 
 3271              		.loc 1 2648 0
 3272 0014 7047     		bx	lr
 3273              	.L301:
 3274 0016 00BF     		.align	2
 3275              	.L300:
 3276 0018 00280040 		.word	1073752064
 3277              		.cfi_endproc
 3278              	.LFE164:
 3280              		.section	.text.RTC_GetITStatus,"ax",%progbits
 3281              		.align	1
ARM GAS  /tmp/ccv4OuYc.s 			page 114


 3282              		.global	RTC_GetITStatus
 3283              		.syntax unified
 3284              		.thumb
 3285              		.thumb_func
 3286              		.fpu fpv4-sp-d16
 3288              	RTC_GetITStatus:
 3289              	.LFB165:
2662:./FWLIB/src/stm32f4xx_rtc.c ****   ITStatus bitstatus = RESET;
 3290              		.loc 1 2662 0
 3291              		.cfi_startproc
 3292              		@ args = 0, pretend = 0, frame = 0
 3293              		@ frame_needed = 0, uses_anonymous_args = 0
 3294              		@ link register save eliminated.
 3295              	.LVL264:
2670:./FWLIB/src/stm32f4xx_rtc.c ****  
 3296              		.loc 1 2670 0
 3297 0000 0A4A     		ldr	r2, .L306
 3298 0002 136C     		ldr	r3, [r2, #64]
 3299 0004 03F00403 		and	r3, r3, #4
 3300              	.LVL265:
2673:./FWLIB/src/stm32f4xx_rtc.c ****   
 3301              		.loc 1 2673 0
 3302 0008 9168     		ldr	r1, [r2, #8]
 3303 000a 0140     		ands	r1, r1, r0
 3304 000c 03EAD033 		and	r3, r3, r0, lsr #15
 3305              	.LVL266:
2676:./FWLIB/src/stm32f4xx_rtc.c ****   
 3306              		.loc 1 2676 0
 3307 0010 D268     		ldr	r2, [r2, #12]
 3308 0012 02EA1012 		and	r2, r2, r0, lsr #4
 3309              	.LVL267:
2679:./FWLIB/src/stm32f4xx_rtc.c ****   {
 3310              		.loc 1 2679 0
 3311 0016 0B43     		orrs	r3, r1, r3
 3312              	.LVL268:
 3313 0018 03D0     		beq	.L304
2679:./FWLIB/src/stm32f4xx_rtc.c ****   {
 3314              		.loc 1 2679 0 is_stmt 0 discriminator 1
 3315 001a 92B2     		uxth	r2, r2
 3316              	.LVL269:
 3317 001c 1AB9     		cbnz	r2, .L305
2685:./FWLIB/src/stm32f4xx_rtc.c ****   }
 3318              		.loc 1 2685 0 is_stmt 1
 3319 001e 0020     		movs	r0, #0
 3320              	.LVL270:
 3321 0020 7047     		bx	lr
 3322              	.LVL271:
 3323              	.L304:
 3324 0022 0020     		movs	r0, #0
 3325              	.LVL272:
 3326 0024 7047     		bx	lr
 3327              	.LVL273:
 3328              	.L305:
2681:./FWLIB/src/stm32f4xx_rtc.c ****   }
 3329              		.loc 1 2681 0
 3330 0026 0120     		movs	r0, #1
 3331              	.LVL274:
ARM GAS  /tmp/ccv4OuYc.s 			page 115


2688:./FWLIB/src/stm32f4xx_rtc.c **** 
 3332              		.loc 1 2688 0
 3333 0028 7047     		bx	lr
 3334              	.L307:
 3335 002a 00BF     		.align	2
 3336              	.L306:
 3337 002c 00280040 		.word	1073752064
 3338              		.cfi_endproc
 3339              	.LFE165:
 3341              		.section	.text.RTC_ClearITPendingBit,"ax",%progbits
 3342              		.align	1
 3343              		.global	RTC_ClearITPendingBit
 3344              		.syntax unified
 3345              		.thumb
 3346              		.thumb_func
 3347              		.fpu fpv4-sp-d16
 3349              	RTC_ClearITPendingBit:
 3350              	.LFB166:
2702:./FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 3351              		.loc 1 2702 0
 3352              		.cfi_startproc
 3353              		@ args = 0, pretend = 0, frame = 0
 3354              		@ frame_needed = 0, uses_anonymous_args = 0
 3355              		@ link register save eliminated.
 3356              	.LVL275:
2712:./FWLIB/src/stm32f4xx_rtc.c **** }
 3357              		.loc 1 2712 0
 3358 0000 C0F30F10 		ubfx	r0, r0, #4, #16
 3359              	.LVL276:
 3360 0004 40F08003 		orr	r3, r0, #128
 3361 0008 034A     		ldr	r2, .L309
 3362 000a D068     		ldr	r0, [r2, #12]
 3363 000c 00F08000 		and	r0, r0, #128
 3364 0010 60EA0300 		orn	r0, r0, r3
 3365 0014 D060     		str	r0, [r2, #12]
2713:./FWLIB/src/stm32f4xx_rtc.c **** 
 3366              		.loc 1 2713 0
 3367 0016 7047     		bx	lr
 3368              	.L310:
 3369              		.align	2
 3370              	.L309:
 3371 0018 00280040 		.word	1073752064
 3372              		.cfi_endproc
 3373              	.LFE166:
 3375              		.text
 3376              	.Letext0:
 3377              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 3378              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 3379              		.file 4 "build/lnInclude/core_cm4.h"
 3380              		.file 5 "build/lnInclude/system_stm32f4xx.h"
 3381              		.file 6 "build/lnInclude/stm32f4xx.h"
 3382              		.file 7 "build/lnInclude/stm32f4xx_rtc.h"
ARM GAS  /tmp/ccv4OuYc.s 			page 116


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_rtc.c
     /tmp/ccv4OuYc.s:18     .text.RTC_ByteToBcd2:0000000000000000 $t
     /tmp/ccv4OuYc.s:24     .text.RTC_ByteToBcd2:0000000000000000 RTC_ByteToBcd2
     /tmp/ccv4OuYc.s:65     .text.RTC_Bcd2ToByte:0000000000000000 $t
     /tmp/ccv4OuYc.s:71     .text.RTC_Bcd2ToByte:0000000000000000 RTC_Bcd2ToByte
     /tmp/ccv4OuYc.s:95     .text.RTC_StructInit:0000000000000000 $t
     /tmp/ccv4OuYc.s:102    .text.RTC_StructInit:0000000000000000 RTC_StructInit
     /tmp/ccv4OuYc.s:125    .text.RTC_WriteProtectionCmd:0000000000000000 $t
     /tmp/ccv4OuYc.s:132    .text.RTC_WriteProtectionCmd:0000000000000000 RTC_WriteProtectionCmd
     /tmp/ccv4OuYc.s:160    .text.RTC_WriteProtectionCmd:0000000000000018 $d
     /tmp/ccv4OuYc.s:165    .text.RTC_EnterInitMode:0000000000000000 $t
     /tmp/ccv4OuYc.s:172    .text.RTC_EnterInitMode:0000000000000000 RTC_EnterInitMode
     /tmp/ccv4OuYc.s:241    .text.RTC_EnterInitMode:000000000000004c $d
     /tmp/ccv4OuYc.s:246    .text.RTC_ExitInitMode:0000000000000000 $t
     /tmp/ccv4OuYc.s:253    .text.RTC_ExitInitMode:0000000000000000 RTC_ExitInitMode
     /tmp/ccv4OuYc.s:270    .text.RTC_ExitInitMode:000000000000000c $d
     /tmp/ccv4OuYc.s:275    .text.RTC_Init:0000000000000000 $t
     /tmp/ccv4OuYc.s:282    .text.RTC_Init:0000000000000000 RTC_Init
     /tmp/ccv4OuYc.s:346    .text.RTC_Init:0000000000000048 $d
     /tmp/ccv4OuYc.s:351    .text.RTC_WaitForSynchro:0000000000000000 $t
     /tmp/ccv4OuYc.s:358    .text.RTC_WaitForSynchro:0000000000000000 RTC_WaitForSynchro
     /tmp/ccv4OuYc.s:433    .text.RTC_WaitForSynchro:000000000000004c $d
     /tmp/ccv4OuYc.s:438    .text.RTC_DeInit:0000000000000000 $t
     /tmp/ccv4OuYc.s:445    .text.RTC_DeInit:0000000000000000 RTC_DeInit
     /tmp/ccv4OuYc.s:571    .text.RTC_DeInit:0000000000000094 $d
     /tmp/ccv4OuYc.s:577    .text.RTC_RefClockCmd:0000000000000000 $t
     /tmp/ccv4OuYc.s:584    .text.RTC_RefClockCmd:0000000000000000 RTC_RefClockCmd
     /tmp/ccv4OuYc.s:643    .text.RTC_RefClockCmd:0000000000000040 $d
     /tmp/ccv4OuYc.s:648    .text.RTC_BypassShadowCmd:0000000000000000 $t
     /tmp/ccv4OuYc.s:655    .text.RTC_BypassShadowCmd:0000000000000000 RTC_BypassShadowCmd
     /tmp/ccv4OuYc.s:694    .text.RTC_BypassShadowCmd:000000000000002c $d
     /tmp/ccv4OuYc.s:699    .text.RTC_SetTime:0000000000000000 $t
     /tmp/ccv4OuYc.s:706    .text.RTC_SetTime:0000000000000000 RTC_SetTime
     /tmp/ccv4OuYc.s:841    .text.RTC_SetTime:00000000000000a4 $d
     /tmp/ccv4OuYc.s:846    .text.RTC_TimeStructInit:0000000000000000 $t
     /tmp/ccv4OuYc.s:853    .text.RTC_TimeStructInit:0000000000000000 RTC_TimeStructInit
     /tmp/ccv4OuYc.s:876    .text.RTC_GetTime:0000000000000000 $t
     /tmp/ccv4OuYc.s:883    .text.RTC_GetTime:0000000000000000 RTC_GetTime
     /tmp/ccv4OuYc.s:945    .text.RTC_GetTime:0000000000000048 $d
     /tmp/ccv4OuYc.s:950    .text.RTC_GetSubSecond:0000000000000000 $t
     /tmp/ccv4OuYc.s:957    .text.RTC_GetSubSecond:0000000000000000 RTC_GetSubSecond
     /tmp/ccv4OuYc.s:976    .text.RTC_GetSubSecond:0000000000000008 $d
     /tmp/ccv4OuYc.s:981    .text.RTC_SetDate:0000000000000000 $t
     /tmp/ccv4OuYc.s:988    .text.RTC_SetDate:0000000000000000 RTC_SetDate
     /tmp/ccv4OuYc.s:1113   .text.RTC_SetDate:0000000000000098 $d
     /tmp/ccv4OuYc.s:1118   .text.RTC_DateStructInit:0000000000000000 $t
     /tmp/ccv4OuYc.s:1125   .text.RTC_DateStructInit:0000000000000000 RTC_DateStructInit
     /tmp/ccv4OuYc.s:1149   .text.RTC_GetDate:0000000000000000 $t
     /tmp/ccv4OuYc.s:1156   .text.RTC_GetDate:0000000000000000 RTC_GetDate
     /tmp/ccv4OuYc.s:1216   .text.RTC_GetDate:0000000000000044 $d
     /tmp/ccv4OuYc.s:1221   .text.RTC_SetAlarm:0000000000000000 $t
     /tmp/ccv4OuYc.s:1228   .text.RTC_SetAlarm:0000000000000000 RTC_SetAlarm
     /tmp/ccv4OuYc.s:1368   .text.RTC_SetAlarm:00000000000000a0 $d
     /tmp/ccv4OuYc.s:1373   .text.RTC_AlarmStructInit:0000000000000000 $t
     /tmp/ccv4OuYc.s:1380   .text.RTC_AlarmStructInit:0000000000000000 RTC_AlarmStructInit
     /tmp/ccv4OuYc.s:1410   .text.RTC_GetAlarm:0000000000000000 $t
ARM GAS  /tmp/ccv4OuYc.s 			page 117


     /tmp/ccv4OuYc.s:1417   .text.RTC_GetAlarm:0000000000000000 RTC_GetAlarm
     /tmp/ccv4OuYc.s:1504   .text.RTC_GetAlarm:0000000000000068 $d
     /tmp/ccv4OuYc.s:1509   .text.RTC_AlarmCmd:0000000000000000 $t
     /tmp/ccv4OuYc.s:1516   .text.RTC_AlarmCmd:0000000000000000 RTC_AlarmCmd
     /tmp/ccv4OuYc.s:1609   .text.RTC_AlarmCmd:000000000000005c $d
     /tmp/ccv4OuYc.s:1614   .text.RTC_AlarmSubSecondConfig:0000000000000000 $t
     /tmp/ccv4OuYc.s:1621   .text.RTC_AlarmSubSecondConfig:0000000000000000 RTC_AlarmSubSecondConfig
     /tmp/ccv4OuYc.s:1673   .text.RTC_AlarmSubSecondConfig:0000000000000028 $d
     /tmp/ccv4OuYc.s:1678   .text.RTC_GetAlarmSubSecond:0000000000000000 $t
     /tmp/ccv4OuYc.s:1685   .text.RTC_GetAlarmSubSecond:0000000000000000 RTC_GetAlarmSubSecond
     /tmp/ccv4OuYc.s:1716   .text.RTC_GetAlarmSubSecond:000000000000001c $d
     /tmp/ccv4OuYc.s:1721   .text.RTC_WakeUpClockConfig:0000000000000000 $t
     /tmp/ccv4OuYc.s:1728   .text.RTC_WakeUpClockConfig:0000000000000000 RTC_WakeUpClockConfig
     /tmp/ccv4OuYc.s:1760   .text.RTC_WakeUpClockConfig:0000000000000020 $d
     /tmp/ccv4OuYc.s:1765   .text.RTC_SetWakeUpCounter:0000000000000000 $t
     /tmp/ccv4OuYc.s:1772   .text.RTC_SetWakeUpCounter:0000000000000000 RTC_SetWakeUpCounter
     /tmp/ccv4OuYc.s:1797   .text.RTC_SetWakeUpCounter:0000000000000014 $d
     /tmp/ccv4OuYc.s:1802   .text.RTC_GetWakeUpCounter:0000000000000000 $t
     /tmp/ccv4OuYc.s:1809   .text.RTC_GetWakeUpCounter:0000000000000000 RTC_GetWakeUpCounter
     /tmp/ccv4OuYc.s:1825   .text.RTC_GetWakeUpCounter:0000000000000008 $d
     /tmp/ccv4OuYc.s:1830   .text.RTC_WakeUpCmd:0000000000000000 $t
     /tmp/ccv4OuYc.s:1837   .text.RTC_WakeUpCmd:0000000000000000 RTC_WakeUpCmd
     /tmp/ccv4OuYc.s:1928   .text.RTC_WakeUpCmd:0000000000000060 $d
     /tmp/ccv4OuYc.s:1933   .text.RTC_DayLightSavingConfig:0000000000000000 $t
     /tmp/ccv4OuYc.s:1940   .text.RTC_DayLightSavingConfig:0000000000000000 RTC_DayLightSavingConfig
     /tmp/ccv4OuYc.s:1973   .text.RTC_DayLightSavingConfig:0000000000000020 $d
     /tmp/ccv4OuYc.s:1978   .text.RTC_GetStoreOperation:0000000000000000 $t
     /tmp/ccv4OuYc.s:1985   .text.RTC_GetStoreOperation:0000000000000000 RTC_GetStoreOperation
     /tmp/ccv4OuYc.s:2001   .text.RTC_GetStoreOperation:000000000000000c $d
     /tmp/ccv4OuYc.s:2006   .text.RTC_OutputConfig:0000000000000000 $t
     /tmp/ccv4OuYc.s:2013   .text.RTC_OutputConfig:0000000000000000 RTC_OutputConfig
     /tmp/ccv4OuYc.s:2046   .text.RTC_OutputConfig:0000000000000020 $d
     /tmp/ccv4OuYc.s:2051   .text.RTC_CoarseCalibConfig:0000000000000000 $t
     /tmp/ccv4OuYc.s:2058   .text.RTC_CoarseCalibConfig:0000000000000000 RTC_CoarseCalibConfig
     /tmp/ccv4OuYc.s:2112   .text.RTC_CoarseCalibConfig:0000000000000030 $d
     /tmp/ccv4OuYc.s:2117   .text.RTC_CoarseCalibCmd:0000000000000000 $t
     /tmp/ccv4OuYc.s:2124   .text.RTC_CoarseCalibCmd:0000000000000000 RTC_CoarseCalibCmd
     /tmp/ccv4OuYc.s:2183   .text.RTC_CoarseCalibCmd:0000000000000040 $d
     /tmp/ccv4OuYc.s:2188   .text.RTC_CalibOutputCmd:0000000000000000 $t
     /tmp/ccv4OuYc.s:2195   .text.RTC_CalibOutputCmd:0000000000000000 RTC_CalibOutputCmd
     /tmp/ccv4OuYc.s:2234   .text.RTC_CalibOutputCmd:000000000000002c $d
     /tmp/ccv4OuYc.s:2239   .text.RTC_CalibOutputConfig:0000000000000000 $t
     /tmp/ccv4OuYc.s:2246   .text.RTC_CalibOutputConfig:0000000000000000 RTC_CalibOutputConfig
     /tmp/ccv4OuYc.s:2278   .text.RTC_CalibOutputConfig:0000000000000020 $d
     /tmp/ccv4OuYc.s:2283   .text.RTC_SmoothCalibConfig:0000000000000000 $t
     /tmp/ccv4OuYc.s:2290   .text.RTC_SmoothCalibConfig:0000000000000000 RTC_SmoothCalibConfig
     /tmp/ccv4OuYc.s:2373   .text.RTC_SmoothCalibConfig:0000000000000050 $d
     /tmp/ccv4OuYc.s:2378   .text.RTC_TimeStampCmd:0000000000000000 $t
     /tmp/ccv4OuYc.s:2385   .text.RTC_TimeStampCmd:0000000000000000 RTC_TimeStampCmd
     /tmp/ccv4OuYc.s:2433   .text.RTC_TimeStampCmd:000000000000002c $d
     /tmp/ccv4OuYc.s:2438   .text.RTC_GetTimeStamp:0000000000000000 $t
     /tmp/ccv4OuYc.s:2445   .text.RTC_GetTimeStamp:0000000000000000 RTC_GetTimeStamp
     /tmp/ccv4OuYc.s:2538   .text.RTC_GetTimeStamp:0000000000000078 $d
     /tmp/ccv4OuYc.s:2543   .text.RTC_GetTimeStampSubSecond:0000000000000000 $t
     /tmp/ccv4OuYc.s:2550   .text.RTC_GetTimeStampSubSecond:0000000000000000 RTC_GetTimeStampSubSecond
     /tmp/ccv4OuYc.s:2565   .text.RTC_GetTimeStampSubSecond:0000000000000008 $d
     /tmp/ccv4OuYc.s:2570   .text.RTC_TamperTriggerConfig:0000000000000000 $t
ARM GAS  /tmp/ccv4OuYc.s 			page 118


     /tmp/ccv4OuYc.s:2577   .text.RTC_TamperTriggerConfig:0000000000000000 RTC_TamperTriggerConfig
     /tmp/ccv4OuYc.s:2607   .text.RTC_TamperTriggerConfig:000000000000001c $d
     /tmp/ccv4OuYc.s:2612   .text.RTC_TamperCmd:0000000000000000 $t
     /tmp/ccv4OuYc.s:2619   .text.RTC_TamperCmd:0000000000000000 RTC_TamperCmd
     /tmp/ccv4OuYc.s:2649   .text.RTC_TamperCmd:0000000000000018 $d
     /tmp/ccv4OuYc.s:2654   .text.RTC_TamperFilterConfig:0000000000000000 $t
     /tmp/ccv4OuYc.s:2661   .text.RTC_TamperFilterConfig:0000000000000000 RTC_TamperFilterConfig
     /tmp/ccv4OuYc.s:2684   .text.RTC_TamperFilterConfig:0000000000000014 $d
     /tmp/ccv4OuYc.s:2689   .text.RTC_TamperSamplingFreqConfig:0000000000000000 $t
     /tmp/ccv4OuYc.s:2696   .text.RTC_TamperSamplingFreqConfig:0000000000000000 RTC_TamperSamplingFreqConfig
     /tmp/ccv4OuYc.s:2719   .text.RTC_TamperSamplingFreqConfig:0000000000000014 $d
     /tmp/ccv4OuYc.s:2724   .text.RTC_TamperPinsPrechargeDuration:0000000000000000 $t
     /tmp/ccv4OuYc.s:2731   .text.RTC_TamperPinsPrechargeDuration:0000000000000000 RTC_TamperPinsPrechargeDuration
     /tmp/ccv4OuYc.s:2754   .text.RTC_TamperPinsPrechargeDuration:0000000000000014 $d
     /tmp/ccv4OuYc.s:2759   .text.RTC_TimeStampOnTamperDetectionCmd:0000000000000000 $t
     /tmp/ccv4OuYc.s:2766   .text.RTC_TimeStampOnTamperDetectionCmd:0000000000000000 RTC_TimeStampOnTamperDetectionCmd
     /tmp/ccv4OuYc.s:2793   .text.RTC_TimeStampOnTamperDetectionCmd:000000000000001c $d
     /tmp/ccv4OuYc.s:2798   .text.RTC_TamperPullUpCmd:0000000000000000 $t
     /tmp/ccv4OuYc.s:2805   .text.RTC_TamperPullUpCmd:0000000000000000 RTC_TamperPullUpCmd
     /tmp/ccv4OuYc.s:2832   .text.RTC_TamperPullUpCmd:000000000000001c $d
     /tmp/ccv4OuYc.s:2837   .text.RTC_WriteBackupRegister:0000000000000000 $t
     /tmp/ccv4OuYc.s:2844   .text.RTC_WriteBackupRegister:0000000000000000 RTC_WriteBackupRegister
     /tmp/ccv4OuYc.s:2878   .text.RTC_WriteBackupRegister:000000000000001c $d
     /tmp/ccv4OuYc.s:2883   .text.RTC_ReadBackupRegister:0000000000000000 $t
     /tmp/ccv4OuYc.s:2890   .text.RTC_ReadBackupRegister:0000000000000000 RTC_ReadBackupRegister
     /tmp/ccv4OuYc.s:2924   .text.RTC_ReadBackupRegister:000000000000001c $d
     /tmp/ccv4OuYc.s:2929   .text.RTC_TamperPinSelection:0000000000000000 $t
     /tmp/ccv4OuYc.s:2936   .text.RTC_TamperPinSelection:0000000000000000 RTC_TamperPinSelection
     /tmp/ccv4OuYc.s:2959   .text.RTC_TamperPinSelection:0000000000000014 $d
     /tmp/ccv4OuYc.s:2964   .text.RTC_TimeStampPinSelection:0000000000000000 $t
     /tmp/ccv4OuYc.s:2971   .text.RTC_TimeStampPinSelection:0000000000000000 RTC_TimeStampPinSelection
     /tmp/ccv4OuYc.s:2994   .text.RTC_TimeStampPinSelection:0000000000000014 $d
     /tmp/ccv4OuYc.s:2999   .text.RTC_OutputTypeConfig:0000000000000000 $t
     /tmp/ccv4OuYc.s:3006   .text.RTC_OutputTypeConfig:0000000000000000 RTC_OutputTypeConfig
     /tmp/ccv4OuYc.s:3029   .text.RTC_OutputTypeConfig:0000000000000014 $d
     /tmp/ccv4OuYc.s:3034   .text.RTC_SynchroShiftConfig:0000000000000000 $t
     /tmp/ccv4OuYc.s:3041   .text.RTC_SynchroShiftConfig:0000000000000000 RTC_SynchroShiftConfig
     /tmp/ccv4OuYc.s:3130   .text.RTC_SynchroShiftConfig:0000000000000060 $d
     /tmp/ccv4OuYc.s:3135   .text.RTC_ITConfig:0000000000000000 $t
     /tmp/ccv4OuYc.s:3142   .text.RTC_ITConfig:0000000000000000 RTC_ITConfig
     /tmp/ccv4OuYc.s:3197   .text.RTC_ITConfig:0000000000000044 $d
     /tmp/ccv4OuYc.s:3202   .text.RTC_GetFlagStatus:0000000000000000 $t
     /tmp/ccv4OuYc.s:3209   .text.RTC_GetFlagStatus:0000000000000000 RTC_GetFlagStatus
     /tmp/ccv4OuYc.s:3242   .text.RTC_GetFlagStatus:0000000000000020 $d
     /tmp/ccv4OuYc.s:3247   .text.RTC_ClearFlag:0000000000000000 $t
     /tmp/ccv4OuYc.s:3254   .text.RTC_ClearFlag:0000000000000000 RTC_ClearFlag
     /tmp/ccv4OuYc.s:3276   .text.RTC_ClearFlag:0000000000000018 $d
     /tmp/ccv4OuYc.s:3281   .text.RTC_GetITStatus:0000000000000000 $t
     /tmp/ccv4OuYc.s:3288   .text.RTC_GetITStatus:0000000000000000 RTC_GetITStatus
     /tmp/ccv4OuYc.s:3337   .text.RTC_GetITStatus:000000000000002c $d
     /tmp/ccv4OuYc.s:3342   .text.RTC_ClearITPendingBit:0000000000000000 $t
     /tmp/ccv4OuYc.s:3349   .text.RTC_ClearITPendingBit:0000000000000000 RTC_ClearITPendingBit
     /tmp/ccv4OuYc.s:3371   .text.RTC_ClearITPendingBit:0000000000000018 $d

NO UNDEFINED SYMBOLS
