ARM GAS  /tmp/ccGgNLyx.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_dma2d.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.DMA2D_DeInit,"ax",%progbits
  18              		.align	1
  19              		.global	DMA2D_DeInit
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	DMA2D_DeInit:
  26              	.LFB112:
  27              		.file 1 "./FWLIB/src/stm32f4xx_dma2d.c"
   1:./FWLIB/src/stm32f4xx_dma2d.c **** /**
   2:./FWLIB/src/stm32f4xx_dma2d.c ****   ******************************************************************************
   3:./FWLIB/src/stm32f4xx_dma2d.c ****   * @file    stm32f4xx_dma2d.c
   4:./FWLIB/src/stm32f4xx_dma2d.c ****   * @author  MCD Application Team
   5:./FWLIB/src/stm32f4xx_dma2d.c ****   * @version V1.4.0
   6:./FWLIB/src/stm32f4xx_dma2d.c ****   * @date    04-August-2014
   7:./FWLIB/src/stm32f4xx_dma2d.c ****   * @brief   This file provides firmware functions to manage the following 
   8:./FWLIB/src/stm32f4xx_dma2d.c ****   *          functionalities of the DMA2D controller (DMA2D) peripheral:
   9:./FWLIB/src/stm32f4xx_dma2d.c ****   *           + Initialization and configuration
  10:./FWLIB/src/stm32f4xx_dma2d.c ****   *           + Interrupts and flags management
  11:./FWLIB/src/stm32f4xx_dma2d.c ****   *           
  12:./FWLIB/src/stm32f4xx_dma2d.c ****   @verbatim  
  13:./FWLIB/src/stm32f4xx_dma2d.c ****  ===============================================================================
  14:./FWLIB/src/stm32f4xx_dma2d.c ****                       ##### How to use this driver #####
  15:./FWLIB/src/stm32f4xx_dma2d.c ****  ===============================================================================
  16:./FWLIB/src/stm32f4xx_dma2d.c ****     [..]
  17:./FWLIB/src/stm32f4xx_dma2d.c ****         (#) Enable DMA2D clock using 
  18:./FWLIB/src/stm32f4xx_dma2d.c ****             RCC_APB2PeriphResetCmd(RCC_APB2Periph_DMA2D, ENABLE) function.
  19:./FWLIB/src/stm32f4xx_dma2d.c ****             
  20:./FWLIB/src/stm32f4xx_dma2d.c ****         (#) Configures DMA2D
  21:./FWLIB/src/stm32f4xx_dma2d.c ****           (++) transfer mode 
  22:./FWLIB/src/stm32f4xx_dma2d.c ****           (++) pixel format, line_number, pixel_per_line
  23:./FWLIB/src/stm32f4xx_dma2d.c ****           (++) output memory address
  24:./FWLIB/src/stm32f4xx_dma2d.c ****           (++) alpha value
  25:./FWLIB/src/stm32f4xx_dma2d.c ****           (++) output offset
  26:./FWLIB/src/stm32f4xx_dma2d.c ****           (++) Default color (RGB)
  27:./FWLIB/src/stm32f4xx_dma2d.c ****            
  28:./FWLIB/src/stm32f4xx_dma2d.c ****         (#) Configures Foreground or/and background
  29:./FWLIB/src/stm32f4xx_dma2d.c ****           (++) memory address
  30:./FWLIB/src/stm32f4xx_dma2d.c ****           (++) alpha value
  31:./FWLIB/src/stm32f4xx_dma2d.c ****           (++) offset and default color
ARM GAS  /tmp/ccGgNLyx.s 			page 2


  32:./FWLIB/src/stm32f4xx_dma2d.c ****   
  33:./FWLIB/src/stm32f4xx_dma2d.c ****         (#) Call the DMA2D_Start() to enable the DMA2D controller.
  34:./FWLIB/src/stm32f4xx_dma2d.c ****         
  35:./FWLIB/src/stm32f4xx_dma2d.c ****     @endverbatim
  36:./FWLIB/src/stm32f4xx_dma2d.c ****   
  37:./FWLIB/src/stm32f4xx_dma2d.c ****   ******************************************************************************
  38:./FWLIB/src/stm32f4xx_dma2d.c ****   * @attention
  39:./FWLIB/src/stm32f4xx_dma2d.c ****   *
  40:./FWLIB/src/stm32f4xx_dma2d.c ****   * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
  41:./FWLIB/src/stm32f4xx_dma2d.c ****   *
  42:./FWLIB/src/stm32f4xx_dma2d.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  43:./FWLIB/src/stm32f4xx_dma2d.c ****   * You may not use this file except in compliance with the License.
  44:./FWLIB/src/stm32f4xx_dma2d.c ****   * You may obtain a copy of the License at:
  45:./FWLIB/src/stm32f4xx_dma2d.c ****   *
  46:./FWLIB/src/stm32f4xx_dma2d.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  47:./FWLIB/src/stm32f4xx_dma2d.c ****   *
  48:./FWLIB/src/stm32f4xx_dma2d.c ****   * Unless required by applicable law or agreed to in writing, software 
  49:./FWLIB/src/stm32f4xx_dma2d.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  50:./FWLIB/src/stm32f4xx_dma2d.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  51:./FWLIB/src/stm32f4xx_dma2d.c ****   * See the License for the specific language governing permissions and
  52:./FWLIB/src/stm32f4xx_dma2d.c ****   * limitations under the License.
  53:./FWLIB/src/stm32f4xx_dma2d.c ****   *
  54:./FWLIB/src/stm32f4xx_dma2d.c ****   ******************************************************************************
  55:./FWLIB/src/stm32f4xx_dma2d.c ****   */ 
  56:./FWLIB/src/stm32f4xx_dma2d.c **** 
  57:./FWLIB/src/stm32f4xx_dma2d.c **** /* Includes ------------------------------------------------------------------*/
  58:./FWLIB/src/stm32f4xx_dma2d.c **** #include "stm32f4xx_dma2d.h"
  59:./FWLIB/src/stm32f4xx_dma2d.c **** #include "stm32f4xx_rcc.h"
  60:./FWLIB/src/stm32f4xx_dma2d.c **** 
  61:./FWLIB/src/stm32f4xx_dma2d.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  62:./FWLIB/src/stm32f4xx_dma2d.c ****   * @{
  63:./FWLIB/src/stm32f4xx_dma2d.c ****   */
  64:./FWLIB/src/stm32f4xx_dma2d.c **** 
  65:./FWLIB/src/stm32f4xx_dma2d.c **** /** @defgroup DMA2D 
  66:./FWLIB/src/stm32f4xx_dma2d.c ****   * @brief DMA2D driver modules
  67:./FWLIB/src/stm32f4xx_dma2d.c ****   * @{
  68:./FWLIB/src/stm32f4xx_dma2d.c ****   */
  69:./FWLIB/src/stm32f4xx_dma2d.c **** 
  70:./FWLIB/src/stm32f4xx_dma2d.c **** /* Private typedef -----------------------------------------------------------*/
  71:./FWLIB/src/stm32f4xx_dma2d.c **** /* Private define ------------------------------------------------------------*/
  72:./FWLIB/src/stm32f4xx_dma2d.c **** /* Private macro -------------------------------------------------------------*/
  73:./FWLIB/src/stm32f4xx_dma2d.c **** /* Private variables ---------------------------------------------------------*/
  74:./FWLIB/src/stm32f4xx_dma2d.c **** /* Private function prototypes -----------------------------------------------*/
  75:./FWLIB/src/stm32f4xx_dma2d.c **** /* Private functions ---------------------------------------------------------*/
  76:./FWLIB/src/stm32f4xx_dma2d.c **** 
  77:./FWLIB/src/stm32f4xx_dma2d.c **** #define CR_MASK                     ((uint32_t)0xFFFCE0FC)  /* DMA2D CR Mask */
  78:./FWLIB/src/stm32f4xx_dma2d.c **** #define PFCCR_MASK                  ((uint32_t)0x00FC00C0)  /* DMA2D FGPFCCR Mask */
  79:./FWLIB/src/stm32f4xx_dma2d.c **** #define DEAD_MASK                   ((uint32_t)0xFFFF00FE)  /* DMA2D DEAD Mask */
  80:./FWLIB/src/stm32f4xx_dma2d.c **** 
  81:./FWLIB/src/stm32f4xx_dma2d.c **** /** @defgroup DMA2D_Private_Functions
  82:./FWLIB/src/stm32f4xx_dma2d.c ****   * @{
  83:./FWLIB/src/stm32f4xx_dma2d.c ****   */
  84:./FWLIB/src/stm32f4xx_dma2d.c **** 
  85:./FWLIB/src/stm32f4xx_dma2d.c **** /** @defgroup DMA2D_Group1 Initialization and Configuration functions
  86:./FWLIB/src/stm32f4xx_dma2d.c ****  *  @brief   Initialization and Configuration functions 
  87:./FWLIB/src/stm32f4xx_dma2d.c ****  *
  88:./FWLIB/src/stm32f4xx_dma2d.c **** @verbatim
ARM GAS  /tmp/ccGgNLyx.s 			page 3


  89:./FWLIB/src/stm32f4xx_dma2d.c ****  ===============================================================================
  90:./FWLIB/src/stm32f4xx_dma2d.c ****             ##### Initialization and Configuration functions #####
  91:./FWLIB/src/stm32f4xx_dma2d.c ****  ===============================================================================
  92:./FWLIB/src/stm32f4xx_dma2d.c ****     [..]  This section provides functions allowing to:
  93:./FWLIB/src/stm32f4xx_dma2d.c ****       (+) Initialize and configure the DMA2D
  94:./FWLIB/src/stm32f4xx_dma2d.c ****       (+) Start/Abort/Suspend Transfer
  95:./FWLIB/src/stm32f4xx_dma2d.c ****       (+) Initialize, configure and set Foreground and background
  96:./FWLIB/src/stm32f4xx_dma2d.c ****       (+) configure and enable DeadTime
  97:./FWLIB/src/stm32f4xx_dma2d.c ****       (+) configure lineWatermark
  98:./FWLIB/src/stm32f4xx_dma2d.c ****     
  99:./FWLIB/src/stm32f4xx_dma2d.c ****     
 100:./FWLIB/src/stm32f4xx_dma2d.c **** @endverbatim
 101:./FWLIB/src/stm32f4xx_dma2d.c ****   * @{
 102:./FWLIB/src/stm32f4xx_dma2d.c ****   */
 103:./FWLIB/src/stm32f4xx_dma2d.c **** 
 104:./FWLIB/src/stm32f4xx_dma2d.c **** /**
 105:./FWLIB/src/stm32f4xx_dma2d.c ****   * @brief  Deinitializes the DMA2D peripheral registers to their default reset
 106:./FWLIB/src/stm32f4xx_dma2d.c ****   *         values.
 107:./FWLIB/src/stm32f4xx_dma2d.c ****   * @param  None
 108:./FWLIB/src/stm32f4xx_dma2d.c ****   * @retval None
 109:./FWLIB/src/stm32f4xx_dma2d.c ****   */
 110:./FWLIB/src/stm32f4xx_dma2d.c **** 
 111:./FWLIB/src/stm32f4xx_dma2d.c **** void DMA2D_DeInit(void)
 112:./FWLIB/src/stm32f4xx_dma2d.c **** {
  28              		.loc 1 112 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 08B5     		push	{r3, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 3, -8
  36              		.cfi_offset 14, -4
 113:./FWLIB/src/stm32f4xx_dma2d.c ****   /* Enable DMA2D reset state */
 114:./FWLIB/src/stm32f4xx_dma2d.c ****   RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA2D, ENABLE);
  37              		.loc 1 114 0
  38 0002 0121     		movs	r1, #1
  39 0004 4FF40000 		mov	r0, #8388608
  40 0008 FFF7FEFF 		bl	RCC_AHB1PeriphResetCmd
  41              	.LVL0:
 115:./FWLIB/src/stm32f4xx_dma2d.c ****   /* Release DMA2D from reset state */
 116:./FWLIB/src/stm32f4xx_dma2d.c ****   RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA2D, DISABLE);
  42              		.loc 1 116 0
  43 000c 0021     		movs	r1, #0
  44 000e 4FF40000 		mov	r0, #8388608
  45 0012 FFF7FEFF 		bl	RCC_AHB1PeriphResetCmd
  46              	.LVL1:
 117:./FWLIB/src/stm32f4xx_dma2d.c **** }
  47              		.loc 1 117 0
  48 0016 08BD     		pop	{r3, pc}
  49              		.cfi_endproc
  50              	.LFE112:
  52              		.section	.text.DMA2D_Init,"ax",%progbits
  53              		.align	1
  54              		.global	DMA2D_Init
  55              		.syntax unified
  56              		.thumb
ARM GAS  /tmp/ccGgNLyx.s 			page 4


  57              		.thumb_func
  58              		.fpu fpv4-sp-d16
  60              	DMA2D_Init:
  61              	.LFB113:
 118:./FWLIB/src/stm32f4xx_dma2d.c **** 
 119:./FWLIB/src/stm32f4xx_dma2d.c **** 
 120:./FWLIB/src/stm32f4xx_dma2d.c **** /**
 121:./FWLIB/src/stm32f4xx_dma2d.c ****   * @brief  Initializes the DMA2D peripheral according to the specified parameters
 122:./FWLIB/src/stm32f4xx_dma2d.c ****   *         in the DMA2D_InitStruct.
 123:./FWLIB/src/stm32f4xx_dma2d.c ****   * @note   This function can be used only when the DMA2D is disabled.
 124:./FWLIB/src/stm32f4xx_dma2d.c ****   * @param  DMA2D_InitStruct: pointer to a DMA2D_InitTypeDef structure that contains
 125:./FWLIB/src/stm32f4xx_dma2d.c ****   *         the configuration information for the specified DMA2D peripheral.
 126:./FWLIB/src/stm32f4xx_dma2d.c ****   * @retval None
 127:./FWLIB/src/stm32f4xx_dma2d.c ****   */
 128:./FWLIB/src/stm32f4xx_dma2d.c **** void DMA2D_Init(DMA2D_InitTypeDef* DMA2D_InitStruct)
 129:./FWLIB/src/stm32f4xx_dma2d.c **** {
  62              		.loc 1 129 0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 0, uses_anonymous_args = 0
  66              		@ link register save eliminated.
  67              	.LVL2:
  68 0000 30B4     		push	{r4, r5}
  69              	.LCFI1:
  70              		.cfi_def_cfa_offset 8
  71              		.cfi_offset 4, -8
  72              		.cfi_offset 5, -4
  73              	.LVL3:
 130:./FWLIB/src/stm32f4xx_dma2d.c **** 
 131:./FWLIB/src/stm32f4xx_dma2d.c ****   uint32_t outgreen = 0;
 132:./FWLIB/src/stm32f4xx_dma2d.c ****   uint32_t outred   = 0;
 133:./FWLIB/src/stm32f4xx_dma2d.c ****   uint32_t outalpha = 0;
 134:./FWLIB/src/stm32f4xx_dma2d.c ****   uint32_t pixline  = 0;
 135:./FWLIB/src/stm32f4xx_dma2d.c **** 
 136:./FWLIB/src/stm32f4xx_dma2d.c ****   /* Check the parameters */
 137:./FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_MODE(DMA2D_InitStruct->DMA2D_Mode));
 138:./FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_CMODE(DMA2D_InitStruct->DMA2D_CMode));
 139:./FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_OGREEN(DMA2D_InitStruct->DMA2D_OutputGreen));
 140:./FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_ORED(DMA2D_InitStruct->DMA2D_OutputRed));
 141:./FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_OBLUE(DMA2D_InitStruct->DMA2D_OutputBlue));
 142:./FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_OALPHA(DMA2D_InitStruct->DMA2D_OutputAlpha));
 143:./FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_OUTPUT_OFFSET(DMA2D_InitStruct->DMA2D_OutputOffset));
 144:./FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_LINE(DMA2D_InitStruct->DMA2D_NumberOfLine));
 145:./FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_PIXEL(DMA2D_InitStruct->DMA2D_PixelPerLine));
 146:./FWLIB/src/stm32f4xx_dma2d.c **** 
 147:./FWLIB/src/stm32f4xx_dma2d.c ****   /* Configures the DMA2D operation mode */
 148:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->CR &= (uint32_t)CR_MASK;
  74              		.loc 1 148 0
  75 0002 2E4B     		ldr	r3, .L14
  76 0004 1A68     		ldr	r2, [r3]
  77 0006 22F00312 		bic	r2, r2, #196611
  78 000a 22F4F852 		bic	r2, r2, #7936
  79 000e 1A60     		str	r2, [r3]
 149:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->CR |= (DMA2D_InitStruct->DMA2D_Mode);
  80              		.loc 1 149 0
  81 0010 1A68     		ldr	r2, [r3]
  82 0012 0168     		ldr	r1, [r0]
ARM GAS  /tmp/ccGgNLyx.s 			page 5


  83 0014 0A43     		orrs	r2, r2, r1
  84 0016 1A60     		str	r2, [r3]
 150:./FWLIB/src/stm32f4xx_dma2d.c **** 
 151:./FWLIB/src/stm32f4xx_dma2d.c ****   /* Configures the color mode of the output image */
 152:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->OPFCCR &= ~(uint32_t)DMA2D_OPFCCR_CM;
  85              		.loc 1 152 0
  86 0018 5A6B     		ldr	r2, [r3, #52]
  87 001a 22F00702 		bic	r2, r2, #7
  88 001e 5A63     		str	r2, [r3, #52]
 153:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->OPFCCR |= (DMA2D_InitStruct->DMA2D_CMode);
  89              		.loc 1 153 0
  90 0020 5A6B     		ldr	r2, [r3, #52]
  91 0022 4168     		ldr	r1, [r0, #4]
  92 0024 0A43     		orrs	r2, r2, r1
  93 0026 5A63     		str	r2, [r3, #52]
 154:./FWLIB/src/stm32f4xx_dma2d.c **** 
 155:./FWLIB/src/stm32f4xx_dma2d.c ****   /* Configures the output color */
 156:./FWLIB/src/stm32f4xx_dma2d.c **** 
 157:./FWLIB/src/stm32f4xx_dma2d.c ****   if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_ARGB8888)
  94              		.loc 1 157 0
  95 0028 4368     		ldr	r3, [r0, #4]
  96 002a 63B1     		cbz	r3, .L10
 158:./FWLIB/src/stm32f4xx_dma2d.c ****   {
 159:./FWLIB/src/stm32f4xx_dma2d.c ****     outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 8;
 160:./FWLIB/src/stm32f4xx_dma2d.c ****     outred = DMA2D_InitStruct->DMA2D_OutputRed << 16;
 161:./FWLIB/src/stm32f4xx_dma2d.c ****     outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 24;
 162:./FWLIB/src/stm32f4xx_dma2d.c ****   }
 163:./FWLIB/src/stm32f4xx_dma2d.c ****   else
 164:./FWLIB/src/stm32f4xx_dma2d.c ****   
 165:./FWLIB/src/stm32f4xx_dma2d.c ****     if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_RGB888)
  97              		.loc 1 165 0
  98 002c 012B     		cmp	r3, #1
  99 002e 31D0     		beq	.L11
 166:./FWLIB/src/stm32f4xx_dma2d.c ****     {
 167:./FWLIB/src/stm32f4xx_dma2d.c ****       outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 8;
 168:./FWLIB/src/stm32f4xx_dma2d.c ****       outred = DMA2D_InitStruct->DMA2D_OutputRed << 16;
 169:./FWLIB/src/stm32f4xx_dma2d.c ****       outalpha = (uint32_t)0x00000000;
 170:./FWLIB/src/stm32f4xx_dma2d.c ****     }
 171:./FWLIB/src/stm32f4xx_dma2d.c ****      
 172:./FWLIB/src/stm32f4xx_dma2d.c ****   else
 173:./FWLIB/src/stm32f4xx_dma2d.c **** 
 174:./FWLIB/src/stm32f4xx_dma2d.c ****     if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_RGB565)
 100              		.loc 1 174 0
 101 0030 022B     		cmp	r3, #2
 102 0032 35D0     		beq	.L12
 175:./FWLIB/src/stm32f4xx_dma2d.c ****     {
 176:./FWLIB/src/stm32f4xx_dma2d.c ****       outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 5;
 177:./FWLIB/src/stm32f4xx_dma2d.c ****       outred = DMA2D_InitStruct->DMA2D_OutputRed << 11;
 178:./FWLIB/src/stm32f4xx_dma2d.c ****       outalpha = (uint32_t)0x00000000;
 179:./FWLIB/src/stm32f4xx_dma2d.c ****     }
 180:./FWLIB/src/stm32f4xx_dma2d.c **** 
 181:./FWLIB/src/stm32f4xx_dma2d.c ****   else
 182:./FWLIB/src/stm32f4xx_dma2d.c **** 
 183:./FWLIB/src/stm32f4xx_dma2d.c ****     if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_ARGB1555)
 103              		.loc 1 183 0
 104 0034 032B     		cmp	r3, #3
 105 0036 39D0     		beq	.L13
ARM GAS  /tmp/ccGgNLyx.s 			page 6


 184:./FWLIB/src/stm32f4xx_dma2d.c ****     {  
 185:./FWLIB/src/stm32f4xx_dma2d.c ****       outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 5;
 186:./FWLIB/src/stm32f4xx_dma2d.c ****       outred = DMA2D_InitStruct->DMA2D_OutputRed << 10;
 187:./FWLIB/src/stm32f4xx_dma2d.c ****       outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 15;
 188:./FWLIB/src/stm32f4xx_dma2d.c ****     }
 189:./FWLIB/src/stm32f4xx_dma2d.c **** 
 190:./FWLIB/src/stm32f4xx_dma2d.c ****   else /* DMA2D_CMode = DMA2D_ARGB4444 */
 191:./FWLIB/src/stm32f4xx_dma2d.c ****   {
 192:./FWLIB/src/stm32f4xx_dma2d.c ****     outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 4;
 106              		.loc 1 192 0
 107 0038 C268     		ldr	r2, [r0, #12]
 108 003a 1201     		lsls	r2, r2, #4
 109              	.LVL4:
 193:./FWLIB/src/stm32f4xx_dma2d.c ****     outred = DMA2D_InitStruct->DMA2D_OutputRed << 8;
 110              		.loc 1 193 0
 111 003c 0469     		ldr	r4, [r0, #16]
 112 003e 2402     		lsls	r4, r4, #8
 113              	.LVL5:
 194:./FWLIB/src/stm32f4xx_dma2d.c ****     outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 12;
 114              		.loc 1 194 0
 115 0040 4569     		ldr	r5, [r0, #20]
 116 0042 2D03     		lsls	r5, r5, #12
 117              	.LVL6:
 118 0044 05E0     		b	.L5
 119              	.LVL7:
 120              	.L10:
 159:./FWLIB/src/stm32f4xx_dma2d.c ****     outred = DMA2D_InitStruct->DMA2D_OutputRed << 16;
 121              		.loc 1 159 0
 122 0046 C268     		ldr	r2, [r0, #12]
 123 0048 1202     		lsls	r2, r2, #8
 124              	.LVL8:
 160:./FWLIB/src/stm32f4xx_dma2d.c ****     outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 24;
 125              		.loc 1 160 0
 126 004a 0469     		ldr	r4, [r0, #16]
 127 004c 2404     		lsls	r4, r4, #16
 128              	.LVL9:
 161:./FWLIB/src/stm32f4xx_dma2d.c ****   }
 129              		.loc 1 161 0
 130 004e 4569     		ldr	r5, [r0, #20]
 131 0050 2D06     		lsls	r5, r5, #24
 132              	.LVL10:
 133              	.L5:
 195:./FWLIB/src/stm32f4xx_dma2d.c ****   }  
 196:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->OCOLR |= ((outgreen) | (outred) | (DMA2D_InitStruct->DMA2D_OutputBlue) | (outalpha));
 134              		.loc 1 196 0
 135 0052 1A4B     		ldr	r3, .L14
 136 0054 996B     		ldr	r1, [r3, #56]
 137 0056 2243     		orrs	r2, r2, r4
 138              	.LVL11:
 139 0058 8468     		ldr	r4, [r0, #8]
 140              	.LVL12:
 141 005a 2243     		orrs	r2, r2, r4
 142 005c 2A43     		orrs	r2, r2, r5
 143 005e 0A43     		orrs	r2, r2, r1
 144 0060 9A63     		str	r2, [r3, #56]
 197:./FWLIB/src/stm32f4xx_dma2d.c **** 
 198:./FWLIB/src/stm32f4xx_dma2d.c ****   /* Configures the output memory address */
ARM GAS  /tmp/ccGgNLyx.s 			page 7


 199:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->OMAR = (DMA2D_InitStruct->DMA2D_OutputMemoryAdd);
 145              		.loc 1 199 0
 146 0062 8269     		ldr	r2, [r0, #24]
 147 0064 DA63     		str	r2, [r3, #60]
 200:./FWLIB/src/stm32f4xx_dma2d.c **** 
 201:./FWLIB/src/stm32f4xx_dma2d.c ****   /* Configure  the line Offset */
 202:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->OOR &= ~(uint32_t)DMA2D_OOR_LO;
 148              		.loc 1 202 0
 149 0066 1A6C     		ldr	r2, [r3, #64]
 150 0068 22F47F52 		bic	r2, r2, #16320
 151 006c 22F03F02 		bic	r2, r2, #63
 152 0070 1A64     		str	r2, [r3, #64]
 203:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->OOR |= (DMA2D_InitStruct->DMA2D_OutputOffset);
 153              		.loc 1 203 0
 154 0072 1A6C     		ldr	r2, [r3, #64]
 155 0074 C169     		ldr	r1, [r0, #28]
 156 0076 0A43     		orrs	r2, r2, r1
 157 0078 1A64     		str	r2, [r3, #64]
 204:./FWLIB/src/stm32f4xx_dma2d.c **** 
 205:./FWLIB/src/stm32f4xx_dma2d.c ****   /* Configure the number of line and pixel per line */
 206:./FWLIB/src/stm32f4xx_dma2d.c ****   pixline = DMA2D_InitStruct->DMA2D_PixelPerLine << 16; 
 158              		.loc 1 206 0
 159 007a 456A     		ldr	r5, [r0, #36]
 160              	.LVL13:
 207:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->NLR &= ~(DMA2D_NLR_NL | DMA2D_NLR_PL);
 161              		.loc 1 207 0
 162 007c 5C6C     		ldr	r4, [r3, #68]
 163 007e 04F04044 		and	r4, r4, #-1073741824
 164 0082 5C64     		str	r4, [r3, #68]
 208:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->NLR |= ((DMA2D_InitStruct->DMA2D_NumberOfLine) | (pixline));
 165              		.loc 1 208 0
 166 0084 5A6C     		ldr	r2, [r3, #68]
 167 0086 016A     		ldr	r1, [r0, #32]
 168 0088 41EA0541 		orr	r1, r1, r5, lsl #16
 169 008c 0A43     		orrs	r2, r2, r1
 170 008e 5A64     		str	r2, [r3, #68]
 209:./FWLIB/src/stm32f4xx_dma2d.c **** 
 210:./FWLIB/src/stm32f4xx_dma2d.c **** /**
 211:./FWLIB/src/stm32f4xx_dma2d.c ****   * @brief  Fills each DMA2D_InitStruct member with its default value.
 212:./FWLIB/src/stm32f4xx_dma2d.c ****   * @param  DMA2D_InitStruct: pointer to a DMA2D_InitTypeDef structure which will
 213:./FWLIB/src/stm32f4xx_dma2d.c ****   *         be initialized.
 214:./FWLIB/src/stm32f4xx_dma2d.c ****   * @retval None
 215:./FWLIB/src/stm32f4xx_dma2d.c ****   */
 216:./FWLIB/src/stm32f4xx_dma2d.c **** }
 171              		.loc 1 216 0
 172 0090 30BC     		pop	{r4, r5}
 173              	.LCFI2:
 174              		.cfi_remember_state
 175              		.cfi_restore 5
 176              		.cfi_restore 4
 177              		.cfi_def_cfa_offset 0
 178              	.LVL14:
 179 0092 7047     		bx	lr
 180              	.LVL15:
 181              	.L11:
 182              	.LCFI3:
 183              		.cfi_restore_state
ARM GAS  /tmp/ccGgNLyx.s 			page 8


 167:./FWLIB/src/stm32f4xx_dma2d.c ****       outred = DMA2D_InitStruct->DMA2D_OutputRed << 16;
 184              		.loc 1 167 0
 185 0094 C268     		ldr	r2, [r0, #12]
 186 0096 1202     		lsls	r2, r2, #8
 187              	.LVL16:
 168:./FWLIB/src/stm32f4xx_dma2d.c ****       outalpha = (uint32_t)0x00000000;
 188              		.loc 1 168 0
 189 0098 0469     		ldr	r4, [r0, #16]
 190 009a 2404     		lsls	r4, r4, #16
 191              	.LVL17:
 169:./FWLIB/src/stm32f4xx_dma2d.c ****     }
 192              		.loc 1 169 0
 193 009c 0025     		movs	r5, #0
 194 009e D8E7     		b	.L5
 195              	.LVL18:
 196              	.L12:
 176:./FWLIB/src/stm32f4xx_dma2d.c ****       outred = DMA2D_InitStruct->DMA2D_OutputRed << 11;
 197              		.loc 1 176 0
 198 00a0 C268     		ldr	r2, [r0, #12]
 199 00a2 5201     		lsls	r2, r2, #5
 200              	.LVL19:
 177:./FWLIB/src/stm32f4xx_dma2d.c ****       outalpha = (uint32_t)0x00000000;
 201              		.loc 1 177 0
 202 00a4 0469     		ldr	r4, [r0, #16]
 203 00a6 E402     		lsls	r4, r4, #11
 204              	.LVL20:
 178:./FWLIB/src/stm32f4xx_dma2d.c ****     }
 205              		.loc 1 178 0
 206 00a8 0025     		movs	r5, #0
 207 00aa D2E7     		b	.L5
 208              	.LVL21:
 209              	.L13:
 185:./FWLIB/src/stm32f4xx_dma2d.c ****       outred = DMA2D_InitStruct->DMA2D_OutputRed << 10;
 210              		.loc 1 185 0
 211 00ac C268     		ldr	r2, [r0, #12]
 212 00ae 5201     		lsls	r2, r2, #5
 213              	.LVL22:
 186:./FWLIB/src/stm32f4xx_dma2d.c ****       outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 15;
 214              		.loc 1 186 0
 215 00b0 0469     		ldr	r4, [r0, #16]
 216 00b2 A402     		lsls	r4, r4, #10
 217              	.LVL23:
 187:./FWLIB/src/stm32f4xx_dma2d.c ****     }
 218              		.loc 1 187 0
 219 00b4 4569     		ldr	r5, [r0, #20]
 220 00b6 ED03     		lsls	r5, r5, #15
 221              	.LVL24:
 222 00b8 CBE7     		b	.L5
 223              	.L15:
 224 00ba 00BF     		.align	2
 225              	.L14:
 226 00bc 00B00240 		.word	1073917952
 227              		.cfi_endproc
 228              	.LFE113:
 230              		.section	.text.DMA2D_StructInit,"ax",%progbits
 231              		.align	1
 232              		.global	DMA2D_StructInit
ARM GAS  /tmp/ccGgNLyx.s 			page 9


 233              		.syntax unified
 234              		.thumb
 235              		.thumb_func
 236              		.fpu fpv4-sp-d16
 238              	DMA2D_StructInit:
 239              	.LFB114:
 217:./FWLIB/src/stm32f4xx_dma2d.c **** void DMA2D_StructInit(DMA2D_InitTypeDef* DMA2D_InitStruct)
 218:./FWLIB/src/stm32f4xx_dma2d.c **** {
 240              		.loc 1 218 0
 241              		.cfi_startproc
 242              		@ args = 0, pretend = 0, frame = 0
 243              		@ frame_needed = 0, uses_anonymous_args = 0
 244              		@ link register save eliminated.
 245              	.LVL25:
 219:./FWLIB/src/stm32f4xx_dma2d.c ****   /* Initialize the transfer mode member */
 220:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_InitStruct->DMA2D_Mode = DMA2D_M2M;
 246              		.loc 1 220 0
 247 0000 0023     		movs	r3, #0
 248 0002 0360     		str	r3, [r0]
 221:./FWLIB/src/stm32f4xx_dma2d.c **** 
 222:./FWLIB/src/stm32f4xx_dma2d.c ****   /* Initialize the output color mode members */
 223:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_InitStruct->DMA2D_CMode = DMA2D_ARGB8888;
 249              		.loc 1 223 0
 250 0004 4360     		str	r3, [r0, #4]
 224:./FWLIB/src/stm32f4xx_dma2d.c **** 
 225:./FWLIB/src/stm32f4xx_dma2d.c ****   /* Initialize the alpha and RGB values */
 226:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_InitStruct->DMA2D_OutputGreen = 0x00;
 251              		.loc 1 226 0
 252 0006 C360     		str	r3, [r0, #12]
 227:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_InitStruct->DMA2D_OutputBlue = 0x00;
 253              		.loc 1 227 0
 254 0008 8360     		str	r3, [r0, #8]
 228:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_InitStruct->DMA2D_OutputRed = 0x00;
 255              		.loc 1 228 0
 256 000a 0361     		str	r3, [r0, #16]
 229:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_InitStruct->DMA2D_OutputAlpha = 0x00;
 257              		.loc 1 229 0
 258 000c 4361     		str	r3, [r0, #20]
 230:./FWLIB/src/stm32f4xx_dma2d.c **** 
 231:./FWLIB/src/stm32f4xx_dma2d.c ****   /* Initialize the output memory address */
 232:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_InitStruct->DMA2D_OutputMemoryAdd = 0x00;
 259              		.loc 1 232 0
 260 000e 8361     		str	r3, [r0, #24]
 233:./FWLIB/src/stm32f4xx_dma2d.c **** 
 234:./FWLIB/src/stm32f4xx_dma2d.c ****   /* Initialize the output offset */
 235:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_InitStruct->DMA2D_OutputOffset = 0x00;
 261              		.loc 1 235 0
 262 0010 C361     		str	r3, [r0, #28]
 236:./FWLIB/src/stm32f4xx_dma2d.c **** 
 237:./FWLIB/src/stm32f4xx_dma2d.c ****   /* Initialize the number of line and the number of pixel per line */
 238:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_InitStruct->DMA2D_NumberOfLine = 0x00;
 263              		.loc 1 238 0
 264 0012 0362     		str	r3, [r0, #32]
 239:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_InitStruct->DMA2D_PixelPerLine = 0x00;
 265              		.loc 1 239 0
 266 0014 4362     		str	r3, [r0, #36]
 240:./FWLIB/src/stm32f4xx_dma2d.c **** }
ARM GAS  /tmp/ccGgNLyx.s 			page 10


 267              		.loc 1 240 0
 268 0016 7047     		bx	lr
 269              		.cfi_endproc
 270              	.LFE114:
 272              		.section	.text.DMA2D_StartTransfer,"ax",%progbits
 273              		.align	1
 274              		.global	DMA2D_StartTransfer
 275              		.syntax unified
 276              		.thumb
 277              		.thumb_func
 278              		.fpu fpv4-sp-d16
 280              	DMA2D_StartTransfer:
 281              	.LFB115:
 241:./FWLIB/src/stm32f4xx_dma2d.c **** 
 242:./FWLIB/src/stm32f4xx_dma2d.c **** /**
 243:./FWLIB/src/stm32f4xx_dma2d.c ****   * @brief  Start the DMA2D transfer.
 244:./FWLIB/src/stm32f4xx_dma2d.c ****   * @param 
 245:./FWLIB/src/stm32f4xx_dma2d.c ****   * @retval None
 246:./FWLIB/src/stm32f4xx_dma2d.c ****   */
 247:./FWLIB/src/stm32f4xx_dma2d.c **** 
 248:./FWLIB/src/stm32f4xx_dma2d.c **** void DMA2D_StartTransfer(void)
 249:./FWLIB/src/stm32f4xx_dma2d.c **** {
 282              		.loc 1 249 0
 283              		.cfi_startproc
 284              		@ args = 0, pretend = 0, frame = 0
 285              		@ frame_needed = 0, uses_anonymous_args = 0
 286              		@ link register save eliminated.
 250:./FWLIB/src/stm32f4xx_dma2d.c ****     /* Start DMA2D transfer by setting START bit */
 251:./FWLIB/src/stm32f4xx_dma2d.c ****     DMA2D->CR |= (uint32_t)DMA2D_CR_START;
 287              		.loc 1 251 0
 288 0000 024A     		ldr	r2, .L18
 289 0002 1368     		ldr	r3, [r2]
 290 0004 43F00103 		orr	r3, r3, #1
 291 0008 1360     		str	r3, [r2]
 252:./FWLIB/src/stm32f4xx_dma2d.c **** }
 292              		.loc 1 252 0
 293 000a 7047     		bx	lr
 294              	.L19:
 295              		.align	2
 296              	.L18:
 297 000c 00B00240 		.word	1073917952
 298              		.cfi_endproc
 299              	.LFE115:
 301              		.section	.text.DMA2D_AbortTransfer,"ax",%progbits
 302              		.align	1
 303              		.global	DMA2D_AbortTransfer
 304              		.syntax unified
 305              		.thumb
 306              		.thumb_func
 307              		.fpu fpv4-sp-d16
 309              	DMA2D_AbortTransfer:
 310              	.LFB116:
 253:./FWLIB/src/stm32f4xx_dma2d.c **** 
 254:./FWLIB/src/stm32f4xx_dma2d.c **** /**
 255:./FWLIB/src/stm32f4xx_dma2d.c ****   * @brief  Aboart the DMA2D transfer.
 256:./FWLIB/src/stm32f4xx_dma2d.c ****   * @param
 257:./FWLIB/src/stm32f4xx_dma2d.c ****   * @retval None
ARM GAS  /tmp/ccGgNLyx.s 			page 11


 258:./FWLIB/src/stm32f4xx_dma2d.c ****   */
 259:./FWLIB/src/stm32f4xx_dma2d.c **** 
 260:./FWLIB/src/stm32f4xx_dma2d.c **** void DMA2D_AbortTransfer(void)
 261:./FWLIB/src/stm32f4xx_dma2d.c **** {
 311              		.loc 1 261 0
 312              		.cfi_startproc
 313              		@ args = 0, pretend = 0, frame = 0
 314              		@ frame_needed = 0, uses_anonymous_args = 0
 315              		@ link register save eliminated.
 262:./FWLIB/src/stm32f4xx_dma2d.c ****     /* Start DMA2D transfer by setting START bit */
 263:./FWLIB/src/stm32f4xx_dma2d.c ****     DMA2D->CR |= (uint32_t)DMA2D_CR_ABORT;
 316              		.loc 1 263 0
 317 0000 024A     		ldr	r2, .L21
 318 0002 1368     		ldr	r3, [r2]
 319 0004 43F00403 		orr	r3, r3, #4
 320 0008 1360     		str	r3, [r2]
 264:./FWLIB/src/stm32f4xx_dma2d.c **** 
 265:./FWLIB/src/stm32f4xx_dma2d.c **** }
 321              		.loc 1 265 0
 322 000a 7047     		bx	lr
 323              	.L22:
 324              		.align	2
 325              	.L21:
 326 000c 00B00240 		.word	1073917952
 327              		.cfi_endproc
 328              	.LFE116:
 330              		.section	.text.DMA2D_Suspend,"ax",%progbits
 331              		.align	1
 332              		.global	DMA2D_Suspend
 333              		.syntax unified
 334              		.thumb
 335              		.thumb_func
 336              		.fpu fpv4-sp-d16
 338              	DMA2D_Suspend:
 339              	.LFB117:
 266:./FWLIB/src/stm32f4xx_dma2d.c **** 
 267:./FWLIB/src/stm32f4xx_dma2d.c **** /**
 268:./FWLIB/src/stm32f4xx_dma2d.c ****   * @brief  Stop or continue the DMA2D transfer.
 269:./FWLIB/src/stm32f4xx_dma2d.c ****   * @param  NewState: new state of the DMA2D peripheral.
 270:./FWLIB/src/stm32f4xx_dma2d.c ****   *   This parameter can be: ENABLE or DISABLE.
 271:./FWLIB/src/stm32f4xx_dma2d.c ****   * @retval None
 272:./FWLIB/src/stm32f4xx_dma2d.c ****   */
 273:./FWLIB/src/stm32f4xx_dma2d.c **** void DMA2D_Suspend(FunctionalState NewState)
 274:./FWLIB/src/stm32f4xx_dma2d.c **** {
 340              		.loc 1 274 0
 341              		.cfi_startproc
 342              		@ args = 0, pretend = 0, frame = 0
 343              		@ frame_needed = 0, uses_anonymous_args = 0
 344              		@ link register save eliminated.
 345              	.LVL26:
 275:./FWLIB/src/stm32f4xx_dma2d.c ****   /* Check the parameters */
 276:./FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 277:./FWLIB/src/stm32f4xx_dma2d.c **** 
 278:./FWLIB/src/stm32f4xx_dma2d.c ****   if (NewState != DISABLE)
 346              		.loc 1 278 0
 347 0000 28B9     		cbnz	r0, .L26
 279:./FWLIB/src/stm32f4xx_dma2d.c ****   {
ARM GAS  /tmp/ccGgNLyx.s 			page 12


 280:./FWLIB/src/stm32f4xx_dma2d.c ****     /* Suspend DMA2D transfer by setting STOP bit */
 281:./FWLIB/src/stm32f4xx_dma2d.c ****     DMA2D->CR |= (uint32_t)DMA2D_CR_SUSP;
 282:./FWLIB/src/stm32f4xx_dma2d.c ****   }
 283:./FWLIB/src/stm32f4xx_dma2d.c ****   else
 284:./FWLIB/src/stm32f4xx_dma2d.c ****   {
 285:./FWLIB/src/stm32f4xx_dma2d.c ****     /* Continue DMA2D transfer by clearing STOP bit */
 286:./FWLIB/src/stm32f4xx_dma2d.c ****     DMA2D->CR &= ~(uint32_t)DMA2D_CR_SUSP;
 348              		.loc 1 286 0
 349 0002 064A     		ldr	r2, .L27
 350 0004 1368     		ldr	r3, [r2]
 351 0006 23F00203 		bic	r3, r3, #2
 352 000a 1360     		str	r3, [r2]
 287:./FWLIB/src/stm32f4xx_dma2d.c ****   }
 288:./FWLIB/src/stm32f4xx_dma2d.c **** }
 353              		.loc 1 288 0
 354 000c 7047     		bx	lr
 355              	.L26:
 281:./FWLIB/src/stm32f4xx_dma2d.c ****   }
 356              		.loc 1 281 0
 357 000e 034A     		ldr	r2, .L27
 358 0010 1368     		ldr	r3, [r2]
 359 0012 43F00203 		orr	r3, r3, #2
 360 0016 1360     		str	r3, [r2]
 361 0018 7047     		bx	lr
 362              	.L28:
 363 001a 00BF     		.align	2
 364              	.L27:
 365 001c 00B00240 		.word	1073917952
 366              		.cfi_endproc
 367              	.LFE117:
 369              		.section	.text.DMA2D_FGConfig,"ax",%progbits
 370              		.align	1
 371              		.global	DMA2D_FGConfig
 372              		.syntax unified
 373              		.thumb
 374              		.thumb_func
 375              		.fpu fpv4-sp-d16
 377              	DMA2D_FGConfig:
 378              	.LFB118:
 289:./FWLIB/src/stm32f4xx_dma2d.c **** 
 290:./FWLIB/src/stm32f4xx_dma2d.c **** /**
 291:./FWLIB/src/stm32f4xx_dma2d.c ****   * @brief  Configures the Foreground according to the specified parameters
 292:./FWLIB/src/stm32f4xx_dma2d.c ****   *         in the DMA2D_FGStruct.
 293:./FWLIB/src/stm32f4xx_dma2d.c ****   * @note   This function can be used only when the transfer is disabled.
 294:./FWLIB/src/stm32f4xx_dma2d.c ****   * @param  DMA2D_FGStruct: pointer to a DMA2D_FGTypeDef structure that contains
 295:./FWLIB/src/stm32f4xx_dma2d.c ****   *         the configuration information for the specified Background.
 296:./FWLIB/src/stm32f4xx_dma2d.c ****   * @retval None
 297:./FWLIB/src/stm32f4xx_dma2d.c ****   */
 298:./FWLIB/src/stm32f4xx_dma2d.c **** void DMA2D_FGConfig(DMA2D_FG_InitTypeDef* DMA2D_FG_InitStruct)
 299:./FWLIB/src/stm32f4xx_dma2d.c **** {
 379              		.loc 1 299 0
 380              		.cfi_startproc
 381              		@ args = 0, pretend = 0, frame = 0
 382              		@ frame_needed = 0, uses_anonymous_args = 0
 383              		@ link register save eliminated.
 384              	.LVL27:
 385 0000 F0B4     		push	{r4, r5, r6, r7}
ARM GAS  /tmp/ccGgNLyx.s 			page 13


 386              	.LCFI4:
 387              		.cfi_def_cfa_offset 16
 388              		.cfi_offset 4, -16
 389              		.cfi_offset 5, -12
 390              		.cfi_offset 6, -8
 391              		.cfi_offset 7, -4
 392              	.LVL28:
 300:./FWLIB/src/stm32f4xx_dma2d.c **** 
 301:./FWLIB/src/stm32f4xx_dma2d.c ****   uint32_t fg_clutcolormode = 0;
 302:./FWLIB/src/stm32f4xx_dma2d.c ****   uint32_t fg_clutsize = 0;
 303:./FWLIB/src/stm32f4xx_dma2d.c ****   uint32_t fg_alpha_mode = 0;
 304:./FWLIB/src/stm32f4xx_dma2d.c ****   uint32_t fg_alphavalue = 0;
 305:./FWLIB/src/stm32f4xx_dma2d.c ****   uint32_t fg_colorgreen = 0;
 306:./FWLIB/src/stm32f4xx_dma2d.c ****   uint32_t fg_colorred = 0;
 307:./FWLIB/src/stm32f4xx_dma2d.c **** 
 308:./FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_FGO(DMA2D_FG_InitStruct->DMA2D_FGO));
 309:./FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_FGCM(DMA2D_FG_InitStruct->DMA2D_FGCM));
 310:./FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_FG_CLUT_CM(DMA2D_FG_InitStruct->DMA2D_FG_CLUT_CM));
 311:./FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_FG_CLUT_SIZE(DMA2D_FG_InitStruct->DMA2D_FG_CLUT_SIZE));
 312:./FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_FG_ALPHA_MODE(DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_MODE));
 313:./FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_FG_ALPHA_VALUE(DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_VALUE));
 314:./FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_FGC_BLUE(DMA2D_FG_InitStruct->DMA2D_FGC_BLUE));
 315:./FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_FGC_GREEN(DMA2D_FG_InitStruct->DMA2D_FGC_GREEN));
 316:./FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_FGC_RED(DMA2D_FG_InitStruct->DMA2D_FGC_RED));
 317:./FWLIB/src/stm32f4xx_dma2d.c **** 
 318:./FWLIB/src/stm32f4xx_dma2d.c ****   /* Configures the FG memory address */
 319:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->FGMAR = (DMA2D_FG_InitStruct->DMA2D_FGMA);
 393              		.loc 1 319 0
 394 0002 0268     		ldr	r2, [r0]
 395 0004 184B     		ldr	r3, .L31
 396 0006 DA60     		str	r2, [r3, #12]
 320:./FWLIB/src/stm32f4xx_dma2d.c **** 
 321:./FWLIB/src/stm32f4xx_dma2d.c ****   /* Configures the FG offset */
 322:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->FGOR &= ~(uint32_t)DMA2D_FGOR_LO;
 397              		.loc 1 322 0
 398 0008 1A69     		ldr	r2, [r3, #16]
 399 000a 22F47F52 		bic	r2, r2, #16320
 400 000e 22F03F02 		bic	r2, r2, #63
 401 0012 1A61     		str	r2, [r3, #16]
 323:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->FGOR |= (DMA2D_FG_InitStruct->DMA2D_FGO);
 402              		.loc 1 323 0
 403 0014 1A69     		ldr	r2, [r3, #16]
 404 0016 4168     		ldr	r1, [r0, #4]
 405 0018 0A43     		orrs	r2, r2, r1
 406 001a 1A61     		str	r2, [r3, #16]
 324:./FWLIB/src/stm32f4xx_dma2d.c **** 
 325:./FWLIB/src/stm32f4xx_dma2d.c ****   /* Configures foreground Pixel Format Convertor */
 326:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->FGPFCCR &= (uint32_t)PFCCR_MASK;
 407              		.loc 1 326 0
 408 001c D969     		ldr	r1, [r3, #28]
 409 001e 134A     		ldr	r2, .L31+4
 410 0020 0A40     		ands	r2, r2, r1
 411 0022 DA61     		str	r2, [r3, #28]
 327:./FWLIB/src/stm32f4xx_dma2d.c ****   fg_clutcolormode = DMA2D_FG_InitStruct->DMA2D_FG_CLUT_CM << 4;
 412              		.loc 1 327 0
 413 0024 C768     		ldr	r7, [r0, #12]
 414              	.LVL29:
ARM GAS  /tmp/ccGgNLyx.s 			page 14


 328:./FWLIB/src/stm32f4xx_dma2d.c ****   fg_clutsize = DMA2D_FG_InitStruct->DMA2D_FG_CLUT_SIZE << 8;
 415              		.loc 1 328 0
 416 0026 0669     		ldr	r6, [r0, #16]
 417              	.LVL30:
 329:./FWLIB/src/stm32f4xx_dma2d.c ****   fg_alpha_mode = DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_MODE << 16;
 418              		.loc 1 329 0
 419 0028 4569     		ldr	r5, [r0, #20]
 420              	.LVL31:
 330:./FWLIB/src/stm32f4xx_dma2d.c ****   fg_alphavalue = DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_VALUE << 24;
 421              		.loc 1 330 0
 422 002a 8469     		ldr	r4, [r0, #24]
 423              	.LVL32:
 331:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->FGPFCCR |= (DMA2D_FG_InitStruct->DMA2D_FGCM | fg_clutcolormode | fg_clutsize | \
 424              		.loc 1 331 0
 425 002c D969     		ldr	r1, [r3, #28]
 426 002e 8268     		ldr	r2, [r0, #8]
 427 0030 42EA0712 		orr	r2, r2, r7, lsl #4
 428 0034 42EA0622 		orr	r2, r2, r6, lsl #8
 429 0038 42EA0542 		orr	r2, r2, r5, lsl #16
 332:./FWLIB/src/stm32f4xx_dma2d.c ****                     fg_alpha_mode | fg_alphavalue);
 430              		.loc 1 332 0
 431 003c 42EA0462 		orr	r2, r2, r4, lsl #24
 331:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->FGPFCCR |= (DMA2D_FG_InitStruct->DMA2D_FGCM | fg_clutcolormode | fg_clutsize | \
 432              		.loc 1 331 0
 433 0040 0A43     		orrs	r2, r2, r1
 434 0042 DA61     		str	r2, [r3, #28]
 333:./FWLIB/src/stm32f4xx_dma2d.c **** 
 334:./FWLIB/src/stm32f4xx_dma2d.c ****   /* Configures foreground color */
 335:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->FGCOLR &= ~(DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED);
 435              		.loc 1 335 0
 436 0044 1A6A     		ldr	r2, [r3, #32]
 437 0046 02F07F42 		and	r2, r2, #-16777216
 438 004a 1A62     		str	r2, [r3, #32]
 336:./FWLIB/src/stm32f4xx_dma2d.c ****   fg_colorgreen = DMA2D_FG_InitStruct->DMA2D_FGC_GREEN << 8;
 439              		.loc 1 336 0
 440 004c 056A     		ldr	r5, [r0, #32]
 441              	.LVL33:
 337:./FWLIB/src/stm32f4xx_dma2d.c ****   fg_colorred = DMA2D_FG_InitStruct->DMA2D_FGC_RED << 16;
 442              		.loc 1 337 0
 443 004e 446A     		ldr	r4, [r0, #36]
 444              	.LVL34:
 338:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->FGCOLR |= (DMA2D_FG_InitStruct->DMA2D_FGC_BLUE | fg_colorgreen | fg_colorred);
 445              		.loc 1 338 0
 446 0050 196A     		ldr	r1, [r3, #32]
 447 0052 C269     		ldr	r2, [r0, #28]
 448 0054 42EA0522 		orr	r2, r2, r5, lsl #8
 449 0058 42EA0442 		orr	r2, r2, r4, lsl #16
 450 005c 0A43     		orrs	r2, r2, r1
 451 005e 1A62     		str	r2, [r3, #32]
 339:./FWLIB/src/stm32f4xx_dma2d.c **** 
 340:./FWLIB/src/stm32f4xx_dma2d.c ****   /* Configures foreground CLUT memory address */
 341:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->FGCMAR = DMA2D_FG_InitStruct->DMA2D_FGCMAR;
 452              		.loc 1 341 0
 453 0060 826A     		ldr	r2, [r0, #40]
 454 0062 DA62     		str	r2, [r3, #44]
 342:./FWLIB/src/stm32f4xx_dma2d.c **** }
 455              		.loc 1 342 0
ARM GAS  /tmp/ccGgNLyx.s 			page 15


 456 0064 F0BC     		pop	{r4, r5, r6, r7}
 457              	.LCFI5:
 458              		.cfi_restore 7
 459              		.cfi_restore 6
 460              		.cfi_restore 5
 461              		.cfi_restore 4
 462              		.cfi_def_cfa_offset 0
 463              	.LVL35:
 464 0066 7047     		bx	lr
 465              	.L32:
 466              		.align	2
 467              	.L31:
 468 0068 00B00240 		.word	1073917952
 469 006c C000FC00 		.word	16515264
 470              		.cfi_endproc
 471              	.LFE118:
 473              		.section	.text.DMA2D_FG_StructInit,"ax",%progbits
 474              		.align	1
 475              		.global	DMA2D_FG_StructInit
 476              		.syntax unified
 477              		.thumb
 478              		.thumb_func
 479              		.fpu fpv4-sp-d16
 481              	DMA2D_FG_StructInit:
 482              	.LFB119:
 343:./FWLIB/src/stm32f4xx_dma2d.c **** 
 344:./FWLIB/src/stm32f4xx_dma2d.c **** /**
 345:./FWLIB/src/stm32f4xx_dma2d.c ****   * @brief  Fills each DMA2D_FGStruct member with its default value.
 346:./FWLIB/src/stm32f4xx_dma2d.c ****   * @param  DMA2D_FGStruct: pointer to a DMA2D_FGTypeDef structure which will
 347:./FWLIB/src/stm32f4xx_dma2d.c ****   *         be initialized.
 348:./FWLIB/src/stm32f4xx_dma2d.c ****   * @retval None
 349:./FWLIB/src/stm32f4xx_dma2d.c ****   */
 350:./FWLIB/src/stm32f4xx_dma2d.c **** void DMA2D_FG_StructInit(DMA2D_FG_InitTypeDef* DMA2D_FG_InitStruct)
 351:./FWLIB/src/stm32f4xx_dma2d.c **** {
 483              		.loc 1 351 0
 484              		.cfi_startproc
 485              		@ args = 0, pretend = 0, frame = 0
 486              		@ frame_needed = 0, uses_anonymous_args = 0
 487              		@ link register save eliminated.
 488              	.LVL36:
 352:./FWLIB/src/stm32f4xx_dma2d.c ****   /*!< Initialize the DMA2D foreground memory address */
 353:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_FG_InitStruct->DMA2D_FGMA = 0x00;
 489              		.loc 1 353 0
 490 0000 0023     		movs	r3, #0
 491 0002 0360     		str	r3, [r0]
 354:./FWLIB/src/stm32f4xx_dma2d.c **** 
 355:./FWLIB/src/stm32f4xx_dma2d.c ****   /*!< Initialize the DMA2D foreground offset */
 356:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_FG_InitStruct->DMA2D_FGO = 0x00;
 492              		.loc 1 356 0
 493 0004 4360     		str	r3, [r0, #4]
 357:./FWLIB/src/stm32f4xx_dma2d.c **** 
 358:./FWLIB/src/stm32f4xx_dma2d.c ****   /*!< Initialize the DMA2D foreground color mode */
 359:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_FG_InitStruct->DMA2D_FGCM = CM_ARGB8888;
 494              		.loc 1 359 0
 495 0006 8360     		str	r3, [r0, #8]
 360:./FWLIB/src/stm32f4xx_dma2d.c **** 
 361:./FWLIB/src/stm32f4xx_dma2d.c ****   /*!< Initialize the DMA2D foreground CLUT color mode */
ARM GAS  /tmp/ccGgNLyx.s 			page 16


 362:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_FG_InitStruct->DMA2D_FG_CLUT_CM = CLUT_CM_ARGB8888;
 496              		.loc 1 362 0
 497 0008 C360     		str	r3, [r0, #12]
 363:./FWLIB/src/stm32f4xx_dma2d.c **** 
 364:./FWLIB/src/stm32f4xx_dma2d.c ****   /*!< Initialize the DMA2D foreground CLUT size */
 365:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_FG_InitStruct->DMA2D_FG_CLUT_SIZE = 0x00;
 498              		.loc 1 365 0
 499 000a 0361     		str	r3, [r0, #16]
 366:./FWLIB/src/stm32f4xx_dma2d.c **** 
 367:./FWLIB/src/stm32f4xx_dma2d.c ****   /*!< Initialize the DMA2D foreground alpha mode */
 368:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_MODE = NO_MODIF_ALPHA_VALUE;
 500              		.loc 1 368 0
 501 000c 4361     		str	r3, [r0, #20]
 369:./FWLIB/src/stm32f4xx_dma2d.c **** 
 370:./FWLIB/src/stm32f4xx_dma2d.c ****   /*!< Initialize the DMA2D foreground alpha value */
 371:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_VALUE = 0x00;
 502              		.loc 1 371 0
 503 000e 8361     		str	r3, [r0, #24]
 372:./FWLIB/src/stm32f4xx_dma2d.c **** 
 373:./FWLIB/src/stm32f4xx_dma2d.c ****   /*!< Initialize the DMA2D foreground blue value */
 374:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_FG_InitStruct->DMA2D_FGC_BLUE = 0x00;
 504              		.loc 1 374 0
 505 0010 C361     		str	r3, [r0, #28]
 375:./FWLIB/src/stm32f4xx_dma2d.c **** 
 376:./FWLIB/src/stm32f4xx_dma2d.c ****   /*!< Initialize the DMA2D foreground green value */
 377:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_FG_InitStruct->DMA2D_FGC_GREEN = 0x00;
 506              		.loc 1 377 0
 507 0012 0362     		str	r3, [r0, #32]
 378:./FWLIB/src/stm32f4xx_dma2d.c **** 
 379:./FWLIB/src/stm32f4xx_dma2d.c ****   /*!< Initialize the DMA2D foreground red value */
 380:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_FG_InitStruct->DMA2D_FGC_RED = 0x00;
 508              		.loc 1 380 0
 509 0014 4362     		str	r3, [r0, #36]
 381:./FWLIB/src/stm32f4xx_dma2d.c **** 
 382:./FWLIB/src/stm32f4xx_dma2d.c ****   /*!< Initialize the DMA2D foreground CLUT memory address */
 383:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_FG_InitStruct->DMA2D_FGCMAR = 0x00;
 510              		.loc 1 383 0
 511 0016 8362     		str	r3, [r0, #40]
 384:./FWLIB/src/stm32f4xx_dma2d.c **** }
 512              		.loc 1 384 0
 513 0018 7047     		bx	lr
 514              		.cfi_endproc
 515              	.LFE119:
 517              		.section	.text.DMA2D_BGConfig,"ax",%progbits
 518              		.align	1
 519              		.global	DMA2D_BGConfig
 520              		.syntax unified
 521              		.thumb
 522              		.thumb_func
 523              		.fpu fpv4-sp-d16
 525              	DMA2D_BGConfig:
 526              	.LFB120:
 385:./FWLIB/src/stm32f4xx_dma2d.c **** 
 386:./FWLIB/src/stm32f4xx_dma2d.c **** 
 387:./FWLIB/src/stm32f4xx_dma2d.c **** /**
 388:./FWLIB/src/stm32f4xx_dma2d.c ****   * @brief  Configures the Background according to the specified parameters
 389:./FWLIB/src/stm32f4xx_dma2d.c ****   *         in the DMA2D_BGStruct.
ARM GAS  /tmp/ccGgNLyx.s 			page 17


 390:./FWLIB/src/stm32f4xx_dma2d.c ****   * @note   This function can be used only when the transfer is disabled.
 391:./FWLIB/src/stm32f4xx_dma2d.c ****   * @param  DMA2D_BGStruct: pointer to a DMA2D_BGTypeDef structure that contains
 392:./FWLIB/src/stm32f4xx_dma2d.c ****   *         the configuration information for the specified Background.
 393:./FWLIB/src/stm32f4xx_dma2d.c ****   * @retval None
 394:./FWLIB/src/stm32f4xx_dma2d.c ****   */
 395:./FWLIB/src/stm32f4xx_dma2d.c **** void DMA2D_BGConfig(DMA2D_BG_InitTypeDef* DMA2D_BG_InitStruct)
 396:./FWLIB/src/stm32f4xx_dma2d.c **** {
 527              		.loc 1 396 0
 528              		.cfi_startproc
 529              		@ args = 0, pretend = 0, frame = 0
 530              		@ frame_needed = 0, uses_anonymous_args = 0
 531              		@ link register save eliminated.
 532              	.LVL37:
 533 0000 F0B4     		push	{r4, r5, r6, r7}
 534              	.LCFI6:
 535              		.cfi_def_cfa_offset 16
 536              		.cfi_offset 4, -16
 537              		.cfi_offset 5, -12
 538              		.cfi_offset 6, -8
 539              		.cfi_offset 7, -4
 540              	.LVL38:
 397:./FWLIB/src/stm32f4xx_dma2d.c **** 
 398:./FWLIB/src/stm32f4xx_dma2d.c ****   uint32_t bg_clutcolormode = 0;
 399:./FWLIB/src/stm32f4xx_dma2d.c ****   uint32_t bg_clutsize = 0;
 400:./FWLIB/src/stm32f4xx_dma2d.c ****   uint32_t bg_alpha_mode = 0;
 401:./FWLIB/src/stm32f4xx_dma2d.c ****   uint32_t bg_alphavalue = 0;
 402:./FWLIB/src/stm32f4xx_dma2d.c ****   uint32_t bg_colorgreen = 0;
 403:./FWLIB/src/stm32f4xx_dma2d.c ****   uint32_t bg_colorred = 0;
 404:./FWLIB/src/stm32f4xx_dma2d.c **** 
 405:./FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_BGO(DMA2D_BG_InitStruct->DMA2D_BGO));
 406:./FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_BGCM(DMA2D_BG_InitStruct->DMA2D_BGCM));
 407:./FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_BG_CLUT_CM(DMA2D_BG_InitStruct->DMA2D_BG_CLUT_CM));
 408:./FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_BG_CLUT_SIZE(DMA2D_BG_InitStruct->DMA2D_BG_CLUT_SIZE));
 409:./FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_BG_ALPHA_MODE(DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_MODE));
 410:./FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_BG_ALPHA_VALUE(DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_VALUE));
 411:./FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_BGC_BLUE(DMA2D_BG_InitStruct->DMA2D_BGC_BLUE));
 412:./FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_BGC_GREEN(DMA2D_BG_InitStruct->DMA2D_BGC_GREEN));
 413:./FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_BGC_RED(DMA2D_BG_InitStruct->DMA2D_BGC_RED));
 414:./FWLIB/src/stm32f4xx_dma2d.c **** 
 415:./FWLIB/src/stm32f4xx_dma2d.c ****   /* Configures the BG memory address */
 416:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->BGMAR = (DMA2D_BG_InitStruct->DMA2D_BGMA);
 541              		.loc 1 416 0
 542 0002 0268     		ldr	r2, [r0]
 543 0004 184B     		ldr	r3, .L36
 544 0006 5A61     		str	r2, [r3, #20]
 417:./FWLIB/src/stm32f4xx_dma2d.c **** 
 418:./FWLIB/src/stm32f4xx_dma2d.c ****   /* Configures the BG offset */
 419:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->BGOR &= ~(uint32_t)DMA2D_BGOR_LO;
 545              		.loc 1 419 0
 546 0008 9A69     		ldr	r2, [r3, #24]
 547 000a 22F47F52 		bic	r2, r2, #16320
 548 000e 22F03F02 		bic	r2, r2, #63
 549 0012 9A61     		str	r2, [r3, #24]
 420:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->BGOR |= (DMA2D_BG_InitStruct->DMA2D_BGO);
 550              		.loc 1 420 0
 551 0014 9A69     		ldr	r2, [r3, #24]
 552 0016 4168     		ldr	r1, [r0, #4]
ARM GAS  /tmp/ccGgNLyx.s 			page 18


 553 0018 0A43     		orrs	r2, r2, r1
 554 001a 9A61     		str	r2, [r3, #24]
 421:./FWLIB/src/stm32f4xx_dma2d.c **** 
 422:./FWLIB/src/stm32f4xx_dma2d.c ****   /* Configures background Pixel Format Convertor */
 423:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->BGPFCCR &= (uint32_t)PFCCR_MASK;
 555              		.loc 1 423 0
 556 001c 596A     		ldr	r1, [r3, #36]
 557 001e 134A     		ldr	r2, .L36+4
 558 0020 0A40     		ands	r2, r2, r1
 559 0022 5A62     		str	r2, [r3, #36]
 424:./FWLIB/src/stm32f4xx_dma2d.c ****   bg_clutcolormode = DMA2D_BG_InitStruct->DMA2D_BG_CLUT_CM << 4;
 560              		.loc 1 424 0
 561 0024 C768     		ldr	r7, [r0, #12]
 562              	.LVL39:
 425:./FWLIB/src/stm32f4xx_dma2d.c ****   bg_clutsize = DMA2D_BG_InitStruct->DMA2D_BG_CLUT_SIZE << 8;
 563              		.loc 1 425 0
 564 0026 0669     		ldr	r6, [r0, #16]
 565              	.LVL40:
 426:./FWLIB/src/stm32f4xx_dma2d.c ****   bg_alpha_mode = DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_MODE << 16;
 566              		.loc 1 426 0
 567 0028 4569     		ldr	r5, [r0, #20]
 568              	.LVL41:
 427:./FWLIB/src/stm32f4xx_dma2d.c ****   bg_alphavalue = DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_VALUE << 24;
 569              		.loc 1 427 0
 570 002a 8469     		ldr	r4, [r0, #24]
 571              	.LVL42:
 428:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->BGPFCCR |= (DMA2D_BG_InitStruct->DMA2D_BGCM | bg_clutcolormode | bg_clutsize | \
 572              		.loc 1 428 0
 573 002c 596A     		ldr	r1, [r3, #36]
 574 002e 8268     		ldr	r2, [r0, #8]
 575 0030 42EA0712 		orr	r2, r2, r7, lsl #4
 576 0034 42EA0622 		orr	r2, r2, r6, lsl #8
 577 0038 42EA0542 		orr	r2, r2, r5, lsl #16
 429:./FWLIB/src/stm32f4xx_dma2d.c ****                     bg_alpha_mode | bg_alphavalue);
 578              		.loc 1 429 0
 579 003c 42EA0462 		orr	r2, r2, r4, lsl #24
 428:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->BGPFCCR |= (DMA2D_BG_InitStruct->DMA2D_BGCM | bg_clutcolormode | bg_clutsize | \
 580              		.loc 1 428 0
 581 0040 0A43     		orrs	r2, r2, r1
 582 0042 5A62     		str	r2, [r3, #36]
 430:./FWLIB/src/stm32f4xx_dma2d.c **** 
 431:./FWLIB/src/stm32f4xx_dma2d.c ****   /* Configures background color */
 432:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->BGCOLR &= ~(DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | DMA2D_BGCOLR_RED);
 583              		.loc 1 432 0
 584 0044 9A6A     		ldr	r2, [r3, #40]
 585 0046 02F07F42 		and	r2, r2, #-16777216
 586 004a 9A62     		str	r2, [r3, #40]
 433:./FWLIB/src/stm32f4xx_dma2d.c ****   bg_colorgreen = DMA2D_BG_InitStruct->DMA2D_BGC_GREEN << 8;
 587              		.loc 1 433 0
 588 004c 056A     		ldr	r5, [r0, #32]
 589              	.LVL43:
 434:./FWLIB/src/stm32f4xx_dma2d.c ****   bg_colorred = DMA2D_BG_InitStruct->DMA2D_BGC_RED << 16;
 590              		.loc 1 434 0
 591 004e 446A     		ldr	r4, [r0, #36]
 592              	.LVL44:
 435:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->BGCOLR |= (DMA2D_BG_InitStruct->DMA2D_BGC_BLUE | bg_colorgreen | bg_colorred);
 593              		.loc 1 435 0
ARM GAS  /tmp/ccGgNLyx.s 			page 19


 594 0050 996A     		ldr	r1, [r3, #40]
 595 0052 C269     		ldr	r2, [r0, #28]
 596 0054 42EA0522 		orr	r2, r2, r5, lsl #8
 597 0058 42EA0442 		orr	r2, r2, r4, lsl #16
 598 005c 0A43     		orrs	r2, r2, r1
 599 005e 9A62     		str	r2, [r3, #40]
 436:./FWLIB/src/stm32f4xx_dma2d.c ****   
 437:./FWLIB/src/stm32f4xx_dma2d.c ****   /* Configures background CLUT memory address */
 438:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->BGCMAR = DMA2D_BG_InitStruct->DMA2D_BGCMAR;
 600              		.loc 1 438 0
 601 0060 826A     		ldr	r2, [r0, #40]
 602 0062 1A63     		str	r2, [r3, #48]
 439:./FWLIB/src/stm32f4xx_dma2d.c **** 
 440:./FWLIB/src/stm32f4xx_dma2d.c **** }
 603              		.loc 1 440 0
 604 0064 F0BC     		pop	{r4, r5, r6, r7}
 605              	.LCFI7:
 606              		.cfi_restore 7
 607              		.cfi_restore 6
 608              		.cfi_restore 5
 609              		.cfi_restore 4
 610              		.cfi_def_cfa_offset 0
 611              	.LVL45:
 612 0066 7047     		bx	lr
 613              	.L37:
 614              		.align	2
 615              	.L36:
 616 0068 00B00240 		.word	1073917952
 617 006c C000FC00 		.word	16515264
 618              		.cfi_endproc
 619              	.LFE120:
 621              		.section	.text.DMA2D_BG_StructInit,"ax",%progbits
 622              		.align	1
 623              		.global	DMA2D_BG_StructInit
 624              		.syntax unified
 625              		.thumb
 626              		.thumb_func
 627              		.fpu fpv4-sp-d16
 629              	DMA2D_BG_StructInit:
 630              	.LFB121:
 441:./FWLIB/src/stm32f4xx_dma2d.c **** 
 442:./FWLIB/src/stm32f4xx_dma2d.c **** /**
 443:./FWLIB/src/stm32f4xx_dma2d.c ****   * @brief  Fills each DMA2D_BGStruct member with its default value.
 444:./FWLIB/src/stm32f4xx_dma2d.c ****   * @param  DMA2D_BGStruct: pointer to a DMA2D_BGTypeDef structure which will
 445:./FWLIB/src/stm32f4xx_dma2d.c ****   *         be initialized.
 446:./FWLIB/src/stm32f4xx_dma2d.c ****   * @retval None
 447:./FWLIB/src/stm32f4xx_dma2d.c ****   */
 448:./FWLIB/src/stm32f4xx_dma2d.c **** void DMA2D_BG_StructInit(DMA2D_BG_InitTypeDef* DMA2D_BG_InitStruct)
 449:./FWLIB/src/stm32f4xx_dma2d.c **** {
 631              		.loc 1 449 0
 632              		.cfi_startproc
 633              		@ args = 0, pretend = 0, frame = 0
 634              		@ frame_needed = 0, uses_anonymous_args = 0
 635              		@ link register save eliminated.
 636              	.LVL46:
 450:./FWLIB/src/stm32f4xx_dma2d.c ****   /*!< Initialize the DMA2D background memory address */
 451:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_BG_InitStruct->DMA2D_BGMA = 0x00;
ARM GAS  /tmp/ccGgNLyx.s 			page 20


 637              		.loc 1 451 0
 638 0000 0023     		movs	r3, #0
 639 0002 0360     		str	r3, [r0]
 452:./FWLIB/src/stm32f4xx_dma2d.c **** 
 453:./FWLIB/src/stm32f4xx_dma2d.c ****   /*!< Initialize the DMA2D background offset */
 454:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_BG_InitStruct->DMA2D_BGO = 0x00;
 640              		.loc 1 454 0
 641 0004 4360     		str	r3, [r0, #4]
 455:./FWLIB/src/stm32f4xx_dma2d.c **** 
 456:./FWLIB/src/stm32f4xx_dma2d.c ****   /*!< Initialize the DMA2D background color mode */
 457:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_BG_InitStruct->DMA2D_BGCM = CM_ARGB8888;
 642              		.loc 1 457 0
 643 0006 8360     		str	r3, [r0, #8]
 458:./FWLIB/src/stm32f4xx_dma2d.c **** 
 459:./FWLIB/src/stm32f4xx_dma2d.c ****   /*!< Initialize the DMA2D background CLUT color mode */
 460:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_BG_InitStruct->DMA2D_BG_CLUT_CM = CLUT_CM_ARGB8888;
 644              		.loc 1 460 0
 645 0008 C360     		str	r3, [r0, #12]
 461:./FWLIB/src/stm32f4xx_dma2d.c **** 
 462:./FWLIB/src/stm32f4xx_dma2d.c ****   /*!< Initialize the DMA2D background CLUT size */
 463:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_BG_InitStruct->DMA2D_BG_CLUT_SIZE = 0x00;
 646              		.loc 1 463 0
 647 000a 0361     		str	r3, [r0, #16]
 464:./FWLIB/src/stm32f4xx_dma2d.c **** 
 465:./FWLIB/src/stm32f4xx_dma2d.c ****   /*!< Initialize the DMA2D background alpha mode */
 466:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_MODE = NO_MODIF_ALPHA_VALUE;
 648              		.loc 1 466 0
 649 000c 4361     		str	r3, [r0, #20]
 467:./FWLIB/src/stm32f4xx_dma2d.c **** 
 468:./FWLIB/src/stm32f4xx_dma2d.c ****   /*!< Initialize the DMA2D background alpha value */
 469:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_VALUE = 0x00;
 650              		.loc 1 469 0
 651 000e 8361     		str	r3, [r0, #24]
 470:./FWLIB/src/stm32f4xx_dma2d.c **** 
 471:./FWLIB/src/stm32f4xx_dma2d.c ****   /*!< Initialize the DMA2D background blue value */
 472:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_BG_InitStruct->DMA2D_BGC_BLUE = 0x00;
 652              		.loc 1 472 0
 653 0010 C361     		str	r3, [r0, #28]
 473:./FWLIB/src/stm32f4xx_dma2d.c **** 
 474:./FWLIB/src/stm32f4xx_dma2d.c ****   /*!< Initialize the DMA2D background green value */
 475:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_BG_InitStruct->DMA2D_BGC_GREEN = 0x00;
 654              		.loc 1 475 0
 655 0012 0362     		str	r3, [r0, #32]
 476:./FWLIB/src/stm32f4xx_dma2d.c **** 
 477:./FWLIB/src/stm32f4xx_dma2d.c ****   /*!< Initialize the DMA2D background red value */
 478:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_BG_InitStruct->DMA2D_BGC_RED = 0x00;
 656              		.loc 1 478 0
 657 0014 4362     		str	r3, [r0, #36]
 479:./FWLIB/src/stm32f4xx_dma2d.c **** 
 480:./FWLIB/src/stm32f4xx_dma2d.c ****   /*!< Initialize the DMA2D background CLUT memory address */
 481:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_BG_InitStruct->DMA2D_BGCMAR = 0x00;
 658              		.loc 1 481 0
 659 0016 8362     		str	r3, [r0, #40]
 482:./FWLIB/src/stm32f4xx_dma2d.c **** }
 660              		.loc 1 482 0
 661 0018 7047     		bx	lr
 662              		.cfi_endproc
ARM GAS  /tmp/ccGgNLyx.s 			page 21


 663              	.LFE121:
 665              		.section	.text.DMA2D_FGStart,"ax",%progbits
 666              		.align	1
 667              		.global	DMA2D_FGStart
 668              		.syntax unified
 669              		.thumb
 670              		.thumb_func
 671              		.fpu fpv4-sp-d16
 673              	DMA2D_FGStart:
 674              	.LFB122:
 483:./FWLIB/src/stm32f4xx_dma2d.c **** 
 484:./FWLIB/src/stm32f4xx_dma2d.c **** /**
 485:./FWLIB/src/stm32f4xx_dma2d.c ****   * @brief  Start the automatic loading of the CLUT or abort the transfer.
 486:./FWLIB/src/stm32f4xx_dma2d.c ****   * @param  NewState: new state of the DMA2D peripheral.
 487:./FWLIB/src/stm32f4xx_dma2d.c ****   *   This parameter can be: ENABLE or DISABLE.
 488:./FWLIB/src/stm32f4xx_dma2d.c ****   * @retval None
 489:./FWLIB/src/stm32f4xx_dma2d.c ****   */
 490:./FWLIB/src/stm32f4xx_dma2d.c **** 
 491:./FWLIB/src/stm32f4xx_dma2d.c **** void DMA2D_FGStart(FunctionalState NewState) 
 492:./FWLIB/src/stm32f4xx_dma2d.c **** {
 675              		.loc 1 492 0
 676              		.cfi_startproc
 677              		@ args = 0, pretend = 0, frame = 0
 678              		@ frame_needed = 0, uses_anonymous_args = 0
 679              		@ link register save eliminated.
 680              	.LVL47:
 493:./FWLIB/src/stm32f4xx_dma2d.c ****   /* Check the parameters */
 494:./FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 495:./FWLIB/src/stm32f4xx_dma2d.c **** 
 496:./FWLIB/src/stm32f4xx_dma2d.c ****   if (NewState != DISABLE)
 681              		.loc 1 496 0
 682 0000 28B9     		cbnz	r0, .L42
 497:./FWLIB/src/stm32f4xx_dma2d.c ****   {
 498:./FWLIB/src/stm32f4xx_dma2d.c ****     /* Start the automatic loading of the CLUT */
 499:./FWLIB/src/stm32f4xx_dma2d.c ****     DMA2D->FGPFCCR |= DMA2D_FGPFCCR_START;
 500:./FWLIB/src/stm32f4xx_dma2d.c ****   }
 501:./FWLIB/src/stm32f4xx_dma2d.c ****   else
 502:./FWLIB/src/stm32f4xx_dma2d.c ****   {
 503:./FWLIB/src/stm32f4xx_dma2d.c ****     /* abort the transfer */
 504:./FWLIB/src/stm32f4xx_dma2d.c ****     DMA2D->FGPFCCR &= (uint32_t)~DMA2D_FGPFCCR_START;
 683              		.loc 1 504 0
 684 0002 064A     		ldr	r2, .L43
 685 0004 D369     		ldr	r3, [r2, #28]
 686 0006 23F02003 		bic	r3, r3, #32
 687 000a D361     		str	r3, [r2, #28]
 505:./FWLIB/src/stm32f4xx_dma2d.c ****   }
 506:./FWLIB/src/stm32f4xx_dma2d.c **** }
 688              		.loc 1 506 0
 689 000c 7047     		bx	lr
 690              	.L42:
 499:./FWLIB/src/stm32f4xx_dma2d.c ****   }
 691              		.loc 1 499 0
 692 000e 034A     		ldr	r2, .L43
 693 0010 D369     		ldr	r3, [r2, #28]
 694 0012 43F02003 		orr	r3, r3, #32
 695 0016 D361     		str	r3, [r2, #28]
 696 0018 7047     		bx	lr
ARM GAS  /tmp/ccGgNLyx.s 			page 22


 697              	.L44:
 698 001a 00BF     		.align	2
 699              	.L43:
 700 001c 00B00240 		.word	1073917952
 701              		.cfi_endproc
 702              	.LFE122:
 704              		.section	.text.DMA2D_BGStart,"ax",%progbits
 705              		.align	1
 706              		.global	DMA2D_BGStart
 707              		.syntax unified
 708              		.thumb
 709              		.thumb_func
 710              		.fpu fpv4-sp-d16
 712              	DMA2D_BGStart:
 713              	.LFB123:
 507:./FWLIB/src/stm32f4xx_dma2d.c **** 
 508:./FWLIB/src/stm32f4xx_dma2d.c **** /**
 509:./FWLIB/src/stm32f4xx_dma2d.c ****   * @brief  Start the automatic loading of the CLUT or abort the transfer.
 510:./FWLIB/src/stm32f4xx_dma2d.c ****   * @param  NewState: new state of the DMA2D peripheral.
 511:./FWLIB/src/stm32f4xx_dma2d.c ****   *   This parameter can be: ENABLE or DISABLE.
 512:./FWLIB/src/stm32f4xx_dma2d.c ****   * @retval None
 513:./FWLIB/src/stm32f4xx_dma2d.c ****   */
 514:./FWLIB/src/stm32f4xx_dma2d.c ****   
 515:./FWLIB/src/stm32f4xx_dma2d.c **** void DMA2D_BGStart(FunctionalState NewState) 
 516:./FWLIB/src/stm32f4xx_dma2d.c **** {
 714              		.loc 1 516 0
 715              		.cfi_startproc
 716              		@ args = 0, pretend = 0, frame = 0
 717              		@ frame_needed = 0, uses_anonymous_args = 0
 718              		@ link register save eliminated.
 719              	.LVL48:
 517:./FWLIB/src/stm32f4xx_dma2d.c ****   /* Check the parameters */
 518:./FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 519:./FWLIB/src/stm32f4xx_dma2d.c ****   
 520:./FWLIB/src/stm32f4xx_dma2d.c ****   if (NewState != DISABLE)
 720              		.loc 1 520 0
 721 0000 28B9     		cbnz	r0, .L48
 521:./FWLIB/src/stm32f4xx_dma2d.c ****   {
 522:./FWLIB/src/stm32f4xx_dma2d.c ****     /* Start the automatic loading of the CLUT */
 523:./FWLIB/src/stm32f4xx_dma2d.c ****     DMA2D->BGPFCCR |= DMA2D_BGPFCCR_START;
 524:./FWLIB/src/stm32f4xx_dma2d.c ****   }
 525:./FWLIB/src/stm32f4xx_dma2d.c ****   else
 526:./FWLIB/src/stm32f4xx_dma2d.c ****   {
 527:./FWLIB/src/stm32f4xx_dma2d.c ****     /* abort the transfer */
 528:./FWLIB/src/stm32f4xx_dma2d.c ****     DMA2D->BGPFCCR &= (uint32_t)~DMA2D_BGPFCCR_START;
 722              		.loc 1 528 0
 723 0002 064A     		ldr	r2, .L49
 724 0004 536A     		ldr	r3, [r2, #36]
 725 0006 23F02003 		bic	r3, r3, #32
 726 000a 5362     		str	r3, [r2, #36]
 529:./FWLIB/src/stm32f4xx_dma2d.c ****   }
 530:./FWLIB/src/stm32f4xx_dma2d.c **** }
 727              		.loc 1 530 0
 728 000c 7047     		bx	lr
 729              	.L48:
 523:./FWLIB/src/stm32f4xx_dma2d.c ****   }
 730              		.loc 1 523 0
ARM GAS  /tmp/ccGgNLyx.s 			page 23


 731 000e 034A     		ldr	r2, .L49
 732 0010 536A     		ldr	r3, [r2, #36]
 733 0012 43F02003 		orr	r3, r3, #32
 734 0016 5362     		str	r3, [r2, #36]
 735 0018 7047     		bx	lr
 736              	.L50:
 737 001a 00BF     		.align	2
 738              	.L49:
 739 001c 00B00240 		.word	1073917952
 740              		.cfi_endproc
 741              	.LFE123:
 743              		.section	.text.DMA2D_DeadTimeConfig,"ax",%progbits
 744              		.align	1
 745              		.global	DMA2D_DeadTimeConfig
 746              		.syntax unified
 747              		.thumb
 748              		.thumb_func
 749              		.fpu fpv4-sp-d16
 751              	DMA2D_DeadTimeConfig:
 752              	.LFB124:
 531:./FWLIB/src/stm32f4xx_dma2d.c **** 
 532:./FWLIB/src/stm32f4xx_dma2d.c **** /**
 533:./FWLIB/src/stm32f4xx_dma2d.c ****   * @brief  Configures the DMA2D dead time.
 534:./FWLIB/src/stm32f4xx_dma2d.c ****   * @param  DMA2D_DeadTime: specifies the DMA2D dead time.
 535:./FWLIB/src/stm32f4xx_dma2d.c ****   *   This parameter can be one of the following values:
 536:./FWLIB/src/stm32f4xx_dma2d.c ****   * @retval None
 537:./FWLIB/src/stm32f4xx_dma2d.c ****   */
 538:./FWLIB/src/stm32f4xx_dma2d.c **** void DMA2D_DeadTimeConfig(uint32_t DMA2D_DeadTime, FunctionalState NewState)
 539:./FWLIB/src/stm32f4xx_dma2d.c **** {
 753              		.loc 1 539 0
 754              		.cfi_startproc
 755              		@ args = 0, pretend = 0, frame = 0
 756              		@ frame_needed = 0, uses_anonymous_args = 0
 757              		@ link register save eliminated.
 758              	.LVL49:
 540:./FWLIB/src/stm32f4xx_dma2d.c ****    uint32_t DeadTime;
 541:./FWLIB/src/stm32f4xx_dma2d.c **** 
 542:./FWLIB/src/stm32f4xx_dma2d.c ****   /* Check the parameters */
 543:./FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_DEAD_TIME(DMA2D_DeadTime));
 544:./FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 545:./FWLIB/src/stm32f4xx_dma2d.c **** 
 546:./FWLIB/src/stm32f4xx_dma2d.c ****   if (NewState != DISABLE)
 759              		.loc 1 546 0
 760 0000 29B9     		cbnz	r1, .L54
 547:./FWLIB/src/stm32f4xx_dma2d.c ****   {
 548:./FWLIB/src/stm32f4xx_dma2d.c ****     /* Enable and Configures the dead time */
 549:./FWLIB/src/stm32f4xx_dma2d.c ****     DMA2D->AMTCR &= (uint32_t)DEAD_MASK;
 550:./FWLIB/src/stm32f4xx_dma2d.c ****     DeadTime = DMA2D_DeadTime << 8;
 551:./FWLIB/src/stm32f4xx_dma2d.c ****     DMA2D->AMTCR |= (DeadTime | DMA2D_AMTCR_EN);
 552:./FWLIB/src/stm32f4xx_dma2d.c ****   }
 553:./FWLIB/src/stm32f4xx_dma2d.c ****   else
 554:./FWLIB/src/stm32f4xx_dma2d.c ****   {
 555:./FWLIB/src/stm32f4xx_dma2d.c ****      DMA2D->AMTCR &= ~(uint32_t)DMA2D_AMTCR_EN;
 761              		.loc 1 555 0
 762 0002 0A4A     		ldr	r2, .L55
 763 0004 D36C     		ldr	r3, [r2, #76]
 764 0006 23F00103 		bic	r3, r3, #1
ARM GAS  /tmp/ccGgNLyx.s 			page 24


 765 000a D364     		str	r3, [r2, #76]
 556:./FWLIB/src/stm32f4xx_dma2d.c ****   }
 557:./FWLIB/src/stm32f4xx_dma2d.c **** }
 766              		.loc 1 557 0
 767 000c 7047     		bx	lr
 768              	.L54:
 549:./FWLIB/src/stm32f4xx_dma2d.c ****     DeadTime = DMA2D_DeadTime << 8;
 769              		.loc 1 549 0
 770 000e 074A     		ldr	r2, .L55
 771 0010 D36C     		ldr	r3, [r2, #76]
 772 0012 23F47F43 		bic	r3, r3, #65280
 773 0016 23F00103 		bic	r3, r3, #1
 774 001a D364     		str	r3, [r2, #76]
 775              	.LVL50:
 551:./FWLIB/src/stm32f4xx_dma2d.c ****   }
 776              		.loc 1 551 0
 777 001c D36C     		ldr	r3, [r2, #76]
 778 001e 43EA0020 		orr	r0, r3, r0, lsl #8
 779              	.LVL51:
 780 0022 40F00100 		orr	r0, r0, #1
 781 0026 D064     		str	r0, [r2, #76]
 782 0028 7047     		bx	lr
 783              	.L56:
 784 002a 00BF     		.align	2
 785              	.L55:
 786 002c 00B00240 		.word	1073917952
 787              		.cfi_endproc
 788              	.LFE124:
 790              		.section	.text.DMA2D_LineWatermarkConfig,"ax",%progbits
 791              		.align	1
 792              		.global	DMA2D_LineWatermarkConfig
 793              		.syntax unified
 794              		.thumb
 795              		.thumb_func
 796              		.fpu fpv4-sp-d16
 798              	DMA2D_LineWatermarkConfig:
 799              	.LFB125:
 558:./FWLIB/src/stm32f4xx_dma2d.c **** 
 559:./FWLIB/src/stm32f4xx_dma2d.c **** /**
 560:./FWLIB/src/stm32f4xx_dma2d.c ****   * @brief  Define the configuration of the line watermark .
 561:./FWLIB/src/stm32f4xx_dma2d.c ****   * @param  DMA2D_LWatermarkConfig: Line Watermark configuration.
 562:./FWLIB/src/stm32f4xx_dma2d.c ****   * @retval None
 563:./FWLIB/src/stm32f4xx_dma2d.c ****   */
 564:./FWLIB/src/stm32f4xx_dma2d.c **** 
 565:./FWLIB/src/stm32f4xx_dma2d.c **** void DMA2D_LineWatermarkConfig(uint32_t DMA2D_LWatermarkConfig)
 566:./FWLIB/src/stm32f4xx_dma2d.c **** {
 800              		.loc 1 566 0
 801              		.cfi_startproc
 802              		@ args = 0, pretend = 0, frame = 0
 803              		@ frame_needed = 0, uses_anonymous_args = 0
 804              		@ link register save eliminated.
 805              	.LVL52:
 567:./FWLIB/src/stm32f4xx_dma2d.c ****   /* Check the parameters */
 568:./FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_LineWatermark(DMA2D_LWatermarkConfig));
 569:./FWLIB/src/stm32f4xx_dma2d.c **** 
 570:./FWLIB/src/stm32f4xx_dma2d.c ****   /* Sets the Line watermark configuration */
 571:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->LWR = (uint32_t)DMA2D_LWatermarkConfig;
ARM GAS  /tmp/ccGgNLyx.s 			page 25


 806              		.loc 1 571 0
 807 0000 014B     		ldr	r3, .L58
 808 0002 9864     		str	r0, [r3, #72]
 572:./FWLIB/src/stm32f4xx_dma2d.c **** }
 809              		.loc 1 572 0
 810 0004 7047     		bx	lr
 811              	.L59:
 812 0006 00BF     		.align	2
 813              	.L58:
 814 0008 00B00240 		.word	1073917952
 815              		.cfi_endproc
 816              	.LFE125:
 818              		.section	.text.DMA2D_ITConfig,"ax",%progbits
 819              		.align	1
 820              		.global	DMA2D_ITConfig
 821              		.syntax unified
 822              		.thumb
 823              		.thumb_func
 824              		.fpu fpv4-sp-d16
 826              	DMA2D_ITConfig:
 827              	.LFB126:
 573:./FWLIB/src/stm32f4xx_dma2d.c **** 
 574:./FWLIB/src/stm32f4xx_dma2d.c **** /**
 575:./FWLIB/src/stm32f4xx_dma2d.c ****   * @}
 576:./FWLIB/src/stm32f4xx_dma2d.c ****   */
 577:./FWLIB/src/stm32f4xx_dma2d.c **** 
 578:./FWLIB/src/stm32f4xx_dma2d.c **** /** @defgroup DMA2D_Group2 Interrupts and flags management functions
 579:./FWLIB/src/stm32f4xx_dma2d.c ****  *  @brief   Interrupts and flags management functions
 580:./FWLIB/src/stm32f4xx_dma2d.c ****  *
 581:./FWLIB/src/stm32f4xx_dma2d.c **** @verbatim
 582:./FWLIB/src/stm32f4xx_dma2d.c ****  ===============================================================================
 583:./FWLIB/src/stm32f4xx_dma2d.c ****             ##### Interrupts and flags management functions #####
 584:./FWLIB/src/stm32f4xx_dma2d.c ****  ===============================================================================
 585:./FWLIB/src/stm32f4xx_dma2d.c **** 
 586:./FWLIB/src/stm32f4xx_dma2d.c ****     [..] This section provides functions allowing to configure the DMA2D 
 587:./FWLIB/src/stm32f4xx_dma2d.c ****          Interrupts and to get the status and clear flags and Interrupts 
 588:./FWLIB/src/stm32f4xx_dma2d.c ****          pending bits.
 589:./FWLIB/src/stm32f4xx_dma2d.c ****     [..] The DMA2D provides 6 Interrupts sources and 6 Flags
 590:./FWLIB/src/stm32f4xx_dma2d.c ****     
 591:./FWLIB/src/stm32f4xx_dma2d.c ****     *** Flags ***
 592:./FWLIB/src/stm32f4xx_dma2d.c ****     =============
 593:./FWLIB/src/stm32f4xx_dma2d.c ****     [..]
 594:./FWLIB/src/stm32f4xx_dma2d.c ****       (+) DMA2D_FLAG_CE : Configuration Error Interrupt flag
 595:./FWLIB/src/stm32f4xx_dma2d.c ****       (+) DMA2D_FLAG_CAE: CLUT Access Error Interrupt flag
 596:./FWLIB/src/stm32f4xx_dma2d.c ****       (+) DMA2D_FLAG_TW:  Transfer Watermark Interrupt flag
 597:./FWLIB/src/stm32f4xx_dma2d.c ****       (+) DMA2D_FLAG_TC:  Transfer Complete interrupt flag
 598:./FWLIB/src/stm32f4xx_dma2d.c ****       (+) DMA2D_FLAG_TE:  Transfer Error interrupt flag
 599:./FWLIB/src/stm32f4xx_dma2d.c ****       (+) DMA2D_FLAG_CTC: CLUT Transfer Complete Interrupt flag
 600:./FWLIB/src/stm32f4xx_dma2d.c ****       
 601:./FWLIB/src/stm32f4xx_dma2d.c ****     *** Interrupts ***
 602:./FWLIB/src/stm32f4xx_dma2d.c ****     ==================
 603:./FWLIB/src/stm32f4xx_dma2d.c ****     [..]
 604:./FWLIB/src/stm32f4xx_dma2d.c ****       (+) DMA2D_IT_CE: Configuration Error Interrupt is generated when a wrong 
 605:./FWLIB/src/stm32f4xx_dma2d.c ****                        configuration is detected
 606:./FWLIB/src/stm32f4xx_dma2d.c ****       (+) DMA2D_IT_CAE: CLUT Access Error Interrupt
 607:./FWLIB/src/stm32f4xx_dma2d.c ****       (+) DMA2D_IT_TW: Transfer Watermark Interrupt is generated when 
 608:./FWLIB/src/stm32f4xx_dma2d.c ****                        the programmed watermark is reached 
ARM GAS  /tmp/ccGgNLyx.s 			page 26


 609:./FWLIB/src/stm32f4xx_dma2d.c ****       (+) DMA2D_IT_TE: Transfer Error interrupt is generated when the CPU trying 
 610:./FWLIB/src/stm32f4xx_dma2d.c ****                        to access the CLUT while a CLUT loading or a DMA2D1 transfer 
 611:./FWLIB/src/stm32f4xx_dma2d.c ****                        is on going       
 612:./FWLIB/src/stm32f4xx_dma2d.c ****       (+) DMA2D_IT_CTC: CLUT Transfer Complete Interrupt 
 613:./FWLIB/src/stm32f4xx_dma2d.c ****       (+) DMA2D_IT_TC: Transfer Complete interrupt         
 614:./FWLIB/src/stm32f4xx_dma2d.c **** @endverbatim
 615:./FWLIB/src/stm32f4xx_dma2d.c ****   * @{
 616:./FWLIB/src/stm32f4xx_dma2d.c ****   */
 617:./FWLIB/src/stm32f4xx_dma2d.c **** /**
 618:./FWLIB/src/stm32f4xx_dma2d.c ****   * @brief  Enables or disables the specified DMA2D's interrupts.
 619:./FWLIB/src/stm32f4xx_dma2d.c ****   * @param  DMA2D_IT: specifies the DMA2D interrupts sources to be enabled or disabled.
 620:./FWLIB/src/stm32f4xx_dma2d.c ****   *   This parameter can be any combination of the following values:
 621:./FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_IT_CE:   Configuration Error Interrupt Enable.
 622:./FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_IT_CTC:  CLUT Transfer Complete Interrupt Enable.
 623:./FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_IT_CAE:  CLUT Access Error Interrupt Enable.
 624:./FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_IT_TW:   Transfer Watermark Interrupt Enable.
 625:./FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_IT_TC:   Transfer Complete interrupt enable.
 626:./FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_IT_TE:   Transfer Error interrupt enable.
 627:./FWLIB/src/stm32f4xx_dma2d.c ****   * @param NewState: new state of the specified DMA2D interrupts.
 628:./FWLIB/src/stm32f4xx_dma2d.c ****   *   This parameter can be: ENABLE or DISABLE.
 629:./FWLIB/src/stm32f4xx_dma2d.c ****   * @retval None
 630:./FWLIB/src/stm32f4xx_dma2d.c ****   */
 631:./FWLIB/src/stm32f4xx_dma2d.c **** 
 632:./FWLIB/src/stm32f4xx_dma2d.c **** void DMA2D_ITConfig(uint32_t DMA2D_IT, FunctionalState NewState)
 633:./FWLIB/src/stm32f4xx_dma2d.c **** {
 828              		.loc 1 633 0
 829              		.cfi_startproc
 830              		@ args = 0, pretend = 0, frame = 0
 831              		@ frame_needed = 0, uses_anonymous_args = 0
 832              		@ link register save eliminated.
 833              	.LVL53:
 634:./FWLIB/src/stm32f4xx_dma2d.c ****   /* Check the parameters */
 635:./FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_IT(DMA2D_IT));
 636:./FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 637:./FWLIB/src/stm32f4xx_dma2d.c **** 
 638:./FWLIB/src/stm32f4xx_dma2d.c ****   if (NewState != DISABLE)
 834              		.loc 1 638 0
 835 0000 29B9     		cbnz	r1, .L63
 639:./FWLIB/src/stm32f4xx_dma2d.c ****   {
 640:./FWLIB/src/stm32f4xx_dma2d.c ****     /* Enable the selected DMA2D interrupts */
 641:./FWLIB/src/stm32f4xx_dma2d.c ****     DMA2D->CR |= DMA2D_IT;
 642:./FWLIB/src/stm32f4xx_dma2d.c ****   }
 643:./FWLIB/src/stm32f4xx_dma2d.c ****   else
 644:./FWLIB/src/stm32f4xx_dma2d.c ****   {
 645:./FWLIB/src/stm32f4xx_dma2d.c ****     /* Disable the selected DMA2D interrupts */
 646:./FWLIB/src/stm32f4xx_dma2d.c ****     DMA2D->CR &= (uint32_t)~DMA2D_IT;
 836              		.loc 1 646 0
 837 0002 054A     		ldr	r2, .L64
 838 0004 1368     		ldr	r3, [r2]
 839 0006 23EA0000 		bic	r0, r3, r0
 840              	.LVL54:
 841 000a 1060     		str	r0, [r2]
 647:./FWLIB/src/stm32f4xx_dma2d.c ****   }
 648:./FWLIB/src/stm32f4xx_dma2d.c **** }
 842              		.loc 1 648 0
 843 000c 7047     		bx	lr
 844              	.LVL55:
ARM GAS  /tmp/ccGgNLyx.s 			page 27


 845              	.L63:
 641:./FWLIB/src/stm32f4xx_dma2d.c ****   }
 846              		.loc 1 641 0
 847 000e 024A     		ldr	r2, .L64
 848 0010 1368     		ldr	r3, [r2]
 849 0012 1843     		orrs	r0, r0, r3
 850              	.LVL56:
 851 0014 1060     		str	r0, [r2]
 852 0016 7047     		bx	lr
 853              	.L65:
 854              		.align	2
 855              	.L64:
 856 0018 00B00240 		.word	1073917952
 857              		.cfi_endproc
 858              	.LFE126:
 860              		.section	.text.DMA2D_GetFlagStatus,"ax",%progbits
 861              		.align	1
 862              		.global	DMA2D_GetFlagStatus
 863              		.syntax unified
 864              		.thumb
 865              		.thumb_func
 866              		.fpu fpv4-sp-d16
 868              	DMA2D_GetFlagStatus:
 869              	.LFB127:
 649:./FWLIB/src/stm32f4xx_dma2d.c **** 
 650:./FWLIB/src/stm32f4xx_dma2d.c **** /**
 651:./FWLIB/src/stm32f4xx_dma2d.c ****   * @brief  Checks whether the specified DMA2D's flag is set or not.
 652:./FWLIB/src/stm32f4xx_dma2d.c ****   * @param  DMA2D_FLAG: specifies the flag to check.
 653:./FWLIB/src/stm32f4xx_dma2d.c ****   *   This parameter can be one of the following values:
 654:./FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_FLAG_CE:   Configuration Error Interrupt flag.
 655:./FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_FLAG_CTC:  CLUT Transfer Complete Interrupt flag.
 656:./FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_FLAG_CAE:  CLUT Access Error Interrupt flag.
 657:./FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_FLAG_TW:   Transfer Watermark Interrupt flag.
 658:./FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_FLAG_TC:   Transfer Complete interrupt flag.
 659:./FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_FLAG_TE:   Transfer Error interrupt flag.
 660:./FWLIB/src/stm32f4xx_dma2d.c ****   * @retval The new state of DMA2D_FLAG (SET or RESET).
 661:./FWLIB/src/stm32f4xx_dma2d.c ****   */
 662:./FWLIB/src/stm32f4xx_dma2d.c **** 
 663:./FWLIB/src/stm32f4xx_dma2d.c **** FlagStatus DMA2D_GetFlagStatus(uint32_t DMA2D_FLAG)
 664:./FWLIB/src/stm32f4xx_dma2d.c **** {
 870              		.loc 1 664 0
 871              		.cfi_startproc
 872              		@ args = 0, pretend = 0, frame = 0
 873              		@ frame_needed = 0, uses_anonymous_args = 0
 874              		@ link register save eliminated.
 875              	.LVL57:
 665:./FWLIB/src/stm32f4xx_dma2d.c ****   FlagStatus bitstatus = RESET;
 666:./FWLIB/src/stm32f4xx_dma2d.c ****   
 667:./FWLIB/src/stm32f4xx_dma2d.c ****   /* Check the parameters */
 668:./FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_GET_FLAG(DMA2D_FLAG));
 669:./FWLIB/src/stm32f4xx_dma2d.c ****   
 670:./FWLIB/src/stm32f4xx_dma2d.c ****   /* Check the status of the specified DMA2D flag */
 671:./FWLIB/src/stm32f4xx_dma2d.c ****   if (((DMA2D->ISR) & DMA2D_FLAG) != (uint32_t)RESET)
 876              		.loc 1 671 0
 877 0000 034B     		ldr	r3, .L70
 878 0002 5B68     		ldr	r3, [r3, #4]
 879 0004 0342     		tst	r3, r0
ARM GAS  /tmp/ccGgNLyx.s 			page 28


 880 0006 01D1     		bne	.L69
 672:./FWLIB/src/stm32f4xx_dma2d.c ****   {
 673:./FWLIB/src/stm32f4xx_dma2d.c ****     /* DMA2D_FLAG is set */
 674:./FWLIB/src/stm32f4xx_dma2d.c ****     bitstatus = SET;
 675:./FWLIB/src/stm32f4xx_dma2d.c ****   }
 676:./FWLIB/src/stm32f4xx_dma2d.c ****   else
 677:./FWLIB/src/stm32f4xx_dma2d.c ****   {
 678:./FWLIB/src/stm32f4xx_dma2d.c ****     /* DMA2D_FLAG is reset */
 679:./FWLIB/src/stm32f4xx_dma2d.c ****     bitstatus = RESET;
 881              		.loc 1 679 0
 882 0008 0020     		movs	r0, #0
 883              	.LVL58:
 680:./FWLIB/src/stm32f4xx_dma2d.c ****   }
 681:./FWLIB/src/stm32f4xx_dma2d.c ****   /* Return the DMA2D_FLAG status */
 682:./FWLIB/src/stm32f4xx_dma2d.c ****   return bitstatus;
 683:./FWLIB/src/stm32f4xx_dma2d.c **** }
 884              		.loc 1 683 0
 885 000a 7047     		bx	lr
 886              	.LVL59:
 887              	.L69:
 674:./FWLIB/src/stm32f4xx_dma2d.c ****   }
 888              		.loc 1 674 0
 889 000c 0120     		movs	r0, #1
 890              	.LVL60:
 891 000e 7047     		bx	lr
 892              	.L71:
 893              		.align	2
 894              	.L70:
 895 0010 00B00240 		.word	1073917952
 896              		.cfi_endproc
 897              	.LFE127:
 899              		.section	.text.DMA2D_ClearFlag,"ax",%progbits
 900              		.align	1
 901              		.global	DMA2D_ClearFlag
 902              		.syntax unified
 903              		.thumb
 904              		.thumb_func
 905              		.fpu fpv4-sp-d16
 907              	DMA2D_ClearFlag:
 908              	.LFB128:
 684:./FWLIB/src/stm32f4xx_dma2d.c **** 
 685:./FWLIB/src/stm32f4xx_dma2d.c **** /**
 686:./FWLIB/src/stm32f4xx_dma2d.c ****   * @brief  Clears the DMA2D's pending flags.
 687:./FWLIB/src/stm32f4xx_dma2d.c ****   * @param  DMA2D_FLAG: specifies the flag to clear.
 688:./FWLIB/src/stm32f4xx_dma2d.c ****   *   This parameter can be any combination of the following values:
 689:./FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_FLAG_CE:   Configuration Error Interrupt flag.
 690:./FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_FLAG_CTC:  CLUT Transfer Complete Interrupt flag.
 691:./FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_FLAG_CAE:  CLUT Access Error Interrupt flag.
 692:./FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_FLAG_TW:   Transfer Watermark Interrupt flag.
 693:./FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_FLAG_TC:   Transfer Complete interrupt flag.
 694:./FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_FLAG_TE:   Transfer Error interrupt flag.
 695:./FWLIB/src/stm32f4xx_dma2d.c ****   * @retval None
 696:./FWLIB/src/stm32f4xx_dma2d.c ****   */
 697:./FWLIB/src/stm32f4xx_dma2d.c **** void DMA2D_ClearFlag(uint32_t DMA2D_FLAG)
 698:./FWLIB/src/stm32f4xx_dma2d.c **** {
 909              		.loc 1 698 0
 910              		.cfi_startproc
ARM GAS  /tmp/ccGgNLyx.s 			page 29


 911              		@ args = 0, pretend = 0, frame = 0
 912              		@ frame_needed = 0, uses_anonymous_args = 0
 913              		@ link register save eliminated.
 914              	.LVL61:
 699:./FWLIB/src/stm32f4xx_dma2d.c ****   /* Check the parameters */
 700:./FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_GET_FLAG(DMA2D_FLAG));
 701:./FWLIB/src/stm32f4xx_dma2d.c ****     
 702:./FWLIB/src/stm32f4xx_dma2d.c ****   /* Clear the corresponding DMA2D flag */
 703:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->IFCR = (uint32_t)DMA2D_FLAG;
 915              		.loc 1 703 0
 916 0000 014B     		ldr	r3, .L73
 917 0002 9860     		str	r0, [r3, #8]
 704:./FWLIB/src/stm32f4xx_dma2d.c **** }
 918              		.loc 1 704 0
 919 0004 7047     		bx	lr
 920              	.L74:
 921 0006 00BF     		.align	2
 922              	.L73:
 923 0008 00B00240 		.word	1073917952
 924              		.cfi_endproc
 925              	.LFE128:
 927              		.section	.text.DMA2D_GetITStatus,"ax",%progbits
 928              		.align	1
 929              		.global	DMA2D_GetITStatus
 930              		.syntax unified
 931              		.thumb
 932              		.thumb_func
 933              		.fpu fpv4-sp-d16
 935              	DMA2D_GetITStatus:
 936              	.LFB129:
 705:./FWLIB/src/stm32f4xx_dma2d.c **** 
 706:./FWLIB/src/stm32f4xx_dma2d.c **** /**
 707:./FWLIB/src/stm32f4xx_dma2d.c ****   * @brief  Checks whether the specified DMA2D's interrupt has occurred or not.
 708:./FWLIB/src/stm32f4xx_dma2d.c ****   * @param  DMA2D_IT: specifies the DMA2D interrupts sources to check.
 709:./FWLIB/src/stm32f4xx_dma2d.c ****   *   This parameter can be one of the following values:
 710:./FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_IT_CE:   Configuration Error Interrupt Enable.
 711:./FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_IT_CTC:  CLUT Transfer Complete Interrupt Enable.
 712:./FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_IT_CAE:  CLUT Access Error Interrupt Enable.
 713:./FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_IT_TW:   Transfer Watermark Interrupt Enable.
 714:./FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_IT_TC:   Transfer Complete interrupt enable.
 715:./FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_IT_TE:   Transfer Error interrupt enable.
 716:./FWLIB/src/stm32f4xx_dma2d.c ****   * @retval The new state of the DMA2D_IT (SET or RESET).
 717:./FWLIB/src/stm32f4xx_dma2d.c ****   */
 718:./FWLIB/src/stm32f4xx_dma2d.c **** ITStatus DMA2D_GetITStatus(uint32_t DMA2D_IT)
 719:./FWLIB/src/stm32f4xx_dma2d.c **** {
 937              		.loc 1 719 0
 938              		.cfi_startproc
 939              		@ args = 0, pretend = 0, frame = 0
 940              		@ frame_needed = 0, uses_anonymous_args = 0
 941              		@ link register save eliminated.
 942              	.LVL62:
 720:./FWLIB/src/stm32f4xx_dma2d.c ****   ITStatus bitstatus = RESET;
 721:./FWLIB/src/stm32f4xx_dma2d.c ****   uint32_t DMA2D_IT_FLAG = DMA2D_IT >> 8;
 722:./FWLIB/src/stm32f4xx_dma2d.c ****   
 723:./FWLIB/src/stm32f4xx_dma2d.c ****   /* Check the parameters */
 724:./FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_IT(DMA2D_IT));
 725:./FWLIB/src/stm32f4xx_dma2d.c **** 
ARM GAS  /tmp/ccGgNLyx.s 			page 30


 726:./FWLIB/src/stm32f4xx_dma2d.c ****   if ((DMA2D->ISR & DMA2D_IT_FLAG) != (uint32_t)RESET)
 943              		.loc 1 726 0
 944 0000 074B     		ldr	r3, .L80
 945 0002 5B68     		ldr	r3, [r3, #4]
 946 0004 13EA1023 		ands	r3, r3, r0, lsr #8
 947 0008 07D0     		beq	.L78
 727:./FWLIB/src/stm32f4xx_dma2d.c ****   {
 728:./FWLIB/src/stm32f4xx_dma2d.c ****     bitstatus = SET;
 948              		.loc 1 728 0
 949 000a 0123     		movs	r3, #1
 950              	.L76:
 951              	.LVL63:
 729:./FWLIB/src/stm32f4xx_dma2d.c ****   }
 730:./FWLIB/src/stm32f4xx_dma2d.c ****   else
 731:./FWLIB/src/stm32f4xx_dma2d.c ****   {
 732:./FWLIB/src/stm32f4xx_dma2d.c ****     bitstatus = RESET;
 733:./FWLIB/src/stm32f4xx_dma2d.c ****   }
 734:./FWLIB/src/stm32f4xx_dma2d.c ****   
 735:./FWLIB/src/stm32f4xx_dma2d.c ****   if (((DMA2D->CR & DMA2D_IT) != (uint32_t)RESET) && (bitstatus != (uint32_t)RESET))
 952              		.loc 1 735 0
 953 000c 044A     		ldr	r2, .L80
 954 000e 1268     		ldr	r2, [r2]
 955 0010 0242     		tst	r2, r0
 956 0012 00D1     		bne	.L77
 736:./FWLIB/src/stm32f4xx_dma2d.c ****   {
 737:./FWLIB/src/stm32f4xx_dma2d.c ****     bitstatus = SET;
 738:./FWLIB/src/stm32f4xx_dma2d.c ****   }
 739:./FWLIB/src/stm32f4xx_dma2d.c ****   else
 740:./FWLIB/src/stm32f4xx_dma2d.c ****   {
 741:./FWLIB/src/stm32f4xx_dma2d.c ****     bitstatus = RESET;
 957              		.loc 1 741 0
 958 0014 0023     		movs	r3, #0
 959              	.LVL64:
 960              	.L77:
 742:./FWLIB/src/stm32f4xx_dma2d.c ****   }
 743:./FWLIB/src/stm32f4xx_dma2d.c ****   return bitstatus;
 744:./FWLIB/src/stm32f4xx_dma2d.c **** }
 961              		.loc 1 744 0
 962 0016 1846     		mov	r0, r3
 963              	.LVL65:
 964 0018 7047     		bx	lr
 965              	.LVL66:
 966              	.L78:
 732:./FWLIB/src/stm32f4xx_dma2d.c ****   }
 967              		.loc 1 732 0
 968 001a 0023     		movs	r3, #0
 969 001c F6E7     		b	.L76
 970              	.L81:
 971 001e 00BF     		.align	2
 972              	.L80:
 973 0020 00B00240 		.word	1073917952
 974              		.cfi_endproc
 975              	.LFE129:
 977              		.section	.text.DMA2D_ClearITPendingBit,"ax",%progbits
 978              		.align	1
 979              		.global	DMA2D_ClearITPendingBit
 980              		.syntax unified
ARM GAS  /tmp/ccGgNLyx.s 			page 31


 981              		.thumb
 982              		.thumb_func
 983              		.fpu fpv4-sp-d16
 985              	DMA2D_ClearITPendingBit:
 986              	.LFB130:
 745:./FWLIB/src/stm32f4xx_dma2d.c **** 
 746:./FWLIB/src/stm32f4xx_dma2d.c **** /**
 747:./FWLIB/src/stm32f4xx_dma2d.c ****   * @brief  Clears the DMA2D's interrupt pending bits.
 748:./FWLIB/src/stm32f4xx_dma2d.c ****   * @param  DMA2D_IT: specifies the interrupt pending bit to clear.
 749:./FWLIB/src/stm32f4xx_dma2d.c ****   *   This parameter can be any combination of the following values:
 750:./FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_IT_CE:   Configuration Error Interrupt.
 751:./FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_IT_CTC:  CLUT Transfer Complete Interrupt.
 752:./FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_IT_CAE:  CLUT Access Error Interrupt.
 753:./FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_IT_TW:   Transfer Watermark Interrupt.
 754:./FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_IT_TC:   Transfer Complete interrupt.
 755:./FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_IT_TE:   Transfer Error interrupt.
 756:./FWLIB/src/stm32f4xx_dma2d.c ****   * @retval None
 757:./FWLIB/src/stm32f4xx_dma2d.c ****   */
 758:./FWLIB/src/stm32f4xx_dma2d.c **** void DMA2D_ClearITPendingBit(uint32_t DMA2D_IT)
 759:./FWLIB/src/stm32f4xx_dma2d.c **** {
 987              		.loc 1 759 0
 988              		.cfi_startproc
 989              		@ args = 0, pretend = 0, frame = 0
 990              		@ frame_needed = 0, uses_anonymous_args = 0
 991              		@ link register save eliminated.
 992              	.LVL67:
 760:./FWLIB/src/stm32f4xx_dma2d.c ****   /* Check the parameters */
 761:./FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_IT(DMA2D_IT));
 762:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_IT = DMA2D_IT >> 8;
 993              		.loc 1 762 0
 994 0000 000A     		lsrs	r0, r0, #8
 995              	.LVL68:
 763:./FWLIB/src/stm32f4xx_dma2d.c ****     
 764:./FWLIB/src/stm32f4xx_dma2d.c ****   /* Clear the corresponding DMA2D Interrupt */
 765:./FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->IFCR = (uint32_t)DMA2D_IT;
 996              		.loc 1 765 0
 997 0002 014B     		ldr	r3, .L83
 998 0004 9860     		str	r0, [r3, #8]
 766:./FWLIB/src/stm32f4xx_dma2d.c **** }
 999              		.loc 1 766 0
 1000 0006 7047     		bx	lr
 1001              	.L84:
 1002              		.align	2
 1003              	.L83:
 1004 0008 00B00240 		.word	1073917952
 1005              		.cfi_endproc
 1006              	.LFE130:
 1008              		.text
 1009              	.Letext0:
 1010              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1011              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1012              		.file 4 "build/lnInclude/core_cm4.h"
 1013              		.file 5 "build/lnInclude/system_stm32f4xx.h"
 1014              		.file 6 "build/lnInclude/stm32f4xx.h"
 1015              		.file 7 "build/lnInclude/stm32f4xx_dma2d.h"
 1016              		.file 8 "build/lnInclude/stm32f4xx_rcc.h"
ARM GAS  /tmp/ccGgNLyx.s 			page 32


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_dma2d.c
     /tmp/ccGgNLyx.s:18     .text.DMA2D_DeInit:0000000000000000 $t
     /tmp/ccGgNLyx.s:25     .text.DMA2D_DeInit:0000000000000000 DMA2D_DeInit
     /tmp/ccGgNLyx.s:53     .text.DMA2D_Init:0000000000000000 $t
     /tmp/ccGgNLyx.s:60     .text.DMA2D_Init:0000000000000000 DMA2D_Init
     /tmp/ccGgNLyx.s:226    .text.DMA2D_Init:00000000000000bc $d
     /tmp/ccGgNLyx.s:231    .text.DMA2D_StructInit:0000000000000000 $t
     /tmp/ccGgNLyx.s:238    .text.DMA2D_StructInit:0000000000000000 DMA2D_StructInit
     /tmp/ccGgNLyx.s:273    .text.DMA2D_StartTransfer:0000000000000000 $t
     /tmp/ccGgNLyx.s:280    .text.DMA2D_StartTransfer:0000000000000000 DMA2D_StartTransfer
     /tmp/ccGgNLyx.s:297    .text.DMA2D_StartTransfer:000000000000000c $d
     /tmp/ccGgNLyx.s:302    .text.DMA2D_AbortTransfer:0000000000000000 $t
     /tmp/ccGgNLyx.s:309    .text.DMA2D_AbortTransfer:0000000000000000 DMA2D_AbortTransfer
     /tmp/ccGgNLyx.s:326    .text.DMA2D_AbortTransfer:000000000000000c $d
     /tmp/ccGgNLyx.s:331    .text.DMA2D_Suspend:0000000000000000 $t
     /tmp/ccGgNLyx.s:338    .text.DMA2D_Suspend:0000000000000000 DMA2D_Suspend
     /tmp/ccGgNLyx.s:365    .text.DMA2D_Suspend:000000000000001c $d
     /tmp/ccGgNLyx.s:370    .text.DMA2D_FGConfig:0000000000000000 $t
     /tmp/ccGgNLyx.s:377    .text.DMA2D_FGConfig:0000000000000000 DMA2D_FGConfig
     /tmp/ccGgNLyx.s:468    .text.DMA2D_FGConfig:0000000000000068 $d
     /tmp/ccGgNLyx.s:474    .text.DMA2D_FG_StructInit:0000000000000000 $t
     /tmp/ccGgNLyx.s:481    .text.DMA2D_FG_StructInit:0000000000000000 DMA2D_FG_StructInit
     /tmp/ccGgNLyx.s:518    .text.DMA2D_BGConfig:0000000000000000 $t
     /tmp/ccGgNLyx.s:525    .text.DMA2D_BGConfig:0000000000000000 DMA2D_BGConfig
     /tmp/ccGgNLyx.s:616    .text.DMA2D_BGConfig:0000000000000068 $d
     /tmp/ccGgNLyx.s:622    .text.DMA2D_BG_StructInit:0000000000000000 $t
     /tmp/ccGgNLyx.s:629    .text.DMA2D_BG_StructInit:0000000000000000 DMA2D_BG_StructInit
     /tmp/ccGgNLyx.s:666    .text.DMA2D_FGStart:0000000000000000 $t
     /tmp/ccGgNLyx.s:673    .text.DMA2D_FGStart:0000000000000000 DMA2D_FGStart
     /tmp/ccGgNLyx.s:700    .text.DMA2D_FGStart:000000000000001c $d
     /tmp/ccGgNLyx.s:705    .text.DMA2D_BGStart:0000000000000000 $t
     /tmp/ccGgNLyx.s:712    .text.DMA2D_BGStart:0000000000000000 DMA2D_BGStart
     /tmp/ccGgNLyx.s:739    .text.DMA2D_BGStart:000000000000001c $d
     /tmp/ccGgNLyx.s:744    .text.DMA2D_DeadTimeConfig:0000000000000000 $t
     /tmp/ccGgNLyx.s:751    .text.DMA2D_DeadTimeConfig:0000000000000000 DMA2D_DeadTimeConfig
     /tmp/ccGgNLyx.s:786    .text.DMA2D_DeadTimeConfig:000000000000002c $d
     /tmp/ccGgNLyx.s:791    .text.DMA2D_LineWatermarkConfig:0000000000000000 $t
     /tmp/ccGgNLyx.s:798    .text.DMA2D_LineWatermarkConfig:0000000000000000 DMA2D_LineWatermarkConfig
     /tmp/ccGgNLyx.s:814    .text.DMA2D_LineWatermarkConfig:0000000000000008 $d
     /tmp/ccGgNLyx.s:819    .text.DMA2D_ITConfig:0000000000000000 $t
     /tmp/ccGgNLyx.s:826    .text.DMA2D_ITConfig:0000000000000000 DMA2D_ITConfig
     /tmp/ccGgNLyx.s:856    .text.DMA2D_ITConfig:0000000000000018 $d
     /tmp/ccGgNLyx.s:861    .text.DMA2D_GetFlagStatus:0000000000000000 $t
     /tmp/ccGgNLyx.s:868    .text.DMA2D_GetFlagStatus:0000000000000000 DMA2D_GetFlagStatus
     /tmp/ccGgNLyx.s:895    .text.DMA2D_GetFlagStatus:0000000000000010 $d
     /tmp/ccGgNLyx.s:900    .text.DMA2D_ClearFlag:0000000000000000 $t
     /tmp/ccGgNLyx.s:907    .text.DMA2D_ClearFlag:0000000000000000 DMA2D_ClearFlag
     /tmp/ccGgNLyx.s:923    .text.DMA2D_ClearFlag:0000000000000008 $d
     /tmp/ccGgNLyx.s:928    .text.DMA2D_GetITStatus:0000000000000000 $t
     /tmp/ccGgNLyx.s:935    .text.DMA2D_GetITStatus:0000000000000000 DMA2D_GetITStatus
     /tmp/ccGgNLyx.s:973    .text.DMA2D_GetITStatus:0000000000000020 $d
     /tmp/ccGgNLyx.s:978    .text.DMA2D_ClearITPendingBit:0000000000000000 $t
     /tmp/ccGgNLyx.s:985    .text.DMA2D_ClearITPendingBit:0000000000000000 DMA2D_ClearITPendingBit
     /tmp/ccGgNLyx.s:1004   .text.DMA2D_ClearITPendingBit:0000000000000008 $d

UNDEFINED SYMBOLS
ARM GAS  /tmp/ccGgNLyx.s 			page 33


RCC_AHB1PeriphResetCmd
