ARM GAS  /tmp/ccZn4OOM.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_hash_sha1.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.HASH_SHA1,"ax",%progbits
  18              		.align	1
  19              		.global	HASH_SHA1
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	HASH_SHA1:
  26              	.LFB112:
  27              		.file 1 "./FWLIB/src/stm32f4xx_hash_sha1.c"
   1:./FWLIB/src/stm32f4xx_hash_sha1.c **** /**
   2:./FWLIB/src/stm32f4xx_hash_sha1.c ****   ******************************************************************************
   3:./FWLIB/src/stm32f4xx_hash_sha1.c ****   * @file    stm32f4xx_hash_sha1.c
   4:./FWLIB/src/stm32f4xx_hash_sha1.c ****   * @author  MCD Application Team
   5:./FWLIB/src/stm32f4xx_hash_sha1.c ****   * @version V1.4.0
   6:./FWLIB/src/stm32f4xx_hash_sha1.c ****   * @date    04-August-2014
   7:./FWLIB/src/stm32f4xx_hash_sha1.c ****   * @brief   This file provides high level functions to compute the HASH SHA1 and
   8:./FWLIB/src/stm32f4xx_hash_sha1.c ****   *          HMAC SHA1 Digest of an input message.
   9:./FWLIB/src/stm32f4xx_hash_sha1.c ****   *          It uses the stm32f4xx_hash.c/.h drivers to access the STM32F4xx HASH
  10:./FWLIB/src/stm32f4xx_hash_sha1.c ****   *          peripheral.
  11:./FWLIB/src/stm32f4xx_hash_sha1.c ****   *
  12:./FWLIB/src/stm32f4xx_hash_sha1.c **** @verbatim
  13:./FWLIB/src/stm32f4xx_hash_sha1.c ****  ===================================================================
  14:./FWLIB/src/stm32f4xx_hash_sha1.c ****                  ##### How to use this driver #####
  15:./FWLIB/src/stm32f4xx_hash_sha1.c ****  ===================================================================
  16:./FWLIB/src/stm32f4xx_hash_sha1.c ****  [..]
  17:./FWLIB/src/stm32f4xx_hash_sha1.c ****    (#) Enable The HASH controller clock using 
  18:./FWLIB/src/stm32f4xx_hash_sha1.c ****        RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_HASH, ENABLE); function.
  19:./FWLIB/src/stm32f4xx_hash_sha1.c ****   
  20:./FWLIB/src/stm32f4xx_hash_sha1.c ****    (#) Calculate the HASH SHA1 Digest using HASH_SHA1() function.
  21:./FWLIB/src/stm32f4xx_hash_sha1.c ****   
  22:./FWLIB/src/stm32f4xx_hash_sha1.c ****    (#) Calculate the HMAC SHA1 Digest using HMAC_SHA1() function.
  23:./FWLIB/src/stm32f4xx_hash_sha1.c ****   
  24:./FWLIB/src/stm32f4xx_hash_sha1.c **** @endverbatim
  25:./FWLIB/src/stm32f4xx_hash_sha1.c ****   *
  26:./FWLIB/src/stm32f4xx_hash_sha1.c ****   ******************************************************************************
  27:./FWLIB/src/stm32f4xx_hash_sha1.c ****   * @attention
  28:./FWLIB/src/stm32f4xx_hash_sha1.c ****   *
  29:./FWLIB/src/stm32f4xx_hash_sha1.c ****   * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
  30:./FWLIB/src/stm32f4xx_hash_sha1.c ****   *
  31:./FWLIB/src/stm32f4xx_hash_sha1.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
ARM GAS  /tmp/ccZn4OOM.s 			page 2


  32:./FWLIB/src/stm32f4xx_hash_sha1.c ****   * You may not use this file except in compliance with the License.
  33:./FWLIB/src/stm32f4xx_hash_sha1.c ****   * You may obtain a copy of the License at:
  34:./FWLIB/src/stm32f4xx_hash_sha1.c ****   *
  35:./FWLIB/src/stm32f4xx_hash_sha1.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  36:./FWLIB/src/stm32f4xx_hash_sha1.c ****   *
  37:./FWLIB/src/stm32f4xx_hash_sha1.c ****   * Unless required by applicable law or agreed to in writing, software 
  38:./FWLIB/src/stm32f4xx_hash_sha1.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  39:./FWLIB/src/stm32f4xx_hash_sha1.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  40:./FWLIB/src/stm32f4xx_hash_sha1.c ****   * See the License for the specific language governing permissions and
  41:./FWLIB/src/stm32f4xx_hash_sha1.c ****   * limitations under the License.
  42:./FWLIB/src/stm32f4xx_hash_sha1.c ****   *
  43:./FWLIB/src/stm32f4xx_hash_sha1.c ****   ******************************************************************************
  44:./FWLIB/src/stm32f4xx_hash_sha1.c ****   */
  45:./FWLIB/src/stm32f4xx_hash_sha1.c **** 
  46:./FWLIB/src/stm32f4xx_hash_sha1.c **** /* Includes ------------------------------------------------------------------*/
  47:./FWLIB/src/stm32f4xx_hash_sha1.c **** #include "stm32f4xx_hash.h"
  48:./FWLIB/src/stm32f4xx_hash_sha1.c **** 
  49:./FWLIB/src/stm32f4xx_hash_sha1.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  50:./FWLIB/src/stm32f4xx_hash_sha1.c ****   * @{
  51:./FWLIB/src/stm32f4xx_hash_sha1.c ****   */
  52:./FWLIB/src/stm32f4xx_hash_sha1.c **** 
  53:./FWLIB/src/stm32f4xx_hash_sha1.c **** /** @defgroup HASH 
  54:./FWLIB/src/stm32f4xx_hash_sha1.c ****   * @brief HASH driver modules
  55:./FWLIB/src/stm32f4xx_hash_sha1.c ****   * @{
  56:./FWLIB/src/stm32f4xx_hash_sha1.c ****   */
  57:./FWLIB/src/stm32f4xx_hash_sha1.c **** 
  58:./FWLIB/src/stm32f4xx_hash_sha1.c **** /* Private typedef -----------------------------------------------------------*/
  59:./FWLIB/src/stm32f4xx_hash_sha1.c **** /* Private define ------------------------------------------------------------*/
  60:./FWLIB/src/stm32f4xx_hash_sha1.c **** #define SHA1BUSY_TIMEOUT    ((uint32_t) 0x00010000)
  61:./FWLIB/src/stm32f4xx_hash_sha1.c **** 
  62:./FWLIB/src/stm32f4xx_hash_sha1.c **** /* Private macro -------------------------------------------------------------*/
  63:./FWLIB/src/stm32f4xx_hash_sha1.c **** /* Private variables ---------------------------------------------------------*/
  64:./FWLIB/src/stm32f4xx_hash_sha1.c **** /* Private function prototypes -----------------------------------------------*/
  65:./FWLIB/src/stm32f4xx_hash_sha1.c **** /* Private functions ---------------------------------------------------------*/
  66:./FWLIB/src/stm32f4xx_hash_sha1.c **** 
  67:./FWLIB/src/stm32f4xx_hash_sha1.c **** /** @defgroup HASH_Private_Functions
  68:./FWLIB/src/stm32f4xx_hash_sha1.c ****   * @{
  69:./FWLIB/src/stm32f4xx_hash_sha1.c ****   */ 
  70:./FWLIB/src/stm32f4xx_hash_sha1.c **** 
  71:./FWLIB/src/stm32f4xx_hash_sha1.c **** /** @defgroup HASH_Group6 High Level SHA1 functions
  72:./FWLIB/src/stm32f4xx_hash_sha1.c ****  *  @brief   High Level SHA1 Hash and HMAC functions 
  73:./FWLIB/src/stm32f4xx_hash_sha1.c ****  *
  74:./FWLIB/src/stm32f4xx_hash_sha1.c **** @verbatim   
  75:./FWLIB/src/stm32f4xx_hash_sha1.c ****  ===============================================================================
  76:./FWLIB/src/stm32f4xx_hash_sha1.c ****                ##### High Level SHA1 Hash and HMAC functions #####
  77:./FWLIB/src/stm32f4xx_hash_sha1.c ****  ===============================================================================
  78:./FWLIB/src/stm32f4xx_hash_sha1.c **** 
  79:./FWLIB/src/stm32f4xx_hash_sha1.c **** 
  80:./FWLIB/src/stm32f4xx_hash_sha1.c **** @endverbatim
  81:./FWLIB/src/stm32f4xx_hash_sha1.c ****   * @{
  82:./FWLIB/src/stm32f4xx_hash_sha1.c ****   */
  83:./FWLIB/src/stm32f4xx_hash_sha1.c **** 
  84:./FWLIB/src/stm32f4xx_hash_sha1.c **** /**
  85:./FWLIB/src/stm32f4xx_hash_sha1.c ****   * @brief  Compute the HASH SHA1 digest.
  86:./FWLIB/src/stm32f4xx_hash_sha1.c ****   * @param  Input: pointer to the Input buffer to be treated.
  87:./FWLIB/src/stm32f4xx_hash_sha1.c ****   * @param  Ilen: length of the Input buffer.
  88:./FWLIB/src/stm32f4xx_hash_sha1.c ****   * @param  Output: the returned digest
ARM GAS  /tmp/ccZn4OOM.s 			page 3


  89:./FWLIB/src/stm32f4xx_hash_sha1.c ****   * @retval An ErrorStatus enumeration value:
  90:./FWLIB/src/stm32f4xx_hash_sha1.c ****   *          - SUCCESS: digest computation done
  91:./FWLIB/src/stm32f4xx_hash_sha1.c ****   *          - ERROR: digest computation failed
  92:./FWLIB/src/stm32f4xx_hash_sha1.c ****   */
  93:./FWLIB/src/stm32f4xx_hash_sha1.c **** ErrorStatus HASH_SHA1(uint8_t *Input, uint32_t Ilen, uint8_t Output[20])
  94:./FWLIB/src/stm32f4xx_hash_sha1.c **** {
  28              		.loc 1 94 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 56
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 20
  36              		.cfi_offset 4, -20
  37              		.cfi_offset 5, -16
  38              		.cfi_offset 6, -12
  39              		.cfi_offset 7, -8
  40              		.cfi_offset 14, -4
  41 0002 8FB0     		sub	sp, sp, #60
  42              	.LCFI1:
  43              		.cfi_def_cfa_offset 80
  44 0004 0F46     		mov	r7, r1
  45 0006 1646     		mov	r6, r2
  95:./FWLIB/src/stm32f4xx_hash_sha1.c ****   HASH_InitTypeDef SHA1_HASH_InitStructure;
  96:./FWLIB/src/stm32f4xx_hash_sha1.c ****   HASH_MsgDigest SHA1_MessageDigest;
  97:./FWLIB/src/stm32f4xx_hash_sha1.c ****   __IO uint16_t nbvalidbitsdata = 0;
  46              		.loc 1 97 0
  47 0008 0024     		movs	r4, #0
  48 000a ADF80640 		strh	r4, [sp, #6]	@ movhi
  49              	.LVL1:
  98:./FWLIB/src/stm32f4xx_hash_sha1.c ****   uint32_t i = 0;
  99:./FWLIB/src/stm32f4xx_hash_sha1.c ****   __IO uint32_t counter = 0;
  50              		.loc 1 99 0
  51 000e 0094     		str	r4, [sp]
  52              	.LVL2:
 100:./FWLIB/src/stm32f4xx_hash_sha1.c ****   uint32_t busystatus = 0;
 101:./FWLIB/src/stm32f4xx_hash_sha1.c ****   ErrorStatus status = SUCCESS;
 102:./FWLIB/src/stm32f4xx_hash_sha1.c ****   uint32_t inputaddr  = (uint32_t)Input;
  53              		.loc 1 102 0
  54 0010 0546     		mov	r5, r0
  55              	.LVL3:
 103:./FWLIB/src/stm32f4xx_hash_sha1.c ****   uint32_t outputaddr = (uint32_t)Output;
 104:./FWLIB/src/stm32f4xx_hash_sha1.c **** 
 105:./FWLIB/src/stm32f4xx_hash_sha1.c ****   /* Number of valid bits in last word of the Input data */
 106:./FWLIB/src/stm32f4xx_hash_sha1.c ****   nbvalidbitsdata = 8 * (Ilen % 4);
  56              		.loc 1 106 0
  57 0012 01F00303 		and	r3, r1, #3
  58 0016 DB00     		lsls	r3, r3, #3
  59 0018 ADF80630 		strh	r3, [sp, #6]	@ movhi
 107:./FWLIB/src/stm32f4xx_hash_sha1.c **** 
 108:./FWLIB/src/stm32f4xx_hash_sha1.c ****   /* HASH peripheral initialization */
 109:./FWLIB/src/stm32f4xx_hash_sha1.c ****   HASH_DeInit();
  60              		.loc 1 109 0
  61 001c FFF7FEFF 		bl	HASH_DeInit
  62              	.LVL4:
 110:./FWLIB/src/stm32f4xx_hash_sha1.c **** 
ARM GAS  /tmp/ccZn4OOM.s 			page 4


 111:./FWLIB/src/stm32f4xx_hash_sha1.c ****   /* HASH Configuration */
 112:./FWLIB/src/stm32f4xx_hash_sha1.c ****   SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
  63              		.loc 1 112 0
  64 0020 0A94     		str	r4, [sp, #40]
 113:./FWLIB/src/stm32f4xx_hash_sha1.c ****   SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
  65              		.loc 1 113 0
  66 0022 0B94     		str	r4, [sp, #44]
 114:./FWLIB/src/stm32f4xx_hash_sha1.c ****   SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
  67              		.loc 1 114 0
  68 0024 2023     		movs	r3, #32
  69 0026 0C93     		str	r3, [sp, #48]
 115:./FWLIB/src/stm32f4xx_hash_sha1.c ****   HASH_Init(&SHA1_HASH_InitStructure);
  70              		.loc 1 115 0
  71 0028 0AA8     		add	r0, sp, #40
  72 002a FFF7FEFF 		bl	HASH_Init
  73              	.LVL5:
 116:./FWLIB/src/stm32f4xx_hash_sha1.c **** 
 117:./FWLIB/src/stm32f4xx_hash_sha1.c ****   /* Configure the number of valid bits in last word of the data */
 118:./FWLIB/src/stm32f4xx_hash_sha1.c ****   HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
  74              		.loc 1 118 0
  75 002e BDF80600 		ldrh	r0, [sp, #6]
  76 0032 FFF7FEFF 		bl	HASH_SetLastWordValidBitsNbr
  77              	.LVL6:
 119:./FWLIB/src/stm32f4xx_hash_sha1.c **** 
 120:./FWLIB/src/stm32f4xx_hash_sha1.c ****   /* Write the Input block in the IN FIFO */
 121:./FWLIB/src/stm32f4xx_hash_sha1.c ****   for(i=0; i<Ilen; i+=4)
  78              		.loc 1 121 0
  79 0036 04E0     		b	.L2
  80              	.LVL7:
  81              	.L3:
 122:./FWLIB/src/stm32f4xx_hash_sha1.c ****   {
 123:./FWLIB/src/stm32f4xx_hash_sha1.c ****     HASH_DataIn(*(uint32_t*)inputaddr);
  82              		.loc 1 123 0 discriminator 3
  83 0038 55F8040B 		ldr	r0, [r5], #4
  84              	.LVL8:
  85 003c FFF7FEFF 		bl	HASH_DataIn
  86              	.LVL9:
 121:./FWLIB/src/stm32f4xx_hash_sha1.c ****   {
  87              		.loc 1 121 0 discriminator 3
  88 0040 0434     		adds	r4, r4, #4
  89              	.LVL10:
  90              	.L2:
 121:./FWLIB/src/stm32f4xx_hash_sha1.c ****   {
  91              		.loc 1 121 0 is_stmt 0 discriminator 1
  92 0042 BC42     		cmp	r4, r7
  93 0044 F8D3     		bcc	.L3
 124:./FWLIB/src/stm32f4xx_hash_sha1.c ****     inputaddr+=4;
 125:./FWLIB/src/stm32f4xx_hash_sha1.c ****   }
 126:./FWLIB/src/stm32f4xx_hash_sha1.c **** 
 127:./FWLIB/src/stm32f4xx_hash_sha1.c ****   /* Start the HASH processor */
 128:./FWLIB/src/stm32f4xx_hash_sha1.c ****   HASH_StartDigest();
  94              		.loc 1 128 0 is_stmt 1
  95 0046 FFF7FEFF 		bl	HASH_StartDigest
  96              	.LVL11:
  97              	.L5:
 129:./FWLIB/src/stm32f4xx_hash_sha1.c **** 
 130:./FWLIB/src/stm32f4xx_hash_sha1.c ****   /* wait until the Busy flag is RESET */
ARM GAS  /tmp/ccZn4OOM.s 			page 5


 131:./FWLIB/src/stm32f4xx_hash_sha1.c ****   do
 132:./FWLIB/src/stm32f4xx_hash_sha1.c ****   {
 133:./FWLIB/src/stm32f4xx_hash_sha1.c ****     busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
  98              		.loc 1 133 0 discriminator 2
  99 004a 0820     		movs	r0, #8
 100 004c FFF7FEFF 		bl	HASH_GetFlagStatus
 101              	.LVL12:
 102 0050 0246     		mov	r2, r0
 103              	.LVL13:
 134:./FWLIB/src/stm32f4xx_hash_sha1.c ****     counter++;
 104              		.loc 1 134 0 discriminator 2
 105 0052 009B     		ldr	r3, [sp]
 106 0054 0133     		adds	r3, r3, #1
 107 0056 0093     		str	r3, [sp]
 135:./FWLIB/src/stm32f4xx_hash_sha1.c ****   }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 108              		.loc 1 135 0 discriminator 2
 109 0058 009B     		ldr	r3, [sp]
 110 005a B3F5803F 		cmp	r3, #65536
 111 005e 01D0     		beq	.L4
 112              		.loc 1 135 0 is_stmt 0 discriminator 1
 113 0060 0028     		cmp	r0, #0
 114 0062 F2D1     		bne	.L5
 115              	.L4:
 136:./FWLIB/src/stm32f4xx_hash_sha1.c **** 
 137:./FWLIB/src/stm32f4xx_hash_sha1.c ****   if (busystatus != RESET)
 116              		.loc 1 137 0 is_stmt 1
 117 0064 12B1     		cbz	r2, .L9
 138:./FWLIB/src/stm32f4xx_hash_sha1.c ****   {
 139:./FWLIB/src/stm32f4xx_hash_sha1.c ****      status = ERROR;
 118              		.loc 1 139 0
 119 0066 0020     		movs	r0, #0
 120              	.LVL14:
 121              	.L6:
 140:./FWLIB/src/stm32f4xx_hash_sha1.c ****   }
 141:./FWLIB/src/stm32f4xx_hash_sha1.c ****   else
 142:./FWLIB/src/stm32f4xx_hash_sha1.c ****   {
 143:./FWLIB/src/stm32f4xx_hash_sha1.c ****     /* Read the message digest */
 144:./FWLIB/src/stm32f4xx_hash_sha1.c ****     HASH_GetDigest(&SHA1_MessageDigest);
 145:./FWLIB/src/stm32f4xx_hash_sha1.c ****     *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
 146:./FWLIB/src/stm32f4xx_hash_sha1.c ****     outputaddr+=4;
 147:./FWLIB/src/stm32f4xx_hash_sha1.c ****     *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[1]);
 148:./FWLIB/src/stm32f4xx_hash_sha1.c ****     outputaddr+=4;
 149:./FWLIB/src/stm32f4xx_hash_sha1.c ****     *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
 150:./FWLIB/src/stm32f4xx_hash_sha1.c ****     outputaddr+=4;
 151:./FWLIB/src/stm32f4xx_hash_sha1.c ****     *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
 152:./FWLIB/src/stm32f4xx_hash_sha1.c ****     outputaddr+=4;
 153:./FWLIB/src/stm32f4xx_hash_sha1.c ****     *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
 154:./FWLIB/src/stm32f4xx_hash_sha1.c ****   }
 155:./FWLIB/src/stm32f4xx_hash_sha1.c ****   return status;
 156:./FWLIB/src/stm32f4xx_hash_sha1.c **** }
 122              		.loc 1 156 0
 123 0068 0FB0     		add	sp, sp, #60
 124              	.LCFI2:
 125              		.cfi_remember_state
 126              		.cfi_def_cfa_offset 20
 127              		@ sp needed
 128 006a F0BD     		pop	{r4, r5, r6, r7, pc}
ARM GAS  /tmp/ccZn4OOM.s 			page 6


 129              	.LVL15:
 130              	.L9:
 131              	.LCFI3:
 132              		.cfi_restore_state
 144:./FWLIB/src/stm32f4xx_hash_sha1.c ****     *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
 133              		.loc 1 144 0
 134 006c 02A8     		add	r0, sp, #8
 135              	.LVL16:
 136 006e FFF7FEFF 		bl	HASH_GetDigest
 137              	.LVL17:
 145:./FWLIB/src/stm32f4xx_hash_sha1.c ****     outputaddr+=4;
 138              		.loc 1 145 0
 139 0072 029B     		ldr	r3, [sp, #8]
 140              	.LVL18:
 141              	.LBB22:
 142              	.LBB23:
 143              		.file 2 "build/lnInclude/core_cmInstr.h"
   1:build/lnInclude/core_cmInstr.h **** /**************************************************************************//**
   2:build/lnInclude/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:build/lnInclude/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:build/lnInclude/core_cmInstr.h ****  * @version  V3.20
   5:build/lnInclude/core_cmInstr.h ****  * @date     05. March 2013
   6:build/lnInclude/core_cmInstr.h ****  *
   7:build/lnInclude/core_cmInstr.h ****  * @note
   8:build/lnInclude/core_cmInstr.h ****  *
   9:build/lnInclude/core_cmInstr.h ****  ******************************************************************************/
  10:build/lnInclude/core_cmInstr.h **** /* Copyright (c) 2009 - 2013 ARM LIMITED
  11:build/lnInclude/core_cmInstr.h **** 
  12:build/lnInclude/core_cmInstr.h ****    All rights reserved.
  13:build/lnInclude/core_cmInstr.h ****    Redistribution and use in source and binary forms, with or without
  14:build/lnInclude/core_cmInstr.h ****    modification, are permitted provided that the following conditions are met:
  15:build/lnInclude/core_cmInstr.h ****    - Redistributions of source code must retain the above copyright
  16:build/lnInclude/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer.
  17:build/lnInclude/core_cmInstr.h ****    - Redistributions in binary form must reproduce the above copyright
  18:build/lnInclude/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer in the
  19:build/lnInclude/core_cmInstr.h ****      documentation and/or other materials provided with the distribution.
  20:build/lnInclude/core_cmInstr.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:build/lnInclude/core_cmInstr.h ****      to endorse or promote products derived from this software without
  22:build/lnInclude/core_cmInstr.h ****      specific prior written permission.
  23:build/lnInclude/core_cmInstr.h ****    *
  24:build/lnInclude/core_cmInstr.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:build/lnInclude/core_cmInstr.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:build/lnInclude/core_cmInstr.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:build/lnInclude/core_cmInstr.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:build/lnInclude/core_cmInstr.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:build/lnInclude/core_cmInstr.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:build/lnInclude/core_cmInstr.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:build/lnInclude/core_cmInstr.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:build/lnInclude/core_cmInstr.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:build/lnInclude/core_cmInstr.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:build/lnInclude/core_cmInstr.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:build/lnInclude/core_cmInstr.h ****    ---------------------------------------------------------------------------*/
  36:build/lnInclude/core_cmInstr.h **** 
  37:build/lnInclude/core_cmInstr.h **** 
  38:build/lnInclude/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  39:build/lnInclude/core_cmInstr.h **** #define __CORE_CMINSTR_H
  40:build/lnInclude/core_cmInstr.h **** 
ARM GAS  /tmp/ccZn4OOM.s 			page 7


  41:build/lnInclude/core_cmInstr.h **** 
  42:build/lnInclude/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  43:build/lnInclude/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  44:build/lnInclude/core_cmInstr.h ****   Access to dedicated instructions
  45:build/lnInclude/core_cmInstr.h ****   @{
  46:build/lnInclude/core_cmInstr.h **** */
  47:build/lnInclude/core_cmInstr.h **** 
  48:build/lnInclude/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:build/lnInclude/core_cmInstr.h **** /* ARM armcc specific functions */
  50:build/lnInclude/core_cmInstr.h **** 
  51:build/lnInclude/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  52:build/lnInclude/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:build/lnInclude/core_cmInstr.h **** #endif
  54:build/lnInclude/core_cmInstr.h **** 
  55:build/lnInclude/core_cmInstr.h **** 
  56:build/lnInclude/core_cmInstr.h **** /** \brief  No Operation
  57:build/lnInclude/core_cmInstr.h **** 
  58:build/lnInclude/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  59:build/lnInclude/core_cmInstr.h ****  */
  60:build/lnInclude/core_cmInstr.h **** #define __NOP                             __nop
  61:build/lnInclude/core_cmInstr.h **** 
  62:build/lnInclude/core_cmInstr.h **** 
  63:build/lnInclude/core_cmInstr.h **** /** \brief  Wait For Interrupt
  64:build/lnInclude/core_cmInstr.h **** 
  65:build/lnInclude/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  66:build/lnInclude/core_cmInstr.h ****     until one of a number of events occurs.
  67:build/lnInclude/core_cmInstr.h ****  */
  68:build/lnInclude/core_cmInstr.h **** #define __WFI                             __wfi
  69:build/lnInclude/core_cmInstr.h **** 
  70:build/lnInclude/core_cmInstr.h **** 
  71:build/lnInclude/core_cmInstr.h **** /** \brief  Wait For Event
  72:build/lnInclude/core_cmInstr.h **** 
  73:build/lnInclude/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  74:build/lnInclude/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  75:build/lnInclude/core_cmInstr.h ****  */
  76:build/lnInclude/core_cmInstr.h **** #define __WFE                             __wfe
  77:build/lnInclude/core_cmInstr.h **** 
  78:build/lnInclude/core_cmInstr.h **** 
  79:build/lnInclude/core_cmInstr.h **** /** \brief  Send Event
  80:build/lnInclude/core_cmInstr.h **** 
  81:build/lnInclude/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  82:build/lnInclude/core_cmInstr.h ****  */
  83:build/lnInclude/core_cmInstr.h **** #define __SEV                             __sev
  84:build/lnInclude/core_cmInstr.h **** 
  85:build/lnInclude/core_cmInstr.h **** 
  86:build/lnInclude/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  87:build/lnInclude/core_cmInstr.h **** 
  88:build/lnInclude/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  89:build/lnInclude/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  90:build/lnInclude/core_cmInstr.h ****     memory, after the instruction has been completed.
  91:build/lnInclude/core_cmInstr.h ****  */
  92:build/lnInclude/core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  93:build/lnInclude/core_cmInstr.h **** 
  94:build/lnInclude/core_cmInstr.h **** 
  95:build/lnInclude/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  96:build/lnInclude/core_cmInstr.h **** 
  97:build/lnInclude/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
ARM GAS  /tmp/ccZn4OOM.s 			page 8


  98:build/lnInclude/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  99:build/lnInclude/core_cmInstr.h ****  */
 100:build/lnInclude/core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
 101:build/lnInclude/core_cmInstr.h **** 
 102:build/lnInclude/core_cmInstr.h **** 
 103:build/lnInclude/core_cmInstr.h **** /** \brief  Data Memory Barrier
 104:build/lnInclude/core_cmInstr.h **** 
 105:build/lnInclude/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 106:build/lnInclude/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 107:build/lnInclude/core_cmInstr.h ****  */
 108:build/lnInclude/core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
 109:build/lnInclude/core_cmInstr.h **** 
 110:build/lnInclude/core_cmInstr.h **** 
 111:build/lnInclude/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 112:build/lnInclude/core_cmInstr.h **** 
 113:build/lnInclude/core_cmInstr.h ****     This function reverses the byte order in integer value.
 114:build/lnInclude/core_cmInstr.h **** 
 115:build/lnInclude/core_cmInstr.h ****     \param [in]    value  Value to reverse
 116:build/lnInclude/core_cmInstr.h ****     \return               Reversed value
 117:build/lnInclude/core_cmInstr.h ****  */
 118:build/lnInclude/core_cmInstr.h **** #define __REV                             __rev
 119:build/lnInclude/core_cmInstr.h **** 
 120:build/lnInclude/core_cmInstr.h **** 
 121:build/lnInclude/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 122:build/lnInclude/core_cmInstr.h **** 
 123:build/lnInclude/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 124:build/lnInclude/core_cmInstr.h **** 
 125:build/lnInclude/core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:build/lnInclude/core_cmInstr.h ****     \return               Reversed value
 127:build/lnInclude/core_cmInstr.h ****  */
 128:build/lnInclude/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 129:build/lnInclude/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 130:build/lnInclude/core_cmInstr.h **** {
 131:build/lnInclude/core_cmInstr.h ****   rev16 r0, r0
 132:build/lnInclude/core_cmInstr.h ****   bx lr
 133:build/lnInclude/core_cmInstr.h **** }
 134:build/lnInclude/core_cmInstr.h **** #endif
 135:build/lnInclude/core_cmInstr.h **** 
 136:build/lnInclude/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 137:build/lnInclude/core_cmInstr.h **** 
 138:build/lnInclude/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 139:build/lnInclude/core_cmInstr.h **** 
 140:build/lnInclude/core_cmInstr.h ****     \param [in]    value  Value to reverse
 141:build/lnInclude/core_cmInstr.h ****     \return               Reversed value
 142:build/lnInclude/core_cmInstr.h ****  */
 143:build/lnInclude/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 144:build/lnInclude/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 145:build/lnInclude/core_cmInstr.h **** {
 146:build/lnInclude/core_cmInstr.h ****   revsh r0, r0
 147:build/lnInclude/core_cmInstr.h ****   bx lr
 148:build/lnInclude/core_cmInstr.h **** }
 149:build/lnInclude/core_cmInstr.h **** #endif
 150:build/lnInclude/core_cmInstr.h **** 
 151:build/lnInclude/core_cmInstr.h **** 
 152:build/lnInclude/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 153:build/lnInclude/core_cmInstr.h **** 
 154:build/lnInclude/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
ARM GAS  /tmp/ccZn4OOM.s 			page 9


 155:build/lnInclude/core_cmInstr.h **** 
 156:build/lnInclude/core_cmInstr.h ****     \param [in]    value  Value to rotate
 157:build/lnInclude/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 158:build/lnInclude/core_cmInstr.h ****     \return               Rotated value
 159:build/lnInclude/core_cmInstr.h ****  */
 160:build/lnInclude/core_cmInstr.h **** #define __ROR                             __ror
 161:build/lnInclude/core_cmInstr.h **** 
 162:build/lnInclude/core_cmInstr.h **** 
 163:build/lnInclude/core_cmInstr.h **** /** \brief  Breakpoint
 164:build/lnInclude/core_cmInstr.h **** 
 165:build/lnInclude/core_cmInstr.h ****     This function causes the processor to enter Debug state.
 166:build/lnInclude/core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 167:build/lnInclude/core_cmInstr.h **** 
 168:build/lnInclude/core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 169:build/lnInclude/core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 170:build/lnInclude/core_cmInstr.h ****  */
 171:build/lnInclude/core_cmInstr.h **** #define __BKPT(value)                       __breakpoint(value)
 172:build/lnInclude/core_cmInstr.h **** 
 173:build/lnInclude/core_cmInstr.h **** 
 174:build/lnInclude/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 175:build/lnInclude/core_cmInstr.h **** 
 176:build/lnInclude/core_cmInstr.h **** /** \brief  Reverse bit order of value
 177:build/lnInclude/core_cmInstr.h **** 
 178:build/lnInclude/core_cmInstr.h ****     This function reverses the bit order of the given value.
 179:build/lnInclude/core_cmInstr.h **** 
 180:build/lnInclude/core_cmInstr.h ****     \param [in]    value  Value to reverse
 181:build/lnInclude/core_cmInstr.h ****     \return               Reversed value
 182:build/lnInclude/core_cmInstr.h ****  */
 183:build/lnInclude/core_cmInstr.h **** #define __RBIT                            __rbit
 184:build/lnInclude/core_cmInstr.h **** 
 185:build/lnInclude/core_cmInstr.h **** 
 186:build/lnInclude/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 187:build/lnInclude/core_cmInstr.h **** 
 188:build/lnInclude/core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 189:build/lnInclude/core_cmInstr.h **** 
 190:build/lnInclude/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 191:build/lnInclude/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 192:build/lnInclude/core_cmInstr.h ****  */
 193:build/lnInclude/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 194:build/lnInclude/core_cmInstr.h **** 
 195:build/lnInclude/core_cmInstr.h **** 
 196:build/lnInclude/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 197:build/lnInclude/core_cmInstr.h **** 
 198:build/lnInclude/core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 199:build/lnInclude/core_cmInstr.h **** 
 200:build/lnInclude/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 201:build/lnInclude/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 202:build/lnInclude/core_cmInstr.h ****  */
 203:build/lnInclude/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 204:build/lnInclude/core_cmInstr.h **** 
 205:build/lnInclude/core_cmInstr.h **** 
 206:build/lnInclude/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 207:build/lnInclude/core_cmInstr.h **** 
 208:build/lnInclude/core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 209:build/lnInclude/core_cmInstr.h **** 
 210:build/lnInclude/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 211:build/lnInclude/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
ARM GAS  /tmp/ccZn4OOM.s 			page 10


 212:build/lnInclude/core_cmInstr.h ****  */
 213:build/lnInclude/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 214:build/lnInclude/core_cmInstr.h **** 
 215:build/lnInclude/core_cmInstr.h **** 
 216:build/lnInclude/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 217:build/lnInclude/core_cmInstr.h **** 
 218:build/lnInclude/core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 219:build/lnInclude/core_cmInstr.h **** 
 220:build/lnInclude/core_cmInstr.h ****     \param [in]  value  Value to store
 221:build/lnInclude/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 222:build/lnInclude/core_cmInstr.h ****     \return          0  Function succeeded
 223:build/lnInclude/core_cmInstr.h ****     \return          1  Function failed
 224:build/lnInclude/core_cmInstr.h ****  */
 225:build/lnInclude/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 226:build/lnInclude/core_cmInstr.h **** 
 227:build/lnInclude/core_cmInstr.h **** 
 228:build/lnInclude/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 229:build/lnInclude/core_cmInstr.h **** 
 230:build/lnInclude/core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 231:build/lnInclude/core_cmInstr.h **** 
 232:build/lnInclude/core_cmInstr.h ****     \param [in]  value  Value to store
 233:build/lnInclude/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 234:build/lnInclude/core_cmInstr.h ****     \return          0  Function succeeded
 235:build/lnInclude/core_cmInstr.h ****     \return          1  Function failed
 236:build/lnInclude/core_cmInstr.h ****  */
 237:build/lnInclude/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 238:build/lnInclude/core_cmInstr.h **** 
 239:build/lnInclude/core_cmInstr.h **** 
 240:build/lnInclude/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 241:build/lnInclude/core_cmInstr.h **** 
 242:build/lnInclude/core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 243:build/lnInclude/core_cmInstr.h **** 
 244:build/lnInclude/core_cmInstr.h ****     \param [in]  value  Value to store
 245:build/lnInclude/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 246:build/lnInclude/core_cmInstr.h ****     \return          0  Function succeeded
 247:build/lnInclude/core_cmInstr.h ****     \return          1  Function failed
 248:build/lnInclude/core_cmInstr.h ****  */
 249:build/lnInclude/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 250:build/lnInclude/core_cmInstr.h **** 
 251:build/lnInclude/core_cmInstr.h **** 
 252:build/lnInclude/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 253:build/lnInclude/core_cmInstr.h **** 
 254:build/lnInclude/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 255:build/lnInclude/core_cmInstr.h **** 
 256:build/lnInclude/core_cmInstr.h ****  */
 257:build/lnInclude/core_cmInstr.h **** #define __CLREX                           __clrex
 258:build/lnInclude/core_cmInstr.h **** 
 259:build/lnInclude/core_cmInstr.h **** 
 260:build/lnInclude/core_cmInstr.h **** /** \brief  Signed Saturate
 261:build/lnInclude/core_cmInstr.h **** 
 262:build/lnInclude/core_cmInstr.h ****     This function saturates a signed value.
 263:build/lnInclude/core_cmInstr.h **** 
 264:build/lnInclude/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 265:build/lnInclude/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 266:build/lnInclude/core_cmInstr.h ****     \return             Saturated value
 267:build/lnInclude/core_cmInstr.h ****  */
 268:build/lnInclude/core_cmInstr.h **** #define __SSAT                            __ssat
ARM GAS  /tmp/ccZn4OOM.s 			page 11


 269:build/lnInclude/core_cmInstr.h **** 
 270:build/lnInclude/core_cmInstr.h **** 
 271:build/lnInclude/core_cmInstr.h **** /** \brief  Unsigned Saturate
 272:build/lnInclude/core_cmInstr.h **** 
 273:build/lnInclude/core_cmInstr.h ****     This function saturates an unsigned value.
 274:build/lnInclude/core_cmInstr.h **** 
 275:build/lnInclude/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 276:build/lnInclude/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 277:build/lnInclude/core_cmInstr.h ****     \return             Saturated value
 278:build/lnInclude/core_cmInstr.h ****  */
 279:build/lnInclude/core_cmInstr.h **** #define __USAT                            __usat
 280:build/lnInclude/core_cmInstr.h **** 
 281:build/lnInclude/core_cmInstr.h **** 
 282:build/lnInclude/core_cmInstr.h **** /** \brief  Count leading zeros
 283:build/lnInclude/core_cmInstr.h **** 
 284:build/lnInclude/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 285:build/lnInclude/core_cmInstr.h **** 
 286:build/lnInclude/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 287:build/lnInclude/core_cmInstr.h ****     \return             number of leading zeros in value
 288:build/lnInclude/core_cmInstr.h ****  */
 289:build/lnInclude/core_cmInstr.h **** #define __CLZ                             __clz
 290:build/lnInclude/core_cmInstr.h **** 
 291:build/lnInclude/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 292:build/lnInclude/core_cmInstr.h **** 
 293:build/lnInclude/core_cmInstr.h **** 
 294:build/lnInclude/core_cmInstr.h **** 
 295:build/lnInclude/core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 296:build/lnInclude/core_cmInstr.h **** /* IAR iccarm specific functions */
 297:build/lnInclude/core_cmInstr.h **** 
 298:build/lnInclude/core_cmInstr.h **** #include <cmsis_iar.h>
 299:build/lnInclude/core_cmInstr.h **** 
 300:build/lnInclude/core_cmInstr.h **** 
 301:build/lnInclude/core_cmInstr.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 302:build/lnInclude/core_cmInstr.h **** /* TI CCS specific functions */
 303:build/lnInclude/core_cmInstr.h **** 
 304:build/lnInclude/core_cmInstr.h **** #include <cmsis_ccs.h>
 305:build/lnInclude/core_cmInstr.h **** 
 306:build/lnInclude/core_cmInstr.h **** 
 307:build/lnInclude/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 308:build/lnInclude/core_cmInstr.h **** /* GNU gcc specific functions */
 309:build/lnInclude/core_cmInstr.h **** 
 310:build/lnInclude/core_cmInstr.h **** /* Define macros for porting to both thumb1 and thumb2.
 311:build/lnInclude/core_cmInstr.h ****  * For thumb1, use low register (r0-r7), specified by constrant "l"
 312:build/lnInclude/core_cmInstr.h ****  * Otherwise, use general registers, specified by constrant "r" */
 313:build/lnInclude/core_cmInstr.h **** #if defined (__thumb__) && !defined (__thumb2__)
 314:build/lnInclude/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 315:build/lnInclude/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 316:build/lnInclude/core_cmInstr.h **** #else
 317:build/lnInclude/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 318:build/lnInclude/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 319:build/lnInclude/core_cmInstr.h **** #endif
 320:build/lnInclude/core_cmInstr.h **** 
 321:build/lnInclude/core_cmInstr.h **** /** \brief  No Operation
 322:build/lnInclude/core_cmInstr.h **** 
 323:build/lnInclude/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 324:build/lnInclude/core_cmInstr.h ****  */
 325:build/lnInclude/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
ARM GAS  /tmp/ccZn4OOM.s 			page 12


 326:build/lnInclude/core_cmInstr.h **** {
 327:build/lnInclude/core_cmInstr.h ****   __ASM volatile ("nop");
 328:build/lnInclude/core_cmInstr.h **** }
 329:build/lnInclude/core_cmInstr.h **** 
 330:build/lnInclude/core_cmInstr.h **** 
 331:build/lnInclude/core_cmInstr.h **** /** \brief  Wait For Interrupt
 332:build/lnInclude/core_cmInstr.h **** 
 333:build/lnInclude/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 334:build/lnInclude/core_cmInstr.h ****     until one of a number of events occurs.
 335:build/lnInclude/core_cmInstr.h ****  */
 336:build/lnInclude/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
 337:build/lnInclude/core_cmInstr.h **** {
 338:build/lnInclude/core_cmInstr.h ****   __ASM volatile ("wfi");
 339:build/lnInclude/core_cmInstr.h **** }
 340:build/lnInclude/core_cmInstr.h **** 
 341:build/lnInclude/core_cmInstr.h **** 
 342:build/lnInclude/core_cmInstr.h **** /** \brief  Wait For Event
 343:build/lnInclude/core_cmInstr.h **** 
 344:build/lnInclude/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 345:build/lnInclude/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 346:build/lnInclude/core_cmInstr.h ****  */
 347:build/lnInclude/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFE(void)
 348:build/lnInclude/core_cmInstr.h **** {
 349:build/lnInclude/core_cmInstr.h ****   __ASM volatile ("wfe");
 350:build/lnInclude/core_cmInstr.h **** }
 351:build/lnInclude/core_cmInstr.h **** 
 352:build/lnInclude/core_cmInstr.h **** 
 353:build/lnInclude/core_cmInstr.h **** /** \brief  Send Event
 354:build/lnInclude/core_cmInstr.h **** 
 355:build/lnInclude/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 356:build/lnInclude/core_cmInstr.h ****  */
 357:build/lnInclude/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __SEV(void)
 358:build/lnInclude/core_cmInstr.h **** {
 359:build/lnInclude/core_cmInstr.h ****   __ASM volatile ("sev");
 360:build/lnInclude/core_cmInstr.h **** }
 361:build/lnInclude/core_cmInstr.h **** 
 362:build/lnInclude/core_cmInstr.h **** 
 363:build/lnInclude/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
 364:build/lnInclude/core_cmInstr.h **** 
 365:build/lnInclude/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
 366:build/lnInclude/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
 367:build/lnInclude/core_cmInstr.h ****     memory, after the instruction has been completed.
 368:build/lnInclude/core_cmInstr.h ****  */
 369:build/lnInclude/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
 370:build/lnInclude/core_cmInstr.h **** {
 371:build/lnInclude/core_cmInstr.h ****   __ASM volatile ("isb");
 372:build/lnInclude/core_cmInstr.h **** }
 373:build/lnInclude/core_cmInstr.h **** 
 374:build/lnInclude/core_cmInstr.h **** 
 375:build/lnInclude/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 376:build/lnInclude/core_cmInstr.h **** 
 377:build/lnInclude/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 378:build/lnInclude/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 379:build/lnInclude/core_cmInstr.h ****  */
 380:build/lnInclude/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
 381:build/lnInclude/core_cmInstr.h **** {
 382:build/lnInclude/core_cmInstr.h ****   __ASM volatile ("dsb");
ARM GAS  /tmp/ccZn4OOM.s 			page 13


 383:build/lnInclude/core_cmInstr.h **** }
 384:build/lnInclude/core_cmInstr.h **** 
 385:build/lnInclude/core_cmInstr.h **** 
 386:build/lnInclude/core_cmInstr.h **** /** \brief  Data Memory Barrier
 387:build/lnInclude/core_cmInstr.h **** 
 388:build/lnInclude/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 389:build/lnInclude/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 390:build/lnInclude/core_cmInstr.h ****  */
 391:build/lnInclude/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
 392:build/lnInclude/core_cmInstr.h **** {
 393:build/lnInclude/core_cmInstr.h ****   __ASM volatile ("dmb");
 394:build/lnInclude/core_cmInstr.h **** }
 395:build/lnInclude/core_cmInstr.h **** 
 396:build/lnInclude/core_cmInstr.h **** 
 397:build/lnInclude/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 398:build/lnInclude/core_cmInstr.h **** 
 399:build/lnInclude/core_cmInstr.h ****     This function reverses the byte order in integer value.
 400:build/lnInclude/core_cmInstr.h **** 
 401:build/lnInclude/core_cmInstr.h ****     \param [in]    value  Value to reverse
 402:build/lnInclude/core_cmInstr.h ****     \return               Reversed value
 403:build/lnInclude/core_cmInstr.h ****  */
 404:build/lnInclude/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
 405:build/lnInclude/core_cmInstr.h **** {
 406:build/lnInclude/core_cmInstr.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 407:build/lnInclude/core_cmInstr.h ****   return __builtin_bswap32(value);
 144              		.loc 2 407 0
 145 0074 1BBA     		rev	r3, r3
 146              	.LVL19:
 147              	.LBE23:
 148              	.LBE22:
 145:./FWLIB/src/stm32f4xx_hash_sha1.c ****     outputaddr+=4;
 149              		.loc 1 145 0
 150 0076 3360     		str	r3, [r6]
 151              	.LVL20:
 147:./FWLIB/src/stm32f4xx_hash_sha1.c ****     outputaddr+=4;
 152              		.loc 1 147 0
 153 0078 039B     		ldr	r3, [sp, #12]
 154              	.LVL21:
 155              	.LBB24:
 156              	.LBB25:
 157              		.loc 2 407 0
 158 007a 1BBA     		rev	r3, r3
 159              	.LVL22:
 160              	.LBE25:
 161              	.LBE24:
 147:./FWLIB/src/stm32f4xx_hash_sha1.c ****     outputaddr+=4;
 162              		.loc 1 147 0
 163 007c 7360     		str	r3, [r6, #4]
 164              	.LVL23:
 149:./FWLIB/src/stm32f4xx_hash_sha1.c ****     outputaddr+=4;
 165              		.loc 1 149 0
 166 007e 049B     		ldr	r3, [sp, #16]
 167              	.LVL24:
 168              	.LBB26:
 169              	.LBB27:
 170              		.loc 2 407 0
 171 0080 1BBA     		rev	r3, r3
ARM GAS  /tmp/ccZn4OOM.s 			page 14


 172              	.LVL25:
 173              	.LBE27:
 174              	.LBE26:
 149:./FWLIB/src/stm32f4xx_hash_sha1.c ****     outputaddr+=4;
 175              		.loc 1 149 0
 176 0082 B360     		str	r3, [r6, #8]
 177              	.LVL26:
 151:./FWLIB/src/stm32f4xx_hash_sha1.c ****     outputaddr+=4;
 178              		.loc 1 151 0
 179 0084 059B     		ldr	r3, [sp, #20]
 180              	.LVL27:
 181              	.LBB28:
 182              	.LBB29:
 183              		.loc 2 407 0
 184 0086 1BBA     		rev	r3, r3
 185              	.LVL28:
 186              	.LBE29:
 187              	.LBE28:
 151:./FWLIB/src/stm32f4xx_hash_sha1.c ****     outputaddr+=4;
 188              		.loc 1 151 0
 189 0088 F360     		str	r3, [r6, #12]
 190              	.LVL29:
 153:./FWLIB/src/stm32f4xx_hash_sha1.c ****   }
 191              		.loc 1 153 0
 192 008a 069B     		ldr	r3, [sp, #24]
 193              	.LVL30:
 194              	.LBB30:
 195              	.LBB31:
 196              		.loc 2 407 0
 197 008c 1BBA     		rev	r3, r3
 198              	.LVL31:
 199              	.LBE31:
 200              	.LBE30:
 153:./FWLIB/src/stm32f4xx_hash_sha1.c ****   }
 201              		.loc 1 153 0
 202 008e 3361     		str	r3, [r6, #16]
 101:./FWLIB/src/stm32f4xx_hash_sha1.c ****   uint32_t inputaddr  = (uint32_t)Input;
 203              		.loc 1 101 0
 204 0090 0120     		movs	r0, #1
 205 0092 E9E7     		b	.L6
 206              		.cfi_endproc
 207              	.LFE112:
 209              		.section	.text.HMAC_SHA1,"ax",%progbits
 210              		.align	1
 211              		.global	HMAC_SHA1
 212              		.syntax unified
 213              		.thumb
 214              		.thumb_func
 215              		.fpu fpv4-sp-d16
 217              	HMAC_SHA1:
 218              	.LFB113:
 157:./FWLIB/src/stm32f4xx_hash_sha1.c **** 
 158:./FWLIB/src/stm32f4xx_hash_sha1.c **** /**
 159:./FWLIB/src/stm32f4xx_hash_sha1.c ****   * @brief  Compute the HMAC SHA1 digest.
 160:./FWLIB/src/stm32f4xx_hash_sha1.c ****   * @param  Key: pointer to the Key used for HMAC.
 161:./FWLIB/src/stm32f4xx_hash_sha1.c ****   * @param  Keylen: length of the Key used for HMAC.  
 162:./FWLIB/src/stm32f4xx_hash_sha1.c ****   * @param  Input: pointer to the Input buffer to be treated.
ARM GAS  /tmp/ccZn4OOM.s 			page 15


 163:./FWLIB/src/stm32f4xx_hash_sha1.c ****   * @param  Ilen: length of the Input buffer.
 164:./FWLIB/src/stm32f4xx_hash_sha1.c ****   * @param  Output: the returned digest
 165:./FWLIB/src/stm32f4xx_hash_sha1.c ****   * @retval An ErrorStatus enumeration value:
 166:./FWLIB/src/stm32f4xx_hash_sha1.c ****   *          - SUCCESS: digest computation done
 167:./FWLIB/src/stm32f4xx_hash_sha1.c ****   *          - ERROR: digest computation failed
 168:./FWLIB/src/stm32f4xx_hash_sha1.c ****   */
 169:./FWLIB/src/stm32f4xx_hash_sha1.c **** ErrorStatus HMAC_SHA1(uint8_t *Key, uint32_t Keylen, uint8_t *Input,
 170:./FWLIB/src/stm32f4xx_hash_sha1.c ****                       uint32_t Ilen, uint8_t Output[20])
 171:./FWLIB/src/stm32f4xx_hash_sha1.c **** {
 219              		.loc 1 171 0
 220              		.cfi_startproc
 221              		@ args = 4, pretend = 0, frame = 56
 222              		@ frame_needed = 0, uses_anonymous_args = 0
 223              	.LVL32:
 224 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 225              	.LCFI4:
 226              		.cfi_def_cfa_offset 28
 227              		.cfi_offset 4, -28
 228              		.cfi_offset 5, -24
 229              		.cfi_offset 6, -20
 230              		.cfi_offset 7, -16
 231              		.cfi_offset 8, -12
 232              		.cfi_offset 9, -8
 233              		.cfi_offset 14, -4
 234 0004 8FB0     		sub	sp, sp, #60
 235              	.LCFI5:
 236              		.cfi_def_cfa_offset 88
 237 0006 8146     		mov	r9, r0
 238 0008 0D46     		mov	r5, r1
 239 000a 1F46     		mov	r7, r3
 172:./FWLIB/src/stm32f4xx_hash_sha1.c ****   HASH_InitTypeDef SHA1_HASH_InitStructure;
 173:./FWLIB/src/stm32f4xx_hash_sha1.c ****   HASH_MsgDigest SHA1_MessageDigest;
 174:./FWLIB/src/stm32f4xx_hash_sha1.c ****   __IO uint16_t nbvalidbitsdata = 0;
 240              		.loc 1 174 0
 241 000c 0024     		movs	r4, #0
 242 000e ADF80640 		strh	r4, [sp, #6]	@ movhi
 175:./FWLIB/src/stm32f4xx_hash_sha1.c ****   __IO uint16_t nbvalidbitskey = 0;
 243              		.loc 1 175 0
 244 0012 ADF80440 		strh	r4, [sp, #4]	@ movhi
 245              	.LVL33:
 176:./FWLIB/src/stm32f4xx_hash_sha1.c ****   uint32_t i = 0;
 177:./FWLIB/src/stm32f4xx_hash_sha1.c ****   __IO uint32_t counter = 0;
 246              		.loc 1 177 0
 247 0016 0094     		str	r4, [sp]
 248              	.LVL34:
 178:./FWLIB/src/stm32f4xx_hash_sha1.c ****   uint32_t busystatus = 0;
 179:./FWLIB/src/stm32f4xx_hash_sha1.c ****   ErrorStatus status = SUCCESS;
 180:./FWLIB/src/stm32f4xx_hash_sha1.c ****   uint32_t keyaddr    = (uint32_t)Key;
 249              		.loc 1 180 0
 250 0018 8046     		mov	r8, r0
 251              	.LVL35:
 181:./FWLIB/src/stm32f4xx_hash_sha1.c ****   uint32_t inputaddr  = (uint32_t)Input;
 252              		.loc 1 181 0
 253 001a 1646     		mov	r6, r2
 254              	.LVL36:
 182:./FWLIB/src/stm32f4xx_hash_sha1.c ****   uint32_t outputaddr = (uint32_t)Output;
 183:./FWLIB/src/stm32f4xx_hash_sha1.c **** 
ARM GAS  /tmp/ccZn4OOM.s 			page 16


 184:./FWLIB/src/stm32f4xx_hash_sha1.c ****   /* Number of valid bits in last word of the Input data */
 185:./FWLIB/src/stm32f4xx_hash_sha1.c ****   nbvalidbitsdata = 8 * (Ilen % 4);
 255              		.loc 1 185 0
 256 001c 03F00303 		and	r3, r3, #3
 257              	.LVL37:
 258 0020 DB00     		lsls	r3, r3, #3
 259 0022 ADF80630 		strh	r3, [sp, #6]	@ movhi
 186:./FWLIB/src/stm32f4xx_hash_sha1.c **** 
 187:./FWLIB/src/stm32f4xx_hash_sha1.c ****   /* Number of valid bits in last word of the Key */
 188:./FWLIB/src/stm32f4xx_hash_sha1.c ****   nbvalidbitskey = 8 * (Keylen % 4);
 260              		.loc 1 188 0
 261 0026 01F00303 		and	r3, r1, #3
 262 002a DB00     		lsls	r3, r3, #3
 263 002c ADF80430 		strh	r3, [sp, #4]	@ movhi
 189:./FWLIB/src/stm32f4xx_hash_sha1.c **** 
 190:./FWLIB/src/stm32f4xx_hash_sha1.c ****   /* HASH peripheral initialization */
 191:./FWLIB/src/stm32f4xx_hash_sha1.c ****   HASH_DeInit();
 264              		.loc 1 191 0
 265 0030 FFF7FEFF 		bl	HASH_DeInit
 266              	.LVL38:
 192:./FWLIB/src/stm32f4xx_hash_sha1.c **** 
 193:./FWLIB/src/stm32f4xx_hash_sha1.c ****   /* HASH Configuration */
 194:./FWLIB/src/stm32f4xx_hash_sha1.c ****   SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 267              		.loc 1 194 0
 268 0034 0A94     		str	r4, [sp, #40]
 195:./FWLIB/src/stm32f4xx_hash_sha1.c ****   SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
 269              		.loc 1 195 0
 270 0036 4023     		movs	r3, #64
 271 0038 0B93     		str	r3, [sp, #44]
 196:./FWLIB/src/stm32f4xx_hash_sha1.c ****   SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 272              		.loc 1 196 0
 273 003a 2023     		movs	r3, #32
 274 003c 0C93     		str	r3, [sp, #48]
 197:./FWLIB/src/stm32f4xx_hash_sha1.c ****   if(Keylen > 64)
 275              		.loc 1 197 0
 276 003e 402D     		cmp	r5, #64
 277 0040 0BD9     		bls	.L11
 198:./FWLIB/src/stm32f4xx_hash_sha1.c ****   {
 199:./FWLIB/src/stm32f4xx_hash_sha1.c ****     /* HMAC long Key */
 200:./FWLIB/src/stm32f4xx_hash_sha1.c ****     SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
 278              		.loc 1 200 0
 279 0042 4FF48033 		mov	r3, #65536
 280 0046 0D93     		str	r3, [sp, #52]
 281              	.L12:
 201:./FWLIB/src/stm32f4xx_hash_sha1.c ****   }
 202:./FWLIB/src/stm32f4xx_hash_sha1.c ****   else
 203:./FWLIB/src/stm32f4xx_hash_sha1.c ****   {
 204:./FWLIB/src/stm32f4xx_hash_sha1.c ****     /* HMAC short Key */
 205:./FWLIB/src/stm32f4xx_hash_sha1.c ****     SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 206:./FWLIB/src/stm32f4xx_hash_sha1.c ****   }
 207:./FWLIB/src/stm32f4xx_hash_sha1.c ****   HASH_Init(&SHA1_HASH_InitStructure);
 282              		.loc 1 207 0
 283 0048 0AA8     		add	r0, sp, #40
 284 004a FFF7FEFF 		bl	HASH_Init
 285              	.LVL39:
 208:./FWLIB/src/stm32f4xx_hash_sha1.c **** 
 209:./FWLIB/src/stm32f4xx_hash_sha1.c ****   /* Configure the number of valid bits in last word of the Key */
ARM GAS  /tmp/ccZn4OOM.s 			page 17


 210:./FWLIB/src/stm32f4xx_hash_sha1.c ****   HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 286              		.loc 1 210 0
 287 004e BDF80400 		ldrh	r0, [sp, #4]
 288 0052 FFF7FEFF 		bl	HASH_SetLastWordValidBitsNbr
 289              	.LVL40:
 211:./FWLIB/src/stm32f4xx_hash_sha1.c **** 
 212:./FWLIB/src/stm32f4xx_hash_sha1.c ****   /* Write the Key */
 213:./FWLIB/src/stm32f4xx_hash_sha1.c ****   for(i=0; i<Keylen; i+=4)
 290              		.loc 1 213 0
 291 0056 0024     		movs	r4, #0
 292 0058 07E0     		b	.L13
 293              	.L11:
 205:./FWLIB/src/stm32f4xx_hash_sha1.c ****   }
 294              		.loc 1 205 0
 295 005a 0023     		movs	r3, #0
 296 005c 0D93     		str	r3, [sp, #52]
 297 005e F3E7     		b	.L12
 298              	.LVL41:
 299              	.L14:
 214:./FWLIB/src/stm32f4xx_hash_sha1.c ****   {
 215:./FWLIB/src/stm32f4xx_hash_sha1.c ****     HASH_DataIn(*(uint32_t*)keyaddr);
 300              		.loc 1 215 0 discriminator 3
 301 0060 59F8040B 		ldr	r0, [r9], #4
 302              	.LVL42:
 303 0064 FFF7FEFF 		bl	HASH_DataIn
 304              	.LVL43:
 213:./FWLIB/src/stm32f4xx_hash_sha1.c ****   {
 305              		.loc 1 213 0 discriminator 3
 306 0068 0434     		adds	r4, r4, #4
 307              	.LVL44:
 308              	.L13:
 213:./FWLIB/src/stm32f4xx_hash_sha1.c ****   {
 309              		.loc 1 213 0 is_stmt 0 discriminator 1
 310 006a AC42     		cmp	r4, r5
 311 006c F8D3     		bcc	.L14
 216:./FWLIB/src/stm32f4xx_hash_sha1.c ****     keyaddr+=4;
 217:./FWLIB/src/stm32f4xx_hash_sha1.c ****   }
 218:./FWLIB/src/stm32f4xx_hash_sha1.c **** 
 219:./FWLIB/src/stm32f4xx_hash_sha1.c ****   /* Start the HASH processor */
 220:./FWLIB/src/stm32f4xx_hash_sha1.c ****   HASH_StartDigest();
 312              		.loc 1 220 0 is_stmt 1
 313 006e FFF7FEFF 		bl	HASH_StartDigest
 314              	.LVL45:
 315              	.L16:
 221:./FWLIB/src/stm32f4xx_hash_sha1.c **** 
 222:./FWLIB/src/stm32f4xx_hash_sha1.c ****   /* wait until the Busy flag is RESET */
 223:./FWLIB/src/stm32f4xx_hash_sha1.c ****   do
 224:./FWLIB/src/stm32f4xx_hash_sha1.c ****   {
 225:./FWLIB/src/stm32f4xx_hash_sha1.c ****     busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 316              		.loc 1 225 0 discriminator 2
 317 0072 0820     		movs	r0, #8
 318 0074 FFF7FEFF 		bl	HASH_GetFlagStatus
 319              	.LVL46:
 320 0078 0446     		mov	r4, r0
 321              	.LVL47:
 226:./FWLIB/src/stm32f4xx_hash_sha1.c ****     counter++;
 322              		.loc 1 226 0 discriminator 2
ARM GAS  /tmp/ccZn4OOM.s 			page 18


 323 007a 009B     		ldr	r3, [sp]
 324 007c 0133     		adds	r3, r3, #1
 325 007e 0093     		str	r3, [sp]
 227:./FWLIB/src/stm32f4xx_hash_sha1.c ****   }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 326              		.loc 1 227 0 discriminator 2
 327 0080 009B     		ldr	r3, [sp]
 328 0082 B3F5803F 		cmp	r3, #65536
 329 0086 01D0     		beq	.L15
 330              		.loc 1 227 0 is_stmt 0 discriminator 1
 331 0088 0028     		cmp	r0, #0
 332 008a F2D1     		bne	.L16
 333              	.L15:
 228:./FWLIB/src/stm32f4xx_hash_sha1.c **** 
 229:./FWLIB/src/stm32f4xx_hash_sha1.c ****   if (busystatus != RESET)
 334              		.loc 1 229 0 is_stmt 1
 335 008c 1CB1     		cbz	r4, .L30
 230:./FWLIB/src/stm32f4xx_hash_sha1.c ****   {
 231:./FWLIB/src/stm32f4xx_hash_sha1.c ****      status = ERROR;
 336              		.loc 1 231 0
 337 008e 0020     		movs	r0, #0
 338              	.LVL48:
 339              	.L17:
 232:./FWLIB/src/stm32f4xx_hash_sha1.c ****   }
 233:./FWLIB/src/stm32f4xx_hash_sha1.c ****   else
 234:./FWLIB/src/stm32f4xx_hash_sha1.c ****   {
 235:./FWLIB/src/stm32f4xx_hash_sha1.c ****     /* Configure the number of valid bits in last word of the Input data */
 236:./FWLIB/src/stm32f4xx_hash_sha1.c ****     HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 237:./FWLIB/src/stm32f4xx_hash_sha1.c **** 
 238:./FWLIB/src/stm32f4xx_hash_sha1.c ****     /* Write the Input block in the IN FIFO */
 239:./FWLIB/src/stm32f4xx_hash_sha1.c ****     for(i=0; i<Ilen; i+=4)
 240:./FWLIB/src/stm32f4xx_hash_sha1.c ****     {
 241:./FWLIB/src/stm32f4xx_hash_sha1.c ****       HASH_DataIn(*(uint32_t*)inputaddr);
 242:./FWLIB/src/stm32f4xx_hash_sha1.c ****       inputaddr+=4;
 243:./FWLIB/src/stm32f4xx_hash_sha1.c ****     }
 244:./FWLIB/src/stm32f4xx_hash_sha1.c **** 
 245:./FWLIB/src/stm32f4xx_hash_sha1.c ****     /* Start the HASH processor */
 246:./FWLIB/src/stm32f4xx_hash_sha1.c ****     HASH_StartDigest();
 247:./FWLIB/src/stm32f4xx_hash_sha1.c **** 
 248:./FWLIB/src/stm32f4xx_hash_sha1.c **** 
 249:./FWLIB/src/stm32f4xx_hash_sha1.c ****     /* wait until the Busy flag is RESET */
 250:./FWLIB/src/stm32f4xx_hash_sha1.c ****     counter =0;
 251:./FWLIB/src/stm32f4xx_hash_sha1.c ****     do
 252:./FWLIB/src/stm32f4xx_hash_sha1.c ****     {
 253:./FWLIB/src/stm32f4xx_hash_sha1.c ****       busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 254:./FWLIB/src/stm32f4xx_hash_sha1.c ****       counter++;
 255:./FWLIB/src/stm32f4xx_hash_sha1.c ****     }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 256:./FWLIB/src/stm32f4xx_hash_sha1.c **** 
 257:./FWLIB/src/stm32f4xx_hash_sha1.c ****     if (busystatus != RESET)
 258:./FWLIB/src/stm32f4xx_hash_sha1.c ****     {
 259:./FWLIB/src/stm32f4xx_hash_sha1.c ****       status = ERROR;
 260:./FWLIB/src/stm32f4xx_hash_sha1.c ****     }
 261:./FWLIB/src/stm32f4xx_hash_sha1.c ****     else
 262:./FWLIB/src/stm32f4xx_hash_sha1.c ****     {  
 263:./FWLIB/src/stm32f4xx_hash_sha1.c ****       /* Configure the number of valid bits in last word of the Key */
 264:./FWLIB/src/stm32f4xx_hash_sha1.c ****       HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 265:./FWLIB/src/stm32f4xx_hash_sha1.c **** 
 266:./FWLIB/src/stm32f4xx_hash_sha1.c ****       /* Write the Key */
ARM GAS  /tmp/ccZn4OOM.s 			page 19


 267:./FWLIB/src/stm32f4xx_hash_sha1.c ****       keyaddr = (uint32_t)Key;
 268:./FWLIB/src/stm32f4xx_hash_sha1.c ****       for(i=0; i<Keylen; i+=4)
 269:./FWLIB/src/stm32f4xx_hash_sha1.c ****       {
 270:./FWLIB/src/stm32f4xx_hash_sha1.c ****         HASH_DataIn(*(uint32_t*)keyaddr);
 271:./FWLIB/src/stm32f4xx_hash_sha1.c ****         keyaddr+=4;
 272:./FWLIB/src/stm32f4xx_hash_sha1.c ****       }
 273:./FWLIB/src/stm32f4xx_hash_sha1.c **** 
 274:./FWLIB/src/stm32f4xx_hash_sha1.c ****       /* Start the HASH processor */
 275:./FWLIB/src/stm32f4xx_hash_sha1.c ****       HASH_StartDigest();
 276:./FWLIB/src/stm32f4xx_hash_sha1.c **** 
 277:./FWLIB/src/stm32f4xx_hash_sha1.c ****       /* wait until the Busy flag is RESET */
 278:./FWLIB/src/stm32f4xx_hash_sha1.c ****       counter =0;
 279:./FWLIB/src/stm32f4xx_hash_sha1.c ****       do
 280:./FWLIB/src/stm32f4xx_hash_sha1.c ****       {
 281:./FWLIB/src/stm32f4xx_hash_sha1.c ****         busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 282:./FWLIB/src/stm32f4xx_hash_sha1.c ****         counter++;
 283:./FWLIB/src/stm32f4xx_hash_sha1.c ****       }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 284:./FWLIB/src/stm32f4xx_hash_sha1.c **** 
 285:./FWLIB/src/stm32f4xx_hash_sha1.c ****       if (busystatus != RESET)
 286:./FWLIB/src/stm32f4xx_hash_sha1.c ****       {
 287:./FWLIB/src/stm32f4xx_hash_sha1.c ****         status = ERROR;
 288:./FWLIB/src/stm32f4xx_hash_sha1.c ****       }
 289:./FWLIB/src/stm32f4xx_hash_sha1.c ****       else
 290:./FWLIB/src/stm32f4xx_hash_sha1.c ****       {
 291:./FWLIB/src/stm32f4xx_hash_sha1.c ****         /* Read the message digest */
 292:./FWLIB/src/stm32f4xx_hash_sha1.c ****         HASH_GetDigest(&SHA1_MessageDigest);
 293:./FWLIB/src/stm32f4xx_hash_sha1.c ****         *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
 294:./FWLIB/src/stm32f4xx_hash_sha1.c ****         outputaddr+=4;
 295:./FWLIB/src/stm32f4xx_hash_sha1.c ****         *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[1]);
 296:./FWLIB/src/stm32f4xx_hash_sha1.c ****         outputaddr+=4;
 297:./FWLIB/src/stm32f4xx_hash_sha1.c ****         *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
 298:./FWLIB/src/stm32f4xx_hash_sha1.c ****         outputaddr+=4;
 299:./FWLIB/src/stm32f4xx_hash_sha1.c ****         *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
 300:./FWLIB/src/stm32f4xx_hash_sha1.c ****         outputaddr+=4;
 301:./FWLIB/src/stm32f4xx_hash_sha1.c ****         *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
 302:./FWLIB/src/stm32f4xx_hash_sha1.c ****       }
 303:./FWLIB/src/stm32f4xx_hash_sha1.c ****     }  
 304:./FWLIB/src/stm32f4xx_hash_sha1.c ****   }
 305:./FWLIB/src/stm32f4xx_hash_sha1.c ****   return status;  
 306:./FWLIB/src/stm32f4xx_hash_sha1.c **** }
 340              		.loc 1 306 0
 341 0090 0FB0     		add	sp, sp, #60
 342              	.LCFI6:
 343              		.cfi_remember_state
 344              		.cfi_def_cfa_offset 28
 345              		@ sp needed
 346 0092 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 347              	.LVL49:
 348              	.L30:
 349              	.LCFI7:
 350              		.cfi_restore_state
 236:./FWLIB/src/stm32f4xx_hash_sha1.c **** 
 351              		.loc 1 236 0
 352 0096 BDF80600 		ldrh	r0, [sp, #6]
 353              	.LVL50:
 354 009a FFF7FEFF 		bl	HASH_SetLastWordValidBitsNbr
 355              	.LVL51:
ARM GAS  /tmp/ccZn4OOM.s 			page 20


 239:./FWLIB/src/stm32f4xx_hash_sha1.c ****     {
 356              		.loc 1 239 0
 357 009e 04E0     		b	.L18
 358              	.LVL52:
 359              	.L19:
 241:./FWLIB/src/stm32f4xx_hash_sha1.c ****       inputaddr+=4;
 360              		.loc 1 241 0 discriminator 3
 361 00a0 56F8040B 		ldr	r0, [r6], #4
 362              	.LVL53:
 363 00a4 FFF7FEFF 		bl	HASH_DataIn
 364              	.LVL54:
 239:./FWLIB/src/stm32f4xx_hash_sha1.c ****     {
 365              		.loc 1 239 0 discriminator 3
 366 00a8 0434     		adds	r4, r4, #4
 367              	.LVL55:
 368              	.L18:
 239:./FWLIB/src/stm32f4xx_hash_sha1.c ****     {
 369              		.loc 1 239 0 is_stmt 0 discriminator 1
 370 00aa BC42     		cmp	r4, r7
 371 00ac F8D3     		bcc	.L19
 246:./FWLIB/src/stm32f4xx_hash_sha1.c **** 
 372              		.loc 1 246 0 is_stmt 1
 373 00ae FFF7FEFF 		bl	HASH_StartDigest
 374              	.LVL56:
 250:./FWLIB/src/stm32f4xx_hash_sha1.c ****     do
 375              		.loc 1 250 0
 376 00b2 0023     		movs	r3, #0
 377 00b4 0093     		str	r3, [sp]
 378              	.LVL57:
 379              	.L21:
 253:./FWLIB/src/stm32f4xx_hash_sha1.c ****       counter++;
 380              		.loc 1 253 0 discriminator 2
 381 00b6 0820     		movs	r0, #8
 382 00b8 FFF7FEFF 		bl	HASH_GetFlagStatus
 383              	.LVL58:
 384 00bc 0446     		mov	r4, r0
 385              	.LVL59:
 254:./FWLIB/src/stm32f4xx_hash_sha1.c ****     }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 386              		.loc 1 254 0 discriminator 2
 387 00be 009B     		ldr	r3, [sp]
 388 00c0 0133     		adds	r3, r3, #1
 389 00c2 0093     		str	r3, [sp]
 255:./FWLIB/src/stm32f4xx_hash_sha1.c **** 
 390              		.loc 1 255 0 discriminator 2
 391 00c4 009B     		ldr	r3, [sp]
 392 00c6 B3F5803F 		cmp	r3, #65536
 393 00ca 01D0     		beq	.L20
 255:./FWLIB/src/stm32f4xx_hash_sha1.c **** 
 394              		.loc 1 255 0 is_stmt 0 discriminator 1
 395 00cc 0028     		cmp	r0, #0
 396 00ce F2D1     		bne	.L21
 397              	.L20:
 257:./FWLIB/src/stm32f4xx_hash_sha1.c ****     {
 398              		.loc 1 257 0 is_stmt 1
 399 00d0 0CB1     		cbz	r4, .L31
 259:./FWLIB/src/stm32f4xx_hash_sha1.c ****     }
 400              		.loc 1 259 0
ARM GAS  /tmp/ccZn4OOM.s 			page 21


 401 00d2 0020     		movs	r0, #0
 402              	.LVL60:
 403 00d4 DCE7     		b	.L17
 404              	.LVL61:
 405              	.L31:
 264:./FWLIB/src/stm32f4xx_hash_sha1.c **** 
 406              		.loc 1 264 0
 407 00d6 BDF80400 		ldrh	r0, [sp, #4]
 408              	.LVL62:
 409 00da FFF7FEFF 		bl	HASH_SetLastWordValidBitsNbr
 410              	.LVL63:
 268:./FWLIB/src/stm32f4xx_hash_sha1.c ****       {
 411              		.loc 1 268 0
 412 00de 04E0     		b	.L22
 413              	.LVL64:
 414              	.L23:
 270:./FWLIB/src/stm32f4xx_hash_sha1.c ****         keyaddr+=4;
 415              		.loc 1 270 0 discriminator 3
 416 00e0 58F8040B 		ldr	r0, [r8], #4
 417              	.LVL65:
 418 00e4 FFF7FEFF 		bl	HASH_DataIn
 419              	.LVL66:
 268:./FWLIB/src/stm32f4xx_hash_sha1.c ****       {
 420              		.loc 1 268 0 discriminator 3
 421 00e8 0434     		adds	r4, r4, #4
 422              	.LVL67:
 423              	.L22:
 268:./FWLIB/src/stm32f4xx_hash_sha1.c ****       {
 424              		.loc 1 268 0 is_stmt 0 discriminator 1
 425 00ea AC42     		cmp	r4, r5
 426 00ec F8D3     		bcc	.L23
 275:./FWLIB/src/stm32f4xx_hash_sha1.c **** 
 427              		.loc 1 275 0 is_stmt 1
 428 00ee FFF7FEFF 		bl	HASH_StartDigest
 429              	.LVL68:
 278:./FWLIB/src/stm32f4xx_hash_sha1.c ****       do
 430              		.loc 1 278 0
 431 00f2 0023     		movs	r3, #0
 432 00f4 0093     		str	r3, [sp]
 433              	.L25:
 281:./FWLIB/src/stm32f4xx_hash_sha1.c ****         counter++;
 434              		.loc 1 281 0 discriminator 2
 435 00f6 0820     		movs	r0, #8
 436 00f8 FFF7FEFF 		bl	HASH_GetFlagStatus
 437              	.LVL69:
 438 00fc 0246     		mov	r2, r0
 439              	.LVL70:
 282:./FWLIB/src/stm32f4xx_hash_sha1.c ****       }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 440              		.loc 1 282 0 discriminator 2
 441 00fe 009B     		ldr	r3, [sp]
 442 0100 0133     		adds	r3, r3, #1
 443 0102 0093     		str	r3, [sp]
 283:./FWLIB/src/stm32f4xx_hash_sha1.c **** 
 444              		.loc 1 283 0 discriminator 2
 445 0104 009B     		ldr	r3, [sp]
 446 0106 B3F5803F 		cmp	r3, #65536
 447 010a 01D0     		beq	.L24
ARM GAS  /tmp/ccZn4OOM.s 			page 22


 283:./FWLIB/src/stm32f4xx_hash_sha1.c **** 
 448              		.loc 1 283 0 is_stmt 0 discriminator 1
 449 010c 0028     		cmp	r0, #0
 450 010e F2D1     		bne	.L25
 451              	.L24:
 285:./FWLIB/src/stm32f4xx_hash_sha1.c ****       {
 452              		.loc 1 285 0 is_stmt 1
 453 0110 0AB1     		cbz	r2, .L32
 287:./FWLIB/src/stm32f4xx_hash_sha1.c ****       }
 454              		.loc 1 287 0
 455 0112 0020     		movs	r0, #0
 456              	.LVL71:
 457 0114 BCE7     		b	.L17
 458              	.LVL72:
 459              	.L32:
 292:./FWLIB/src/stm32f4xx_hash_sha1.c ****         *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
 460              		.loc 1 292 0
 461 0116 02A8     		add	r0, sp, #8
 462              	.LVL73:
 463 0118 FFF7FEFF 		bl	HASH_GetDigest
 464              	.LVL74:
 293:./FWLIB/src/stm32f4xx_hash_sha1.c ****         outputaddr+=4;
 465              		.loc 1 293 0
 466 011c 029B     		ldr	r3, [sp, #8]
 467              	.LVL75:
 468              	.LBB32:
 469              	.LBB33:
 470              		.loc 2 407 0
 471 011e 1BBA     		rev	r3, r3
 472              	.LVL76:
 473              	.LBE33:
 474              	.LBE32:
 293:./FWLIB/src/stm32f4xx_hash_sha1.c ****         outputaddr+=4;
 475              		.loc 1 293 0
 476 0120 169A     		ldr	r2, [sp, #88]
 477 0122 1360     		str	r3, [r2]
 478              	.LVL77:
 295:./FWLIB/src/stm32f4xx_hash_sha1.c ****         outputaddr+=4;
 479              		.loc 1 295 0
 480 0124 039B     		ldr	r3, [sp, #12]
 481              	.LVL78:
 482              	.LBB34:
 483              	.LBB35:
 484              		.loc 2 407 0
 485 0126 1BBA     		rev	r3, r3
 486              	.LVL79:
 487              	.LBE35:
 488              	.LBE34:
 295:./FWLIB/src/stm32f4xx_hash_sha1.c ****         outputaddr+=4;
 489              		.loc 1 295 0
 490 0128 5360     		str	r3, [r2, #4]
 491              	.LVL80:
 297:./FWLIB/src/stm32f4xx_hash_sha1.c ****         outputaddr+=4;
 492              		.loc 1 297 0
 493 012a 049B     		ldr	r3, [sp, #16]
 494              	.LVL81:
 495              	.LBB36:
ARM GAS  /tmp/ccZn4OOM.s 			page 23


 496              	.LBB37:
 497              		.loc 2 407 0
 498 012c 1BBA     		rev	r3, r3
 499              	.LVL82:
 500              	.LBE37:
 501              	.LBE36:
 297:./FWLIB/src/stm32f4xx_hash_sha1.c ****         outputaddr+=4;
 502              		.loc 1 297 0
 503 012e 9360     		str	r3, [r2, #8]
 504              	.LVL83:
 299:./FWLIB/src/stm32f4xx_hash_sha1.c ****         outputaddr+=4;
 505              		.loc 1 299 0
 506 0130 059B     		ldr	r3, [sp, #20]
 507              	.LVL84:
 508              	.LBB38:
 509              	.LBB39:
 510              		.loc 2 407 0
 511 0132 1BBA     		rev	r3, r3
 512              	.LVL85:
 513              	.LBE39:
 514              	.LBE38:
 299:./FWLIB/src/stm32f4xx_hash_sha1.c ****         outputaddr+=4;
 515              		.loc 1 299 0
 516 0134 D360     		str	r3, [r2, #12]
 517              	.LVL86:
 301:./FWLIB/src/stm32f4xx_hash_sha1.c ****       }
 518              		.loc 1 301 0
 519 0136 069B     		ldr	r3, [sp, #24]
 520              	.LVL87:
 521              	.LBB40:
 522              	.LBB41:
 523              		.loc 2 407 0
 524 0138 1BBA     		rev	r3, r3
 525              	.LVL88:
 526              	.LBE41:
 527              	.LBE40:
 301:./FWLIB/src/stm32f4xx_hash_sha1.c ****       }
 528              		.loc 1 301 0
 529 013a 1361     		str	r3, [r2, #16]
 179:./FWLIB/src/stm32f4xx_hash_sha1.c ****   uint32_t keyaddr    = (uint32_t)Key;
 530              		.loc 1 179 0
 531 013c 0120     		movs	r0, #1
 532 013e A7E7     		b	.L17
 533              		.cfi_endproc
 534              	.LFE113:
 536              		.text
 537              	.Letext0:
 538              		.file 3 "/usr/arm-none-eabi/include/machine/_default_types.h"
 539              		.file 4 "/usr/arm-none-eabi/include/sys/_stdint.h"
 540              		.file 5 "build/lnInclude/core_cm4.h"
 541              		.file 6 "build/lnInclude/system_stm32f4xx.h"
 542              		.file 7 "build/lnInclude/stm32f4xx.h"
 543              		.file 8 "build/lnInclude/stm32f4xx_hash.h"
ARM GAS  /tmp/ccZn4OOM.s 			page 24


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_hash_sha1.c
     /tmp/ccZn4OOM.s:18     .text.HASH_SHA1:0000000000000000 $t
     /tmp/ccZn4OOM.s:25     .text.HASH_SHA1:0000000000000000 HASH_SHA1
     /tmp/ccZn4OOM.s:210    .text.HMAC_SHA1:0000000000000000 $t
     /tmp/ccZn4OOM.s:217    .text.HMAC_SHA1:0000000000000000 HMAC_SHA1

UNDEFINED SYMBOLS
HASH_DeInit
HASH_Init
HASH_SetLastWordValidBitsNbr
HASH_DataIn
HASH_StartDigest
HASH_GetFlagStatus
HASH_GetDigest
