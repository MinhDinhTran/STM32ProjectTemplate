ARM GAS  /tmp/ccNtoG4Z.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_i2c.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.I2C_DeInit,"ax",%progbits
  18              		.align	1
  19              		.global	I2C_DeInit
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	I2C_DeInit:
  26              	.LFB112:
  27              		.file 1 "./FWLIB/src/stm32f4xx_i2c.c"
   1:./FWLIB/src/stm32f4xx_i2c.c **** /**
   2:./FWLIB/src/stm32f4xx_i2c.c ****   ******************************************************************************
   3:./FWLIB/src/stm32f4xx_i2c.c ****   * @file    stm32f4xx_i2c.c
   4:./FWLIB/src/stm32f4xx_i2c.c ****   * @author  MCD Application Team
   5:./FWLIB/src/stm32f4xx_i2c.c ****   * @version V1.4.0
   6:./FWLIB/src/stm32f4xx_i2c.c ****   * @date    04-August-2014
   7:./FWLIB/src/stm32f4xx_i2c.c ****   * @brief   This file provides firmware functions to manage the following 
   8:./FWLIB/src/stm32f4xx_i2c.c ****   *          functionalities of the Inter-integrated circuit (I2C)
   9:./FWLIB/src/stm32f4xx_i2c.c ****   *           + Initialization and Configuration
  10:./FWLIB/src/stm32f4xx_i2c.c ****   *           + Data transfers
  11:./FWLIB/src/stm32f4xx_i2c.c ****   *           + PEC management
  12:./FWLIB/src/stm32f4xx_i2c.c ****   *           + DMA transfers management
  13:./FWLIB/src/stm32f4xx_i2c.c ****   *           + Interrupts, events and flags management 
  14:./FWLIB/src/stm32f4xx_i2c.c ****   *           
  15:./FWLIB/src/stm32f4xx_i2c.c ****     @verbatim    
  16:./FWLIB/src/stm32f4xx_i2c.c ****  ===============================================================================
  17:./FWLIB/src/stm32f4xx_i2c.c ****                     ##### How to use this driver #####
  18:./FWLIB/src/stm32f4xx_i2c.c ****  ===============================================================================
  19:./FWLIB/src/stm32f4xx_i2c.c ****     [..]
  20:./FWLIB/src/stm32f4xx_i2c.c ****       (#) Enable peripheral clock using RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2Cx, ENABLE)
  21:./FWLIB/src/stm32f4xx_i2c.c ****           function for I2C1, I2C2 or I2C3.
  22:./FWLIB/src/stm32f4xx_i2c.c ****   
  23:./FWLIB/src/stm32f4xx_i2c.c ****       (#) Enable SDA, SCL  and SMBA (when used) GPIO clocks using 
  24:./FWLIB/src/stm32f4xx_i2c.c ****           RCC_AHBPeriphClockCmd() function. 
  25:./FWLIB/src/stm32f4xx_i2c.c ****   
  26:./FWLIB/src/stm32f4xx_i2c.c ****       (#) Peripherals alternate function: 
  27:./FWLIB/src/stm32f4xx_i2c.c ****         (++) Connect the pin to the desired peripherals' Alternate 
  28:./FWLIB/src/stm32f4xx_i2c.c ****              Function (AF) using GPIO_PinAFConfig() function
  29:./FWLIB/src/stm32f4xx_i2c.c ****         (++) Configure the desired pin in alternate function by:
  30:./FWLIB/src/stm32f4xx_i2c.c ****              GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
  31:./FWLIB/src/stm32f4xx_i2c.c ****         (++) Select the type, pull-up/pull-down and output speed via 
ARM GAS  /tmp/ccNtoG4Z.s 			page 2


  32:./FWLIB/src/stm32f4xx_i2c.c ****              GPIO_PuPd, GPIO_OType and GPIO_Speed members
  33:./FWLIB/src/stm32f4xx_i2c.c ****         (++) Call GPIO_Init() function
  34:./FWLIB/src/stm32f4xx_i2c.c ****              Recommended configuration is Push-Pull, Pull-up, Open-Drain.
  35:./FWLIB/src/stm32f4xx_i2c.c ****              Add an external pull up if necessary (typically 4.7 KOhm).      
  36:./FWLIB/src/stm32f4xx_i2c.c ****           
  37:./FWLIB/src/stm32f4xx_i2c.c ****       (#) Program the Mode, duty cycle , Own address, Ack, Speed and Acknowledged
  38:./FWLIB/src/stm32f4xx_i2c.c ****           Address using the I2C_Init() function.
  39:./FWLIB/src/stm32f4xx_i2c.c ****   
  40:./FWLIB/src/stm32f4xx_i2c.c ****       (#) Optionally you can enable/configure the following parameters without
  41:./FWLIB/src/stm32f4xx_i2c.c ****           re-initialization (i.e there is no need to call again I2C_Init() function):
  42:./FWLIB/src/stm32f4xx_i2c.c ****         (++) Enable the acknowledge feature using I2C_AcknowledgeConfig() function
  43:./FWLIB/src/stm32f4xx_i2c.c ****         (++) Enable the dual addressing mode using I2C_DualAddressCmd() function
  44:./FWLIB/src/stm32f4xx_i2c.c ****         (++) Enable the general call using the I2C_GeneralCallCmd() function
  45:./FWLIB/src/stm32f4xx_i2c.c ****         (++) Enable the clock stretching using I2C_StretchClockCmd() function
  46:./FWLIB/src/stm32f4xx_i2c.c ****         (++) Enable the fast mode duty cycle using the I2C_FastModeDutyCycleConfig()
  47:./FWLIB/src/stm32f4xx_i2c.c ****              function.
  48:./FWLIB/src/stm32f4xx_i2c.c ****         (++) Configure the NACK position for Master Receiver mode in case of 
  49:./FWLIB/src/stm32f4xx_i2c.c ****              2 bytes reception using the function I2C_NACKPositionConfig().  
  50:./FWLIB/src/stm32f4xx_i2c.c ****         (++) Enable the PEC Calculation using I2C_CalculatePEC() function
  51:./FWLIB/src/stm32f4xx_i2c.c ****         (++) For SMBus Mode: 
  52:./FWLIB/src/stm32f4xx_i2c.c ****           (+++) Enable the Address Resolution Protocol (ARP) using I2C_ARPCmd() function
  53:./FWLIB/src/stm32f4xx_i2c.c ****           (+++) Configure the SMBusAlert pin using I2C_SMBusAlertConfig() function
  54:./FWLIB/src/stm32f4xx_i2c.c ****   
  55:./FWLIB/src/stm32f4xx_i2c.c ****       (#) Enable the NVIC and the corresponding interrupt using the function 
  56:./FWLIB/src/stm32f4xx_i2c.c ****           I2C_ITConfig() if you need to use interrupt mode. 
  57:./FWLIB/src/stm32f4xx_i2c.c ****   
  58:./FWLIB/src/stm32f4xx_i2c.c ****       (#) When using the DMA mode 
  59:./FWLIB/src/stm32f4xx_i2c.c ****         (++) Configure the DMA using DMA_Init() function
  60:./FWLIB/src/stm32f4xx_i2c.c ****         (++) Active the needed channel Request using I2C_DMACmd() or
  61:./FWLIB/src/stm32f4xx_i2c.c ****              I2C_DMALastTransferCmd() function.
  62:./FWLIB/src/stm32f4xx_i2c.c ****         -@@- When using DMA mode, I2C interrupts may be used at the same time to
  63:./FWLIB/src/stm32f4xx_i2c.c ****              control the communication flow (Start/Stop/Ack... events and errors).
  64:./FWLIB/src/stm32f4xx_i2c.c ****    
  65:./FWLIB/src/stm32f4xx_i2c.c ****       (#) Enable the I2C using the I2C_Cmd() function.
  66:./FWLIB/src/stm32f4xx_i2c.c ****    
  67:./FWLIB/src/stm32f4xx_i2c.c ****       (#) Enable the DMA using the DMA_Cmd() function when using DMA mode in the 
  68:./FWLIB/src/stm32f4xx_i2c.c ****           transfers. 
  69:./FWLIB/src/stm32f4xx_i2c.c ****   
  70:./FWLIB/src/stm32f4xx_i2c.c ****     @endverbatim  
  71:./FWLIB/src/stm32f4xx_i2c.c ****   ******************************************************************************
  72:./FWLIB/src/stm32f4xx_i2c.c ****   * @attention
  73:./FWLIB/src/stm32f4xx_i2c.c ****   *
  74:./FWLIB/src/stm32f4xx_i2c.c ****   * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
  75:./FWLIB/src/stm32f4xx_i2c.c ****   *
  76:./FWLIB/src/stm32f4xx_i2c.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  77:./FWLIB/src/stm32f4xx_i2c.c ****   * You may not use this file except in compliance with the License.
  78:./FWLIB/src/stm32f4xx_i2c.c ****   * You may obtain a copy of the License at:
  79:./FWLIB/src/stm32f4xx_i2c.c ****   *
  80:./FWLIB/src/stm32f4xx_i2c.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  81:./FWLIB/src/stm32f4xx_i2c.c ****   *
  82:./FWLIB/src/stm32f4xx_i2c.c ****   * Unless required by applicable law or agreed to in writing, software 
  83:./FWLIB/src/stm32f4xx_i2c.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  84:./FWLIB/src/stm32f4xx_i2c.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  85:./FWLIB/src/stm32f4xx_i2c.c ****   * See the License for the specific language governing permissions and
  86:./FWLIB/src/stm32f4xx_i2c.c ****   * limitations under the License.
  87:./FWLIB/src/stm32f4xx_i2c.c ****   *
  88:./FWLIB/src/stm32f4xx_i2c.c ****   ******************************************************************************  
ARM GAS  /tmp/ccNtoG4Z.s 			page 3


  89:./FWLIB/src/stm32f4xx_i2c.c ****   */ 
  90:./FWLIB/src/stm32f4xx_i2c.c **** 
  91:./FWLIB/src/stm32f4xx_i2c.c **** /* Includes ------------------------------------------------------------------*/
  92:./FWLIB/src/stm32f4xx_i2c.c **** #include "stm32f4xx_i2c.h"
  93:./FWLIB/src/stm32f4xx_i2c.c **** #include "stm32f4xx_rcc.h"
  94:./FWLIB/src/stm32f4xx_i2c.c **** 
  95:./FWLIB/src/stm32f4xx_i2c.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  96:./FWLIB/src/stm32f4xx_i2c.c ****   * @{
  97:./FWLIB/src/stm32f4xx_i2c.c ****   */
  98:./FWLIB/src/stm32f4xx_i2c.c **** 
  99:./FWLIB/src/stm32f4xx_i2c.c **** /** @defgroup I2C 
 100:./FWLIB/src/stm32f4xx_i2c.c ****   * @brief I2C driver modules
 101:./FWLIB/src/stm32f4xx_i2c.c ****   * @{
 102:./FWLIB/src/stm32f4xx_i2c.c ****   */ 
 103:./FWLIB/src/stm32f4xx_i2c.c **** 
 104:./FWLIB/src/stm32f4xx_i2c.c **** /* Private typedef -----------------------------------------------------------*/
 105:./FWLIB/src/stm32f4xx_i2c.c **** /* Private define ------------------------------------------------------------*/
 106:./FWLIB/src/stm32f4xx_i2c.c **** 
 107:./FWLIB/src/stm32f4xx_i2c.c **** #define CR1_CLEAR_MASK    ((uint16_t)0xFBF5)      /*<! I2C registers Masks */
 108:./FWLIB/src/stm32f4xx_i2c.c **** #define FLAG_MASK         ((uint32_t)0x00FFFFFF)  /*<! I2C FLAG mask */
 109:./FWLIB/src/stm32f4xx_i2c.c **** #define ITEN_MASK         ((uint32_t)0x07000000)  /*<! I2C Interrupt Enable mask */
 110:./FWLIB/src/stm32f4xx_i2c.c **** 
 111:./FWLIB/src/stm32f4xx_i2c.c **** /* Private macro -------------------------------------------------------------*/
 112:./FWLIB/src/stm32f4xx_i2c.c **** /* Private variables ---------------------------------------------------------*/
 113:./FWLIB/src/stm32f4xx_i2c.c **** /* Private function prototypes -----------------------------------------------*/
 114:./FWLIB/src/stm32f4xx_i2c.c **** /* Private functions ---------------------------------------------------------*/
 115:./FWLIB/src/stm32f4xx_i2c.c **** 
 116:./FWLIB/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Private_Functions
 117:./FWLIB/src/stm32f4xx_i2c.c ****   * @{
 118:./FWLIB/src/stm32f4xx_i2c.c ****   */
 119:./FWLIB/src/stm32f4xx_i2c.c **** 
 120:./FWLIB/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group1 Initialization and Configuration functions
 121:./FWLIB/src/stm32f4xx_i2c.c ****  *  @brief   Initialization and Configuration functions 
 122:./FWLIB/src/stm32f4xx_i2c.c ****  *
 123:./FWLIB/src/stm32f4xx_i2c.c **** @verbatim   
 124:./FWLIB/src/stm32f4xx_i2c.c ****  ===============================================================================
 125:./FWLIB/src/stm32f4xx_i2c.c ****             ##### Initialization and Configuration functions #####
 126:./FWLIB/src/stm32f4xx_i2c.c ****  ===============================================================================  
 127:./FWLIB/src/stm32f4xx_i2c.c **** 
 128:./FWLIB/src/stm32f4xx_i2c.c **** @endverbatim
 129:./FWLIB/src/stm32f4xx_i2c.c ****   * @{
 130:./FWLIB/src/stm32f4xx_i2c.c ****   */
 131:./FWLIB/src/stm32f4xx_i2c.c **** 
 132:./FWLIB/src/stm32f4xx_i2c.c **** /**
 133:./FWLIB/src/stm32f4xx_i2c.c ****   * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
 134:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 135:./FWLIB/src/stm32f4xx_i2c.c ****   * @retval None
 136:./FWLIB/src/stm32f4xx_i2c.c ****   */
 137:./FWLIB/src/stm32f4xx_i2c.c **** void I2C_DeInit(I2C_TypeDef* I2Cx)
 138:./FWLIB/src/stm32f4xx_i2c.c **** {
  28              		.loc 1 138 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 08B5     		push	{r3, lr}
  34              	.LCFI0:
ARM GAS  /tmp/ccNtoG4Z.s 			page 4


  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 3, -8
  37              		.cfi_offset 14, -4
 139:./FWLIB/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 140:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 141:./FWLIB/src/stm32f4xx_i2c.c **** 
 142:./FWLIB/src/stm32f4xx_i2c.c ****   if (I2Cx == I2C1)
  38              		.loc 1 142 0
  39 0002 154B     		ldr	r3, .L9
  40 0004 9842     		cmp	r0, r3
  41 0006 06D0     		beq	.L6
 143:./FWLIB/src/stm32f4xx_i2c.c ****   {
 144:./FWLIB/src/stm32f4xx_i2c.c ****     /* Enable I2C1 reset state */
 145:./FWLIB/src/stm32f4xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 146:./FWLIB/src/stm32f4xx_i2c.c ****     /* Release I2C1 from reset state */
 147:./FWLIB/src/stm32f4xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 148:./FWLIB/src/stm32f4xx_i2c.c ****   }
 149:./FWLIB/src/stm32f4xx_i2c.c ****   else if (I2Cx == I2C2)
  42              		.loc 1 149 0
  43 0008 144B     		ldr	r3, .L9+4
  44 000a 9842     		cmp	r0, r3
  45 000c 0ED0     		beq	.L7
 150:./FWLIB/src/stm32f4xx_i2c.c ****   {
 151:./FWLIB/src/stm32f4xx_i2c.c ****     /* Enable I2C2 reset state */
 152:./FWLIB/src/stm32f4xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 153:./FWLIB/src/stm32f4xx_i2c.c ****     /* Release I2C2 from reset state */
 154:./FWLIB/src/stm32f4xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 155:./FWLIB/src/stm32f4xx_i2c.c ****   }
 156:./FWLIB/src/stm32f4xx_i2c.c ****   else 
 157:./FWLIB/src/stm32f4xx_i2c.c ****   {
 158:./FWLIB/src/stm32f4xx_i2c.c ****     if (I2Cx == I2C3)
  46              		.loc 1 158 0
  47 000e 144B     		ldr	r3, .L9+8
  48 0010 9842     		cmp	r0, r3
  49 0012 16D0     		beq	.L8
  50              	.LVL1:
  51              	.L1:
 159:./FWLIB/src/stm32f4xx_i2c.c ****     {
 160:./FWLIB/src/stm32f4xx_i2c.c ****       /* Enable I2C3 reset state */
 161:./FWLIB/src/stm32f4xx_i2c.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 162:./FWLIB/src/stm32f4xx_i2c.c ****       /* Release I2C3 from reset state */
 163:./FWLIB/src/stm32f4xx_i2c.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 164:./FWLIB/src/stm32f4xx_i2c.c ****     }
 165:./FWLIB/src/stm32f4xx_i2c.c ****   }
 166:./FWLIB/src/stm32f4xx_i2c.c **** }
  52              		.loc 1 166 0
  53 0014 08BD     		pop	{r3, pc}
  54              	.LVL2:
  55              	.L6:
 145:./FWLIB/src/stm32f4xx_i2c.c ****     /* Release I2C1 from reset state */
  56              		.loc 1 145 0
  57 0016 0121     		movs	r1, #1
  58 0018 4FF40010 		mov	r0, #2097152
  59              	.LVL3:
  60 001c FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  61              	.LVL4:
 147:./FWLIB/src/stm32f4xx_i2c.c ****   }
ARM GAS  /tmp/ccNtoG4Z.s 			page 5


  62              		.loc 1 147 0
  63 0020 0021     		movs	r1, #0
  64 0022 4FF40010 		mov	r0, #2097152
  65 0026 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  66              	.LVL5:
  67 002a F3E7     		b	.L1
  68              	.LVL6:
  69              	.L7:
 152:./FWLIB/src/stm32f4xx_i2c.c ****     /* Release I2C2 from reset state */
  70              		.loc 1 152 0
  71 002c 0121     		movs	r1, #1
  72 002e 4FF48000 		mov	r0, #4194304
  73              	.LVL7:
  74 0032 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  75              	.LVL8:
 154:./FWLIB/src/stm32f4xx_i2c.c ****   }
  76              		.loc 1 154 0
  77 0036 0021     		movs	r1, #0
  78 0038 4FF48000 		mov	r0, #4194304
  79 003c FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  80              	.LVL9:
  81 0040 E8E7     		b	.L1
  82              	.LVL10:
  83              	.L8:
 161:./FWLIB/src/stm32f4xx_i2c.c ****       /* Release I2C3 from reset state */
  84              		.loc 1 161 0
  85 0042 0121     		movs	r1, #1
  86 0044 4FF40000 		mov	r0, #8388608
  87              	.LVL11:
  88 0048 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  89              	.LVL12:
 163:./FWLIB/src/stm32f4xx_i2c.c ****     }
  90              		.loc 1 163 0
  91 004c 0021     		movs	r1, #0
  92 004e 4FF40000 		mov	r0, #8388608
  93 0052 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  94              	.LVL13:
  95              		.loc 1 166 0
  96 0056 DDE7     		b	.L1
  97              	.L10:
  98              		.align	2
  99              	.L9:
 100 0058 00540040 		.word	1073763328
 101 005c 00580040 		.word	1073764352
 102 0060 005C0040 		.word	1073765376
 103              		.cfi_endproc
 104              	.LFE112:
 106              		.section	.text.I2C_Init,"ax",%progbits
 107              		.align	1
 108              		.global	I2C_Init
 109              		.syntax unified
 110              		.thumb
 111              		.thumb_func
 112              		.fpu fpv4-sp-d16
 114              	I2C_Init:
 115              	.LFB113:
 167:./FWLIB/src/stm32f4xx_i2c.c **** 
ARM GAS  /tmp/ccNtoG4Z.s 			page 6


 168:./FWLIB/src/stm32f4xx_i2c.c **** /**
 169:./FWLIB/src/stm32f4xx_i2c.c ****   * @brief  Initializes the I2Cx peripheral according to the specified 
 170:./FWLIB/src/stm32f4xx_i2c.c ****   *         parameters in the I2C_InitStruct.
 171:./FWLIB/src/stm32f4xx_i2c.c ****   *           
 172:./FWLIB/src/stm32f4xx_i2c.c ****   * @note   To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency 
 173:./FWLIB/src/stm32f4xx_i2c.c ****   *         (I2C peripheral input clock) must be a multiple of 10 MHz.  
 174:./FWLIB/src/stm32f4xx_i2c.c ****   *           
 175:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 176:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
 177:./FWLIB/src/stm32f4xx_i2c.c ****   *         the configuration information for the specified I2C peripheral.
 178:./FWLIB/src/stm32f4xx_i2c.c ****   * @retval None
 179:./FWLIB/src/stm32f4xx_i2c.c ****   */
 180:./FWLIB/src/stm32f4xx_i2c.c **** void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
 181:./FWLIB/src/stm32f4xx_i2c.c **** {
 116              		.loc 1 181 0
 117              		.cfi_startproc
 118              		@ args = 0, pretend = 0, frame = 16
 119              		@ frame_needed = 0, uses_anonymous_args = 0
 120              	.LVL14:
 121 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 122              	.LCFI1:
 123              		.cfi_def_cfa_offset 20
 124              		.cfi_offset 4, -20
 125              		.cfi_offset 5, -16
 126              		.cfi_offset 6, -12
 127              		.cfi_offset 7, -8
 128              		.cfi_offset 14, -4
 129 0002 85B0     		sub	sp, sp, #20
 130              	.LCFI2:
 131              		.cfi_def_cfa_offset 40
 132 0004 0446     		mov	r4, r0
 133 0006 0D46     		mov	r5, r1
 134              	.LVL15:
 182:./FWLIB/src/stm32f4xx_i2c.c ****   uint16_t tmpreg = 0, freqrange = 0;
 183:./FWLIB/src/stm32f4xx_i2c.c ****   uint16_t result = 0x04;
 184:./FWLIB/src/stm32f4xx_i2c.c ****   uint32_t pclk1 = 8000000;
 185:./FWLIB/src/stm32f4xx_i2c.c ****   RCC_ClocksTypeDef  rcc_clocks;
 186:./FWLIB/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 187:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 188:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_CLOCK_SPEED(I2C_InitStruct->I2C_ClockSpeed));
 189:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_MODE(I2C_InitStruct->I2C_Mode));
 190:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_DUTY_CYCLE(I2C_InitStruct->I2C_DutyCycle));
 191:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_OWN_ADDRESS1(I2C_InitStruct->I2C_OwnAddress1));
 192:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
 193:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));
 194:./FWLIB/src/stm32f4xx_i2c.c **** 
 195:./FWLIB/src/stm32f4xx_i2c.c **** /*---------------------------- I2Cx CR2 Configuration ------------------------*/
 196:./FWLIB/src/stm32f4xx_i2c.c ****   /* Get the I2Cx CR2 value */
 197:./FWLIB/src/stm32f4xx_i2c.c ****   tmpreg = I2Cx->CR2;
 135              		.loc 1 197 0
 136 0008 8688     		ldrh	r6, [r0, #4]
 137 000a B6B2     		uxth	r6, r6
 138              	.LVL16:
 198:./FWLIB/src/stm32f4xx_i2c.c ****   /* Clear frequency FREQ[5:0] bits */
 199:./FWLIB/src/stm32f4xx_i2c.c ****   tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 139              		.loc 1 199 0
 140 000c 26F03F06 		bic	r6, r6, #63
ARM GAS  /tmp/ccNtoG4Z.s 			page 7


 141              	.LVL17:
 142 0010 B6B2     		uxth	r6, r6
 143              	.LVL18:
 200:./FWLIB/src/stm32f4xx_i2c.c ****   /* Get pclk1 frequency value */
 201:./FWLIB/src/stm32f4xx_i2c.c ****   RCC_GetClocksFreq(&rcc_clocks);
 144              		.loc 1 201 0
 145 0012 6846     		mov	r0, sp
 146              	.LVL19:
 147 0014 FFF7FEFF 		bl	RCC_GetClocksFreq
 148              	.LVL20:
 202:./FWLIB/src/stm32f4xx_i2c.c ****   pclk1 = rcc_clocks.PCLK1_Frequency;
 149              		.loc 1 202 0
 150 0018 0298     		ldr	r0, [sp, #8]
 151              	.LVL21:
 203:./FWLIB/src/stm32f4xx_i2c.c ****   /* Set frequency bits depending on pclk1 value */
 204:./FWLIB/src/stm32f4xx_i2c.c ****   freqrange = (uint16_t)(pclk1 / 1000000);
 152              		.loc 1 204 0
 153 001a 2B4A     		ldr	r2, .L21
 154 001c A2FB0032 		umull	r3, r2, r2, r0
 155 0020 920C     		lsrs	r2, r2, #18
 156 0022 97B2     		uxth	r7, r2
 157              	.LVL22:
 205:./FWLIB/src/stm32f4xx_i2c.c ****   tmpreg |= freqrange;
 158              		.loc 1 205 0
 159 0024 3E43     		orrs	r6, r6, r7
 160              	.LVL23:
 206:./FWLIB/src/stm32f4xx_i2c.c ****   /* Write to I2Cx CR2 */
 207:./FWLIB/src/stm32f4xx_i2c.c ****   I2Cx->CR2 = tmpreg;
 161              		.loc 1 207 0
 162 0026 A680     		strh	r6, [r4, #4]	@ movhi
 208:./FWLIB/src/stm32f4xx_i2c.c **** 
 209:./FWLIB/src/stm32f4xx_i2c.c **** /*---------------------------- I2Cx CCR Configuration ------------------------*/
 210:./FWLIB/src/stm32f4xx_i2c.c ****   /* Disable the selected I2C peripheral to configure TRISE */
 211:./FWLIB/src/stm32f4xx_i2c.c ****   I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 163              		.loc 1 211 0
 164 0028 2188     		ldrh	r1, [r4]
 165 002a 89B2     		uxth	r1, r1
 166 002c 21F00101 		bic	r1, r1, #1
 167 0030 89B2     		uxth	r1, r1
 168 0032 2180     		strh	r1, [r4]	@ movhi
 169              	.LVL24:
 212:./FWLIB/src/stm32f4xx_i2c.c ****   /* Reset tmpreg value */
 213:./FWLIB/src/stm32f4xx_i2c.c ****   /* Clear F/S, DUTY and CCR[11:0] bits */
 214:./FWLIB/src/stm32f4xx_i2c.c ****   tmpreg = 0;
 215:./FWLIB/src/stm32f4xx_i2c.c **** 
 216:./FWLIB/src/stm32f4xx_i2c.c ****   /* Configure speed in standard mode */
 217:./FWLIB/src/stm32f4xx_i2c.c ****   if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 170              		.loc 1 217 0
 171 0034 2B68     		ldr	r3, [r5]
 172 0036 2549     		ldr	r1, .L21+4
 173 0038 8B42     		cmp	r3, r1
 174 003a 1ED8     		bhi	.L12
 218:./FWLIB/src/stm32f4xx_i2c.c ****   {
 219:./FWLIB/src/stm32f4xx_i2c.c ****     /* Standard mode speed calculate */
 220:./FWLIB/src/stm32f4xx_i2c.c ****     result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 175              		.loc 1 220 0
 176 003c 5B00     		lsls	r3, r3, #1
ARM GAS  /tmp/ccNtoG4Z.s 			page 8


 177 003e B0FBF3F3 		udiv	r3, r0, r3
 178 0042 9BB2     		uxth	r3, r3
 179              	.LVL25:
 221:./FWLIB/src/stm32f4xx_i2c.c ****     /* Test if CCR value is under 0x4*/
 222:./FWLIB/src/stm32f4xx_i2c.c ****     if (result < 0x04)
 180              		.loc 1 222 0
 181 0044 032B     		cmp	r3, #3
 182 0046 00D8     		bhi	.L13
 223:./FWLIB/src/stm32f4xx_i2c.c ****     {
 224:./FWLIB/src/stm32f4xx_i2c.c ****       /* Set minimum allowed value */
 225:./FWLIB/src/stm32f4xx_i2c.c ****       result = 0x04;  
 183              		.loc 1 225 0
 184 0048 0423     		movs	r3, #4
 185              	.LVL26:
 186              	.L13:
 226:./FWLIB/src/stm32f4xx_i2c.c ****     }
 227:./FWLIB/src/stm32f4xx_i2c.c ****     /* Set speed value for standard mode */
 228:./FWLIB/src/stm32f4xx_i2c.c ****     tmpreg |= result;	  
 229:./FWLIB/src/stm32f4xx_i2c.c ****     /* Set Maximum Rise Time for standard mode */
 230:./FWLIB/src/stm32f4xx_i2c.c ****     I2Cx->TRISE = freqrange + 1; 
 187              		.loc 1 230 0
 188 004a 0137     		adds	r7, r7, #1
 189              	.LVL27:
 190 004c 2784     		strh	r7, [r4, #32]	@ movhi
 191              	.LVL28:
 192              	.L14:
 231:./FWLIB/src/stm32f4xx_i2c.c ****   }
 232:./FWLIB/src/stm32f4xx_i2c.c ****   /* Configure speed in fast mode */
 233:./FWLIB/src/stm32f4xx_i2c.c ****   /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
 234:./FWLIB/src/stm32f4xx_i2c.c ****      input clock) must be a multiple of 10 MHz */
 235:./FWLIB/src/stm32f4xx_i2c.c ****   else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
 236:./FWLIB/src/stm32f4xx_i2c.c ****   {
 237:./FWLIB/src/stm32f4xx_i2c.c ****     if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 238:./FWLIB/src/stm32f4xx_i2c.c ****     {
 239:./FWLIB/src/stm32f4xx_i2c.c ****       /* Fast mode speed calculate: Tlow/Thigh = 2 */
 240:./FWLIB/src/stm32f4xx_i2c.c ****       result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 241:./FWLIB/src/stm32f4xx_i2c.c ****     }
 242:./FWLIB/src/stm32f4xx_i2c.c ****     else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
 243:./FWLIB/src/stm32f4xx_i2c.c ****     {
 244:./FWLIB/src/stm32f4xx_i2c.c ****       /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
 245:./FWLIB/src/stm32f4xx_i2c.c ****       result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 246:./FWLIB/src/stm32f4xx_i2c.c ****       /* Set DUTY bit */
 247:./FWLIB/src/stm32f4xx_i2c.c ****       result |= I2C_DutyCycle_16_9;
 248:./FWLIB/src/stm32f4xx_i2c.c ****     }
 249:./FWLIB/src/stm32f4xx_i2c.c **** 
 250:./FWLIB/src/stm32f4xx_i2c.c ****     /* Test if CCR value is under 0x1*/
 251:./FWLIB/src/stm32f4xx_i2c.c ****     if ((result & I2C_CCR_CCR) == 0)
 252:./FWLIB/src/stm32f4xx_i2c.c ****     {
 253:./FWLIB/src/stm32f4xx_i2c.c ****       /* Set minimum allowed value */
 254:./FWLIB/src/stm32f4xx_i2c.c ****       result |= (uint16_t)0x0001;  
 255:./FWLIB/src/stm32f4xx_i2c.c ****     }
 256:./FWLIB/src/stm32f4xx_i2c.c ****     /* Set speed value and set F/S bit for fast mode */
 257:./FWLIB/src/stm32f4xx_i2c.c ****     tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 258:./FWLIB/src/stm32f4xx_i2c.c ****     /* Set Maximum Rise Time for fast mode */
 259:./FWLIB/src/stm32f4xx_i2c.c ****     I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 260:./FWLIB/src/stm32f4xx_i2c.c ****   }
 261:./FWLIB/src/stm32f4xx_i2c.c **** 
ARM GAS  /tmp/ccNtoG4Z.s 			page 9


 262:./FWLIB/src/stm32f4xx_i2c.c ****   /* Write to I2Cx CCR */
 263:./FWLIB/src/stm32f4xx_i2c.c ****   I2Cx->CCR = tmpreg;
 193              		.loc 1 263 0
 194 004e A383     		strh	r3, [r4, #28]	@ movhi
 264:./FWLIB/src/stm32f4xx_i2c.c ****   /* Enable the selected I2C peripheral */
 265:./FWLIB/src/stm32f4xx_i2c.c ****   I2Cx->CR1 |= I2C_CR1_PE;
 195              		.loc 1 265 0
 196 0050 2388     		ldrh	r3, [r4]
 197              	.LVL29:
 198 0052 43F00103 		orr	r3, r3, #1
 199 0056 2380     		strh	r3, [r4]	@ movhi
 200              	.LVL30:
 266:./FWLIB/src/stm32f4xx_i2c.c **** 
 267:./FWLIB/src/stm32f4xx_i2c.c **** /*---------------------------- I2Cx CR1 Configuration ------------------------*/
 268:./FWLIB/src/stm32f4xx_i2c.c ****   /* Get the I2Cx CR1 value */
 269:./FWLIB/src/stm32f4xx_i2c.c ****   tmpreg = I2Cx->CR1;
 201              		.loc 1 269 0
 202 0058 2388     		ldrh	r3, [r4]
 203 005a 9BB2     		uxth	r3, r3
 204              	.LVL31:
 270:./FWLIB/src/stm32f4xx_i2c.c ****   /* Clear ACK, SMBTYPE and  SMBUS bits */
 271:./FWLIB/src/stm32f4xx_i2c.c ****   tmpreg &= CR1_CLEAR_MASK;
 205              		.loc 1 271 0
 206 005c 23F48163 		bic	r3, r3, #1032
 207              	.LVL32:
 208 0060 23F00203 		bic	r3, r3, #2
 209              	.LVL33:
 272:./FWLIB/src/stm32f4xx_i2c.c ****   /* Configure I2Cx: mode and acknowledgement */
 273:./FWLIB/src/stm32f4xx_i2c.c ****   /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
 274:./FWLIB/src/stm32f4xx_i2c.c ****   /* Set ACK bit according to I2C_Ack value */
 275:./FWLIB/src/stm32f4xx_i2c.c ****   tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 210              		.loc 1 275 0
 211 0064 AA88     		ldrh	r2, [r5, #4]
 212 0066 6989     		ldrh	r1, [r5, #10]
 213 0068 0A43     		orrs	r2, r2, r1
 214 006a 1343     		orrs	r3, r3, r2
 215              	.LVL34:
 276:./FWLIB/src/stm32f4xx_i2c.c ****   /* Write to I2Cx CR1 */
 277:./FWLIB/src/stm32f4xx_i2c.c ****   I2Cx->CR1 = tmpreg;
 216              		.loc 1 277 0
 217 006c 2380     		strh	r3, [r4]	@ movhi
 278:./FWLIB/src/stm32f4xx_i2c.c **** 
 279:./FWLIB/src/stm32f4xx_i2c.c **** /*---------------------------- I2Cx OAR1 Configuration -----------------------*/
 280:./FWLIB/src/stm32f4xx_i2c.c ****   /* Set I2Cx Own Address1 and acknowledged address */
 281:./FWLIB/src/stm32f4xx_i2c.c ****   I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 218              		.loc 1 281 0
 219 006e AB89     		ldrh	r3, [r5, #12]
 220              	.LVL35:
 221 0070 2A89     		ldrh	r2, [r5, #8]
 222 0072 1343     		orrs	r3, r3, r2
 223 0074 2381     		strh	r3, [r4, #8]	@ movhi
 224              	.LVL36:
 282:./FWLIB/src/stm32f4xx_i2c.c **** }
 225              		.loc 1 282 0
 226 0076 05B0     		add	sp, sp, #20
 227              	.LCFI3:
 228              		.cfi_remember_state
ARM GAS  /tmp/ccNtoG4Z.s 			page 10


 229              		.cfi_def_cfa_offset 20
 230              		@ sp needed
 231 0078 F0BD     		pop	{r4, r5, r6, r7, pc}
 232              	.LVL37:
 233              	.L12:
 234              	.LCFI4:
 235              		.cfi_restore_state
 237:./FWLIB/src/stm32f4xx_i2c.c ****     {
 236              		.loc 1 237 0
 237 007a EE88     		ldrh	r6, [r5, #6]
 238 007c 4BF6FF71 		movw	r1, #49151
 239 0080 8E42     		cmp	r6, r1
 240 0082 1AD0     		beq	.L20
 245:./FWLIB/src/stm32f4xx_i2c.c ****       /* Set DUTY bit */
 241              		.loc 1 245 0
 242 0084 03EB8303 		add	r3, r3, r3, lsl #2
 243 0088 03EB8303 		add	r3, r3, r3, lsl #2
 244 008c B0FBF3F3 		udiv	r3, r0, r3
 245 0090 9BB2     		uxth	r3, r3
 246              	.LVL38:
 247:./FWLIB/src/stm32f4xx_i2c.c ****     }
 247              		.loc 1 247 0
 248 0092 43F48043 		orr	r3, r3, #16384
 249              	.LVL39:
 250              	.L16:
 251:./FWLIB/src/stm32f4xx_i2c.c ****     {
 251              		.loc 1 251 0
 252 0096 C3F30B01 		ubfx	r1, r3, #0, #12
 253 009a 09B9     		cbnz	r1, .L17
 254:./FWLIB/src/stm32f4xx_i2c.c ****     }
 254              		.loc 1 254 0
 255 009c 43F00103 		orr	r3, r3, #1
 256              	.LVL40:
 257              	.L17:
 257:./FWLIB/src/stm32f4xx_i2c.c ****     /* Set Maximum Rise Time for fast mode */
 258              		.loc 1 257 0
 259 00a0 43F40043 		orr	r3, r3, #32768
 260              	.LVL41:
 259:./FWLIB/src/stm32f4xx_i2c.c ****   }
 261              		.loc 1 259 0
 262 00a4 4FF49671 		mov	r1, #300
 263 00a8 02FB01F2 		mul	r2, r2, r1
 264 00ac 0849     		ldr	r1, .L21+8
 265 00ae 81FB0212 		smull	r1, r2, r1, r2
 266 00b2 9211     		asrs	r2, r2, #6
 267 00b4 0132     		adds	r2, r2, #1
 268 00b6 2284     		strh	r2, [r4, #32]	@ movhi
 269 00b8 C9E7     		b	.L14
 270              	.LVL42:
 271              	.L20:
 240:./FWLIB/src/stm32f4xx_i2c.c ****     }
 272              		.loc 1 240 0
 273 00ba 03EB4303 		add	r3, r3, r3, lsl #1
 274 00be B0FBF3F3 		udiv	r3, r0, r3
 275 00c2 9BB2     		uxth	r3, r3
 276              	.LVL43:
 277 00c4 E7E7     		b	.L16
ARM GAS  /tmp/ccNtoG4Z.s 			page 11


 278              	.L22:
 279 00c6 00BF     		.align	2
 280              	.L21:
 281 00c8 83DE1B43 		.word	1125899907
 282 00cc A0860100 		.word	100000
 283 00d0 D34D6210 		.word	274877907
 284              		.cfi_endproc
 285              	.LFE113:
 287              		.section	.text.I2C_StructInit,"ax",%progbits
 288              		.align	1
 289              		.global	I2C_StructInit
 290              		.syntax unified
 291              		.thumb
 292              		.thumb_func
 293              		.fpu fpv4-sp-d16
 295              	I2C_StructInit:
 296              	.LFB114:
 283:./FWLIB/src/stm32f4xx_i2c.c **** 
 284:./FWLIB/src/stm32f4xx_i2c.c **** /**
 285:./FWLIB/src/stm32f4xx_i2c.c ****   * @brief  Fills each I2C_InitStruct member with its default value.
 286:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  I2C_InitStruct: pointer to an I2C_InitTypeDef structure which will be initialized.
 287:./FWLIB/src/stm32f4xx_i2c.c ****   * @retval None
 288:./FWLIB/src/stm32f4xx_i2c.c ****   */
 289:./FWLIB/src/stm32f4xx_i2c.c **** void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
 290:./FWLIB/src/stm32f4xx_i2c.c **** {
 297              		.loc 1 290 0
 298              		.cfi_startproc
 299              		@ args = 0, pretend = 0, frame = 0
 300              		@ frame_needed = 0, uses_anonymous_args = 0
 301              		@ link register save eliminated.
 302              	.LVL44:
 291:./FWLIB/src/stm32f4xx_i2c.c **** /*---------------- Reset I2C init structure parameters values ----------------*/
 292:./FWLIB/src/stm32f4xx_i2c.c ****   /* initialize the I2C_ClockSpeed member */
 293:./FWLIB/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_ClockSpeed = 5000;
 303              		.loc 1 293 0
 304 0000 41F28833 		movw	r3, #5000
 305 0004 0360     		str	r3, [r0]
 294:./FWLIB/src/stm32f4xx_i2c.c ****   /* Initialize the I2C_Mode member */
 295:./FWLIB/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 306              		.loc 1 295 0
 307 0006 0023     		movs	r3, #0
 308 0008 8380     		strh	r3, [r0, #4]	@ movhi
 296:./FWLIB/src/stm32f4xx_i2c.c ****   /* Initialize the I2C_DutyCycle member */
 297:./FWLIB/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 309              		.loc 1 297 0
 310 000a 4BF6FF72 		movw	r2, #49151
 311 000e C280     		strh	r2, [r0, #6]	@ movhi
 298:./FWLIB/src/stm32f4xx_i2c.c ****   /* Initialize the I2C_OwnAddress1 member */
 299:./FWLIB/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_OwnAddress1 = 0;
 312              		.loc 1 299 0
 313 0010 0381     		strh	r3, [r0, #8]	@ movhi
 300:./FWLIB/src/stm32f4xx_i2c.c ****   /* Initialize the I2C_Ack member */
 301:./FWLIB/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 314              		.loc 1 301 0
 315 0012 4381     		strh	r3, [r0, #10]	@ movhi
 302:./FWLIB/src/stm32f4xx_i2c.c ****   /* Initialize the I2C_AcknowledgedAddress member */
 303:./FWLIB/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
ARM GAS  /tmp/ccNtoG4Z.s 			page 12


 316              		.loc 1 303 0
 317 0014 4FF48043 		mov	r3, #16384
 318 0018 8381     		strh	r3, [r0, #12]	@ movhi
 304:./FWLIB/src/stm32f4xx_i2c.c **** }
 319              		.loc 1 304 0
 320 001a 7047     		bx	lr
 321              		.cfi_endproc
 322              	.LFE114:
 324              		.section	.text.I2C_Cmd,"ax",%progbits
 325              		.align	1
 326              		.global	I2C_Cmd
 327              		.syntax unified
 328              		.thumb
 329              		.thumb_func
 330              		.fpu fpv4-sp-d16
 332              	I2C_Cmd:
 333              	.LFB115:
 305:./FWLIB/src/stm32f4xx_i2c.c **** 
 306:./FWLIB/src/stm32f4xx_i2c.c **** /**
 307:./FWLIB/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C peripheral.
 308:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 309:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2Cx peripheral. 
 310:./FWLIB/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 311:./FWLIB/src/stm32f4xx_i2c.c ****   * @retval None
 312:./FWLIB/src/stm32f4xx_i2c.c ****   */
 313:./FWLIB/src/stm32f4xx_i2c.c **** void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 314:./FWLIB/src/stm32f4xx_i2c.c **** {
 334              		.loc 1 314 0
 335              		.cfi_startproc
 336              		@ args = 0, pretend = 0, frame = 0
 337              		@ frame_needed = 0, uses_anonymous_args = 0
 338              		@ link register save eliminated.
 339              	.LVL45:
 315:./FWLIB/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 316:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 317:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 318:./FWLIB/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 340              		.loc 1 318 0
 341 0000 31B9     		cbnz	r1, .L27
 319:./FWLIB/src/stm32f4xx_i2c.c ****   {
 320:./FWLIB/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C peripheral */
 321:./FWLIB/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_PE;
 322:./FWLIB/src/stm32f4xx_i2c.c ****   }
 323:./FWLIB/src/stm32f4xx_i2c.c ****   else
 324:./FWLIB/src/stm32f4xx_i2c.c ****   {
 325:./FWLIB/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C peripheral */
 326:./FWLIB/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 342              		.loc 1 326 0
 343 0002 0388     		ldrh	r3, [r0]
 344 0004 9BB2     		uxth	r3, r3
 345 0006 23F00103 		bic	r3, r3, #1
 346 000a 9BB2     		uxth	r3, r3
 347 000c 0380     		strh	r3, [r0]	@ movhi
 327:./FWLIB/src/stm32f4xx_i2c.c ****   }
 328:./FWLIB/src/stm32f4xx_i2c.c **** }
 348              		.loc 1 328 0
 349 000e 7047     		bx	lr
ARM GAS  /tmp/ccNtoG4Z.s 			page 13


 350              	.L27:
 321:./FWLIB/src/stm32f4xx_i2c.c ****   }
 351              		.loc 1 321 0
 352 0010 0388     		ldrh	r3, [r0]
 353 0012 43F00103 		orr	r3, r3, #1
 354 0016 0380     		strh	r3, [r0]	@ movhi
 355 0018 7047     		bx	lr
 356              		.cfi_endproc
 357              	.LFE115:
 359              		.section	.text.I2C_AnalogFilterCmd,"ax",%progbits
 360              		.align	1
 361              		.global	I2C_AnalogFilterCmd
 362              		.syntax unified
 363              		.thumb
 364              		.thumb_func
 365              		.fpu fpv4-sp-d16
 367              	I2C_AnalogFilterCmd:
 368              	.LFB116:
 329:./FWLIB/src/stm32f4xx_i2c.c **** 
 330:./FWLIB/src/stm32f4xx_i2c.c **** /**
 331:./FWLIB/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the Analog filter of I2C peripheral.
 332:./FWLIB/src/stm32f4xx_i2c.c ****   * 
 333:./FWLIB/src/stm32f4xx_i2c.c ****   * @note   This function can be used only for STM32F42xxx/STM3243xxx, STM32F401xx and STM32F411xE 
 334:./FWLIB/src/stm32f4xx_i2c.c ****   *        
 335:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 336:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the Analog filter. 
 337:./FWLIB/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 338:./FWLIB/src/stm32f4xx_i2c.c ****   * @note   This function should be called before initializing and enabling
 339:./FWLIB/src/stm32f4xx_i2c.c ****             the I2C Peripheral.
 340:./FWLIB/src/stm32f4xx_i2c.c ****   * @retval None
 341:./FWLIB/src/stm32f4xx_i2c.c ****   */
 342:./FWLIB/src/stm32f4xx_i2c.c **** void I2C_AnalogFilterCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 343:./FWLIB/src/stm32f4xx_i2c.c **** {
 369              		.loc 1 343 0
 370              		.cfi_startproc
 371              		@ args = 0, pretend = 0, frame = 0
 372              		@ frame_needed = 0, uses_anonymous_args = 0
 373              		@ link register save eliminated.
 374              	.LVL46:
 344:./FWLIB/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 345:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 346:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 347:./FWLIB/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 375              		.loc 1 347 0
 376 0000 21B9     		cbnz	r1, .L31
 348:./FWLIB/src/stm32f4xx_i2c.c ****   {
 349:./FWLIB/src/stm32f4xx_i2c.c ****     /* Enable the analog filter */
 350:./FWLIB/src/stm32f4xx_i2c.c ****     I2Cx->FLTR &= (uint16_t)~((uint16_t)I2C_FLTR_ANOFF);    
 351:./FWLIB/src/stm32f4xx_i2c.c ****   }
 352:./FWLIB/src/stm32f4xx_i2c.c ****   else
 353:./FWLIB/src/stm32f4xx_i2c.c ****   {
 354:./FWLIB/src/stm32f4xx_i2c.c ****     /* Disable the analog filter */
 355:./FWLIB/src/stm32f4xx_i2c.c ****     I2Cx->FLTR |= I2C_FLTR_ANOFF;
 377              		.loc 1 355 0
 378 0002 838C     		ldrh	r3, [r0, #36]
 379 0004 43F01003 		orr	r3, r3, #16
 380 0008 8384     		strh	r3, [r0, #36]	@ movhi
ARM GAS  /tmp/ccNtoG4Z.s 			page 14


 356:./FWLIB/src/stm32f4xx_i2c.c ****   }
 357:./FWLIB/src/stm32f4xx_i2c.c **** }
 381              		.loc 1 357 0
 382 000a 7047     		bx	lr
 383              	.L31:
 350:./FWLIB/src/stm32f4xx_i2c.c ****   }
 384              		.loc 1 350 0
 385 000c 838C     		ldrh	r3, [r0, #36]
 386 000e 9BB2     		uxth	r3, r3
 387 0010 23F01003 		bic	r3, r3, #16
 388 0014 9BB2     		uxth	r3, r3
 389 0016 8384     		strh	r3, [r0, #36]	@ movhi
 390 0018 7047     		bx	lr
 391              		.cfi_endproc
 392              	.LFE116:
 394              		.section	.text.I2C_DigitalFilterConfig,"ax",%progbits
 395              		.align	1
 396              		.global	I2C_DigitalFilterConfig
 397              		.syntax unified
 398              		.thumb
 399              		.thumb_func
 400              		.fpu fpv4-sp-d16
 402              	I2C_DigitalFilterConfig:
 403              	.LFB117:
 358:./FWLIB/src/stm32f4xx_i2c.c **** 
 359:./FWLIB/src/stm32f4xx_i2c.c **** /**
 360:./FWLIB/src/stm32f4xx_i2c.c ****   * @brief  Configures the Digital noise filter of I2C peripheral.
 361:./FWLIB/src/stm32f4xx_i2c.c ****   * 
 362:./FWLIB/src/stm32f4xx_i2c.c ****   * @note   This function can be used only for STM32F42xxx/STM3243xxx, STM32F401xx and STM32F411xE 
 363:./FWLIB/src/stm32f4xx_i2c.c ****   *       
 364:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 365:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  I2C_DigitalFilter: Coefficient of digital noise filter. 
 366:./FWLIB/src/stm32f4xx_i2c.c ****   *          This parameter can be a number between 0x00 and 0x0F.
 367:./FWLIB/src/stm32f4xx_i2c.c ****   * @note   This function should be called before initializing and enabling
 368:./FWLIB/src/stm32f4xx_i2c.c ****             the I2C Peripheral.
 369:./FWLIB/src/stm32f4xx_i2c.c ****   * @retval None
 370:./FWLIB/src/stm32f4xx_i2c.c ****   */
 371:./FWLIB/src/stm32f4xx_i2c.c **** void I2C_DigitalFilterConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DigitalFilter)
 372:./FWLIB/src/stm32f4xx_i2c.c **** {
 404              		.loc 1 372 0
 405              		.cfi_startproc
 406              		@ args = 0, pretend = 0, frame = 0
 407              		@ frame_needed = 0, uses_anonymous_args = 0
 408              		@ link register save eliminated.
 409              	.LVL47:
 373:./FWLIB/src/stm32f4xx_i2c.c ****   uint16_t tmpreg = 0;
 374:./FWLIB/src/stm32f4xx_i2c.c ****   
 375:./FWLIB/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 376:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 377:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_DIGITAL_FILTER(I2C_DigitalFilter));
 378:./FWLIB/src/stm32f4xx_i2c.c ****   
 379:./FWLIB/src/stm32f4xx_i2c.c ****   /* Get the old register value */
 380:./FWLIB/src/stm32f4xx_i2c.c ****   tmpreg = I2Cx->FLTR;
 410              		.loc 1 380 0
 411 0000 838C     		ldrh	r3, [r0, #36]
 412 0002 9BB2     		uxth	r3, r3
 413              	.LVL48:
ARM GAS  /tmp/ccNtoG4Z.s 			page 15


 381:./FWLIB/src/stm32f4xx_i2c.c ****   
 382:./FWLIB/src/stm32f4xx_i2c.c ****   /* Reset I2Cx DNF bit [3:0] */
 383:./FWLIB/src/stm32f4xx_i2c.c ****   tmpreg &= (uint16_t)~((uint16_t)I2C_FLTR_DNF);
 414              		.loc 1 383 0
 415 0004 23F00F03 		bic	r3, r3, #15
 416              	.LVL49:
 384:./FWLIB/src/stm32f4xx_i2c.c ****   
 385:./FWLIB/src/stm32f4xx_i2c.c ****   /* Set I2Cx DNF coefficient */
 386:./FWLIB/src/stm32f4xx_i2c.c ****   tmpreg |= (uint16_t)((uint16_t)I2C_DigitalFilter & I2C_FLTR_DNF);
 417              		.loc 1 386 0
 418 0008 01F00F01 		and	r1, r1, #15
 419              	.LVL50:
 420 000c 0B43     		orrs	r3, r3, r1
 421              	.LVL51:
 387:./FWLIB/src/stm32f4xx_i2c.c ****   
 388:./FWLIB/src/stm32f4xx_i2c.c ****   /* Store the new register value */
 389:./FWLIB/src/stm32f4xx_i2c.c ****   I2Cx->FLTR = tmpreg;
 422              		.loc 1 389 0
 423 000e 8384     		strh	r3, [r0, #36]	@ movhi
 390:./FWLIB/src/stm32f4xx_i2c.c **** }
 424              		.loc 1 390 0
 425 0010 7047     		bx	lr
 426              		.cfi_endproc
 427              	.LFE117:
 429              		.section	.text.I2C_GenerateSTART,"ax",%progbits
 430              		.align	1
 431              		.global	I2C_GenerateSTART
 432              		.syntax unified
 433              		.thumb
 434              		.thumb_func
 435              		.fpu fpv4-sp-d16
 437              	I2C_GenerateSTART:
 438              	.LFB118:
 391:./FWLIB/src/stm32f4xx_i2c.c **** 
 392:./FWLIB/src/stm32f4xx_i2c.c **** /**
 393:./FWLIB/src/stm32f4xx_i2c.c ****   * @brief  Generates I2Cx communication START condition.
 394:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 395:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C START condition generation.
 396:./FWLIB/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 397:./FWLIB/src/stm32f4xx_i2c.c ****   * @retval None.
 398:./FWLIB/src/stm32f4xx_i2c.c ****   */
 399:./FWLIB/src/stm32f4xx_i2c.c **** void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
 400:./FWLIB/src/stm32f4xx_i2c.c **** {
 439              		.loc 1 400 0
 440              		.cfi_startproc
 441              		@ args = 0, pretend = 0, frame = 0
 442              		@ frame_needed = 0, uses_anonymous_args = 0
 443              		@ link register save eliminated.
 444              	.LVL52:
 401:./FWLIB/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 402:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 403:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 404:./FWLIB/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 445              		.loc 1 404 0
 446 0000 31B9     		cbnz	r1, .L36
 405:./FWLIB/src/stm32f4xx_i2c.c ****   {
 406:./FWLIB/src/stm32f4xx_i2c.c ****     /* Generate a START condition */
ARM GAS  /tmp/ccNtoG4Z.s 			page 16


 407:./FWLIB/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_START;
 408:./FWLIB/src/stm32f4xx_i2c.c ****   }
 409:./FWLIB/src/stm32f4xx_i2c.c ****   else
 410:./FWLIB/src/stm32f4xx_i2c.c ****   {
 411:./FWLIB/src/stm32f4xx_i2c.c ****     /* Disable the START condition generation */
 412:./FWLIB/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 447              		.loc 1 412 0
 448 0002 0388     		ldrh	r3, [r0]
 449 0004 9BB2     		uxth	r3, r3
 450 0006 23F48073 		bic	r3, r3, #256
 451 000a 9BB2     		uxth	r3, r3
 452 000c 0380     		strh	r3, [r0]	@ movhi
 413:./FWLIB/src/stm32f4xx_i2c.c ****   }
 414:./FWLIB/src/stm32f4xx_i2c.c **** }
 453              		.loc 1 414 0
 454 000e 7047     		bx	lr
 455              	.L36:
 407:./FWLIB/src/stm32f4xx_i2c.c ****   }
 456              		.loc 1 407 0
 457 0010 0388     		ldrh	r3, [r0]
 458 0012 43F48073 		orr	r3, r3, #256
 459 0016 0380     		strh	r3, [r0]	@ movhi
 460 0018 7047     		bx	lr
 461              		.cfi_endproc
 462              	.LFE118:
 464              		.section	.text.I2C_GenerateSTOP,"ax",%progbits
 465              		.align	1
 466              		.global	I2C_GenerateSTOP
 467              		.syntax unified
 468              		.thumb
 469              		.thumb_func
 470              		.fpu fpv4-sp-d16
 472              	I2C_GenerateSTOP:
 473              	.LFB119:
 415:./FWLIB/src/stm32f4xx_i2c.c **** 
 416:./FWLIB/src/stm32f4xx_i2c.c **** /**
 417:./FWLIB/src/stm32f4xx_i2c.c ****   * @brief  Generates I2Cx communication STOP condition.
 418:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 419:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C STOP condition generation.
 420:./FWLIB/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 421:./FWLIB/src/stm32f4xx_i2c.c ****   * @retval None.
 422:./FWLIB/src/stm32f4xx_i2c.c ****   */
 423:./FWLIB/src/stm32f4xx_i2c.c **** void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
 424:./FWLIB/src/stm32f4xx_i2c.c **** {
 474              		.loc 1 424 0
 475              		.cfi_startproc
 476              		@ args = 0, pretend = 0, frame = 0
 477              		@ frame_needed = 0, uses_anonymous_args = 0
 478              		@ link register save eliminated.
 479              	.LVL53:
 425:./FWLIB/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 426:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 427:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 428:./FWLIB/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 480              		.loc 1 428 0
 481 0000 31B9     		cbnz	r1, .L40
 429:./FWLIB/src/stm32f4xx_i2c.c ****   {
ARM GAS  /tmp/ccNtoG4Z.s 			page 17


 430:./FWLIB/src/stm32f4xx_i2c.c ****     /* Generate a STOP condition */
 431:./FWLIB/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_STOP;
 432:./FWLIB/src/stm32f4xx_i2c.c ****   }
 433:./FWLIB/src/stm32f4xx_i2c.c ****   else
 434:./FWLIB/src/stm32f4xx_i2c.c ****   {
 435:./FWLIB/src/stm32f4xx_i2c.c ****     /* Disable the STOP condition generation */
 436:./FWLIB/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 482              		.loc 1 436 0
 483 0002 0388     		ldrh	r3, [r0]
 484 0004 9BB2     		uxth	r3, r3
 485 0006 23F40073 		bic	r3, r3, #512
 486 000a 9BB2     		uxth	r3, r3
 487 000c 0380     		strh	r3, [r0]	@ movhi
 437:./FWLIB/src/stm32f4xx_i2c.c ****   }
 438:./FWLIB/src/stm32f4xx_i2c.c **** }
 488              		.loc 1 438 0
 489 000e 7047     		bx	lr
 490              	.L40:
 431:./FWLIB/src/stm32f4xx_i2c.c ****   }
 491              		.loc 1 431 0
 492 0010 0388     		ldrh	r3, [r0]
 493 0012 43F40073 		orr	r3, r3, #512
 494 0016 0380     		strh	r3, [r0]	@ movhi
 495 0018 7047     		bx	lr
 496              		.cfi_endproc
 497              	.LFE119:
 499              		.section	.text.I2C_Send7bitAddress,"ax",%progbits
 500              		.align	1
 501              		.global	I2C_Send7bitAddress
 502              		.syntax unified
 503              		.thumb
 504              		.thumb_func
 505              		.fpu fpv4-sp-d16
 507              	I2C_Send7bitAddress:
 508              	.LFB120:
 439:./FWLIB/src/stm32f4xx_i2c.c **** 
 440:./FWLIB/src/stm32f4xx_i2c.c **** /**
 441:./FWLIB/src/stm32f4xx_i2c.c ****   * @brief  Transmits the address byte to select the slave device.
 442:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 443:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  Address: specifies the slave address which will be transmitted
 444:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  I2C_Direction: specifies whether the I2C device will be a Transmitter
 445:./FWLIB/src/stm32f4xx_i2c.c ****   *         or a Receiver. 
 446:./FWLIB/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values
 447:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_Direction_Transmitter: Transmitter mode
 448:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_Direction_Receiver: Receiver mode
 449:./FWLIB/src/stm32f4xx_i2c.c ****   * @retval None.
 450:./FWLIB/src/stm32f4xx_i2c.c ****   */
 451:./FWLIB/src/stm32f4xx_i2c.c **** void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
 452:./FWLIB/src/stm32f4xx_i2c.c **** {
 509              		.loc 1 452 0
 510              		.cfi_startproc
 511              		@ args = 0, pretend = 0, frame = 0
 512              		@ frame_needed = 0, uses_anonymous_args = 0
 513              		@ link register save eliminated.
 514              	.LVL54:
 453:./FWLIB/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 454:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
ARM GAS  /tmp/ccNtoG4Z.s 			page 18


 455:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_DIRECTION(I2C_Direction));
 456:./FWLIB/src/stm32f4xx_i2c.c ****   /* Test on the direction to set/reset the read/write bit */
 457:./FWLIB/src/stm32f4xx_i2c.c ****   if (I2C_Direction != I2C_Direction_Transmitter)
 515              		.loc 1 457 0
 516 0000 22B9     		cbnz	r2, .L44
 458:./FWLIB/src/stm32f4xx_i2c.c ****   {
 459:./FWLIB/src/stm32f4xx_i2c.c ****     /* Set the address bit0 for read */
 460:./FWLIB/src/stm32f4xx_i2c.c ****     Address |= I2C_OAR1_ADD0;
 461:./FWLIB/src/stm32f4xx_i2c.c ****   }
 462:./FWLIB/src/stm32f4xx_i2c.c ****   else
 463:./FWLIB/src/stm32f4xx_i2c.c ****   {
 464:./FWLIB/src/stm32f4xx_i2c.c ****     /* Reset the address bit0 for write */
 465:./FWLIB/src/stm32f4xx_i2c.c ****     Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 517              		.loc 1 465 0
 518 0002 01F0FE01 		and	r1, r1, #254
 519              	.LVL55:
 520              	.L43:
 466:./FWLIB/src/stm32f4xx_i2c.c ****   }
 467:./FWLIB/src/stm32f4xx_i2c.c ****   /* Send the address */
 468:./FWLIB/src/stm32f4xx_i2c.c ****   I2Cx->DR = Address;
 521              		.loc 1 468 0
 522 0006 89B2     		uxth	r1, r1
 523              	.LVL56:
 524 0008 0182     		strh	r1, [r0, #16]	@ movhi
 469:./FWLIB/src/stm32f4xx_i2c.c **** }
 525              		.loc 1 469 0
 526 000a 7047     		bx	lr
 527              	.LVL57:
 528              	.L44:
 460:./FWLIB/src/stm32f4xx_i2c.c ****   }
 529              		.loc 1 460 0
 530 000c 41F00101 		orr	r1, r1, #1
 531              	.LVL58:
 532 0010 F9E7     		b	.L43
 533              		.cfi_endproc
 534              	.LFE120:
 536              		.section	.text.I2C_AcknowledgeConfig,"ax",%progbits
 537              		.align	1
 538              		.global	I2C_AcknowledgeConfig
 539              		.syntax unified
 540              		.thumb
 541              		.thumb_func
 542              		.fpu fpv4-sp-d16
 544              	I2C_AcknowledgeConfig:
 545              	.LFB121:
 470:./FWLIB/src/stm32f4xx_i2c.c **** 
 471:./FWLIB/src/stm32f4xx_i2c.c **** /**
 472:./FWLIB/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C acknowledge feature.
 473:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 474:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C Acknowledgement.
 475:./FWLIB/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 476:./FWLIB/src/stm32f4xx_i2c.c ****   * @retval None.
 477:./FWLIB/src/stm32f4xx_i2c.c ****   */
 478:./FWLIB/src/stm32f4xx_i2c.c **** void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
 479:./FWLIB/src/stm32f4xx_i2c.c **** {
 546              		.loc 1 479 0
 547              		.cfi_startproc
ARM GAS  /tmp/ccNtoG4Z.s 			page 19


 548              		@ args = 0, pretend = 0, frame = 0
 549              		@ frame_needed = 0, uses_anonymous_args = 0
 550              		@ link register save eliminated.
 551              	.LVL59:
 480:./FWLIB/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 481:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 482:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 483:./FWLIB/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 552              		.loc 1 483 0
 553 0000 31B9     		cbnz	r1, .L48
 484:./FWLIB/src/stm32f4xx_i2c.c ****   {
 485:./FWLIB/src/stm32f4xx_i2c.c ****     /* Enable the acknowledgement */
 486:./FWLIB/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ACK;
 487:./FWLIB/src/stm32f4xx_i2c.c ****   }
 488:./FWLIB/src/stm32f4xx_i2c.c ****   else
 489:./FWLIB/src/stm32f4xx_i2c.c ****   {
 490:./FWLIB/src/stm32f4xx_i2c.c ****     /* Disable the acknowledgement */
 491:./FWLIB/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 554              		.loc 1 491 0
 555 0002 0388     		ldrh	r3, [r0]
 556 0004 9BB2     		uxth	r3, r3
 557 0006 23F48063 		bic	r3, r3, #1024
 558 000a 9BB2     		uxth	r3, r3
 559 000c 0380     		strh	r3, [r0]	@ movhi
 492:./FWLIB/src/stm32f4xx_i2c.c ****   }
 493:./FWLIB/src/stm32f4xx_i2c.c **** }
 560              		.loc 1 493 0
 561 000e 7047     		bx	lr
 562              	.L48:
 486:./FWLIB/src/stm32f4xx_i2c.c ****   }
 563              		.loc 1 486 0
 564 0010 0388     		ldrh	r3, [r0]
 565 0012 43F48063 		orr	r3, r3, #1024
 566 0016 0380     		strh	r3, [r0]	@ movhi
 567 0018 7047     		bx	lr
 568              		.cfi_endproc
 569              	.LFE121:
 571              		.section	.text.I2C_OwnAddress2Config,"ax",%progbits
 572              		.align	1
 573              		.global	I2C_OwnAddress2Config
 574              		.syntax unified
 575              		.thumb
 576              		.thumb_func
 577              		.fpu fpv4-sp-d16
 579              	I2C_OwnAddress2Config:
 580              	.LFB122:
 494:./FWLIB/src/stm32f4xx_i2c.c **** 
 495:./FWLIB/src/stm32f4xx_i2c.c **** /**
 496:./FWLIB/src/stm32f4xx_i2c.c ****   * @brief  Configures the specified I2C own address2.
 497:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 498:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  Address: specifies the 7bit I2C own address2.
 499:./FWLIB/src/stm32f4xx_i2c.c ****   * @retval None.
 500:./FWLIB/src/stm32f4xx_i2c.c ****   */
 501:./FWLIB/src/stm32f4xx_i2c.c **** void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint8_t Address)
 502:./FWLIB/src/stm32f4xx_i2c.c **** {
 581              		.loc 1 502 0
 582              		.cfi_startproc
ARM GAS  /tmp/ccNtoG4Z.s 			page 20


 583              		@ args = 0, pretend = 0, frame = 0
 584              		@ frame_needed = 0, uses_anonymous_args = 0
 585              		@ link register save eliminated.
 586              	.LVL60:
 503:./FWLIB/src/stm32f4xx_i2c.c ****   uint16_t tmpreg = 0;
 504:./FWLIB/src/stm32f4xx_i2c.c **** 
 505:./FWLIB/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 506:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 507:./FWLIB/src/stm32f4xx_i2c.c **** 
 508:./FWLIB/src/stm32f4xx_i2c.c ****   /* Get the old register value */
 509:./FWLIB/src/stm32f4xx_i2c.c ****   tmpreg = I2Cx->OAR2;
 587              		.loc 1 509 0
 588 0000 8389     		ldrh	r3, [r0, #12]
 589 0002 9BB2     		uxth	r3, r3
 590              	.LVL61:
 510:./FWLIB/src/stm32f4xx_i2c.c **** 
 511:./FWLIB/src/stm32f4xx_i2c.c ****   /* Reset I2Cx Own address2 bit [7:1] */
 512:./FWLIB/src/stm32f4xx_i2c.c ****   tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 591              		.loc 1 512 0
 592 0004 23F0FE03 		bic	r3, r3, #254
 593              	.LVL62:
 513:./FWLIB/src/stm32f4xx_i2c.c **** 
 514:./FWLIB/src/stm32f4xx_i2c.c ****   /* Set I2Cx Own address2 */
 515:./FWLIB/src/stm32f4xx_i2c.c ****   tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 594              		.loc 1 515 0
 595 0008 01F0FE01 		and	r1, r1, #254
 596              	.LVL63:
 597 000c 0B43     		orrs	r3, r3, r1
 598              	.LVL64:
 516:./FWLIB/src/stm32f4xx_i2c.c **** 
 517:./FWLIB/src/stm32f4xx_i2c.c ****   /* Store the new register value */
 518:./FWLIB/src/stm32f4xx_i2c.c ****   I2Cx->OAR2 = tmpreg;
 599              		.loc 1 518 0
 600 000e 8381     		strh	r3, [r0, #12]	@ movhi
 519:./FWLIB/src/stm32f4xx_i2c.c **** }
 601              		.loc 1 519 0
 602 0010 7047     		bx	lr
 603              		.cfi_endproc
 604              	.LFE122:
 606              		.section	.text.I2C_DualAddressCmd,"ax",%progbits
 607              		.align	1
 608              		.global	I2C_DualAddressCmd
 609              		.syntax unified
 610              		.thumb
 611              		.thumb_func
 612              		.fpu fpv4-sp-d16
 614              	I2C_DualAddressCmd:
 615              	.LFB123:
 520:./FWLIB/src/stm32f4xx_i2c.c **** 
 521:./FWLIB/src/stm32f4xx_i2c.c **** /**
 522:./FWLIB/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C dual addressing mode.
 523:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 524:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C dual addressing mode.
 525:./FWLIB/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 526:./FWLIB/src/stm32f4xx_i2c.c ****   * @retval None
 527:./FWLIB/src/stm32f4xx_i2c.c ****   */
 528:./FWLIB/src/stm32f4xx_i2c.c **** void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
ARM GAS  /tmp/ccNtoG4Z.s 			page 21


 529:./FWLIB/src/stm32f4xx_i2c.c **** {
 616              		.loc 1 529 0
 617              		.cfi_startproc
 618              		@ args = 0, pretend = 0, frame = 0
 619              		@ frame_needed = 0, uses_anonymous_args = 0
 620              		@ link register save eliminated.
 621              	.LVL65:
 530:./FWLIB/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 531:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 532:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 533:./FWLIB/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 622              		.loc 1 533 0
 623 0000 31B9     		cbnz	r1, .L53
 534:./FWLIB/src/stm32f4xx_i2c.c ****   {
 535:./FWLIB/src/stm32f4xx_i2c.c ****     /* Enable dual addressing mode */
 536:./FWLIB/src/stm32f4xx_i2c.c ****     I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 537:./FWLIB/src/stm32f4xx_i2c.c ****   }
 538:./FWLIB/src/stm32f4xx_i2c.c ****   else
 539:./FWLIB/src/stm32f4xx_i2c.c ****   {
 540:./FWLIB/src/stm32f4xx_i2c.c ****     /* Disable dual addressing mode */
 541:./FWLIB/src/stm32f4xx_i2c.c ****     I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 624              		.loc 1 541 0
 625 0002 8389     		ldrh	r3, [r0, #12]
 626 0004 9BB2     		uxth	r3, r3
 627 0006 23F00103 		bic	r3, r3, #1
 628 000a 9BB2     		uxth	r3, r3
 629 000c 8381     		strh	r3, [r0, #12]	@ movhi
 542:./FWLIB/src/stm32f4xx_i2c.c ****   }
 543:./FWLIB/src/stm32f4xx_i2c.c **** }
 630              		.loc 1 543 0
 631 000e 7047     		bx	lr
 632              	.L53:
 536:./FWLIB/src/stm32f4xx_i2c.c ****   }
 633              		.loc 1 536 0
 634 0010 8389     		ldrh	r3, [r0, #12]
 635 0012 43F00103 		orr	r3, r3, #1
 636 0016 8381     		strh	r3, [r0, #12]	@ movhi
 637 0018 7047     		bx	lr
 638              		.cfi_endproc
 639              	.LFE123:
 641              		.section	.text.I2C_GeneralCallCmd,"ax",%progbits
 642              		.align	1
 643              		.global	I2C_GeneralCallCmd
 644              		.syntax unified
 645              		.thumb
 646              		.thumb_func
 647              		.fpu fpv4-sp-d16
 649              	I2C_GeneralCallCmd:
 650              	.LFB124:
 544:./FWLIB/src/stm32f4xx_i2c.c **** 
 545:./FWLIB/src/stm32f4xx_i2c.c **** /**
 546:./FWLIB/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C general call feature.
 547:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 548:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C General call.
 549:./FWLIB/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 550:./FWLIB/src/stm32f4xx_i2c.c ****   * @retval None
 551:./FWLIB/src/stm32f4xx_i2c.c ****   */
ARM GAS  /tmp/ccNtoG4Z.s 			page 22


 552:./FWLIB/src/stm32f4xx_i2c.c **** void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 553:./FWLIB/src/stm32f4xx_i2c.c **** {
 651              		.loc 1 553 0
 652              		.cfi_startproc
 653              		@ args = 0, pretend = 0, frame = 0
 654              		@ frame_needed = 0, uses_anonymous_args = 0
 655              		@ link register save eliminated.
 656              	.LVL66:
 554:./FWLIB/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 555:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 556:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 557:./FWLIB/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 657              		.loc 1 557 0
 658 0000 31B9     		cbnz	r1, .L57
 558:./FWLIB/src/stm32f4xx_i2c.c ****   {
 559:./FWLIB/src/stm32f4xx_i2c.c ****     /* Enable generall call */
 560:./FWLIB/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ENGC;
 561:./FWLIB/src/stm32f4xx_i2c.c ****   }
 562:./FWLIB/src/stm32f4xx_i2c.c ****   else
 563:./FWLIB/src/stm32f4xx_i2c.c ****   {
 564:./FWLIB/src/stm32f4xx_i2c.c ****     /* Disable generall call */
 565:./FWLIB/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 659              		.loc 1 565 0
 660 0002 0388     		ldrh	r3, [r0]
 661 0004 9BB2     		uxth	r3, r3
 662 0006 23F04003 		bic	r3, r3, #64
 663 000a 9BB2     		uxth	r3, r3
 664 000c 0380     		strh	r3, [r0]	@ movhi
 566:./FWLIB/src/stm32f4xx_i2c.c ****   }
 567:./FWLIB/src/stm32f4xx_i2c.c **** }
 665              		.loc 1 567 0
 666 000e 7047     		bx	lr
 667              	.L57:
 560:./FWLIB/src/stm32f4xx_i2c.c ****   }
 668              		.loc 1 560 0
 669 0010 0388     		ldrh	r3, [r0]
 670 0012 43F04003 		orr	r3, r3, #64
 671 0016 0380     		strh	r3, [r0]	@ movhi
 672 0018 7047     		bx	lr
 673              		.cfi_endproc
 674              	.LFE124:
 676              		.section	.text.I2C_SoftwareResetCmd,"ax",%progbits
 677              		.align	1
 678              		.global	I2C_SoftwareResetCmd
 679              		.syntax unified
 680              		.thumb
 681              		.thumb_func
 682              		.fpu fpv4-sp-d16
 684              	I2C_SoftwareResetCmd:
 685              	.LFB125:
 568:./FWLIB/src/stm32f4xx_i2c.c **** 
 569:./FWLIB/src/stm32f4xx_i2c.c **** /**
 570:./FWLIB/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C software reset.
 571:./FWLIB/src/stm32f4xx_i2c.c ****   * @note   When software reset is enabled, the I2C IOs are released (this can
 572:./FWLIB/src/stm32f4xx_i2c.c ****   *         be useful to recover from bus errors).  
 573:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 574:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C software reset.
ARM GAS  /tmp/ccNtoG4Z.s 			page 23


 575:./FWLIB/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 576:./FWLIB/src/stm32f4xx_i2c.c ****   * @retval None
 577:./FWLIB/src/stm32f4xx_i2c.c ****   */
 578:./FWLIB/src/stm32f4xx_i2c.c **** void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 579:./FWLIB/src/stm32f4xx_i2c.c **** {
 686              		.loc 1 579 0
 687              		.cfi_startproc
 688              		@ args = 0, pretend = 0, frame = 0
 689              		@ frame_needed = 0, uses_anonymous_args = 0
 690              		@ link register save eliminated.
 691              	.LVL67:
 580:./FWLIB/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 581:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 582:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 583:./FWLIB/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 692              		.loc 1 583 0
 693 0000 21B9     		cbnz	r1, .L61
 584:./FWLIB/src/stm32f4xx_i2c.c ****   {
 585:./FWLIB/src/stm32f4xx_i2c.c ****     /* Peripheral under reset */
 586:./FWLIB/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_SWRST;
 587:./FWLIB/src/stm32f4xx_i2c.c ****   }
 588:./FWLIB/src/stm32f4xx_i2c.c ****   else
 589:./FWLIB/src/stm32f4xx_i2c.c ****   {
 590:./FWLIB/src/stm32f4xx_i2c.c ****     /* Peripheral not under reset */
 591:./FWLIB/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 694              		.loc 1 591 0
 695 0002 0388     		ldrh	r3, [r0]
 696 0004 C3F30E03 		ubfx	r3, r3, #0, #15
 697 0008 0380     		strh	r3, [r0]	@ movhi
 592:./FWLIB/src/stm32f4xx_i2c.c ****   }
 593:./FWLIB/src/stm32f4xx_i2c.c **** }
 698              		.loc 1 593 0
 699 000a 7047     		bx	lr
 700              	.L61:
 586:./FWLIB/src/stm32f4xx_i2c.c ****   }
 701              		.loc 1 586 0
 702 000c 0388     		ldrh	r3, [r0]
 703 000e 43F40043 		orr	r3, r3, #32768
 704 0012 0380     		strh	r3, [r0]	@ movhi
 705 0014 7047     		bx	lr
 706              		.cfi_endproc
 707              	.LFE125:
 709              		.section	.text.I2C_StretchClockCmd,"ax",%progbits
 710              		.align	1
 711              		.global	I2C_StretchClockCmd
 712              		.syntax unified
 713              		.thumb
 714              		.thumb_func
 715              		.fpu fpv4-sp-d16
 717              	I2C_StretchClockCmd:
 718              	.LFB126:
 594:./FWLIB/src/stm32f4xx_i2c.c **** 
 595:./FWLIB/src/stm32f4xx_i2c.c **** /**
 596:./FWLIB/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C Clock stretching.
 597:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 598:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2Cx Clock stretching.
 599:./FWLIB/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
ARM GAS  /tmp/ccNtoG4Z.s 			page 24


 600:./FWLIB/src/stm32f4xx_i2c.c ****   * @retval None
 601:./FWLIB/src/stm32f4xx_i2c.c ****   */
 602:./FWLIB/src/stm32f4xx_i2c.c **** void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 603:./FWLIB/src/stm32f4xx_i2c.c **** {
 719              		.loc 1 603 0
 720              		.cfi_startproc
 721              		@ args = 0, pretend = 0, frame = 0
 722              		@ frame_needed = 0, uses_anonymous_args = 0
 723              		@ link register save eliminated.
 724              	.LVL68:
 604:./FWLIB/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 605:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 606:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 607:./FWLIB/src/stm32f4xx_i2c.c ****   if (NewState == DISABLE)
 725              		.loc 1 607 0
 726 0000 31B1     		cbz	r1, .L65
 608:./FWLIB/src/stm32f4xx_i2c.c ****   {
 609:./FWLIB/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C Clock stretching */
 610:./FWLIB/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 611:./FWLIB/src/stm32f4xx_i2c.c ****   }
 612:./FWLIB/src/stm32f4xx_i2c.c ****   else
 613:./FWLIB/src/stm32f4xx_i2c.c ****   {
 614:./FWLIB/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C Clock stretching */
 615:./FWLIB/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 727              		.loc 1 615 0
 728 0002 0388     		ldrh	r3, [r0]
 729 0004 9BB2     		uxth	r3, r3
 730 0006 23F08003 		bic	r3, r3, #128
 731 000a 9BB2     		uxth	r3, r3
 732 000c 0380     		strh	r3, [r0]	@ movhi
 616:./FWLIB/src/stm32f4xx_i2c.c ****   }
 617:./FWLIB/src/stm32f4xx_i2c.c **** }
 733              		.loc 1 617 0
 734 000e 7047     		bx	lr
 735              	.L65:
 610:./FWLIB/src/stm32f4xx_i2c.c ****   }
 736              		.loc 1 610 0
 737 0010 0388     		ldrh	r3, [r0]
 738 0012 43F08003 		orr	r3, r3, #128
 739 0016 0380     		strh	r3, [r0]	@ movhi
 740 0018 7047     		bx	lr
 741              		.cfi_endproc
 742              	.LFE126:
 744              		.section	.text.I2C_FastModeDutyCycleConfig,"ax",%progbits
 745              		.align	1
 746              		.global	I2C_FastModeDutyCycleConfig
 747              		.syntax unified
 748              		.thumb
 749              		.thumb_func
 750              		.fpu fpv4-sp-d16
 752              	I2C_FastModeDutyCycleConfig:
 753              	.LFB127:
 618:./FWLIB/src/stm32f4xx_i2c.c **** 
 619:./FWLIB/src/stm32f4xx_i2c.c **** /**
 620:./FWLIB/src/stm32f4xx_i2c.c ****   * @brief  Selects the specified I2C fast mode duty cycle.
 621:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 622:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  I2C_DutyCycle: specifies the fast mode duty cycle.
ARM GAS  /tmp/ccNtoG4Z.s 			page 25


 623:./FWLIB/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
 624:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_DutyCycle_2: I2C fast mode Tlow/Thigh = 2
 625:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_DutyCycle_16_9: I2C fast mode Tlow/Thigh = 16/9
 626:./FWLIB/src/stm32f4xx_i2c.c ****   * @retval None
 627:./FWLIB/src/stm32f4xx_i2c.c ****   */
 628:./FWLIB/src/stm32f4xx_i2c.c **** void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
 629:./FWLIB/src/stm32f4xx_i2c.c **** {
 754              		.loc 1 629 0
 755              		.cfi_startproc
 756              		@ args = 0, pretend = 0, frame = 0
 757              		@ frame_needed = 0, uses_anonymous_args = 0
 758              		@ link register save eliminated.
 759              	.LVL69:
 630:./FWLIB/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 631:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 632:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
 633:./FWLIB/src/stm32f4xx_i2c.c ****   if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 760              		.loc 1 633 0
 761 0000 B1F5804F 		cmp	r1, #16384
 762 0004 06D0     		beq	.L67
 634:./FWLIB/src/stm32f4xx_i2c.c ****   {
 635:./FWLIB/src/stm32f4xx_i2c.c ****     /* I2C fast mode Tlow/Thigh=2 */
 636:./FWLIB/src/stm32f4xx_i2c.c ****     I2Cx->CCR &= I2C_DutyCycle_2;
 763              		.loc 1 636 0
 764 0006 838B     		ldrh	r3, [r0, #28]
 765 0008 9BB2     		uxth	r3, r3
 766 000a 23F48043 		bic	r3, r3, #16384
 767 000e 9BB2     		uxth	r3, r3
 768 0010 8383     		strh	r3, [r0, #28]	@ movhi
 769 0012 7047     		bx	lr
 770              	.L67:
 637:./FWLIB/src/stm32f4xx_i2c.c ****   }
 638:./FWLIB/src/stm32f4xx_i2c.c ****   else
 639:./FWLIB/src/stm32f4xx_i2c.c ****   {
 640:./FWLIB/src/stm32f4xx_i2c.c ****     /* I2C fast mode Tlow/Thigh=16/9 */
 641:./FWLIB/src/stm32f4xx_i2c.c ****     I2Cx->CCR |= I2C_DutyCycle_16_9;
 771              		.loc 1 641 0
 772 0014 838B     		ldrh	r3, [r0, #28]
 773 0016 43F48043 		orr	r3, r3, #16384
 774 001a 8383     		strh	r3, [r0, #28]	@ movhi
 642:./FWLIB/src/stm32f4xx_i2c.c ****   }
 643:./FWLIB/src/stm32f4xx_i2c.c **** }
 775              		.loc 1 643 0
 776 001c 7047     		bx	lr
 777              		.cfi_endproc
 778              	.LFE127:
 780              		.section	.text.I2C_NACKPositionConfig,"ax",%progbits
 781              		.align	1
 782              		.global	I2C_NACKPositionConfig
 783              		.syntax unified
 784              		.thumb
 785              		.thumb_func
 786              		.fpu fpv4-sp-d16
 788              	I2C_NACKPositionConfig:
 789              	.LFB128:
 644:./FWLIB/src/stm32f4xx_i2c.c **** 
 645:./FWLIB/src/stm32f4xx_i2c.c **** /**
ARM GAS  /tmp/ccNtoG4Z.s 			page 26


 646:./FWLIB/src/stm32f4xx_i2c.c ****   * @brief  Selects the specified I2C NACK position in master receiver mode.
 647:./FWLIB/src/stm32f4xx_i2c.c ****   * @note   This function is useful in I2C Master Receiver mode when the number
 648:./FWLIB/src/stm32f4xx_i2c.c ****   *         of data to be received is equal to 2. In this case, this function 
 649:./FWLIB/src/stm32f4xx_i2c.c ****   *         should be called (with parameter I2C_NACKPosition_Next) before data 
 650:./FWLIB/src/stm32f4xx_i2c.c ****   *         reception starts,as described in the 2-byte reception procedure 
 651:./FWLIB/src/stm32f4xx_i2c.c ****   *         recommended in Reference Manual in Section: Master receiver.                
 652:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 653:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  I2C_NACKPosition: specifies the NACK position. 
 654:./FWLIB/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
 655:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_NACKPosition_Next: indicates that the next byte will be the last
 656:./FWLIB/src/stm32f4xx_i2c.c ****   *                                        received byte.  
 657:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_NACKPosition_Current: indicates that current byte is the last 
 658:./FWLIB/src/stm32f4xx_i2c.c ****   *                                           received byte.
 659:./FWLIB/src/stm32f4xx_i2c.c ****   *            
 660:./FWLIB/src/stm32f4xx_i2c.c ****   * @note    This function configures the same bit (POS) as I2C_PECPositionConfig() 
 661:./FWLIB/src/stm32f4xx_i2c.c ****   *          but is intended to be used in I2C mode while I2C_PECPositionConfig() 
 662:./FWLIB/src/stm32f4xx_i2c.c ****   *          is intended to used in SMBUS mode. 
 663:./FWLIB/src/stm32f4xx_i2c.c ****   *            
 664:./FWLIB/src/stm32f4xx_i2c.c ****   * @retval None
 665:./FWLIB/src/stm32f4xx_i2c.c ****   */
 666:./FWLIB/src/stm32f4xx_i2c.c **** void I2C_NACKPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_NACKPosition)
 667:./FWLIB/src/stm32f4xx_i2c.c **** {
 790              		.loc 1 667 0
 791              		.cfi_startproc
 792              		@ args = 0, pretend = 0, frame = 0
 793              		@ frame_needed = 0, uses_anonymous_args = 0
 794              		@ link register save eliminated.
 795              	.LVL70:
 668:./FWLIB/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 669:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 670:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
 671:./FWLIB/src/stm32f4xx_i2c.c ****   
 672:./FWLIB/src/stm32f4xx_i2c.c ****   /* Check the input parameter */
 673:./FWLIB/src/stm32f4xx_i2c.c ****   if (I2C_NACKPosition == I2C_NACKPosition_Next)
 796              		.loc 1 673 0
 797 0000 B1F5006F 		cmp	r1, #2048
 798 0004 06D0     		beq	.L72
 674:./FWLIB/src/stm32f4xx_i2c.c ****   {
 675:./FWLIB/src/stm32f4xx_i2c.c ****     /* Next byte in shift register is the last received byte */
 676:./FWLIB/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_NACKPosition_Next;
 677:./FWLIB/src/stm32f4xx_i2c.c ****   }
 678:./FWLIB/src/stm32f4xx_i2c.c ****   else
 679:./FWLIB/src/stm32f4xx_i2c.c ****   {
 680:./FWLIB/src/stm32f4xx_i2c.c ****     /* Current byte in shift register is the last received byte */
 681:./FWLIB/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= I2C_NACKPosition_Current;
 799              		.loc 1 681 0
 800 0006 0388     		ldrh	r3, [r0]
 801 0008 9BB2     		uxth	r3, r3
 802 000a 23F40063 		bic	r3, r3, #2048
 803 000e 9BB2     		uxth	r3, r3
 804 0010 0380     		strh	r3, [r0]	@ movhi
 682:./FWLIB/src/stm32f4xx_i2c.c ****   }
 683:./FWLIB/src/stm32f4xx_i2c.c **** }
 805              		.loc 1 683 0
 806 0012 7047     		bx	lr
 807              	.L72:
 676:./FWLIB/src/stm32f4xx_i2c.c ****   }
ARM GAS  /tmp/ccNtoG4Z.s 			page 27


 808              		.loc 1 676 0
 809 0014 0388     		ldrh	r3, [r0]
 810 0016 43F40063 		orr	r3, r3, #2048
 811 001a 0380     		strh	r3, [r0]	@ movhi
 812 001c 7047     		bx	lr
 813              		.cfi_endproc
 814              	.LFE128:
 816              		.section	.text.I2C_SMBusAlertConfig,"ax",%progbits
 817              		.align	1
 818              		.global	I2C_SMBusAlertConfig
 819              		.syntax unified
 820              		.thumb
 821              		.thumb_func
 822              		.fpu fpv4-sp-d16
 824              	I2C_SMBusAlertConfig:
 825              	.LFB129:
 684:./FWLIB/src/stm32f4xx_i2c.c **** 
 685:./FWLIB/src/stm32f4xx_i2c.c **** /**
 686:./FWLIB/src/stm32f4xx_i2c.c ****   * @brief  Drives the SMBusAlert pin high or low for the specified I2C.
 687:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 688:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  I2C_SMBusAlert: specifies SMBAlert pin level. 
 689:./FWLIB/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
 690:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_SMBusAlert_Low: SMBAlert pin driven low
 691:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_SMBusAlert_High: SMBAlert pin driven high
 692:./FWLIB/src/stm32f4xx_i2c.c ****   * @retval None
 693:./FWLIB/src/stm32f4xx_i2c.c ****   */
 694:./FWLIB/src/stm32f4xx_i2c.c **** void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
 695:./FWLIB/src/stm32f4xx_i2c.c **** {
 826              		.loc 1 695 0
 827              		.cfi_startproc
 828              		@ args = 0, pretend = 0, frame = 0
 829              		@ frame_needed = 0, uses_anonymous_args = 0
 830              		@ link register save eliminated.
 831              	.LVL71:
 696:./FWLIB/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 697:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 698:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
 699:./FWLIB/src/stm32f4xx_i2c.c ****   if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 832              		.loc 1 699 0
 833 0000 B1F5005F 		cmp	r1, #8192
 834 0004 06D0     		beq	.L76
 700:./FWLIB/src/stm32f4xx_i2c.c ****   {
 701:./FWLIB/src/stm32f4xx_i2c.c ****     /* Drive the SMBusAlert pin Low */
 702:./FWLIB/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_SMBusAlert_Low;
 703:./FWLIB/src/stm32f4xx_i2c.c ****   }
 704:./FWLIB/src/stm32f4xx_i2c.c ****   else
 705:./FWLIB/src/stm32f4xx_i2c.c ****   {
 706:./FWLIB/src/stm32f4xx_i2c.c ****     /* Drive the SMBusAlert pin High  */
 707:./FWLIB/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= I2C_SMBusAlert_High;
 835              		.loc 1 707 0
 836 0006 0388     		ldrh	r3, [r0]
 837 0008 9BB2     		uxth	r3, r3
 838 000a 23F40053 		bic	r3, r3, #8192
 839 000e 9BB2     		uxth	r3, r3
 840 0010 0380     		strh	r3, [r0]	@ movhi
 708:./FWLIB/src/stm32f4xx_i2c.c ****   }
 709:./FWLIB/src/stm32f4xx_i2c.c **** }
ARM GAS  /tmp/ccNtoG4Z.s 			page 28


 841              		.loc 1 709 0
 842 0012 7047     		bx	lr
 843              	.L76:
 702:./FWLIB/src/stm32f4xx_i2c.c ****   }
 844              		.loc 1 702 0
 845 0014 0388     		ldrh	r3, [r0]
 846 0016 43F40053 		orr	r3, r3, #8192
 847 001a 0380     		strh	r3, [r0]	@ movhi
 848 001c 7047     		bx	lr
 849              		.cfi_endproc
 850              	.LFE129:
 852              		.section	.text.I2C_ARPCmd,"ax",%progbits
 853              		.align	1
 854              		.global	I2C_ARPCmd
 855              		.syntax unified
 856              		.thumb
 857              		.thumb_func
 858              		.fpu fpv4-sp-d16
 860              	I2C_ARPCmd:
 861              	.LFB130:
 710:./FWLIB/src/stm32f4xx_i2c.c **** 
 711:./FWLIB/src/stm32f4xx_i2c.c **** /**
 712:./FWLIB/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C ARP.
 713:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 714:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2Cx ARP. 
 715:./FWLIB/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 716:./FWLIB/src/stm32f4xx_i2c.c ****   * @retval None
 717:./FWLIB/src/stm32f4xx_i2c.c ****   */
 718:./FWLIB/src/stm32f4xx_i2c.c **** void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 719:./FWLIB/src/stm32f4xx_i2c.c **** {
 862              		.loc 1 719 0
 863              		.cfi_startproc
 864              		@ args = 0, pretend = 0, frame = 0
 865              		@ frame_needed = 0, uses_anonymous_args = 0
 866              		@ link register save eliminated.
 867              	.LVL72:
 720:./FWLIB/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 721:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 722:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 723:./FWLIB/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 868              		.loc 1 723 0
 869 0000 31B9     		cbnz	r1, .L80
 724:./FWLIB/src/stm32f4xx_i2c.c ****   {
 725:./FWLIB/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C ARP */
 726:./FWLIB/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ENARP;
 727:./FWLIB/src/stm32f4xx_i2c.c ****   }
 728:./FWLIB/src/stm32f4xx_i2c.c ****   else
 729:./FWLIB/src/stm32f4xx_i2c.c ****   {
 730:./FWLIB/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C ARP */
 731:./FWLIB/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 870              		.loc 1 731 0
 871 0002 0388     		ldrh	r3, [r0]
 872 0004 9BB2     		uxth	r3, r3
 873 0006 23F01003 		bic	r3, r3, #16
 874 000a 9BB2     		uxth	r3, r3
 875 000c 0380     		strh	r3, [r0]	@ movhi
 732:./FWLIB/src/stm32f4xx_i2c.c ****   }
ARM GAS  /tmp/ccNtoG4Z.s 			page 29


 733:./FWLIB/src/stm32f4xx_i2c.c **** }
 876              		.loc 1 733 0
 877 000e 7047     		bx	lr
 878              	.L80:
 726:./FWLIB/src/stm32f4xx_i2c.c ****   }
 879              		.loc 1 726 0
 880 0010 0388     		ldrh	r3, [r0]
 881 0012 43F01003 		orr	r3, r3, #16
 882 0016 0380     		strh	r3, [r0]	@ movhi
 883 0018 7047     		bx	lr
 884              		.cfi_endproc
 885              	.LFE130:
 887              		.section	.text.I2C_SendData,"ax",%progbits
 888              		.align	1
 889              		.global	I2C_SendData
 890              		.syntax unified
 891              		.thumb
 892              		.thumb_func
 893              		.fpu fpv4-sp-d16
 895              	I2C_SendData:
 896              	.LFB131:
 734:./FWLIB/src/stm32f4xx_i2c.c **** /**
 735:./FWLIB/src/stm32f4xx_i2c.c ****   * @}
 736:./FWLIB/src/stm32f4xx_i2c.c ****   */
 737:./FWLIB/src/stm32f4xx_i2c.c **** 
 738:./FWLIB/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group2 Data transfers functions
 739:./FWLIB/src/stm32f4xx_i2c.c ****  *  @brief   Data transfers functions 
 740:./FWLIB/src/stm32f4xx_i2c.c ****  *
 741:./FWLIB/src/stm32f4xx_i2c.c **** @verbatim   
 742:./FWLIB/src/stm32f4xx_i2c.c ****  ===============================================================================
 743:./FWLIB/src/stm32f4xx_i2c.c ****                   ##### Data transfers functions #####
 744:./FWLIB/src/stm32f4xx_i2c.c ****  ===============================================================================  
 745:./FWLIB/src/stm32f4xx_i2c.c **** 
 746:./FWLIB/src/stm32f4xx_i2c.c **** @endverbatim
 747:./FWLIB/src/stm32f4xx_i2c.c ****   * @{
 748:./FWLIB/src/stm32f4xx_i2c.c ****   */
 749:./FWLIB/src/stm32f4xx_i2c.c **** 
 750:./FWLIB/src/stm32f4xx_i2c.c **** /**
 751:./FWLIB/src/stm32f4xx_i2c.c ****   * @brief  Sends a data byte through the I2Cx peripheral.
 752:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 753:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  Data: Byte to be transmitted..
 754:./FWLIB/src/stm32f4xx_i2c.c ****   * @retval None
 755:./FWLIB/src/stm32f4xx_i2c.c ****   */
 756:./FWLIB/src/stm32f4xx_i2c.c **** void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
 757:./FWLIB/src/stm32f4xx_i2c.c **** {
 897              		.loc 1 757 0
 898              		.cfi_startproc
 899              		@ args = 0, pretend = 0, frame = 0
 900              		@ frame_needed = 0, uses_anonymous_args = 0
 901              		@ link register save eliminated.
 902              	.LVL73:
 758:./FWLIB/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 759:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 760:./FWLIB/src/stm32f4xx_i2c.c ****   /* Write in the DR register the data to be sent */
 761:./FWLIB/src/stm32f4xx_i2c.c ****   I2Cx->DR = Data;
 903              		.loc 1 761 0
 904 0000 0182     		strh	r1, [r0, #16]	@ movhi
ARM GAS  /tmp/ccNtoG4Z.s 			page 30


 762:./FWLIB/src/stm32f4xx_i2c.c **** }
 905              		.loc 1 762 0
 906 0002 7047     		bx	lr
 907              		.cfi_endproc
 908              	.LFE131:
 910              		.section	.text.I2C_ReceiveData,"ax",%progbits
 911              		.align	1
 912              		.global	I2C_ReceiveData
 913              		.syntax unified
 914              		.thumb
 915              		.thumb_func
 916              		.fpu fpv4-sp-d16
 918              	I2C_ReceiveData:
 919              	.LFB132:
 763:./FWLIB/src/stm32f4xx_i2c.c **** 
 764:./FWLIB/src/stm32f4xx_i2c.c **** /**
 765:./FWLIB/src/stm32f4xx_i2c.c ****   * @brief  Returns the most recent received data by the I2Cx peripheral.
 766:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 767:./FWLIB/src/stm32f4xx_i2c.c ****   * @retval The value of the received data.
 768:./FWLIB/src/stm32f4xx_i2c.c ****   */
 769:./FWLIB/src/stm32f4xx_i2c.c **** uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
 770:./FWLIB/src/stm32f4xx_i2c.c **** {
 920              		.loc 1 770 0
 921              		.cfi_startproc
 922              		@ args = 0, pretend = 0, frame = 0
 923              		@ frame_needed = 0, uses_anonymous_args = 0
 924              		@ link register save eliminated.
 925              	.LVL74:
 771:./FWLIB/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 772:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 773:./FWLIB/src/stm32f4xx_i2c.c ****   /* Return the data in the DR register */
 774:./FWLIB/src/stm32f4xx_i2c.c ****   return (uint8_t)I2Cx->DR;
 926              		.loc 1 774 0
 927 0000 008A     		ldrh	r0, [r0, #16]
 928              	.LVL75:
 775:./FWLIB/src/stm32f4xx_i2c.c **** }
 929              		.loc 1 775 0
 930 0002 C0B2     		uxtb	r0, r0
 931 0004 7047     		bx	lr
 932              		.cfi_endproc
 933              	.LFE132:
 935              		.section	.text.I2C_TransmitPEC,"ax",%progbits
 936              		.align	1
 937              		.global	I2C_TransmitPEC
 938              		.syntax unified
 939              		.thumb
 940              		.thumb_func
 941              		.fpu fpv4-sp-d16
 943              	I2C_TransmitPEC:
 944              	.LFB133:
 776:./FWLIB/src/stm32f4xx_i2c.c **** 
 777:./FWLIB/src/stm32f4xx_i2c.c **** /**
 778:./FWLIB/src/stm32f4xx_i2c.c ****   * @}
 779:./FWLIB/src/stm32f4xx_i2c.c ****   */
 780:./FWLIB/src/stm32f4xx_i2c.c **** 
 781:./FWLIB/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group3 PEC management functions
 782:./FWLIB/src/stm32f4xx_i2c.c ****  *  @brief   PEC management functions 
ARM GAS  /tmp/ccNtoG4Z.s 			page 31


 783:./FWLIB/src/stm32f4xx_i2c.c ****  *
 784:./FWLIB/src/stm32f4xx_i2c.c **** @verbatim   
 785:./FWLIB/src/stm32f4xx_i2c.c ****  ===============================================================================
 786:./FWLIB/src/stm32f4xx_i2c.c ****                   ##### PEC management functions #####
 787:./FWLIB/src/stm32f4xx_i2c.c ****  ===============================================================================  
 788:./FWLIB/src/stm32f4xx_i2c.c **** 
 789:./FWLIB/src/stm32f4xx_i2c.c **** @endverbatim
 790:./FWLIB/src/stm32f4xx_i2c.c ****   * @{
 791:./FWLIB/src/stm32f4xx_i2c.c ****   */
 792:./FWLIB/src/stm32f4xx_i2c.c **** 
 793:./FWLIB/src/stm32f4xx_i2c.c **** /**
 794:./FWLIB/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C PEC transfer.
 795:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 796:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C PEC transmission.
 797:./FWLIB/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 798:./FWLIB/src/stm32f4xx_i2c.c ****   * @retval None
 799:./FWLIB/src/stm32f4xx_i2c.c ****   */
 800:./FWLIB/src/stm32f4xx_i2c.c **** void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
 801:./FWLIB/src/stm32f4xx_i2c.c **** {
 945              		.loc 1 801 0
 946              		.cfi_startproc
 947              		@ args = 0, pretend = 0, frame = 0
 948              		@ frame_needed = 0, uses_anonymous_args = 0
 949              		@ link register save eliminated.
 950              	.LVL76:
 802:./FWLIB/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 803:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 804:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 805:./FWLIB/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 951              		.loc 1 805 0
 952 0000 31B9     		cbnz	r1, .L86
 806:./FWLIB/src/stm32f4xx_i2c.c ****   {
 807:./FWLIB/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C PEC transmission */
 808:./FWLIB/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_PEC;
 809:./FWLIB/src/stm32f4xx_i2c.c ****   }
 810:./FWLIB/src/stm32f4xx_i2c.c ****   else
 811:./FWLIB/src/stm32f4xx_i2c.c ****   {
 812:./FWLIB/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C PEC transmission */
 813:./FWLIB/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 953              		.loc 1 813 0
 954 0002 0388     		ldrh	r3, [r0]
 955 0004 9BB2     		uxth	r3, r3
 956 0006 23F48053 		bic	r3, r3, #4096
 957 000a 9BB2     		uxth	r3, r3
 958 000c 0380     		strh	r3, [r0]	@ movhi
 814:./FWLIB/src/stm32f4xx_i2c.c ****   }
 815:./FWLIB/src/stm32f4xx_i2c.c **** }
 959              		.loc 1 815 0
 960 000e 7047     		bx	lr
 961              	.L86:
 808:./FWLIB/src/stm32f4xx_i2c.c ****   }
 962              		.loc 1 808 0
 963 0010 0388     		ldrh	r3, [r0]
 964 0012 43F48053 		orr	r3, r3, #4096
 965 0016 0380     		strh	r3, [r0]	@ movhi
 966 0018 7047     		bx	lr
 967              		.cfi_endproc
ARM GAS  /tmp/ccNtoG4Z.s 			page 32


 968              	.LFE133:
 970              		.section	.text.I2C_PECPositionConfig,"ax",%progbits
 971              		.align	1
 972              		.global	I2C_PECPositionConfig
 973              		.syntax unified
 974              		.thumb
 975              		.thumb_func
 976              		.fpu fpv4-sp-d16
 978              	I2C_PECPositionConfig:
 979              	.LFB134:
 816:./FWLIB/src/stm32f4xx_i2c.c **** 
 817:./FWLIB/src/stm32f4xx_i2c.c **** /**
 818:./FWLIB/src/stm32f4xx_i2c.c ****   * @brief  Selects the specified I2C PEC position.
 819:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 820:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  I2C_PECPosition: specifies the PEC position. 
 821:./FWLIB/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
 822:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_PECPosition_Next: indicates that the next byte is PEC
 823:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_PECPosition_Current: indicates that current byte is PEC
 824:./FWLIB/src/stm32f4xx_i2c.c ****   *       
 825:./FWLIB/src/stm32f4xx_i2c.c ****   * @note    This function configures the same bit (POS) as I2C_NACKPositionConfig()
 826:./FWLIB/src/stm32f4xx_i2c.c ****   *          but is intended to be used in SMBUS mode while I2C_NACKPositionConfig() 
 827:./FWLIB/src/stm32f4xx_i2c.c ****   *          is intended to used in I2C mode.
 828:./FWLIB/src/stm32f4xx_i2c.c ****   *                
 829:./FWLIB/src/stm32f4xx_i2c.c ****   * @retval None
 830:./FWLIB/src/stm32f4xx_i2c.c ****   */
 831:./FWLIB/src/stm32f4xx_i2c.c **** void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
 832:./FWLIB/src/stm32f4xx_i2c.c **** {
 980              		.loc 1 832 0
 981              		.cfi_startproc
 982              		@ args = 0, pretend = 0, frame = 0
 983              		@ frame_needed = 0, uses_anonymous_args = 0
 984              		@ link register save eliminated.
 985              	.LVL77:
 833:./FWLIB/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 834:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 835:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
 836:./FWLIB/src/stm32f4xx_i2c.c ****   if (I2C_PECPosition == I2C_PECPosition_Next)
 986              		.loc 1 836 0
 987 0000 B1F5006F 		cmp	r1, #2048
 988 0004 06D0     		beq	.L90
 837:./FWLIB/src/stm32f4xx_i2c.c ****   {
 838:./FWLIB/src/stm32f4xx_i2c.c ****     /* Next byte in shift register is PEC */
 839:./FWLIB/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_PECPosition_Next;
 840:./FWLIB/src/stm32f4xx_i2c.c ****   }
 841:./FWLIB/src/stm32f4xx_i2c.c ****   else
 842:./FWLIB/src/stm32f4xx_i2c.c ****   {
 843:./FWLIB/src/stm32f4xx_i2c.c ****     /* Current byte in shift register is PEC */
 844:./FWLIB/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= I2C_PECPosition_Current;
 989              		.loc 1 844 0
 990 0006 0388     		ldrh	r3, [r0]
 991 0008 9BB2     		uxth	r3, r3
 992 000a 23F40063 		bic	r3, r3, #2048
 993 000e 9BB2     		uxth	r3, r3
 994 0010 0380     		strh	r3, [r0]	@ movhi
 845:./FWLIB/src/stm32f4xx_i2c.c ****   }
 846:./FWLIB/src/stm32f4xx_i2c.c **** }
 995              		.loc 1 846 0
ARM GAS  /tmp/ccNtoG4Z.s 			page 33


 996 0012 7047     		bx	lr
 997              	.L90:
 839:./FWLIB/src/stm32f4xx_i2c.c ****   }
 998              		.loc 1 839 0
 999 0014 0388     		ldrh	r3, [r0]
 1000 0016 43F40063 		orr	r3, r3, #2048
 1001 001a 0380     		strh	r3, [r0]	@ movhi
 1002 001c 7047     		bx	lr
 1003              		.cfi_endproc
 1004              	.LFE134:
 1006              		.section	.text.I2C_CalculatePEC,"ax",%progbits
 1007              		.align	1
 1008              		.global	I2C_CalculatePEC
 1009              		.syntax unified
 1010              		.thumb
 1011              		.thumb_func
 1012              		.fpu fpv4-sp-d16
 1014              	I2C_CalculatePEC:
 1015              	.LFB135:
 847:./FWLIB/src/stm32f4xx_i2c.c **** 
 848:./FWLIB/src/stm32f4xx_i2c.c **** /**
 849:./FWLIB/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the PEC value calculation of the transferred bytes.
 850:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 851:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2Cx PEC value calculation.
 852:./FWLIB/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 853:./FWLIB/src/stm32f4xx_i2c.c ****   * @retval None
 854:./FWLIB/src/stm32f4xx_i2c.c ****   */
 855:./FWLIB/src/stm32f4xx_i2c.c **** void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
 856:./FWLIB/src/stm32f4xx_i2c.c **** {
 1016              		.loc 1 856 0
 1017              		.cfi_startproc
 1018              		@ args = 0, pretend = 0, frame = 0
 1019              		@ frame_needed = 0, uses_anonymous_args = 0
 1020              		@ link register save eliminated.
 1021              	.LVL78:
 857:./FWLIB/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 858:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 859:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 860:./FWLIB/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 1022              		.loc 1 860 0
 1023 0000 31B9     		cbnz	r1, .L94
 861:./FWLIB/src/stm32f4xx_i2c.c ****   {
 862:./FWLIB/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C PEC calculation */
 863:./FWLIB/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ENPEC;
 864:./FWLIB/src/stm32f4xx_i2c.c ****   }
 865:./FWLIB/src/stm32f4xx_i2c.c ****   else
 866:./FWLIB/src/stm32f4xx_i2c.c ****   {
 867:./FWLIB/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C PEC calculation */
 868:./FWLIB/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 1024              		.loc 1 868 0
 1025 0002 0388     		ldrh	r3, [r0]
 1026 0004 9BB2     		uxth	r3, r3
 1027 0006 23F02003 		bic	r3, r3, #32
 1028 000a 9BB2     		uxth	r3, r3
 1029 000c 0380     		strh	r3, [r0]	@ movhi
 869:./FWLIB/src/stm32f4xx_i2c.c ****   }
 870:./FWLIB/src/stm32f4xx_i2c.c **** }
ARM GAS  /tmp/ccNtoG4Z.s 			page 34


 1030              		.loc 1 870 0
 1031 000e 7047     		bx	lr
 1032              	.L94:
 863:./FWLIB/src/stm32f4xx_i2c.c ****   }
 1033              		.loc 1 863 0
 1034 0010 0388     		ldrh	r3, [r0]
 1035 0012 43F02003 		orr	r3, r3, #32
 1036 0016 0380     		strh	r3, [r0]	@ movhi
 1037 0018 7047     		bx	lr
 1038              		.cfi_endproc
 1039              	.LFE135:
 1041              		.section	.text.I2C_GetPEC,"ax",%progbits
 1042              		.align	1
 1043              		.global	I2C_GetPEC
 1044              		.syntax unified
 1045              		.thumb
 1046              		.thumb_func
 1047              		.fpu fpv4-sp-d16
 1049              	I2C_GetPEC:
 1050              	.LFB136:
 871:./FWLIB/src/stm32f4xx_i2c.c **** 
 872:./FWLIB/src/stm32f4xx_i2c.c **** /**
 873:./FWLIB/src/stm32f4xx_i2c.c ****   * @brief  Returns the PEC value for the specified I2C.
 874:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 875:./FWLIB/src/stm32f4xx_i2c.c ****   * @retval The PEC value.
 876:./FWLIB/src/stm32f4xx_i2c.c ****   */
 877:./FWLIB/src/stm32f4xx_i2c.c **** uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
 878:./FWLIB/src/stm32f4xx_i2c.c **** {
 1051              		.loc 1 878 0
 1052              		.cfi_startproc
 1053              		@ args = 0, pretend = 0, frame = 0
 1054              		@ frame_needed = 0, uses_anonymous_args = 0
 1055              		@ link register save eliminated.
 1056              	.LVL79:
 879:./FWLIB/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 880:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 881:./FWLIB/src/stm32f4xx_i2c.c ****   /* Return the selected I2C PEC value */
 882:./FWLIB/src/stm32f4xx_i2c.c ****   return ((I2Cx->SR2) >> 8);
 1057              		.loc 1 882 0
 1058 0000 008B     		ldrh	r0, [r0, #24]
 1059              	.LVL80:
 883:./FWLIB/src/stm32f4xx_i2c.c **** }
 1060              		.loc 1 883 0
 1061 0002 000A     		lsrs	r0, r0, #8
 1062 0004 7047     		bx	lr
 1063              		.cfi_endproc
 1064              	.LFE136:
 1066              		.section	.text.I2C_DMACmd,"ax",%progbits
 1067              		.align	1
 1068              		.global	I2C_DMACmd
 1069              		.syntax unified
 1070              		.thumb
 1071              		.thumb_func
 1072              		.fpu fpv4-sp-d16
 1074              	I2C_DMACmd:
 1075              	.LFB137:
 884:./FWLIB/src/stm32f4xx_i2c.c **** 
ARM GAS  /tmp/ccNtoG4Z.s 			page 35


 885:./FWLIB/src/stm32f4xx_i2c.c **** /**
 886:./FWLIB/src/stm32f4xx_i2c.c ****   * @}
 887:./FWLIB/src/stm32f4xx_i2c.c ****   */
 888:./FWLIB/src/stm32f4xx_i2c.c **** 
 889:./FWLIB/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group4 DMA transfers management functions
 890:./FWLIB/src/stm32f4xx_i2c.c ****  *  @brief   DMA transfers management functions 
 891:./FWLIB/src/stm32f4xx_i2c.c ****  *
 892:./FWLIB/src/stm32f4xx_i2c.c **** @verbatim   
 893:./FWLIB/src/stm32f4xx_i2c.c ****  ===============================================================================
 894:./FWLIB/src/stm32f4xx_i2c.c ****                 ##### DMA transfers management functions #####
 895:./FWLIB/src/stm32f4xx_i2c.c ****  ===============================================================================  
 896:./FWLIB/src/stm32f4xx_i2c.c ****   This section provides functions allowing to configure the I2C DMA channels 
 897:./FWLIB/src/stm32f4xx_i2c.c ****   requests.
 898:./FWLIB/src/stm32f4xx_i2c.c ****   
 899:./FWLIB/src/stm32f4xx_i2c.c **** @endverbatim
 900:./FWLIB/src/stm32f4xx_i2c.c ****   * @{
 901:./FWLIB/src/stm32f4xx_i2c.c ****   */
 902:./FWLIB/src/stm32f4xx_i2c.c **** 
 903:./FWLIB/src/stm32f4xx_i2c.c **** /**
 904:./FWLIB/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C DMA requests.
 905:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 906:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C DMA transfer.
 907:./FWLIB/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 908:./FWLIB/src/stm32f4xx_i2c.c ****   * @retval None
 909:./FWLIB/src/stm32f4xx_i2c.c ****   */
 910:./FWLIB/src/stm32f4xx_i2c.c **** void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 911:./FWLIB/src/stm32f4xx_i2c.c **** {
 1076              		.loc 1 911 0
 1077              		.cfi_startproc
 1078              		@ args = 0, pretend = 0, frame = 0
 1079              		@ frame_needed = 0, uses_anonymous_args = 0
 1080              		@ link register save eliminated.
 1081              	.LVL81:
 912:./FWLIB/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 913:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 914:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 915:./FWLIB/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 1082              		.loc 1 915 0
 1083 0000 31B9     		cbnz	r1, .L99
 916:./FWLIB/src/stm32f4xx_i2c.c ****   {
 917:./FWLIB/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C DMA requests */
 918:./FWLIB/src/stm32f4xx_i2c.c ****     I2Cx->CR2 |= I2C_CR2_DMAEN;
 919:./FWLIB/src/stm32f4xx_i2c.c ****   }
 920:./FWLIB/src/stm32f4xx_i2c.c ****   else
 921:./FWLIB/src/stm32f4xx_i2c.c ****   {
 922:./FWLIB/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C DMA requests */
 923:./FWLIB/src/stm32f4xx_i2c.c ****     I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 1084              		.loc 1 923 0
 1085 0002 8388     		ldrh	r3, [r0, #4]
 1086 0004 9BB2     		uxth	r3, r3
 1087 0006 23F40063 		bic	r3, r3, #2048
 1088 000a 9BB2     		uxth	r3, r3
 1089 000c 8380     		strh	r3, [r0, #4]	@ movhi
 924:./FWLIB/src/stm32f4xx_i2c.c ****   }
 925:./FWLIB/src/stm32f4xx_i2c.c **** }
 1090              		.loc 1 925 0
 1091 000e 7047     		bx	lr
ARM GAS  /tmp/ccNtoG4Z.s 			page 36


 1092              	.L99:
 918:./FWLIB/src/stm32f4xx_i2c.c ****   }
 1093              		.loc 1 918 0
 1094 0010 8388     		ldrh	r3, [r0, #4]
 1095 0012 43F40063 		orr	r3, r3, #2048
 1096 0016 8380     		strh	r3, [r0, #4]	@ movhi
 1097 0018 7047     		bx	lr
 1098              		.cfi_endproc
 1099              	.LFE137:
 1101              		.section	.text.I2C_DMALastTransferCmd,"ax",%progbits
 1102              		.align	1
 1103              		.global	I2C_DMALastTransferCmd
 1104              		.syntax unified
 1105              		.thumb
 1106              		.thumb_func
 1107              		.fpu fpv4-sp-d16
 1109              	I2C_DMALastTransferCmd:
 1110              	.LFB138:
 926:./FWLIB/src/stm32f4xx_i2c.c **** 
 927:./FWLIB/src/stm32f4xx_i2c.c **** /**
 928:./FWLIB/src/stm32f4xx_i2c.c ****   * @brief  Specifies that the next DMA transfer is the last one.
 929:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 930:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C DMA last transfer.
 931:./FWLIB/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 932:./FWLIB/src/stm32f4xx_i2c.c ****   * @retval None
 933:./FWLIB/src/stm32f4xx_i2c.c ****   */
 934:./FWLIB/src/stm32f4xx_i2c.c **** void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 935:./FWLIB/src/stm32f4xx_i2c.c **** {
 1111              		.loc 1 935 0
 1112              		.cfi_startproc
 1113              		@ args = 0, pretend = 0, frame = 0
 1114              		@ frame_needed = 0, uses_anonymous_args = 0
 1115              		@ link register save eliminated.
 1116              	.LVL82:
 936:./FWLIB/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 937:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 938:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 939:./FWLIB/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 1117              		.loc 1 939 0
 1118 0000 31B9     		cbnz	r1, .L103
 940:./FWLIB/src/stm32f4xx_i2c.c ****   {
 941:./FWLIB/src/stm32f4xx_i2c.c ****     /* Next DMA transfer is the last transfer */
 942:./FWLIB/src/stm32f4xx_i2c.c ****     I2Cx->CR2 |= I2C_CR2_LAST;
 943:./FWLIB/src/stm32f4xx_i2c.c ****   }
 944:./FWLIB/src/stm32f4xx_i2c.c ****   else
 945:./FWLIB/src/stm32f4xx_i2c.c ****   {
 946:./FWLIB/src/stm32f4xx_i2c.c ****     /* Next DMA transfer is not the last transfer */
 947:./FWLIB/src/stm32f4xx_i2c.c ****     I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 1119              		.loc 1 947 0
 1120 0002 8388     		ldrh	r3, [r0, #4]
 1121 0004 9BB2     		uxth	r3, r3
 1122 0006 23F48053 		bic	r3, r3, #4096
 1123 000a 9BB2     		uxth	r3, r3
 1124 000c 8380     		strh	r3, [r0, #4]	@ movhi
 948:./FWLIB/src/stm32f4xx_i2c.c ****   }
 949:./FWLIB/src/stm32f4xx_i2c.c **** }
 1125              		.loc 1 949 0
ARM GAS  /tmp/ccNtoG4Z.s 			page 37


 1126 000e 7047     		bx	lr
 1127              	.L103:
 942:./FWLIB/src/stm32f4xx_i2c.c ****   }
 1128              		.loc 1 942 0
 1129 0010 8388     		ldrh	r3, [r0, #4]
 1130 0012 43F48053 		orr	r3, r3, #4096
 1131 0016 8380     		strh	r3, [r0, #4]	@ movhi
 1132 0018 7047     		bx	lr
 1133              		.cfi_endproc
 1134              	.LFE138:
 1136              		.section	.text.I2C_ReadRegister,"ax",%progbits
 1137              		.align	1
 1138              		.global	I2C_ReadRegister
 1139              		.syntax unified
 1140              		.thumb
 1141              		.thumb_func
 1142              		.fpu fpv4-sp-d16
 1144              	I2C_ReadRegister:
 1145              	.LFB139:
 950:./FWLIB/src/stm32f4xx_i2c.c **** 
 951:./FWLIB/src/stm32f4xx_i2c.c **** /**
 952:./FWLIB/src/stm32f4xx_i2c.c ****   * @}
 953:./FWLIB/src/stm32f4xx_i2c.c ****   */
 954:./FWLIB/src/stm32f4xx_i2c.c **** 
 955:./FWLIB/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group5 Interrupts events and flags management functions
 956:./FWLIB/src/stm32f4xx_i2c.c ****  *  @brief   Interrupts, events and flags management functions
 957:./FWLIB/src/stm32f4xx_i2c.c ****  *
 958:./FWLIB/src/stm32f4xx_i2c.c **** @verbatim   
 959:./FWLIB/src/stm32f4xx_i2c.c ****  ===============================================================================
 960:./FWLIB/src/stm32f4xx_i2c.c ****           ##### Interrupts, events and flags management functions #####
 961:./FWLIB/src/stm32f4xx_i2c.c ****  ===============================================================================
 962:./FWLIB/src/stm32f4xx_i2c.c ****     [..]
 963:./FWLIB/src/stm32f4xx_i2c.c ****     This section provides functions allowing to configure the I2C Interrupts 
 964:./FWLIB/src/stm32f4xx_i2c.c ****     sources and check or clear the flags or pending bits status.
 965:./FWLIB/src/stm32f4xx_i2c.c ****     The user should identify which mode will be used in his application to manage 
 966:./FWLIB/src/stm32f4xx_i2c.c ****     the communication: Polling mode, Interrupt mode or DMA mode. 
 967:./FWLIB/src/stm32f4xx_i2c.c **** 
 968:./FWLIB/src/stm32f4xx_i2c.c **** 
 969:./FWLIB/src/stm32f4xx_i2c.c ****                 ##### I2C State Monitoring Functions #####                   
 970:./FWLIB/src/stm32f4xx_i2c.c ****  =============================================================================== 
 971:./FWLIB/src/stm32f4xx_i2c.c ****     [..]  
 972:./FWLIB/src/stm32f4xx_i2c.c ****     This I2C driver provides three different ways for I2C state monitoring
 973:./FWLIB/src/stm32f4xx_i2c.c ****     depending on the application requirements and constraints:
 974:./FWLIB/src/stm32f4xx_i2c.c ****          
 975:./FWLIB/src/stm32f4xx_i2c.c ****    
 976:./FWLIB/src/stm32f4xx_i2c.c ****      (#) Basic state monitoring (Using I2C_CheckEvent() function)
 977:./FWLIB/src/stm32f4xx_i2c.c ****      
 978:./FWLIB/src/stm32f4xx_i2c.c ****         It compares the status registers (SR1 and SR2) content to a given event
 979:./FWLIB/src/stm32f4xx_i2c.c ****         (can be the combination of one or more flags).
 980:./FWLIB/src/stm32f4xx_i2c.c ****         It returns SUCCESS if the current status includes the given flags 
 981:./FWLIB/src/stm32f4xx_i2c.c ****         and returns ERROR if one or more flags are missing in the current status.
 982:./FWLIB/src/stm32f4xx_i2c.c **** 
 983:./FWLIB/src/stm32f4xx_i2c.c ****           (++) When to use
 984:./FWLIB/src/stm32f4xx_i2c.c ****              (+++) This function is suitable for most applications as well as for startup 
 985:./FWLIB/src/stm32f4xx_i2c.c ****                activity since the events are fully described in the product reference 
 986:./FWLIB/src/stm32f4xx_i2c.c ****                manual (RM0090).
 987:./FWLIB/src/stm32f4xx_i2c.c ****              (+++) It is also suitable for users who need to define their own events.
ARM GAS  /tmp/ccNtoG4Z.s 			page 38


 988:./FWLIB/src/stm32f4xx_i2c.c **** 
 989:./FWLIB/src/stm32f4xx_i2c.c ****           (++) Limitations
 990:./FWLIB/src/stm32f4xx_i2c.c ****                If an error occurs (ie. error flags are set besides to the monitored 
 991:./FWLIB/src/stm32f4xx_i2c.c ****                flags), the I2C_CheckEvent() function may return SUCCESS despite 
 992:./FWLIB/src/stm32f4xx_i2c.c ****                the communication hold or corrupted real state. 
 993:./FWLIB/src/stm32f4xx_i2c.c ****                In this case, it is advised to use error interrupts to monitor 
 994:./FWLIB/src/stm32f4xx_i2c.c ****                the error events and handle them in the interrupt IRQ handler.
 995:./FWLIB/src/stm32f4xx_i2c.c ****          
 996:./FWLIB/src/stm32f4xx_i2c.c ****      -@@- For error management, it is advised to use the following functions:
 997:./FWLIB/src/stm32f4xx_i2c.c ****         (+@@) I2C_ITConfig() to configure and enable the error interrupts (I2C_IT_ERR).
 998:./FWLIB/src/stm32f4xx_i2c.c ****         (+@@) I2Cx_ER_IRQHandler() which is called when the error interrupt occurs.
 999:./FWLIB/src/stm32f4xx_i2c.c ****               Where x is the peripheral instance (I2C1, I2C2 ...)
1000:./FWLIB/src/stm32f4xx_i2c.c ****         (+@@) I2C_GetFlagStatus() or I2C_GetITStatus()  to be called into the 
1001:./FWLIB/src/stm32f4xx_i2c.c ****               I2Cx_ER_IRQHandler() function in order to determine which error occurred.
1002:./FWLIB/src/stm32f4xx_i2c.c ****         (+@@) I2C_ClearFlag() or I2C_ClearITPendingBit() and/or I2C_SoftwareResetCmd() 
1003:./FWLIB/src/stm32f4xx_i2c.c ****               and/or I2C_GenerateStop() in order to clear the error flag and source 
1004:./FWLIB/src/stm32f4xx_i2c.c ****               and return to correct  communication status.
1005:./FWLIB/src/stm32f4xx_i2c.c ****              
1006:./FWLIB/src/stm32f4xx_i2c.c ****  
1007:./FWLIB/src/stm32f4xx_i2c.c ****      (#) Advanced state monitoring (Using the function I2C_GetLastEvent())
1008:./FWLIB/src/stm32f4xx_i2c.c **** 
1009:./FWLIB/src/stm32f4xx_i2c.c ****         Using the function I2C_GetLastEvent() which returns the image of both status 
1010:./FWLIB/src/stm32f4xx_i2c.c ****         registers in a single word (uint32_t) (Status Register 2 value is shifted left 
1011:./FWLIB/src/stm32f4xx_i2c.c ****         by 16 bits and concatenated to Status Register 1).
1012:./FWLIB/src/stm32f4xx_i2c.c **** 
1013:./FWLIB/src/stm32f4xx_i2c.c ****           (++) When to use
1014:./FWLIB/src/stm32f4xx_i2c.c ****              (+++) This function is suitable for the same applications above but it 
1015:./FWLIB/src/stm32f4xx_i2c.c ****                allows to overcome the mentioned limitation of I2C_GetFlagStatus() 
1016:./FWLIB/src/stm32f4xx_i2c.c ****                function.
1017:./FWLIB/src/stm32f4xx_i2c.c ****              (+++) The returned value could be compared to events already defined in 
1018:./FWLIB/src/stm32f4xx_i2c.c ****                the library (stm32f4xx_i2c.h) or to custom values defined by user.
1019:./FWLIB/src/stm32f4xx_i2c.c ****                This function is suitable when multiple flags are monitored at the 
1020:./FWLIB/src/stm32f4xx_i2c.c ****                same time.
1021:./FWLIB/src/stm32f4xx_i2c.c ****              (+++) At the opposite of I2C_CheckEvent() function, this function allows 
1022:./FWLIB/src/stm32f4xx_i2c.c ****                user to choose when an event is accepted (when all events flags are 
1023:./FWLIB/src/stm32f4xx_i2c.c ****                set and no other flags are set or just when the needed flags are set 
1024:./FWLIB/src/stm32f4xx_i2c.c ****                like I2C_CheckEvent() function.
1025:./FWLIB/src/stm32f4xx_i2c.c **** 
1026:./FWLIB/src/stm32f4xx_i2c.c ****           (++) Limitations
1027:./FWLIB/src/stm32f4xx_i2c.c ****              (+++) User may need to define his own events.
1028:./FWLIB/src/stm32f4xx_i2c.c ****              (+++) Same remark concerning the error management is applicable for this 
1029:./FWLIB/src/stm32f4xx_i2c.c ****                function if user decides to check only regular communication flags 
1030:./FWLIB/src/stm32f4xx_i2c.c ****                (and ignores error flags).
1031:./FWLIB/src/stm32f4xx_i2c.c ****       
1032:./FWLIB/src/stm32f4xx_i2c.c ****  
1033:./FWLIB/src/stm32f4xx_i2c.c ****      (#) Flag-based state monitoring (Using the function I2C_GetFlagStatus())
1034:./FWLIB/src/stm32f4xx_i2c.c ****      
1035:./FWLIB/src/stm32f4xx_i2c.c ****       Using the function I2C_GetFlagStatus() which simply returns the status of 
1036:./FWLIB/src/stm32f4xx_i2c.c ****       one single flag (ie. I2C_FLAG_RXNE ...). 
1037:./FWLIB/src/stm32f4xx_i2c.c **** 
1038:./FWLIB/src/stm32f4xx_i2c.c ****           (++) When to use
1039:./FWLIB/src/stm32f4xx_i2c.c ****              (+++) This function could be used for specific applications or in debug 
1040:./FWLIB/src/stm32f4xx_i2c.c ****                phase.
1041:./FWLIB/src/stm32f4xx_i2c.c ****              (+++) It is suitable when only one flag checking is needed (most I2C 
1042:./FWLIB/src/stm32f4xx_i2c.c ****                events are monitored through multiple flags).
1043:./FWLIB/src/stm32f4xx_i2c.c ****           (++) Limitations: 
1044:./FWLIB/src/stm32f4xx_i2c.c ****              (+++) When calling this function, the Status register is accessed. 
ARM GAS  /tmp/ccNtoG4Z.s 			page 39


1045:./FWLIB/src/stm32f4xx_i2c.c ****                Some flags are cleared when the status register is accessed. 
1046:./FWLIB/src/stm32f4xx_i2c.c ****                So checking the status of one Flag, may clear other ones.
1047:./FWLIB/src/stm32f4xx_i2c.c ****              (+++) Function may need to be called twice or more in order to monitor 
1048:./FWLIB/src/stm32f4xx_i2c.c ****                one single event.
1049:./FWLIB/src/stm32f4xx_i2c.c ****  
1050:./FWLIB/src/stm32f4xx_i2c.c ****    For detailed description of Events, please refer to section I2C_Events in 
1051:./FWLIB/src/stm32f4xx_i2c.c ****    stm32f4xx_i2c.h file.
1052:./FWLIB/src/stm32f4xx_i2c.c ****        
1053:./FWLIB/src/stm32f4xx_i2c.c **** @endverbatim
1054:./FWLIB/src/stm32f4xx_i2c.c ****   * @{
1055:./FWLIB/src/stm32f4xx_i2c.c ****   */
1056:./FWLIB/src/stm32f4xx_i2c.c ****    
1057:./FWLIB/src/stm32f4xx_i2c.c **** /**
1058:./FWLIB/src/stm32f4xx_i2c.c ****   * @brief  Reads the specified I2C register and returns its value.
1059:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  I2C_Register: specifies the register to read.
1060:./FWLIB/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
1061:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_CR1:  CR1 register.
1062:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_CR2:   CR2 register.
1063:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_OAR1:  OAR1 register.
1064:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_OAR2:  OAR2 register.
1065:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_DR:    DR register.
1066:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_SR1:   SR1 register.
1067:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_SR2:   SR2 register.
1068:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_CCR:   CCR register.
1069:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_TRISE: TRISE register.
1070:./FWLIB/src/stm32f4xx_i2c.c ****   * @retval The value of the read register.
1071:./FWLIB/src/stm32f4xx_i2c.c ****   */
1072:./FWLIB/src/stm32f4xx_i2c.c **** uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
1073:./FWLIB/src/stm32f4xx_i2c.c **** {
 1146              		.loc 1 1073 0
 1147              		.cfi_startproc
 1148              		@ args = 0, pretend = 0, frame = 8
 1149              		@ frame_needed = 0, uses_anonymous_args = 0
 1150              		@ link register save eliminated.
 1151              	.LVL83:
 1152 0000 82B0     		sub	sp, sp, #8
 1153              	.LCFI5:
 1154              		.cfi_def_cfa_offset 8
1074:./FWLIB/src/stm32f4xx_i2c.c ****   __IO uint32_t tmp = 0;
 1155              		.loc 1 1074 0
 1156 0002 0023     		movs	r3, #0
 1157 0004 0193     		str	r3, [sp, #4]
1075:./FWLIB/src/stm32f4xx_i2c.c **** 
1076:./FWLIB/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1077:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1078:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_REGISTER(I2C_Register));
1079:./FWLIB/src/stm32f4xx_i2c.c **** 
1080:./FWLIB/src/stm32f4xx_i2c.c ****   tmp = (uint32_t) I2Cx;
 1158              		.loc 1 1080 0
 1159 0006 0190     		str	r0, [sp, #4]
1081:./FWLIB/src/stm32f4xx_i2c.c ****   tmp += I2C_Register;
 1160              		.loc 1 1081 0
 1161 0008 019B     		ldr	r3, [sp, #4]
 1162 000a 1944     		add	r1, r1, r3
 1163              	.LVL84:
 1164 000c 0191     		str	r1, [sp, #4]
1082:./FWLIB/src/stm32f4xx_i2c.c **** 
ARM GAS  /tmp/ccNtoG4Z.s 			page 40


1083:./FWLIB/src/stm32f4xx_i2c.c ****   /* Return the selected register value */
1084:./FWLIB/src/stm32f4xx_i2c.c ****   return (*(__IO uint16_t *) tmp);
 1165              		.loc 1 1084 0
 1166 000e 019B     		ldr	r3, [sp, #4]
 1167 0010 1888     		ldrh	r0, [r3]
 1168              	.LVL85:
1085:./FWLIB/src/stm32f4xx_i2c.c **** }
 1169              		.loc 1 1085 0
 1170 0012 02B0     		add	sp, sp, #8
 1171              	.LCFI6:
 1172              		.cfi_def_cfa_offset 0
 1173              		@ sp needed
 1174 0014 7047     		bx	lr
 1175              		.cfi_endproc
 1176              	.LFE139:
 1178              		.section	.text.I2C_ITConfig,"ax",%progbits
 1179              		.align	1
 1180              		.global	I2C_ITConfig
 1181              		.syntax unified
 1182              		.thumb
 1183              		.thumb_func
 1184              		.fpu fpv4-sp-d16
 1186              	I2C_ITConfig:
 1187              	.LFB140:
1086:./FWLIB/src/stm32f4xx_i2c.c **** 
1087:./FWLIB/src/stm32f4xx_i2c.c **** /**
1088:./FWLIB/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C interrupts.
1089:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1090:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  I2C_IT: specifies the I2C interrupts sources to be enabled or disabled. 
1091:./FWLIB/src/stm32f4xx_i2c.c ****   *          This parameter can be any combination of the following values:
1092:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_BUF: Buffer interrupt mask
1093:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_EVT: Event interrupt mask
1094:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ERR: Error interrupt mask
1095:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the specified I2C interrupts.
1096:./FWLIB/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
1097:./FWLIB/src/stm32f4xx_i2c.c ****   * @retval None
1098:./FWLIB/src/stm32f4xx_i2c.c ****   */
1099:./FWLIB/src/stm32f4xx_i2c.c **** void I2C_ITConfig(I2C_TypeDef* I2Cx, uint16_t I2C_IT, FunctionalState NewState)
1100:./FWLIB/src/stm32f4xx_i2c.c **** {
 1188              		.loc 1 1100 0
 1189              		.cfi_startproc
 1190              		@ args = 0, pretend = 0, frame = 0
 1191              		@ frame_needed = 0, uses_anonymous_args = 0
 1192              		@ link register save eliminated.
 1193              	.LVL86:
1101:./FWLIB/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1102:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1103:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1104:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_CONFIG_IT(I2C_IT));
1105:./FWLIB/src/stm32f4xx_i2c.c ****   
1106:./FWLIB/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 1194              		.loc 1 1106 0
 1195 0000 22B9     		cbnz	r2, .L109
1107:./FWLIB/src/stm32f4xx_i2c.c ****   {
1108:./FWLIB/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C interrupts */
1109:./FWLIB/src/stm32f4xx_i2c.c ****     I2Cx->CR2 |= I2C_IT;
1110:./FWLIB/src/stm32f4xx_i2c.c ****   }
ARM GAS  /tmp/ccNtoG4Z.s 			page 41


1111:./FWLIB/src/stm32f4xx_i2c.c ****   else
1112:./FWLIB/src/stm32f4xx_i2c.c ****   {
1113:./FWLIB/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C interrupts */
1114:./FWLIB/src/stm32f4xx_i2c.c ****     I2Cx->CR2 &= (uint16_t)~I2C_IT;
 1196              		.loc 1 1114 0
 1197 0002 8388     		ldrh	r3, [r0, #4]
 1198 0004 23EA0101 		bic	r1, r3, r1
 1199              	.LVL87:
 1200 0008 8180     		strh	r1, [r0, #4]	@ movhi
1115:./FWLIB/src/stm32f4xx_i2c.c ****   }
1116:./FWLIB/src/stm32f4xx_i2c.c **** }
 1201              		.loc 1 1116 0
 1202 000a 7047     		bx	lr
 1203              	.LVL88:
 1204              	.L109:
1109:./FWLIB/src/stm32f4xx_i2c.c ****   }
 1205              		.loc 1 1109 0
 1206 000c 8388     		ldrh	r3, [r0, #4]
 1207 000e 1943     		orrs	r1, r1, r3
 1208              	.LVL89:
 1209 0010 8180     		strh	r1, [r0, #4]	@ movhi
 1210 0012 7047     		bx	lr
 1211              		.cfi_endproc
 1212              	.LFE140:
 1214              		.section	.text.I2C_CheckEvent,"ax",%progbits
 1215              		.align	1
 1216              		.global	I2C_CheckEvent
 1217              		.syntax unified
 1218              		.thumb
 1219              		.thumb_func
 1220              		.fpu fpv4-sp-d16
 1222              	I2C_CheckEvent:
 1223              	.LFB141:
1117:./FWLIB/src/stm32f4xx_i2c.c **** 
1118:./FWLIB/src/stm32f4xx_i2c.c **** /*
1119:./FWLIB/src/stm32f4xx_i2c.c ****  ===============================================================================
1120:./FWLIB/src/stm32f4xx_i2c.c ****                           1. Basic state monitoring                    
1121:./FWLIB/src/stm32f4xx_i2c.c ****  ===============================================================================  
1122:./FWLIB/src/stm32f4xx_i2c.c ****  */
1123:./FWLIB/src/stm32f4xx_i2c.c **** 
1124:./FWLIB/src/stm32f4xx_i2c.c **** /**
1125:./FWLIB/src/stm32f4xx_i2c.c ****   * @brief  Checks whether the last I2Cx Event is equal to the one passed
1126:./FWLIB/src/stm32f4xx_i2c.c ****   *         as parameter.
1127:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1128:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  I2C_EVENT: specifies the event to be checked. 
1129:./FWLIB/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
1130:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED: EV1
1131:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED: EV1
1132:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED: EV1
1133:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED: EV1
1134:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED: EV1
1135:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_BYTE_RECEIVED: EV2
1136:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg (I2C_EVENT_SLAVE_BYTE_RECEIVED | I2C_FLAG_DUALF): EV2
1137:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg (I2C_EVENT_SLAVE_BYTE_RECEIVED | I2C_FLAG_GENCALL): EV2
1138:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_BYTE_TRANSMITTED: EV3
1139:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg (I2C_EVENT_SLAVE_BYTE_TRANSMITTED | I2C_FLAG_DUALF): EV3
1140:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg (I2C_EVENT_SLAVE_BYTE_TRANSMITTED | I2C_FLAG_GENCALL): EV3
ARM GAS  /tmp/ccNtoG4Z.s 			page 42


1141:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_ACK_FAILURE: EV3_2
1142:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_STOP_DETECTED: EV4
1143:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_MODE_SELECT: EV5
1144:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED: EV6     
1145:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED: EV6
1146:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_BYTE_RECEIVED: EV7
1147:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_BYTE_TRANSMITTING: EV8
1148:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_BYTE_TRANSMITTED: EV8_2
1149:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_MODE_ADDRESS10: EV9
1150:./FWLIB/src/stm32f4xx_i2c.c ****   *     
1151:./FWLIB/src/stm32f4xx_i2c.c ****   * @note   For detailed description of Events, please refer to section I2C_Events
1152:./FWLIB/src/stm32f4xx_i2c.c ****   *         in stm32f4xx_i2c.h file.
1153:./FWLIB/src/stm32f4xx_i2c.c ****   *    
1154:./FWLIB/src/stm32f4xx_i2c.c ****   * @retval An ErrorStatus enumeration value:
1155:./FWLIB/src/stm32f4xx_i2c.c ****   *           - SUCCESS: Last event is equal to the I2C_EVENT
1156:./FWLIB/src/stm32f4xx_i2c.c ****   *           - ERROR: Last event is different from the I2C_EVENT
1157:./FWLIB/src/stm32f4xx_i2c.c ****   */
1158:./FWLIB/src/stm32f4xx_i2c.c **** ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
1159:./FWLIB/src/stm32f4xx_i2c.c **** {
 1224              		.loc 1 1159 0
 1225              		.cfi_startproc
 1226              		@ args = 0, pretend = 0, frame = 0
 1227              		@ frame_needed = 0, uses_anonymous_args = 0
 1228              		@ link register save eliminated.
 1229              	.LVL90:
1160:./FWLIB/src/stm32f4xx_i2c.c ****   uint32_t lastevent = 0;
1161:./FWLIB/src/stm32f4xx_i2c.c ****   uint32_t flag1 = 0, flag2 = 0;
1162:./FWLIB/src/stm32f4xx_i2c.c ****   ErrorStatus status = ERROR;
1163:./FWLIB/src/stm32f4xx_i2c.c **** 
1164:./FWLIB/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1165:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1166:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_EVENT(I2C_EVENT));
1167:./FWLIB/src/stm32f4xx_i2c.c **** 
1168:./FWLIB/src/stm32f4xx_i2c.c ****   /* Read the I2Cx status register */
1169:./FWLIB/src/stm32f4xx_i2c.c ****   flag1 = I2Cx->SR1;
 1230              		.loc 1 1169 0
 1231 0000 838A     		ldrh	r3, [r0, #20]
 1232              	.LVL91:
1170:./FWLIB/src/stm32f4xx_i2c.c ****   flag2 = I2Cx->SR2;
 1233              		.loc 1 1170 0
 1234 0002 028B     		ldrh	r2, [r0, #24]
 1235              	.LVL92:
1171:./FWLIB/src/stm32f4xx_i2c.c ****   flag2 = flag2 << 16;
1172:./FWLIB/src/stm32f4xx_i2c.c **** 
1173:./FWLIB/src/stm32f4xx_i2c.c ****   /* Get the last event value from I2C status register */
1174:./FWLIB/src/stm32f4xx_i2c.c ****   lastevent = (flag1 | flag2) & FLAG_MASK;
 1236              		.loc 1 1174 0
 1237 0004 43EA0243 		orr	r3, r3, r2, lsl #16
 1238              	.LVL93:
 1239 0008 23F07F43 		bic	r3, r3, #-16777216
 1240              	.LVL94:
1175:./FWLIB/src/stm32f4xx_i2c.c **** 
1176:./FWLIB/src/stm32f4xx_i2c.c ****   /* Check whether the last event contains the I2C_EVENT */
1177:./FWLIB/src/stm32f4xx_i2c.c ****   if ((lastevent & I2C_EVENT) == I2C_EVENT)
 1241              		.loc 1 1177 0
 1242 000c 31EA0303 		bics	r3, r1, r3
 1243              	.LVL95:
ARM GAS  /tmp/ccNtoG4Z.s 			page 43


 1244 0010 01D0     		beq	.L113
1178:./FWLIB/src/stm32f4xx_i2c.c ****   {
1179:./FWLIB/src/stm32f4xx_i2c.c ****     /* SUCCESS: last event is equal to I2C_EVENT */
1180:./FWLIB/src/stm32f4xx_i2c.c ****     status = SUCCESS;
1181:./FWLIB/src/stm32f4xx_i2c.c ****   }
1182:./FWLIB/src/stm32f4xx_i2c.c ****   else
1183:./FWLIB/src/stm32f4xx_i2c.c ****   {
1184:./FWLIB/src/stm32f4xx_i2c.c ****     /* ERROR: last event is different from I2C_EVENT */
1185:./FWLIB/src/stm32f4xx_i2c.c ****     status = ERROR;
 1245              		.loc 1 1185 0
 1246 0012 0020     		movs	r0, #0
 1247              	.LVL96:
1186:./FWLIB/src/stm32f4xx_i2c.c ****   }
1187:./FWLIB/src/stm32f4xx_i2c.c ****   /* Return status */
1188:./FWLIB/src/stm32f4xx_i2c.c ****   return status;
1189:./FWLIB/src/stm32f4xx_i2c.c **** }
 1248              		.loc 1 1189 0
 1249 0014 7047     		bx	lr
 1250              	.LVL97:
 1251              	.L113:
1180:./FWLIB/src/stm32f4xx_i2c.c ****   }
 1252              		.loc 1 1180 0
 1253 0016 0120     		movs	r0, #1
 1254              	.LVL98:
 1255 0018 7047     		bx	lr
 1256              		.cfi_endproc
 1257              	.LFE141:
 1259              		.section	.text.I2C_GetLastEvent,"ax",%progbits
 1260              		.align	1
 1261              		.global	I2C_GetLastEvent
 1262              		.syntax unified
 1263              		.thumb
 1264              		.thumb_func
 1265              		.fpu fpv4-sp-d16
 1267              	I2C_GetLastEvent:
 1268              	.LFB142:
1190:./FWLIB/src/stm32f4xx_i2c.c **** 
1191:./FWLIB/src/stm32f4xx_i2c.c **** /*
1192:./FWLIB/src/stm32f4xx_i2c.c ****  ===============================================================================
1193:./FWLIB/src/stm32f4xx_i2c.c ****                           2. Advanced state monitoring                   
1194:./FWLIB/src/stm32f4xx_i2c.c ****  ===============================================================================  
1195:./FWLIB/src/stm32f4xx_i2c.c ****  */
1196:./FWLIB/src/stm32f4xx_i2c.c **** 
1197:./FWLIB/src/stm32f4xx_i2c.c **** /**
1198:./FWLIB/src/stm32f4xx_i2c.c ****   * @brief  Returns the last I2Cx Event.
1199:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1200:./FWLIB/src/stm32f4xx_i2c.c ****   *     
1201:./FWLIB/src/stm32f4xx_i2c.c ****   * @note   For detailed description of Events, please refer to section I2C_Events
1202:./FWLIB/src/stm32f4xx_i2c.c ****   *         in stm32f4xx_i2c.h file.
1203:./FWLIB/src/stm32f4xx_i2c.c ****   *    
1204:./FWLIB/src/stm32f4xx_i2c.c ****   * @retval The last event
1205:./FWLIB/src/stm32f4xx_i2c.c ****   */
1206:./FWLIB/src/stm32f4xx_i2c.c **** uint32_t I2C_GetLastEvent(I2C_TypeDef* I2Cx)
1207:./FWLIB/src/stm32f4xx_i2c.c **** {
 1269              		.loc 1 1207 0
 1270              		.cfi_startproc
 1271              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccNtoG4Z.s 			page 44


 1272              		@ frame_needed = 0, uses_anonymous_args = 0
 1273              		@ link register save eliminated.
 1274              	.LVL99:
1208:./FWLIB/src/stm32f4xx_i2c.c ****   uint32_t lastevent = 0;
1209:./FWLIB/src/stm32f4xx_i2c.c ****   uint32_t flag1 = 0, flag2 = 0;
1210:./FWLIB/src/stm32f4xx_i2c.c **** 
1211:./FWLIB/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1212:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1213:./FWLIB/src/stm32f4xx_i2c.c **** 
1214:./FWLIB/src/stm32f4xx_i2c.c ****   /* Read the I2Cx status register */
1215:./FWLIB/src/stm32f4xx_i2c.c ****   flag1 = I2Cx->SR1;
 1275              		.loc 1 1215 0
 1276 0000 838A     		ldrh	r3, [r0, #20]
 1277              	.LVL100:
1216:./FWLIB/src/stm32f4xx_i2c.c ****   flag2 = I2Cx->SR2;
 1278              		.loc 1 1216 0
 1279 0002 008B     		ldrh	r0, [r0, #24]
 1280              	.LVL101:
1217:./FWLIB/src/stm32f4xx_i2c.c ****   flag2 = flag2 << 16;
1218:./FWLIB/src/stm32f4xx_i2c.c **** 
1219:./FWLIB/src/stm32f4xx_i2c.c ****   /* Get the last event value from I2C status register */
1220:./FWLIB/src/stm32f4xx_i2c.c ****   lastevent = (flag1 | flag2) & FLAG_MASK;
 1281              		.loc 1 1220 0
 1282 0004 43EA0040 		orr	r0, r3, r0, lsl #16
 1283              	.LVL102:
1221:./FWLIB/src/stm32f4xx_i2c.c **** 
1222:./FWLIB/src/stm32f4xx_i2c.c ****   /* Return status */
1223:./FWLIB/src/stm32f4xx_i2c.c ****   return lastevent;
1224:./FWLIB/src/stm32f4xx_i2c.c **** }
 1284              		.loc 1 1224 0
 1285 0008 20F07F40 		bic	r0, r0, #-16777216
 1286              	.LVL103:
 1287 000c 7047     		bx	lr
 1288              		.cfi_endproc
 1289              	.LFE142:
 1291              		.section	.text.I2C_GetFlagStatus,"ax",%progbits
 1292              		.align	1
 1293              		.global	I2C_GetFlagStatus
 1294              		.syntax unified
 1295              		.thumb
 1296              		.thumb_func
 1297              		.fpu fpv4-sp-d16
 1299              	I2C_GetFlagStatus:
 1300              	.LFB143:
1225:./FWLIB/src/stm32f4xx_i2c.c **** 
1226:./FWLIB/src/stm32f4xx_i2c.c **** /*
1227:./FWLIB/src/stm32f4xx_i2c.c ****  ===============================================================================
1228:./FWLIB/src/stm32f4xx_i2c.c ****                           3. Flag-based state monitoring                   
1229:./FWLIB/src/stm32f4xx_i2c.c ****  ===============================================================================  
1230:./FWLIB/src/stm32f4xx_i2c.c ****  */
1231:./FWLIB/src/stm32f4xx_i2c.c **** 
1232:./FWLIB/src/stm32f4xx_i2c.c **** /**
1233:./FWLIB/src/stm32f4xx_i2c.c ****   * @brief  Checks whether the specified I2C flag is set or not.
1234:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1235:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  I2C_FLAG: specifies the flag to check. 
1236:./FWLIB/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
1237:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_DUALF: Dual flag (Slave mode)
ARM GAS  /tmp/ccNtoG4Z.s 			page 45


1238:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SMBHOST: SMBus host header (Slave mode)
1239:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SMBDEFAULT: SMBus default header (Slave mode)
1240:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_GENCALL: General call header flag (Slave mode)
1241:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_TRA: Transmitter/Receiver flag
1242:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_BUSY: Bus busy flag
1243:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_MSL: Master/Slave flag
1244:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SMBALERT: SMBus Alert flag
1245:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_TIMEOUT: Timeout or Tlow error flag
1246:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_PECERR: PEC error in reception flag
1247:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_OVR: Overrun/Underrun flag (Slave mode)
1248:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_AF: Acknowledge failure flag
1249:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_ARLO: Arbitration lost flag (Master mode)
1250:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_BERR: Bus error flag
1251:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_TXE: Data register empty flag (Transmitter)
1252:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_RXNE: Data register not empty (Receiver) flag
1253:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_STOPF: Stop detection flag (Slave mode)
1254:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_ADD10: 10-bit header sent flag (Master mode)
1255:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_BTF: Byte transfer finished flag
1256:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_ADDR: Address sent flag (Master mode) "ADSL"
1257:./FWLIB/src/stm32f4xx_i2c.c ****   *                                Address matched flag (Slave mode)"ENDAD"
1258:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
1259:./FWLIB/src/stm32f4xx_i2c.c ****   * @retval The new state of I2C_FLAG (SET or RESET).
1260:./FWLIB/src/stm32f4xx_i2c.c ****   */
1261:./FWLIB/src/stm32f4xx_i2c.c **** FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
1262:./FWLIB/src/stm32f4xx_i2c.c **** {
 1301              		.loc 1 1262 0
 1302              		.cfi_startproc
 1303              		@ args = 0, pretend = 0, frame = 8
 1304              		@ frame_needed = 0, uses_anonymous_args = 0
 1305              		@ link register save eliminated.
 1306              	.LVL104:
 1307 0000 82B0     		sub	sp, sp, #8
 1308              	.LCFI7:
 1309              		.cfi_def_cfa_offset 8
 1310              	.LVL105:
1263:./FWLIB/src/stm32f4xx_i2c.c ****   FlagStatus bitstatus = RESET;
1264:./FWLIB/src/stm32f4xx_i2c.c ****   __IO uint32_t i2creg = 0, i2cxbase = 0;
 1311              		.loc 1 1264 0
 1312 0002 0023     		movs	r3, #0
 1313 0004 0193     		str	r3, [sp, #4]
 1314 0006 0093     		str	r3, [sp]
1265:./FWLIB/src/stm32f4xx_i2c.c **** 
1266:./FWLIB/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1267:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1268:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_GET_FLAG(I2C_FLAG));
1269:./FWLIB/src/stm32f4xx_i2c.c **** 
1270:./FWLIB/src/stm32f4xx_i2c.c ****   /* Get the I2Cx peripheral base address */
1271:./FWLIB/src/stm32f4xx_i2c.c ****   i2cxbase = (uint32_t)I2Cx;
 1315              		.loc 1 1271 0
 1316 0008 0090     		str	r0, [sp]
1272:./FWLIB/src/stm32f4xx_i2c.c ****   
1273:./FWLIB/src/stm32f4xx_i2c.c ****   /* Read flag register index */
1274:./FWLIB/src/stm32f4xx_i2c.c ****   i2creg = I2C_FLAG >> 28;
 1317              		.loc 1 1274 0
 1318 000a 0B0F     		lsrs	r3, r1, #28
 1319 000c 0193     		str	r3, [sp, #4]
1275:./FWLIB/src/stm32f4xx_i2c.c ****   
ARM GAS  /tmp/ccNtoG4Z.s 			page 46


1276:./FWLIB/src/stm32f4xx_i2c.c ****   /* Get bit[23:0] of the flag */
1277:./FWLIB/src/stm32f4xx_i2c.c ****   I2C_FLAG &= FLAG_MASK;
 1320              		.loc 1 1277 0
 1321 000e 21F07F41 		bic	r1, r1, #-16777216
 1322              	.LVL106:
1278:./FWLIB/src/stm32f4xx_i2c.c ****   
1279:./FWLIB/src/stm32f4xx_i2c.c ****   if(i2creg != 0)
 1323              		.loc 1 1279 0
 1324 0012 019B     		ldr	r3, [sp, #4]
 1325 0014 4BB1     		cbz	r3, .L116
1280:./FWLIB/src/stm32f4xx_i2c.c ****   {
1281:./FWLIB/src/stm32f4xx_i2c.c ****     /* Get the I2Cx SR1 register address */
1282:./FWLIB/src/stm32f4xx_i2c.c ****     i2cxbase += 0x14;
 1326              		.loc 1 1282 0
 1327 0016 009B     		ldr	r3, [sp]
 1328 0018 1433     		adds	r3, r3, #20
 1329 001a 0093     		str	r3, [sp]
 1330              	.L117:
1283:./FWLIB/src/stm32f4xx_i2c.c ****   }
1284:./FWLIB/src/stm32f4xx_i2c.c ****   else
1285:./FWLIB/src/stm32f4xx_i2c.c ****   {
1286:./FWLIB/src/stm32f4xx_i2c.c ****     /* Flag in I2Cx SR2 Register */
1287:./FWLIB/src/stm32f4xx_i2c.c ****     I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
1288:./FWLIB/src/stm32f4xx_i2c.c ****     /* Get the I2Cx SR2 register address */
1289:./FWLIB/src/stm32f4xx_i2c.c ****     i2cxbase += 0x18;
1290:./FWLIB/src/stm32f4xx_i2c.c ****   }
1291:./FWLIB/src/stm32f4xx_i2c.c ****   
1292:./FWLIB/src/stm32f4xx_i2c.c ****   if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 1331              		.loc 1 1292 0
 1332 001c 009B     		ldr	r3, [sp]
 1333 001e 1B68     		ldr	r3, [r3]
 1334 0020 0B42     		tst	r3, r1
 1335 0022 07D1     		bne	.L121
1293:./FWLIB/src/stm32f4xx_i2c.c ****   {
1294:./FWLIB/src/stm32f4xx_i2c.c ****     /* I2C_FLAG is set */
1295:./FWLIB/src/stm32f4xx_i2c.c ****     bitstatus = SET;
1296:./FWLIB/src/stm32f4xx_i2c.c ****   }
1297:./FWLIB/src/stm32f4xx_i2c.c ****   else
1298:./FWLIB/src/stm32f4xx_i2c.c ****   {
1299:./FWLIB/src/stm32f4xx_i2c.c ****     /* I2C_FLAG is reset */
1300:./FWLIB/src/stm32f4xx_i2c.c ****     bitstatus = RESET;
 1336              		.loc 1 1300 0
 1337 0024 0020     		movs	r0, #0
 1338              	.LVL107:
 1339              	.L118:
1301:./FWLIB/src/stm32f4xx_i2c.c ****   }
1302:./FWLIB/src/stm32f4xx_i2c.c ****   
1303:./FWLIB/src/stm32f4xx_i2c.c ****   /* Return the I2C_FLAG status */
1304:./FWLIB/src/stm32f4xx_i2c.c ****   return  bitstatus;
1305:./FWLIB/src/stm32f4xx_i2c.c **** }
 1340              		.loc 1 1305 0
 1341 0026 02B0     		add	sp, sp, #8
 1342              	.LCFI8:
 1343              		.cfi_remember_state
 1344              		.cfi_def_cfa_offset 0
 1345              		@ sp needed
 1346 0028 7047     		bx	lr
ARM GAS  /tmp/ccNtoG4Z.s 			page 47


 1347              	.LVL108:
 1348              	.L116:
 1349              	.LCFI9:
 1350              		.cfi_restore_state
1287:./FWLIB/src/stm32f4xx_i2c.c ****     /* Get the I2Cx SR2 register address */
 1351              		.loc 1 1287 0
 1352 002a 090C     		lsrs	r1, r1, #16
 1353              	.LVL109:
1289:./FWLIB/src/stm32f4xx_i2c.c ****   }
 1354              		.loc 1 1289 0
 1355 002c 009B     		ldr	r3, [sp]
 1356 002e 1833     		adds	r3, r3, #24
 1357 0030 0093     		str	r3, [sp]
 1358 0032 F3E7     		b	.L117
 1359              	.L121:
1295:./FWLIB/src/stm32f4xx_i2c.c ****   }
 1360              		.loc 1 1295 0
 1361 0034 0120     		movs	r0, #1
 1362              	.LVL110:
 1363 0036 F6E7     		b	.L118
 1364              		.cfi_endproc
 1365              	.LFE143:
 1367              		.section	.text.I2C_ClearFlag,"ax",%progbits
 1368              		.align	1
 1369              		.global	I2C_ClearFlag
 1370              		.syntax unified
 1371              		.thumb
 1372              		.thumb_func
 1373              		.fpu fpv4-sp-d16
 1375              	I2C_ClearFlag:
 1376              	.LFB144:
1306:./FWLIB/src/stm32f4xx_i2c.c **** 
1307:./FWLIB/src/stm32f4xx_i2c.c **** /**
1308:./FWLIB/src/stm32f4xx_i2c.c ****   * @brief  Clears the I2Cx's pending flags.
1309:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1310:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  I2C_FLAG: specifies the flag to clear. 
1311:./FWLIB/src/stm32f4xx_i2c.c ****   *          This parameter can be any combination of the following values:
1312:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SMBALERT: SMBus Alert flag
1313:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_TIMEOUT: Timeout or Tlow error flag
1314:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_PECERR: PEC error in reception flag
1315:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_OVR: Overrun/Underrun flag (Slave mode)
1316:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_AF: Acknowledge failure flag
1317:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_ARLO: Arbitration lost flag (Master mode)
1318:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_BERR: Bus error flag
1319:./FWLIB/src/stm32f4xx_i2c.c ****   *   
1320:./FWLIB/src/stm32f4xx_i2c.c ****   * @note   STOPF (STOP detection) is cleared by software sequence: a read operation 
1321:./FWLIB/src/stm32f4xx_i2c.c ****   *          to I2C_SR1 register (I2C_GetFlagStatus()) followed by a write operation 
1322:./FWLIB/src/stm32f4xx_i2c.c ****   *          to I2C_CR1 register (I2C_Cmd() to re-enable the I2C peripheral).
1323:./FWLIB/src/stm32f4xx_i2c.c ****   * @note   ADD10 (10-bit header sent) is cleared by software sequence: a read 
1324:./FWLIB/src/stm32f4xx_i2c.c ****   *          operation to I2C_SR1 (I2C_GetFlagStatus()) followed by writing the 
1325:./FWLIB/src/stm32f4xx_i2c.c ****   *          second byte of the address in DR register.
1326:./FWLIB/src/stm32f4xx_i2c.c ****   * @note   BTF (Byte Transfer Finished) is cleared by software sequence: a read 
1327:./FWLIB/src/stm32f4xx_i2c.c ****   *          operation to I2C_SR1 register (I2C_GetFlagStatus()) followed by a 
1328:./FWLIB/src/stm32f4xx_i2c.c ****   *          read/write to I2C_DR register (I2C_SendData()).
1329:./FWLIB/src/stm32f4xx_i2c.c ****   * @note   ADDR (Address sent) is cleared by software sequence: a read operation to 
1330:./FWLIB/src/stm32f4xx_i2c.c ****   *          I2C_SR1 register (I2C_GetFlagStatus()) followed by a read operation to 
1331:./FWLIB/src/stm32f4xx_i2c.c ****   *          I2C_SR2 register ((void)(I2Cx->SR2)).
ARM GAS  /tmp/ccNtoG4Z.s 			page 48


1332:./FWLIB/src/stm32f4xx_i2c.c ****   * @note   SB (Start Bit) is cleared software sequence: a read operation to I2C_SR1
1333:./FWLIB/src/stm32f4xx_i2c.c ****   *          register (I2C_GetFlagStatus()) followed by a write operation to I2C_DR
1334:./FWLIB/src/stm32f4xx_i2c.c ****   *          register (I2C_SendData()).
1335:./FWLIB/src/stm32f4xx_i2c.c ****   *  
1336:./FWLIB/src/stm32f4xx_i2c.c ****   * @retval None
1337:./FWLIB/src/stm32f4xx_i2c.c ****   */
1338:./FWLIB/src/stm32f4xx_i2c.c **** void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
1339:./FWLIB/src/stm32f4xx_i2c.c **** {
 1377              		.loc 1 1339 0
 1378              		.cfi_startproc
 1379              		@ args = 0, pretend = 0, frame = 0
 1380              		@ frame_needed = 0, uses_anonymous_args = 0
 1381              		@ link register save eliminated.
 1382              	.LVL111:
1340:./FWLIB/src/stm32f4xx_i2c.c ****   uint32_t flagpos = 0;
1341:./FWLIB/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1342:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1343:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
1344:./FWLIB/src/stm32f4xx_i2c.c ****   /* Get the I2C flag position */
1345:./FWLIB/src/stm32f4xx_i2c.c ****   flagpos = I2C_FLAG & FLAG_MASK;
 1383              		.loc 1 1345 0
 1384 0000 21F07F41 		bic	r1, r1, #-16777216
 1385              	.LVL112:
1346:./FWLIB/src/stm32f4xx_i2c.c ****   /* Clear the selected I2C flag */
1347:./FWLIB/src/stm32f4xx_i2c.c ****   I2Cx->SR1 = (uint16_t)~flagpos;
 1386              		.loc 1 1347 0
 1387 0004 C943     		mvns	r1, r1
 1388              	.LVL113:
 1389 0006 89B2     		uxth	r1, r1
 1390              	.LVL114:
 1391 0008 8182     		strh	r1, [r0, #20]	@ movhi
1348:./FWLIB/src/stm32f4xx_i2c.c **** }
 1392              		.loc 1 1348 0
 1393 000a 7047     		bx	lr
 1394              		.cfi_endproc
 1395              	.LFE144:
 1397              		.section	.text.I2C_GetITStatus,"ax",%progbits
 1398              		.align	1
 1399              		.global	I2C_GetITStatus
 1400              		.syntax unified
 1401              		.thumb
 1402              		.thumb_func
 1403              		.fpu fpv4-sp-d16
 1405              	I2C_GetITStatus:
 1406              	.LFB145:
1349:./FWLIB/src/stm32f4xx_i2c.c **** 
1350:./FWLIB/src/stm32f4xx_i2c.c **** /**
1351:./FWLIB/src/stm32f4xx_i2c.c ****   * @brief  Checks whether the specified I2C interrupt has occurred or not.
1352:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1353:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  I2C_IT: specifies the interrupt source to check. 
1354:./FWLIB/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
1355:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_SMBALERT: SMBus Alert flag
1356:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_TIMEOUT: Timeout or Tlow error flag
1357:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_PECERR: PEC error in reception flag
1358:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_OVR: Overrun/Underrun flag (Slave mode)
1359:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_AF: Acknowledge failure flag
1360:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ARLO: Arbitration lost flag (Master mode)
ARM GAS  /tmp/ccNtoG4Z.s 			page 49


1361:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_BERR: Bus error flag
1362:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_TXE: Data register empty flag (Transmitter)
1363:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_RXNE: Data register not empty (Receiver) flag
1364:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_STOPF: Stop detection flag (Slave mode)
1365:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ADD10: 10-bit header sent flag (Master mode)
1366:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_BTF: Byte transfer finished flag
1367:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ADDR: Address sent flag (Master mode) "ADSL"
1368:./FWLIB/src/stm32f4xx_i2c.c ****   *                              Address matched flag (Slave mode)"ENDAD"
1369:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_SB: Start bit flag (Master mode)
1370:./FWLIB/src/stm32f4xx_i2c.c ****   * @retval The new state of I2C_IT (SET or RESET).
1371:./FWLIB/src/stm32f4xx_i2c.c ****   */
1372:./FWLIB/src/stm32f4xx_i2c.c **** ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
1373:./FWLIB/src/stm32f4xx_i2c.c **** {
 1407              		.loc 1 1373 0
 1408              		.cfi_startproc
 1409              		@ args = 0, pretend = 0, frame = 0
 1410              		@ frame_needed = 0, uses_anonymous_args = 0
 1411              		@ link register save eliminated.
 1412              	.LVL115:
1374:./FWLIB/src/stm32f4xx_i2c.c ****   ITStatus bitstatus = RESET;
1375:./FWLIB/src/stm32f4xx_i2c.c ****   uint32_t enablestatus = 0;
1376:./FWLIB/src/stm32f4xx_i2c.c **** 
1377:./FWLIB/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1378:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1379:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_GET_IT(I2C_IT));
1380:./FWLIB/src/stm32f4xx_i2c.c **** 
1381:./FWLIB/src/stm32f4xx_i2c.c ****   /* Check if the interrupt source is enabled or not */
1382:./FWLIB/src/stm32f4xx_i2c.c ****   enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 1413              		.loc 1 1382 0
 1414 0000 8388     		ldrh	r3, [r0, #4]
 1415 0002 03EA1143 		and	r3, r3, r1, lsr #16
 1416 0006 03F4E063 		and	r3, r3, #1792
 1417              	.LVL116:
1383:./FWLIB/src/stm32f4xx_i2c.c ****   
1384:./FWLIB/src/stm32f4xx_i2c.c ****   /* Get bit[23:0] of the flag */
1385:./FWLIB/src/stm32f4xx_i2c.c ****   I2C_IT &= FLAG_MASK;
1386:./FWLIB/src/stm32f4xx_i2c.c **** 
1387:./FWLIB/src/stm32f4xx_i2c.c ****   /* Check the status of the specified I2C flag */
1388:./FWLIB/src/stm32f4xx_i2c.c ****   if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 1418              		.loc 1 1388 0
 1419 000a 828A     		ldrh	r2, [r0, #20]
 1420 000c 1142     		tst	r1, r2
 1421 000e 02D0     		beq	.L125
 1422              		.loc 1 1388 0 is_stmt 0 discriminator 1
 1423 0010 1BB9     		cbnz	r3, .L126
1389:./FWLIB/src/stm32f4xx_i2c.c ****   {
1390:./FWLIB/src/stm32f4xx_i2c.c ****     /* I2C_IT is set */
1391:./FWLIB/src/stm32f4xx_i2c.c ****     bitstatus = SET;
1392:./FWLIB/src/stm32f4xx_i2c.c ****   }
1393:./FWLIB/src/stm32f4xx_i2c.c ****   else
1394:./FWLIB/src/stm32f4xx_i2c.c ****   {
1395:./FWLIB/src/stm32f4xx_i2c.c ****     /* I2C_IT is reset */
1396:./FWLIB/src/stm32f4xx_i2c.c ****     bitstatus = RESET;
 1424              		.loc 1 1396 0 is_stmt 1
 1425 0012 0020     		movs	r0, #0
 1426              	.LVL117:
 1427 0014 7047     		bx	lr
ARM GAS  /tmp/ccNtoG4Z.s 			page 50


 1428              	.LVL118:
 1429              	.L125:
 1430 0016 0020     		movs	r0, #0
 1431              	.LVL119:
 1432 0018 7047     		bx	lr
 1433              	.LVL120:
 1434              	.L126:
1391:./FWLIB/src/stm32f4xx_i2c.c ****   }
 1435              		.loc 1 1391 0
 1436 001a 0120     		movs	r0, #1
 1437              	.LVL121:
1397:./FWLIB/src/stm32f4xx_i2c.c ****   }
1398:./FWLIB/src/stm32f4xx_i2c.c ****   /* Return the I2C_IT status */
1399:./FWLIB/src/stm32f4xx_i2c.c ****   return  bitstatus;
1400:./FWLIB/src/stm32f4xx_i2c.c **** }
 1438              		.loc 1 1400 0
 1439 001c 7047     		bx	lr
 1440              		.cfi_endproc
 1441              	.LFE145:
 1443              		.section	.text.I2C_ClearITPendingBit,"ax",%progbits
 1444              		.align	1
 1445              		.global	I2C_ClearITPendingBit
 1446              		.syntax unified
 1447              		.thumb
 1448              		.thumb_func
 1449              		.fpu fpv4-sp-d16
 1451              	I2C_ClearITPendingBit:
 1452              	.LFB146:
1401:./FWLIB/src/stm32f4xx_i2c.c **** 
1402:./FWLIB/src/stm32f4xx_i2c.c **** /**
1403:./FWLIB/src/stm32f4xx_i2c.c ****   * @brief  Clears the I2Cx's interrupt pending bits.
1404:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1405:./FWLIB/src/stm32f4xx_i2c.c ****   * @param  I2C_IT: specifies the interrupt pending bit to clear. 
1406:./FWLIB/src/stm32f4xx_i2c.c ****   *          This parameter can be any combination of the following values:
1407:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_SMBALERT: SMBus Alert interrupt
1408:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_TIMEOUT: Timeout or Tlow error interrupt
1409:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_PECERR: PEC error in reception  interrupt
1410:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_OVR: Overrun/Underrun interrupt (Slave mode)
1411:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_AF: Acknowledge failure interrupt
1412:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ARLO: Arbitration lost interrupt (Master mode)
1413:./FWLIB/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_BERR: Bus error interrupt
1414:./FWLIB/src/stm32f4xx_i2c.c ****   * 
1415:./FWLIB/src/stm32f4xx_i2c.c ****   * @note   STOPF (STOP detection) is cleared by software sequence: a read operation 
1416:./FWLIB/src/stm32f4xx_i2c.c ****   *          to I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
1417:./FWLIB/src/stm32f4xx_i2c.c ****   *          I2C_CR1 register (I2C_Cmd() to re-enable the I2C peripheral).
1418:./FWLIB/src/stm32f4xx_i2c.c ****   * @note   ADD10 (10-bit header sent) is cleared by software sequence: a read 
1419:./FWLIB/src/stm32f4xx_i2c.c ****   *          operation to I2C_SR1 (I2C_GetITStatus()) followed by writing the second 
1420:./FWLIB/src/stm32f4xx_i2c.c ****   *          byte of the address in I2C_DR register.
1421:./FWLIB/src/stm32f4xx_i2c.c ****   * @note   BTF (Byte Transfer Finished) is cleared by software sequence: a read 
1422:./FWLIB/src/stm32f4xx_i2c.c ****   *          operation to I2C_SR1 register (I2C_GetITStatus()) followed by a 
1423:./FWLIB/src/stm32f4xx_i2c.c ****   *          read/write to I2C_DR register (I2C_SendData()).
1424:./FWLIB/src/stm32f4xx_i2c.c ****   * @note   ADDR (Address sent) is cleared by software sequence: a read operation to 
1425:./FWLIB/src/stm32f4xx_i2c.c ****   *          I2C_SR1 register (I2C_GetITStatus()) followed by a read operation to 
1426:./FWLIB/src/stm32f4xx_i2c.c ****   *          I2C_SR2 register ((void)(I2Cx->SR2)).
1427:./FWLIB/src/stm32f4xx_i2c.c ****   * @note   SB (Start Bit) is cleared by software sequence: a read operation to 
1428:./FWLIB/src/stm32f4xx_i2c.c ****   *          I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
1429:./FWLIB/src/stm32f4xx_i2c.c ****   *          I2C_DR register (I2C_SendData()).
ARM GAS  /tmp/ccNtoG4Z.s 			page 51


1430:./FWLIB/src/stm32f4xx_i2c.c ****   * @retval None
1431:./FWLIB/src/stm32f4xx_i2c.c ****   */
1432:./FWLIB/src/stm32f4xx_i2c.c **** void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
1433:./FWLIB/src/stm32f4xx_i2c.c **** {
 1453              		.loc 1 1433 0
 1454              		.cfi_startproc
 1455              		@ args = 0, pretend = 0, frame = 0
 1456              		@ frame_needed = 0, uses_anonymous_args = 0
 1457              		@ link register save eliminated.
 1458              	.LVL122:
1434:./FWLIB/src/stm32f4xx_i2c.c ****   uint32_t flagpos = 0;
1435:./FWLIB/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1436:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1437:./FWLIB/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_CLEAR_IT(I2C_IT));
1438:./FWLIB/src/stm32f4xx_i2c.c **** 
1439:./FWLIB/src/stm32f4xx_i2c.c ****   /* Get the I2C flag position */
1440:./FWLIB/src/stm32f4xx_i2c.c ****   flagpos = I2C_IT & FLAG_MASK;
 1459              		.loc 1 1440 0
 1460 0000 21F07F41 		bic	r1, r1, #-16777216
 1461              	.LVL123:
1441:./FWLIB/src/stm32f4xx_i2c.c **** 
1442:./FWLIB/src/stm32f4xx_i2c.c ****   /* Clear the selected I2C flag */
1443:./FWLIB/src/stm32f4xx_i2c.c ****   I2Cx->SR1 = (uint16_t)~flagpos;
 1462              		.loc 1 1443 0
 1463 0004 C943     		mvns	r1, r1
 1464              	.LVL124:
 1465 0006 89B2     		uxth	r1, r1
 1466              	.LVL125:
 1467 0008 8182     		strh	r1, [r0, #20]	@ movhi
1444:./FWLIB/src/stm32f4xx_i2c.c **** }
 1468              		.loc 1 1444 0
 1469 000a 7047     		bx	lr
 1470              		.cfi_endproc
 1471              	.LFE146:
 1473              		.text
 1474              	.Letext0:
 1475              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1476              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1477              		.file 4 "build/lnInclude/core_cm4.h"
 1478              		.file 5 "build/lnInclude/system_stm32f4xx.h"
 1479              		.file 6 "build/lnInclude/stm32f4xx.h"
 1480              		.file 7 "build/lnInclude/stm32f4xx_rcc.h"
 1481              		.file 8 "build/lnInclude/stm32f4xx_i2c.h"
ARM GAS  /tmp/ccNtoG4Z.s 			page 52


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_i2c.c
     /tmp/ccNtoG4Z.s:18     .text.I2C_DeInit:0000000000000000 $t
     /tmp/ccNtoG4Z.s:25     .text.I2C_DeInit:0000000000000000 I2C_DeInit
     /tmp/ccNtoG4Z.s:100    .text.I2C_DeInit:0000000000000058 $d
     /tmp/ccNtoG4Z.s:107    .text.I2C_Init:0000000000000000 $t
     /tmp/ccNtoG4Z.s:114    .text.I2C_Init:0000000000000000 I2C_Init
     /tmp/ccNtoG4Z.s:281    .text.I2C_Init:00000000000000c8 $d
     /tmp/ccNtoG4Z.s:288    .text.I2C_StructInit:0000000000000000 $t
     /tmp/ccNtoG4Z.s:295    .text.I2C_StructInit:0000000000000000 I2C_StructInit
     /tmp/ccNtoG4Z.s:325    .text.I2C_Cmd:0000000000000000 $t
     /tmp/ccNtoG4Z.s:332    .text.I2C_Cmd:0000000000000000 I2C_Cmd
     /tmp/ccNtoG4Z.s:360    .text.I2C_AnalogFilterCmd:0000000000000000 $t
     /tmp/ccNtoG4Z.s:367    .text.I2C_AnalogFilterCmd:0000000000000000 I2C_AnalogFilterCmd
     /tmp/ccNtoG4Z.s:395    .text.I2C_DigitalFilterConfig:0000000000000000 $t
     /tmp/ccNtoG4Z.s:402    .text.I2C_DigitalFilterConfig:0000000000000000 I2C_DigitalFilterConfig
     /tmp/ccNtoG4Z.s:430    .text.I2C_GenerateSTART:0000000000000000 $t
     /tmp/ccNtoG4Z.s:437    .text.I2C_GenerateSTART:0000000000000000 I2C_GenerateSTART
     /tmp/ccNtoG4Z.s:465    .text.I2C_GenerateSTOP:0000000000000000 $t
     /tmp/ccNtoG4Z.s:472    .text.I2C_GenerateSTOP:0000000000000000 I2C_GenerateSTOP
     /tmp/ccNtoG4Z.s:500    .text.I2C_Send7bitAddress:0000000000000000 $t
     /tmp/ccNtoG4Z.s:507    .text.I2C_Send7bitAddress:0000000000000000 I2C_Send7bitAddress
     /tmp/ccNtoG4Z.s:537    .text.I2C_AcknowledgeConfig:0000000000000000 $t
     /tmp/ccNtoG4Z.s:544    .text.I2C_AcknowledgeConfig:0000000000000000 I2C_AcknowledgeConfig
     /tmp/ccNtoG4Z.s:572    .text.I2C_OwnAddress2Config:0000000000000000 $t
     /tmp/ccNtoG4Z.s:579    .text.I2C_OwnAddress2Config:0000000000000000 I2C_OwnAddress2Config
     /tmp/ccNtoG4Z.s:607    .text.I2C_DualAddressCmd:0000000000000000 $t
     /tmp/ccNtoG4Z.s:614    .text.I2C_DualAddressCmd:0000000000000000 I2C_DualAddressCmd
     /tmp/ccNtoG4Z.s:642    .text.I2C_GeneralCallCmd:0000000000000000 $t
     /tmp/ccNtoG4Z.s:649    .text.I2C_GeneralCallCmd:0000000000000000 I2C_GeneralCallCmd
     /tmp/ccNtoG4Z.s:677    .text.I2C_SoftwareResetCmd:0000000000000000 $t
     /tmp/ccNtoG4Z.s:684    .text.I2C_SoftwareResetCmd:0000000000000000 I2C_SoftwareResetCmd
     /tmp/ccNtoG4Z.s:710    .text.I2C_StretchClockCmd:0000000000000000 $t
     /tmp/ccNtoG4Z.s:717    .text.I2C_StretchClockCmd:0000000000000000 I2C_StretchClockCmd
     /tmp/ccNtoG4Z.s:745    .text.I2C_FastModeDutyCycleConfig:0000000000000000 $t
     /tmp/ccNtoG4Z.s:752    .text.I2C_FastModeDutyCycleConfig:0000000000000000 I2C_FastModeDutyCycleConfig
     /tmp/ccNtoG4Z.s:781    .text.I2C_NACKPositionConfig:0000000000000000 $t
     /tmp/ccNtoG4Z.s:788    .text.I2C_NACKPositionConfig:0000000000000000 I2C_NACKPositionConfig
     /tmp/ccNtoG4Z.s:817    .text.I2C_SMBusAlertConfig:0000000000000000 $t
     /tmp/ccNtoG4Z.s:824    .text.I2C_SMBusAlertConfig:0000000000000000 I2C_SMBusAlertConfig
     /tmp/ccNtoG4Z.s:853    .text.I2C_ARPCmd:0000000000000000 $t
     /tmp/ccNtoG4Z.s:860    .text.I2C_ARPCmd:0000000000000000 I2C_ARPCmd
     /tmp/ccNtoG4Z.s:888    .text.I2C_SendData:0000000000000000 $t
     /tmp/ccNtoG4Z.s:895    .text.I2C_SendData:0000000000000000 I2C_SendData
     /tmp/ccNtoG4Z.s:911    .text.I2C_ReceiveData:0000000000000000 $t
     /tmp/ccNtoG4Z.s:918    .text.I2C_ReceiveData:0000000000000000 I2C_ReceiveData
     /tmp/ccNtoG4Z.s:936    .text.I2C_TransmitPEC:0000000000000000 $t
     /tmp/ccNtoG4Z.s:943    .text.I2C_TransmitPEC:0000000000000000 I2C_TransmitPEC
     /tmp/ccNtoG4Z.s:971    .text.I2C_PECPositionConfig:0000000000000000 $t
     /tmp/ccNtoG4Z.s:978    .text.I2C_PECPositionConfig:0000000000000000 I2C_PECPositionConfig
     /tmp/ccNtoG4Z.s:1007   .text.I2C_CalculatePEC:0000000000000000 $t
     /tmp/ccNtoG4Z.s:1014   .text.I2C_CalculatePEC:0000000000000000 I2C_CalculatePEC
     /tmp/ccNtoG4Z.s:1042   .text.I2C_GetPEC:0000000000000000 $t
     /tmp/ccNtoG4Z.s:1049   .text.I2C_GetPEC:0000000000000000 I2C_GetPEC
     /tmp/ccNtoG4Z.s:1067   .text.I2C_DMACmd:0000000000000000 $t
     /tmp/ccNtoG4Z.s:1074   .text.I2C_DMACmd:0000000000000000 I2C_DMACmd
     /tmp/ccNtoG4Z.s:1102   .text.I2C_DMALastTransferCmd:0000000000000000 $t
ARM GAS  /tmp/ccNtoG4Z.s 			page 53


     /tmp/ccNtoG4Z.s:1109   .text.I2C_DMALastTransferCmd:0000000000000000 I2C_DMALastTransferCmd
     /tmp/ccNtoG4Z.s:1137   .text.I2C_ReadRegister:0000000000000000 $t
     /tmp/ccNtoG4Z.s:1144   .text.I2C_ReadRegister:0000000000000000 I2C_ReadRegister
     /tmp/ccNtoG4Z.s:1179   .text.I2C_ITConfig:0000000000000000 $t
     /tmp/ccNtoG4Z.s:1186   .text.I2C_ITConfig:0000000000000000 I2C_ITConfig
     /tmp/ccNtoG4Z.s:1215   .text.I2C_CheckEvent:0000000000000000 $t
     /tmp/ccNtoG4Z.s:1222   .text.I2C_CheckEvent:0000000000000000 I2C_CheckEvent
     /tmp/ccNtoG4Z.s:1260   .text.I2C_GetLastEvent:0000000000000000 $t
     /tmp/ccNtoG4Z.s:1267   .text.I2C_GetLastEvent:0000000000000000 I2C_GetLastEvent
     /tmp/ccNtoG4Z.s:1292   .text.I2C_GetFlagStatus:0000000000000000 $t
     /tmp/ccNtoG4Z.s:1299   .text.I2C_GetFlagStatus:0000000000000000 I2C_GetFlagStatus
     /tmp/ccNtoG4Z.s:1368   .text.I2C_ClearFlag:0000000000000000 $t
     /tmp/ccNtoG4Z.s:1375   .text.I2C_ClearFlag:0000000000000000 I2C_ClearFlag
     /tmp/ccNtoG4Z.s:1398   .text.I2C_GetITStatus:0000000000000000 $t
     /tmp/ccNtoG4Z.s:1405   .text.I2C_GetITStatus:0000000000000000 I2C_GetITStatus
     /tmp/ccNtoG4Z.s:1444   .text.I2C_ClearITPendingBit:0000000000000000 $t
     /tmp/ccNtoG4Z.s:1451   .text.I2C_ClearITPendingBit:0000000000000000 I2C_ClearITPendingBit

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
RCC_GetClocksFreq
