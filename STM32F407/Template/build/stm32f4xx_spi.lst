ARM GAS  /tmp/ccTShhsc.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_spi.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.SPI_I2S_DeInit,"ax",%progbits
  18              		.align	1
  19              		.global	SPI_I2S_DeInit
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	SPI_I2S_DeInit:
  26              	.LFB112:
  27              		.file 1 "./FWLIB/src/stm32f4xx_spi.c"
   1:./FWLIB/src/stm32f4xx_spi.c **** /**
   2:./FWLIB/src/stm32f4xx_spi.c ****   ******************************************************************************
   3:./FWLIB/src/stm32f4xx_spi.c ****   * @file    stm32f4xx_spi.c
   4:./FWLIB/src/stm32f4xx_spi.c ****   * @author  MCD Application Team
   5:./FWLIB/src/stm32f4xx_spi.c ****   * @version V1.4.0
   6:./FWLIB/src/stm32f4xx_spi.c ****   * @date    04-August-2014
   7:./FWLIB/src/stm32f4xx_spi.c ****   * @brief   This file provides firmware functions to manage the following 
   8:./FWLIB/src/stm32f4xx_spi.c ****   *          functionalities of the Serial peripheral interface (SPI):
   9:./FWLIB/src/stm32f4xx_spi.c ****   *           + Initialization and Configuration
  10:./FWLIB/src/stm32f4xx_spi.c ****   *           + Data transfers functions
  11:./FWLIB/src/stm32f4xx_spi.c ****   *           + Hardware CRC Calculation
  12:./FWLIB/src/stm32f4xx_spi.c ****   *           + DMA transfers management
  13:./FWLIB/src/stm32f4xx_spi.c ****   *           + Interrupts and flags management 
  14:./FWLIB/src/stm32f4xx_spi.c ****   *           
  15:./FWLIB/src/stm32f4xx_spi.c **** @verbatim
  16:./FWLIB/src/stm32f4xx_spi.c **** 
  17:./FWLIB/src/stm32f4xx_spi.c ****  ===================================================================
  18:./FWLIB/src/stm32f4xx_spi.c ****                   ##### How to use this driver #####
  19:./FWLIB/src/stm32f4xx_spi.c ****  ===================================================================
  20:./FWLIB/src/stm32f4xx_spi.c ****  [..]
  21:./FWLIB/src/stm32f4xx_spi.c ****    (#) Enable peripheral clock using the following functions 
  22:./FWLIB/src/stm32f4xx_spi.c ****        RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE) for SPI1
  23:./FWLIB/src/stm32f4xx_spi.c ****        RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE) for SPI2
  24:./FWLIB/src/stm32f4xx_spi.c ****        RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE) for SPI3
  25:./FWLIB/src/stm32f4xx_spi.c ****        RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE) for SPI4
  26:./FWLIB/src/stm32f4xx_spi.c ****        RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE) for SPI5
  27:./FWLIB/src/stm32f4xx_spi.c ****        RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE) for SPI6.
  28:./FWLIB/src/stm32f4xx_spi.c ****   
  29:./FWLIB/src/stm32f4xx_spi.c ****    (#) Enable SCK, MOSI, MISO and NSS GPIO clocks using RCC_AHB1PeriphClockCmd()
  30:./FWLIB/src/stm32f4xx_spi.c ****        function. In I2S mode, if an external clock source is used then the I2S 
  31:./FWLIB/src/stm32f4xx_spi.c ****        CKIN pin GPIO clock should also be enabled.
ARM GAS  /tmp/ccTShhsc.s 			page 2


  32:./FWLIB/src/stm32f4xx_spi.c ****   
  33:./FWLIB/src/stm32f4xx_spi.c ****    (#) Peripherals alternate function: 
  34:./FWLIB/src/stm32f4xx_spi.c ****        (++) Connect the pin to the desired peripherals' Alternate Function (AF) 
  35:./FWLIB/src/stm32f4xx_spi.c ****             using GPIO_PinAFConfig() function
  36:./FWLIB/src/stm32f4xx_spi.c ****        (++) Configure the desired pin in alternate function by: 
  37:./FWLIB/src/stm32f4xx_spi.c ****             GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
  38:./FWLIB/src/stm32f4xx_spi.c ****        (++) Select the type, pull-up/pull-down and output speed via GPIO_PuPd, 
  39:./FWLIB/src/stm32f4xx_spi.c ****             GPIO_OType and GPIO_Speed members
  40:./FWLIB/src/stm32f4xx_spi.c ****        (++) Call GPIO_Init() function In I2S mode, if an external clock source is 
  41:./FWLIB/src/stm32f4xx_spi.c ****             used then the I2S CKIN pin should be also configured in Alternate 
  42:./FWLIB/src/stm32f4xx_spi.c ****             function Push-pull pull-up mode. 
  43:./FWLIB/src/stm32f4xx_spi.c ****           
  44:./FWLIB/src/stm32f4xx_spi.c ****    (#) Program the Polarity, Phase, First Data, Baud Rate Prescaler, Slave 
  45:./FWLIB/src/stm32f4xx_spi.c ****        Management, Peripheral Mode and CRC Polynomial values using the SPI_Init()
  46:./FWLIB/src/stm32f4xx_spi.c ****        function.
  47:./FWLIB/src/stm32f4xx_spi.c ****        In I2S mode, program the Mode, Standard, Data Format, MCLK Output, Audio 
  48:./FWLIB/src/stm32f4xx_spi.c ****        frequency and Polarity using I2S_Init() function. For I2S mode, make sure 
  49:./FWLIB/src/stm32f4xx_spi.c ****        that either:
  50:./FWLIB/src/stm32f4xx_spi.c ****        (++) I2S PLL is configured using the functions 
  51:./FWLIB/src/stm32f4xx_spi.c ****             RCC_I2SCLKConfig(RCC_I2S2CLKSource_PLLI2S), RCC_PLLI2SCmd(ENABLE) and 
  52:./FWLIB/src/stm32f4xx_spi.c ****             RCC_GetFlagStatus(RCC_FLAG_PLLI2SRDY); or 
  53:./FWLIB/src/stm32f4xx_spi.c ****        (++) External clock source is configured using the function 
  54:./FWLIB/src/stm32f4xx_spi.c ****             RCC_I2SCLKConfig(RCC_I2S2CLKSource_Ext) and after setting correctly 
  55:./FWLIB/src/stm32f4xx_spi.c ****             the define constant I2S_EXTERNAL_CLOCK_VAL in the stm32f4xx_conf.h file. 
  56:./FWLIB/src/stm32f4xx_spi.c ****   
  57:./FWLIB/src/stm32f4xx_spi.c ****    (#) Enable the NVIC and the corresponding interrupt using the function 
  58:./FWLIB/src/stm32f4xx_spi.c ****        SPI_ITConfig() if you need to use interrupt mode. 
  59:./FWLIB/src/stm32f4xx_spi.c ****   
  60:./FWLIB/src/stm32f4xx_spi.c ****    (#) When using the DMA mode 
  61:./FWLIB/src/stm32f4xx_spi.c ****        (++) Configure the DMA using DMA_Init() function
  62:./FWLIB/src/stm32f4xx_spi.c ****        (++) Active the needed channel Request using SPI_I2S_DMACmd() function
  63:./FWLIB/src/stm32f4xx_spi.c ****    
  64:./FWLIB/src/stm32f4xx_spi.c ****    (#) Enable the SPI using the SPI_Cmd() function or enable the I2S using
  65:./FWLIB/src/stm32f4xx_spi.c ****        I2S_Cmd().
  66:./FWLIB/src/stm32f4xx_spi.c ****    
  67:./FWLIB/src/stm32f4xx_spi.c ****    (#) Enable the DMA using the DMA_Cmd() function when using DMA mode. 
  68:./FWLIB/src/stm32f4xx_spi.c ****   
  69:./FWLIB/src/stm32f4xx_spi.c ****    (#) Optionally, you can enable/configure the following parameters without
  70:./FWLIB/src/stm32f4xx_spi.c ****        re-initialization (i.e there is no need to call again SPI_Init() function):
  71:./FWLIB/src/stm32f4xx_spi.c ****        (++) When bidirectional mode (SPI_Direction_1Line_Rx or SPI_Direction_1Line_Tx)
  72:./FWLIB/src/stm32f4xx_spi.c ****             is programmed as Data direction parameter using the SPI_Init() function
  73:./FWLIB/src/stm32f4xx_spi.c ****             it can be possible to switch between SPI_Direction_Tx or SPI_Direction_Rx
  74:./FWLIB/src/stm32f4xx_spi.c ****             using the SPI_BiDirectionalLineConfig() function.
  75:./FWLIB/src/stm32f4xx_spi.c ****        (++) When SPI_NSS_Soft is selected as Slave Select Management parameter 
  76:./FWLIB/src/stm32f4xx_spi.c ****             using the SPI_Init() function it can be possible to manage the 
  77:./FWLIB/src/stm32f4xx_spi.c ****             NSS internal signal using the SPI_NSSInternalSoftwareConfig() function.
  78:./FWLIB/src/stm32f4xx_spi.c ****        (++) Reconfigure the data size using the SPI_DataSizeConfig() function  
  79:./FWLIB/src/stm32f4xx_spi.c ****        (++) Enable or disable the SS output using the SPI_SSOutputCmd() function  
  80:./FWLIB/src/stm32f4xx_spi.c ****             
  81:./FWLIB/src/stm32f4xx_spi.c ****     (#) To use the CRC Hardware calculation feature refer to the Peripheral 
  82:./FWLIB/src/stm32f4xx_spi.c ****         CRC hardware Calculation subsection.
  83:./FWLIB/src/stm32f4xx_spi.c ****      
  84:./FWLIB/src/stm32f4xx_spi.c ****   
  85:./FWLIB/src/stm32f4xx_spi.c ****  [..] It is possible to use SPI in I2S full duplex mode, in this case, each SPI 
  86:./FWLIB/src/stm32f4xx_spi.c ****       peripheral is able to manage sending and receiving data simultaneously
  87:./FWLIB/src/stm32f4xx_spi.c ****       using two data lines. Each SPI peripheral has an extended block called I2Sxext
  88:./FWLIB/src/stm32f4xx_spi.c ****       (ie. I2S2ext for SPI2 and I2S3ext for SPI3).
ARM GAS  /tmp/ccTShhsc.s 			page 3


  89:./FWLIB/src/stm32f4xx_spi.c ****       The extension block is not a full SPI IP, it is used only as I2S slave to
  90:./FWLIB/src/stm32f4xx_spi.c ****       implement full duplex mode. The extension block uses the same clock sources
  91:./FWLIB/src/stm32f4xx_spi.c ****       as its master.          
  92:./FWLIB/src/stm32f4xx_spi.c ****       To configure I2S full duplex you have to:
  93:./FWLIB/src/stm32f4xx_spi.c ****               
  94:./FWLIB/src/stm32f4xx_spi.c ****       (#) Configure SPIx in I2S mode (I2S_Init() function) as described above. 
  95:./FWLIB/src/stm32f4xx_spi.c ****              
  96:./FWLIB/src/stm32f4xx_spi.c ****       (#) Call the I2S_FullDuplexConfig() function using the same strucutre passed to  
  97:./FWLIB/src/stm32f4xx_spi.c ****           I2S_Init() function.
  98:./FWLIB/src/stm32f4xx_spi.c ****               
  99:./FWLIB/src/stm32f4xx_spi.c ****       (#) Call I2S_Cmd() for SPIx then for its extended block.
 100:./FWLIB/src/stm32f4xx_spi.c ****             
 101:./FWLIB/src/stm32f4xx_spi.c ****       (#) To configure interrupts or DMA requests and to get/clear flag status, 
 102:./FWLIB/src/stm32f4xx_spi.c ****           use I2Sxext instance for the extension block.
 103:./FWLIB/src/stm32f4xx_spi.c ****                
 104:./FWLIB/src/stm32f4xx_spi.c ****  [..] Functions that can be called with I2Sxext instances are: I2S_Cmd(), 
 105:./FWLIB/src/stm32f4xx_spi.c ****       I2S_FullDuplexConfig(), SPI_I2S_ReceiveData(), SPI_I2S_SendData(), 
 106:./FWLIB/src/stm32f4xx_spi.c ****       SPI_I2S_DMACmd(), SPI_I2S_ITConfig(), SPI_I2S_GetFlagStatus(), 
 107:./FWLIB/src/stm32f4xx_spi.c ****       SPI_I2S_ClearFlag(), SPI_I2S_GetITStatus() and SPI_I2S_ClearITPendingBit().
 108:./FWLIB/src/stm32f4xx_spi.c ****                    
 109:./FWLIB/src/stm32f4xx_spi.c ****       Example: To use SPI3 in Full duplex mode (SPI3 is Master Tx, I2S3ext is Slave Rx):
 110:./FWLIB/src/stm32f4xx_spi.c ****               
 111:./FWLIB/src/stm32f4xx_spi.c ****       RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI3, ENABLE);   
 112:./FWLIB/src/stm32f4xx_spi.c ****       I2S_StructInit(&I2SInitStruct);
 113:./FWLIB/src/stm32f4xx_spi.c ****       I2SInitStruct.Mode = I2S_Mode_MasterTx;     
 114:./FWLIB/src/stm32f4xx_spi.c ****       I2S_Init(SPI3, &I2SInitStruct);
 115:./FWLIB/src/stm32f4xx_spi.c ****       I2S_FullDuplexConfig(SPI3ext, &I2SInitStruct)
 116:./FWLIB/src/stm32f4xx_spi.c ****       I2S_Cmd(SPI3, ENABLE);
 117:./FWLIB/src/stm32f4xx_spi.c ****       I2S_Cmd(SPI3ext, ENABLE);
 118:./FWLIB/src/stm32f4xx_spi.c ****       ...
 119:./FWLIB/src/stm32f4xx_spi.c ****       while (SPI_I2S_GetFlagStatus(SPI2, SPI_FLAG_TXE) == RESET)
 120:./FWLIB/src/stm32f4xx_spi.c ****       {}
 121:./FWLIB/src/stm32f4xx_spi.c ****       SPI_I2S_SendData(SPI3, txdata[i]);
 122:./FWLIB/src/stm32f4xx_spi.c ****       ...  
 123:./FWLIB/src/stm32f4xx_spi.c ****       while (SPI_I2S_GetFlagStatus(I2S3ext, SPI_FLAG_RXNE) == RESET)
 124:./FWLIB/src/stm32f4xx_spi.c ****       {}
 125:./FWLIB/src/stm32f4xx_spi.c ****       rxdata[i] = SPI_I2S_ReceiveData(I2S3ext);
 126:./FWLIB/src/stm32f4xx_spi.c ****       ...          
 127:./FWLIB/src/stm32f4xx_spi.c ****                 
 128:./FWLIB/src/stm32f4xx_spi.c ****  [..]       
 129:./FWLIB/src/stm32f4xx_spi.c ****    (@) In I2S mode: if an external clock is used as source clock for the I2S,  
 130:./FWLIB/src/stm32f4xx_spi.c ****        then the define I2S_EXTERNAL_CLOCK_VAL in file stm32f4xx_conf.h should 
 131:./FWLIB/src/stm32f4xx_spi.c ****        be enabled and set to the value of the source clock frequency (in Hz).
 132:./FWLIB/src/stm32f4xx_spi.c ****    
 133:./FWLIB/src/stm32f4xx_spi.c ****    (@) In SPI mode: To use the SPI TI mode, call the function SPI_TIModeCmd() 
 134:./FWLIB/src/stm32f4xx_spi.c ****        just after calling the function SPI_Init().
 135:./FWLIB/src/stm32f4xx_spi.c ****   
 136:./FWLIB/src/stm32f4xx_spi.c **** @endverbatim  
 137:./FWLIB/src/stm32f4xx_spi.c ****   *                                  
 138:./FWLIB/src/stm32f4xx_spi.c ****   ******************************************************************************
 139:./FWLIB/src/stm32f4xx_spi.c ****   * @attention
 140:./FWLIB/src/stm32f4xx_spi.c ****   *
 141:./FWLIB/src/stm32f4xx_spi.c ****   * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
 142:./FWLIB/src/stm32f4xx_spi.c ****   *
 143:./FWLIB/src/stm32f4xx_spi.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
 144:./FWLIB/src/stm32f4xx_spi.c ****   * You may not use this file except in compliance with the License.
 145:./FWLIB/src/stm32f4xx_spi.c ****   * You may obtain a copy of the License at:
ARM GAS  /tmp/ccTShhsc.s 			page 4


 146:./FWLIB/src/stm32f4xx_spi.c ****   *
 147:./FWLIB/src/stm32f4xx_spi.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
 148:./FWLIB/src/stm32f4xx_spi.c ****   *
 149:./FWLIB/src/stm32f4xx_spi.c ****   * Unless required by applicable law or agreed to in writing, software 
 150:./FWLIB/src/stm32f4xx_spi.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
 151:./FWLIB/src/stm32f4xx_spi.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 152:./FWLIB/src/stm32f4xx_spi.c ****   * See the License for the specific language governing permissions and
 153:./FWLIB/src/stm32f4xx_spi.c ****   * limitations under the License.
 154:./FWLIB/src/stm32f4xx_spi.c ****   *
 155:./FWLIB/src/stm32f4xx_spi.c ****   ******************************************************************************  
 156:./FWLIB/src/stm32f4xx_spi.c ****   */ 
 157:./FWLIB/src/stm32f4xx_spi.c **** 
 158:./FWLIB/src/stm32f4xx_spi.c **** /* Includes ------------------------------------------------------------------*/
 159:./FWLIB/src/stm32f4xx_spi.c **** #include "stm32f4xx_spi.h"
 160:./FWLIB/src/stm32f4xx_spi.c **** #include "stm32f4xx_rcc.h"
 161:./FWLIB/src/stm32f4xx_spi.c **** 
 162:./FWLIB/src/stm32f4xx_spi.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 163:./FWLIB/src/stm32f4xx_spi.c ****   * @{
 164:./FWLIB/src/stm32f4xx_spi.c ****   */
 165:./FWLIB/src/stm32f4xx_spi.c **** 
 166:./FWLIB/src/stm32f4xx_spi.c **** /** @defgroup SPI 
 167:./FWLIB/src/stm32f4xx_spi.c ****   * @brief SPI driver modules
 168:./FWLIB/src/stm32f4xx_spi.c ****   * @{
 169:./FWLIB/src/stm32f4xx_spi.c ****   */ 
 170:./FWLIB/src/stm32f4xx_spi.c **** 
 171:./FWLIB/src/stm32f4xx_spi.c **** /* Private typedef -----------------------------------------------------------*/
 172:./FWLIB/src/stm32f4xx_spi.c **** /* Private define ------------------------------------------------------------*/
 173:./FWLIB/src/stm32f4xx_spi.c **** 
 174:./FWLIB/src/stm32f4xx_spi.c **** /* SPI registers Masks */
 175:./FWLIB/src/stm32f4xx_spi.c **** #define CR1_CLEAR_MASK            ((uint16_t)0x3040)
 176:./FWLIB/src/stm32f4xx_spi.c **** #define I2SCFGR_CLEAR_MASK        ((uint16_t)0xF040)
 177:./FWLIB/src/stm32f4xx_spi.c **** 
 178:./FWLIB/src/stm32f4xx_spi.c **** /* RCC PLLs masks */
 179:./FWLIB/src/stm32f4xx_spi.c **** #define PLLCFGR_PPLR_MASK         ((uint32_t)0x70000000)
 180:./FWLIB/src/stm32f4xx_spi.c **** #define PLLCFGR_PPLN_MASK         ((uint32_t)0x00007FC0)
 181:./FWLIB/src/stm32f4xx_spi.c **** 
 182:./FWLIB/src/stm32f4xx_spi.c **** #define SPI_CR2_FRF               ((uint16_t)0x0010)
 183:./FWLIB/src/stm32f4xx_spi.c **** #define SPI_SR_TIFRFE             ((uint16_t)0x0100)
 184:./FWLIB/src/stm32f4xx_spi.c **** 
 185:./FWLIB/src/stm32f4xx_spi.c **** /* Private macro -------------------------------------------------------------*/
 186:./FWLIB/src/stm32f4xx_spi.c **** /* Private variables ---------------------------------------------------------*/
 187:./FWLIB/src/stm32f4xx_spi.c **** /* Private function prototypes -----------------------------------------------*/
 188:./FWLIB/src/stm32f4xx_spi.c **** /* Private functions ---------------------------------------------------------*/
 189:./FWLIB/src/stm32f4xx_spi.c **** 
 190:./FWLIB/src/stm32f4xx_spi.c **** /** @defgroup SPI_Private_Functions
 191:./FWLIB/src/stm32f4xx_spi.c ****   * @{
 192:./FWLIB/src/stm32f4xx_spi.c ****   */
 193:./FWLIB/src/stm32f4xx_spi.c **** 
 194:./FWLIB/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group1 Initialization and Configuration functions
 195:./FWLIB/src/stm32f4xx_spi.c ****  *  @brief   Initialization and Configuration functions 
 196:./FWLIB/src/stm32f4xx_spi.c ****  *
 197:./FWLIB/src/stm32f4xx_spi.c **** @verbatim   
 198:./FWLIB/src/stm32f4xx_spi.c ****  ===============================================================================
 199:./FWLIB/src/stm32f4xx_spi.c ****              ##### Initialization and Configuration functions ##### 
 200:./FWLIB/src/stm32f4xx_spi.c ****  ===============================================================================  
 201:./FWLIB/src/stm32f4xx_spi.c ****  [..] This section provides a set of functions allowing to initialize the SPI 
 202:./FWLIB/src/stm32f4xx_spi.c ****       Direction, SPI Mode, SPI Data Size, SPI Polarity, SPI Phase, SPI NSS 
ARM GAS  /tmp/ccTShhsc.s 			page 5


 203:./FWLIB/src/stm32f4xx_spi.c ****       Management, SPI Baud Rate Prescaler, SPI First Bit and SPI CRC Polynomial.
 204:./FWLIB/src/stm32f4xx_spi.c ****   
 205:./FWLIB/src/stm32f4xx_spi.c ****  [..] The SPI_Init() function follows the SPI configuration procedures for Master 
 206:./FWLIB/src/stm32f4xx_spi.c ****       mode and Slave mode (details for these procedures are available in reference 
 207:./FWLIB/src/stm32f4xx_spi.c ****       manual (RM0090)).
 208:./FWLIB/src/stm32f4xx_spi.c ****   
 209:./FWLIB/src/stm32f4xx_spi.c **** @endverbatim
 210:./FWLIB/src/stm32f4xx_spi.c ****   * @{
 211:./FWLIB/src/stm32f4xx_spi.c ****   */
 212:./FWLIB/src/stm32f4xx_spi.c **** 
 213:./FWLIB/src/stm32f4xx_spi.c **** /**
 214:./FWLIB/src/stm32f4xx_spi.c ****   * @brief  De-initialize the SPIx peripheral registers to their default reset values.
 215:./FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
 216:./FWLIB/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode.   
 217:./FWLIB/src/stm32f4xx_spi.c ****   *         
 218:./FWLIB/src/stm32f4xx_spi.c ****   * @note   The extended I2S blocks (ie. I2S2ext and I2S3ext blocks) are de-initialized
 219:./FWLIB/src/stm32f4xx_spi.c ****   *         when the relative I2S peripheral is de-initialized (the extended block's clock
 220:./FWLIB/src/stm32f4xx_spi.c ****   *         is managed by the I2S peripheral clock).
 221:./FWLIB/src/stm32f4xx_spi.c ****   *             
 222:./FWLIB/src/stm32f4xx_spi.c ****   * @retval None
 223:./FWLIB/src/stm32f4xx_spi.c ****   */
 224:./FWLIB/src/stm32f4xx_spi.c **** void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
 225:./FWLIB/src/stm32f4xx_spi.c **** {
  28              		.loc 1 225 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 08B5     		push	{r3, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 3, -8
  37              		.cfi_offset 14, -4
 226:./FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
 227:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 228:./FWLIB/src/stm32f4xx_spi.c **** 
 229:./FWLIB/src/stm32f4xx_spi.c ****   if (SPIx == SPI1)
  38              		.loc 1 229 0
  39 0002 2A4B     		ldr	r3, .L15
  40 0004 9842     		cmp	r0, r3
  41 0006 0FD0     		beq	.L9
 230:./FWLIB/src/stm32f4xx_spi.c ****   {
 231:./FWLIB/src/stm32f4xx_spi.c ****     /* Enable SPI1 reset state */
 232:./FWLIB/src/stm32f4xx_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 233:./FWLIB/src/stm32f4xx_spi.c ****     /* Release SPI1 from reset state */
 234:./FWLIB/src/stm32f4xx_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 235:./FWLIB/src/stm32f4xx_spi.c ****   }
 236:./FWLIB/src/stm32f4xx_spi.c ****   else if (SPIx == SPI2)
  42              		.loc 1 236 0
  43 0008 294B     		ldr	r3, .L15+4
  44 000a 9842     		cmp	r0, r3
  45 000c 17D0     		beq	.L10
 237:./FWLIB/src/stm32f4xx_spi.c ****   {
 238:./FWLIB/src/stm32f4xx_spi.c ****     /* Enable SPI2 reset state */
 239:./FWLIB/src/stm32f4xx_spi.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 240:./FWLIB/src/stm32f4xx_spi.c ****     /* Release SPI2 from reset state */
 241:./FWLIB/src/stm32f4xx_spi.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
ARM GAS  /tmp/ccTShhsc.s 			page 6


 242:./FWLIB/src/stm32f4xx_spi.c ****   }
 243:./FWLIB/src/stm32f4xx_spi.c ****   else if (SPIx == SPI3)
  46              		.loc 1 243 0
  47 000e 294B     		ldr	r3, .L15+8
  48 0010 9842     		cmp	r0, r3
  49 0012 1FD0     		beq	.L11
 244:./FWLIB/src/stm32f4xx_spi.c ****   {
 245:./FWLIB/src/stm32f4xx_spi.c ****     /* Enable SPI3 reset state */
 246:./FWLIB/src/stm32f4xx_spi.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 247:./FWLIB/src/stm32f4xx_spi.c ****     /* Release SPI3 from reset state */
 248:./FWLIB/src/stm32f4xx_spi.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 249:./FWLIB/src/stm32f4xx_spi.c ****   }
 250:./FWLIB/src/stm32f4xx_spi.c ****   else if (SPIx == SPI4)
  50              		.loc 1 250 0
  51 0014 284B     		ldr	r3, .L15+12
  52 0016 9842     		cmp	r0, r3
  53 0018 27D0     		beq	.L12
 251:./FWLIB/src/stm32f4xx_spi.c ****   {
 252:./FWLIB/src/stm32f4xx_spi.c ****     /* Enable SPI4 reset state */
 253:./FWLIB/src/stm32f4xx_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
 254:./FWLIB/src/stm32f4xx_spi.c ****     /* Release SPI4 from reset state */
 255:./FWLIB/src/stm32f4xx_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
 256:./FWLIB/src/stm32f4xx_spi.c ****   }
 257:./FWLIB/src/stm32f4xx_spi.c ****   else if (SPIx == SPI5)
  54              		.loc 1 257 0
  55 001a 284B     		ldr	r3, .L15+16
  56 001c 9842     		cmp	r0, r3
  57 001e 2FD0     		beq	.L13
 258:./FWLIB/src/stm32f4xx_spi.c ****   {
 259:./FWLIB/src/stm32f4xx_spi.c ****     /* Enable SPI5 reset state */
 260:./FWLIB/src/stm32f4xx_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, ENABLE);
 261:./FWLIB/src/stm32f4xx_spi.c ****     /* Release SPI5 from reset state */
 262:./FWLIB/src/stm32f4xx_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
 263:./FWLIB/src/stm32f4xx_spi.c ****   }
 264:./FWLIB/src/stm32f4xx_spi.c ****   else 
 265:./FWLIB/src/stm32f4xx_spi.c ****   {
 266:./FWLIB/src/stm32f4xx_spi.c ****     if (SPIx == SPI6)
  58              		.loc 1 266 0
  59 0020 274B     		ldr	r3, .L15+20
  60 0022 9842     		cmp	r0, r3
  61 0024 37D0     		beq	.L14
  62              	.LVL1:
  63              	.L1:
 267:./FWLIB/src/stm32f4xx_spi.c ****     {
 268:./FWLIB/src/stm32f4xx_spi.c ****       /* Enable SPI6 reset state */
 269:./FWLIB/src/stm32f4xx_spi.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
 270:./FWLIB/src/stm32f4xx_spi.c ****       /* Release SPI6 from reset state */
 271:./FWLIB/src/stm32f4xx_spi.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
 272:./FWLIB/src/stm32f4xx_spi.c ****     }
 273:./FWLIB/src/stm32f4xx_spi.c ****   }
 274:./FWLIB/src/stm32f4xx_spi.c **** }
  64              		.loc 1 274 0
  65 0026 08BD     		pop	{r3, pc}
  66              	.LVL2:
  67              	.L9:
 232:./FWLIB/src/stm32f4xx_spi.c ****     /* Release SPI1 from reset state */
  68              		.loc 1 232 0
ARM GAS  /tmp/ccTShhsc.s 			page 7


  69 0028 0121     		movs	r1, #1
  70 002a 4FF48050 		mov	r0, #4096
  71              	.LVL3:
  72 002e FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  73              	.LVL4:
 234:./FWLIB/src/stm32f4xx_spi.c ****   }
  74              		.loc 1 234 0
  75 0032 0021     		movs	r1, #0
  76 0034 4FF48050 		mov	r0, #4096
  77 0038 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  78              	.LVL5:
  79 003c F3E7     		b	.L1
  80              	.LVL6:
  81              	.L10:
 239:./FWLIB/src/stm32f4xx_spi.c ****     /* Release SPI2 from reset state */
  82              		.loc 1 239 0
  83 003e 0121     		movs	r1, #1
  84 0040 4FF48040 		mov	r0, #16384
  85              	.LVL7:
  86 0044 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  87              	.LVL8:
 241:./FWLIB/src/stm32f4xx_spi.c ****   }
  88              		.loc 1 241 0
  89 0048 0021     		movs	r1, #0
  90 004a 4FF48040 		mov	r0, #16384
  91 004e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  92              	.LVL9:
  93 0052 E8E7     		b	.L1
  94              	.LVL10:
  95              	.L11:
 246:./FWLIB/src/stm32f4xx_spi.c ****     /* Release SPI3 from reset state */
  96              		.loc 1 246 0
  97 0054 0121     		movs	r1, #1
  98 0056 4FF40040 		mov	r0, #32768
  99              	.LVL11:
 100 005a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 101              	.LVL12:
 248:./FWLIB/src/stm32f4xx_spi.c ****   }
 102              		.loc 1 248 0
 103 005e 0021     		movs	r1, #0
 104 0060 4FF40040 		mov	r0, #32768
 105 0064 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 106              	.LVL13:
 107 0068 DDE7     		b	.L1
 108              	.LVL14:
 109              	.L12:
 253:./FWLIB/src/stm32f4xx_spi.c ****     /* Release SPI4 from reset state */
 110              		.loc 1 253 0
 111 006a 0121     		movs	r1, #1
 112 006c 4FF40050 		mov	r0, #8192
 113              	.LVL15:
 114 0070 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 115              	.LVL16:
 255:./FWLIB/src/stm32f4xx_spi.c ****   }
 116              		.loc 1 255 0
 117 0074 0021     		movs	r1, #0
 118 0076 4FF40050 		mov	r0, #8192
ARM GAS  /tmp/ccTShhsc.s 			page 8


 119 007a FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 120              	.LVL17:
 121 007e D2E7     		b	.L1
 122              	.LVL18:
 123              	.L13:
 260:./FWLIB/src/stm32f4xx_spi.c ****     /* Release SPI5 from reset state */
 124              		.loc 1 260 0
 125 0080 0121     		movs	r1, #1
 126 0082 4FF48010 		mov	r0, #1048576
 127              	.LVL19:
 128 0086 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 129              	.LVL20:
 262:./FWLIB/src/stm32f4xx_spi.c ****   }
 130              		.loc 1 262 0
 131 008a 0021     		movs	r1, #0
 132 008c 4FF48010 		mov	r0, #1048576
 133 0090 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 134              	.LVL21:
 135 0094 C7E7     		b	.L1
 136              	.LVL22:
 137              	.L14:
 269:./FWLIB/src/stm32f4xx_spi.c ****       /* Release SPI6 from reset state */
 138              		.loc 1 269 0
 139 0096 0121     		movs	r1, #1
 140 0098 4FF40010 		mov	r0, #2097152
 141              	.LVL23:
 142 009c FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 143              	.LVL24:
 271:./FWLIB/src/stm32f4xx_spi.c ****     }
 144              		.loc 1 271 0
 145 00a0 0021     		movs	r1, #0
 146 00a2 4FF40010 		mov	r0, #2097152
 147 00a6 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 148              	.LVL25:
 149              		.loc 1 274 0
 150 00aa BCE7     		b	.L1
 151              	.L16:
 152              		.align	2
 153              	.L15:
 154 00ac 00300140 		.word	1073819648
 155 00b0 00380040 		.word	1073756160
 156 00b4 003C0040 		.word	1073757184
 157 00b8 00340140 		.word	1073820672
 158 00bc 00500140 		.word	1073827840
 159 00c0 00540140 		.word	1073828864
 160              		.cfi_endproc
 161              	.LFE112:
 163              		.section	.text.SPI_Init,"ax",%progbits
 164              		.align	1
 165              		.global	SPI_Init
 166              		.syntax unified
 167              		.thumb
 168              		.thumb_func
 169              		.fpu fpv4-sp-d16
 171              	SPI_Init:
 172              	.LFB113:
 275:./FWLIB/src/stm32f4xx_spi.c **** 
ARM GAS  /tmp/ccTShhsc.s 			page 9


 276:./FWLIB/src/stm32f4xx_spi.c **** /**
 277:./FWLIB/src/stm32f4xx_spi.c ****   * @brief  Initializes the SPIx peripheral according to the specified 
 278:./FWLIB/src/stm32f4xx_spi.c ****   *         parameters in the SPI_InitStruct.
 279:./FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
 280:./FWLIB/src/stm32f4xx_spi.c ****   * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
 281:./FWLIB/src/stm32f4xx_spi.c ****   *         contains the configuration information for the specified SPI peripheral.
 282:./FWLIB/src/stm32f4xx_spi.c ****   * @retval None
 283:./FWLIB/src/stm32f4xx_spi.c ****   */
 284:./FWLIB/src/stm32f4xx_spi.c **** void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
 285:./FWLIB/src/stm32f4xx_spi.c **** {
 173              		.loc 1 285 0
 174              		.cfi_startproc
 175              		@ args = 0, pretend = 0, frame = 0
 176              		@ frame_needed = 0, uses_anonymous_args = 0
 177              	.LVL26:
 178 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 179              	.LCFI1:
 180              		.cfi_def_cfa_offset 24
 181              		.cfi_offset 4, -24
 182              		.cfi_offset 5, -20
 183              		.cfi_offset 6, -16
 184              		.cfi_offset 7, -12
 185              		.cfi_offset 8, -8
 186              		.cfi_offset 14, -4
 187              	.LVL27:
 286:./FWLIB/src/stm32f4xx_spi.c ****   uint16_t tmpreg = 0;
 287:./FWLIB/src/stm32f4xx_spi.c ****   
 288:./FWLIB/src/stm32f4xx_spi.c ****   /* check the parameters */
 289:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 290:./FWLIB/src/stm32f4xx_spi.c ****   
 291:./FWLIB/src/stm32f4xx_spi.c ****   /* Check the SPI parameters */
 292:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_DIRECTION_MODE(SPI_InitStruct->SPI_Direction));
 293:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_MODE(SPI_InitStruct->SPI_Mode));
 294:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_DATASIZE(SPI_InitStruct->SPI_DataSize));
 295:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_CPOL(SPI_InitStruct->SPI_CPOL));
 296:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_CPHA(SPI_InitStruct->SPI_CPHA));
 297:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_NSS(SPI_InitStruct->SPI_NSS));
 298:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
 299:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
 300:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));
 301:./FWLIB/src/stm32f4xx_spi.c **** 
 302:./FWLIB/src/stm32f4xx_spi.c **** /*---------------------------- SPIx CR1 Configuration ------------------------*/
 303:./FWLIB/src/stm32f4xx_spi.c ****   /* Get the SPIx CR1 value */
 304:./FWLIB/src/stm32f4xx_spi.c ****   tmpreg = SPIx->CR1;
 188              		.loc 1 304 0
 189 0004 0388     		ldrh	r3, [r0]
 190              	.LVL28:
 305:./FWLIB/src/stm32f4xx_spi.c ****   /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
 306:./FWLIB/src/stm32f4xx_spi.c ****   tmpreg &= CR1_CLEAR_MASK;
 191              		.loc 1 306 0
 192 0006 03F44152 		and	r2, r3, #12352
 193              	.LVL29:
 307:./FWLIB/src/stm32f4xx_spi.c ****   /* Configure SPIx: direction, NSS management, first transmitted bit, BaudRate prescaler
 308:./FWLIB/src/stm32f4xx_spi.c ****      master/salve mode, CPOL and CPHA */
 309:./FWLIB/src/stm32f4xx_spi.c ****   /* Set BIDImode, BIDIOE and RxONLY bits according to SPI_Direction value */
 310:./FWLIB/src/stm32f4xx_spi.c ****   /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
 311:./FWLIB/src/stm32f4xx_spi.c ****   /* Set LSBFirst bit according to SPI_FirstBit value */
ARM GAS  /tmp/ccTShhsc.s 			page 10


 312:./FWLIB/src/stm32f4xx_spi.c ****   /* Set BR bits according to SPI_BaudRatePrescaler value */
 313:./FWLIB/src/stm32f4xx_spi.c ****   /* Set CPOL bit according to SPI_CPOL value */
 314:./FWLIB/src/stm32f4xx_spi.c ****   /* Set CPHA bit according to SPI_CPHA value */
 315:./FWLIB/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 194              		.loc 1 315 0
 195 000a B1F800E0 		ldrh	lr, [r1]
 196 000e B1F80280 		ldrh	r8, [r1, #2]
 316:./FWLIB/src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 197              		.loc 1 316 0
 198 0012 B1F804C0 		ldrh	ip, [r1, #4]
 199 0016 CF88     		ldrh	r7, [r1, #6]
 317:./FWLIB/src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 200              		.loc 1 317 0
 201 0018 0E89     		ldrh	r6, [r1, #8]
 202 001a 4D89     		ldrh	r5, [r1, #10]
 318:./FWLIB/src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 203              		.loc 1 318 0
 204 001c 8C89     		ldrh	r4, [r1, #12]
 205 001e CB89     		ldrh	r3, [r1, #14]
 315:./FWLIB/src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 206              		.loc 1 315 0
 207 0020 4EEA080E 		orr	lr, lr, r8
 208 0024 4CEA0E0C 		orr	ip, ip, lr
 209 0028 47EA0C07 		orr	r7, r7, ip
 210 002c 3E43     		orrs	r6, r6, r7
 211 002e 3543     		orrs	r5, r5, r6
 212 0030 2C43     		orrs	r4, r4, r5
 213 0032 2343     		orrs	r3, r3, r4
 214 0034 1343     		orrs	r3, r3, r2
 215              	.LVL30:
 319:./FWLIB/src/stm32f4xx_spi.c ****   /* Write to SPIx CR1 */
 320:./FWLIB/src/stm32f4xx_spi.c ****   SPIx->CR1 = tmpreg;
 216              		.loc 1 320 0
 217 0036 0380     		strh	r3, [r0]	@ movhi
 321:./FWLIB/src/stm32f4xx_spi.c **** 
 322:./FWLIB/src/stm32f4xx_spi.c ****   /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
 323:./FWLIB/src/stm32f4xx_spi.c ****   SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 218              		.loc 1 323 0
 219 0038 838B     		ldrh	r3, [r0, #28]
 220              	.LVL31:
 221 003a 9BB2     		uxth	r3, r3
 222 003c 23F40063 		bic	r3, r3, #2048
 223 0040 9BB2     		uxth	r3, r3
 224 0042 8383     		strh	r3, [r0, #28]	@ movhi
 225              	.LVL32:
 324:./FWLIB/src/stm32f4xx_spi.c **** /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
 325:./FWLIB/src/stm32f4xx_spi.c ****   /* Write to SPIx CRCPOLY */
 326:./FWLIB/src/stm32f4xx_spi.c ****   SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 226              		.loc 1 326 0
 227 0044 0B8A     		ldrh	r3, [r1, #16]
 228 0046 0382     		strh	r3, [r0, #16]	@ movhi
 327:./FWLIB/src/stm32f4xx_spi.c **** }
 229              		.loc 1 327 0
 230 0048 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 231              		.cfi_endproc
 232              	.LFE113:
 234              		.section	.text.I2S_Init,"ax",%progbits
ARM GAS  /tmp/ccTShhsc.s 			page 11


 235              		.align	1
 236              		.global	I2S_Init
 237              		.syntax unified
 238              		.thumb
 239              		.thumb_func
 240              		.fpu fpv4-sp-d16
 242              	I2S_Init:
 243              	.LFB114:
 328:./FWLIB/src/stm32f4xx_spi.c **** 
 329:./FWLIB/src/stm32f4xx_spi.c **** /**
 330:./FWLIB/src/stm32f4xx_spi.c ****   * @brief  Initializes the SPIx peripheral according to the specified 
 331:./FWLIB/src/stm32f4xx_spi.c ****   *         parameters in the I2S_InitStruct.
 332:./FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be  2 or 3 to select the SPI peripheral (configured in I2S mode).
 333:./FWLIB/src/stm32f4xx_spi.c ****   * @param  I2S_InitStruct: pointer to an I2S_InitTypeDef structure that
 334:./FWLIB/src/stm32f4xx_spi.c ****   *         contains the configuration information for the specified SPI peripheral
 335:./FWLIB/src/stm32f4xx_spi.c ****   *         configured in I2S mode.
 336:./FWLIB/src/stm32f4xx_spi.c ****   *           
 337:./FWLIB/src/stm32f4xx_spi.c ****   * @note   The function calculates the optimal prescaler needed to obtain the most 
 338:./FWLIB/src/stm32f4xx_spi.c ****   *         accurate audio frequency (depending on the I2S clock source, the PLL values 
 339:./FWLIB/src/stm32f4xx_spi.c ****   *         and the product configuration). But in case the prescaler value is greater 
 340:./FWLIB/src/stm32f4xx_spi.c ****   *         than 511, the default value (0x02) will be configured instead.    
 341:./FWLIB/src/stm32f4xx_spi.c ****   * 
 342:./FWLIB/src/stm32f4xx_spi.c ****   * @note   if an external clock is used as source clock for the I2S, then the define
 343:./FWLIB/src/stm32f4xx_spi.c ****   *         I2S_EXTERNAL_CLOCK_VAL in file stm32f4xx_conf.h should be enabled and set
 344:./FWLIB/src/stm32f4xx_spi.c ****   *         to the value of the the source clock frequency (in Hz).
 345:./FWLIB/src/stm32f4xx_spi.c ****   *  
 346:./FWLIB/src/stm32f4xx_spi.c ****   * @retval None
 347:./FWLIB/src/stm32f4xx_spi.c ****   */
 348:./FWLIB/src/stm32f4xx_spi.c **** void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
 349:./FWLIB/src/stm32f4xx_spi.c **** {
 244              		.loc 1 349 0
 245              		.cfi_startproc
 246              		@ args = 0, pretend = 0, frame = 0
 247              		@ frame_needed = 0, uses_anonymous_args = 0
 248              		@ link register save eliminated.
 249              	.LVL33:
 250 0000 F0B4     		push	{r4, r5, r6, r7}
 251              	.LCFI2:
 252              		.cfi_def_cfa_offset 16
 253              		.cfi_offset 4, -16
 254              		.cfi_offset 5, -12
 255              		.cfi_offset 6, -8
 256              		.cfi_offset 7, -4
 257              	.LVL34:
 350:./FWLIB/src/stm32f4xx_spi.c ****   uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 351:./FWLIB/src/stm32f4xx_spi.c ****   uint32_t tmp = 0, i2sclk = 0;
 352:./FWLIB/src/stm32f4xx_spi.c **** #ifndef I2S_EXTERNAL_CLOCK_VAL
 353:./FWLIB/src/stm32f4xx_spi.c ****   uint32_t pllm = 0, plln = 0, pllr = 0;
 354:./FWLIB/src/stm32f4xx_spi.c **** #endif /* I2S_EXTERNAL_CLOCK_VAL */
 355:./FWLIB/src/stm32f4xx_spi.c ****   
 356:./FWLIB/src/stm32f4xx_spi.c ****   /* Check the I2S parameters */
 357:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_23_PERIPH(SPIx));
 358:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
 359:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
 360:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
 361:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_MCLK_OUTPUT(I2S_InitStruct->I2S_MCLKOutput));
 362:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
ARM GAS  /tmp/ccTShhsc.s 			page 12


 363:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  
 364:./FWLIB/src/stm32f4xx_spi.c **** 
 365:./FWLIB/src/stm32f4xx_spi.c **** /*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
 366:./FWLIB/src/stm32f4xx_spi.c ****   /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
 367:./FWLIB/src/stm32f4xx_spi.c ****   SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 258              		.loc 1 367 0
 259 0002 838B     		ldrh	r3, [r0, #28]
 260 0004 9BB2     		uxth	r3, r3
 261 0006 23F47B63 		bic	r3, r3, #4016
 262 000a 23F00F03 		bic	r3, r3, #15
 263 000e 9BB2     		uxth	r3, r3
 264 0010 8383     		strh	r3, [r0, #28]	@ movhi
 368:./FWLIB/src/stm32f4xx_spi.c ****   SPIx->I2SPR = 0x0002;
 265              		.loc 1 368 0
 266 0012 0223     		movs	r3, #2
 267 0014 0384     		strh	r3, [r0, #32]	@ movhi
 369:./FWLIB/src/stm32f4xx_spi.c ****   
 370:./FWLIB/src/stm32f4xx_spi.c ****   /* Get the I2SCFGR register value */
 371:./FWLIB/src/stm32f4xx_spi.c ****   tmpreg = SPIx->I2SCFGR;
 268              		.loc 1 371 0
 269 0016 838B     		ldrh	r3, [r0, #28]
 270 0018 9AB2     		uxth	r2, r3
 271              	.LVL35:
 372:./FWLIB/src/stm32f4xx_spi.c ****   
 373:./FWLIB/src/stm32f4xx_spi.c ****   /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
 374:./FWLIB/src/stm32f4xx_spi.c ****   if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 272              		.loc 1 374 0
 273 001a 8B68     		ldr	r3, [r1, #8]
 274 001c 022B     		cmp	r3, #2
 275 001e 68D0     		beq	.L28
 375:./FWLIB/src/stm32f4xx_spi.c ****   {
 376:./FWLIB/src/stm32f4xx_spi.c ****     i2sodd = (uint16_t)0;
 377:./FWLIB/src/stm32f4xx_spi.c ****     i2sdiv = (uint16_t)2;   
 378:./FWLIB/src/stm32f4xx_spi.c ****   }
 379:./FWLIB/src/stm32f4xx_spi.c ****   /* If the requested audio frequency is not the default, compute the prescaler */
 380:./FWLIB/src/stm32f4xx_spi.c ****   else
 381:./FWLIB/src/stm32f4xx_spi.c ****   {
 382:./FWLIB/src/stm32f4xx_spi.c ****     /* Check the frame length (For the Prescaler computing) *******************/
 383:./FWLIB/src/stm32f4xx_spi.c ****     if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 276              		.loc 1 383 0
 277 0020 8B88     		ldrh	r3, [r1, #4]
 278 0022 002B     		cmp	r3, #0
 279 0024 51D1     		bne	.L29
 384:./FWLIB/src/stm32f4xx_spi.c ****     {
 385:./FWLIB/src/stm32f4xx_spi.c ****       /* Packet length is 16 bits */
 386:./FWLIB/src/stm32f4xx_spi.c ****       packetlength = 1;
 280              		.loc 1 386 0
 281 0026 0124     		movs	r4, #1
 282              	.L21:
 283              	.LVL36:
 387:./FWLIB/src/stm32f4xx_spi.c ****     }
 388:./FWLIB/src/stm32f4xx_spi.c ****     else
 389:./FWLIB/src/stm32f4xx_spi.c ****     {
 390:./FWLIB/src/stm32f4xx_spi.c ****       /* Packet length is 32 bits */
 391:./FWLIB/src/stm32f4xx_spi.c ****       packetlength = 2;
 392:./FWLIB/src/stm32f4xx_spi.c ****     }
 393:./FWLIB/src/stm32f4xx_spi.c **** 
ARM GAS  /tmp/ccTShhsc.s 			page 13


 394:./FWLIB/src/stm32f4xx_spi.c ****     /* Get I2S source Clock frequency  ****************************************/
 395:./FWLIB/src/stm32f4xx_spi.c ****       
 396:./FWLIB/src/stm32f4xx_spi.c ****     /* If an external I2S clock has to be used, this define should be set  
 397:./FWLIB/src/stm32f4xx_spi.c ****        in the project configuration or in the stm32f4xx_conf.h file */
 398:./FWLIB/src/stm32f4xx_spi.c ****   #ifdef I2S_EXTERNAL_CLOCK_VAL     
 399:./FWLIB/src/stm32f4xx_spi.c ****     /* Set external clock as I2S clock source */
 400:./FWLIB/src/stm32f4xx_spi.c ****     if ((RCC->CFGR & RCC_CFGR_I2SSRC) == 0)
 401:./FWLIB/src/stm32f4xx_spi.c ****     {
 402:./FWLIB/src/stm32f4xx_spi.c ****       RCC->CFGR |= (uint32_t)RCC_CFGR_I2SSRC;
 403:./FWLIB/src/stm32f4xx_spi.c ****     }
 404:./FWLIB/src/stm32f4xx_spi.c ****     
 405:./FWLIB/src/stm32f4xx_spi.c ****     /* Set the I2S clock to the external clock  value */
 406:./FWLIB/src/stm32f4xx_spi.c ****     i2sclk = I2S_EXTERNAL_CLOCK_VAL;
 407:./FWLIB/src/stm32f4xx_spi.c **** 
 408:./FWLIB/src/stm32f4xx_spi.c ****   #else /* There is no define for External I2S clock source */
 409:./FWLIB/src/stm32f4xx_spi.c ****     /* Set PLLI2S as I2S clock source */
 410:./FWLIB/src/stm32f4xx_spi.c ****     if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 284              		.loc 1 410 0
 285 0028 334B     		ldr	r3, .L33
 286 002a 9B68     		ldr	r3, [r3, #8]
 287 002c 13F4000F 		tst	r3, #8388608
 288 0030 04D0     		beq	.L22
 411:./FWLIB/src/stm32f4xx_spi.c ****     {
 412:./FWLIB/src/stm32f4xx_spi.c ****       RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 289              		.loc 1 412 0
 290 0032 314D     		ldr	r5, .L33
 291 0034 AB68     		ldr	r3, [r5, #8]
 292 0036 23F40003 		bic	r3, r3, #8388608
 293 003a AB60     		str	r3, [r5, #8]
 294              	.L22:
 413:./FWLIB/src/stm32f4xx_spi.c ****     }    
 414:./FWLIB/src/stm32f4xx_spi.c ****     
 415:./FWLIB/src/stm32f4xx_spi.c ****     /* Get the PLLI2SN value */
 416:./FWLIB/src/stm32f4xx_spi.c ****     plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 295              		.loc 1 416 0
 296 003c 2E4E     		ldr	r6, .L33
 297 003e D6F88450 		ldr	r5, [r6, #132]
 298 0042 C5F38815 		ubfx	r5, r5, #6, #9
 299              	.LVL37:
 417:./FWLIB/src/stm32f4xx_spi.c ****                       (RCC_PLLI2SCFGR_PLLI2SN >> 6));
 418:./FWLIB/src/stm32f4xx_spi.c ****     
 419:./FWLIB/src/stm32f4xx_spi.c ****     /* Get the PLLI2SR value */
 420:./FWLIB/src/stm32f4xx_spi.c ****     pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 300              		.loc 1 420 0
 301 0046 D6F88430 		ldr	r3, [r6, #132]
 302 004a C3F30273 		ubfx	r3, r3, #28, #3
 303              	.LVL38:
 421:./FWLIB/src/stm32f4xx_spi.c ****                       (RCC_PLLI2SCFGR_PLLI2SR >> 28));
 422:./FWLIB/src/stm32f4xx_spi.c ****     
 423:./FWLIB/src/stm32f4xx_spi.c ****     /* Get the PLLM value */
 424:./FWLIB/src/stm32f4xx_spi.c ****     pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
 304              		.loc 1 424 0
 305 004e 7768     		ldr	r7, [r6, #4]
 306 0050 07F03F07 		and	r7, r7, #63
 307              	.LVL39:
 425:./FWLIB/src/stm32f4xx_spi.c **** 
 426:./FWLIB/src/stm32f4xx_spi.c ****     if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)
ARM GAS  /tmp/ccTShhsc.s 			page 14


 308              		.loc 1 426 0
 309 0054 7668     		ldr	r6, [r6, #4]
 310 0056 16F4800F 		tst	r6, #4194304
 311 005a 38D0     		beq	.L23
 427:./FWLIB/src/stm32f4xx_spi.c ****     {
 428:./FWLIB/src/stm32f4xx_spi.c ****       /* Get the I2S source clock value */
 429:./FWLIB/src/stm32f4xx_spi.c ****       i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 312              		.loc 1 429 0
 313 005c 274E     		ldr	r6, .L33+4
 314 005e B6FBF7F7 		udiv	r7, r6, r7
 315              	.LVL40:
 316 0062 05FB07F5 		mul	r5, r5, r7
 317              	.LVL41:
 318 0066 B5FBF3F3 		udiv	r3, r5, r3
 319              	.LVL42:
 320              	.L24:
 430:./FWLIB/src/stm32f4xx_spi.c ****     }
 431:./FWLIB/src/stm32f4xx_spi.c ****     else
 432:./FWLIB/src/stm32f4xx_spi.c ****     { /* Get the I2S source clock value */
 433:./FWLIB/src/stm32f4xx_spi.c ****       i2sclk = (uint32_t)(((HSI_VALUE / pllm) * plln) / pllr);
 434:./FWLIB/src/stm32f4xx_spi.c ****     }
 435:./FWLIB/src/stm32f4xx_spi.c ****   #endif /* I2S_EXTERNAL_CLOCK_VAL */
 436:./FWLIB/src/stm32f4xx_spi.c ****     
 437:./FWLIB/src/stm32f4xx_spi.c ****     /* Compute the Real divider depending on the MCLK output state, with a floating point */
 438:./FWLIB/src/stm32f4xx_spi.c ****     if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 321              		.loc 1 438 0
 322 006a CD88     		ldrh	r5, [r1, #6]
 323 006c B5F5007F 		cmp	r5, #512
 324 0070 35D0     		beq	.L32
 439:./FWLIB/src/stm32f4xx_spi.c ****     {
 440:./FWLIB/src/stm32f4xx_spi.c ****       /* MCLK output is enabled */
 441:./FWLIB/src/stm32f4xx_spi.c ****       tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 442:./FWLIB/src/stm32f4xx_spi.c ****     }
 443:./FWLIB/src/stm32f4xx_spi.c ****     else
 444:./FWLIB/src/stm32f4xx_spi.c ****     {
 445:./FWLIB/src/stm32f4xx_spi.c ****       /* MCLK output is disabled */
 446:./FWLIB/src/stm32f4xx_spi.c ****       tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 
 325              		.loc 1 446 0
 326 0072 6401     		lsls	r4, r4, #5
 327              	.LVL43:
 328 0074 B3FBF4F3 		udiv	r3, r3, r4
 329              	.LVL44:
 330 0078 03EB8304 		add	r4, r3, r3, lsl #2
 331 007c 6300     		lsls	r3, r4, #1
 332 007e 8C68     		ldr	r4, [r1, #8]
 333 0080 B3FBF4F3 		udiv	r3, r3, r4
 334 0084 0533     		adds	r3, r3, #5
 335 0086 9BB2     		uxth	r3, r3
 336              	.LVL45:
 337              	.L26:
 447:./FWLIB/src/stm32f4xx_spi.c ****     }
 448:./FWLIB/src/stm32f4xx_spi.c ****     
 449:./FWLIB/src/stm32f4xx_spi.c ****     /* Remove the flatting point */
 450:./FWLIB/src/stm32f4xx_spi.c ****     tmp = tmp / 10;  
 338              		.loc 1 450 0
 339 0088 1D4C     		ldr	r4, .L33+8
 340 008a A4FB0343 		umull	r4, r3, r4, r3
ARM GAS  /tmp/ccTShhsc.s 			page 15


 341              	.LVL46:
 342 008e DB08     		lsrs	r3, r3, #3
 343              	.LVL47:
 451:./FWLIB/src/stm32f4xx_spi.c ****       
 452:./FWLIB/src/stm32f4xx_spi.c ****     /* Check the parity of the divider */
 453:./FWLIB/src/stm32f4xx_spi.c ****     i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 344              		.loc 1 453 0
 345 0090 03F00104 		and	r4, r3, #1
 346              	.LVL48:
 454:./FWLIB/src/stm32f4xx_spi.c ****    
 455:./FWLIB/src/stm32f4xx_spi.c ****     /* Compute the i2sdiv prescaler */
 456:./FWLIB/src/stm32f4xx_spi.c ****     i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 347              		.loc 1 456 0
 348 0094 1B1B     		subs	r3, r3, r4
 349              	.LVL49:
 350 0096 C3F34F03 		ubfx	r3, r3, #1, #16
 351              	.LVL50:
 457:./FWLIB/src/stm32f4xx_spi.c ****    
 458:./FWLIB/src/stm32f4xx_spi.c ****     /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
 459:./FWLIB/src/stm32f4xx_spi.c ****     i2sodd = (uint16_t) (i2sodd << 8);
 352              		.loc 1 459 0
 353 009a 2502     		lsls	r5, r4, #8
 354              	.LVL51:
 355              	.L20:
 460:./FWLIB/src/stm32f4xx_spi.c ****   }
 461:./FWLIB/src/stm32f4xx_spi.c **** 
 462:./FWLIB/src/stm32f4xx_spi.c ****   /* Test if the divider is 1 or 0 or greater than 0xFF */
 463:./FWLIB/src/stm32f4xx_spi.c ****   if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 356              		.loc 1 463 0
 357 009c 9C1E     		subs	r4, r3, #2
 358 009e A4B2     		uxth	r4, r4
 359 00a0 FD2C     		cmp	r4, #253
 360 00a2 01D9     		bls	.L27
 464:./FWLIB/src/stm32f4xx_spi.c ****   {
 465:./FWLIB/src/stm32f4xx_spi.c ****     /* Set the default values */
 466:./FWLIB/src/stm32f4xx_spi.c ****     i2sdiv = 2;
 467:./FWLIB/src/stm32f4xx_spi.c ****     i2sodd = 0;
 361              		.loc 1 467 0
 362 00a4 0025     		movs	r5, #0
 363              	.LVL52:
 466:./FWLIB/src/stm32f4xx_spi.c ****     i2sodd = 0;
 364              		.loc 1 466 0
 365 00a6 0223     		movs	r3, #2
 366              	.LVL53:
 367              	.L27:
 468:./FWLIB/src/stm32f4xx_spi.c ****   }
 469:./FWLIB/src/stm32f4xx_spi.c **** 
 470:./FWLIB/src/stm32f4xx_spi.c ****   /* Write to SPIx I2SPR register the computed value */
 471:./FWLIB/src/stm32f4xx_spi.c ****   SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCL
 368              		.loc 1 471 0
 369 00a8 CC88     		ldrh	r4, [r1, #6]
 370 00aa 2C43     		orrs	r4, r4, r5
 371 00ac 2343     		orrs	r3, r3, r4
 372              	.LVL54:
 373 00ae 0384     		strh	r3, [r0, #32]	@ movhi
 472:./FWLIB/src/stm32f4xx_spi.c ****  
 473:./FWLIB/src/stm32f4xx_spi.c ****   /* Configure the I2S with the SPI_InitStruct values */
ARM GAS  /tmp/ccTShhsc.s 			page 16


 474:./FWLIB/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 374              		.loc 1 474 0
 375 00b0 0B88     		ldrh	r3, [r1]
 475:./FWLIB/src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 376              		.loc 1 475 0
 377 00b2 4C88     		ldrh	r4, [r1, #2]
 378 00b4 8D88     		ldrh	r5, [r1, #4]
 379              	.LVL55:
 476:./FWLIB/src/stm32f4xx_spi.c ****                   (uint16_t)I2S_InitStruct->I2S_CPOL))));
 380              		.loc 1 476 0
 381 00b6 8989     		ldrh	r1, [r1, #12]
 382              	.LVL56:
 475:./FWLIB/src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 383              		.loc 1 475 0
 384 00b8 2943     		orrs	r1, r1, r5
 385 00ba 2143     		orrs	r1, r1, r4
 474:./FWLIB/src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 386              		.loc 1 474 0
 387 00bc 0B43     		orrs	r3, r3, r1
 388 00be 1343     		orrs	r3, r3, r2
 389 00c0 43F40063 		orr	r3, r3, #2048
 390              	.LVL57:
 477:./FWLIB/src/stm32f4xx_spi.c ****  
 478:./FWLIB/src/stm32f4xx_spi.c ****   /* Write to SPIx I2SCFGR */  
 479:./FWLIB/src/stm32f4xx_spi.c ****   SPIx->I2SCFGR = tmpreg;
 391              		.loc 1 479 0
 392 00c4 8383     		strh	r3, [r0, #28]	@ movhi
 480:./FWLIB/src/stm32f4xx_spi.c **** }
 393              		.loc 1 480 0
 394 00c6 F0BC     		pop	{r4, r5, r6, r7}
 395              	.LCFI3:
 396              		.cfi_remember_state
 397              		.cfi_restore 7
 398              		.cfi_restore 6
 399              		.cfi_restore 5
 400              		.cfi_restore 4
 401              		.cfi_def_cfa_offset 0
 402 00c8 7047     		bx	lr
 403              	.LVL58:
 404              	.L29:
 405              	.LCFI4:
 406              		.cfi_restore_state
 391:./FWLIB/src/stm32f4xx_spi.c ****     }
 407              		.loc 1 391 0
 408 00ca 0224     		movs	r4, #2
 409 00cc ACE7     		b	.L21
 410              	.LVL59:
 411              	.L23:
 433:./FWLIB/src/stm32f4xx_spi.c ****     }
 412              		.loc 1 433 0
 413 00ce 0D4E     		ldr	r6, .L33+12
 414 00d0 B6FBF7F7 		udiv	r7, r6, r7
 415              	.LVL60:
 416 00d4 05FB07F5 		mul	r5, r5, r7
 417              	.LVL61:
 418 00d8 B5FBF3F3 		udiv	r3, r5, r3
 419              	.LVL62:
ARM GAS  /tmp/ccTShhsc.s 			page 17


 420 00dc C5E7     		b	.L24
 421              	.L32:
 441:./FWLIB/src/stm32f4xx_spi.c ****     }
 422              		.loc 1 441 0
 423 00de 1B0A     		lsrs	r3, r3, #8
 424              	.LVL63:
 425 00e0 03EB8304 		add	r4, r3, r3, lsl #2
 426              	.LVL64:
 427 00e4 6300     		lsls	r3, r4, #1
 428 00e6 8C68     		ldr	r4, [r1, #8]
 429 00e8 B3FBF4F3 		udiv	r3, r3, r4
 430 00ec 0533     		adds	r3, r3, #5
 431 00ee 9BB2     		uxth	r3, r3
 432              	.LVL65:
 433 00f0 CAE7     		b	.L26
 434              	.LVL66:
 435              	.L28:
 376:./FWLIB/src/stm32f4xx_spi.c ****     i2sdiv = (uint16_t)2;   
 436              		.loc 1 376 0
 437 00f2 0025     		movs	r5, #0
 377:./FWLIB/src/stm32f4xx_spi.c ****   }
 438              		.loc 1 377 0
 439 00f4 0223     		movs	r3, #2
 440 00f6 D1E7     		b	.L20
 441              	.L34:
 442              		.align	2
 443              	.L33:
 444 00f8 00380240 		.word	1073887232
 445 00fc 00127A00 		.word	8000000
 446 0100 CDCCCCCC 		.word	-858993459
 447 0104 0024F400 		.word	16000000
 448              		.cfi_endproc
 449              	.LFE114:
 451              		.section	.text.SPI_StructInit,"ax",%progbits
 452              		.align	1
 453              		.global	SPI_StructInit
 454              		.syntax unified
 455              		.thumb
 456              		.thumb_func
 457              		.fpu fpv4-sp-d16
 459              	SPI_StructInit:
 460              	.LFB115:
 481:./FWLIB/src/stm32f4xx_spi.c **** 
 482:./FWLIB/src/stm32f4xx_spi.c **** /**
 483:./FWLIB/src/stm32f4xx_spi.c ****   * @brief  Fills each SPI_InitStruct member with its default value.
 484:./FWLIB/src/stm32f4xx_spi.c ****   * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
 485:./FWLIB/src/stm32f4xx_spi.c ****   * @retval None
 486:./FWLIB/src/stm32f4xx_spi.c ****   */
 487:./FWLIB/src/stm32f4xx_spi.c **** void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
 488:./FWLIB/src/stm32f4xx_spi.c **** {
 461              		.loc 1 488 0
 462              		.cfi_startproc
 463              		@ args = 0, pretend = 0, frame = 0
 464              		@ frame_needed = 0, uses_anonymous_args = 0
 465              		@ link register save eliminated.
 466              	.LVL67:
 489:./FWLIB/src/stm32f4xx_spi.c **** /*--------------- Reset SPI init structure parameters values -----------------*/
ARM GAS  /tmp/ccTShhsc.s 			page 18


 490:./FWLIB/src/stm32f4xx_spi.c ****   /* Initialize the SPI_Direction member */
 491:./FWLIB/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 467              		.loc 1 491 0
 468 0000 0023     		movs	r3, #0
 469 0002 0380     		strh	r3, [r0]	@ movhi
 492:./FWLIB/src/stm32f4xx_spi.c ****   /* initialize the SPI_Mode member */
 493:./FWLIB/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 470              		.loc 1 493 0
 471 0004 4380     		strh	r3, [r0, #2]	@ movhi
 494:./FWLIB/src/stm32f4xx_spi.c ****   /* initialize the SPI_DataSize member */
 495:./FWLIB/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 472              		.loc 1 495 0
 473 0006 8380     		strh	r3, [r0, #4]	@ movhi
 496:./FWLIB/src/stm32f4xx_spi.c ****   /* Initialize the SPI_CPOL member */
 497:./FWLIB/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 474              		.loc 1 497 0
 475 0008 C380     		strh	r3, [r0, #6]	@ movhi
 498:./FWLIB/src/stm32f4xx_spi.c ****   /* Initialize the SPI_CPHA member */
 499:./FWLIB/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 476              		.loc 1 499 0
 477 000a 0381     		strh	r3, [r0, #8]	@ movhi
 500:./FWLIB/src/stm32f4xx_spi.c ****   /* Initialize the SPI_NSS member */
 501:./FWLIB/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 478              		.loc 1 501 0
 479 000c 4381     		strh	r3, [r0, #10]	@ movhi
 502:./FWLIB/src/stm32f4xx_spi.c ****   /* Initialize the SPI_BaudRatePrescaler member */
 503:./FWLIB/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 480              		.loc 1 503 0
 481 000e 8381     		strh	r3, [r0, #12]	@ movhi
 504:./FWLIB/src/stm32f4xx_spi.c ****   /* Initialize the SPI_FirstBit member */
 505:./FWLIB/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 482              		.loc 1 505 0
 483 0010 C381     		strh	r3, [r0, #14]	@ movhi
 506:./FWLIB/src/stm32f4xx_spi.c ****   /* Initialize the SPI_CRCPolynomial member */
 507:./FWLIB/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_CRCPolynomial = 7;
 484              		.loc 1 507 0
 485 0012 0723     		movs	r3, #7
 486 0014 0382     		strh	r3, [r0, #16]	@ movhi
 508:./FWLIB/src/stm32f4xx_spi.c **** }
 487              		.loc 1 508 0
 488 0016 7047     		bx	lr
 489              		.cfi_endproc
 490              	.LFE115:
 492              		.section	.text.I2S_StructInit,"ax",%progbits
 493              		.align	1
 494              		.global	I2S_StructInit
 495              		.syntax unified
 496              		.thumb
 497              		.thumb_func
 498              		.fpu fpv4-sp-d16
 500              	I2S_StructInit:
 501              	.LFB116:
 509:./FWLIB/src/stm32f4xx_spi.c **** 
 510:./FWLIB/src/stm32f4xx_spi.c **** /**
 511:./FWLIB/src/stm32f4xx_spi.c ****   * @brief  Fills each I2S_InitStruct member with its default value.
 512:./FWLIB/src/stm32f4xx_spi.c ****   * @param  I2S_InitStruct: pointer to a I2S_InitTypeDef structure which will be initialized.
 513:./FWLIB/src/stm32f4xx_spi.c ****   * @retval None
ARM GAS  /tmp/ccTShhsc.s 			page 19


 514:./FWLIB/src/stm32f4xx_spi.c ****   */
 515:./FWLIB/src/stm32f4xx_spi.c **** void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
 516:./FWLIB/src/stm32f4xx_spi.c **** {
 502              		.loc 1 516 0
 503              		.cfi_startproc
 504              		@ args = 0, pretend = 0, frame = 0
 505              		@ frame_needed = 0, uses_anonymous_args = 0
 506              		@ link register save eliminated.
 507              	.LVL68:
 517:./FWLIB/src/stm32f4xx_spi.c **** /*--------------- Reset I2S init structure parameters values -----------------*/
 518:./FWLIB/src/stm32f4xx_spi.c ****   /* Initialize the I2S_Mode member */
 519:./FWLIB/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 508              		.loc 1 519 0
 509 0000 0023     		movs	r3, #0
 510 0002 0380     		strh	r3, [r0]	@ movhi
 520:./FWLIB/src/stm32f4xx_spi.c ****   
 521:./FWLIB/src/stm32f4xx_spi.c ****   /* Initialize the I2S_Standard member */
 522:./FWLIB/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 511              		.loc 1 522 0
 512 0004 4380     		strh	r3, [r0, #2]	@ movhi
 523:./FWLIB/src/stm32f4xx_spi.c ****   
 524:./FWLIB/src/stm32f4xx_spi.c ****   /* Initialize the I2S_DataFormat member */
 525:./FWLIB/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 513              		.loc 1 525 0
 514 0006 8380     		strh	r3, [r0, #4]	@ movhi
 526:./FWLIB/src/stm32f4xx_spi.c ****   
 527:./FWLIB/src/stm32f4xx_spi.c ****   /* Initialize the I2S_MCLKOutput member */
 528:./FWLIB/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 515              		.loc 1 528 0
 516 0008 C380     		strh	r3, [r0, #6]	@ movhi
 529:./FWLIB/src/stm32f4xx_spi.c ****   
 530:./FWLIB/src/stm32f4xx_spi.c ****   /* Initialize the I2S_AudioFreq member */
 531:./FWLIB/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 517              		.loc 1 531 0
 518 000a 0222     		movs	r2, #2
 519 000c 8260     		str	r2, [r0, #8]
 532:./FWLIB/src/stm32f4xx_spi.c ****   
 533:./FWLIB/src/stm32f4xx_spi.c ****   /* Initialize the I2S_CPOL member */
 534:./FWLIB/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 520              		.loc 1 534 0
 521 000e 8381     		strh	r3, [r0, #12]	@ movhi
 535:./FWLIB/src/stm32f4xx_spi.c **** }
 522              		.loc 1 535 0
 523 0010 7047     		bx	lr
 524              		.cfi_endproc
 525              	.LFE116:
 527              		.section	.text.SPI_Cmd,"ax",%progbits
 528              		.align	1
 529              		.global	SPI_Cmd
 530              		.syntax unified
 531              		.thumb
 532              		.thumb_func
 533              		.fpu fpv4-sp-d16
 535              	SPI_Cmd:
 536              	.LFB117:
 536:./FWLIB/src/stm32f4xx_spi.c **** 
 537:./FWLIB/src/stm32f4xx_spi.c **** /**
ARM GAS  /tmp/ccTShhsc.s 			page 20


 538:./FWLIB/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the specified SPI peripheral.
 539:./FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
 540:./FWLIB/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the SPIx peripheral. 
 541:./FWLIB/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 542:./FWLIB/src/stm32f4xx_spi.c ****   * @retval None
 543:./FWLIB/src/stm32f4xx_spi.c ****   */
 544:./FWLIB/src/stm32f4xx_spi.c **** void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 545:./FWLIB/src/stm32f4xx_spi.c **** {
 537              		.loc 1 545 0
 538              		.cfi_startproc
 539              		@ args = 0, pretend = 0, frame = 0
 540              		@ frame_needed = 0, uses_anonymous_args = 0
 541              		@ link register save eliminated.
 542              	.LVL69:
 546:./FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
 547:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 548:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 549:./FWLIB/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 543              		.loc 1 549 0
 544 0000 31B9     		cbnz	r1, .L40
 550:./FWLIB/src/stm32f4xx_spi.c ****   {
 551:./FWLIB/src/stm32f4xx_spi.c ****     /* Enable the selected SPI peripheral */
 552:./FWLIB/src/stm32f4xx_spi.c ****     SPIx->CR1 |= SPI_CR1_SPE;
 553:./FWLIB/src/stm32f4xx_spi.c ****   }
 554:./FWLIB/src/stm32f4xx_spi.c ****   else
 555:./FWLIB/src/stm32f4xx_spi.c ****   {
 556:./FWLIB/src/stm32f4xx_spi.c ****     /* Disable the selected SPI peripheral */
 557:./FWLIB/src/stm32f4xx_spi.c ****     SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 545              		.loc 1 557 0
 546 0002 0388     		ldrh	r3, [r0]
 547 0004 9BB2     		uxth	r3, r3
 548 0006 23F04003 		bic	r3, r3, #64
 549 000a 9BB2     		uxth	r3, r3
 550 000c 0380     		strh	r3, [r0]	@ movhi
 558:./FWLIB/src/stm32f4xx_spi.c ****   }
 559:./FWLIB/src/stm32f4xx_spi.c **** }
 551              		.loc 1 559 0
 552 000e 7047     		bx	lr
 553              	.L40:
 552:./FWLIB/src/stm32f4xx_spi.c ****   }
 554              		.loc 1 552 0
 555 0010 0388     		ldrh	r3, [r0]
 556 0012 43F04003 		orr	r3, r3, #64
 557 0016 0380     		strh	r3, [r0]	@ movhi
 558 0018 7047     		bx	lr
 559              		.cfi_endproc
 560              	.LFE117:
 562              		.section	.text.I2S_Cmd,"ax",%progbits
 563              		.align	1
 564              		.global	I2S_Cmd
 565              		.syntax unified
 566              		.thumb
 567              		.thumb_func
 568              		.fpu fpv4-sp-d16
 570              	I2S_Cmd:
 571              	.LFB118:
 560:./FWLIB/src/stm32f4xx_spi.c **** 
ARM GAS  /tmp/ccTShhsc.s 			page 21


 561:./FWLIB/src/stm32f4xx_spi.c **** /**
 562:./FWLIB/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the specified SPI peripheral (in I2S mode).
 563:./FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 2 or 3 to select the SPI peripheral (or I2Sxext 
 564:./FWLIB/src/stm32f4xx_spi.c ****   *         for full duplex mode).
 565:./FWLIB/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the SPIx peripheral. 
 566:./FWLIB/src/stm32f4xx_spi.c ****   *         This parameter can be: ENABLE or DISABLE.
 567:./FWLIB/src/stm32f4xx_spi.c ****   * @retval None
 568:./FWLIB/src/stm32f4xx_spi.c ****   */
 569:./FWLIB/src/stm32f4xx_spi.c **** void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 570:./FWLIB/src/stm32f4xx_spi.c **** {
 572              		.loc 1 570 0
 573              		.cfi_startproc
 574              		@ args = 0, pretend = 0, frame = 0
 575              		@ frame_needed = 0, uses_anonymous_args = 0
 576              		@ link register save eliminated.
 577              	.LVL70:
 571:./FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
 572:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
 573:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 574:./FWLIB/src/stm32f4xx_spi.c ****   
 575:./FWLIB/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 578              		.loc 1 575 0
 579 0000 31B9     		cbnz	r1, .L44
 576:./FWLIB/src/stm32f4xx_spi.c ****   {
 577:./FWLIB/src/stm32f4xx_spi.c ****     /* Enable the selected SPI peripheral (in I2S mode) */
 578:./FWLIB/src/stm32f4xx_spi.c ****     SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 579:./FWLIB/src/stm32f4xx_spi.c ****   }
 580:./FWLIB/src/stm32f4xx_spi.c ****   else
 581:./FWLIB/src/stm32f4xx_spi.c ****   {
 582:./FWLIB/src/stm32f4xx_spi.c ****     /* Disable the selected SPI peripheral in I2S mode */
 583:./FWLIB/src/stm32f4xx_spi.c ****     SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 580              		.loc 1 583 0
 581 0002 838B     		ldrh	r3, [r0, #28]
 582 0004 9BB2     		uxth	r3, r3
 583 0006 23F48063 		bic	r3, r3, #1024
 584 000a 9BB2     		uxth	r3, r3
 585 000c 8383     		strh	r3, [r0, #28]	@ movhi
 584:./FWLIB/src/stm32f4xx_spi.c ****   }
 585:./FWLIB/src/stm32f4xx_spi.c **** }
 586              		.loc 1 585 0
 587 000e 7047     		bx	lr
 588              	.L44:
 578:./FWLIB/src/stm32f4xx_spi.c ****   }
 589              		.loc 1 578 0
 590 0010 838B     		ldrh	r3, [r0, #28]
 591 0012 43F48063 		orr	r3, r3, #1024
 592 0016 8383     		strh	r3, [r0, #28]	@ movhi
 593 0018 7047     		bx	lr
 594              		.cfi_endproc
 595              	.LFE118:
 597              		.section	.text.SPI_DataSizeConfig,"ax",%progbits
 598              		.align	1
 599              		.global	SPI_DataSizeConfig
 600              		.syntax unified
 601              		.thumb
 602              		.thumb_func
 603              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccTShhsc.s 			page 22


 605              	SPI_DataSizeConfig:
 606              	.LFB119:
 586:./FWLIB/src/stm32f4xx_spi.c **** 
 587:./FWLIB/src/stm32f4xx_spi.c **** /**
 588:./FWLIB/src/stm32f4xx_spi.c ****   * @brief  Configures the data size for the selected SPI.
 589:./FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
 590:./FWLIB/src/stm32f4xx_spi.c ****   * @param  SPI_DataSize: specifies the SPI data size.
 591:./FWLIB/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
 592:./FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_DataSize_16b: Set data frame format to 16bit
 593:./FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_DataSize_8b: Set data frame format to 8bit
 594:./FWLIB/src/stm32f4xx_spi.c ****   * @retval None
 595:./FWLIB/src/stm32f4xx_spi.c ****   */
 596:./FWLIB/src/stm32f4xx_spi.c **** void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
 597:./FWLIB/src/stm32f4xx_spi.c **** {
 607              		.loc 1 597 0
 608              		.cfi_startproc
 609              		@ args = 0, pretend = 0, frame = 0
 610              		@ frame_needed = 0, uses_anonymous_args = 0
 611              		@ link register save eliminated.
 612              	.LVL71:
 598:./FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
 599:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 600:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_DATASIZE(SPI_DataSize));
 601:./FWLIB/src/stm32f4xx_spi.c ****   /* Clear DFF bit */
 602:./FWLIB/src/stm32f4xx_spi.c ****   SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 613              		.loc 1 602 0
 614 0000 0388     		ldrh	r3, [r0]
 615 0002 9BB2     		uxth	r3, r3
 616 0004 23F40063 		bic	r3, r3, #2048
 617 0008 9BB2     		uxth	r3, r3
 618 000a 0380     		strh	r3, [r0]	@ movhi
 603:./FWLIB/src/stm32f4xx_spi.c ****   /* Set new DFF bit value */
 604:./FWLIB/src/stm32f4xx_spi.c ****   SPIx->CR1 |= SPI_DataSize;
 619              		.loc 1 604 0
 620 000c 0388     		ldrh	r3, [r0]
 621 000e 1943     		orrs	r1, r1, r3
 622              	.LVL72:
 623 0010 0180     		strh	r1, [r0]	@ movhi
 605:./FWLIB/src/stm32f4xx_spi.c **** }
 624              		.loc 1 605 0
 625 0012 7047     		bx	lr
 626              		.cfi_endproc
 627              	.LFE119:
 629              		.section	.text.SPI_BiDirectionalLineConfig,"ax",%progbits
 630              		.align	1
 631              		.global	SPI_BiDirectionalLineConfig
 632              		.syntax unified
 633              		.thumb
 634              		.thumb_func
 635              		.fpu fpv4-sp-d16
 637              	SPI_BiDirectionalLineConfig:
 638              	.LFB120:
 606:./FWLIB/src/stm32f4xx_spi.c **** 
 607:./FWLIB/src/stm32f4xx_spi.c **** /**
 608:./FWLIB/src/stm32f4xx_spi.c ****   * @brief  Selects the data transfer direction in bidirectional mode for the specified SPI.
 609:./FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
 610:./FWLIB/src/stm32f4xx_spi.c ****   * @param  SPI_Direction: specifies the data transfer direction in bidirectional mode. 
ARM GAS  /tmp/ccTShhsc.s 			page 23


 611:./FWLIB/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
 612:./FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_Direction_Tx: Selects Tx transmission direction
 613:./FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_Direction_Rx: Selects Rx receive direction
 614:./FWLIB/src/stm32f4xx_spi.c ****   * @retval None
 615:./FWLIB/src/stm32f4xx_spi.c ****   */
 616:./FWLIB/src/stm32f4xx_spi.c **** void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
 617:./FWLIB/src/stm32f4xx_spi.c **** {
 639              		.loc 1 617 0
 640              		.cfi_startproc
 641              		@ args = 0, pretend = 0, frame = 0
 642              		@ frame_needed = 0, uses_anonymous_args = 0
 643              		@ link register save eliminated.
 644              	.LVL73:
 618:./FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
 619:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 620:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_DIRECTION(SPI_Direction));
 621:./FWLIB/src/stm32f4xx_spi.c ****   if (SPI_Direction == SPI_Direction_Tx)
 645              		.loc 1 621 0
 646 0000 B1F5804F 		cmp	r1, #16384
 647 0004 06D0     		beq	.L49
 622:./FWLIB/src/stm32f4xx_spi.c ****   {
 623:./FWLIB/src/stm32f4xx_spi.c ****     /* Set the Tx only mode */
 624:./FWLIB/src/stm32f4xx_spi.c ****     SPIx->CR1 |= SPI_Direction_Tx;
 625:./FWLIB/src/stm32f4xx_spi.c ****   }
 626:./FWLIB/src/stm32f4xx_spi.c ****   else
 627:./FWLIB/src/stm32f4xx_spi.c ****   {
 628:./FWLIB/src/stm32f4xx_spi.c ****     /* Set the Rx only mode */
 629:./FWLIB/src/stm32f4xx_spi.c ****     SPIx->CR1 &= SPI_Direction_Rx;
 648              		.loc 1 629 0
 649 0006 0388     		ldrh	r3, [r0]
 650 0008 9BB2     		uxth	r3, r3
 651 000a 23F48043 		bic	r3, r3, #16384
 652 000e 9BB2     		uxth	r3, r3
 653 0010 0380     		strh	r3, [r0]	@ movhi
 630:./FWLIB/src/stm32f4xx_spi.c ****   }
 631:./FWLIB/src/stm32f4xx_spi.c **** }
 654              		.loc 1 631 0
 655 0012 7047     		bx	lr
 656              	.L49:
 624:./FWLIB/src/stm32f4xx_spi.c ****   }
 657              		.loc 1 624 0
 658 0014 0388     		ldrh	r3, [r0]
 659 0016 43F48043 		orr	r3, r3, #16384
 660 001a 0380     		strh	r3, [r0]	@ movhi
 661 001c 7047     		bx	lr
 662              		.cfi_endproc
 663              	.LFE120:
 665              		.section	.text.SPI_NSSInternalSoftwareConfig,"ax",%progbits
 666              		.align	1
 667              		.global	SPI_NSSInternalSoftwareConfig
 668              		.syntax unified
 669              		.thumb
 670              		.thumb_func
 671              		.fpu fpv4-sp-d16
 673              	SPI_NSSInternalSoftwareConfig:
 674              	.LFB121:
 632:./FWLIB/src/stm32f4xx_spi.c **** 
ARM GAS  /tmp/ccTShhsc.s 			page 24


 633:./FWLIB/src/stm32f4xx_spi.c **** /**
 634:./FWLIB/src/stm32f4xx_spi.c ****   * @brief  Configures internally by software the NSS pin for the selected SPI.
 635:./FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
 636:./FWLIB/src/stm32f4xx_spi.c ****   * @param  SPI_NSSInternalSoft: specifies the SPI NSS internal state.
 637:./FWLIB/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
 638:./FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_NSSInternalSoft_Set: Set NSS pin internally
 639:./FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_NSSInternalSoft_Reset: Reset NSS pin internally
 640:./FWLIB/src/stm32f4xx_spi.c ****   * @retval None
 641:./FWLIB/src/stm32f4xx_spi.c ****   */
 642:./FWLIB/src/stm32f4xx_spi.c **** void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
 643:./FWLIB/src/stm32f4xx_spi.c **** {
 675              		.loc 1 643 0
 676              		.cfi_startproc
 677              		@ args = 0, pretend = 0, frame = 0
 678              		@ frame_needed = 0, uses_anonymous_args = 0
 679              		@ link register save eliminated.
 680              	.LVL74:
 644:./FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
 645:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 646:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
 647:./FWLIB/src/stm32f4xx_spi.c ****   if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 681              		.loc 1 647 0
 682 0000 4FF6FF63 		movw	r3, #65279
 683 0004 9942     		cmp	r1, r3
 684 0006 04D0     		beq	.L51
 648:./FWLIB/src/stm32f4xx_spi.c ****   {
 649:./FWLIB/src/stm32f4xx_spi.c ****     /* Set NSS pin internally by software */
 650:./FWLIB/src/stm32f4xx_spi.c ****     SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 685              		.loc 1 650 0
 686 0008 0388     		ldrh	r3, [r0]
 687 000a 43F48073 		orr	r3, r3, #256
 688 000e 0380     		strh	r3, [r0]	@ movhi
 689 0010 7047     		bx	lr
 690              	.L51:
 651:./FWLIB/src/stm32f4xx_spi.c ****   }
 652:./FWLIB/src/stm32f4xx_spi.c ****   else
 653:./FWLIB/src/stm32f4xx_spi.c ****   {
 654:./FWLIB/src/stm32f4xx_spi.c ****     /* Reset NSS pin internally by software */
 655:./FWLIB/src/stm32f4xx_spi.c ****     SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 691              		.loc 1 655 0
 692 0012 0388     		ldrh	r3, [r0]
 693 0014 9BB2     		uxth	r3, r3
 694 0016 23F48073 		bic	r3, r3, #256
 695 001a 9BB2     		uxth	r3, r3
 696 001c 0380     		strh	r3, [r0]	@ movhi
 656:./FWLIB/src/stm32f4xx_spi.c ****   }
 657:./FWLIB/src/stm32f4xx_spi.c **** }
 697              		.loc 1 657 0
 698 001e 7047     		bx	lr
 699              		.cfi_endproc
 700              	.LFE121:
 702              		.section	.text.SPI_SSOutputCmd,"ax",%progbits
 703              		.align	1
 704              		.global	SPI_SSOutputCmd
 705              		.syntax unified
 706              		.thumb
 707              		.thumb_func
ARM GAS  /tmp/ccTShhsc.s 			page 25


 708              		.fpu fpv4-sp-d16
 710              	SPI_SSOutputCmd:
 711              	.LFB122:
 658:./FWLIB/src/stm32f4xx_spi.c **** 
 659:./FWLIB/src/stm32f4xx_spi.c **** /**
 660:./FWLIB/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the SS output for the selected SPI.
 661:./FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
 662:./FWLIB/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the SPIx SS output. 
 663:./FWLIB/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 664:./FWLIB/src/stm32f4xx_spi.c ****   * @retval None
 665:./FWLIB/src/stm32f4xx_spi.c ****   */
 666:./FWLIB/src/stm32f4xx_spi.c **** void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 667:./FWLIB/src/stm32f4xx_spi.c **** {
 712              		.loc 1 667 0
 713              		.cfi_startproc
 714              		@ args = 0, pretend = 0, frame = 0
 715              		@ frame_needed = 0, uses_anonymous_args = 0
 716              		@ link register save eliminated.
 717              	.LVL75:
 668:./FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
 669:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 670:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 671:./FWLIB/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 718              		.loc 1 671 0
 719 0000 31B9     		cbnz	r1, .L56
 672:./FWLIB/src/stm32f4xx_spi.c ****   {
 673:./FWLIB/src/stm32f4xx_spi.c ****     /* Enable the selected SPI SS output */
 674:./FWLIB/src/stm32f4xx_spi.c ****     SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 675:./FWLIB/src/stm32f4xx_spi.c ****   }
 676:./FWLIB/src/stm32f4xx_spi.c ****   else
 677:./FWLIB/src/stm32f4xx_spi.c ****   {
 678:./FWLIB/src/stm32f4xx_spi.c ****     /* Disable the selected SPI SS output */
 679:./FWLIB/src/stm32f4xx_spi.c ****     SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 720              		.loc 1 679 0
 721 0002 8388     		ldrh	r3, [r0, #4]
 722 0004 9BB2     		uxth	r3, r3
 723 0006 23F00403 		bic	r3, r3, #4
 724 000a 9BB2     		uxth	r3, r3
 725 000c 8380     		strh	r3, [r0, #4]	@ movhi
 680:./FWLIB/src/stm32f4xx_spi.c ****   }
 681:./FWLIB/src/stm32f4xx_spi.c **** }
 726              		.loc 1 681 0
 727 000e 7047     		bx	lr
 728              	.L56:
 674:./FWLIB/src/stm32f4xx_spi.c ****   }
 729              		.loc 1 674 0
 730 0010 8388     		ldrh	r3, [r0, #4]
 731 0012 43F00403 		orr	r3, r3, #4
 732 0016 8380     		strh	r3, [r0, #4]	@ movhi
 733 0018 7047     		bx	lr
 734              		.cfi_endproc
 735              	.LFE122:
 737              		.section	.text.SPI_TIModeCmd,"ax",%progbits
 738              		.align	1
 739              		.global	SPI_TIModeCmd
 740              		.syntax unified
 741              		.thumb
ARM GAS  /tmp/ccTShhsc.s 			page 26


 742              		.thumb_func
 743              		.fpu fpv4-sp-d16
 745              	SPI_TIModeCmd:
 746              	.LFB123:
 682:./FWLIB/src/stm32f4xx_spi.c **** 
 683:./FWLIB/src/stm32f4xx_spi.c **** /**
 684:./FWLIB/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the SPIx/I2Sx DMA interface.
 685:./FWLIB/src/stm32f4xx_spi.c ****   *   
 686:./FWLIB/src/stm32f4xx_spi.c ****   * @note   This function can be called only after the SPI_Init() function has 
 687:./FWLIB/src/stm32f4xx_spi.c ****   *         been called. 
 688:./FWLIB/src/stm32f4xx_spi.c ****   * @note   When TI mode is selected, the control bits SSM, SSI, CPOL and CPHA 
 689:./FWLIB/src/stm32f4xx_spi.c ****   *         are not taken into consideration and are configured by hardware
 690:./FWLIB/src/stm32f4xx_spi.c ****   *         respectively to the TI mode requirements.  
 691:./FWLIB/src/stm32f4xx_spi.c ****   * 
 692:./FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 
 693:./FWLIB/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the selected SPI TI communication mode.
 694:./FWLIB/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 695:./FWLIB/src/stm32f4xx_spi.c ****   * @retval None
 696:./FWLIB/src/stm32f4xx_spi.c ****   */
 697:./FWLIB/src/stm32f4xx_spi.c **** void SPI_TIModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 698:./FWLIB/src/stm32f4xx_spi.c **** {
 747              		.loc 1 698 0
 748              		.cfi_startproc
 749              		@ args = 0, pretend = 0, frame = 0
 750              		@ frame_needed = 0, uses_anonymous_args = 0
 751              		@ link register save eliminated.
 752              	.LVL76:
 699:./FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
 700:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 701:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 702:./FWLIB/src/stm32f4xx_spi.c **** 
 703:./FWLIB/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 753              		.loc 1 703 0
 754 0000 31B9     		cbnz	r1, .L60
 704:./FWLIB/src/stm32f4xx_spi.c ****   {
 705:./FWLIB/src/stm32f4xx_spi.c ****     /* Enable the TI mode for the selected SPI peripheral */
 706:./FWLIB/src/stm32f4xx_spi.c ****     SPIx->CR2 |= SPI_CR2_FRF;
 707:./FWLIB/src/stm32f4xx_spi.c ****   }
 708:./FWLIB/src/stm32f4xx_spi.c ****   else
 709:./FWLIB/src/stm32f4xx_spi.c ****   {
 710:./FWLIB/src/stm32f4xx_spi.c ****     /* Disable the TI mode for the selected SPI peripheral */
 711:./FWLIB/src/stm32f4xx_spi.c ****     SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
 755              		.loc 1 711 0
 756 0002 8388     		ldrh	r3, [r0, #4]
 757 0004 9BB2     		uxth	r3, r3
 758 0006 23F01003 		bic	r3, r3, #16
 759 000a 9BB2     		uxth	r3, r3
 760 000c 8380     		strh	r3, [r0, #4]	@ movhi
 712:./FWLIB/src/stm32f4xx_spi.c ****   }
 713:./FWLIB/src/stm32f4xx_spi.c **** }
 761              		.loc 1 713 0
 762 000e 7047     		bx	lr
 763              	.L60:
 706:./FWLIB/src/stm32f4xx_spi.c ****   }
 764              		.loc 1 706 0
 765 0010 8388     		ldrh	r3, [r0, #4]
 766 0012 43F01003 		orr	r3, r3, #16
ARM GAS  /tmp/ccTShhsc.s 			page 27


 767 0016 8380     		strh	r3, [r0, #4]	@ movhi
 768 0018 7047     		bx	lr
 769              		.cfi_endproc
 770              	.LFE123:
 772              		.section	.text.I2S_FullDuplexConfig,"ax",%progbits
 773              		.align	1
 774              		.global	I2S_FullDuplexConfig
 775              		.syntax unified
 776              		.thumb
 777              		.thumb_func
 778              		.fpu fpv4-sp-d16
 780              	I2S_FullDuplexConfig:
 781              	.LFB124:
 714:./FWLIB/src/stm32f4xx_spi.c **** 
 715:./FWLIB/src/stm32f4xx_spi.c **** /**
 716:./FWLIB/src/stm32f4xx_spi.c ****   * @brief  Configures the full duplex mode for the I2Sx peripheral using its
 717:./FWLIB/src/stm32f4xx_spi.c ****   *         extension I2Sxext according to the specified parameters in the 
 718:./FWLIB/src/stm32f4xx_spi.c ****   *         I2S_InitStruct.
 719:./FWLIB/src/stm32f4xx_spi.c ****   * @param  I2Sxext: where x can be  2 or 3 to select the I2S peripheral extension block.
 720:./FWLIB/src/stm32f4xx_spi.c ****   * @param  I2S_InitStruct: pointer to an I2S_InitTypeDef structure that
 721:./FWLIB/src/stm32f4xx_spi.c ****   *         contains the configuration information for the specified I2S peripheral
 722:./FWLIB/src/stm32f4xx_spi.c ****   *         extension.
 723:./FWLIB/src/stm32f4xx_spi.c ****   * 
 724:./FWLIB/src/stm32f4xx_spi.c ****   * @note   The structure pointed by I2S_InitStruct parameter should be the same
 725:./FWLIB/src/stm32f4xx_spi.c ****   *         used for the master I2S peripheral. In this case, if the master is 
 726:./FWLIB/src/stm32f4xx_spi.c ****   *         configured as transmitter, the slave will be receiver and vice versa.
 727:./FWLIB/src/stm32f4xx_spi.c ****   *         Or you can force a different mode by modifying the field I2S_Mode to the
 728:./FWLIB/src/stm32f4xx_spi.c ****   *         value I2S_SlaveRx or I2S_SlaveTx indepedently of the master configuration.    
 729:./FWLIB/src/stm32f4xx_spi.c ****   *         
 730:./FWLIB/src/stm32f4xx_spi.c ****   * @note   The I2S full duplex extension can be configured in slave mode only.    
 731:./FWLIB/src/stm32f4xx_spi.c ****   *  
 732:./FWLIB/src/stm32f4xx_spi.c ****   * @retval None
 733:./FWLIB/src/stm32f4xx_spi.c ****   */
 734:./FWLIB/src/stm32f4xx_spi.c **** void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
 735:./FWLIB/src/stm32f4xx_spi.c **** {
 782              		.loc 1 735 0
 783              		.cfi_startproc
 784              		@ args = 0, pretend = 0, frame = 0
 785              		@ frame_needed = 0, uses_anonymous_args = 0
 786              		@ link register save eliminated.
 787              	.LVL77:
 788 0000 30B4     		push	{r4, r5}
 789              	.LCFI5:
 790              		.cfi_def_cfa_offset 8
 791              		.cfi_offset 4, -8
 792              		.cfi_offset 5, -4
 793              	.LVL78:
 736:./FWLIB/src/stm32f4xx_spi.c ****   uint16_t tmpreg = 0, tmp = 0;
 737:./FWLIB/src/stm32f4xx_spi.c ****   
 738:./FWLIB/src/stm32f4xx_spi.c ****   /* Check the I2S parameters */
 739:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_EXT_PERIPH(I2Sxext));
 740:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
 741:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
 742:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
 743:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  
 744:./FWLIB/src/stm32f4xx_spi.c **** 
 745:./FWLIB/src/stm32f4xx_spi.c **** /*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
ARM GAS  /tmp/ccTShhsc.s 			page 28


 746:./FWLIB/src/stm32f4xx_spi.c ****   /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
 747:./FWLIB/src/stm32f4xx_spi.c ****   I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 794              		.loc 1 747 0
 795 0002 838B     		ldrh	r3, [r0, #28]
 796 0004 9BB2     		uxth	r3, r3
 797 0006 23F47B63 		bic	r3, r3, #4016
 798 000a 23F00F03 		bic	r3, r3, #15
 799 000e 9BB2     		uxth	r3, r3
 800 0010 8383     		strh	r3, [r0, #28]	@ movhi
 748:./FWLIB/src/stm32f4xx_spi.c ****   I2Sxext->I2SPR = 0x0002;
 801              		.loc 1 748 0
 802 0012 0223     		movs	r3, #2
 803 0014 0384     		strh	r3, [r0, #32]	@ movhi
 749:./FWLIB/src/stm32f4xx_spi.c ****   
 750:./FWLIB/src/stm32f4xx_spi.c ****   /* Get the I2SCFGR register value */
 751:./FWLIB/src/stm32f4xx_spi.c ****   tmpreg = I2Sxext->I2SCFGR;
 804              		.loc 1 751 0
 805 0016 838B     		ldrh	r3, [r0, #28]
 806 0018 9AB2     		uxth	r2, r3
 807              	.LVL79:
 752:./FWLIB/src/stm32f4xx_spi.c ****   
 753:./FWLIB/src/stm32f4xx_spi.c ****   /* Get the mode to be configured for the extended I2S */
 754:./FWLIB/src/stm32f4xx_spi.c ****   if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_Slav
 808              		.loc 1 754 0
 809 001a 0B88     		ldrh	r3, [r1]
 810 001c B3F5007F 		cmp	r3, #512
 811 0020 10D0     		beq	.L63
 812              		.loc 1 754 0 is_stmt 0 discriminator 1
 813 0022 63B1     		cbz	r3, .L66
 755:./FWLIB/src/stm32f4xx_spi.c ****   {
 756:./FWLIB/src/stm32f4xx_spi.c ****     tmp = I2S_Mode_SlaveRx;
 757:./FWLIB/src/stm32f4xx_spi.c ****   }
 758:./FWLIB/src/stm32f4xx_spi.c ****   else
 759:./FWLIB/src/stm32f4xx_spi.c ****   {
 760:./FWLIB/src/stm32f4xx_spi.c ****     if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterRx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_Sl
 761:./FWLIB/src/stm32f4xx_spi.c ****     {
 762:./FWLIB/src/stm32f4xx_spi.c ****       tmp = I2S_Mode_SlaveTx;
 814              		.loc 1 762 0 is_stmt 1
 815 0024 0025     		movs	r5, #0
 816              	.L62:
 817              	.LVL80:
 763:./FWLIB/src/stm32f4xx_spi.c ****     }
 764:./FWLIB/src/stm32f4xx_spi.c ****   }
 765:./FWLIB/src/stm32f4xx_spi.c **** 
 766:./FWLIB/src/stm32f4xx_spi.c ****  
 767:./FWLIB/src/stm32f4xx_spi.c ****   /* Configure the I2S with the SPI_InitStruct values */
 768:./FWLIB/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 769:./FWLIB/src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 818              		.loc 1 769 0
 819 0026 4B88     		ldrh	r3, [r1, #2]
 820 0028 8C88     		ldrh	r4, [r1, #4]
 770:./FWLIB/src/stm32f4xx_spi.c ****                   (uint16_t)I2S_InitStruct->I2S_CPOL))));
 821              		.loc 1 770 0
 822 002a 8989     		ldrh	r1, [r1, #12]
 823              	.LVL81:
 769:./FWLIB/src/stm32f4xx_spi.c ****                   (uint16_t)I2S_InitStruct->I2S_CPOL))));
 824              		.loc 1 769 0
ARM GAS  /tmp/ccTShhsc.s 			page 29


 825 002c 2143     		orrs	r1, r1, r4
 826 002e 0B43     		orrs	r3, r3, r1
 768:./FWLIB/src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 827              		.loc 1 768 0
 828 0030 2B43     		orrs	r3, r3, r5
 829 0032 1343     		orrs	r3, r3, r2
 830 0034 43F40063 		orr	r3, r3, #2048
 831              	.LVL82:
 771:./FWLIB/src/stm32f4xx_spi.c ****  
 772:./FWLIB/src/stm32f4xx_spi.c ****   /* Write to SPIx I2SCFGR */  
 773:./FWLIB/src/stm32f4xx_spi.c ****   I2Sxext->I2SCFGR = tmpreg;
 832              		.loc 1 773 0
 833 0038 8383     		strh	r3, [r0, #28]	@ movhi
 774:./FWLIB/src/stm32f4xx_spi.c **** }
 834              		.loc 1 774 0
 835 003a 30BC     		pop	{r4, r5}
 836              	.LCFI6:
 837              		.cfi_remember_state
 838              		.cfi_restore 5
 839              		.cfi_restore 4
 840              		.cfi_def_cfa_offset 0
 841              	.LVL83:
 842 003c 7047     		bx	lr
 843              	.LVL84:
 844              	.L66:
 845              	.LCFI7:
 846              		.cfi_restore_state
 756:./FWLIB/src/stm32f4xx_spi.c ****   }
 847              		.loc 1 756 0
 848 003e 4FF48075 		mov	r5, #256
 849 0042 F0E7     		b	.L62
 850              	.L63:
 851 0044 4FF48075 		mov	r5, #256
 852 0048 EDE7     		b	.L62
 853              		.cfi_endproc
 854              	.LFE124:
 856              		.section	.text.SPI_I2S_ReceiveData,"ax",%progbits
 857              		.align	1
 858              		.global	SPI_I2S_ReceiveData
 859              		.syntax unified
 860              		.thumb
 861              		.thumb_func
 862              		.fpu fpv4-sp-d16
 864              	SPI_I2S_ReceiveData:
 865              	.LFB125:
 775:./FWLIB/src/stm32f4xx_spi.c **** 
 776:./FWLIB/src/stm32f4xx_spi.c **** /**
 777:./FWLIB/src/stm32f4xx_spi.c ****   * @}
 778:./FWLIB/src/stm32f4xx_spi.c ****   */
 779:./FWLIB/src/stm32f4xx_spi.c **** 
 780:./FWLIB/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group2 Data transfers functions
 781:./FWLIB/src/stm32f4xx_spi.c ****  *  @brief   Data transfers functions
 782:./FWLIB/src/stm32f4xx_spi.c ****  *
 783:./FWLIB/src/stm32f4xx_spi.c **** @verbatim   
 784:./FWLIB/src/stm32f4xx_spi.c ****  ===============================================================================
 785:./FWLIB/src/stm32f4xx_spi.c ****                       ##### Data transfers functions #####
 786:./FWLIB/src/stm32f4xx_spi.c ****  ===============================================================================  
ARM GAS  /tmp/ccTShhsc.s 			page 30


 787:./FWLIB/src/stm32f4xx_spi.c **** 
 788:./FWLIB/src/stm32f4xx_spi.c ****  [..] This section provides a set of functions allowing to manage the SPI data 
 789:./FWLIB/src/stm32f4xx_spi.c ****       transfers. In reception, data are received and then stored into an internal 
 790:./FWLIB/src/stm32f4xx_spi.c ****       Rx buffer while. In transmission, data are first stored into an internal Tx 
 791:./FWLIB/src/stm32f4xx_spi.c ****       buffer before being transmitted.
 792:./FWLIB/src/stm32f4xx_spi.c **** 
 793:./FWLIB/src/stm32f4xx_spi.c ****  [..] The read access of the SPI_DR register can be done using the SPI_I2S_ReceiveData()
 794:./FWLIB/src/stm32f4xx_spi.c ****       function and returns the Rx buffered value. Whereas a write access to the SPI_DR 
 795:./FWLIB/src/stm32f4xx_spi.c ****       can be done using SPI_I2S_SendData() function and stores the written data into 
 796:./FWLIB/src/stm32f4xx_spi.c ****       Tx buffer.
 797:./FWLIB/src/stm32f4xx_spi.c **** 
 798:./FWLIB/src/stm32f4xx_spi.c **** @endverbatim
 799:./FWLIB/src/stm32f4xx_spi.c ****   * @{
 800:./FWLIB/src/stm32f4xx_spi.c ****   */
 801:./FWLIB/src/stm32f4xx_spi.c **** 
 802:./FWLIB/src/stm32f4xx_spi.c **** /**
 803:./FWLIB/src/stm32f4xx_spi.c ****   * @brief  Returns the most recent received data by the SPIx/I2Sx peripheral. 
 804:./FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
 805:./FWLIB/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
 806:./FWLIB/src/stm32f4xx_spi.c ****   * @retval The value of the received data.
 807:./FWLIB/src/stm32f4xx_spi.c ****   */
 808:./FWLIB/src/stm32f4xx_spi.c **** uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
 809:./FWLIB/src/stm32f4xx_spi.c **** {
 866              		.loc 1 809 0
 867              		.cfi_startproc
 868              		@ args = 0, pretend = 0, frame = 0
 869              		@ frame_needed = 0, uses_anonymous_args = 0
 870              		@ link register save eliminated.
 871              	.LVL85:
 810:./FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
 811:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 812:./FWLIB/src/stm32f4xx_spi.c ****   
 813:./FWLIB/src/stm32f4xx_spi.c ****   /* Return the data in the DR register */
 814:./FWLIB/src/stm32f4xx_spi.c ****   return SPIx->DR;
 872              		.loc 1 814 0
 873 0000 8089     		ldrh	r0, [r0, #12]
 874              	.LVL86:
 815:./FWLIB/src/stm32f4xx_spi.c **** }
 875              		.loc 1 815 0
 876 0002 7047     		bx	lr
 877              		.cfi_endproc
 878              	.LFE125:
 880              		.section	.text.SPI_I2S_SendData,"ax",%progbits
 881              		.align	1
 882              		.global	SPI_I2S_SendData
 883              		.syntax unified
 884              		.thumb
 885              		.thumb_func
 886              		.fpu fpv4-sp-d16
 888              	SPI_I2S_SendData:
 889              	.LFB126:
 816:./FWLIB/src/stm32f4xx_spi.c **** 
 817:./FWLIB/src/stm32f4xx_spi.c **** /**
 818:./FWLIB/src/stm32f4xx_spi.c ****   * @brief  Transmits a Data through the SPIx/I2Sx peripheral.
 819:./FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
 820:./FWLIB/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
 821:./FWLIB/src/stm32f4xx_spi.c ****   * @param  Data: Data to be transmitted.
ARM GAS  /tmp/ccTShhsc.s 			page 31


 822:./FWLIB/src/stm32f4xx_spi.c ****   * @retval None
 823:./FWLIB/src/stm32f4xx_spi.c ****   */
 824:./FWLIB/src/stm32f4xx_spi.c **** void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
 825:./FWLIB/src/stm32f4xx_spi.c **** {
 890              		.loc 1 825 0
 891              		.cfi_startproc
 892              		@ args = 0, pretend = 0, frame = 0
 893              		@ frame_needed = 0, uses_anonymous_args = 0
 894              		@ link register save eliminated.
 895              	.LVL87:
 826:./FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
 827:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 828:./FWLIB/src/stm32f4xx_spi.c ****   
 829:./FWLIB/src/stm32f4xx_spi.c ****   /* Write in the DR register the data to be sent */
 830:./FWLIB/src/stm32f4xx_spi.c ****   SPIx->DR = Data;
 896              		.loc 1 830 0
 897 0000 8181     		strh	r1, [r0, #12]	@ movhi
 831:./FWLIB/src/stm32f4xx_spi.c **** }
 898              		.loc 1 831 0
 899 0002 7047     		bx	lr
 900              		.cfi_endproc
 901              	.LFE126:
 903              		.section	.text.SPI_CalculateCRC,"ax",%progbits
 904              		.align	1
 905              		.global	SPI_CalculateCRC
 906              		.syntax unified
 907              		.thumb
 908              		.thumb_func
 909              		.fpu fpv4-sp-d16
 911              	SPI_CalculateCRC:
 912              	.LFB127:
 832:./FWLIB/src/stm32f4xx_spi.c **** 
 833:./FWLIB/src/stm32f4xx_spi.c **** /**
 834:./FWLIB/src/stm32f4xx_spi.c ****   * @}
 835:./FWLIB/src/stm32f4xx_spi.c ****   */
 836:./FWLIB/src/stm32f4xx_spi.c **** 
 837:./FWLIB/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group3 Hardware CRC Calculation functions
 838:./FWLIB/src/stm32f4xx_spi.c ****  *  @brief   Hardware CRC Calculation functions
 839:./FWLIB/src/stm32f4xx_spi.c ****  *
 840:./FWLIB/src/stm32f4xx_spi.c **** @verbatim   
 841:./FWLIB/src/stm32f4xx_spi.c ****  ===============================================================================
 842:./FWLIB/src/stm32f4xx_spi.c ****                  ##### Hardware CRC Calculation functions #####
 843:./FWLIB/src/stm32f4xx_spi.c ****  ===============================================================================  
 844:./FWLIB/src/stm32f4xx_spi.c **** 
 845:./FWLIB/src/stm32f4xx_spi.c ****  [..] This section provides a set of functions allowing to manage the SPI CRC hardware 
 846:./FWLIB/src/stm32f4xx_spi.c ****       calculation
 847:./FWLIB/src/stm32f4xx_spi.c **** 
 848:./FWLIB/src/stm32f4xx_spi.c ****  [..] SPI communication using CRC is possible through the following procedure:
 849:./FWLIB/src/stm32f4xx_spi.c ****    (#) Program the Data direction, Polarity, Phase, First Data, Baud Rate Prescaler, 
 850:./FWLIB/src/stm32f4xx_spi.c ****        Slave Management, Peripheral Mode and CRC Polynomial values using the SPI_Init()
 851:./FWLIB/src/stm32f4xx_spi.c ****        function.
 852:./FWLIB/src/stm32f4xx_spi.c ****    (#) Enable the CRC calculation using the SPI_CalculateCRC() function.
 853:./FWLIB/src/stm32f4xx_spi.c ****    (#) Enable the SPI using the SPI_Cmd() function
 854:./FWLIB/src/stm32f4xx_spi.c ****    (#) Before writing the last data to the TX buffer, set the CRCNext bit using the 
 855:./FWLIB/src/stm32f4xx_spi.c ****        SPI_TransmitCRC() function to indicate that after transmission of the last 
 856:./FWLIB/src/stm32f4xx_spi.c ****        data, the CRC should be transmitted.
 857:./FWLIB/src/stm32f4xx_spi.c ****    (#) After transmitting the last data, the SPI transmits the CRC. The SPI_CR1_CRCNEXT
ARM GAS  /tmp/ccTShhsc.s 			page 32


 858:./FWLIB/src/stm32f4xx_spi.c ****         bit is reset. The CRC is also received and compared against the SPI_RXCRCR 
 859:./FWLIB/src/stm32f4xx_spi.c ****         value. 
 860:./FWLIB/src/stm32f4xx_spi.c ****         If the value does not match, the SPI_FLAG_CRCERR flag is set and an interrupt
 861:./FWLIB/src/stm32f4xx_spi.c ****         can be generated when the SPI_I2S_IT_ERR interrupt is enabled.
 862:./FWLIB/src/stm32f4xx_spi.c **** 
 863:./FWLIB/src/stm32f4xx_spi.c ****  [..]
 864:./FWLIB/src/stm32f4xx_spi.c ****    (@) It is advised not to read the calculated CRC values during the communication.
 865:./FWLIB/src/stm32f4xx_spi.c **** 
 866:./FWLIB/src/stm32f4xx_spi.c ****    (@) When the SPI is in slave mode, be careful to enable CRC calculation only 
 867:./FWLIB/src/stm32f4xx_spi.c ****        when the clock is stable, that is, when the clock is in the steady state. 
 868:./FWLIB/src/stm32f4xx_spi.c ****        If not, a wrong CRC calculation may be done. In fact, the CRC is sensitive 
 869:./FWLIB/src/stm32f4xx_spi.c ****        to the SCK slave input clock as soon as CRCEN is set, and this, whatever 
 870:./FWLIB/src/stm32f4xx_spi.c ****        the value of the SPE bit.
 871:./FWLIB/src/stm32f4xx_spi.c **** 
 872:./FWLIB/src/stm32f4xx_spi.c ****    (@) With high bitrate frequencies, be careful when transmitting the CRC.
 873:./FWLIB/src/stm32f4xx_spi.c ****        As the number of used CPU cycles has to be as low as possible in the CRC 
 874:./FWLIB/src/stm32f4xx_spi.c ****        transfer phase, it is forbidden to call software functions in the CRC 
 875:./FWLIB/src/stm32f4xx_spi.c ****        transmission sequence to avoid errors in the last data and CRC reception. 
 876:./FWLIB/src/stm32f4xx_spi.c ****        In fact, CRCNEXT bit has to be written before the end of the transmission/reception 
 877:./FWLIB/src/stm32f4xx_spi.c ****        of the last data.
 878:./FWLIB/src/stm32f4xx_spi.c **** 
 879:./FWLIB/src/stm32f4xx_spi.c ****    (@) For high bit rate frequencies, it is advised to use the DMA mode to avoid the
 880:./FWLIB/src/stm32f4xx_spi.c ****        degradation of the SPI speed performance due to CPU accesses impacting the 
 881:./FWLIB/src/stm32f4xx_spi.c ****        SPI bandwidth.
 882:./FWLIB/src/stm32f4xx_spi.c **** 
 883:./FWLIB/src/stm32f4xx_spi.c ****    (@) When the STM32F4xx is configured as slave and the NSS hardware mode is 
 884:./FWLIB/src/stm32f4xx_spi.c ****        used, the NSS pin needs to be kept low between the data phase and the CRC 
 885:./FWLIB/src/stm32f4xx_spi.c ****        phase.
 886:./FWLIB/src/stm32f4xx_spi.c **** 
 887:./FWLIB/src/stm32f4xx_spi.c ****    (@) When the SPI is configured in slave mode with the CRC feature enabled, CRC
 888:./FWLIB/src/stm32f4xx_spi.c ****        calculation takes place even if a high level is applied on the NSS pin. 
 889:./FWLIB/src/stm32f4xx_spi.c ****        This may happen for example in case of a multi-slave environment where the 
 890:./FWLIB/src/stm32f4xx_spi.c ****        communication master addresses slaves alternately.
 891:./FWLIB/src/stm32f4xx_spi.c **** 
 892:./FWLIB/src/stm32f4xx_spi.c ****    (@) Between a slave de-selection (high level on NSS) and a new slave selection 
 893:./FWLIB/src/stm32f4xx_spi.c ****        (low level on NSS), the CRC value should be cleared on both master and slave
 894:./FWLIB/src/stm32f4xx_spi.c ****        sides in order to resynchronize the master and slave for their respective 
 895:./FWLIB/src/stm32f4xx_spi.c ****        CRC calculation.
 896:./FWLIB/src/stm32f4xx_spi.c **** 
 897:./FWLIB/src/stm32f4xx_spi.c ****    (@) To clear the CRC, follow the procedure below:
 898:./FWLIB/src/stm32f4xx_spi.c ****        (#@) Disable SPI using the SPI_Cmd() function
 899:./FWLIB/src/stm32f4xx_spi.c ****        (#@) Disable the CRC calculation using the SPI_CalculateCRC() function.
 900:./FWLIB/src/stm32f4xx_spi.c ****        (#@) Enable the CRC calculation using the SPI_CalculateCRC() function.
 901:./FWLIB/src/stm32f4xx_spi.c ****        (#@) Enable SPI using the SPI_Cmd() function.
 902:./FWLIB/src/stm32f4xx_spi.c **** 
 903:./FWLIB/src/stm32f4xx_spi.c **** @endverbatim
 904:./FWLIB/src/stm32f4xx_spi.c ****   * @{
 905:./FWLIB/src/stm32f4xx_spi.c ****   */
 906:./FWLIB/src/stm32f4xx_spi.c **** 
 907:./FWLIB/src/stm32f4xx_spi.c **** /**
 908:./FWLIB/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the CRC value calculation of the transferred bytes.
 909:./FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
 910:./FWLIB/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the SPIx CRC value calculation.
 911:./FWLIB/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 912:./FWLIB/src/stm32f4xx_spi.c ****   * @retval None
 913:./FWLIB/src/stm32f4xx_spi.c ****   */
 914:./FWLIB/src/stm32f4xx_spi.c **** void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
ARM GAS  /tmp/ccTShhsc.s 			page 33


 915:./FWLIB/src/stm32f4xx_spi.c **** {
 913              		.loc 1 915 0
 914              		.cfi_startproc
 915              		@ args = 0, pretend = 0, frame = 0
 916              		@ frame_needed = 0, uses_anonymous_args = 0
 917              		@ link register save eliminated.
 918              	.LVL88:
 916:./FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
 917:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 918:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 919:./FWLIB/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 919              		.loc 1 919 0
 920 0000 31B9     		cbnz	r1, .L72
 920:./FWLIB/src/stm32f4xx_spi.c ****   {
 921:./FWLIB/src/stm32f4xx_spi.c ****     /* Enable the selected SPI CRC calculation */
 922:./FWLIB/src/stm32f4xx_spi.c ****     SPIx->CR1 |= SPI_CR1_CRCEN;
 923:./FWLIB/src/stm32f4xx_spi.c ****   }
 924:./FWLIB/src/stm32f4xx_spi.c ****   else
 925:./FWLIB/src/stm32f4xx_spi.c ****   {
 926:./FWLIB/src/stm32f4xx_spi.c ****     /* Disable the selected SPI CRC calculation */
 927:./FWLIB/src/stm32f4xx_spi.c ****     SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 921              		.loc 1 927 0
 922 0002 0388     		ldrh	r3, [r0]
 923 0004 9BB2     		uxth	r3, r3
 924 0006 23F40053 		bic	r3, r3, #8192
 925 000a 9BB2     		uxth	r3, r3
 926 000c 0380     		strh	r3, [r0]	@ movhi
 928:./FWLIB/src/stm32f4xx_spi.c ****   }
 929:./FWLIB/src/stm32f4xx_spi.c **** }
 927              		.loc 1 929 0
 928 000e 7047     		bx	lr
 929              	.L72:
 922:./FWLIB/src/stm32f4xx_spi.c ****   }
 930              		.loc 1 922 0
 931 0010 0388     		ldrh	r3, [r0]
 932 0012 43F40053 		orr	r3, r3, #8192
 933 0016 0380     		strh	r3, [r0]	@ movhi
 934 0018 7047     		bx	lr
 935              		.cfi_endproc
 936              	.LFE127:
 938              		.section	.text.SPI_TransmitCRC,"ax",%progbits
 939              		.align	1
 940              		.global	SPI_TransmitCRC
 941              		.syntax unified
 942              		.thumb
 943              		.thumb_func
 944              		.fpu fpv4-sp-d16
 946              	SPI_TransmitCRC:
 947              	.LFB128:
 930:./FWLIB/src/stm32f4xx_spi.c **** 
 931:./FWLIB/src/stm32f4xx_spi.c **** /**
 932:./FWLIB/src/stm32f4xx_spi.c ****   * @brief  Transmit the SPIx CRC value.
 933:./FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
 934:./FWLIB/src/stm32f4xx_spi.c ****   * @retval None
 935:./FWLIB/src/stm32f4xx_spi.c ****   */
 936:./FWLIB/src/stm32f4xx_spi.c **** void SPI_TransmitCRC(SPI_TypeDef* SPIx)
 937:./FWLIB/src/stm32f4xx_spi.c **** {
ARM GAS  /tmp/ccTShhsc.s 			page 34


 948              		.loc 1 937 0
 949              		.cfi_startproc
 950              		@ args = 0, pretend = 0, frame = 0
 951              		@ frame_needed = 0, uses_anonymous_args = 0
 952              		@ link register save eliminated.
 953              	.LVL89:
 938:./FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
 939:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 940:./FWLIB/src/stm32f4xx_spi.c ****   
 941:./FWLIB/src/stm32f4xx_spi.c ****   /* Enable the selected SPI CRC transmission */
 942:./FWLIB/src/stm32f4xx_spi.c ****   SPIx->CR1 |= SPI_CR1_CRCNEXT;
 954              		.loc 1 942 0
 955 0000 0388     		ldrh	r3, [r0]
 956 0002 43F48053 		orr	r3, r3, #4096
 957 0006 0380     		strh	r3, [r0]	@ movhi
 943:./FWLIB/src/stm32f4xx_spi.c **** }
 958              		.loc 1 943 0
 959 0008 7047     		bx	lr
 960              		.cfi_endproc
 961              	.LFE128:
 963              		.section	.text.SPI_GetCRC,"ax",%progbits
 964              		.align	1
 965              		.global	SPI_GetCRC
 966              		.syntax unified
 967              		.thumb
 968              		.thumb_func
 969              		.fpu fpv4-sp-d16
 971              	SPI_GetCRC:
 972              	.LFB129:
 944:./FWLIB/src/stm32f4xx_spi.c **** 
 945:./FWLIB/src/stm32f4xx_spi.c **** /**
 946:./FWLIB/src/stm32f4xx_spi.c ****   * @brief  Returns the transmit or the receive CRC register value for the specified SPI.
 947:./FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
 948:./FWLIB/src/stm32f4xx_spi.c ****   * @param  SPI_CRC: specifies the CRC register to be read.
 949:./FWLIB/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
 950:./FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_CRC_Tx: Selects Tx CRC register
 951:./FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_CRC_Rx: Selects Rx CRC register
 952:./FWLIB/src/stm32f4xx_spi.c ****   * @retval The selected CRC register value..
 953:./FWLIB/src/stm32f4xx_spi.c ****   */
 954:./FWLIB/src/stm32f4xx_spi.c **** uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
 955:./FWLIB/src/stm32f4xx_spi.c **** {
 973              		.loc 1 955 0
 974              		.cfi_startproc
 975              		@ args = 0, pretend = 0, frame = 0
 976              		@ frame_needed = 0, uses_anonymous_args = 0
 977              		@ link register save eliminated.
 978              	.LVL90:
 956:./FWLIB/src/stm32f4xx_spi.c ****   uint16_t crcreg = 0;
 957:./FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
 958:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 959:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_CRC(SPI_CRC));
 960:./FWLIB/src/stm32f4xx_spi.c ****   if (SPI_CRC != SPI_CRC_Rx)
 979              		.loc 1 960 0
 980 0000 0129     		cmp	r1, #1
 981 0002 02D0     		beq	.L75
 961:./FWLIB/src/stm32f4xx_spi.c ****   {
 962:./FWLIB/src/stm32f4xx_spi.c ****     /* Get the Tx CRC register */
ARM GAS  /tmp/ccTShhsc.s 			page 35


 963:./FWLIB/src/stm32f4xx_spi.c ****     crcreg = SPIx->TXCRCR;
 982              		.loc 1 963 0
 983 0004 008B     		ldrh	r0, [r0, #24]
 984              	.LVL91:
 985 0006 80B2     		uxth	r0, r0
 986              	.LVL92:
 987 0008 7047     		bx	lr
 988              	.LVL93:
 989              	.L75:
 964:./FWLIB/src/stm32f4xx_spi.c ****   }
 965:./FWLIB/src/stm32f4xx_spi.c ****   else
 966:./FWLIB/src/stm32f4xx_spi.c ****   {
 967:./FWLIB/src/stm32f4xx_spi.c ****     /* Get the Rx CRC register */
 968:./FWLIB/src/stm32f4xx_spi.c ****     crcreg = SPIx->RXCRCR;
 990              		.loc 1 968 0
 991 000a 808A     		ldrh	r0, [r0, #20]
 992              	.LVL94:
 993 000c 80B2     		uxth	r0, r0
 994              	.LVL95:
 969:./FWLIB/src/stm32f4xx_spi.c ****   }
 970:./FWLIB/src/stm32f4xx_spi.c ****   /* Return the selected CRC register */
 971:./FWLIB/src/stm32f4xx_spi.c ****   return crcreg;
 972:./FWLIB/src/stm32f4xx_spi.c **** }
 995              		.loc 1 972 0
 996 000e 7047     		bx	lr
 997              		.cfi_endproc
 998              	.LFE129:
 1000              		.section	.text.SPI_GetCRCPolynomial,"ax",%progbits
 1001              		.align	1
 1002              		.global	SPI_GetCRCPolynomial
 1003              		.syntax unified
 1004              		.thumb
 1005              		.thumb_func
 1006              		.fpu fpv4-sp-d16
 1008              	SPI_GetCRCPolynomial:
 1009              	.LFB130:
 973:./FWLIB/src/stm32f4xx_spi.c **** 
 974:./FWLIB/src/stm32f4xx_spi.c **** /**
 975:./FWLIB/src/stm32f4xx_spi.c ****   * @brief  Returns the CRC Polynomial register value for the specified SPI.
 976:./FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
 977:./FWLIB/src/stm32f4xx_spi.c ****   * @retval The CRC Polynomial register value.
 978:./FWLIB/src/stm32f4xx_spi.c ****   */
 979:./FWLIB/src/stm32f4xx_spi.c **** uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
 980:./FWLIB/src/stm32f4xx_spi.c **** {
 1010              		.loc 1 980 0
 1011              		.cfi_startproc
 1012              		@ args = 0, pretend = 0, frame = 0
 1013              		@ frame_needed = 0, uses_anonymous_args = 0
 1014              		@ link register save eliminated.
 1015              	.LVL96:
 981:./FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
 982:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 983:./FWLIB/src/stm32f4xx_spi.c ****   
 984:./FWLIB/src/stm32f4xx_spi.c ****   /* Return the CRC polynomial register */
 985:./FWLIB/src/stm32f4xx_spi.c ****   return SPIx->CRCPR;
 1016              		.loc 1 985 0
 1017 0000 008A     		ldrh	r0, [r0, #16]
ARM GAS  /tmp/ccTShhsc.s 			page 36


 1018              	.LVL97:
 986:./FWLIB/src/stm32f4xx_spi.c **** }
 1019              		.loc 1 986 0
 1020 0002 7047     		bx	lr
 1021              		.cfi_endproc
 1022              	.LFE130:
 1024              		.section	.text.SPI_I2S_DMACmd,"ax",%progbits
 1025              		.align	1
 1026              		.global	SPI_I2S_DMACmd
 1027              		.syntax unified
 1028              		.thumb
 1029              		.thumb_func
 1030              		.fpu fpv4-sp-d16
 1032              	SPI_I2S_DMACmd:
 1033              	.LFB131:
 987:./FWLIB/src/stm32f4xx_spi.c **** 
 988:./FWLIB/src/stm32f4xx_spi.c **** /**
 989:./FWLIB/src/stm32f4xx_spi.c ****   * @}
 990:./FWLIB/src/stm32f4xx_spi.c ****   */
 991:./FWLIB/src/stm32f4xx_spi.c **** 
 992:./FWLIB/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group4 DMA transfers management functions
 993:./FWLIB/src/stm32f4xx_spi.c ****  *  @brief   DMA transfers management functions
 994:./FWLIB/src/stm32f4xx_spi.c ****   *
 995:./FWLIB/src/stm32f4xx_spi.c **** @verbatim   
 996:./FWLIB/src/stm32f4xx_spi.c ****  ===============================================================================
 997:./FWLIB/src/stm32f4xx_spi.c ****                    ##### DMA transfers management functions #####
 998:./FWLIB/src/stm32f4xx_spi.c ****  ===============================================================================  
 999:./FWLIB/src/stm32f4xx_spi.c **** 
1000:./FWLIB/src/stm32f4xx_spi.c **** @endverbatim
1001:./FWLIB/src/stm32f4xx_spi.c ****   * @{
1002:./FWLIB/src/stm32f4xx_spi.c ****   */
1003:./FWLIB/src/stm32f4xx_spi.c **** 
1004:./FWLIB/src/stm32f4xx_spi.c **** /**
1005:./FWLIB/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the SPIx/I2Sx DMA interface.
1006:./FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
1007:./FWLIB/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
1008:./FWLIB/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_DMAReq: specifies the SPI DMA transfer request to be enabled or disabled. 
1009:./FWLIB/src/stm32f4xx_spi.c ****   *          This parameter can be any combination of the following values:
1010:./FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_DMAReq_Tx: Tx buffer DMA transfer request
1011:./FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_DMAReq_Rx: Rx buffer DMA transfer request
1012:./FWLIB/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the selected SPI DMA transfer request.
1013:./FWLIB/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
1014:./FWLIB/src/stm32f4xx_spi.c ****   * @retval None
1015:./FWLIB/src/stm32f4xx_spi.c ****   */
1016:./FWLIB/src/stm32f4xx_spi.c **** void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
1017:./FWLIB/src/stm32f4xx_spi.c **** {
 1034              		.loc 1 1017 0
 1035              		.cfi_startproc
 1036              		@ args = 0, pretend = 0, frame = 0
 1037              		@ frame_needed = 0, uses_anonymous_args = 0
 1038              		@ link register save eliminated.
 1039              	.LVL98:
1018:./FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
1019:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1020:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1021:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
1022:./FWLIB/src/stm32f4xx_spi.c **** 
ARM GAS  /tmp/ccTShhsc.s 			page 37


1023:./FWLIB/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 1040              		.loc 1 1023 0
 1041 0000 22B9     		cbnz	r2, .L81
1024:./FWLIB/src/stm32f4xx_spi.c ****   {
1025:./FWLIB/src/stm32f4xx_spi.c ****     /* Enable the selected SPI DMA requests */
1026:./FWLIB/src/stm32f4xx_spi.c ****     SPIx->CR2 |= SPI_I2S_DMAReq;
1027:./FWLIB/src/stm32f4xx_spi.c ****   }
1028:./FWLIB/src/stm32f4xx_spi.c ****   else
1029:./FWLIB/src/stm32f4xx_spi.c ****   {
1030:./FWLIB/src/stm32f4xx_spi.c ****     /* Disable the selected SPI DMA requests */
1031:./FWLIB/src/stm32f4xx_spi.c ****     SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 1042              		.loc 1 1031 0
 1043 0002 8388     		ldrh	r3, [r0, #4]
 1044 0004 23EA0101 		bic	r1, r3, r1
 1045              	.LVL99:
 1046 0008 8180     		strh	r1, [r0, #4]	@ movhi
1032:./FWLIB/src/stm32f4xx_spi.c ****   }
1033:./FWLIB/src/stm32f4xx_spi.c **** }
 1047              		.loc 1 1033 0
 1048 000a 7047     		bx	lr
 1049              	.LVL100:
 1050              	.L81:
1026:./FWLIB/src/stm32f4xx_spi.c ****   }
 1051              		.loc 1 1026 0
 1052 000c 8388     		ldrh	r3, [r0, #4]
 1053 000e 1943     		orrs	r1, r1, r3
 1054              	.LVL101:
 1055 0010 8180     		strh	r1, [r0, #4]	@ movhi
 1056 0012 7047     		bx	lr
 1057              		.cfi_endproc
 1058              	.LFE131:
 1060              		.section	.text.SPI_I2S_ITConfig,"ax",%progbits
 1061              		.align	1
 1062              		.global	SPI_I2S_ITConfig
 1063              		.syntax unified
 1064              		.thumb
 1065              		.thumb_func
 1066              		.fpu fpv4-sp-d16
 1068              	SPI_I2S_ITConfig:
 1069              	.LFB132:
1034:./FWLIB/src/stm32f4xx_spi.c **** 
1035:./FWLIB/src/stm32f4xx_spi.c **** /**
1036:./FWLIB/src/stm32f4xx_spi.c ****   * @}
1037:./FWLIB/src/stm32f4xx_spi.c ****   */
1038:./FWLIB/src/stm32f4xx_spi.c **** 
1039:./FWLIB/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group5 Interrupts and flags management functions
1040:./FWLIB/src/stm32f4xx_spi.c ****  *  @brief   Interrupts and flags management functions
1041:./FWLIB/src/stm32f4xx_spi.c ****   *
1042:./FWLIB/src/stm32f4xx_spi.c **** @verbatim   
1043:./FWLIB/src/stm32f4xx_spi.c ****  ===============================================================================
1044:./FWLIB/src/stm32f4xx_spi.c ****             ##### Interrupts and flags management functions #####
1045:./FWLIB/src/stm32f4xx_spi.c ****  ===============================================================================  
1046:./FWLIB/src/stm32f4xx_spi.c ****  
1047:./FWLIB/src/stm32f4xx_spi.c ****  [..] This section provides a set of functions allowing to configure the SPI Interrupts 
1048:./FWLIB/src/stm32f4xx_spi.c ****       sources and check or clear the flags or pending bits status.
1049:./FWLIB/src/stm32f4xx_spi.c ****       The user should identify which mode will be used in his application to manage 
1050:./FWLIB/src/stm32f4xx_spi.c ****       the communication: Polling mode, Interrupt mode or DMA mode. 
ARM GAS  /tmp/ccTShhsc.s 			page 38


1051:./FWLIB/src/stm32f4xx_spi.c ****     
1052:./FWLIB/src/stm32f4xx_spi.c ****  *** Polling Mode ***
1053:./FWLIB/src/stm32f4xx_spi.c ****  ====================
1054:./FWLIB/src/stm32f4xx_spi.c **** [..] In Polling Mode, the SPI/I2S communication can be managed by 9 flags:
1055:./FWLIB/src/stm32f4xx_spi.c ****   (#) SPI_I2S_FLAG_TXE : to indicate the status of the transmit buffer register
1056:./FWLIB/src/stm32f4xx_spi.c ****   (#) SPI_I2S_FLAG_RXNE : to indicate the status of the receive buffer register
1057:./FWLIB/src/stm32f4xx_spi.c ****   (#) SPI_I2S_FLAG_BSY : to indicate the state of the communication layer of the SPI.
1058:./FWLIB/src/stm32f4xx_spi.c ****   (#) SPI_FLAG_CRCERR : to indicate if a CRC Calculation error occur              
1059:./FWLIB/src/stm32f4xx_spi.c ****   (#) SPI_FLAG_MODF : to indicate if a Mode Fault error occur
1060:./FWLIB/src/stm32f4xx_spi.c ****   (#) SPI_I2S_FLAG_OVR : to indicate if an Overrun error occur
1061:./FWLIB/src/stm32f4xx_spi.c ****   (#) I2S_FLAG_TIFRFE: to indicate a Frame Format error occurs.
1062:./FWLIB/src/stm32f4xx_spi.c ****   (#) I2S_FLAG_UDR: to indicate an Underrun error occurs.
1063:./FWLIB/src/stm32f4xx_spi.c ****   (#) I2S_FLAG_CHSIDE: to indicate Channel Side.
1064:./FWLIB/src/stm32f4xx_spi.c **** 
1065:./FWLIB/src/stm32f4xx_spi.c ****   (@) Do not use the BSY flag to handle each data transmission or reception. It is
1066:./FWLIB/src/stm32f4xx_spi.c ****       better to use the TXE and RXNE flags instead.
1067:./FWLIB/src/stm32f4xx_spi.c **** 
1068:./FWLIB/src/stm32f4xx_spi.c ****  [..] In this Mode it is advised to use the following functions:
1069:./FWLIB/src/stm32f4xx_spi.c ****    (+) FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG);
1070:./FWLIB/src/stm32f4xx_spi.c ****    (+) void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG);
1071:./FWLIB/src/stm32f4xx_spi.c **** 
1072:./FWLIB/src/stm32f4xx_spi.c ****  *** Interrupt Mode ***
1073:./FWLIB/src/stm32f4xx_spi.c ****  ======================
1074:./FWLIB/src/stm32f4xx_spi.c ****  [..] In Interrupt Mode, the SPI communication can be managed by 3 interrupt sources
1075:./FWLIB/src/stm32f4xx_spi.c ****       and 7 pending bits: 
1076:./FWLIB/src/stm32f4xx_spi.c ****    (+) Pending Bits:
1077:./FWLIB/src/stm32f4xx_spi.c ****        (##) SPI_I2S_IT_TXE : to indicate the status of the transmit buffer register
1078:./FWLIB/src/stm32f4xx_spi.c ****        (##) SPI_I2S_IT_RXNE : to indicate the status of the receive buffer register
1079:./FWLIB/src/stm32f4xx_spi.c ****        (##) SPI_IT_CRCERR : to indicate if a CRC Calculation error occur (available in SPI mode onl
1080:./FWLIB/src/stm32f4xx_spi.c ****        (##) SPI_IT_MODF : to indicate if a Mode Fault error occur (available in SPI mode only)
1081:./FWLIB/src/stm32f4xx_spi.c ****        (##) SPI_I2S_IT_OVR : to indicate if an Overrun error occur
1082:./FWLIB/src/stm32f4xx_spi.c ****        (##) I2S_IT_UDR : to indicate an Underrun Error occurs (available in I2S mode only).
1083:./FWLIB/src/stm32f4xx_spi.c ****        (##) I2S_FLAG_TIFRFE : to indicate a Frame Format error occurs (available in TI mode only).
1084:./FWLIB/src/stm32f4xx_spi.c **** 
1085:./FWLIB/src/stm32f4xx_spi.c ****    (+) Interrupt Source:
1086:./FWLIB/src/stm32f4xx_spi.c ****        (##) SPI_I2S_IT_TXE: specifies the interrupt source for the Tx buffer empty 
1087:./FWLIB/src/stm32f4xx_spi.c ****             interrupt.  
1088:./FWLIB/src/stm32f4xx_spi.c ****        (##) SPI_I2S_IT_RXNE : specifies the interrupt source for the Rx buffer not 
1089:./FWLIB/src/stm32f4xx_spi.c ****             empty interrupt.
1090:./FWLIB/src/stm32f4xx_spi.c ****        (##) SPI_I2S_IT_ERR : specifies the interrupt source for the errors interrupt.
1091:./FWLIB/src/stm32f4xx_spi.c **** 
1092:./FWLIB/src/stm32f4xx_spi.c ****  [..] In this Mode it is advised to use the following functions:
1093:./FWLIB/src/stm32f4xx_spi.c ****    (+) void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState);
1094:./FWLIB/src/stm32f4xx_spi.c ****    (+) ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT);
1095:./FWLIB/src/stm32f4xx_spi.c ****    (+) void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT);
1096:./FWLIB/src/stm32f4xx_spi.c **** 
1097:./FWLIB/src/stm32f4xx_spi.c ****  *** DMA Mode ***
1098:./FWLIB/src/stm32f4xx_spi.c ****  ================
1099:./FWLIB/src/stm32f4xx_spi.c ****  [..] In DMA Mode, the SPI communication can be managed by 2 DMA Channel requests:
1100:./FWLIB/src/stm32f4xx_spi.c ****    (#) SPI_I2S_DMAReq_Tx: specifies the Tx buffer DMA transfer request
1101:./FWLIB/src/stm32f4xx_spi.c ****    (#) SPI_I2S_DMAReq_Rx: specifies the Rx buffer DMA transfer request
1102:./FWLIB/src/stm32f4xx_spi.c **** 
1103:./FWLIB/src/stm32f4xx_spi.c ****  [..] In this Mode it is advised to use the following function:
1104:./FWLIB/src/stm32f4xx_spi.c ****    (+) void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState 
1105:./FWLIB/src/stm32f4xx_spi.c ****        NewState);
1106:./FWLIB/src/stm32f4xx_spi.c **** 
1107:./FWLIB/src/stm32f4xx_spi.c **** @endverbatim
ARM GAS  /tmp/ccTShhsc.s 			page 39


1108:./FWLIB/src/stm32f4xx_spi.c ****   * @{
1109:./FWLIB/src/stm32f4xx_spi.c ****   */
1110:./FWLIB/src/stm32f4xx_spi.c **** 
1111:./FWLIB/src/stm32f4xx_spi.c **** /**
1112:./FWLIB/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the specified SPI/I2S interrupts.
1113:./FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
1114:./FWLIB/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
1115:./FWLIB/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_IT: specifies the SPI interrupt source to be enabled or disabled. 
1116:./FWLIB/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
1117:./FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_TXE: Tx buffer empty interrupt mask
1118:./FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_RXNE: Rx buffer not empty interrupt mask
1119:./FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_ERR: Error interrupt mask
1120:./FWLIB/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the specified SPI interrupt.
1121:./FWLIB/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
1122:./FWLIB/src/stm32f4xx_spi.c ****   * @retval None
1123:./FWLIB/src/stm32f4xx_spi.c ****   */
1124:./FWLIB/src/stm32f4xx_spi.c **** void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
1125:./FWLIB/src/stm32f4xx_spi.c **** {
 1070              		.loc 1 1125 0
 1071              		.cfi_startproc
 1072              		@ args = 0, pretend = 0, frame = 0
 1073              		@ frame_needed = 0, uses_anonymous_args = 0
 1074              		@ link register save eliminated.
 1075              	.LVL102:
1126:./FWLIB/src/stm32f4xx_spi.c ****   uint16_t itpos = 0, itmask = 0 ;
1127:./FWLIB/src/stm32f4xx_spi.c ****   
1128:./FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
1129:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1130:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1131:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));
1132:./FWLIB/src/stm32f4xx_spi.c **** 
1133:./FWLIB/src/stm32f4xx_spi.c ****   /* Get the SPI IT index */
1134:./FWLIB/src/stm32f4xx_spi.c ****   itpos = SPI_I2S_IT >> 4;
 1076              		.loc 1 1134 0
 1077 0000 0B09     		lsrs	r3, r1, #4
 1078              	.LVL103:
1135:./FWLIB/src/stm32f4xx_spi.c **** 
1136:./FWLIB/src/stm32f4xx_spi.c ****   /* Set the IT mask */
1137:./FWLIB/src/stm32f4xx_spi.c ****   itmask = (uint16_t)1 << (uint16_t)itpos;
 1079              		.loc 1 1137 0
 1080 0002 0121     		movs	r1, #1
 1081              	.LVL104:
 1082 0004 9940     		lsls	r1, r1, r3
 1083 0006 89B2     		uxth	r1, r1
 1084              	.LVL105:
1138:./FWLIB/src/stm32f4xx_spi.c **** 
1139:./FWLIB/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 1085              		.loc 1 1139 0
 1086 0008 22B9     		cbnz	r2, .L85
1140:./FWLIB/src/stm32f4xx_spi.c ****   {
1141:./FWLIB/src/stm32f4xx_spi.c ****     /* Enable the selected SPI interrupt */
1142:./FWLIB/src/stm32f4xx_spi.c ****     SPIx->CR2 |= itmask;
1143:./FWLIB/src/stm32f4xx_spi.c ****   }
1144:./FWLIB/src/stm32f4xx_spi.c ****   else
1145:./FWLIB/src/stm32f4xx_spi.c ****   {
1146:./FWLIB/src/stm32f4xx_spi.c ****     /* Disable the selected SPI interrupt */
1147:./FWLIB/src/stm32f4xx_spi.c ****     SPIx->CR2 &= (uint16_t)~itmask;
ARM GAS  /tmp/ccTShhsc.s 			page 40


 1087              		.loc 1 1147 0
 1088 000a 8388     		ldrh	r3, [r0, #4]
 1089              	.LVL106:
 1090 000c 23EA0101 		bic	r1, r3, r1
 1091              	.LVL107:
 1092 0010 8180     		strh	r1, [r0, #4]	@ movhi
1148:./FWLIB/src/stm32f4xx_spi.c ****   }
1149:./FWLIB/src/stm32f4xx_spi.c **** }
 1093              		.loc 1 1149 0
 1094 0012 7047     		bx	lr
 1095              	.LVL108:
 1096              	.L85:
1142:./FWLIB/src/stm32f4xx_spi.c ****   }
 1097              		.loc 1 1142 0
 1098 0014 8388     		ldrh	r3, [r0, #4]
 1099              	.LVL109:
 1100 0016 1943     		orrs	r1, r1, r3
 1101              	.LVL110:
 1102 0018 8180     		strh	r1, [r0, #4]	@ movhi
 1103 001a 7047     		bx	lr
 1104              		.cfi_endproc
 1105              	.LFE132:
 1107              		.section	.text.SPI_I2S_GetFlagStatus,"ax",%progbits
 1108              		.align	1
 1109              		.global	SPI_I2S_GetFlagStatus
 1110              		.syntax unified
 1111              		.thumb
 1112              		.thumb_func
 1113              		.fpu fpv4-sp-d16
 1115              	SPI_I2S_GetFlagStatus:
 1116              	.LFB133:
1150:./FWLIB/src/stm32f4xx_spi.c **** 
1151:./FWLIB/src/stm32f4xx_spi.c **** /**
1152:./FWLIB/src/stm32f4xx_spi.c ****   * @brief  Checks whether the specified SPIx/I2Sx flag is set or not.
1153:./FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
1154:./FWLIB/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
1155:./FWLIB/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_FLAG: specifies the SPI flag to check. 
1156:./FWLIB/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
1157:./FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_TXE: Transmit buffer empty flag.
1158:./FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_RXNE: Receive buffer not empty flag.
1159:./FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_BSY: Busy flag.
1160:./FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_OVR: Overrun flag.
1161:./FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_FLAG_MODF: Mode Fault flag.
1162:./FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_FLAG_CRCERR: CRC Error flag.
1163:./FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_TIFRFE: Format Error.
1164:./FWLIB/src/stm32f4xx_spi.c ****   *            @arg I2S_FLAG_UDR: Underrun Error flag.
1165:./FWLIB/src/stm32f4xx_spi.c ****   *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
1166:./FWLIB/src/stm32f4xx_spi.c ****   * @retval The new state of SPI_I2S_FLAG (SET or RESET).
1167:./FWLIB/src/stm32f4xx_spi.c ****   */
1168:./FWLIB/src/stm32f4xx_spi.c **** FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
1169:./FWLIB/src/stm32f4xx_spi.c **** {
 1117              		.loc 1 1169 0
 1118              		.cfi_startproc
 1119              		@ args = 0, pretend = 0, frame = 0
 1120              		@ frame_needed = 0, uses_anonymous_args = 0
 1121              		@ link register save eliminated.
 1122              	.LVL111:
ARM GAS  /tmp/ccTShhsc.s 			page 41


1170:./FWLIB/src/stm32f4xx_spi.c ****   FlagStatus bitstatus = RESET;
1171:./FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
1172:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1173:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
1174:./FWLIB/src/stm32f4xx_spi.c ****   
1175:./FWLIB/src/stm32f4xx_spi.c ****   /* Check the status of the specified SPI flag */
1176:./FWLIB/src/stm32f4xx_spi.c ****   if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 1123              		.loc 1 1176 0
 1124 0000 0389     		ldrh	r3, [r0, #8]
 1125 0002 1942     		tst	r1, r3
 1126 0004 01D1     		bne	.L89
1177:./FWLIB/src/stm32f4xx_spi.c ****   {
1178:./FWLIB/src/stm32f4xx_spi.c ****     /* SPI_I2S_FLAG is set */
1179:./FWLIB/src/stm32f4xx_spi.c ****     bitstatus = SET;
1180:./FWLIB/src/stm32f4xx_spi.c ****   }
1181:./FWLIB/src/stm32f4xx_spi.c ****   else
1182:./FWLIB/src/stm32f4xx_spi.c ****   {
1183:./FWLIB/src/stm32f4xx_spi.c ****     /* SPI_I2S_FLAG is reset */
1184:./FWLIB/src/stm32f4xx_spi.c ****     bitstatus = RESET;
 1127              		.loc 1 1184 0
 1128 0006 0020     		movs	r0, #0
 1129              	.LVL112:
1185:./FWLIB/src/stm32f4xx_spi.c ****   }
1186:./FWLIB/src/stm32f4xx_spi.c ****   /* Return the SPI_I2S_FLAG status */
1187:./FWLIB/src/stm32f4xx_spi.c ****   return  bitstatus;
1188:./FWLIB/src/stm32f4xx_spi.c **** }
 1130              		.loc 1 1188 0
 1131 0008 7047     		bx	lr
 1132              	.LVL113:
 1133              	.L89:
1179:./FWLIB/src/stm32f4xx_spi.c ****   }
 1134              		.loc 1 1179 0
 1135 000a 0120     		movs	r0, #1
 1136              	.LVL114:
 1137 000c 7047     		bx	lr
 1138              		.cfi_endproc
 1139              	.LFE133:
 1141              		.section	.text.SPI_I2S_ClearFlag,"ax",%progbits
 1142              		.align	1
 1143              		.global	SPI_I2S_ClearFlag
 1144              		.syntax unified
 1145              		.thumb
 1146              		.thumb_func
 1147              		.fpu fpv4-sp-d16
 1149              	SPI_I2S_ClearFlag:
 1150              	.LFB134:
1189:./FWLIB/src/stm32f4xx_spi.c **** 
1190:./FWLIB/src/stm32f4xx_spi.c **** /**
1191:./FWLIB/src/stm32f4xx_spi.c ****   * @brief  Clears the SPIx CRC Error (CRCERR) flag.
1192:./FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
1193:./FWLIB/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
1194:./FWLIB/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_FLAG: specifies the SPI flag to clear. 
1195:./FWLIB/src/stm32f4xx_spi.c ****   *          This function clears only CRCERR flag.
1196:./FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_FLAG_CRCERR: CRC Error flag.  
1197:./FWLIB/src/stm32f4xx_spi.c ****   *  
1198:./FWLIB/src/stm32f4xx_spi.c ****   * @note   OVR (OverRun error) flag is cleared by software sequence: a read 
1199:./FWLIB/src/stm32f4xx_spi.c ****   *          operation to SPI_DR register (SPI_I2S_ReceiveData()) followed by a read 
ARM GAS  /tmp/ccTShhsc.s 			page 42


1200:./FWLIB/src/stm32f4xx_spi.c ****   *          operation to SPI_SR register (SPI_I2S_GetFlagStatus()).
1201:./FWLIB/src/stm32f4xx_spi.c ****   * @note   UDR (UnderRun error) flag is cleared by a read operation to 
1202:./FWLIB/src/stm32f4xx_spi.c ****   *          SPI_SR register (SPI_I2S_GetFlagStatus()).   
1203:./FWLIB/src/stm32f4xx_spi.c ****   * @note   MODF (Mode Fault) flag is cleared by software sequence: a read/write 
1204:./FWLIB/src/stm32f4xx_spi.c ****   *          operation to SPI_SR register (SPI_I2S_GetFlagStatus()) followed by a 
1205:./FWLIB/src/stm32f4xx_spi.c ****   *          write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
1206:./FWLIB/src/stm32f4xx_spi.c ****   *  
1207:./FWLIB/src/stm32f4xx_spi.c ****   * @retval None
1208:./FWLIB/src/stm32f4xx_spi.c ****   */
1209:./FWLIB/src/stm32f4xx_spi.c **** void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
1210:./FWLIB/src/stm32f4xx_spi.c **** {
 1151              		.loc 1 1210 0
 1152              		.cfi_startproc
 1153              		@ args = 0, pretend = 0, frame = 0
 1154              		@ frame_needed = 0, uses_anonymous_args = 0
 1155              		@ link register save eliminated.
 1156              	.LVL115:
1211:./FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
1212:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1213:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
1214:./FWLIB/src/stm32f4xx_spi.c ****     
1215:./FWLIB/src/stm32f4xx_spi.c ****   /* Clear the selected SPI CRC Error (CRCERR) flag */
1216:./FWLIB/src/stm32f4xx_spi.c ****   SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 1157              		.loc 1 1216 0
 1158 0000 C943     		mvns	r1, r1
 1159              	.LVL116:
 1160 0002 89B2     		uxth	r1, r1
 1161 0004 0181     		strh	r1, [r0, #8]	@ movhi
1217:./FWLIB/src/stm32f4xx_spi.c **** }
 1162              		.loc 1 1217 0
 1163 0006 7047     		bx	lr
 1164              		.cfi_endproc
 1165              	.LFE134:
 1167              		.section	.text.SPI_I2S_GetITStatus,"ax",%progbits
 1168              		.align	1
 1169              		.global	SPI_I2S_GetITStatus
 1170              		.syntax unified
 1171              		.thumb
 1172              		.thumb_func
 1173              		.fpu fpv4-sp-d16
 1175              	SPI_I2S_GetITStatus:
 1176              	.LFB135:
1218:./FWLIB/src/stm32f4xx_spi.c **** 
1219:./FWLIB/src/stm32f4xx_spi.c **** /**
1220:./FWLIB/src/stm32f4xx_spi.c ****   * @brief  Checks whether the specified SPIx/I2Sx interrupt has occurred or not.
1221:./FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
1222:./FWLIB/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.  
1223:./FWLIB/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_IT: specifies the SPI interrupt source to check. 
1224:./FWLIB/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
1225:./FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_TXE: Transmit buffer empty interrupt.
1226:./FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_RXNE: Receive buffer not empty interrupt.
1227:./FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_OVR: Overrun interrupt.
1228:./FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_IT_MODF: Mode Fault interrupt.
1229:./FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_IT_CRCERR: CRC Error interrupt.
1230:./FWLIB/src/stm32f4xx_spi.c ****   *            @arg I2S_IT_UDR: Underrun interrupt.  
1231:./FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
1232:./FWLIB/src/stm32f4xx_spi.c ****   * @retval The new state of SPI_I2S_IT (SET or RESET).
ARM GAS  /tmp/ccTShhsc.s 			page 43


1233:./FWLIB/src/stm32f4xx_spi.c ****   */
1234:./FWLIB/src/stm32f4xx_spi.c **** ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
1235:./FWLIB/src/stm32f4xx_spi.c **** {
 1177              		.loc 1 1235 0
 1178              		.cfi_startproc
 1179              		@ args = 0, pretend = 0, frame = 0
 1180              		@ frame_needed = 0, uses_anonymous_args = 0
 1181              		@ link register save eliminated.
 1182              	.LVL117:
1236:./FWLIB/src/stm32f4xx_spi.c ****   ITStatus bitstatus = RESET;
1237:./FWLIB/src/stm32f4xx_spi.c ****   uint16_t itpos = 0, itmask = 0, enablestatus = 0;
1238:./FWLIB/src/stm32f4xx_spi.c **** 
1239:./FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
1240:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1241:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));
1242:./FWLIB/src/stm32f4xx_spi.c **** 
1243:./FWLIB/src/stm32f4xx_spi.c ****   /* Get the SPI_I2S_IT index */
1244:./FWLIB/src/stm32f4xx_spi.c ****   itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 1183              		.loc 1 1244 0
 1184 0000 01F00F02 		and	r2, r1, #15
 1185 0004 0123     		movs	r3, #1
 1186 0006 03FA02F2 		lsl	r2, r3, r2
 1187              	.LVL118:
1245:./FWLIB/src/stm32f4xx_spi.c **** 
1246:./FWLIB/src/stm32f4xx_spi.c ****   /* Get the SPI_I2S_IT IT mask */
1247:./FWLIB/src/stm32f4xx_spi.c ****   itmask = SPI_I2S_IT >> 4;
 1188              		.loc 1 1247 0
 1189 000a 0909     		lsrs	r1, r1, #4
 1190              	.LVL119:
1248:./FWLIB/src/stm32f4xx_spi.c **** 
1249:./FWLIB/src/stm32f4xx_spi.c ****   /* Set the IT mask */
1250:./FWLIB/src/stm32f4xx_spi.c ****   itmask = 0x01 << itmask;
 1191              		.loc 1 1250 0
 1192 000c 8B40     		lsls	r3, r3, r1
 1193              	.LVL120:
1251:./FWLIB/src/stm32f4xx_spi.c **** 
1252:./FWLIB/src/stm32f4xx_spi.c ****   /* Get the SPI_I2S_IT enable bit status */
1253:./FWLIB/src/stm32f4xx_spi.c ****   enablestatus = (SPIx->CR2 & itmask) ;
 1194              		.loc 1 1253 0
 1195 000e 8188     		ldrh	r1, [r0, #4]
 1196 0010 0B40     		ands	r3, r3, r1
 1197              	.LVL121:
1254:./FWLIB/src/stm32f4xx_spi.c **** 
1255:./FWLIB/src/stm32f4xx_spi.c ****   /* Check the status of the specified SPI interrupt */
1256:./FWLIB/src/stm32f4xx_spi.c ****   if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 1198              		.loc 1 1256 0
 1199 0012 0189     		ldrh	r1, [r0, #8]
 1200 0014 0A42     		tst	r2, r1
 1201 0016 02D0     		beq	.L93
 1202              		.loc 1 1256 0 is_stmt 0 discriminator 1
 1203 0018 1BB9     		cbnz	r3, .L94
1257:./FWLIB/src/stm32f4xx_spi.c ****   {
1258:./FWLIB/src/stm32f4xx_spi.c ****     /* SPI_I2S_IT is set */
1259:./FWLIB/src/stm32f4xx_spi.c ****     bitstatus = SET;
1260:./FWLIB/src/stm32f4xx_spi.c ****   }
1261:./FWLIB/src/stm32f4xx_spi.c ****   else
1262:./FWLIB/src/stm32f4xx_spi.c ****   {
ARM GAS  /tmp/ccTShhsc.s 			page 44


1263:./FWLIB/src/stm32f4xx_spi.c ****     /* SPI_I2S_IT is reset */
1264:./FWLIB/src/stm32f4xx_spi.c ****     bitstatus = RESET;
 1204              		.loc 1 1264 0 is_stmt 1
 1205 001a 0020     		movs	r0, #0
 1206              	.LVL122:
 1207 001c 7047     		bx	lr
 1208              	.LVL123:
 1209              	.L93:
 1210 001e 0020     		movs	r0, #0
 1211              	.LVL124:
 1212 0020 7047     		bx	lr
 1213              	.LVL125:
 1214              	.L94:
1259:./FWLIB/src/stm32f4xx_spi.c ****   }
 1215              		.loc 1 1259 0
 1216 0022 0120     		movs	r0, #1
 1217              	.LVL126:
1265:./FWLIB/src/stm32f4xx_spi.c ****   }
1266:./FWLIB/src/stm32f4xx_spi.c ****   /* Return the SPI_I2S_IT status */
1267:./FWLIB/src/stm32f4xx_spi.c ****   return bitstatus;
1268:./FWLIB/src/stm32f4xx_spi.c **** }
 1218              		.loc 1 1268 0
 1219 0024 7047     		bx	lr
 1220              		.cfi_endproc
 1221              	.LFE135:
 1223              		.section	.text.SPI_I2S_ClearITPendingBit,"ax",%progbits
 1224              		.align	1
 1225              		.global	SPI_I2S_ClearITPendingBit
 1226              		.syntax unified
 1227              		.thumb
 1228              		.thumb_func
 1229              		.fpu fpv4-sp-d16
 1231              	SPI_I2S_ClearITPendingBit:
 1232              	.LFB136:
1269:./FWLIB/src/stm32f4xx_spi.c **** 
1270:./FWLIB/src/stm32f4xx_spi.c **** /**
1271:./FWLIB/src/stm32f4xx_spi.c ****   * @brief  Clears the SPIx CRC Error (CRCERR) interrupt pending bit.
1272:./FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
1273:./FWLIB/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.  
1274:./FWLIB/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_IT: specifies the SPI interrupt pending bit to clear.
1275:./FWLIB/src/stm32f4xx_spi.c ****   *         This function clears only CRCERR interrupt pending bit.   
1276:./FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_IT_CRCERR: CRC Error interrupt.
1277:./FWLIB/src/stm32f4xx_spi.c ****   *   
1278:./FWLIB/src/stm32f4xx_spi.c ****   * @note   OVR (OverRun Error) interrupt pending bit is cleared by software 
1279:./FWLIB/src/stm32f4xx_spi.c ****   *          sequence: a read operation to SPI_DR register (SPI_I2S_ReceiveData()) 
1280:./FWLIB/src/stm32f4xx_spi.c ****   *          followed by a read operation to SPI_SR register (SPI_I2S_GetITStatus()).
1281:./FWLIB/src/stm32f4xx_spi.c ****   * @note   UDR (UnderRun Error) interrupt pending bit is cleared by a read 
1282:./FWLIB/src/stm32f4xx_spi.c ****   *          operation to SPI_SR register (SPI_I2S_GetITStatus()).   
1283:./FWLIB/src/stm32f4xx_spi.c ****   * @note   MODF (Mode Fault) interrupt pending bit is cleared by software sequence:
1284:./FWLIB/src/stm32f4xx_spi.c ****   *          a read/write operation to SPI_SR register (SPI_I2S_GetITStatus()) 
1285:./FWLIB/src/stm32f4xx_spi.c ****   *          followed by a write operation to SPI_CR1 register (SPI_Cmd() to enable 
1286:./FWLIB/src/stm32f4xx_spi.c ****   *          the SPI).
1287:./FWLIB/src/stm32f4xx_spi.c ****   * @retval None
1288:./FWLIB/src/stm32f4xx_spi.c ****   */
1289:./FWLIB/src/stm32f4xx_spi.c **** void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
1290:./FWLIB/src/stm32f4xx_spi.c **** {
 1233              		.loc 1 1290 0
ARM GAS  /tmp/ccTShhsc.s 			page 45


 1234              		.cfi_startproc
 1235              		@ args = 0, pretend = 0, frame = 0
 1236              		@ frame_needed = 0, uses_anonymous_args = 0
 1237              		@ link register save eliminated.
 1238              	.LVL127:
1291:./FWLIB/src/stm32f4xx_spi.c ****   uint16_t itpos = 0;
1292:./FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
1293:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1294:./FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));
1295:./FWLIB/src/stm32f4xx_spi.c **** 
1296:./FWLIB/src/stm32f4xx_spi.c ****   /* Get the SPI_I2S IT index */
1297:./FWLIB/src/stm32f4xx_spi.c ****   itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 1239              		.loc 1 1297 0
 1240 0000 01F00F01 		and	r1, r1, #15
 1241              	.LVL128:
 1242 0004 0123     		movs	r3, #1
 1243 0006 8B40     		lsls	r3, r3, r1
 1244 0008 9BB2     		uxth	r3, r3
 1245              	.LVL129:
1298:./FWLIB/src/stm32f4xx_spi.c **** 
1299:./FWLIB/src/stm32f4xx_spi.c ****   /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
1300:./FWLIB/src/stm32f4xx_spi.c ****   SPIx->SR = (uint16_t)~itpos;
 1246              		.loc 1 1300 0
 1247 000a DB43     		mvns	r3, r3
 1248              	.LVL130:
 1249 000c 9BB2     		uxth	r3, r3
 1250              	.LVL131:
 1251 000e 0381     		strh	r3, [r0, #8]	@ movhi
1301:./FWLIB/src/stm32f4xx_spi.c **** }
 1252              		.loc 1 1301 0
 1253 0010 7047     		bx	lr
 1254              		.cfi_endproc
 1255              	.LFE136:
 1257              		.text
 1258              	.Letext0:
 1259              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1260              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1261              		.file 4 "build/lnInclude/core_cm4.h"
 1262              		.file 5 "build/lnInclude/system_stm32f4xx.h"
 1263              		.file 6 "build/lnInclude/stm32f4xx.h"
 1264              		.file 7 "build/lnInclude/stm32f4xx_spi.h"
 1265              		.file 8 "build/lnInclude/stm32f4xx_rcc.h"
ARM GAS  /tmp/ccTShhsc.s 			page 46


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_spi.c
     /tmp/ccTShhsc.s:18     .text.SPI_I2S_DeInit:0000000000000000 $t
     /tmp/ccTShhsc.s:25     .text.SPI_I2S_DeInit:0000000000000000 SPI_I2S_DeInit
     /tmp/ccTShhsc.s:154    .text.SPI_I2S_DeInit:00000000000000ac $d
     /tmp/ccTShhsc.s:164    .text.SPI_Init:0000000000000000 $t
     /tmp/ccTShhsc.s:171    .text.SPI_Init:0000000000000000 SPI_Init
     /tmp/ccTShhsc.s:235    .text.I2S_Init:0000000000000000 $t
     /tmp/ccTShhsc.s:242    .text.I2S_Init:0000000000000000 I2S_Init
     /tmp/ccTShhsc.s:444    .text.I2S_Init:00000000000000f8 $d
     /tmp/ccTShhsc.s:452    .text.SPI_StructInit:0000000000000000 $t
     /tmp/ccTShhsc.s:459    .text.SPI_StructInit:0000000000000000 SPI_StructInit
     /tmp/ccTShhsc.s:493    .text.I2S_StructInit:0000000000000000 $t
     /tmp/ccTShhsc.s:500    .text.I2S_StructInit:0000000000000000 I2S_StructInit
     /tmp/ccTShhsc.s:528    .text.SPI_Cmd:0000000000000000 $t
     /tmp/ccTShhsc.s:535    .text.SPI_Cmd:0000000000000000 SPI_Cmd
     /tmp/ccTShhsc.s:563    .text.I2S_Cmd:0000000000000000 $t
     /tmp/ccTShhsc.s:570    .text.I2S_Cmd:0000000000000000 I2S_Cmd
     /tmp/ccTShhsc.s:598    .text.SPI_DataSizeConfig:0000000000000000 $t
     /tmp/ccTShhsc.s:605    .text.SPI_DataSizeConfig:0000000000000000 SPI_DataSizeConfig
     /tmp/ccTShhsc.s:630    .text.SPI_BiDirectionalLineConfig:0000000000000000 $t
     /tmp/ccTShhsc.s:637    .text.SPI_BiDirectionalLineConfig:0000000000000000 SPI_BiDirectionalLineConfig
     /tmp/ccTShhsc.s:666    .text.SPI_NSSInternalSoftwareConfig:0000000000000000 $t
     /tmp/ccTShhsc.s:673    .text.SPI_NSSInternalSoftwareConfig:0000000000000000 SPI_NSSInternalSoftwareConfig
     /tmp/ccTShhsc.s:703    .text.SPI_SSOutputCmd:0000000000000000 $t
     /tmp/ccTShhsc.s:710    .text.SPI_SSOutputCmd:0000000000000000 SPI_SSOutputCmd
     /tmp/ccTShhsc.s:738    .text.SPI_TIModeCmd:0000000000000000 $t
     /tmp/ccTShhsc.s:745    .text.SPI_TIModeCmd:0000000000000000 SPI_TIModeCmd
     /tmp/ccTShhsc.s:773    .text.I2S_FullDuplexConfig:0000000000000000 $t
     /tmp/ccTShhsc.s:780    .text.I2S_FullDuplexConfig:0000000000000000 I2S_FullDuplexConfig
     /tmp/ccTShhsc.s:857    .text.SPI_I2S_ReceiveData:0000000000000000 $t
     /tmp/ccTShhsc.s:864    .text.SPI_I2S_ReceiveData:0000000000000000 SPI_I2S_ReceiveData
     /tmp/ccTShhsc.s:881    .text.SPI_I2S_SendData:0000000000000000 $t
     /tmp/ccTShhsc.s:888    .text.SPI_I2S_SendData:0000000000000000 SPI_I2S_SendData
     /tmp/ccTShhsc.s:904    .text.SPI_CalculateCRC:0000000000000000 $t
     /tmp/ccTShhsc.s:911    .text.SPI_CalculateCRC:0000000000000000 SPI_CalculateCRC
     /tmp/ccTShhsc.s:939    .text.SPI_TransmitCRC:0000000000000000 $t
     /tmp/ccTShhsc.s:946    .text.SPI_TransmitCRC:0000000000000000 SPI_TransmitCRC
     /tmp/ccTShhsc.s:964    .text.SPI_GetCRC:0000000000000000 $t
     /tmp/ccTShhsc.s:971    .text.SPI_GetCRC:0000000000000000 SPI_GetCRC
     /tmp/ccTShhsc.s:1001   .text.SPI_GetCRCPolynomial:0000000000000000 $t
     /tmp/ccTShhsc.s:1008   .text.SPI_GetCRCPolynomial:0000000000000000 SPI_GetCRCPolynomial
     /tmp/ccTShhsc.s:1025   .text.SPI_I2S_DMACmd:0000000000000000 $t
     /tmp/ccTShhsc.s:1032   .text.SPI_I2S_DMACmd:0000000000000000 SPI_I2S_DMACmd
     /tmp/ccTShhsc.s:1061   .text.SPI_I2S_ITConfig:0000000000000000 $t
     /tmp/ccTShhsc.s:1068   .text.SPI_I2S_ITConfig:0000000000000000 SPI_I2S_ITConfig
     /tmp/ccTShhsc.s:1108   .text.SPI_I2S_GetFlagStatus:0000000000000000 $t
     /tmp/ccTShhsc.s:1115   .text.SPI_I2S_GetFlagStatus:0000000000000000 SPI_I2S_GetFlagStatus
     /tmp/ccTShhsc.s:1142   .text.SPI_I2S_ClearFlag:0000000000000000 $t
     /tmp/ccTShhsc.s:1149   .text.SPI_I2S_ClearFlag:0000000000000000 SPI_I2S_ClearFlag
     /tmp/ccTShhsc.s:1168   .text.SPI_I2S_GetITStatus:0000000000000000 $t
     /tmp/ccTShhsc.s:1175   .text.SPI_I2S_GetITStatus:0000000000000000 SPI_I2S_GetITStatus
     /tmp/ccTShhsc.s:1224   .text.SPI_I2S_ClearITPendingBit:0000000000000000 $t
     /tmp/ccTShhsc.s:1231   .text.SPI_I2S_ClearITPendingBit:0000000000000000 SPI_I2S_ClearITPendingBit

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
ARM GAS  /tmp/ccTShhsc.s 			page 47


RCC_APB1PeriphResetCmd
