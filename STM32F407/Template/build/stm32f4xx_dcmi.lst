ARM GAS  /tmp/cctCDyyg.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_dcmi.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.DCMI_DeInit,"ax",%progbits
  18              		.align	1
  19              		.global	DCMI_DeInit
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	DCMI_DeInit:
  26              	.LFB112:
  27              		.file 1 "./FWLIB/src/stm32f4xx_dcmi.c"
   1:./FWLIB/src/stm32f4xx_dcmi.c **** /**
   2:./FWLIB/src/stm32f4xx_dcmi.c ****   ******************************************************************************
   3:./FWLIB/src/stm32f4xx_dcmi.c ****   * @file    stm32f4xx_dcmi.c
   4:./FWLIB/src/stm32f4xx_dcmi.c ****   * @author  MCD Application Team
   5:./FWLIB/src/stm32f4xx_dcmi.c ****   * @version V1.4.0
   6:./FWLIB/src/stm32f4xx_dcmi.c ****   * @date    04-August-2014
   7:./FWLIB/src/stm32f4xx_dcmi.c ****   * @brief   This file provides firmware functions to manage the following 
   8:./FWLIB/src/stm32f4xx_dcmi.c ****   *          functionalities of the DCMI peripheral:           
   9:./FWLIB/src/stm32f4xx_dcmi.c ****   *           + Initialization and Configuration
  10:./FWLIB/src/stm32f4xx_dcmi.c ****   *           + Image capture functions  
  11:./FWLIB/src/stm32f4xx_dcmi.c ****   *           + Interrupts and flags management
  12:./FWLIB/src/stm32f4xx_dcmi.c ****   *
  13:./FWLIB/src/stm32f4xx_dcmi.c ****  @verbatim          
  14:./FWLIB/src/stm32f4xx_dcmi.c ****  ===============================================================================
  15:./FWLIB/src/stm32f4xx_dcmi.c ****                         ##### How to use this driver #####
  16:./FWLIB/src/stm32f4xx_dcmi.c ****  ===============================================================================  
  17:./FWLIB/src/stm32f4xx_dcmi.c ****     [..]       
  18:./FWLIB/src/stm32f4xx_dcmi.c ****       The sequence below describes how to use this driver to capture image
  19:./FWLIB/src/stm32f4xx_dcmi.c ****       from a camera module connected to the DCMI Interface.
  20:./FWLIB/src/stm32f4xx_dcmi.c ****       This sequence does not take into account the configuration of the  
  21:./FWLIB/src/stm32f4xx_dcmi.c ****       camera module, which should be made before to configure and enable
  22:./FWLIB/src/stm32f4xx_dcmi.c ****       the DCMI to capture images.
  23:./FWLIB/src/stm32f4xx_dcmi.c ****              
  24:./FWLIB/src/stm32f4xx_dcmi.c ****       (#) Enable the clock for the DCMI and associated GPIOs using the following 
  25:./FWLIB/src/stm32f4xx_dcmi.c ****           functions:
  26:./FWLIB/src/stm32f4xx_dcmi.c ****           RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_DCMI, ENABLE);
  27:./FWLIB/src/stm32f4xx_dcmi.c ****           RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOx, ENABLE);
  28:./FWLIB/src/stm32f4xx_dcmi.c ****   
  29:./FWLIB/src/stm32f4xx_dcmi.c ****       (#) DCMI pins configuration 
  30:./FWLIB/src/stm32f4xx_dcmi.c ****         (++) Connect the involved DCMI pins to AF13 using the following function 
  31:./FWLIB/src/stm32f4xx_dcmi.c ****             GPIO_PinAFConfig(GPIOx, GPIO_PinSourcex, GPIO_AF_DCMI); 
ARM GAS  /tmp/cctCDyyg.s 			page 2


  32:./FWLIB/src/stm32f4xx_dcmi.c ****         (++) Configure these DCMI pins in alternate function mode by calling 
  33:./FWLIB/src/stm32f4xx_dcmi.c ****             the function GPIO_Init();
  34:./FWLIB/src/stm32f4xx_dcmi.c ****       
  35:./FWLIB/src/stm32f4xx_dcmi.c ****       (#) Declare a DCMI_InitTypeDef structure, for example:
  36:./FWLIB/src/stm32f4xx_dcmi.c ****           DCMI_InitTypeDef  DCMI_InitStructure;
  37:./FWLIB/src/stm32f4xx_dcmi.c ****           and fill the DCMI_InitStructure variable with the allowed values
  38:./FWLIB/src/stm32f4xx_dcmi.c ****           of the structure member.
  39:./FWLIB/src/stm32f4xx_dcmi.c ****     
  40:./FWLIB/src/stm32f4xx_dcmi.c ****       (#) Initialize the DCMI interface by calling the function
  41:./FWLIB/src/stm32f4xx_dcmi.c ****           DCMI_Init(&DCMI_InitStructure); 
  42:./FWLIB/src/stm32f4xx_dcmi.c ****     
  43:./FWLIB/src/stm32f4xx_dcmi.c ****       (#) Configure the DMA2_Stream1 channel1 to transfer Data from DCMI DR
  44:./FWLIB/src/stm32f4xx_dcmi.c ****           register to the destination memory buffer.
  45:./FWLIB/src/stm32f4xx_dcmi.c ****     
  46:./FWLIB/src/stm32f4xx_dcmi.c ****       (#) Enable DCMI interface using the function
  47:./FWLIB/src/stm32f4xx_dcmi.c ****           DCMI_Cmd(ENABLE);
  48:./FWLIB/src/stm32f4xx_dcmi.c ****                    
  49:./FWLIB/src/stm32f4xx_dcmi.c ****       (#) Start the image capture using the function
  50:./FWLIB/src/stm32f4xx_dcmi.c ****           DCMI_CaptureCmd(ENABLE);
  51:./FWLIB/src/stm32f4xx_dcmi.c ****                    
  52:./FWLIB/src/stm32f4xx_dcmi.c ****       (#) At this stage the DCMI interface waits for the first start of frame,
  53:./FWLIB/src/stm32f4xx_dcmi.c ****           then a DMA request is generated continuously/once (depending on the
  54:./FWLIB/src/stm32f4xx_dcmi.c ****           mode used, Continuous/Snapshot) to transfer the received data into
  55:./FWLIB/src/stm32f4xx_dcmi.c ****           the destination memory. 
  56:./FWLIB/src/stm32f4xx_dcmi.c ****      
  57:./FWLIB/src/stm32f4xx_dcmi.c ****       -@-  If you need to capture only a rectangular window from the received
  58:./FWLIB/src/stm32f4xx_dcmi.c ****            image, you have to use the DCMI_CROPConfig() function to configure 
  59:./FWLIB/src/stm32f4xx_dcmi.c ****            the coordinates and size of the window to be captured, then enable 
  60:./FWLIB/src/stm32f4xx_dcmi.c ****            the Crop feature using DCMI_CROPCmd(ENABLE);  
  61:./FWLIB/src/stm32f4xx_dcmi.c ****            In this case, the Crop configuration should be made before to enable
  62:./FWLIB/src/stm32f4xx_dcmi.c ****            and start the DCMI interface. 
  63:./FWLIB/src/stm32f4xx_dcmi.c **** 
  64:./FWLIB/src/stm32f4xx_dcmi.c ****  @endverbatim     
  65:./FWLIB/src/stm32f4xx_dcmi.c ****   ******************************************************************************
  66:./FWLIB/src/stm32f4xx_dcmi.c ****   * @attention
  67:./FWLIB/src/stm32f4xx_dcmi.c ****   *
  68:./FWLIB/src/stm32f4xx_dcmi.c ****   * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
  69:./FWLIB/src/stm32f4xx_dcmi.c ****   *
  70:./FWLIB/src/stm32f4xx_dcmi.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  71:./FWLIB/src/stm32f4xx_dcmi.c ****   * You may not use this file except in compliance with the License.
  72:./FWLIB/src/stm32f4xx_dcmi.c ****   * You may obtain a copy of the License at:
  73:./FWLIB/src/stm32f4xx_dcmi.c ****   *
  74:./FWLIB/src/stm32f4xx_dcmi.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  75:./FWLIB/src/stm32f4xx_dcmi.c ****   *
  76:./FWLIB/src/stm32f4xx_dcmi.c ****   * Unless required by applicable law or agreed to in writing, software 
  77:./FWLIB/src/stm32f4xx_dcmi.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  78:./FWLIB/src/stm32f4xx_dcmi.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  79:./FWLIB/src/stm32f4xx_dcmi.c ****   * See the License for the specific language governing permissions and
  80:./FWLIB/src/stm32f4xx_dcmi.c ****   * limitations under the License.
  81:./FWLIB/src/stm32f4xx_dcmi.c ****   *
  82:./FWLIB/src/stm32f4xx_dcmi.c ****   ******************************************************************************
  83:./FWLIB/src/stm32f4xx_dcmi.c ****   */
  84:./FWLIB/src/stm32f4xx_dcmi.c **** 
  85:./FWLIB/src/stm32f4xx_dcmi.c **** /* Includes ------------------------------------------------------------------*/
  86:./FWLIB/src/stm32f4xx_dcmi.c **** #include "stm32f4xx_dcmi.h"
  87:./FWLIB/src/stm32f4xx_dcmi.c **** #include "stm32f4xx_rcc.h"
  88:./FWLIB/src/stm32f4xx_dcmi.c **** 
ARM GAS  /tmp/cctCDyyg.s 			page 3


  89:./FWLIB/src/stm32f4xx_dcmi.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  90:./FWLIB/src/stm32f4xx_dcmi.c ****   * @{
  91:./FWLIB/src/stm32f4xx_dcmi.c ****   */
  92:./FWLIB/src/stm32f4xx_dcmi.c **** 
  93:./FWLIB/src/stm32f4xx_dcmi.c **** /** @defgroup DCMI 
  94:./FWLIB/src/stm32f4xx_dcmi.c ****   * @brief DCMI driver modules
  95:./FWLIB/src/stm32f4xx_dcmi.c ****   * @{
  96:./FWLIB/src/stm32f4xx_dcmi.c ****   */ 
  97:./FWLIB/src/stm32f4xx_dcmi.c **** 
  98:./FWLIB/src/stm32f4xx_dcmi.c **** /* Private typedef -----------------------------------------------------------*/
  99:./FWLIB/src/stm32f4xx_dcmi.c **** /* Private define ------------------------------------------------------------*/
 100:./FWLIB/src/stm32f4xx_dcmi.c **** /* Private macro -------------------------------------------------------------*/
 101:./FWLIB/src/stm32f4xx_dcmi.c **** /* Private variables ---------------------------------------------------------*/
 102:./FWLIB/src/stm32f4xx_dcmi.c **** /* Private function prototypes -----------------------------------------------*/
 103:./FWLIB/src/stm32f4xx_dcmi.c **** /* Private functions ---------------------------------------------------------*/
 104:./FWLIB/src/stm32f4xx_dcmi.c **** 
 105:./FWLIB/src/stm32f4xx_dcmi.c **** /** @defgroup DCMI_Private_Functions
 106:./FWLIB/src/stm32f4xx_dcmi.c ****   * @{
 107:./FWLIB/src/stm32f4xx_dcmi.c ****   */ 
 108:./FWLIB/src/stm32f4xx_dcmi.c **** 
 109:./FWLIB/src/stm32f4xx_dcmi.c **** /** @defgroup DCMI_Group1 Initialization and Configuration functions
 110:./FWLIB/src/stm32f4xx_dcmi.c ****  *  @brief   Initialization and Configuration functions 
 111:./FWLIB/src/stm32f4xx_dcmi.c ****  *
 112:./FWLIB/src/stm32f4xx_dcmi.c **** @verbatim   
 113:./FWLIB/src/stm32f4xx_dcmi.c ****  ===============================================================================
 114:./FWLIB/src/stm32f4xx_dcmi.c ****               ##### Initialization and Configuration functions #####
 115:./FWLIB/src/stm32f4xx_dcmi.c ****  ===============================================================================  
 116:./FWLIB/src/stm32f4xx_dcmi.c **** 
 117:./FWLIB/src/stm32f4xx_dcmi.c **** @endverbatim
 118:./FWLIB/src/stm32f4xx_dcmi.c ****   * @{
 119:./FWLIB/src/stm32f4xx_dcmi.c ****   */
 120:./FWLIB/src/stm32f4xx_dcmi.c **** 
 121:./FWLIB/src/stm32f4xx_dcmi.c **** /**
 122:./FWLIB/src/stm32f4xx_dcmi.c ****   * @brief  Deinitializes the DCMI registers to their default reset values.
 123:./FWLIB/src/stm32f4xx_dcmi.c ****   * @param  None
 124:./FWLIB/src/stm32f4xx_dcmi.c ****   * @retval None
 125:./FWLIB/src/stm32f4xx_dcmi.c ****   */
 126:./FWLIB/src/stm32f4xx_dcmi.c **** void DCMI_DeInit(void)
 127:./FWLIB/src/stm32f4xx_dcmi.c **** {
  28              		.loc 1 127 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
 128:./FWLIB/src/stm32f4xx_dcmi.c ****   DCMI->CR = 0x0;
  33              		.loc 1 128 0
  34 0000 054B     		ldr	r3, .L2
  35 0002 0022     		movs	r2, #0
  36 0004 1A60     		str	r2, [r3]
 129:./FWLIB/src/stm32f4xx_dcmi.c ****   DCMI->IER = 0x0;
  37              		.loc 1 129 0
  38 0006 DA60     		str	r2, [r3, #12]
 130:./FWLIB/src/stm32f4xx_dcmi.c ****   DCMI->ICR = 0x1F;
  39              		.loc 1 130 0
  40 0008 1F21     		movs	r1, #31
  41 000a 5961     		str	r1, [r3, #20]
 131:./FWLIB/src/stm32f4xx_dcmi.c ****   DCMI->ESCR = 0x0;
ARM GAS  /tmp/cctCDyyg.s 			page 4


  42              		.loc 1 131 0
  43 000c 9A61     		str	r2, [r3, #24]
 132:./FWLIB/src/stm32f4xx_dcmi.c ****   DCMI->ESUR = 0x0;
  44              		.loc 1 132 0
  45 000e DA61     		str	r2, [r3, #28]
 133:./FWLIB/src/stm32f4xx_dcmi.c ****   DCMI->CWSTRTR = 0x0;
  46              		.loc 1 133 0
  47 0010 1A62     		str	r2, [r3, #32]
 134:./FWLIB/src/stm32f4xx_dcmi.c ****   DCMI->CWSIZER = 0x0;
  48              		.loc 1 134 0
  49 0012 5A62     		str	r2, [r3, #36]
 135:./FWLIB/src/stm32f4xx_dcmi.c **** }
  50              		.loc 1 135 0
  51 0014 7047     		bx	lr
  52              	.L3:
  53 0016 00BF     		.align	2
  54              	.L2:
  55 0018 00000550 		.word	1342504960
  56              		.cfi_endproc
  57              	.LFE112:
  59              		.section	.text.DCMI_Init,"ax",%progbits
  60              		.align	1
  61              		.global	DCMI_Init
  62              		.syntax unified
  63              		.thumb
  64              		.thumb_func
  65              		.fpu fpv4-sp-d16
  67              	DCMI_Init:
  68              	.LFB113:
 136:./FWLIB/src/stm32f4xx_dcmi.c **** 
 137:./FWLIB/src/stm32f4xx_dcmi.c **** /**
 138:./FWLIB/src/stm32f4xx_dcmi.c ****   * @brief  Initializes the DCMI according to the specified parameters in the DCMI_InitStruct.
 139:./FWLIB/src/stm32f4xx_dcmi.c ****   * @param  DCMI_InitStruct: pointer to a DCMI_InitTypeDef structure that contains 
 140:./FWLIB/src/stm32f4xx_dcmi.c ****   *         the configuration information for the DCMI.
 141:./FWLIB/src/stm32f4xx_dcmi.c ****   * @retval None
 142:./FWLIB/src/stm32f4xx_dcmi.c ****   */
 143:./FWLIB/src/stm32f4xx_dcmi.c **** void DCMI_Init(DCMI_InitTypeDef* DCMI_InitStruct)
 144:./FWLIB/src/stm32f4xx_dcmi.c **** {
  69              		.loc 1 144 0
  70              		.cfi_startproc
  71              		@ args = 0, pretend = 0, frame = 0
  72              		@ frame_needed = 0, uses_anonymous_args = 0
  73              	.LVL0:
  74 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  75              	.LCFI0:
  76              		.cfi_def_cfa_offset 20
  77              		.cfi_offset 4, -20
  78              		.cfi_offset 5, -16
  79              		.cfi_offset 6, -12
  80              		.cfi_offset 7, -8
  81              		.cfi_offset 14, -4
  82              	.LVL1:
 145:./FWLIB/src/stm32f4xx_dcmi.c ****   uint32_t temp = 0x0;
 146:./FWLIB/src/stm32f4xx_dcmi.c ****   
 147:./FWLIB/src/stm32f4xx_dcmi.c ****   /* Check the parameters */
 148:./FWLIB/src/stm32f4xx_dcmi.c ****   assert_param(IS_DCMI_CAPTURE_MODE(DCMI_InitStruct->DCMI_CaptureMode));
 149:./FWLIB/src/stm32f4xx_dcmi.c ****   assert_param(IS_DCMI_SYNCHRO(DCMI_InitStruct->DCMI_SynchroMode));
ARM GAS  /tmp/cctCDyyg.s 			page 5


 150:./FWLIB/src/stm32f4xx_dcmi.c ****   assert_param(IS_DCMI_PCKPOLARITY(DCMI_InitStruct->DCMI_PCKPolarity));
 151:./FWLIB/src/stm32f4xx_dcmi.c ****   assert_param(IS_DCMI_VSPOLARITY(DCMI_InitStruct->DCMI_VSPolarity));
 152:./FWLIB/src/stm32f4xx_dcmi.c ****   assert_param(IS_DCMI_HSPOLARITY(DCMI_InitStruct->DCMI_HSPolarity));
 153:./FWLIB/src/stm32f4xx_dcmi.c ****   assert_param(IS_DCMI_CAPTURE_RATE(DCMI_InitStruct->DCMI_CaptureRate));
 154:./FWLIB/src/stm32f4xx_dcmi.c ****   assert_param(IS_DCMI_EXTENDED_DATA(DCMI_InitStruct->DCMI_ExtendedDataMode));
 155:./FWLIB/src/stm32f4xx_dcmi.c **** 
 156:./FWLIB/src/stm32f4xx_dcmi.c ****   /* The DCMI configuration registers should be programmed correctly before 
 157:./FWLIB/src/stm32f4xx_dcmi.c ****   enabling the CR_ENABLE Bit and the CR_CAPTURE Bit */
 158:./FWLIB/src/stm32f4xx_dcmi.c ****   DCMI->CR &= ~(DCMI_CR_ENABLE | DCMI_CR_CAPTURE);
  83              		.loc 1 158 0
  84 0002 0F49     		ldr	r1, .L6
  85 0004 0B68     		ldr	r3, [r1]
  86 0006 23F48043 		bic	r3, r3, #16384
  87 000a 23F00103 		bic	r3, r3, #1
  88 000e 0B60     		str	r3, [r1]
 159:./FWLIB/src/stm32f4xx_dcmi.c ****    
 160:./FWLIB/src/stm32f4xx_dcmi.c ****   /* Reset the old DCMI configuration */
 161:./FWLIB/src/stm32f4xx_dcmi.c ****   temp = DCMI->CR;
  89              		.loc 1 161 0
  90 0010 0A68     		ldr	r2, [r1]
  91              	.LVL2:
 162:./FWLIB/src/stm32f4xx_dcmi.c ****   
 163:./FWLIB/src/stm32f4xx_dcmi.c ****   temp &= ~((uint32_t)DCMI_CR_CM     | DCMI_CR_ESS   | DCMI_CR_PCKPOL |
  92              		.loc 1 163 0
  93 0012 22F47F62 		bic	r2, r2, #4080
  94              	.LVL3:
  95 0016 22F00202 		bic	r2, r2, #2
  96              	.LVL4:
 164:./FWLIB/src/stm32f4xx_dcmi.c ****                       DCMI_CR_HSPOL  | DCMI_CR_VSPOL | DCMI_CR_FCRC_0 | 
 165:./FWLIB/src/stm32f4xx_dcmi.c ****                       DCMI_CR_FCRC_1 | DCMI_CR_EDM_0 | DCMI_CR_EDM_1); 
 166:./FWLIB/src/stm32f4xx_dcmi.c ****                   
 167:./FWLIB/src/stm32f4xx_dcmi.c ****   /* Sets the new configuration of the DCMI peripheral */
 168:./FWLIB/src/stm32f4xx_dcmi.c ****   temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
  97              		.loc 1 168 0
  98 001a B0F800C0 		ldrh	ip, [r0]
 169:./FWLIB/src/stm32f4xx_dcmi.c ****                      DCMI_InitStruct->DCMI_SynchroMode |
  99              		.loc 1 169 0
 100 001e B0F802E0 		ldrh	lr, [r0, #2]
 170:./FWLIB/src/stm32f4xx_dcmi.c ****                      DCMI_InitStruct->DCMI_PCKPolarity |
 101              		.loc 1 170 0
 102 0022 8788     		ldrh	r7, [r0, #4]
 171:./FWLIB/src/stm32f4xx_dcmi.c ****                      DCMI_InitStruct->DCMI_VSPolarity |
 103              		.loc 1 171 0
 104 0024 C688     		ldrh	r6, [r0, #6]
 172:./FWLIB/src/stm32f4xx_dcmi.c ****                      DCMI_InitStruct->DCMI_HSPolarity |
 105              		.loc 1 172 0
 106 0026 0589     		ldrh	r5, [r0, #8]
 173:./FWLIB/src/stm32f4xx_dcmi.c ****                      DCMI_InitStruct->DCMI_CaptureRate |
 107              		.loc 1 173 0
 108 0028 4489     		ldrh	r4, [r0, #10]
 174:./FWLIB/src/stm32f4xx_dcmi.c ****                      DCMI_InitStruct->DCMI_ExtendedDataMode);
 109              		.loc 1 174 0
 110 002a 8389     		ldrh	r3, [r0, #12]
 173:./FWLIB/src/stm32f4xx_dcmi.c ****                      DCMI_InitStruct->DCMI_CaptureRate |
 111              		.loc 1 173 0
 112 002c 4CEA0E00 		orr	r0, ip, lr
 113              	.LVL5:
ARM GAS  /tmp/cctCDyyg.s 			page 6


 114 0030 3843     		orrs	r0, r0, r7
 115 0032 3043     		orrs	r0, r0, r6
 116 0034 2843     		orrs	r0, r0, r5
 117 0036 2043     		orrs	r0, r0, r4
 118 0038 0343     		orrs	r3, r3, r0
 168:./FWLIB/src/stm32f4xx_dcmi.c ****                      DCMI_InitStruct->DCMI_SynchroMode |
 119              		.loc 1 168 0
 120 003a 1343     		orrs	r3, r3, r2
 121              	.LVL6:
 175:./FWLIB/src/stm32f4xx_dcmi.c **** 
 176:./FWLIB/src/stm32f4xx_dcmi.c ****   DCMI->CR = temp;                              
 122              		.loc 1 176 0
 123 003c 0B60     		str	r3, [r1]
 177:./FWLIB/src/stm32f4xx_dcmi.c **** }
 124              		.loc 1 177 0
 125 003e F0BD     		pop	{r4, r5, r6, r7, pc}
 126              	.L7:
 127              		.align	2
 128              	.L6:
 129 0040 00000550 		.word	1342504960
 130              		.cfi_endproc
 131              	.LFE113:
 133              		.section	.text.DCMI_StructInit,"ax",%progbits
 134              		.align	1
 135              		.global	DCMI_StructInit
 136              		.syntax unified
 137              		.thumb
 138              		.thumb_func
 139              		.fpu fpv4-sp-d16
 141              	DCMI_StructInit:
 142              	.LFB114:
 178:./FWLIB/src/stm32f4xx_dcmi.c **** 
 179:./FWLIB/src/stm32f4xx_dcmi.c **** /**
 180:./FWLIB/src/stm32f4xx_dcmi.c ****   * @brief  Fills each DCMI_InitStruct member with its default value.
 181:./FWLIB/src/stm32f4xx_dcmi.c ****   * @param  DCMI_InitStruct : pointer to a DCMI_InitTypeDef structure which will
 182:./FWLIB/src/stm32f4xx_dcmi.c ****   *         be initialized.
 183:./FWLIB/src/stm32f4xx_dcmi.c ****   * @retval None
 184:./FWLIB/src/stm32f4xx_dcmi.c ****   */
 185:./FWLIB/src/stm32f4xx_dcmi.c **** void DCMI_StructInit(DCMI_InitTypeDef* DCMI_InitStruct)
 186:./FWLIB/src/stm32f4xx_dcmi.c **** {
 143              		.loc 1 186 0
 144              		.cfi_startproc
 145              		@ args = 0, pretend = 0, frame = 0
 146              		@ frame_needed = 0, uses_anonymous_args = 0
 147              		@ link register save eliminated.
 148              	.LVL7:
 187:./FWLIB/src/stm32f4xx_dcmi.c ****   /* Set the default configuration */
 188:./FWLIB/src/stm32f4xx_dcmi.c ****   DCMI_InitStruct->DCMI_CaptureMode = DCMI_CaptureMode_Continuous;
 149              		.loc 1 188 0
 150 0000 0023     		movs	r3, #0
 151 0002 0380     		strh	r3, [r0]	@ movhi
 189:./FWLIB/src/stm32f4xx_dcmi.c ****   DCMI_InitStruct->DCMI_SynchroMode = DCMI_SynchroMode_Hardware;
 152              		.loc 1 189 0
 153 0004 4380     		strh	r3, [r0, #2]	@ movhi
 190:./FWLIB/src/stm32f4xx_dcmi.c ****   DCMI_InitStruct->DCMI_PCKPolarity = DCMI_PCKPolarity_Falling;
 154              		.loc 1 190 0
 155 0006 8380     		strh	r3, [r0, #4]	@ movhi
ARM GAS  /tmp/cctCDyyg.s 			page 7


 191:./FWLIB/src/stm32f4xx_dcmi.c ****   DCMI_InitStruct->DCMI_VSPolarity = DCMI_VSPolarity_Low;
 156              		.loc 1 191 0
 157 0008 C380     		strh	r3, [r0, #6]	@ movhi
 192:./FWLIB/src/stm32f4xx_dcmi.c ****   DCMI_InitStruct->DCMI_HSPolarity = DCMI_HSPolarity_Low;
 158              		.loc 1 192 0
 159 000a 0381     		strh	r3, [r0, #8]	@ movhi
 193:./FWLIB/src/stm32f4xx_dcmi.c ****   DCMI_InitStruct->DCMI_CaptureRate = DCMI_CaptureRate_All_Frame;
 160              		.loc 1 193 0
 161 000c 4381     		strh	r3, [r0, #10]	@ movhi
 194:./FWLIB/src/stm32f4xx_dcmi.c ****   DCMI_InitStruct->DCMI_ExtendedDataMode = DCMI_ExtendedDataMode_8b;
 162              		.loc 1 194 0
 163 000e 8381     		strh	r3, [r0, #12]	@ movhi
 195:./FWLIB/src/stm32f4xx_dcmi.c **** }
 164              		.loc 1 195 0
 165 0010 7047     		bx	lr
 166              		.cfi_endproc
 167              	.LFE114:
 169              		.section	.text.DCMI_CROPConfig,"ax",%progbits
 170              		.align	1
 171              		.global	DCMI_CROPConfig
 172              		.syntax unified
 173              		.thumb
 174              		.thumb_func
 175              		.fpu fpv4-sp-d16
 177              	DCMI_CROPConfig:
 178              	.LFB115:
 196:./FWLIB/src/stm32f4xx_dcmi.c **** 
 197:./FWLIB/src/stm32f4xx_dcmi.c **** /**
 198:./FWLIB/src/stm32f4xx_dcmi.c ****   * @brief  Initializes the DCMI peripheral CROP mode according to the specified
 199:./FWLIB/src/stm32f4xx_dcmi.c ****   *         parameters in the DCMI_CROPInitStruct.
 200:./FWLIB/src/stm32f4xx_dcmi.c ****   * @note   This function should be called before to enable and start the DCMI interface.   
 201:./FWLIB/src/stm32f4xx_dcmi.c ****   * @param  DCMI_CROPInitStruct:  pointer to a DCMI_CROPInitTypeDef structure that 
 202:./FWLIB/src/stm32f4xx_dcmi.c ****   *         contains the configuration information for the DCMI peripheral CROP mode.
 203:./FWLIB/src/stm32f4xx_dcmi.c ****   * @retval None
 204:./FWLIB/src/stm32f4xx_dcmi.c ****   */
 205:./FWLIB/src/stm32f4xx_dcmi.c **** void DCMI_CROPConfig(DCMI_CROPInitTypeDef* DCMI_CROPInitStruct)
 206:./FWLIB/src/stm32f4xx_dcmi.c **** {  
 179              		.loc 1 206 0
 180              		.cfi_startproc
 181              		@ args = 0, pretend = 0, frame = 0
 182              		@ frame_needed = 0, uses_anonymous_args = 0
 183              		@ link register save eliminated.
 184              	.LVL8:
 207:./FWLIB/src/stm32f4xx_dcmi.c ****   /* Sets the CROP window coordinates */
 208:./FWLIB/src/stm32f4xx_dcmi.c ****   DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
 185              		.loc 1 208 0
 186 0000 4388     		ldrh	r3, [r0, #2]
 209:./FWLIB/src/stm32f4xx_dcmi.c ****                   ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));
 187              		.loc 1 209 0
 188 0002 0288     		ldrh	r2, [r0]
 208:./FWLIB/src/stm32f4xx_dcmi.c ****                   ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));
 189              		.loc 1 208 0
 190 0004 43EA0243 		orr	r3, r3, r2, lsl #16
 191 0008 034A     		ldr	r2, .L10
 192 000a 1362     		str	r3, [r2, #32]
 210:./FWLIB/src/stm32f4xx_dcmi.c **** 
 211:./FWLIB/src/stm32f4xx_dcmi.c ****   /* Sets the CROP window size */
ARM GAS  /tmp/cctCDyyg.s 			page 8


 212:./FWLIB/src/stm32f4xx_dcmi.c ****   DCMI->CWSIZER = (uint32_t)(DCMI_CROPInitStruct->DCMI_CaptureCount |
 193              		.loc 1 212 0
 194 000c C388     		ldrh	r3, [r0, #6]
 213:./FWLIB/src/stm32f4xx_dcmi.c ****                   ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalLineCount << 16));
 195              		.loc 1 213 0
 196 000e 8188     		ldrh	r1, [r0, #4]
 212:./FWLIB/src/stm32f4xx_dcmi.c ****                   ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalLineCount << 16));
 197              		.loc 1 212 0
 198 0010 43EA0143 		orr	r3, r3, r1, lsl #16
 199 0014 5362     		str	r3, [r2, #36]
 214:./FWLIB/src/stm32f4xx_dcmi.c **** }
 200              		.loc 1 214 0
 201 0016 7047     		bx	lr
 202              	.L11:
 203              		.align	2
 204              	.L10:
 205 0018 00000550 		.word	1342504960
 206              		.cfi_endproc
 207              	.LFE115:
 209              		.section	.text.DCMI_CROPCmd,"ax",%progbits
 210              		.align	1
 211              		.global	DCMI_CROPCmd
 212              		.syntax unified
 213              		.thumb
 214              		.thumb_func
 215              		.fpu fpv4-sp-d16
 217              	DCMI_CROPCmd:
 218              	.LFB116:
 215:./FWLIB/src/stm32f4xx_dcmi.c **** 
 216:./FWLIB/src/stm32f4xx_dcmi.c **** /**
 217:./FWLIB/src/stm32f4xx_dcmi.c ****   * @brief  Enables or disables the DCMI Crop feature.
 218:./FWLIB/src/stm32f4xx_dcmi.c ****   * @note   This function should be called before to enable and start the DCMI interface.
 219:./FWLIB/src/stm32f4xx_dcmi.c ****   * @param  NewState: new state of the DCMI Crop feature. 
 220:./FWLIB/src/stm32f4xx_dcmi.c ****   *          This parameter can be: ENABLE or DISABLE.
 221:./FWLIB/src/stm32f4xx_dcmi.c ****   * @retval None
 222:./FWLIB/src/stm32f4xx_dcmi.c ****   */
 223:./FWLIB/src/stm32f4xx_dcmi.c **** void DCMI_CROPCmd(FunctionalState NewState)
 224:./FWLIB/src/stm32f4xx_dcmi.c **** {
 219              		.loc 1 224 0
 220              		.cfi_startproc
 221              		@ args = 0, pretend = 0, frame = 0
 222              		@ frame_needed = 0, uses_anonymous_args = 0
 223              		@ link register save eliminated.
 224              	.LVL9:
 225:./FWLIB/src/stm32f4xx_dcmi.c ****   /* Check the parameters */
 226:./FWLIB/src/stm32f4xx_dcmi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 227:./FWLIB/src/stm32f4xx_dcmi.c ****     
 228:./FWLIB/src/stm32f4xx_dcmi.c ****   if (NewState != DISABLE)
 225              		.loc 1 228 0
 226 0000 28B9     		cbnz	r0, .L15
 229:./FWLIB/src/stm32f4xx_dcmi.c ****   {
 230:./FWLIB/src/stm32f4xx_dcmi.c ****     /* Enable the DCMI Crop feature */
 231:./FWLIB/src/stm32f4xx_dcmi.c ****     DCMI->CR |= (uint32_t)DCMI_CR_CROP;
 232:./FWLIB/src/stm32f4xx_dcmi.c ****   }
 233:./FWLIB/src/stm32f4xx_dcmi.c ****   else
 234:./FWLIB/src/stm32f4xx_dcmi.c ****   {
 235:./FWLIB/src/stm32f4xx_dcmi.c ****     /* Disable the DCMI Crop feature */
ARM GAS  /tmp/cctCDyyg.s 			page 9


 236:./FWLIB/src/stm32f4xx_dcmi.c ****     DCMI->CR &= ~(uint32_t)DCMI_CR_CROP;
 227              		.loc 1 236 0
 228 0002 064A     		ldr	r2, .L16
 229 0004 1368     		ldr	r3, [r2]
 230 0006 23F00403 		bic	r3, r3, #4
 231 000a 1360     		str	r3, [r2]
 237:./FWLIB/src/stm32f4xx_dcmi.c ****   }
 238:./FWLIB/src/stm32f4xx_dcmi.c **** }
 232              		.loc 1 238 0
 233 000c 7047     		bx	lr
 234              	.L15:
 231:./FWLIB/src/stm32f4xx_dcmi.c ****   }
 235              		.loc 1 231 0
 236 000e 034A     		ldr	r2, .L16
 237 0010 1368     		ldr	r3, [r2]
 238 0012 43F00403 		orr	r3, r3, #4
 239 0016 1360     		str	r3, [r2]
 240 0018 7047     		bx	lr
 241              	.L17:
 242 001a 00BF     		.align	2
 243              	.L16:
 244 001c 00000550 		.word	1342504960
 245              		.cfi_endproc
 246              	.LFE116:
 248              		.section	.text.DCMI_SetEmbeddedSynchroCodes,"ax",%progbits
 249              		.align	1
 250              		.global	DCMI_SetEmbeddedSynchroCodes
 251              		.syntax unified
 252              		.thumb
 253              		.thumb_func
 254              		.fpu fpv4-sp-d16
 256              	DCMI_SetEmbeddedSynchroCodes:
 257              	.LFB117:
 239:./FWLIB/src/stm32f4xx_dcmi.c **** 
 240:./FWLIB/src/stm32f4xx_dcmi.c **** /**
 241:./FWLIB/src/stm32f4xx_dcmi.c ****   * @brief  Sets the embedded synchronization codes
 242:./FWLIB/src/stm32f4xx_dcmi.c ****   * @param  DCMI_CodesInitTypeDef: pointer to a DCMI_CodesInitTypeDef structure that
 243:./FWLIB/src/stm32f4xx_dcmi.c ****   *         contains the embedded synchronization codes for the DCMI peripheral.
 244:./FWLIB/src/stm32f4xx_dcmi.c ****   * @retval None
 245:./FWLIB/src/stm32f4xx_dcmi.c ****   */
 246:./FWLIB/src/stm32f4xx_dcmi.c **** void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
 247:./FWLIB/src/stm32f4xx_dcmi.c **** {
 258              		.loc 1 247 0
 259              		.cfi_startproc
 260              		@ args = 0, pretend = 0, frame = 0
 261              		@ frame_needed = 0, uses_anonymous_args = 0
 262              		@ link register save eliminated.
 263              	.LVL10:
 248:./FWLIB/src/stm32f4xx_dcmi.c ****   DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 264              		.loc 1 248 0
 265 0000 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 249:./FWLIB/src/stm32f4xx_dcmi.c ****                           ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
 266              		.loc 1 249 0
 267 0002 4278     		ldrb	r2, [r0, #1]	@ zero_extendqisi2
 248:./FWLIB/src/stm32f4xx_dcmi.c ****   DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 268              		.loc 1 248 0
 269 0004 43EA0223 		orr	r3, r3, r2, lsl #8
ARM GAS  /tmp/cctCDyyg.s 			page 10


 250:./FWLIB/src/stm32f4xx_dcmi.c ****                           ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
 270              		.loc 1 250 0
 271 0008 8278     		ldrb	r2, [r0, #2]	@ zero_extendqisi2
 249:./FWLIB/src/stm32f4xx_dcmi.c ****                           ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
 272              		.loc 1 249 0
 273 000a 43EA0243 		orr	r3, r3, r2, lsl #16
 251:./FWLIB/src/stm32f4xx_dcmi.c ****                           ((uint32_t)DCMI_CodesInitStruct->DCMI_FrameEndCode << 24));
 274              		.loc 1 251 0
 275 000e C278     		ldrb	r2, [r0, #3]	@ zero_extendqisi2
 248:./FWLIB/src/stm32f4xx_dcmi.c ****                           ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
 276              		.loc 1 248 0
 277 0010 43EA0263 		orr	r3, r3, r2, lsl #24
 278 0014 014A     		ldr	r2, .L19
 279 0016 9361     		str	r3, [r2, #24]
 252:./FWLIB/src/stm32f4xx_dcmi.c **** }
 280              		.loc 1 252 0
 281 0018 7047     		bx	lr
 282              	.L20:
 283 001a 00BF     		.align	2
 284              	.L19:
 285 001c 00000550 		.word	1342504960
 286              		.cfi_endproc
 287              	.LFE117:
 289              		.section	.text.DCMI_JPEGCmd,"ax",%progbits
 290              		.align	1
 291              		.global	DCMI_JPEGCmd
 292              		.syntax unified
 293              		.thumb
 294              		.thumb_func
 295              		.fpu fpv4-sp-d16
 297              	DCMI_JPEGCmd:
 298              	.LFB118:
 253:./FWLIB/src/stm32f4xx_dcmi.c **** 
 254:./FWLIB/src/stm32f4xx_dcmi.c **** /**
 255:./FWLIB/src/stm32f4xx_dcmi.c ****   * @brief  Enables or disables the DCMI JPEG format.
 256:./FWLIB/src/stm32f4xx_dcmi.c ****   * @note   The Crop and Embedded Synchronization features cannot be used in this mode.  
 257:./FWLIB/src/stm32f4xx_dcmi.c ****   * @param  NewState: new state of the DCMI JPEG format. 
 258:./FWLIB/src/stm32f4xx_dcmi.c ****   *          This parameter can be: ENABLE or DISABLE.
 259:./FWLIB/src/stm32f4xx_dcmi.c ****   * @retval None
 260:./FWLIB/src/stm32f4xx_dcmi.c ****   */
 261:./FWLIB/src/stm32f4xx_dcmi.c **** void DCMI_JPEGCmd(FunctionalState NewState)
 262:./FWLIB/src/stm32f4xx_dcmi.c **** {
 299              		.loc 1 262 0
 300              		.cfi_startproc
 301              		@ args = 0, pretend = 0, frame = 0
 302              		@ frame_needed = 0, uses_anonymous_args = 0
 303              		@ link register save eliminated.
 304              	.LVL11:
 263:./FWLIB/src/stm32f4xx_dcmi.c ****   /* Check the parameters */
 264:./FWLIB/src/stm32f4xx_dcmi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 265:./FWLIB/src/stm32f4xx_dcmi.c ****  
 266:./FWLIB/src/stm32f4xx_dcmi.c ****   if (NewState != DISABLE)
 305              		.loc 1 266 0
 306 0000 28B9     		cbnz	r0, .L24
 267:./FWLIB/src/stm32f4xx_dcmi.c ****   {
 268:./FWLIB/src/stm32f4xx_dcmi.c ****     /* Enable the DCMI JPEG format */
 269:./FWLIB/src/stm32f4xx_dcmi.c ****     DCMI->CR |= (uint32_t)DCMI_CR_JPEG;
ARM GAS  /tmp/cctCDyyg.s 			page 11


 270:./FWLIB/src/stm32f4xx_dcmi.c ****   }
 271:./FWLIB/src/stm32f4xx_dcmi.c ****   else
 272:./FWLIB/src/stm32f4xx_dcmi.c ****   {
 273:./FWLIB/src/stm32f4xx_dcmi.c ****     /* Disable the DCMI JPEG format */
 274:./FWLIB/src/stm32f4xx_dcmi.c ****     DCMI->CR &= ~(uint32_t)DCMI_CR_JPEG;
 307              		.loc 1 274 0
 308 0002 064A     		ldr	r2, .L25
 309 0004 1368     		ldr	r3, [r2]
 310 0006 23F00803 		bic	r3, r3, #8
 311 000a 1360     		str	r3, [r2]
 275:./FWLIB/src/stm32f4xx_dcmi.c ****   }
 276:./FWLIB/src/stm32f4xx_dcmi.c **** }
 312              		.loc 1 276 0
 313 000c 7047     		bx	lr
 314              	.L24:
 269:./FWLIB/src/stm32f4xx_dcmi.c ****   }
 315              		.loc 1 269 0
 316 000e 034A     		ldr	r2, .L25
 317 0010 1368     		ldr	r3, [r2]
 318 0012 43F00803 		orr	r3, r3, #8
 319 0016 1360     		str	r3, [r2]
 320 0018 7047     		bx	lr
 321              	.L26:
 322 001a 00BF     		.align	2
 323              	.L25:
 324 001c 00000550 		.word	1342504960
 325              		.cfi_endproc
 326              	.LFE118:
 328              		.section	.text.DCMI_Cmd,"ax",%progbits
 329              		.align	1
 330              		.global	DCMI_Cmd
 331              		.syntax unified
 332              		.thumb
 333              		.thumb_func
 334              		.fpu fpv4-sp-d16
 336              	DCMI_Cmd:
 337              	.LFB119:
 277:./FWLIB/src/stm32f4xx_dcmi.c **** /**
 278:./FWLIB/src/stm32f4xx_dcmi.c ****   * @}
 279:./FWLIB/src/stm32f4xx_dcmi.c ****   */
 280:./FWLIB/src/stm32f4xx_dcmi.c **** 
 281:./FWLIB/src/stm32f4xx_dcmi.c **** /** @defgroup DCMI_Group2 Image capture functions
 282:./FWLIB/src/stm32f4xx_dcmi.c ****  *  @brief   Image capture functions
 283:./FWLIB/src/stm32f4xx_dcmi.c ****  *
 284:./FWLIB/src/stm32f4xx_dcmi.c **** @verbatim   
 285:./FWLIB/src/stm32f4xx_dcmi.c ****  ===============================================================================
 286:./FWLIB/src/stm32f4xx_dcmi.c ****                     ##### Image capture functions #####
 287:./FWLIB/src/stm32f4xx_dcmi.c ****  ===============================================================================  
 288:./FWLIB/src/stm32f4xx_dcmi.c **** 
 289:./FWLIB/src/stm32f4xx_dcmi.c **** @endverbatim
 290:./FWLIB/src/stm32f4xx_dcmi.c ****   * @{
 291:./FWLIB/src/stm32f4xx_dcmi.c ****   */
 292:./FWLIB/src/stm32f4xx_dcmi.c ****   
 293:./FWLIB/src/stm32f4xx_dcmi.c **** /**
 294:./FWLIB/src/stm32f4xx_dcmi.c ****   * @brief  Enables or disables the DCMI interface.
 295:./FWLIB/src/stm32f4xx_dcmi.c ****   * @param  NewState: new state of the DCMI interface. 
 296:./FWLIB/src/stm32f4xx_dcmi.c ****   *          This parameter can be: ENABLE or DISABLE.
ARM GAS  /tmp/cctCDyyg.s 			page 12


 297:./FWLIB/src/stm32f4xx_dcmi.c ****   * @retval None
 298:./FWLIB/src/stm32f4xx_dcmi.c ****   */
 299:./FWLIB/src/stm32f4xx_dcmi.c **** void DCMI_Cmd(FunctionalState NewState)
 300:./FWLIB/src/stm32f4xx_dcmi.c **** {
 338              		.loc 1 300 0
 339              		.cfi_startproc
 340              		@ args = 0, pretend = 0, frame = 0
 341              		@ frame_needed = 0, uses_anonymous_args = 0
 342              		@ link register save eliminated.
 343              	.LVL12:
 301:./FWLIB/src/stm32f4xx_dcmi.c ****   /* Check the parameters */
 302:./FWLIB/src/stm32f4xx_dcmi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 303:./FWLIB/src/stm32f4xx_dcmi.c ****   
 304:./FWLIB/src/stm32f4xx_dcmi.c ****   if (NewState != DISABLE)
 344              		.loc 1 304 0
 345 0000 28B9     		cbnz	r0, .L30
 305:./FWLIB/src/stm32f4xx_dcmi.c ****   {
 306:./FWLIB/src/stm32f4xx_dcmi.c ****     /* Enable the DCMI by setting ENABLE bit */
 307:./FWLIB/src/stm32f4xx_dcmi.c ****     DCMI->CR |= (uint32_t)DCMI_CR_ENABLE;
 308:./FWLIB/src/stm32f4xx_dcmi.c ****   }
 309:./FWLIB/src/stm32f4xx_dcmi.c ****   else
 310:./FWLIB/src/stm32f4xx_dcmi.c ****   {
 311:./FWLIB/src/stm32f4xx_dcmi.c ****     /* Disable the DCMI by clearing ENABLE bit */
 312:./FWLIB/src/stm32f4xx_dcmi.c ****     DCMI->CR &= ~(uint32_t)DCMI_CR_ENABLE;
 346              		.loc 1 312 0
 347 0002 064A     		ldr	r2, .L31
 348 0004 1368     		ldr	r3, [r2]
 349 0006 23F48043 		bic	r3, r3, #16384
 350 000a 1360     		str	r3, [r2]
 313:./FWLIB/src/stm32f4xx_dcmi.c ****   }
 314:./FWLIB/src/stm32f4xx_dcmi.c **** }
 351              		.loc 1 314 0
 352 000c 7047     		bx	lr
 353              	.L30:
 307:./FWLIB/src/stm32f4xx_dcmi.c ****   }
 354              		.loc 1 307 0
 355 000e 034A     		ldr	r2, .L31
 356 0010 1368     		ldr	r3, [r2]
 357 0012 43F48043 		orr	r3, r3, #16384
 358 0016 1360     		str	r3, [r2]
 359 0018 7047     		bx	lr
 360              	.L32:
 361 001a 00BF     		.align	2
 362              	.L31:
 363 001c 00000550 		.word	1342504960
 364              		.cfi_endproc
 365              	.LFE119:
 367              		.section	.text.DCMI_CaptureCmd,"ax",%progbits
 368              		.align	1
 369              		.global	DCMI_CaptureCmd
 370              		.syntax unified
 371              		.thumb
 372              		.thumb_func
 373              		.fpu fpv4-sp-d16
 375              	DCMI_CaptureCmd:
 376              	.LFB120:
 315:./FWLIB/src/stm32f4xx_dcmi.c **** 
ARM GAS  /tmp/cctCDyyg.s 			page 13


 316:./FWLIB/src/stm32f4xx_dcmi.c **** /**
 317:./FWLIB/src/stm32f4xx_dcmi.c ****   * @brief  Enables or disables the DCMI Capture.
 318:./FWLIB/src/stm32f4xx_dcmi.c ****   * @param  NewState: new state of the DCMI capture. 
 319:./FWLIB/src/stm32f4xx_dcmi.c ****   *          This parameter can be: ENABLE or DISABLE.
 320:./FWLIB/src/stm32f4xx_dcmi.c ****   * @retval None
 321:./FWLIB/src/stm32f4xx_dcmi.c ****   */
 322:./FWLIB/src/stm32f4xx_dcmi.c **** void DCMI_CaptureCmd(FunctionalState NewState)
 323:./FWLIB/src/stm32f4xx_dcmi.c **** {
 377              		.loc 1 323 0
 378              		.cfi_startproc
 379              		@ args = 0, pretend = 0, frame = 0
 380              		@ frame_needed = 0, uses_anonymous_args = 0
 381              		@ link register save eliminated.
 382              	.LVL13:
 324:./FWLIB/src/stm32f4xx_dcmi.c ****   /* Check the parameters */
 325:./FWLIB/src/stm32f4xx_dcmi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 326:./FWLIB/src/stm32f4xx_dcmi.c ****     
 327:./FWLIB/src/stm32f4xx_dcmi.c ****   if (NewState != DISABLE)
 383              		.loc 1 327 0
 384 0000 28B9     		cbnz	r0, .L36
 328:./FWLIB/src/stm32f4xx_dcmi.c ****   {
 329:./FWLIB/src/stm32f4xx_dcmi.c ****     /* Enable the DCMI Capture */
 330:./FWLIB/src/stm32f4xx_dcmi.c ****     DCMI->CR |= (uint32_t)DCMI_CR_CAPTURE;
 331:./FWLIB/src/stm32f4xx_dcmi.c ****   }
 332:./FWLIB/src/stm32f4xx_dcmi.c ****   else
 333:./FWLIB/src/stm32f4xx_dcmi.c ****   {
 334:./FWLIB/src/stm32f4xx_dcmi.c ****     /* Disable the DCMI Capture */
 335:./FWLIB/src/stm32f4xx_dcmi.c ****     DCMI->CR &= ~(uint32_t)DCMI_CR_CAPTURE;
 385              		.loc 1 335 0
 386 0002 064A     		ldr	r2, .L37
 387 0004 1368     		ldr	r3, [r2]
 388 0006 23F00103 		bic	r3, r3, #1
 389 000a 1360     		str	r3, [r2]
 336:./FWLIB/src/stm32f4xx_dcmi.c ****   }
 337:./FWLIB/src/stm32f4xx_dcmi.c **** }
 390              		.loc 1 337 0
 391 000c 7047     		bx	lr
 392              	.L36:
 330:./FWLIB/src/stm32f4xx_dcmi.c ****   }
 393              		.loc 1 330 0
 394 000e 034A     		ldr	r2, .L37
 395 0010 1368     		ldr	r3, [r2]
 396 0012 43F00103 		orr	r3, r3, #1
 397 0016 1360     		str	r3, [r2]
 398 0018 7047     		bx	lr
 399              	.L38:
 400 001a 00BF     		.align	2
 401              	.L37:
 402 001c 00000550 		.word	1342504960
 403              		.cfi_endproc
 404              	.LFE120:
 406              		.section	.text.DCMI_ReadData,"ax",%progbits
 407              		.align	1
 408              		.global	DCMI_ReadData
 409              		.syntax unified
 410              		.thumb
 411              		.thumb_func
ARM GAS  /tmp/cctCDyyg.s 			page 14


 412              		.fpu fpv4-sp-d16
 414              	DCMI_ReadData:
 415              	.LFB121:
 338:./FWLIB/src/stm32f4xx_dcmi.c **** 
 339:./FWLIB/src/stm32f4xx_dcmi.c **** /**
 340:./FWLIB/src/stm32f4xx_dcmi.c ****   * @brief  Reads the data stored in the DR register.
 341:./FWLIB/src/stm32f4xx_dcmi.c ****   * @param  None 
 342:./FWLIB/src/stm32f4xx_dcmi.c ****   * @retval Data register value
 343:./FWLIB/src/stm32f4xx_dcmi.c ****   */
 344:./FWLIB/src/stm32f4xx_dcmi.c **** uint32_t DCMI_ReadData(void)
 345:./FWLIB/src/stm32f4xx_dcmi.c **** {
 416              		.loc 1 345 0
 417              		.cfi_startproc
 418              		@ args = 0, pretend = 0, frame = 0
 419              		@ frame_needed = 0, uses_anonymous_args = 0
 420              		@ link register save eliminated.
 346:./FWLIB/src/stm32f4xx_dcmi.c ****   return DCMI->DR;
 421              		.loc 1 346 0
 422 0000 014B     		ldr	r3, .L40
 423 0002 986A     		ldr	r0, [r3, #40]
 347:./FWLIB/src/stm32f4xx_dcmi.c **** }
 424              		.loc 1 347 0
 425 0004 7047     		bx	lr
 426              	.L41:
 427 0006 00BF     		.align	2
 428              	.L40:
 429 0008 00000550 		.word	1342504960
 430              		.cfi_endproc
 431              	.LFE121:
 433              		.section	.text.DCMI_ITConfig,"ax",%progbits
 434              		.align	1
 435              		.global	DCMI_ITConfig
 436              		.syntax unified
 437              		.thumb
 438              		.thumb_func
 439              		.fpu fpv4-sp-d16
 441              	DCMI_ITConfig:
 442              	.LFB122:
 348:./FWLIB/src/stm32f4xx_dcmi.c **** /**
 349:./FWLIB/src/stm32f4xx_dcmi.c ****   * @}
 350:./FWLIB/src/stm32f4xx_dcmi.c ****   */
 351:./FWLIB/src/stm32f4xx_dcmi.c **** 
 352:./FWLIB/src/stm32f4xx_dcmi.c **** /** @defgroup DCMI_Group3 Interrupts and flags management functions
 353:./FWLIB/src/stm32f4xx_dcmi.c ****  *  @brief   Interrupts and flags management functions
 354:./FWLIB/src/stm32f4xx_dcmi.c ****  *
 355:./FWLIB/src/stm32f4xx_dcmi.c **** @verbatim   
 356:./FWLIB/src/stm32f4xx_dcmi.c ****  ===============================================================================
 357:./FWLIB/src/stm32f4xx_dcmi.c ****              ##### Interrupts and flags management functions #####
 358:./FWLIB/src/stm32f4xx_dcmi.c ****  ===============================================================================  
 359:./FWLIB/src/stm32f4xx_dcmi.c **** 
 360:./FWLIB/src/stm32f4xx_dcmi.c **** @endverbatim
 361:./FWLIB/src/stm32f4xx_dcmi.c ****   * @{
 362:./FWLIB/src/stm32f4xx_dcmi.c ****   */
 363:./FWLIB/src/stm32f4xx_dcmi.c **** 
 364:./FWLIB/src/stm32f4xx_dcmi.c **** /**
 365:./FWLIB/src/stm32f4xx_dcmi.c ****   * @brief  Enables or disables the DCMI interface interrupts.
 366:./FWLIB/src/stm32f4xx_dcmi.c ****   * @param  DCMI_IT: specifies the DCMI interrupt sources to be enabled or disabled. 
ARM GAS  /tmp/cctCDyyg.s 			page 15


 367:./FWLIB/src/stm32f4xx_dcmi.c ****   *          This parameter can be any combination of the following values:
 368:./FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_IT_FRAME: Frame capture complete interrupt mask
 369:./FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_IT_OVF: Overflow interrupt mask
 370:./FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_IT_ERR: Synchronization error interrupt mask
 371:./FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_IT_VSYNC: VSYNC interrupt mask
 372:./FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_IT_LINE: Line interrupt mask
 373:./FWLIB/src/stm32f4xx_dcmi.c ****   * @param  NewState: new state of the specified DCMI interrupts.
 374:./FWLIB/src/stm32f4xx_dcmi.c ****   *          This parameter can be: ENABLE or DISABLE.
 375:./FWLIB/src/stm32f4xx_dcmi.c ****   * @retval None
 376:./FWLIB/src/stm32f4xx_dcmi.c ****   */
 377:./FWLIB/src/stm32f4xx_dcmi.c **** void DCMI_ITConfig(uint16_t DCMI_IT, FunctionalState NewState)
 378:./FWLIB/src/stm32f4xx_dcmi.c **** {
 443              		.loc 1 378 0
 444              		.cfi_startproc
 445              		@ args = 0, pretend = 0, frame = 0
 446              		@ frame_needed = 0, uses_anonymous_args = 0
 447              		@ link register save eliminated.
 448              	.LVL14:
 379:./FWLIB/src/stm32f4xx_dcmi.c ****   /* Check the parameters */
 380:./FWLIB/src/stm32f4xx_dcmi.c ****   assert_param(IS_DCMI_CONFIG_IT(DCMI_IT));
 381:./FWLIB/src/stm32f4xx_dcmi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 382:./FWLIB/src/stm32f4xx_dcmi.c ****   
 383:./FWLIB/src/stm32f4xx_dcmi.c ****   if (NewState != DISABLE)
 449              		.loc 1 383 0
 450 0000 31B9     		cbnz	r1, .L45
 384:./FWLIB/src/stm32f4xx_dcmi.c ****   {
 385:./FWLIB/src/stm32f4xx_dcmi.c ****     /* Enable the Interrupt sources */
 386:./FWLIB/src/stm32f4xx_dcmi.c ****     DCMI->IER |= DCMI_IT;
 387:./FWLIB/src/stm32f4xx_dcmi.c ****   }
 388:./FWLIB/src/stm32f4xx_dcmi.c ****   else
 389:./FWLIB/src/stm32f4xx_dcmi.c ****   {
 390:./FWLIB/src/stm32f4xx_dcmi.c ****     /* Disable the Interrupt sources */
 391:./FWLIB/src/stm32f4xx_dcmi.c ****     DCMI->IER &= (uint16_t)(~DCMI_IT);
 451              		.loc 1 391 0
 452 0002 064A     		ldr	r2, .L46
 453 0004 D368     		ldr	r3, [r2, #12]
 454 0006 C043     		mvns	r0, r0
 455              	.LVL15:
 456 0008 80B2     		uxth	r0, r0
 457 000a 1840     		ands	r0, r0, r3
 458 000c D060     		str	r0, [r2, #12]
 392:./FWLIB/src/stm32f4xx_dcmi.c ****   }  
 393:./FWLIB/src/stm32f4xx_dcmi.c **** }
 459              		.loc 1 393 0
 460 000e 7047     		bx	lr
 461              	.LVL16:
 462              	.L45:
 386:./FWLIB/src/stm32f4xx_dcmi.c ****   }
 463              		.loc 1 386 0
 464 0010 024B     		ldr	r3, .L46
 465 0012 DA68     		ldr	r2, [r3, #12]
 466 0014 1043     		orrs	r0, r0, r2
 467              	.LVL17:
 468 0016 D860     		str	r0, [r3, #12]
 469 0018 7047     		bx	lr
 470              	.L47:
 471 001a 00BF     		.align	2
ARM GAS  /tmp/cctCDyyg.s 			page 16


 472              	.L46:
 473 001c 00000550 		.word	1342504960
 474              		.cfi_endproc
 475              	.LFE122:
 477              		.section	.text.DCMI_GetFlagStatus,"ax",%progbits
 478              		.align	1
 479              		.global	DCMI_GetFlagStatus
 480              		.syntax unified
 481              		.thumb
 482              		.thumb_func
 483              		.fpu fpv4-sp-d16
 485              	DCMI_GetFlagStatus:
 486              	.LFB123:
 394:./FWLIB/src/stm32f4xx_dcmi.c **** 
 395:./FWLIB/src/stm32f4xx_dcmi.c **** /**
 396:./FWLIB/src/stm32f4xx_dcmi.c ****   * @brief  Checks whether the  DCMI interface flag is set or not.
 397:./FWLIB/src/stm32f4xx_dcmi.c ****   * @param  DCMI_FLAG: specifies the flag to check.
 398:./FWLIB/src/stm32f4xx_dcmi.c ****   *          This parameter can be one of the following values:
 399:./FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_FLAG_FRAMERI: Frame capture complete Raw flag mask
 400:./FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_FLAG_OVFRI: Overflow Raw flag mask
 401:./FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_FLAG_ERRRI: Synchronization error Raw flag mask
 402:./FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_FLAG_VSYNCRI: VSYNC Raw flag mask
 403:./FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_FLAG_LINERI: Line Raw flag mask
 404:./FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_FLAG_FRAMEMI: Frame capture complete Masked flag mask
 405:./FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_FLAG_OVFMI: Overflow Masked flag mask
 406:./FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_FLAG_ERRMI: Synchronization error Masked flag mask
 407:./FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_FLAG_VSYNCMI: VSYNC Masked flag mask
 408:./FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_FLAG_LINEMI: Line Masked flag mask
 409:./FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_FLAG_HSYNC: HSYNC flag mask
 410:./FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_FLAG_VSYNC: VSYNC flag mask
 411:./FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_FLAG_FNE: Fifo not empty flag mask
 412:./FWLIB/src/stm32f4xx_dcmi.c ****   * @retval The new state of DCMI_FLAG (SET or RESET).
 413:./FWLIB/src/stm32f4xx_dcmi.c ****   */
 414:./FWLIB/src/stm32f4xx_dcmi.c **** FlagStatus DCMI_GetFlagStatus(uint16_t DCMI_FLAG)
 415:./FWLIB/src/stm32f4xx_dcmi.c **** {
 487              		.loc 1 415 0
 488              		.cfi_startproc
 489              		@ args = 0, pretend = 0, frame = 0
 490              		@ frame_needed = 0, uses_anonymous_args = 0
 491              		@ link register save eliminated.
 492              	.LVL18:
 416:./FWLIB/src/stm32f4xx_dcmi.c ****   FlagStatus bitstatus = RESET;
 417:./FWLIB/src/stm32f4xx_dcmi.c ****   uint32_t dcmireg, tempreg = 0;
 418:./FWLIB/src/stm32f4xx_dcmi.c **** 
 419:./FWLIB/src/stm32f4xx_dcmi.c ****   /* Check the parameters */
 420:./FWLIB/src/stm32f4xx_dcmi.c ****   assert_param(IS_DCMI_GET_FLAG(DCMI_FLAG));
 421:./FWLIB/src/stm32f4xx_dcmi.c ****   
 422:./FWLIB/src/stm32f4xx_dcmi.c ****   /* Get the DCMI register index */
 423:./FWLIB/src/stm32f4xx_dcmi.c ****   dcmireg = (((uint16_t)DCMI_FLAG) >> 12);
 424:./FWLIB/src/stm32f4xx_dcmi.c ****   
 425:./FWLIB/src/stm32f4xx_dcmi.c ****   if (dcmireg == 0x00) /* The FLAG is in RISR register */
 493              		.loc 1 425 0
 494 0000 030B     		lsrs	r3, r0, #12
 495              	.LVL19:
 496 0002 05D1     		bne	.L49
 426:./FWLIB/src/stm32f4xx_dcmi.c ****   {
 427:./FWLIB/src/stm32f4xx_dcmi.c ****     tempreg= DCMI->RISR;
ARM GAS  /tmp/cctCDyyg.s 			page 17


 497              		.loc 1 427 0
 498 0004 074B     		ldr	r3, .L56
 499              	.LVL20:
 500 0006 9B68     		ldr	r3, [r3, #8]
 501              	.LVL21:
 502              	.L50:
 428:./FWLIB/src/stm32f4xx_dcmi.c ****   }
 429:./FWLIB/src/stm32f4xx_dcmi.c ****   else if (dcmireg == 0x02) /* The FLAG is in SR register */
 430:./FWLIB/src/stm32f4xx_dcmi.c ****   {
 431:./FWLIB/src/stm32f4xx_dcmi.c ****     tempreg = DCMI->SR;
 432:./FWLIB/src/stm32f4xx_dcmi.c ****   }
 433:./FWLIB/src/stm32f4xx_dcmi.c ****   else /* The FLAG is in MISR register */
 434:./FWLIB/src/stm32f4xx_dcmi.c ****   {
 435:./FWLIB/src/stm32f4xx_dcmi.c ****     tempreg = DCMI->MISR;
 436:./FWLIB/src/stm32f4xx_dcmi.c ****   }
 437:./FWLIB/src/stm32f4xx_dcmi.c ****   
 438:./FWLIB/src/stm32f4xx_dcmi.c ****   if ((tempreg & DCMI_FLAG) != (uint16_t)RESET )
 503              		.loc 1 438 0
 504 0008 1842     		tst	r0, r3
 505 000a 09D1     		bne	.L54
 439:./FWLIB/src/stm32f4xx_dcmi.c ****   {
 440:./FWLIB/src/stm32f4xx_dcmi.c ****     bitstatus = SET;
 441:./FWLIB/src/stm32f4xx_dcmi.c ****   }
 442:./FWLIB/src/stm32f4xx_dcmi.c ****   else
 443:./FWLIB/src/stm32f4xx_dcmi.c ****   {
 444:./FWLIB/src/stm32f4xx_dcmi.c ****     bitstatus = RESET;
 506              		.loc 1 444 0
 507 000c 0020     		movs	r0, #0
 508              	.LVL22:
 445:./FWLIB/src/stm32f4xx_dcmi.c ****   }
 446:./FWLIB/src/stm32f4xx_dcmi.c ****   /* Return the DCMI_FLAG status */
 447:./FWLIB/src/stm32f4xx_dcmi.c ****   return  bitstatus;
 448:./FWLIB/src/stm32f4xx_dcmi.c **** }
 509              		.loc 1 448 0
 510 000e 7047     		bx	lr
 511              	.LVL23:
 512              	.L49:
 429:./FWLIB/src/stm32f4xx_dcmi.c ****   {
 513              		.loc 1 429 0
 514 0010 022B     		cmp	r3, #2
 515 0012 02D0     		beq	.L55
 435:./FWLIB/src/stm32f4xx_dcmi.c ****   }
 516              		.loc 1 435 0
 517 0014 034B     		ldr	r3, .L56
 518              	.LVL24:
 519 0016 1B69     		ldr	r3, [r3, #16]
 520              	.LVL25:
 521 0018 F6E7     		b	.L50
 522              	.LVL26:
 523              	.L55:
 431:./FWLIB/src/stm32f4xx_dcmi.c ****   }
 524              		.loc 1 431 0
 525 001a 024B     		ldr	r3, .L56
 526              	.LVL27:
 527 001c 5B68     		ldr	r3, [r3, #4]
 528              	.LVL28:
 529 001e F3E7     		b	.L50
ARM GAS  /tmp/cctCDyyg.s 			page 18


 530              	.L54:
 440:./FWLIB/src/stm32f4xx_dcmi.c ****   }
 531              		.loc 1 440 0
 532 0020 0120     		movs	r0, #1
 533              	.LVL29:
 534 0022 7047     		bx	lr
 535              	.L57:
 536              		.align	2
 537              	.L56:
 538 0024 00000550 		.word	1342504960
 539              		.cfi_endproc
 540              	.LFE123:
 542              		.section	.text.DCMI_ClearFlag,"ax",%progbits
 543              		.align	1
 544              		.global	DCMI_ClearFlag
 545              		.syntax unified
 546              		.thumb
 547              		.thumb_func
 548              		.fpu fpv4-sp-d16
 550              	DCMI_ClearFlag:
 551              	.LFB124:
 449:./FWLIB/src/stm32f4xx_dcmi.c **** 
 450:./FWLIB/src/stm32f4xx_dcmi.c **** /**
 451:./FWLIB/src/stm32f4xx_dcmi.c ****   * @brief  Clears the DCMI's pending flags.
 452:./FWLIB/src/stm32f4xx_dcmi.c ****   * @param  DCMI_FLAG: specifies the flag to clear.
 453:./FWLIB/src/stm32f4xx_dcmi.c ****   *          This parameter can be any combination of the following values:
 454:./FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_FLAG_FRAMERI: Frame capture complete Raw flag mask
 455:./FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_FLAG_OVFRI: Overflow Raw flag mask
 456:./FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_FLAG_ERRRI: Synchronization error Raw flag mask
 457:./FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_FLAG_VSYNCRI: VSYNC Raw flag mask
 458:./FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_FLAG_LINERI: Line Raw flag mask
 459:./FWLIB/src/stm32f4xx_dcmi.c ****   * @retval None
 460:./FWLIB/src/stm32f4xx_dcmi.c ****   */
 461:./FWLIB/src/stm32f4xx_dcmi.c **** void DCMI_ClearFlag(uint16_t DCMI_FLAG)
 462:./FWLIB/src/stm32f4xx_dcmi.c **** {
 552              		.loc 1 462 0
 553              		.cfi_startproc
 554              		@ args = 0, pretend = 0, frame = 0
 555              		@ frame_needed = 0, uses_anonymous_args = 0
 556              		@ link register save eliminated.
 557              	.LVL30:
 463:./FWLIB/src/stm32f4xx_dcmi.c ****   /* Check the parameters */
 464:./FWLIB/src/stm32f4xx_dcmi.c ****   assert_param(IS_DCMI_CLEAR_FLAG(DCMI_FLAG));
 465:./FWLIB/src/stm32f4xx_dcmi.c ****   
 466:./FWLIB/src/stm32f4xx_dcmi.c ****   /* Clear the flag by writing in the ICR register 1 in the corresponding 
 467:./FWLIB/src/stm32f4xx_dcmi.c ****   Flag position*/
 468:./FWLIB/src/stm32f4xx_dcmi.c ****   
 469:./FWLIB/src/stm32f4xx_dcmi.c ****   DCMI->ICR = DCMI_FLAG;
 558              		.loc 1 469 0
 559 0000 014B     		ldr	r3, .L59
 560 0002 5861     		str	r0, [r3, #20]
 470:./FWLIB/src/stm32f4xx_dcmi.c **** }
 561              		.loc 1 470 0
 562 0004 7047     		bx	lr
 563              	.L60:
 564 0006 00BF     		.align	2
 565              	.L59:
ARM GAS  /tmp/cctCDyyg.s 			page 19


 566 0008 00000550 		.word	1342504960
 567              		.cfi_endproc
 568              	.LFE124:
 570              		.section	.text.DCMI_GetITStatus,"ax",%progbits
 571              		.align	1
 572              		.global	DCMI_GetITStatus
 573              		.syntax unified
 574              		.thumb
 575              		.thumb_func
 576              		.fpu fpv4-sp-d16
 578              	DCMI_GetITStatus:
 579              	.LFB125:
 471:./FWLIB/src/stm32f4xx_dcmi.c **** 
 472:./FWLIB/src/stm32f4xx_dcmi.c **** /**
 473:./FWLIB/src/stm32f4xx_dcmi.c ****   * @brief  Checks whether the DCMI interrupt has occurred or not.
 474:./FWLIB/src/stm32f4xx_dcmi.c ****   * @param  DCMI_IT: specifies the DCMI interrupt source to check.
 475:./FWLIB/src/stm32f4xx_dcmi.c ****   *          This parameter can be one of the following values:
 476:./FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_IT_FRAME: Frame capture complete interrupt mask
 477:./FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_IT_OVF: Overflow interrupt mask
 478:./FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_IT_ERR: Synchronization error interrupt mask
 479:./FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_IT_VSYNC: VSYNC interrupt mask
 480:./FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_IT_LINE: Line interrupt mask
 481:./FWLIB/src/stm32f4xx_dcmi.c ****   * @retval The new state of DCMI_IT (SET or RESET).
 482:./FWLIB/src/stm32f4xx_dcmi.c ****   */
 483:./FWLIB/src/stm32f4xx_dcmi.c **** ITStatus DCMI_GetITStatus(uint16_t DCMI_IT)
 484:./FWLIB/src/stm32f4xx_dcmi.c **** {
 580              		.loc 1 484 0
 581              		.cfi_startproc
 582              		@ args = 0, pretend = 0, frame = 0
 583              		@ frame_needed = 0, uses_anonymous_args = 0
 584              		@ link register save eliminated.
 585              	.LVL31:
 485:./FWLIB/src/stm32f4xx_dcmi.c ****   ITStatus bitstatus = RESET;
 486:./FWLIB/src/stm32f4xx_dcmi.c ****   uint32_t itstatus = 0;
 487:./FWLIB/src/stm32f4xx_dcmi.c ****   
 488:./FWLIB/src/stm32f4xx_dcmi.c ****   /* Check the parameters */
 489:./FWLIB/src/stm32f4xx_dcmi.c ****   assert_param(IS_DCMI_GET_IT(DCMI_IT));
 490:./FWLIB/src/stm32f4xx_dcmi.c ****   
 491:./FWLIB/src/stm32f4xx_dcmi.c ****   itstatus = DCMI->MISR & DCMI_IT; /* Only masked interrupts are checked */
 586              		.loc 1 491 0
 587 0000 034B     		ldr	r3, .L65
 588 0002 1B69     		ldr	r3, [r3, #16]
 589              	.LVL32:
 492:./FWLIB/src/stm32f4xx_dcmi.c ****   
 493:./FWLIB/src/stm32f4xx_dcmi.c ****   if ((itstatus != (uint16_t)RESET))
 590              		.loc 1 493 0
 591 0004 0342     		tst	r3, r0
 592 0006 01D1     		bne	.L64
 494:./FWLIB/src/stm32f4xx_dcmi.c ****   {
 495:./FWLIB/src/stm32f4xx_dcmi.c ****     bitstatus = SET;
 496:./FWLIB/src/stm32f4xx_dcmi.c ****   }
 497:./FWLIB/src/stm32f4xx_dcmi.c ****   else
 498:./FWLIB/src/stm32f4xx_dcmi.c ****   {
 499:./FWLIB/src/stm32f4xx_dcmi.c ****     bitstatus = RESET;
 593              		.loc 1 499 0
 594 0008 0020     		movs	r0, #0
 595              	.LVL33:
ARM GAS  /tmp/cctCDyyg.s 			page 20


 500:./FWLIB/src/stm32f4xx_dcmi.c ****   }
 501:./FWLIB/src/stm32f4xx_dcmi.c ****   return bitstatus;
 502:./FWLIB/src/stm32f4xx_dcmi.c **** }
 596              		.loc 1 502 0
 597 000a 7047     		bx	lr
 598              	.LVL34:
 599              	.L64:
 495:./FWLIB/src/stm32f4xx_dcmi.c ****   }
 600              		.loc 1 495 0
 601 000c 0120     		movs	r0, #1
 602              	.LVL35:
 603 000e 7047     		bx	lr
 604              	.L66:
 605              		.align	2
 606              	.L65:
 607 0010 00000550 		.word	1342504960
 608              		.cfi_endproc
 609              	.LFE125:
 611              		.section	.text.DCMI_ClearITPendingBit,"ax",%progbits
 612              		.align	1
 613              		.global	DCMI_ClearITPendingBit
 614              		.syntax unified
 615              		.thumb
 616              		.thumb_func
 617              		.fpu fpv4-sp-d16
 619              	DCMI_ClearITPendingBit:
 620              	.LFB126:
 503:./FWLIB/src/stm32f4xx_dcmi.c **** 
 504:./FWLIB/src/stm32f4xx_dcmi.c **** /**
 505:./FWLIB/src/stm32f4xx_dcmi.c ****   * @brief  Clears the DCMI's interrupt pending bits.
 506:./FWLIB/src/stm32f4xx_dcmi.c ****   * @param  DCMI_IT: specifies the DCMI interrupt pending bit to clear.
 507:./FWLIB/src/stm32f4xx_dcmi.c ****   *          This parameter can be any combination of the following values:
 508:./FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_IT_FRAME: Frame capture complete interrupt mask
 509:./FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_IT_OVF: Overflow interrupt mask
 510:./FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_IT_ERR: Synchronization error interrupt mask
 511:./FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_IT_VSYNC: VSYNC interrupt mask
 512:./FWLIB/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_IT_LINE: Line interrupt mask
 513:./FWLIB/src/stm32f4xx_dcmi.c ****   * @retval None
 514:./FWLIB/src/stm32f4xx_dcmi.c ****   */
 515:./FWLIB/src/stm32f4xx_dcmi.c **** void DCMI_ClearITPendingBit(uint16_t DCMI_IT)
 516:./FWLIB/src/stm32f4xx_dcmi.c **** {
 621              		.loc 1 516 0
 622              		.cfi_startproc
 623              		@ args = 0, pretend = 0, frame = 0
 624              		@ frame_needed = 0, uses_anonymous_args = 0
 625              		@ link register save eliminated.
 626              	.LVL36:
 517:./FWLIB/src/stm32f4xx_dcmi.c ****   /* Clear the interrupt pending Bit by writing in the ICR register 1 in the 
 518:./FWLIB/src/stm32f4xx_dcmi.c ****   corresponding pending Bit position*/
 519:./FWLIB/src/stm32f4xx_dcmi.c ****   
 520:./FWLIB/src/stm32f4xx_dcmi.c ****   DCMI->ICR = DCMI_IT;
 627              		.loc 1 520 0
 628 0000 014B     		ldr	r3, .L68
 629 0002 5861     		str	r0, [r3, #20]
 521:./FWLIB/src/stm32f4xx_dcmi.c **** }
 630              		.loc 1 521 0
 631 0004 7047     		bx	lr
ARM GAS  /tmp/cctCDyyg.s 			page 21


 632              	.L69:
 633 0006 00BF     		.align	2
 634              	.L68:
 635 0008 00000550 		.word	1342504960
 636              		.cfi_endproc
 637              	.LFE126:
 639              		.text
 640              	.Letext0:
 641              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 642              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 643              		.file 4 "build/lnInclude/core_cm4.h"
 644              		.file 5 "build/lnInclude/system_stm32f4xx.h"
 645              		.file 6 "build/lnInclude/stm32f4xx.h"
 646              		.file 7 "build/lnInclude/stm32f4xx_dcmi.h"
ARM GAS  /tmp/cctCDyyg.s 			page 22


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_dcmi.c
     /tmp/cctCDyyg.s:18     .text.DCMI_DeInit:0000000000000000 $t
     /tmp/cctCDyyg.s:25     .text.DCMI_DeInit:0000000000000000 DCMI_DeInit
     /tmp/cctCDyyg.s:55     .text.DCMI_DeInit:0000000000000018 $d
     /tmp/cctCDyyg.s:60     .text.DCMI_Init:0000000000000000 $t
     /tmp/cctCDyyg.s:67     .text.DCMI_Init:0000000000000000 DCMI_Init
     /tmp/cctCDyyg.s:129    .text.DCMI_Init:0000000000000040 $d
     /tmp/cctCDyyg.s:134    .text.DCMI_StructInit:0000000000000000 $t
     /tmp/cctCDyyg.s:141    .text.DCMI_StructInit:0000000000000000 DCMI_StructInit
     /tmp/cctCDyyg.s:170    .text.DCMI_CROPConfig:0000000000000000 $t
     /tmp/cctCDyyg.s:177    .text.DCMI_CROPConfig:0000000000000000 DCMI_CROPConfig
     /tmp/cctCDyyg.s:205    .text.DCMI_CROPConfig:0000000000000018 $d
     /tmp/cctCDyyg.s:210    .text.DCMI_CROPCmd:0000000000000000 $t
     /tmp/cctCDyyg.s:217    .text.DCMI_CROPCmd:0000000000000000 DCMI_CROPCmd
     /tmp/cctCDyyg.s:244    .text.DCMI_CROPCmd:000000000000001c $d
     /tmp/cctCDyyg.s:249    .text.DCMI_SetEmbeddedSynchroCodes:0000000000000000 $t
     /tmp/cctCDyyg.s:256    .text.DCMI_SetEmbeddedSynchroCodes:0000000000000000 DCMI_SetEmbeddedSynchroCodes
     /tmp/cctCDyyg.s:285    .text.DCMI_SetEmbeddedSynchroCodes:000000000000001c $d
     /tmp/cctCDyyg.s:290    .text.DCMI_JPEGCmd:0000000000000000 $t
     /tmp/cctCDyyg.s:297    .text.DCMI_JPEGCmd:0000000000000000 DCMI_JPEGCmd
     /tmp/cctCDyyg.s:324    .text.DCMI_JPEGCmd:000000000000001c $d
     /tmp/cctCDyyg.s:329    .text.DCMI_Cmd:0000000000000000 $t
     /tmp/cctCDyyg.s:336    .text.DCMI_Cmd:0000000000000000 DCMI_Cmd
     /tmp/cctCDyyg.s:363    .text.DCMI_Cmd:000000000000001c $d
     /tmp/cctCDyyg.s:368    .text.DCMI_CaptureCmd:0000000000000000 $t
     /tmp/cctCDyyg.s:375    .text.DCMI_CaptureCmd:0000000000000000 DCMI_CaptureCmd
     /tmp/cctCDyyg.s:402    .text.DCMI_CaptureCmd:000000000000001c $d
     /tmp/cctCDyyg.s:407    .text.DCMI_ReadData:0000000000000000 $t
     /tmp/cctCDyyg.s:414    .text.DCMI_ReadData:0000000000000000 DCMI_ReadData
     /tmp/cctCDyyg.s:429    .text.DCMI_ReadData:0000000000000008 $d
     /tmp/cctCDyyg.s:434    .text.DCMI_ITConfig:0000000000000000 $t
     /tmp/cctCDyyg.s:441    .text.DCMI_ITConfig:0000000000000000 DCMI_ITConfig
     /tmp/cctCDyyg.s:473    .text.DCMI_ITConfig:000000000000001c $d
     /tmp/cctCDyyg.s:478    .text.DCMI_GetFlagStatus:0000000000000000 $t
     /tmp/cctCDyyg.s:485    .text.DCMI_GetFlagStatus:0000000000000000 DCMI_GetFlagStatus
     /tmp/cctCDyyg.s:538    .text.DCMI_GetFlagStatus:0000000000000024 $d
     /tmp/cctCDyyg.s:543    .text.DCMI_ClearFlag:0000000000000000 $t
     /tmp/cctCDyyg.s:550    .text.DCMI_ClearFlag:0000000000000000 DCMI_ClearFlag
     /tmp/cctCDyyg.s:566    .text.DCMI_ClearFlag:0000000000000008 $d
     /tmp/cctCDyyg.s:571    .text.DCMI_GetITStatus:0000000000000000 $t
     /tmp/cctCDyyg.s:578    .text.DCMI_GetITStatus:0000000000000000 DCMI_GetITStatus
     /tmp/cctCDyyg.s:607    .text.DCMI_GetITStatus:0000000000000010 $d
     /tmp/cctCDyyg.s:612    .text.DCMI_ClearITPendingBit:0000000000000000 $t
     /tmp/cctCDyyg.s:619    .text.DCMI_ClearITPendingBit:0000000000000000 DCMI_ClearITPendingBit
     /tmp/cctCDyyg.s:635    .text.DCMI_ClearITPendingBit:0000000000000008 $d

NO UNDEFINED SYMBOLS
