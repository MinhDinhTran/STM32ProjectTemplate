ARM GAS  /tmp/ccqllL8a.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_adc.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.ADC_DeInit,"ax",%progbits
  18              		.align	1
  19              		.global	ADC_DeInit
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	ADC_DeInit:
  26              	.LFB112:
  27              		.file 1 "./FWLIB/src/stm32f4xx_adc.c"
   1:./FWLIB/src/stm32f4xx_adc.c **** /**
   2:./FWLIB/src/stm32f4xx_adc.c ****   ******************************************************************************
   3:./FWLIB/src/stm32f4xx_adc.c ****   * @file    stm32f4xx_adc.c
   4:./FWLIB/src/stm32f4xx_adc.c ****   * @author  MCD Application Team
   5:./FWLIB/src/stm32f4xx_adc.c ****   * @version V1.4.0
   6:./FWLIB/src/stm32f4xx_adc.c ****   * @date    04-August-2014
   7:./FWLIB/src/stm32f4xx_adc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:./FWLIB/src/stm32f4xx_adc.c ****   *          functionalities of the Analog to Digital Convertor (ADC) peripheral:
   9:./FWLIB/src/stm32f4xx_adc.c ****   *           + Initialization and Configuration (in addition to ADC multi mode 
  10:./FWLIB/src/stm32f4xx_adc.c ****   *             selection)
  11:./FWLIB/src/stm32f4xx_adc.c ****   *           + Analog Watchdog configuration
  12:./FWLIB/src/stm32f4xx_adc.c ****   *           + Temperature Sensor & Vrefint (Voltage Reference internal) & VBAT
  13:./FWLIB/src/stm32f4xx_adc.c ****   *             management 
  14:./FWLIB/src/stm32f4xx_adc.c ****   *           + Regular Channels Configuration
  15:./FWLIB/src/stm32f4xx_adc.c ****   *           + Regular Channels DMA Configuration
  16:./FWLIB/src/stm32f4xx_adc.c ****   *           + Injected channels Configuration
  17:./FWLIB/src/stm32f4xx_adc.c ****   *           + Interrupts and flags management
  18:./FWLIB/src/stm32f4xx_adc.c ****   *         
  19:./FWLIB/src/stm32f4xx_adc.c ****   @verbatim
  20:./FWLIB/src/stm32f4xx_adc.c ****  ===============================================================================
  21:./FWLIB/src/stm32f4xx_adc.c ****                      ##### How to use this driver #####
  22:./FWLIB/src/stm32f4xx_adc.c ****  ===============================================================================
  23:./FWLIB/src/stm32f4xx_adc.c ****     [..]
  24:./FWLIB/src/stm32f4xx_adc.c ****     (#) Enable the ADC interface clock using 
  25:./FWLIB/src/stm32f4xx_adc.c ****         RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADCx, ENABLE); 
  26:./FWLIB/src/stm32f4xx_adc.c ****        
  27:./FWLIB/src/stm32f4xx_adc.c ****     (#) ADC pins configuration
  28:./FWLIB/src/stm32f4xx_adc.c ****          (++) Enable the clock for the ADC GPIOs using the following function:
  29:./FWLIB/src/stm32f4xx_adc.c ****              RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOx, ENABLE);   
  30:./FWLIB/src/stm32f4xx_adc.c ****          (++) Configure these ADC pins in analog mode using GPIO_Init();  
  31:./FWLIB/src/stm32f4xx_adc.c ****   
ARM GAS  /tmp/ccqllL8a.s 			page 2


  32:./FWLIB/src/stm32f4xx_adc.c ****      (#) Configure the ADC Prescaler, conversion resolution and data 
  33:./FWLIB/src/stm32f4xx_adc.c ****          alignment using the ADC_Init() function.
  34:./FWLIB/src/stm32f4xx_adc.c ****      (#) Activate the ADC peripheral using ADC_Cmd() function.
  35:./FWLIB/src/stm32f4xx_adc.c ****   
  36:./FWLIB/src/stm32f4xx_adc.c ****      *** Regular channels group configuration ***
  37:./FWLIB/src/stm32f4xx_adc.c ****      ============================================
  38:./FWLIB/src/stm32f4xx_adc.c ****      [..]    
  39:./FWLIB/src/stm32f4xx_adc.c ****        (+) To configure the ADC regular channels group features, use 
  40:./FWLIB/src/stm32f4xx_adc.c ****            ADC_Init() and ADC_RegularChannelConfig() functions.
  41:./FWLIB/src/stm32f4xx_adc.c ****        (+) To activate the continuous mode, use the ADC_continuousModeCmd()
  42:./FWLIB/src/stm32f4xx_adc.c ****            function.
  43:./FWLIB/src/stm32f4xx_adc.c ****        (+) To configurate and activate the Discontinuous mode, use the 
  44:./FWLIB/src/stm32f4xx_adc.c ****            ADC_DiscModeChannelCountConfig() and ADC_DiscModeCmd() functions.
  45:./FWLIB/src/stm32f4xx_adc.c ****        (+) To read the ADC converted values, use the ADC_GetConversionValue()
  46:./FWLIB/src/stm32f4xx_adc.c ****            function.
  47:./FWLIB/src/stm32f4xx_adc.c ****   
  48:./FWLIB/src/stm32f4xx_adc.c ****      *** Multi mode ADCs Regular channels configuration ***
  49:./FWLIB/src/stm32f4xx_adc.c ****      ======================================================
  50:./FWLIB/src/stm32f4xx_adc.c ****      [..]
  51:./FWLIB/src/stm32f4xx_adc.c ****        (+) Refer to "Regular channels group configuration" description to
  52:./FWLIB/src/stm32f4xx_adc.c ****            configure the ADC1, ADC2 and ADC3 regular channels.        
  53:./FWLIB/src/stm32f4xx_adc.c ****        (+) Select the Multi mode ADC regular channels features (dual or 
  54:./FWLIB/src/stm32f4xx_adc.c ****            triple mode) using ADC_CommonInit() function and configure 
  55:./FWLIB/src/stm32f4xx_adc.c ****            the DMA mode using ADC_MultiModeDMARequestAfterLastTransferCmd() 
  56:./FWLIB/src/stm32f4xx_adc.c ****            functions.        
  57:./FWLIB/src/stm32f4xx_adc.c ****        (+) Read the ADCs converted values using the 
  58:./FWLIB/src/stm32f4xx_adc.c ****            ADC_GetMultiModeConversionValue() function.
  59:./FWLIB/src/stm32f4xx_adc.c ****   
  60:./FWLIB/src/stm32f4xx_adc.c ****      *** DMA for Regular channels group features configuration ***
  61:./FWLIB/src/stm32f4xx_adc.c ****      ============================================================= 
  62:./FWLIB/src/stm32f4xx_adc.c ****      [..]
  63:./FWLIB/src/stm32f4xx_adc.c ****        (+) To enable the DMA mode for regular channels group, use the 
  64:./FWLIB/src/stm32f4xx_adc.c ****            ADC_DMACmd() function.
  65:./FWLIB/src/stm32f4xx_adc.c ****        (+) To enable the generation of DMA requests continuously at the end
  66:./FWLIB/src/stm32f4xx_adc.c ****            of the last DMA transfer, use the ADC_DMARequestAfterLastTransferCmd() 
  67:./FWLIB/src/stm32f4xx_adc.c ****            function.
  68:./FWLIB/src/stm32f4xx_adc.c ****   
  69:./FWLIB/src/stm32f4xx_adc.c ****      *** Injected channels group configuration ***
  70:./FWLIB/src/stm32f4xx_adc.c ****      =============================================    
  71:./FWLIB/src/stm32f4xx_adc.c ****      [..]
  72:./FWLIB/src/stm32f4xx_adc.c ****        (+) To configure the ADC Injected channels group features, use 
  73:./FWLIB/src/stm32f4xx_adc.c ****            ADC_InjectedChannelConfig() and  ADC_InjectedSequencerLengthConfig()
  74:./FWLIB/src/stm32f4xx_adc.c ****            functions.
  75:./FWLIB/src/stm32f4xx_adc.c ****        (+) To activate the continuous mode, use the ADC_continuousModeCmd()
  76:./FWLIB/src/stm32f4xx_adc.c ****            function.
  77:./FWLIB/src/stm32f4xx_adc.c ****        (+) To activate the Injected Discontinuous mode, use the 
  78:./FWLIB/src/stm32f4xx_adc.c ****            ADC_InjectedDiscModeCmd() function.  
  79:./FWLIB/src/stm32f4xx_adc.c ****        (+) To activate the AutoInjected mode, use the ADC_AutoInjectedConvCmd() 
  80:./FWLIB/src/stm32f4xx_adc.c ****            function.        
  81:./FWLIB/src/stm32f4xx_adc.c ****        (+) To read the ADC converted values, use the ADC_GetInjectedConversionValue() 
  82:./FWLIB/src/stm32f4xx_adc.c ****            function.
  83:./FWLIB/src/stm32f4xx_adc.c ****   
  84:./FWLIB/src/stm32f4xx_adc.c ****     @endverbatim
  85:./FWLIB/src/stm32f4xx_adc.c ****   ******************************************************************************
  86:./FWLIB/src/stm32f4xx_adc.c ****   * @attention
  87:./FWLIB/src/stm32f4xx_adc.c ****   *
  88:./FWLIB/src/stm32f4xx_adc.c ****   * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
ARM GAS  /tmp/ccqllL8a.s 			page 3


  89:./FWLIB/src/stm32f4xx_adc.c ****   *
  90:./FWLIB/src/stm32f4xx_adc.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  91:./FWLIB/src/stm32f4xx_adc.c ****   * You may not use this file except in compliance with the License.
  92:./FWLIB/src/stm32f4xx_adc.c ****   * You may obtain a copy of the License at:
  93:./FWLIB/src/stm32f4xx_adc.c ****   *
  94:./FWLIB/src/stm32f4xx_adc.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  95:./FWLIB/src/stm32f4xx_adc.c ****   *
  96:./FWLIB/src/stm32f4xx_adc.c ****   * Unless required by applicable law or agreed to in writing, software 
  97:./FWLIB/src/stm32f4xx_adc.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  98:./FWLIB/src/stm32f4xx_adc.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  99:./FWLIB/src/stm32f4xx_adc.c ****   * See the License for the specific language governing permissions and
 100:./FWLIB/src/stm32f4xx_adc.c ****   * limitations under the License.
 101:./FWLIB/src/stm32f4xx_adc.c ****   *
 102:./FWLIB/src/stm32f4xx_adc.c ****   ******************************************************************************
 103:./FWLIB/src/stm32f4xx_adc.c ****   */ 
 104:./FWLIB/src/stm32f4xx_adc.c **** 
 105:./FWLIB/src/stm32f4xx_adc.c **** /* Includes ------------------------------------------------------------------*/
 106:./FWLIB/src/stm32f4xx_adc.c **** #include "stm32f4xx_adc.h"
 107:./FWLIB/src/stm32f4xx_adc.c **** #include "stm32f4xx_rcc.h"
 108:./FWLIB/src/stm32f4xx_adc.c **** 
 109:./FWLIB/src/stm32f4xx_adc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 110:./FWLIB/src/stm32f4xx_adc.c ****   * @{
 111:./FWLIB/src/stm32f4xx_adc.c ****   */
 112:./FWLIB/src/stm32f4xx_adc.c **** 
 113:./FWLIB/src/stm32f4xx_adc.c **** /** @defgroup ADC 
 114:./FWLIB/src/stm32f4xx_adc.c ****   * @brief ADC driver modules
 115:./FWLIB/src/stm32f4xx_adc.c ****   * @{
 116:./FWLIB/src/stm32f4xx_adc.c ****   */ 
 117:./FWLIB/src/stm32f4xx_adc.c **** 
 118:./FWLIB/src/stm32f4xx_adc.c **** /* Private typedef -----------------------------------------------------------*/
 119:./FWLIB/src/stm32f4xx_adc.c **** /* Private define ------------------------------------------------------------*/ 
 120:./FWLIB/src/stm32f4xx_adc.c **** 
 121:./FWLIB/src/stm32f4xx_adc.c **** /* ADC DISCNUM mask */
 122:./FWLIB/src/stm32f4xx_adc.c **** #define CR1_DISCNUM_RESET         ((uint32_t)0xFFFF1FFF)
 123:./FWLIB/src/stm32f4xx_adc.c **** 
 124:./FWLIB/src/stm32f4xx_adc.c **** /* ADC AWDCH mask */
 125:./FWLIB/src/stm32f4xx_adc.c **** #define CR1_AWDCH_RESET           ((uint32_t)0xFFFFFFE0)   
 126:./FWLIB/src/stm32f4xx_adc.c **** 
 127:./FWLIB/src/stm32f4xx_adc.c **** /* ADC Analog watchdog enable mode mask */
 128:./FWLIB/src/stm32f4xx_adc.c **** #define CR1_AWDMode_RESET         ((uint32_t)0xFF3FFDFF)   
 129:./FWLIB/src/stm32f4xx_adc.c **** 
 130:./FWLIB/src/stm32f4xx_adc.c **** /* CR1 register Mask */
 131:./FWLIB/src/stm32f4xx_adc.c **** #define CR1_CLEAR_MASK            ((uint32_t)0xFCFFFEFF)
 132:./FWLIB/src/stm32f4xx_adc.c **** 
 133:./FWLIB/src/stm32f4xx_adc.c **** /* ADC EXTEN mask */
 134:./FWLIB/src/stm32f4xx_adc.c **** #define CR2_EXTEN_RESET           ((uint32_t)0xCFFFFFFF)  
 135:./FWLIB/src/stm32f4xx_adc.c **** 
 136:./FWLIB/src/stm32f4xx_adc.c **** /* ADC JEXTEN mask */
 137:./FWLIB/src/stm32f4xx_adc.c **** #define CR2_JEXTEN_RESET          ((uint32_t)0xFFCFFFFF)  
 138:./FWLIB/src/stm32f4xx_adc.c **** 
 139:./FWLIB/src/stm32f4xx_adc.c **** /* ADC JEXTSEL mask */
 140:./FWLIB/src/stm32f4xx_adc.c **** #define CR2_JEXTSEL_RESET         ((uint32_t)0xFFF0FFFF)  
 141:./FWLIB/src/stm32f4xx_adc.c **** 
 142:./FWLIB/src/stm32f4xx_adc.c **** /* CR2 register Mask */
 143:./FWLIB/src/stm32f4xx_adc.c **** #define CR2_CLEAR_MASK            ((uint32_t)0xC0FFF7FD)
 144:./FWLIB/src/stm32f4xx_adc.c **** 
 145:./FWLIB/src/stm32f4xx_adc.c **** /* ADC SQx mask */
ARM GAS  /tmp/ccqllL8a.s 			page 4


 146:./FWLIB/src/stm32f4xx_adc.c **** #define SQR3_SQ_SET               ((uint32_t)0x0000001F)  
 147:./FWLIB/src/stm32f4xx_adc.c **** #define SQR2_SQ_SET               ((uint32_t)0x0000001F)  
 148:./FWLIB/src/stm32f4xx_adc.c **** #define SQR1_SQ_SET               ((uint32_t)0x0000001F)  
 149:./FWLIB/src/stm32f4xx_adc.c **** 
 150:./FWLIB/src/stm32f4xx_adc.c **** /* ADC L Mask */
 151:./FWLIB/src/stm32f4xx_adc.c **** #define SQR1_L_RESET              ((uint32_t)0xFF0FFFFF) 
 152:./FWLIB/src/stm32f4xx_adc.c **** 
 153:./FWLIB/src/stm32f4xx_adc.c **** /* ADC JSQx mask */
 154:./FWLIB/src/stm32f4xx_adc.c **** #define JSQR_JSQ_SET              ((uint32_t)0x0000001F) 
 155:./FWLIB/src/stm32f4xx_adc.c **** 
 156:./FWLIB/src/stm32f4xx_adc.c **** /* ADC JL mask */
 157:./FWLIB/src/stm32f4xx_adc.c **** #define JSQR_JL_SET               ((uint32_t)0x00300000) 
 158:./FWLIB/src/stm32f4xx_adc.c **** #define JSQR_JL_RESET             ((uint32_t)0xFFCFFFFF) 
 159:./FWLIB/src/stm32f4xx_adc.c **** 
 160:./FWLIB/src/stm32f4xx_adc.c **** /* ADC SMPx mask */
 161:./FWLIB/src/stm32f4xx_adc.c **** #define SMPR1_SMP_SET             ((uint32_t)0x00000007)  
 162:./FWLIB/src/stm32f4xx_adc.c **** #define SMPR2_SMP_SET             ((uint32_t)0x00000007) 
 163:./FWLIB/src/stm32f4xx_adc.c **** 
 164:./FWLIB/src/stm32f4xx_adc.c **** /* ADC JDRx registers offset */
 165:./FWLIB/src/stm32f4xx_adc.c **** #define JDR_OFFSET                ((uint8_t)0x28) 
 166:./FWLIB/src/stm32f4xx_adc.c **** 
 167:./FWLIB/src/stm32f4xx_adc.c **** /* ADC CDR register base address */
 168:./FWLIB/src/stm32f4xx_adc.c **** #define CDR_ADDRESS               ((uint32_t)0x40012308)   
 169:./FWLIB/src/stm32f4xx_adc.c **** 
 170:./FWLIB/src/stm32f4xx_adc.c **** /* ADC CCR register Mask */
 171:./FWLIB/src/stm32f4xx_adc.c **** #define CR_CLEAR_MASK             ((uint32_t)0xFFFC30E0)  
 172:./FWLIB/src/stm32f4xx_adc.c **** 
 173:./FWLIB/src/stm32f4xx_adc.c **** /* Private macro -------------------------------------------------------------*/
 174:./FWLIB/src/stm32f4xx_adc.c **** /* Private variables ---------------------------------------------------------*/
 175:./FWLIB/src/stm32f4xx_adc.c **** /* Private function prototypes -----------------------------------------------*/
 176:./FWLIB/src/stm32f4xx_adc.c **** /* Private functions ---------------------------------------------------------*/
 177:./FWLIB/src/stm32f4xx_adc.c **** 
 178:./FWLIB/src/stm32f4xx_adc.c **** /** @defgroup ADC_Private_Functions
 179:./FWLIB/src/stm32f4xx_adc.c ****   * @{
 180:./FWLIB/src/stm32f4xx_adc.c ****   */ 
 181:./FWLIB/src/stm32f4xx_adc.c **** 
 182:./FWLIB/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group1 Initialization and Configuration functions
 183:./FWLIB/src/stm32f4xx_adc.c ****  *  @brief    Initialization and Configuration functions 
 184:./FWLIB/src/stm32f4xx_adc.c ****  *
 185:./FWLIB/src/stm32f4xx_adc.c **** @verbatim    
 186:./FWLIB/src/stm32f4xx_adc.c ****  ===============================================================================
 187:./FWLIB/src/stm32f4xx_adc.c ****               ##### Initialization and Configuration functions #####
 188:./FWLIB/src/stm32f4xx_adc.c ****  ===============================================================================
 189:./FWLIB/src/stm32f4xx_adc.c ****     [..]  This section provides functions allowing to:
 190:./FWLIB/src/stm32f4xx_adc.c ****       (+) Initialize and configure the ADC Prescaler
 191:./FWLIB/src/stm32f4xx_adc.c ****       (+) ADC Conversion Resolution (12bit..6bit)
 192:./FWLIB/src/stm32f4xx_adc.c ****       (+) Scan Conversion Mode (multichannel or one channel) for regular group
 193:./FWLIB/src/stm32f4xx_adc.c ****       (+) ADC Continuous Conversion Mode (Continuous or Single conversion) for 
 194:./FWLIB/src/stm32f4xx_adc.c ****           regular group
 195:./FWLIB/src/stm32f4xx_adc.c ****       (+) External trigger Edge and source of regular group, 
 196:./FWLIB/src/stm32f4xx_adc.c ****       (+) Converted data alignment (left or right)
 197:./FWLIB/src/stm32f4xx_adc.c ****       (+) The number of ADC conversions that will be done using the sequencer for 
 198:./FWLIB/src/stm32f4xx_adc.c ****           regular channel group
 199:./FWLIB/src/stm32f4xx_adc.c ****       (+) Multi ADC mode selection
 200:./FWLIB/src/stm32f4xx_adc.c ****       (+) Direct memory access mode selection for multi ADC mode  
 201:./FWLIB/src/stm32f4xx_adc.c ****       (+) Delay between 2 sampling phases (used in dual or triple interleaved modes)
 202:./FWLIB/src/stm32f4xx_adc.c ****       (+) Enable or disable the ADC peripheral   
ARM GAS  /tmp/ccqllL8a.s 			page 5


 203:./FWLIB/src/stm32f4xx_adc.c **** @endverbatim
 204:./FWLIB/src/stm32f4xx_adc.c ****   * @{
 205:./FWLIB/src/stm32f4xx_adc.c ****   */
 206:./FWLIB/src/stm32f4xx_adc.c **** 
 207:./FWLIB/src/stm32f4xx_adc.c **** /**
 208:./FWLIB/src/stm32f4xx_adc.c ****   * @brief  Deinitializes all ADCs peripherals registers to their default reset 
 209:./FWLIB/src/stm32f4xx_adc.c ****   *         values.
 210:./FWLIB/src/stm32f4xx_adc.c ****   * @param  None
 211:./FWLIB/src/stm32f4xx_adc.c ****   * @retval None
 212:./FWLIB/src/stm32f4xx_adc.c ****   */
 213:./FWLIB/src/stm32f4xx_adc.c **** void ADC_DeInit(void)
 214:./FWLIB/src/stm32f4xx_adc.c **** {
  28              		.loc 1 214 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 08B5     		push	{r3, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 3, -8
  36              		.cfi_offset 14, -4
 215:./FWLIB/src/stm32f4xx_adc.c ****   /* Enable all ADCs reset state */
 216:./FWLIB/src/stm32f4xx_adc.c ****   RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
  37              		.loc 1 216 0
  38 0002 0121     		movs	r1, #1
  39 0004 4FF48070 		mov	r0, #256
  40 0008 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  41              	.LVL0:
 217:./FWLIB/src/stm32f4xx_adc.c ****   
 218:./FWLIB/src/stm32f4xx_adc.c ****   /* Release all ADCs from reset state */
 219:./FWLIB/src/stm32f4xx_adc.c ****   RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
  42              		.loc 1 219 0
  43 000c 0021     		movs	r1, #0
  44 000e 4FF48070 		mov	r0, #256
  45 0012 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  46              	.LVL1:
 220:./FWLIB/src/stm32f4xx_adc.c **** }
  47              		.loc 1 220 0
  48 0016 08BD     		pop	{r3, pc}
  49              		.cfi_endproc
  50              	.LFE112:
  52              		.section	.text.ADC_Init,"ax",%progbits
  53              		.align	1
  54              		.global	ADC_Init
  55              		.syntax unified
  56              		.thumb
  57              		.thumb_func
  58              		.fpu fpv4-sp-d16
  60              	ADC_Init:
  61              	.LFB113:
 221:./FWLIB/src/stm32f4xx_adc.c **** 
 222:./FWLIB/src/stm32f4xx_adc.c **** /**
 223:./FWLIB/src/stm32f4xx_adc.c ****   * @brief  Initializes the ADCx peripheral according to the specified parameters 
 224:./FWLIB/src/stm32f4xx_adc.c ****   *         in the ADC_InitStruct.
 225:./FWLIB/src/stm32f4xx_adc.c ****   * @note   This function is used to configure the global features of the ADC ( 
 226:./FWLIB/src/stm32f4xx_adc.c ****   *         Resolution and Data Alignment), however, the rest of the configuration
 227:./FWLIB/src/stm32f4xx_adc.c ****   *         parameters are specific to the regular channels group (scan mode 
ARM GAS  /tmp/ccqllL8a.s 			page 6


 228:./FWLIB/src/stm32f4xx_adc.c ****   *         activation, continuous mode activation, External trigger source and 
 229:./FWLIB/src/stm32f4xx_adc.c ****   *         edge, number of conversion in the regular channels group sequencer).  
 230:./FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 231:./FWLIB/src/stm32f4xx_adc.c ****   * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
 232:./FWLIB/src/stm32f4xx_adc.c ****   *         the configuration information for the specified ADC peripheral.
 233:./FWLIB/src/stm32f4xx_adc.c ****   * @retval None
 234:./FWLIB/src/stm32f4xx_adc.c ****   */
 235:./FWLIB/src/stm32f4xx_adc.c **** void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
 236:./FWLIB/src/stm32f4xx_adc.c **** {
  62              		.loc 1 236 0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 0, uses_anonymous_args = 0
  66              		@ link register save eliminated.
  67              	.LVL2:
  68 0000 10B4     		push	{r4}
  69              	.LCFI1:
  70              		.cfi_def_cfa_offset 4
  71              		.cfi_offset 4, -4
  72              	.LVL3:
 237:./FWLIB/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
 238:./FWLIB/src/stm32f4xx_adc.c ****   uint8_t tmpreg2 = 0;
 239:./FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
 240:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 241:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_RESOLUTION(ADC_InitStruct->ADC_Resolution)); 
 242:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(ADC_InitStruct->ADC_ScanConvMode));
 243:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(ADC_InitStruct->ADC_ContinuousConvMode)); 
 244:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_TRIG_EDGE(ADC_InitStruct->ADC_ExternalTrigConvEdge)); 
 245:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_TRIG(ADC_InitStruct->ADC_ExternalTrigConv));    
 246:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
 247:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
 248:./FWLIB/src/stm32f4xx_adc.c ****   
 249:./FWLIB/src/stm32f4xx_adc.c ****   /*---------------------------- ADCx CR1 Configuration -----------------*/
 250:./FWLIB/src/stm32f4xx_adc.c ****   /* Get the ADCx CR1 value */
 251:./FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->CR1;
  73              		.loc 1 251 0
  74 0002 4268     		ldr	r2, [r0, #4]
  75              	.LVL4:
 252:./FWLIB/src/stm32f4xx_adc.c ****   
 253:./FWLIB/src/stm32f4xx_adc.c ****   /* Clear RES and SCAN bits */
 254:./FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 &= CR1_CLEAR_MASK;
  76              		.loc 1 254 0
  77 0004 22F04072 		bic	r2, r2, #50331648
  78              	.LVL5:
  79 0008 22F48072 		bic	r2, r2, #256
  80              	.LVL6:
 255:./FWLIB/src/stm32f4xx_adc.c ****   
 256:./FWLIB/src/stm32f4xx_adc.c ****   /* Configure ADCx: scan conversion mode and resolution */
 257:./FWLIB/src/stm32f4xx_adc.c ****   /* Set SCAN bit according to ADC_ScanConvMode value */
 258:./FWLIB/src/stm32f4xx_adc.c ****   /* Set RES bit according to ADC_Resolution value */ 
 259:./FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
  81              		.loc 1 259 0
  82 000c 0C79     		ldrb	r4, [r1, #4]	@ zero_extendqisi2
 260:./FWLIB/src/stm32f4xx_adc.c ****                                    ADC_InitStruct->ADC_Resolution);
  83              		.loc 1 260 0
  84 000e 0B68     		ldr	r3, [r1]
 259:./FWLIB/src/stm32f4xx_adc.c ****                                    ADC_InitStruct->ADC_Resolution);
ARM GAS  /tmp/ccqllL8a.s 			page 7


  85              		.loc 1 259 0
  86 0010 43EA0423 		orr	r3, r3, r4, lsl #8
  87 0014 1343     		orrs	r3, r3, r2
  88              	.LVL7:
 261:./FWLIB/src/stm32f4xx_adc.c ****   /* Write to ADCx CR1 */
 262:./FWLIB/src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg1;
  89              		.loc 1 262 0
  90 0016 4360     		str	r3, [r0, #4]
 263:./FWLIB/src/stm32f4xx_adc.c ****   /*---------------------------- ADCx CR2 Configuration -----------------*/
 264:./FWLIB/src/stm32f4xx_adc.c ****   /* Get the ADCx CR2 value */
 265:./FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->CR2;
  91              		.loc 1 265 0
  92 0018 8368     		ldr	r3, [r0, #8]
  93              	.LVL8:
 266:./FWLIB/src/stm32f4xx_adc.c ****   
 267:./FWLIB/src/stm32f4xx_adc.c ****   /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
 268:./FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 &= CR2_CLEAR_MASK;
  94              		.loc 1 268 0
  95 001a 0C4A     		ldr	r2, .L5
  96 001c 1A40     		ands	r2, r2, r3
  97              	.LVL9:
 269:./FWLIB/src/stm32f4xx_adc.c ****   
 270:./FWLIB/src/stm32f4xx_adc.c ****   /* Configure ADCx: external trigger event and edge, data alignment and 
 271:./FWLIB/src/stm32f4xx_adc.c ****      continuous conversion mode */
 272:./FWLIB/src/stm32f4xx_adc.c ****   /* Set ALIGN bit according to ADC_DataAlign value */
 273:./FWLIB/src/stm32f4xx_adc.c ****   /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
 274:./FWLIB/src/stm32f4xx_adc.c ****   /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
 275:./FWLIB/src/stm32f4xx_adc.c ****   /* Set CONT bit according to ADC_ContinuousConvMode value */
 276:./FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
  98              		.loc 1 276 0
  99 001e 0B69     		ldr	r3, [r1, #16]
 277:./FWLIB/src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConv | 
 100              		.loc 1 277 0
 101 0020 CC68     		ldr	r4, [r1, #12]
 276:./FWLIB/src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConv | 
 102              		.loc 1 276 0
 103 0022 2343     		orrs	r3, r3, r4
 278:./FWLIB/src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 104              		.loc 1 278 0
 105 0024 8C68     		ldr	r4, [r1, #8]
 277:./FWLIB/src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConv | 
 106              		.loc 1 277 0
 107 0026 2343     		orrs	r3, r3, r4
 279:./FWLIB/src/stm32f4xx_adc.c ****                         ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 108              		.loc 1 279 0
 109 0028 4C79     		ldrb	r4, [r1, #5]	@ zero_extendqisi2
 276:./FWLIB/src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConv | 
 110              		.loc 1 276 0
 111 002a 43EA4403 		orr	r3, r3, r4, lsl #1
 112 002e 1343     		orrs	r3, r3, r2
 113              	.LVL10:
 280:./FWLIB/src/stm32f4xx_adc.c ****                         
 281:./FWLIB/src/stm32f4xx_adc.c ****   /* Write to ADCx CR2 */
 282:./FWLIB/src/stm32f4xx_adc.c ****   ADCx->CR2 = tmpreg1;
 114              		.loc 1 282 0
 115 0030 8360     		str	r3, [r0, #8]
 283:./FWLIB/src/stm32f4xx_adc.c ****   /*---------------------------- ADCx SQR1 Configuration -----------------*/
ARM GAS  /tmp/ccqllL8a.s 			page 8


 284:./FWLIB/src/stm32f4xx_adc.c ****   /* Get the ADCx SQR1 value */
 285:./FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->SQR1;
 116              		.loc 1 285 0
 117 0032 C36A     		ldr	r3, [r0, #44]
 118              	.LVL11:
 286:./FWLIB/src/stm32f4xx_adc.c ****   
 287:./FWLIB/src/stm32f4xx_adc.c ****   /* Clear L bits */
 288:./FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 &= SQR1_L_RESET;
 119              		.loc 1 288 0
 120 0034 23F47003 		bic	r3, r3, #15728640
 121              	.LVL12:
 289:./FWLIB/src/stm32f4xx_adc.c ****   
 290:./FWLIB/src/stm32f4xx_adc.c ****   /* Configure ADCx: regular channel sequence length */
 291:./FWLIB/src/stm32f4xx_adc.c ****   /* Set L bits according to ADC_NbrOfConversion value */
 292:./FWLIB/src/stm32f4xx_adc.c ****   tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 122              		.loc 1 292 0
 123 0038 0A7D     		ldrb	r2, [r1, #20]	@ zero_extendqisi2
 124 003a 013A     		subs	r2, r2, #1
 125 003c D2B2     		uxtb	r2, r2
 126              	.LVL13:
 293:./FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 127              		.loc 1 293 0
 128 003e 43EA0253 		orr	r3, r3, r2, lsl #20
 129              	.LVL14:
 294:./FWLIB/src/stm32f4xx_adc.c ****   
 295:./FWLIB/src/stm32f4xx_adc.c ****   /* Write to ADCx SQR1 */
 296:./FWLIB/src/stm32f4xx_adc.c ****   ADCx->SQR1 = tmpreg1;
 130              		.loc 1 296 0
 131 0042 C362     		str	r3, [r0, #44]
 297:./FWLIB/src/stm32f4xx_adc.c **** }
 132              		.loc 1 297 0
 133 0044 5DF8044B 		ldr	r4, [sp], #4
 134              	.LCFI2:
 135              		.cfi_restore 4
 136              		.cfi_def_cfa_offset 0
 137 0048 7047     		bx	lr
 138              	.L6:
 139 004a 00BF     		.align	2
 140              	.L5:
 141 004c FDF7FFC0 		.word	-1056966659
 142              		.cfi_endproc
 143              	.LFE113:
 145              		.section	.text.ADC_StructInit,"ax",%progbits
 146              		.align	1
 147              		.global	ADC_StructInit
 148              		.syntax unified
 149              		.thumb
 150              		.thumb_func
 151              		.fpu fpv4-sp-d16
 153              	ADC_StructInit:
 154              	.LFB114:
 298:./FWLIB/src/stm32f4xx_adc.c **** 
 299:./FWLIB/src/stm32f4xx_adc.c **** /**
 300:./FWLIB/src/stm32f4xx_adc.c ****   * @brief  Fills each ADC_InitStruct member with its default value.
 301:./FWLIB/src/stm32f4xx_adc.c ****   * @note   This function is used to initialize the global features of the ADC ( 
 302:./FWLIB/src/stm32f4xx_adc.c ****   *         Resolution and Data Alignment), however, the rest of the configuration
 303:./FWLIB/src/stm32f4xx_adc.c ****   *         parameters are specific to the regular channels group (scan mode 
ARM GAS  /tmp/ccqllL8a.s 			page 9


 304:./FWLIB/src/stm32f4xx_adc.c ****   *         activation, continuous mode activation, External trigger source and 
 305:./FWLIB/src/stm32f4xx_adc.c ****   *         edge, number of conversion in the regular channels group sequencer).  
 306:./FWLIB/src/stm32f4xx_adc.c ****   * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
 307:./FWLIB/src/stm32f4xx_adc.c ****   *         be initialized.
 308:./FWLIB/src/stm32f4xx_adc.c ****   * @retval None
 309:./FWLIB/src/stm32f4xx_adc.c ****   */
 310:./FWLIB/src/stm32f4xx_adc.c **** void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
 311:./FWLIB/src/stm32f4xx_adc.c **** {
 155              		.loc 1 311 0
 156              		.cfi_startproc
 157              		@ args = 0, pretend = 0, frame = 0
 158              		@ frame_needed = 0, uses_anonymous_args = 0
 159              		@ link register save eliminated.
 160              	.LVL15:
 312:./FWLIB/src/stm32f4xx_adc.c ****   /* Initialize the ADC_Mode member */
 313:./FWLIB/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 161              		.loc 1 313 0
 162 0000 0023     		movs	r3, #0
 163 0002 0360     		str	r3, [r0]
 314:./FWLIB/src/stm32f4xx_adc.c **** 
 315:./FWLIB/src/stm32f4xx_adc.c ****   /* initialize the ADC_ScanConvMode member */
 316:./FWLIB/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 164              		.loc 1 316 0
 165 0004 0371     		strb	r3, [r0, #4]
 317:./FWLIB/src/stm32f4xx_adc.c **** 
 318:./FWLIB/src/stm32f4xx_adc.c ****   /* Initialize the ADC_ContinuousConvMode member */
 319:./FWLIB/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 166              		.loc 1 319 0
 167 0006 4371     		strb	r3, [r0, #5]
 320:./FWLIB/src/stm32f4xx_adc.c **** 
 321:./FWLIB/src/stm32f4xx_adc.c ****   /* Initialize the ADC_ExternalTrigConvEdge member */
 322:./FWLIB/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 168              		.loc 1 322 0
 169 0008 8360     		str	r3, [r0, #8]
 323:./FWLIB/src/stm32f4xx_adc.c **** 
 324:./FWLIB/src/stm32f4xx_adc.c ****   /* Initialize the ADC_ExternalTrigConv member */
 325:./FWLIB/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 170              		.loc 1 325 0
 171 000a C360     		str	r3, [r0, #12]
 326:./FWLIB/src/stm32f4xx_adc.c **** 
 327:./FWLIB/src/stm32f4xx_adc.c ****   /* Initialize the ADC_DataAlign member */
 328:./FWLIB/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 172              		.loc 1 328 0
 173 000c 0361     		str	r3, [r0, #16]
 329:./FWLIB/src/stm32f4xx_adc.c **** 
 330:./FWLIB/src/stm32f4xx_adc.c ****   /* Initialize the ADC_NbrOfConversion member */
 331:./FWLIB/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_NbrOfConversion = 1;
 174              		.loc 1 331 0
 175 000e 0123     		movs	r3, #1
 176 0010 0375     		strb	r3, [r0, #20]
 332:./FWLIB/src/stm32f4xx_adc.c **** }
 177              		.loc 1 332 0
 178 0012 7047     		bx	lr
 179              		.cfi_endproc
 180              	.LFE114:
 182              		.section	.text.ADC_CommonInit,"ax",%progbits
 183              		.align	1
ARM GAS  /tmp/ccqllL8a.s 			page 10


 184              		.global	ADC_CommonInit
 185              		.syntax unified
 186              		.thumb
 187              		.thumb_func
 188              		.fpu fpv4-sp-d16
 190              	ADC_CommonInit:
 191              	.LFB115:
 333:./FWLIB/src/stm32f4xx_adc.c **** 
 334:./FWLIB/src/stm32f4xx_adc.c **** /**
 335:./FWLIB/src/stm32f4xx_adc.c ****   * @brief  Initializes the ADCs peripherals according to the specified parameters 
 336:./FWLIB/src/stm32f4xx_adc.c ****   *         in the ADC_CommonInitStruct.
 337:./FWLIB/src/stm32f4xx_adc.c ****   * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
 338:./FWLIB/src/stm32f4xx_adc.c ****   *         that contains the configuration information for  All ADCs peripherals.
 339:./FWLIB/src/stm32f4xx_adc.c ****   * @retval None
 340:./FWLIB/src/stm32f4xx_adc.c ****   */
 341:./FWLIB/src/stm32f4xx_adc.c **** void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
 342:./FWLIB/src/stm32f4xx_adc.c **** {
 192              		.loc 1 342 0
 193              		.cfi_startproc
 194              		@ args = 0, pretend = 0, frame = 0
 195              		@ frame_needed = 0, uses_anonymous_args = 0
 196              		@ link register save eliminated.
 197              	.LVL16:
 198 0000 10B4     		push	{r4}
 199              	.LCFI3:
 200              		.cfi_def_cfa_offset 4
 201              		.cfi_offset 4, -4
 202              	.LVL17:
 343:./FWLIB/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
 344:./FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
 345:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_MODE(ADC_CommonInitStruct->ADC_Mode));
 346:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
 347:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
 348:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
 349:./FWLIB/src/stm32f4xx_adc.c ****   /*---------------------------- ADC CCR Configuration -----------------*/
 350:./FWLIB/src/stm32f4xx_adc.c ****   /* Get the ADC CCR value */
 351:./FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 = ADC->CCR;
 203              		.loc 1 351 0
 204 0002 0849     		ldr	r1, .L10
 205 0004 4B68     		ldr	r3, [r1, #4]
 206              	.LVL18:
 352:./FWLIB/src/stm32f4xx_adc.c ****   
 353:./FWLIB/src/stm32f4xx_adc.c ****   /* Clear MULTI, DELAY, DMA and ADCPRE bits */
 354:./FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 &= CR_CLEAR_MASK;
 207              		.loc 1 354 0
 208 0006 084A     		ldr	r2, .L10+4
 209 0008 1A40     		ands	r2, r2, r3
 210              	.LVL19:
 355:./FWLIB/src/stm32f4xx_adc.c ****   
 356:./FWLIB/src/stm32f4xx_adc.c ****   /* Configure ADCx: Multi mode, Delay between two sampling time, ADC prescaler,
 357:./FWLIB/src/stm32f4xx_adc.c ****      and DMA access mode for multimode */
 358:./FWLIB/src/stm32f4xx_adc.c ****   /* Set MULTI bits according to ADC_Mode value */
 359:./FWLIB/src/stm32f4xx_adc.c ****   /* Set ADCPRE bits according to ADC_Prescaler value */
 360:./FWLIB/src/stm32f4xx_adc.c ****   /* Set DMA bits according to ADC_DMAAccessMode value */
 361:./FWLIB/src/stm32f4xx_adc.c ****   /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
 362:./FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 211              		.loc 1 362 0
ARM GAS  /tmp/ccqllL8a.s 			page 11


 212 000a 0368     		ldr	r3, [r0]
 363:./FWLIB/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_Prescaler | 
 213              		.loc 1 363 0
 214 000c 4468     		ldr	r4, [r0, #4]
 362:./FWLIB/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_Prescaler | 
 215              		.loc 1 362 0
 216 000e 2343     		orrs	r3, r3, r4
 364:./FWLIB/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_DMAAccessMode | 
 217              		.loc 1 364 0
 218 0010 8468     		ldr	r4, [r0, #8]
 363:./FWLIB/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_Prescaler | 
 219              		.loc 1 363 0
 220 0012 2343     		orrs	r3, r3, r4
 365:./FWLIB/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 221              		.loc 1 365 0
 222 0014 C068     		ldr	r0, [r0, #12]
 223              	.LVL20:
 364:./FWLIB/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_DMAAccessMode | 
 224              		.loc 1 364 0
 225 0016 0343     		orrs	r3, r3, r0
 362:./FWLIB/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_Prescaler | 
 226              		.loc 1 362 0
 227 0018 1343     		orrs	r3, r3, r2
 228              	.LVL21:
 366:./FWLIB/src/stm32f4xx_adc.c ****                         
 367:./FWLIB/src/stm32f4xx_adc.c ****   /* Write to ADC CCR */
 368:./FWLIB/src/stm32f4xx_adc.c ****   ADC->CCR = tmpreg1;
 229              		.loc 1 368 0
 230 001a 4B60     		str	r3, [r1, #4]
 369:./FWLIB/src/stm32f4xx_adc.c **** }
 231              		.loc 1 369 0
 232 001c 5DF8044B 		ldr	r4, [sp], #4
 233              	.LCFI4:
 234              		.cfi_restore 4
 235              		.cfi_def_cfa_offset 0
 236 0020 7047     		bx	lr
 237              	.L11:
 238 0022 00BF     		.align	2
 239              	.L10:
 240 0024 00230140 		.word	1073816320
 241 0028 E030FCFF 		.word	-249632
 242              		.cfi_endproc
 243              	.LFE115:
 245              		.section	.text.ADC_CommonStructInit,"ax",%progbits
 246              		.align	1
 247              		.global	ADC_CommonStructInit
 248              		.syntax unified
 249              		.thumb
 250              		.thumb_func
 251              		.fpu fpv4-sp-d16
 253              	ADC_CommonStructInit:
 254              	.LFB116:
 370:./FWLIB/src/stm32f4xx_adc.c **** 
 371:./FWLIB/src/stm32f4xx_adc.c **** /**
 372:./FWLIB/src/stm32f4xx_adc.c ****   * @brief  Fills each ADC_CommonInitStruct member with its default value.
 373:./FWLIB/src/stm32f4xx_adc.c ****   * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
 374:./FWLIB/src/stm32f4xx_adc.c ****   *         which will be initialized.
ARM GAS  /tmp/ccqllL8a.s 			page 12


 375:./FWLIB/src/stm32f4xx_adc.c ****   * @retval None
 376:./FWLIB/src/stm32f4xx_adc.c ****   */
 377:./FWLIB/src/stm32f4xx_adc.c **** void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
 378:./FWLIB/src/stm32f4xx_adc.c **** {
 255              		.loc 1 378 0
 256              		.cfi_startproc
 257              		@ args = 0, pretend = 0, frame = 0
 258              		@ frame_needed = 0, uses_anonymous_args = 0
 259              		@ link register save eliminated.
 260              	.LVL22:
 379:./FWLIB/src/stm32f4xx_adc.c ****   /* Initialize the ADC_Mode member */
 380:./FWLIB/src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 261              		.loc 1 380 0
 262 0000 0023     		movs	r3, #0
 263 0002 0360     		str	r3, [r0]
 381:./FWLIB/src/stm32f4xx_adc.c **** 
 382:./FWLIB/src/stm32f4xx_adc.c ****   /* initialize the ADC_Prescaler member */
 383:./FWLIB/src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 264              		.loc 1 383 0
 265 0004 4360     		str	r3, [r0, #4]
 384:./FWLIB/src/stm32f4xx_adc.c **** 
 385:./FWLIB/src/stm32f4xx_adc.c ****   /* Initialize the ADC_DMAAccessMode member */
 386:./FWLIB/src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 266              		.loc 1 386 0
 267 0006 8360     		str	r3, [r0, #8]
 387:./FWLIB/src/stm32f4xx_adc.c **** 
 388:./FWLIB/src/stm32f4xx_adc.c ****   /* Initialize the ADC_TwoSamplingDelay member */
 389:./FWLIB/src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 268              		.loc 1 389 0
 269 0008 C360     		str	r3, [r0, #12]
 390:./FWLIB/src/stm32f4xx_adc.c **** }
 270              		.loc 1 390 0
 271 000a 7047     		bx	lr
 272              		.cfi_endproc
 273              	.LFE116:
 275              		.section	.text.ADC_Cmd,"ax",%progbits
 276              		.align	1
 277              		.global	ADC_Cmd
 278              		.syntax unified
 279              		.thumb
 280              		.thumb_func
 281              		.fpu fpv4-sp-d16
 283              	ADC_Cmd:
 284              	.LFB117:
 391:./FWLIB/src/stm32f4xx_adc.c **** 
 392:./FWLIB/src/stm32f4xx_adc.c **** /**
 393:./FWLIB/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the specified ADC peripheral.
 394:./FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 395:./FWLIB/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the ADCx peripheral. 
 396:./FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 397:./FWLIB/src/stm32f4xx_adc.c ****   * @retval None
 398:./FWLIB/src/stm32f4xx_adc.c ****   */
 399:./FWLIB/src/stm32f4xx_adc.c **** void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 400:./FWLIB/src/stm32f4xx_adc.c **** {
 285              		.loc 1 400 0
 286              		.cfi_startproc
 287              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccqllL8a.s 			page 13


 288              		@ frame_needed = 0, uses_anonymous_args = 0
 289              		@ link register save eliminated.
 290              	.LVL23:
 401:./FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
 402:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 403:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 404:./FWLIB/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 291              		.loc 1 404 0
 292 0000 21B9     		cbnz	r1, .L16
 405:./FWLIB/src/stm32f4xx_adc.c ****   {
 406:./FWLIB/src/stm32f4xx_adc.c ****     /* Set the ADON bit to wake up the ADC from power down mode */
 407:./FWLIB/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 408:./FWLIB/src/stm32f4xx_adc.c ****   }
 409:./FWLIB/src/stm32f4xx_adc.c ****   else
 410:./FWLIB/src/stm32f4xx_adc.c ****   {
 411:./FWLIB/src/stm32f4xx_adc.c ****     /* Disable the selected ADC peripheral */
 412:./FWLIB/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 293              		.loc 1 412 0
 294 0002 8368     		ldr	r3, [r0, #8]
 295 0004 23F00103 		bic	r3, r3, #1
 296 0008 8360     		str	r3, [r0, #8]
 413:./FWLIB/src/stm32f4xx_adc.c ****   }
 414:./FWLIB/src/stm32f4xx_adc.c **** }
 297              		.loc 1 414 0
 298 000a 7047     		bx	lr
 299              	.L16:
 407:./FWLIB/src/stm32f4xx_adc.c ****   }
 300              		.loc 1 407 0
 301 000c 8368     		ldr	r3, [r0, #8]
 302 000e 43F00103 		orr	r3, r3, #1
 303 0012 8360     		str	r3, [r0, #8]
 304 0014 7047     		bx	lr
 305              		.cfi_endproc
 306              	.LFE117:
 308              		.section	.text.ADC_AnalogWatchdogCmd,"ax",%progbits
 309              		.align	1
 310              		.global	ADC_AnalogWatchdogCmd
 311              		.syntax unified
 312              		.thumb
 313              		.thumb_func
 314              		.fpu fpv4-sp-d16
 316              	ADC_AnalogWatchdogCmd:
 317              	.LFB118:
 415:./FWLIB/src/stm32f4xx_adc.c **** /**
 416:./FWLIB/src/stm32f4xx_adc.c ****   * @}
 417:./FWLIB/src/stm32f4xx_adc.c ****   */
 418:./FWLIB/src/stm32f4xx_adc.c **** 
 419:./FWLIB/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group2 Analog Watchdog configuration functions
 420:./FWLIB/src/stm32f4xx_adc.c ****  *  @brief    Analog Watchdog configuration functions 
 421:./FWLIB/src/stm32f4xx_adc.c ****  *
 422:./FWLIB/src/stm32f4xx_adc.c **** @verbatim   
 423:./FWLIB/src/stm32f4xx_adc.c ****  ===============================================================================
 424:./FWLIB/src/stm32f4xx_adc.c ****              ##### Analog Watchdog configuration functions #####
 425:./FWLIB/src/stm32f4xx_adc.c ****  ===============================================================================  
 426:./FWLIB/src/stm32f4xx_adc.c ****     [..] This section provides functions allowing to configure the Analog Watchdog
 427:./FWLIB/src/stm32f4xx_adc.c ****          (AWD) feature in the ADC.
 428:./FWLIB/src/stm32f4xx_adc.c ****   
ARM GAS  /tmp/ccqllL8a.s 			page 14


 429:./FWLIB/src/stm32f4xx_adc.c ****     [..] A typical configuration Analog Watchdog is done following these steps :
 430:./FWLIB/src/stm32f4xx_adc.c ****       (#) the ADC guarded channel(s) is (are) selected using the 
 431:./FWLIB/src/stm32f4xx_adc.c ****           ADC_AnalogWatchdogSingleChannelConfig() function.
 432:./FWLIB/src/stm32f4xx_adc.c ****       (#) The Analog watchdog lower and higher threshold are configured using the  
 433:./FWLIB/src/stm32f4xx_adc.c ****           ADC_AnalogWatchdogThresholdsConfig() function.
 434:./FWLIB/src/stm32f4xx_adc.c ****       (#) The Analog watchdog is enabled and configured to enable the check, on one
 435:./FWLIB/src/stm32f4xx_adc.c ****           or more channels, using the  ADC_AnalogWatchdogCmd() function.
 436:./FWLIB/src/stm32f4xx_adc.c **** @endverbatim
 437:./FWLIB/src/stm32f4xx_adc.c ****   * @{
 438:./FWLIB/src/stm32f4xx_adc.c ****   */
 439:./FWLIB/src/stm32f4xx_adc.c ****   
 440:./FWLIB/src/stm32f4xx_adc.c **** /**
 441:./FWLIB/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the analog watchdog on single/all regular or 
 442:./FWLIB/src/stm32f4xx_adc.c ****   *         injected channels
 443:./FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 444:./FWLIB/src/stm32f4xx_adc.c ****   * @param  ADC_AnalogWatchdog: the ADC analog watchdog configuration.
 445:./FWLIB/src/stm32f4xx_adc.c ****   *         This parameter can be one of the following values:
 446:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_SingleRegEnable: Analog watchdog on a single regular channel
 447:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_SingleInjecEnable: Analog watchdog on a single injected chan
 448:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_SingleRegOrInjecEnable: Analog watchdog on a single regular 
 449:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_AllRegEnable: Analog watchdog on all regular channel
 450:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_AllInjecEnable: Analog watchdog on all injected channel
 451:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and inj
 452:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
 453:./FWLIB/src/stm32f4xx_adc.c ****   * @retval None	  
 454:./FWLIB/src/stm32f4xx_adc.c ****   */
 455:./FWLIB/src/stm32f4xx_adc.c **** void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
 456:./FWLIB/src/stm32f4xx_adc.c **** {
 318              		.loc 1 456 0
 319              		.cfi_startproc
 320              		@ args = 0, pretend = 0, frame = 0
 321              		@ frame_needed = 0, uses_anonymous_args = 0
 322              		@ link register save eliminated.
 323              	.LVL24:
 457:./FWLIB/src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
 458:./FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
 459:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 460:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
 461:./FWLIB/src/stm32f4xx_adc.c ****   
 462:./FWLIB/src/stm32f4xx_adc.c ****   /* Get the old register value */
 463:./FWLIB/src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR1;
 324              		.loc 1 463 0
 325 0000 4368     		ldr	r3, [r0, #4]
 326              	.LVL25:
 464:./FWLIB/src/stm32f4xx_adc.c ****   
 465:./FWLIB/src/stm32f4xx_adc.c ****   /* Clear AWDEN, JAWDEN and AWDSGL bits */
 466:./FWLIB/src/stm32f4xx_adc.c ****   tmpreg &= CR1_AWDMode_RESET;
 327              		.loc 1 466 0
 328 0002 23F44003 		bic	r3, r3, #12582912
 329              	.LVL26:
 330 0006 23F40073 		bic	r3, r3, #512
 331              	.LVL27:
 467:./FWLIB/src/stm32f4xx_adc.c ****   
 468:./FWLIB/src/stm32f4xx_adc.c ****   /* Set the analog watchdog enable mode */
 469:./FWLIB/src/stm32f4xx_adc.c ****   tmpreg |= ADC_AnalogWatchdog;
 332              		.loc 1 469 0
 333 000a 1943     		orrs	r1, r1, r3
ARM GAS  /tmp/ccqllL8a.s 			page 15


 334              	.LVL28:
 470:./FWLIB/src/stm32f4xx_adc.c ****   
 471:./FWLIB/src/stm32f4xx_adc.c ****   /* Store the new register value */
 472:./FWLIB/src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg;
 335              		.loc 1 472 0
 336 000c 4160     		str	r1, [r0, #4]
 473:./FWLIB/src/stm32f4xx_adc.c **** }
 337              		.loc 1 473 0
 338 000e 7047     		bx	lr
 339              		.cfi_endproc
 340              	.LFE118:
 342              		.section	.text.ADC_AnalogWatchdogThresholdsConfig,"ax",%progbits
 343              		.align	1
 344              		.global	ADC_AnalogWatchdogThresholdsConfig
 345              		.syntax unified
 346              		.thumb
 347              		.thumb_func
 348              		.fpu fpv4-sp-d16
 350              	ADC_AnalogWatchdogThresholdsConfig:
 351              	.LFB119:
 474:./FWLIB/src/stm32f4xx_adc.c **** 
 475:./FWLIB/src/stm32f4xx_adc.c **** /**
 476:./FWLIB/src/stm32f4xx_adc.c ****   * @brief  Configures the high and low thresholds of the analog watchdog.
 477:./FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 478:./FWLIB/src/stm32f4xx_adc.c ****   * @param  HighThreshold: the ADC analog watchdog High threshold value.
 479:./FWLIB/src/stm32f4xx_adc.c ****   *          This parameter must be a 12-bit value.
 480:./FWLIB/src/stm32f4xx_adc.c ****   * @param  LowThreshold:  the ADC analog watchdog Low threshold value.
 481:./FWLIB/src/stm32f4xx_adc.c ****   *          This parameter must be a 12-bit value.
 482:./FWLIB/src/stm32f4xx_adc.c ****   * @retval None
 483:./FWLIB/src/stm32f4xx_adc.c ****   */
 484:./FWLIB/src/stm32f4xx_adc.c **** void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
 485:./FWLIB/src/stm32f4xx_adc.c ****                                         uint16_t LowThreshold)
 486:./FWLIB/src/stm32f4xx_adc.c **** {
 352              		.loc 1 486 0
 353              		.cfi_startproc
 354              		@ args = 0, pretend = 0, frame = 0
 355              		@ frame_needed = 0, uses_anonymous_args = 0
 356              		@ link register save eliminated.
 357              	.LVL29:
 487:./FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
 488:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 489:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_THRESHOLD(HighThreshold));
 490:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_THRESHOLD(LowThreshold));
 491:./FWLIB/src/stm32f4xx_adc.c ****   
 492:./FWLIB/src/stm32f4xx_adc.c ****   /* Set the ADCx high threshold */
 493:./FWLIB/src/stm32f4xx_adc.c ****   ADCx->HTR = HighThreshold;
 358              		.loc 1 493 0
 359 0000 4162     		str	r1, [r0, #36]
 494:./FWLIB/src/stm32f4xx_adc.c ****   
 495:./FWLIB/src/stm32f4xx_adc.c ****   /* Set the ADCx low threshold */
 496:./FWLIB/src/stm32f4xx_adc.c ****   ADCx->LTR = LowThreshold;
 360              		.loc 1 496 0
 361 0002 8262     		str	r2, [r0, #40]
 497:./FWLIB/src/stm32f4xx_adc.c **** }
 362              		.loc 1 497 0
 363 0004 7047     		bx	lr
 364              		.cfi_endproc
ARM GAS  /tmp/ccqllL8a.s 			page 16


 365              	.LFE119:
 367              		.section	.text.ADC_AnalogWatchdogSingleChannelConfig,"ax",%progbits
 368              		.align	1
 369              		.global	ADC_AnalogWatchdogSingleChannelConfig
 370              		.syntax unified
 371              		.thumb
 372              		.thumb_func
 373              		.fpu fpv4-sp-d16
 375              	ADC_AnalogWatchdogSingleChannelConfig:
 376              	.LFB120:
 498:./FWLIB/src/stm32f4xx_adc.c **** 
 499:./FWLIB/src/stm32f4xx_adc.c **** /**
 500:./FWLIB/src/stm32f4xx_adc.c ****   * @brief  Configures the analog watchdog guarded single channel
 501:./FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 502:./FWLIB/src/stm32f4xx_adc.c ****   * @param  ADC_Channel: the ADC channel to configure for the analog watchdog. 
 503:./FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
 504:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_0: ADC Channel0 selected
 505:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_1: ADC Channel1 selected
 506:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_2: ADC Channel2 selected
 507:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_3: ADC Channel3 selected
 508:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_4: ADC Channel4 selected
 509:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_5: ADC Channel5 selected
 510:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_6: ADC Channel6 selected
 511:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_7: ADC Channel7 selected
 512:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_8: ADC Channel8 selected
 513:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_9: ADC Channel9 selected
 514:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_10: ADC Channel10 selected
 515:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_11: ADC Channel11 selected
 516:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_12: ADC Channel12 selected
 517:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_13: ADC Channel13 selected
 518:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_14: ADC Channel14 selected
 519:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_15: ADC Channel15 selected
 520:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_16: ADC Channel16 selected
 521:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_17: ADC Channel17 selected
 522:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_18: ADC Channel18 selected
 523:./FWLIB/src/stm32f4xx_adc.c ****   * @retval None
 524:./FWLIB/src/stm32f4xx_adc.c ****   */
 525:./FWLIB/src/stm32f4xx_adc.c **** void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
 526:./FWLIB/src/stm32f4xx_adc.c **** {
 377              		.loc 1 526 0
 378              		.cfi_startproc
 379              		@ args = 0, pretend = 0, frame = 0
 380              		@ frame_needed = 0, uses_anonymous_args = 0
 381              		@ link register save eliminated.
 382              	.LVL30:
 527:./FWLIB/src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
 528:./FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
 529:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 530:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
 531:./FWLIB/src/stm32f4xx_adc.c ****   
 532:./FWLIB/src/stm32f4xx_adc.c ****   /* Get the old register value */
 533:./FWLIB/src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR1;
 383              		.loc 1 533 0
 384 0000 4368     		ldr	r3, [r0, #4]
 385              	.LVL31:
 534:./FWLIB/src/stm32f4xx_adc.c ****   
 535:./FWLIB/src/stm32f4xx_adc.c ****   /* Clear the Analog watchdog channel select bits */
ARM GAS  /tmp/ccqllL8a.s 			page 17


 536:./FWLIB/src/stm32f4xx_adc.c ****   tmpreg &= CR1_AWDCH_RESET;
 386              		.loc 1 536 0
 387 0002 23F01F03 		bic	r3, r3, #31
 388              	.LVL32:
 537:./FWLIB/src/stm32f4xx_adc.c ****   
 538:./FWLIB/src/stm32f4xx_adc.c ****   /* Set the Analog watchdog channel */
 539:./FWLIB/src/stm32f4xx_adc.c ****   tmpreg |= ADC_Channel;
 389              		.loc 1 539 0
 390 0006 1943     		orrs	r1, r1, r3
 391              	.LVL33:
 540:./FWLIB/src/stm32f4xx_adc.c ****   
 541:./FWLIB/src/stm32f4xx_adc.c ****   /* Store the new register value */
 542:./FWLIB/src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg;
 392              		.loc 1 542 0
 393 0008 4160     		str	r1, [r0, #4]
 543:./FWLIB/src/stm32f4xx_adc.c **** }
 394              		.loc 1 543 0
 395 000a 7047     		bx	lr
 396              		.cfi_endproc
 397              	.LFE120:
 399              		.section	.text.ADC_TempSensorVrefintCmd,"ax",%progbits
 400              		.align	1
 401              		.global	ADC_TempSensorVrefintCmd
 402              		.syntax unified
 403              		.thumb
 404              		.thumb_func
 405              		.fpu fpv4-sp-d16
 407              	ADC_TempSensorVrefintCmd:
 408              	.LFB121:
 544:./FWLIB/src/stm32f4xx_adc.c **** /**
 545:./FWLIB/src/stm32f4xx_adc.c ****   * @}
 546:./FWLIB/src/stm32f4xx_adc.c ****   */
 547:./FWLIB/src/stm32f4xx_adc.c **** 
 548:./FWLIB/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group3 Temperature Sensor, Vrefint (Voltage Reference internal) 
 549:./FWLIB/src/stm32f4xx_adc.c ****  *            and VBAT (Voltage BATtery) management functions
 550:./FWLIB/src/stm32f4xx_adc.c ****  *  @brief   Temperature Sensor, Vrefint and VBAT management functions 
 551:./FWLIB/src/stm32f4xx_adc.c ****  *
 552:./FWLIB/src/stm32f4xx_adc.c **** @verbatim   
 553:./FWLIB/src/stm32f4xx_adc.c ****  ===============================================================================
 554:./FWLIB/src/stm32f4xx_adc.c ****       ##### Temperature Sensor, Vrefint and VBAT management functions #####
 555:./FWLIB/src/stm32f4xx_adc.c ****  ===============================================================================  
 556:./FWLIB/src/stm32f4xx_adc.c ****     [..] This section provides functions allowing to enable/ disable the internal 
 557:./FWLIB/src/stm32f4xx_adc.c ****          connections between the ADC and the Temperature Sensor, the Vrefint and 
 558:./FWLIB/src/stm32f4xx_adc.c ****          the Vbat sources.
 559:./FWLIB/src/stm32f4xx_adc.c ****      
 560:./FWLIB/src/stm32f4xx_adc.c ****     [..] A typical configuration to get the Temperature sensor and Vrefint channels 
 561:./FWLIB/src/stm32f4xx_adc.c ****          voltages is done following these steps :
 562:./FWLIB/src/stm32f4xx_adc.c ****       (#) Enable the internal connection of Temperature sensor and Vrefint sources 
 563:./FWLIB/src/stm32f4xx_adc.c ****           with the ADC channels using ADC_TempSensorVrefintCmd() function. 
 564:./FWLIB/src/stm32f4xx_adc.c ****       (#) Select the ADC_Channel_TempSensor and/or ADC_Channel_Vrefint using 
 565:./FWLIB/src/stm32f4xx_adc.c ****           ADC_RegularChannelConfig() or  ADC_InjectedChannelConfig() functions 
 566:./FWLIB/src/stm32f4xx_adc.c ****       (#) Get the voltage values, using ADC_GetConversionValue() or  
 567:./FWLIB/src/stm32f4xx_adc.c ****           ADC_GetInjectedConversionValue().
 568:./FWLIB/src/stm32f4xx_adc.c **** 
 569:./FWLIB/src/stm32f4xx_adc.c ****     [..] A typical configuration to get the VBAT channel voltage is done following 
 570:./FWLIB/src/stm32f4xx_adc.c ****          these steps :
 571:./FWLIB/src/stm32f4xx_adc.c ****       (#) Enable the internal connection of VBAT source with the ADC channel using 
ARM GAS  /tmp/ccqllL8a.s 			page 18


 572:./FWLIB/src/stm32f4xx_adc.c ****           ADC_VBATCmd() function. 
 573:./FWLIB/src/stm32f4xx_adc.c ****       (#) Select the ADC_Channel_Vbat using ADC_RegularChannelConfig() or  
 574:./FWLIB/src/stm32f4xx_adc.c ****           ADC_InjectedChannelConfig() functions 
 575:./FWLIB/src/stm32f4xx_adc.c ****       (#) Get the voltage value, using ADC_GetConversionValue() or  
 576:./FWLIB/src/stm32f4xx_adc.c ****           ADC_GetInjectedConversionValue().
 577:./FWLIB/src/stm32f4xx_adc.c ****  
 578:./FWLIB/src/stm32f4xx_adc.c **** @endverbatim
 579:./FWLIB/src/stm32f4xx_adc.c ****   * @{
 580:./FWLIB/src/stm32f4xx_adc.c ****   */
 581:./FWLIB/src/stm32f4xx_adc.c ****   
 582:./FWLIB/src/stm32f4xx_adc.c ****   
 583:./FWLIB/src/stm32f4xx_adc.c **** /**
 584:./FWLIB/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the temperature sensor and Vrefint channels.
 585:./FWLIB/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the temperature sensor and Vrefint channels.
 586:./FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 587:./FWLIB/src/stm32f4xx_adc.c ****   * @retval None
 588:./FWLIB/src/stm32f4xx_adc.c ****   */
 589:./FWLIB/src/stm32f4xx_adc.c **** void ADC_TempSensorVrefintCmd(FunctionalState NewState)                
 590:./FWLIB/src/stm32f4xx_adc.c **** {
 409              		.loc 1 590 0
 410              		.cfi_startproc
 411              		@ args = 0, pretend = 0, frame = 0
 412              		@ frame_needed = 0, uses_anonymous_args = 0
 413              		@ link register save eliminated.
 414              	.LVL34:
 591:./FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
 592:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 593:./FWLIB/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 415              		.loc 1 593 0
 416 0000 28B9     		cbnz	r0, .L23
 594:./FWLIB/src/stm32f4xx_adc.c ****   {
 595:./FWLIB/src/stm32f4xx_adc.c ****     /* Enable the temperature sensor and Vrefint channel*/
 596:./FWLIB/src/stm32f4xx_adc.c ****     ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 597:./FWLIB/src/stm32f4xx_adc.c ****   }
 598:./FWLIB/src/stm32f4xx_adc.c ****   else
 599:./FWLIB/src/stm32f4xx_adc.c ****   {
 600:./FWLIB/src/stm32f4xx_adc.c ****     /* Disable the temperature sensor and Vrefint channel*/
 601:./FWLIB/src/stm32f4xx_adc.c ****     ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
 417              		.loc 1 601 0
 418 0002 064A     		ldr	r2, .L24
 419 0004 5368     		ldr	r3, [r2, #4]
 420 0006 23F40003 		bic	r3, r3, #8388608
 421 000a 5360     		str	r3, [r2, #4]
 602:./FWLIB/src/stm32f4xx_adc.c ****   }
 603:./FWLIB/src/stm32f4xx_adc.c **** }
 422              		.loc 1 603 0
 423 000c 7047     		bx	lr
 424              	.L23:
 596:./FWLIB/src/stm32f4xx_adc.c ****   }
 425              		.loc 1 596 0
 426 000e 034A     		ldr	r2, .L24
 427 0010 5368     		ldr	r3, [r2, #4]
 428 0012 43F40003 		orr	r3, r3, #8388608
 429 0016 5360     		str	r3, [r2, #4]
 430 0018 7047     		bx	lr
 431              	.L25:
 432 001a 00BF     		.align	2
ARM GAS  /tmp/ccqllL8a.s 			page 19


 433              	.L24:
 434 001c 00230140 		.word	1073816320
 435              		.cfi_endproc
 436              	.LFE121:
 438              		.section	.text.ADC_VBATCmd,"ax",%progbits
 439              		.align	1
 440              		.global	ADC_VBATCmd
 441              		.syntax unified
 442              		.thumb
 443              		.thumb_func
 444              		.fpu fpv4-sp-d16
 446              	ADC_VBATCmd:
 447              	.LFB122:
 604:./FWLIB/src/stm32f4xx_adc.c **** 
 605:./FWLIB/src/stm32f4xx_adc.c **** /**
 606:./FWLIB/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the VBAT (Voltage Battery) channel.
 607:./FWLIB/src/stm32f4xx_adc.c ****   * 
 608:./FWLIB/src/stm32f4xx_adc.c ****   * @note   the Battery voltage measured is equal to VBAT/2 on STM32F40xx and 
 609:./FWLIB/src/stm32f4xx_adc.c ****   *         STM32F41xx devices and equal to VBAT/4 on STM32F42xx and STM32F43xx devices 
 610:./FWLIB/src/stm32f4xx_adc.c ****   *              
 611:./FWLIB/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the VBAT channel.
 612:./FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 613:./FWLIB/src/stm32f4xx_adc.c ****   * @retval None
 614:./FWLIB/src/stm32f4xx_adc.c ****   */
 615:./FWLIB/src/stm32f4xx_adc.c **** void ADC_VBATCmd(FunctionalState NewState)                             
 616:./FWLIB/src/stm32f4xx_adc.c **** {
 448              		.loc 1 616 0
 449              		.cfi_startproc
 450              		@ args = 0, pretend = 0, frame = 0
 451              		@ frame_needed = 0, uses_anonymous_args = 0
 452              		@ link register save eliminated.
 453              	.LVL35:
 617:./FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
 618:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 619:./FWLIB/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 454              		.loc 1 619 0
 455 0000 28B9     		cbnz	r0, .L29
 620:./FWLIB/src/stm32f4xx_adc.c ****   {
 621:./FWLIB/src/stm32f4xx_adc.c ****     /* Enable the VBAT channel*/
 622:./FWLIB/src/stm32f4xx_adc.c ****     ADC->CCR |= (uint32_t)ADC_CCR_VBATE;
 623:./FWLIB/src/stm32f4xx_adc.c ****   }
 624:./FWLIB/src/stm32f4xx_adc.c ****   else
 625:./FWLIB/src/stm32f4xx_adc.c ****   {
 626:./FWLIB/src/stm32f4xx_adc.c ****     /* Disable the VBAT channel*/
 627:./FWLIB/src/stm32f4xx_adc.c ****     ADC->CCR &= (uint32_t)(~ADC_CCR_VBATE);
 456              		.loc 1 627 0
 457 0002 064A     		ldr	r2, .L30
 458 0004 5368     		ldr	r3, [r2, #4]
 459 0006 23F48003 		bic	r3, r3, #4194304
 460 000a 5360     		str	r3, [r2, #4]
 628:./FWLIB/src/stm32f4xx_adc.c ****   }
 629:./FWLIB/src/stm32f4xx_adc.c **** }
 461              		.loc 1 629 0
 462 000c 7047     		bx	lr
 463              	.L29:
 622:./FWLIB/src/stm32f4xx_adc.c ****   }
 464              		.loc 1 622 0
ARM GAS  /tmp/ccqllL8a.s 			page 20


 465 000e 034A     		ldr	r2, .L30
 466 0010 5368     		ldr	r3, [r2, #4]
 467 0012 43F48003 		orr	r3, r3, #4194304
 468 0016 5360     		str	r3, [r2, #4]
 469 0018 7047     		bx	lr
 470              	.L31:
 471 001a 00BF     		.align	2
 472              	.L30:
 473 001c 00230140 		.word	1073816320
 474              		.cfi_endproc
 475              	.LFE122:
 477              		.section	.text.ADC_RegularChannelConfig,"ax",%progbits
 478              		.align	1
 479              		.global	ADC_RegularChannelConfig
 480              		.syntax unified
 481              		.thumb
 482              		.thumb_func
 483              		.fpu fpv4-sp-d16
 485              	ADC_RegularChannelConfig:
 486              	.LFB123:
 630:./FWLIB/src/stm32f4xx_adc.c **** 
 631:./FWLIB/src/stm32f4xx_adc.c **** /**
 632:./FWLIB/src/stm32f4xx_adc.c ****   * @}
 633:./FWLIB/src/stm32f4xx_adc.c ****   */
 634:./FWLIB/src/stm32f4xx_adc.c **** 
 635:./FWLIB/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group4 Regular Channels Configuration functions
 636:./FWLIB/src/stm32f4xx_adc.c ****  *  @brief   Regular Channels Configuration functions 
 637:./FWLIB/src/stm32f4xx_adc.c ****  *
 638:./FWLIB/src/stm32f4xx_adc.c **** @verbatim   
 639:./FWLIB/src/stm32f4xx_adc.c ****  ===============================================================================
 640:./FWLIB/src/stm32f4xx_adc.c ****              ##### Regular Channels Configuration functions #####
 641:./FWLIB/src/stm32f4xx_adc.c ****  ===============================================================================  
 642:./FWLIB/src/stm32f4xx_adc.c **** 
 643:./FWLIB/src/stm32f4xx_adc.c ****     [..] This section provides functions allowing to manage the ADC's regular channels,
 644:./FWLIB/src/stm32f4xx_adc.c ****          it is composed of 2 sub sections : 
 645:./FWLIB/src/stm32f4xx_adc.c ****   
 646:./FWLIB/src/stm32f4xx_adc.c ****       (#) Configuration and management functions for regular channels: This subsection 
 647:./FWLIB/src/stm32f4xx_adc.c ****           provides functions allowing to configure the ADC regular channels :    
 648:./FWLIB/src/stm32f4xx_adc.c ****          (++) Configure the rank in the regular group sequencer for each channel
 649:./FWLIB/src/stm32f4xx_adc.c ****          (++) Configure the sampling time for each channel
 650:./FWLIB/src/stm32f4xx_adc.c ****          (++) select the conversion Trigger for regular channels
 651:./FWLIB/src/stm32f4xx_adc.c ****          (++) select the desired EOC event behavior configuration
 652:./FWLIB/src/stm32f4xx_adc.c ****          (++) Activate the continuous Mode  (*)
 653:./FWLIB/src/stm32f4xx_adc.c ****          (++) Activate the Discontinuous Mode 
 654:./FWLIB/src/stm32f4xx_adc.c ****          -@@- Please Note that the following features for regular channels 
 655:./FWLIB/src/stm32f4xx_adc.c ****              are configurated using the ADC_Init() function : 
 656:./FWLIB/src/stm32f4xx_adc.c ****            (+@@) scan mode activation 
 657:./FWLIB/src/stm32f4xx_adc.c ****            (+@@) continuous mode activation (**) 
 658:./FWLIB/src/stm32f4xx_adc.c ****            (+@@) External trigger source  
 659:./FWLIB/src/stm32f4xx_adc.c ****            (+@@) External trigger edge 
 660:./FWLIB/src/stm32f4xx_adc.c ****            (+@@) number of conversion in the regular channels group sequencer.
 661:./FWLIB/src/stm32f4xx_adc.c ****      
 662:./FWLIB/src/stm32f4xx_adc.c ****          -@@- (*) and (**) are performing the same configuration
 663:./FWLIB/src/stm32f4xx_adc.c ****      
 664:./FWLIB/src/stm32f4xx_adc.c ****       (#) Get the conversion data: This subsection provides an important function in 
 665:./FWLIB/src/stm32f4xx_adc.c ****           the ADC peripheral since it returns the converted data of the current 
 666:./FWLIB/src/stm32f4xx_adc.c ****           regular channel. When the Conversion value is read, the EOC Flag is 
ARM GAS  /tmp/ccqllL8a.s 			page 21


 667:./FWLIB/src/stm32f4xx_adc.c ****           automatically cleared.
 668:./FWLIB/src/stm32f4xx_adc.c ****      
 669:./FWLIB/src/stm32f4xx_adc.c ****           -@- For multi ADC mode, the last ADC1, ADC2 and ADC3 regular conversions 
 670:./FWLIB/src/stm32f4xx_adc.c ****               results data (in the selected multi mode) can be returned in the same 
 671:./FWLIB/src/stm32f4xx_adc.c ****               time using ADC_GetMultiModeConversionValue() function. 
 672:./FWLIB/src/stm32f4xx_adc.c ****          
 673:./FWLIB/src/stm32f4xx_adc.c **** @endverbatim
 674:./FWLIB/src/stm32f4xx_adc.c ****   * @{
 675:./FWLIB/src/stm32f4xx_adc.c ****   */
 676:./FWLIB/src/stm32f4xx_adc.c **** /**
 677:./FWLIB/src/stm32f4xx_adc.c ****   * @brief  Configures for the selected ADC regular channel its corresponding
 678:./FWLIB/src/stm32f4xx_adc.c ****   *         rank in the sequencer and its sample time.
 679:./FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 680:./FWLIB/src/stm32f4xx_adc.c ****   * @param  ADC_Channel: the ADC channel to configure. 
 681:./FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
 682:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_0: ADC Channel0 selected
 683:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_1: ADC Channel1 selected
 684:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_2: ADC Channel2 selected
 685:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_3: ADC Channel3 selected
 686:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_4: ADC Channel4 selected
 687:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_5: ADC Channel5 selected
 688:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_6: ADC Channel6 selected
 689:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_7: ADC Channel7 selected
 690:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_8: ADC Channel8 selected
 691:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_9: ADC Channel9 selected
 692:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_10: ADC Channel10 selected
 693:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_11: ADC Channel11 selected
 694:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_12: ADC Channel12 selected
 695:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_13: ADC Channel13 selected
 696:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_14: ADC Channel14 selected
 697:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_15: ADC Channel15 selected
 698:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_16: ADC Channel16 selected
 699:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_17: ADC Channel17 selected
 700:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_18: ADC Channel18 selected                       
 701:./FWLIB/src/stm32f4xx_adc.c ****   * @param  Rank: The rank in the regular group sequencer.
 702:./FWLIB/src/stm32f4xx_adc.c ****   *          This parameter must be between 1 to 16.
 703:./FWLIB/src/stm32f4xx_adc.c ****   * @param  ADC_SampleTime: The sample time value to be set for the selected channel. 
 704:./FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
 705:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_3Cycles: Sample time equal to 3 cycles
 706:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_15Cycles: Sample time equal to 15 cycles
 707:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_28Cycles: Sample time equal to 28 cycles
 708:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_56Cycles: Sample time equal to 56 cycles	
 709:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_84Cycles: Sample time equal to 84 cycles	
 710:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_112Cycles: Sample time equal to 112 cycles	
 711:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
 712:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
 713:./FWLIB/src/stm32f4xx_adc.c ****   * @retval None
 714:./FWLIB/src/stm32f4xx_adc.c ****   */
 715:./FWLIB/src/stm32f4xx_adc.c **** void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_Sam
 716:./FWLIB/src/stm32f4xx_adc.c **** {
 487              		.loc 1 716 0
 488              		.cfi_startproc
 489              		@ args = 0, pretend = 0, frame = 0
 490              		@ frame_needed = 0, uses_anonymous_args = 0
 491              		@ link register save eliminated.
 492              	.LVL36:
 493 0000 70B4     		push	{r4, r5, r6}
ARM GAS  /tmp/ccqllL8a.s 			page 22


 494              	.LCFI5:
 495              		.cfi_def_cfa_offset 12
 496              		.cfi_offset 4, -12
 497              		.cfi_offset 5, -8
 498              		.cfi_offset 6, -4
 499              	.LVL37:
 717:./FWLIB/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0, tmpreg2 = 0;
 718:./FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
 719:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 720:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
 721:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_REGULAR_RANK(Rank));
 722:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
 723:./FWLIB/src/stm32f4xx_adc.c ****   
 724:./FWLIB/src/stm32f4xx_adc.c ****   /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
 725:./FWLIB/src/stm32f4xx_adc.c ****   if (ADC_Channel > ADC_Channel_9)
 500              		.loc 1 725 0
 501 0002 0929     		cmp	r1, #9
 502 0004 1DD9     		bls	.L33
 726:./FWLIB/src/stm32f4xx_adc.c ****   {
 727:./FWLIB/src/stm32f4xx_adc.c ****     /* Get the old register value */
 728:./FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR1;
 503              		.loc 1 728 0
 504 0006 C568     		ldr	r5, [r0, #12]
 505              	.LVL38:
 729:./FWLIB/src/stm32f4xx_adc.c ****     
 730:./FWLIB/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 731:./FWLIB/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 506              		.loc 1 731 0
 507 0008 A1F10A04 		sub	r4, r1, #10
 508 000c 04EB4404 		add	r4, r4, r4, lsl #1
 509 0010 0726     		movs	r6, #7
 510 0012 A640     		lsls	r6, r6, r4
 511              	.LVL39:
 732:./FWLIB/src/stm32f4xx_adc.c ****     
 733:./FWLIB/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
 734:./FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 512              		.loc 1 734 0
 513 0014 25EA0605 		bic	r5, r5, r6
 514              	.LVL40:
 735:./FWLIB/src/stm32f4xx_adc.c ****     
 736:./FWLIB/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 737:./FWLIB/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 515              		.loc 1 737 0
 516 0018 03FA04F4 		lsl	r4, r3, r4
 517              	.LVL41:
 738:./FWLIB/src/stm32f4xx_adc.c ****     
 739:./FWLIB/src/stm32f4xx_adc.c ****     /* Set the new sample time */
 740:./FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 518              		.loc 1 740 0
 519 001c 2C43     		orrs	r4, r4, r5
 520              	.LVL42:
 741:./FWLIB/src/stm32f4xx_adc.c ****     
 742:./FWLIB/src/stm32f4xx_adc.c ****     /* Store the new register value */
 743:./FWLIB/src/stm32f4xx_adc.c ****     ADCx->SMPR1 = tmpreg1;
 521              		.loc 1 743 0
 522 001e C460     		str	r4, [r0, #12]
 523              	.LVL43:
ARM GAS  /tmp/ccqllL8a.s 			page 23


 524              	.L34:
 744:./FWLIB/src/stm32f4xx_adc.c ****   }
 745:./FWLIB/src/stm32f4xx_adc.c ****   else /* ADC_Channel include in ADC_Channel_[0..9] */
 746:./FWLIB/src/stm32f4xx_adc.c ****   {
 747:./FWLIB/src/stm32f4xx_adc.c ****     /* Get the old register value */
 748:./FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR2;
 749:./FWLIB/src/stm32f4xx_adc.c ****     
 750:./FWLIB/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 751:./FWLIB/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 752:./FWLIB/src/stm32f4xx_adc.c ****     
 753:./FWLIB/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
 754:./FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 755:./FWLIB/src/stm32f4xx_adc.c ****     
 756:./FWLIB/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 757:./FWLIB/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 758:./FWLIB/src/stm32f4xx_adc.c ****     
 759:./FWLIB/src/stm32f4xx_adc.c ****     /* Set the new sample time */
 760:./FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 761:./FWLIB/src/stm32f4xx_adc.c ****     
 762:./FWLIB/src/stm32f4xx_adc.c ****     /* Store the new register value */
 763:./FWLIB/src/stm32f4xx_adc.c ****     ADCx->SMPR2 = tmpreg1;
 764:./FWLIB/src/stm32f4xx_adc.c ****   }
 765:./FWLIB/src/stm32f4xx_adc.c ****   /* For Rank 1 to 6 */
 766:./FWLIB/src/stm32f4xx_adc.c ****   if (Rank < 7)
 525              		.loc 1 766 0
 526 0020 062A     		cmp	r2, #6
 527 0022 1AD9     		bls	.L39
 767:./FWLIB/src/stm32f4xx_adc.c ****   {
 768:./FWLIB/src/stm32f4xx_adc.c ****     /* Get the old register value */
 769:./FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SQR3;
 770:./FWLIB/src/stm32f4xx_adc.c ****     
 771:./FWLIB/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 772:./FWLIB/src/stm32f4xx_adc.c ****     tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 773:./FWLIB/src/stm32f4xx_adc.c ****     
 774:./FWLIB/src/stm32f4xx_adc.c ****     /* Clear the old SQx bits for the selected rank */
 775:./FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 776:./FWLIB/src/stm32f4xx_adc.c ****     
 777:./FWLIB/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 778:./FWLIB/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 779:./FWLIB/src/stm32f4xx_adc.c ****     
 780:./FWLIB/src/stm32f4xx_adc.c ****     /* Set the SQx bits for the selected rank */
 781:./FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 782:./FWLIB/src/stm32f4xx_adc.c ****     
 783:./FWLIB/src/stm32f4xx_adc.c ****     /* Store the new register value */
 784:./FWLIB/src/stm32f4xx_adc.c ****     ADCx->SQR3 = tmpreg1;
 785:./FWLIB/src/stm32f4xx_adc.c ****   }
 786:./FWLIB/src/stm32f4xx_adc.c ****   /* For Rank 7 to 12 */
 787:./FWLIB/src/stm32f4xx_adc.c ****   else if (Rank < 13)
 528              		.loc 1 787 0
 529 0024 0C2A     		cmp	r2, #12
 530 0026 26D9     		bls	.L40
 788:./FWLIB/src/stm32f4xx_adc.c ****   {
 789:./FWLIB/src/stm32f4xx_adc.c ****     /* Get the old register value */
 790:./FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SQR2;
 791:./FWLIB/src/stm32f4xx_adc.c ****     
 792:./FWLIB/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 793:./FWLIB/src/stm32f4xx_adc.c ****     tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
ARM GAS  /tmp/ccqllL8a.s 			page 24


 794:./FWLIB/src/stm32f4xx_adc.c ****     
 795:./FWLIB/src/stm32f4xx_adc.c ****     /* Clear the old SQx bits for the selected rank */
 796:./FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 797:./FWLIB/src/stm32f4xx_adc.c ****     
 798:./FWLIB/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 799:./FWLIB/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 800:./FWLIB/src/stm32f4xx_adc.c ****     
 801:./FWLIB/src/stm32f4xx_adc.c ****     /* Set the SQx bits for the selected rank */
 802:./FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 803:./FWLIB/src/stm32f4xx_adc.c ****     
 804:./FWLIB/src/stm32f4xx_adc.c ****     /* Store the new register value */
 805:./FWLIB/src/stm32f4xx_adc.c ****     ADCx->SQR2 = tmpreg1;
 806:./FWLIB/src/stm32f4xx_adc.c ****   }
 807:./FWLIB/src/stm32f4xx_adc.c ****   /* For Rank 13 to 16 */
 808:./FWLIB/src/stm32f4xx_adc.c ****   else
 809:./FWLIB/src/stm32f4xx_adc.c ****   {
 810:./FWLIB/src/stm32f4xx_adc.c ****     /* Get the old register value */
 811:./FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SQR1;
 531              		.loc 1 811 0
 532 0028 C36A     		ldr	r3, [r0, #44]
 533              	.LVL44:
 812:./FWLIB/src/stm32f4xx_adc.c ****     
 813:./FWLIB/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 814:./FWLIB/src/stm32f4xx_adc.c ****     tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 534              		.loc 1 814 0
 535 002a 0D3A     		subs	r2, r2, #13
 536              	.LVL45:
 537 002c 02EB8202 		add	r2, r2, r2, lsl #2
 538 0030 1F24     		movs	r4, #31
 539 0032 9440     		lsls	r4, r4, r2
 540              	.LVL46:
 815:./FWLIB/src/stm32f4xx_adc.c ****     
 816:./FWLIB/src/stm32f4xx_adc.c ****     /* Clear the old SQx bits for the selected rank */
 817:./FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 541              		.loc 1 817 0
 542 0034 23EA0403 		bic	r3, r3, r4
 543              	.LVL47:
 818:./FWLIB/src/stm32f4xx_adc.c ****     
 819:./FWLIB/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 820:./FWLIB/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 544              		.loc 1 820 0
 545 0038 01FA02F2 		lsl	r2, r1, r2
 546              	.LVL48:
 821:./FWLIB/src/stm32f4xx_adc.c ****     
 822:./FWLIB/src/stm32f4xx_adc.c ****     /* Set the SQx bits for the selected rank */
 823:./FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 547              		.loc 1 823 0
 548 003c 1A43     		orrs	r2, r2, r3
 549              	.LVL49:
 824:./FWLIB/src/stm32f4xx_adc.c ****     
 825:./FWLIB/src/stm32f4xx_adc.c ****     /* Store the new register value */
 826:./FWLIB/src/stm32f4xx_adc.c ****     ADCx->SQR1 = tmpreg1;
 550              		.loc 1 826 0
 551 003e C262     		str	r2, [r0, #44]
 827:./FWLIB/src/stm32f4xx_adc.c ****   }
 828:./FWLIB/src/stm32f4xx_adc.c **** }
 552              		.loc 1 828 0
ARM GAS  /tmp/ccqllL8a.s 			page 25


 553 0040 17E0     		b	.L32
 554              	.LVL50:
 555              	.L33:
 748:./FWLIB/src/stm32f4xx_adc.c ****     
 556              		.loc 1 748 0
 557 0042 0569     		ldr	r5, [r0, #16]
 558              	.LVL51:
 751:./FWLIB/src/stm32f4xx_adc.c ****     
 559              		.loc 1 751 0
 560 0044 01EB4106 		add	r6, r1, r1, lsl #1
 561 0048 0724     		movs	r4, #7
 562 004a B440     		lsls	r4, r4, r6
 563              	.LVL52:
 754:./FWLIB/src/stm32f4xx_adc.c ****     
 564              		.loc 1 754 0
 565 004c 25EA0405 		bic	r5, r5, r4
 566              	.LVL53:
 757:./FWLIB/src/stm32f4xx_adc.c ****     
 567              		.loc 1 757 0
 568 0050 03FA06F4 		lsl	r4, r3, r6
 569              	.LVL54:
 760:./FWLIB/src/stm32f4xx_adc.c ****     
 570              		.loc 1 760 0
 571 0054 2C43     		orrs	r4, r4, r5
 572              	.LVL55:
 763:./FWLIB/src/stm32f4xx_adc.c ****   }
 573              		.loc 1 763 0
 574 0056 0461     		str	r4, [r0, #16]
 575 0058 E2E7     		b	.L34
 576              	.LVL56:
 577              	.L39:
 769:./FWLIB/src/stm32f4xx_adc.c ****     
 578              		.loc 1 769 0
 579 005a 436B     		ldr	r3, [r0, #52]
 580              	.LVL57:
 772:./FWLIB/src/stm32f4xx_adc.c ****     
 581              		.loc 1 772 0
 582 005c 013A     		subs	r2, r2, #1
 583              	.LVL58:
 584 005e 02EB8202 		add	r2, r2, r2, lsl #2
 585 0062 1F24     		movs	r4, #31
 586 0064 9440     		lsls	r4, r4, r2
 587              	.LVL59:
 775:./FWLIB/src/stm32f4xx_adc.c ****     
 588              		.loc 1 775 0
 589 0066 23EA0403 		bic	r3, r3, r4
 590              	.LVL60:
 778:./FWLIB/src/stm32f4xx_adc.c ****     
 591              		.loc 1 778 0
 592 006a 01FA02F2 		lsl	r2, r1, r2
 593              	.LVL61:
 781:./FWLIB/src/stm32f4xx_adc.c ****     
 594              		.loc 1 781 0
 595 006e 1A43     		orrs	r2, r2, r3
 596              	.LVL62:
 784:./FWLIB/src/stm32f4xx_adc.c ****   }
 597              		.loc 1 784 0
ARM GAS  /tmp/ccqllL8a.s 			page 26


 598 0070 4263     		str	r2, [r0, #52]
 599              	.L32:
 600              		.loc 1 828 0
 601 0072 70BC     		pop	{r4, r5, r6}
 602              	.LCFI6:
 603              		.cfi_remember_state
 604              		.cfi_restore 6
 605              		.cfi_restore 5
 606              		.cfi_restore 4
 607              		.cfi_def_cfa_offset 0
 608 0074 7047     		bx	lr
 609              	.LVL63:
 610              	.L40:
 611              	.LCFI7:
 612              		.cfi_restore_state
 790:./FWLIB/src/stm32f4xx_adc.c ****     
 613              		.loc 1 790 0
 614 0076 036B     		ldr	r3, [r0, #48]
 615              	.LVL64:
 793:./FWLIB/src/stm32f4xx_adc.c ****     
 616              		.loc 1 793 0
 617 0078 073A     		subs	r2, r2, #7
 618              	.LVL65:
 619 007a 02EB8202 		add	r2, r2, r2, lsl #2
 620 007e 1F24     		movs	r4, #31
 621 0080 9440     		lsls	r4, r4, r2
 622              	.LVL66:
 796:./FWLIB/src/stm32f4xx_adc.c ****     
 623              		.loc 1 796 0
 624 0082 23EA0403 		bic	r3, r3, r4
 625              	.LVL67:
 799:./FWLIB/src/stm32f4xx_adc.c ****     
 626              		.loc 1 799 0
 627 0086 01FA02F2 		lsl	r2, r1, r2
 628              	.LVL68:
 802:./FWLIB/src/stm32f4xx_adc.c ****     
 629              		.loc 1 802 0
 630 008a 1A43     		orrs	r2, r2, r3
 631              	.LVL69:
 805:./FWLIB/src/stm32f4xx_adc.c ****   }
 632              		.loc 1 805 0
 633 008c 0263     		str	r2, [r0, #48]
 634 008e F0E7     		b	.L32
 635              		.cfi_endproc
 636              	.LFE123:
 638              		.section	.text.ADC_SoftwareStartConv,"ax",%progbits
 639              		.align	1
 640              		.global	ADC_SoftwareStartConv
 641              		.syntax unified
 642              		.thumb
 643              		.thumb_func
 644              		.fpu fpv4-sp-d16
 646              	ADC_SoftwareStartConv:
 647              	.LFB124:
 829:./FWLIB/src/stm32f4xx_adc.c **** 
 830:./FWLIB/src/stm32f4xx_adc.c **** /**
 831:./FWLIB/src/stm32f4xx_adc.c ****   * @brief  Enables the selected ADC software start conversion of the regular channels.
ARM GAS  /tmp/ccqllL8a.s 			page 27


 832:./FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 833:./FWLIB/src/stm32f4xx_adc.c ****   * @retval None
 834:./FWLIB/src/stm32f4xx_adc.c ****   */
 835:./FWLIB/src/stm32f4xx_adc.c **** void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
 836:./FWLIB/src/stm32f4xx_adc.c **** {
 648              		.loc 1 836 0
 649              		.cfi_startproc
 650              		@ args = 0, pretend = 0, frame = 0
 651              		@ frame_needed = 0, uses_anonymous_args = 0
 652              		@ link register save eliminated.
 653              	.LVL70:
 837:./FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
 838:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 839:./FWLIB/src/stm32f4xx_adc.c ****   
 840:./FWLIB/src/stm32f4xx_adc.c ****   /* Enable the selected ADC conversion for regular group */
 841:./FWLIB/src/stm32f4xx_adc.c ****   ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 654              		.loc 1 841 0
 655 0000 8368     		ldr	r3, [r0, #8]
 656 0002 43F08043 		orr	r3, r3, #1073741824
 657 0006 8360     		str	r3, [r0, #8]
 842:./FWLIB/src/stm32f4xx_adc.c **** }
 658              		.loc 1 842 0
 659 0008 7047     		bx	lr
 660              		.cfi_endproc
 661              	.LFE124:
 663              		.section	.text.ADC_GetSoftwareStartConvStatus,"ax",%progbits
 664              		.align	1
 665              		.global	ADC_GetSoftwareStartConvStatus
 666              		.syntax unified
 667              		.thumb
 668              		.thumb_func
 669              		.fpu fpv4-sp-d16
 671              	ADC_GetSoftwareStartConvStatus:
 672              	.LFB125:
 843:./FWLIB/src/stm32f4xx_adc.c **** 
 844:./FWLIB/src/stm32f4xx_adc.c **** /**
 845:./FWLIB/src/stm32f4xx_adc.c ****   * @brief  Gets the selected ADC Software start regular conversion Status.
 846:./FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 847:./FWLIB/src/stm32f4xx_adc.c ****   * @retval The new state of ADC software start conversion (SET or RESET).
 848:./FWLIB/src/stm32f4xx_adc.c ****   */
 849:./FWLIB/src/stm32f4xx_adc.c **** FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
 850:./FWLIB/src/stm32f4xx_adc.c **** {
 673              		.loc 1 850 0
 674              		.cfi_startproc
 675              		@ args = 0, pretend = 0, frame = 0
 676              		@ frame_needed = 0, uses_anonymous_args = 0
 677              		@ link register save eliminated.
 678              	.LVL71:
 851:./FWLIB/src/stm32f4xx_adc.c ****   FlagStatus bitstatus = RESET;
 852:./FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
 853:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 854:./FWLIB/src/stm32f4xx_adc.c ****   
 855:./FWLIB/src/stm32f4xx_adc.c ****   /* Check the status of SWSTART bit */
 856:./FWLIB/src/stm32f4xx_adc.c ****   if ((ADCx->CR2 & ADC_CR2_SWSTART) != (uint32_t)RESET)
 679              		.loc 1 856 0
 680 0000 8368     		ldr	r3, [r0, #8]
 681 0002 13F0804F 		tst	r3, #1073741824
ARM GAS  /tmp/ccqllL8a.s 			page 28


 682 0006 01D1     		bne	.L45
 857:./FWLIB/src/stm32f4xx_adc.c ****   {
 858:./FWLIB/src/stm32f4xx_adc.c ****     /* SWSTART bit is set */
 859:./FWLIB/src/stm32f4xx_adc.c ****     bitstatus = SET;
 860:./FWLIB/src/stm32f4xx_adc.c ****   }
 861:./FWLIB/src/stm32f4xx_adc.c ****   else
 862:./FWLIB/src/stm32f4xx_adc.c ****   {
 863:./FWLIB/src/stm32f4xx_adc.c ****     /* SWSTART bit is reset */
 864:./FWLIB/src/stm32f4xx_adc.c ****     bitstatus = RESET;
 683              		.loc 1 864 0
 684 0008 0020     		movs	r0, #0
 685              	.LVL72:
 865:./FWLIB/src/stm32f4xx_adc.c ****   }
 866:./FWLIB/src/stm32f4xx_adc.c ****   
 867:./FWLIB/src/stm32f4xx_adc.c ****   /* Return the SWSTART bit status */
 868:./FWLIB/src/stm32f4xx_adc.c ****   return  bitstatus;
 869:./FWLIB/src/stm32f4xx_adc.c **** }
 686              		.loc 1 869 0
 687 000a 7047     		bx	lr
 688              	.LVL73:
 689              	.L45:
 859:./FWLIB/src/stm32f4xx_adc.c ****   }
 690              		.loc 1 859 0
 691 000c 0120     		movs	r0, #1
 692              	.LVL74:
 693 000e 7047     		bx	lr
 694              		.cfi_endproc
 695              	.LFE125:
 697              		.section	.text.ADC_EOCOnEachRegularChannelCmd,"ax",%progbits
 698              		.align	1
 699              		.global	ADC_EOCOnEachRegularChannelCmd
 700              		.syntax unified
 701              		.thumb
 702              		.thumb_func
 703              		.fpu fpv4-sp-d16
 705              	ADC_EOCOnEachRegularChannelCmd:
 706              	.LFB126:
 870:./FWLIB/src/stm32f4xx_adc.c **** 
 871:./FWLIB/src/stm32f4xx_adc.c **** 
 872:./FWLIB/src/stm32f4xx_adc.c **** /**
 873:./FWLIB/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the EOC on each regular channel conversion
 874:./FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 875:./FWLIB/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC EOC flag rising
 876:./FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 877:./FWLIB/src/stm32f4xx_adc.c ****   * @retval None
 878:./FWLIB/src/stm32f4xx_adc.c ****   */
 879:./FWLIB/src/stm32f4xx_adc.c **** void ADC_EOCOnEachRegularChannelCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 880:./FWLIB/src/stm32f4xx_adc.c **** {
 707              		.loc 1 880 0
 708              		.cfi_startproc
 709              		@ args = 0, pretend = 0, frame = 0
 710              		@ frame_needed = 0, uses_anonymous_args = 0
 711              		@ link register save eliminated.
 712              	.LVL75:
 881:./FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
 882:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 883:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
ARM GAS  /tmp/ccqllL8a.s 			page 29


 884:./FWLIB/src/stm32f4xx_adc.c ****   
 885:./FWLIB/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 713              		.loc 1 885 0
 714 0000 21B9     		cbnz	r1, .L49
 886:./FWLIB/src/stm32f4xx_adc.c ****   {
 887:./FWLIB/src/stm32f4xx_adc.c ****     /* Enable the selected ADC EOC rising on each regular channel conversion */
 888:./FWLIB/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_EOCS;
 889:./FWLIB/src/stm32f4xx_adc.c ****   }
 890:./FWLIB/src/stm32f4xx_adc.c ****   else
 891:./FWLIB/src/stm32f4xx_adc.c ****   {
 892:./FWLIB/src/stm32f4xx_adc.c ****     /* Disable the selected ADC EOC rising on each regular channel conversion */
 893:./FWLIB/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
 715              		.loc 1 893 0
 716 0002 8368     		ldr	r3, [r0, #8]
 717 0004 23F48063 		bic	r3, r3, #1024
 718 0008 8360     		str	r3, [r0, #8]
 894:./FWLIB/src/stm32f4xx_adc.c ****   }
 895:./FWLIB/src/stm32f4xx_adc.c **** }
 719              		.loc 1 895 0
 720 000a 7047     		bx	lr
 721              	.L49:
 888:./FWLIB/src/stm32f4xx_adc.c ****   }
 722              		.loc 1 888 0
 723 000c 8368     		ldr	r3, [r0, #8]
 724 000e 43F48063 		orr	r3, r3, #1024
 725 0012 8360     		str	r3, [r0, #8]
 726 0014 7047     		bx	lr
 727              		.cfi_endproc
 728              	.LFE126:
 730              		.section	.text.ADC_ContinuousModeCmd,"ax",%progbits
 731              		.align	1
 732              		.global	ADC_ContinuousModeCmd
 733              		.syntax unified
 734              		.thumb
 735              		.thumb_func
 736              		.fpu fpv4-sp-d16
 738              	ADC_ContinuousModeCmd:
 739              	.LFB127:
 896:./FWLIB/src/stm32f4xx_adc.c **** 
 897:./FWLIB/src/stm32f4xx_adc.c **** /**
 898:./FWLIB/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the ADC continuous conversion mode 
 899:./FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 900:./FWLIB/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC continuous conversion mode
 901:./FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 902:./FWLIB/src/stm32f4xx_adc.c ****   * @retval None
 903:./FWLIB/src/stm32f4xx_adc.c ****   */
 904:./FWLIB/src/stm32f4xx_adc.c **** void ADC_ContinuousModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 905:./FWLIB/src/stm32f4xx_adc.c **** {
 740              		.loc 1 905 0
 741              		.cfi_startproc
 742              		@ args = 0, pretend = 0, frame = 0
 743              		@ frame_needed = 0, uses_anonymous_args = 0
 744              		@ link register save eliminated.
 745              	.LVL76:
 906:./FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
 907:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 908:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
ARM GAS  /tmp/ccqllL8a.s 			page 30


 909:./FWLIB/src/stm32f4xx_adc.c ****   
 910:./FWLIB/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 746              		.loc 1 910 0
 747 0000 21B9     		cbnz	r1, .L53
 911:./FWLIB/src/stm32f4xx_adc.c ****   {
 912:./FWLIB/src/stm32f4xx_adc.c ****     /* Enable the selected ADC continuous conversion mode */
 913:./FWLIB/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
 914:./FWLIB/src/stm32f4xx_adc.c ****   }
 915:./FWLIB/src/stm32f4xx_adc.c ****   else
 916:./FWLIB/src/stm32f4xx_adc.c ****   {
 917:./FWLIB/src/stm32f4xx_adc.c ****     /* Disable the selected ADC continuous conversion mode */
 918:./FWLIB/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
 748              		.loc 1 918 0
 749 0002 8368     		ldr	r3, [r0, #8]
 750 0004 23F00203 		bic	r3, r3, #2
 751 0008 8360     		str	r3, [r0, #8]
 919:./FWLIB/src/stm32f4xx_adc.c ****   }
 920:./FWLIB/src/stm32f4xx_adc.c **** }
 752              		.loc 1 920 0
 753 000a 7047     		bx	lr
 754              	.L53:
 913:./FWLIB/src/stm32f4xx_adc.c ****   }
 755              		.loc 1 913 0
 756 000c 8368     		ldr	r3, [r0, #8]
 757 000e 43F00203 		orr	r3, r3, #2
 758 0012 8360     		str	r3, [r0, #8]
 759 0014 7047     		bx	lr
 760              		.cfi_endproc
 761              	.LFE127:
 763              		.section	.text.ADC_DiscModeChannelCountConfig,"ax",%progbits
 764              		.align	1
 765              		.global	ADC_DiscModeChannelCountConfig
 766              		.syntax unified
 767              		.thumb
 768              		.thumb_func
 769              		.fpu fpv4-sp-d16
 771              	ADC_DiscModeChannelCountConfig:
 772              	.LFB128:
 921:./FWLIB/src/stm32f4xx_adc.c **** 
 922:./FWLIB/src/stm32f4xx_adc.c **** /**
 923:./FWLIB/src/stm32f4xx_adc.c ****   * @brief  Configures the discontinuous mode for the selected ADC regular group 
 924:./FWLIB/src/stm32f4xx_adc.c ****   *         channel.
 925:./FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 926:./FWLIB/src/stm32f4xx_adc.c ****   * @param  Number: specifies the discontinuous mode regular channel count value.
 927:./FWLIB/src/stm32f4xx_adc.c ****   *          This number must be between 1 and 8.
 928:./FWLIB/src/stm32f4xx_adc.c ****   * @retval None
 929:./FWLIB/src/stm32f4xx_adc.c ****   */
 930:./FWLIB/src/stm32f4xx_adc.c **** void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
 931:./FWLIB/src/stm32f4xx_adc.c **** {
 773              		.loc 1 931 0
 774              		.cfi_startproc
 775              		@ args = 0, pretend = 0, frame = 0
 776              		@ frame_needed = 0, uses_anonymous_args = 0
 777              		@ link register save eliminated.
 778              	.LVL77:
 932:./FWLIB/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
 933:./FWLIB/src/stm32f4xx_adc.c ****   uint32_t tmpreg2 = 0;
ARM GAS  /tmp/ccqllL8a.s 			page 31


 934:./FWLIB/src/stm32f4xx_adc.c ****   
 935:./FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
 936:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 937:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
 938:./FWLIB/src/stm32f4xx_adc.c ****   
 939:./FWLIB/src/stm32f4xx_adc.c ****   /* Get the old register value */
 940:./FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->CR1;
 779              		.loc 1 940 0
 780 0000 4368     		ldr	r3, [r0, #4]
 781              	.LVL78:
 941:./FWLIB/src/stm32f4xx_adc.c ****   
 942:./FWLIB/src/stm32f4xx_adc.c ****   /* Clear the old discontinuous mode channel count */
 943:./FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 &= CR1_DISCNUM_RESET;
 782              		.loc 1 943 0
 783 0002 23F46043 		bic	r3, r3, #57344
 784              	.LVL79:
 944:./FWLIB/src/stm32f4xx_adc.c ****   
 945:./FWLIB/src/stm32f4xx_adc.c ****   /* Set the discontinuous mode channel count */
 946:./FWLIB/src/stm32f4xx_adc.c ****   tmpreg2 = Number - 1;
 785              		.loc 1 946 0
 786 0006 0139     		subs	r1, r1, #1
 787              	.LVL80:
 947:./FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 |= tmpreg2 << 13;
 788              		.loc 1 947 0
 789 0008 43EA4133 		orr	r3, r3, r1, lsl #13
 790              	.LVL81:
 948:./FWLIB/src/stm32f4xx_adc.c ****   
 949:./FWLIB/src/stm32f4xx_adc.c ****   /* Store the new register value */
 950:./FWLIB/src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg1;
 791              		.loc 1 950 0
 792 000c 4360     		str	r3, [r0, #4]
 951:./FWLIB/src/stm32f4xx_adc.c **** }
 793              		.loc 1 951 0
 794 000e 7047     		bx	lr
 795              		.cfi_endproc
 796              	.LFE128:
 798              		.section	.text.ADC_DiscModeCmd,"ax",%progbits
 799              		.align	1
 800              		.global	ADC_DiscModeCmd
 801              		.syntax unified
 802              		.thumb
 803              		.thumb_func
 804              		.fpu fpv4-sp-d16
 806              	ADC_DiscModeCmd:
 807              	.LFB129:
 952:./FWLIB/src/stm32f4xx_adc.c **** 
 953:./FWLIB/src/stm32f4xx_adc.c **** /**
 954:./FWLIB/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the discontinuous mode on regular group channel 
 955:./FWLIB/src/stm32f4xx_adc.c ****   *         for the specified ADC
 956:./FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 957:./FWLIB/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC discontinuous mode on 
 958:./FWLIB/src/stm32f4xx_adc.c ****   *         regular group channel.
 959:./FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 960:./FWLIB/src/stm32f4xx_adc.c ****   * @retval None
 961:./FWLIB/src/stm32f4xx_adc.c ****   */
 962:./FWLIB/src/stm32f4xx_adc.c **** void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 963:./FWLIB/src/stm32f4xx_adc.c **** {
ARM GAS  /tmp/ccqllL8a.s 			page 32


 808              		.loc 1 963 0
 809              		.cfi_startproc
 810              		@ args = 0, pretend = 0, frame = 0
 811              		@ frame_needed = 0, uses_anonymous_args = 0
 812              		@ link register save eliminated.
 813              	.LVL82:
 964:./FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
 965:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 966:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 967:./FWLIB/src/stm32f4xx_adc.c ****   
 968:./FWLIB/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 814              		.loc 1 968 0
 815 0000 21B9     		cbnz	r1, .L58
 969:./FWLIB/src/stm32f4xx_adc.c ****   {
 970:./FWLIB/src/stm32f4xx_adc.c ****     /* Enable the selected ADC regular discontinuous mode */
 971:./FWLIB/src/stm32f4xx_adc.c ****     ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 972:./FWLIB/src/stm32f4xx_adc.c ****   }
 973:./FWLIB/src/stm32f4xx_adc.c ****   else
 974:./FWLIB/src/stm32f4xx_adc.c ****   {
 975:./FWLIB/src/stm32f4xx_adc.c ****     /* Disable the selected ADC regular discontinuous mode */
 976:./FWLIB/src/stm32f4xx_adc.c ****     ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
 816              		.loc 1 976 0
 817 0002 4368     		ldr	r3, [r0, #4]
 818 0004 23F40063 		bic	r3, r3, #2048
 819 0008 4360     		str	r3, [r0, #4]
 977:./FWLIB/src/stm32f4xx_adc.c ****   }
 978:./FWLIB/src/stm32f4xx_adc.c **** }
 820              		.loc 1 978 0
 821 000a 7047     		bx	lr
 822              	.L58:
 971:./FWLIB/src/stm32f4xx_adc.c ****   }
 823              		.loc 1 971 0
 824 000c 4368     		ldr	r3, [r0, #4]
 825 000e 43F40063 		orr	r3, r3, #2048
 826 0012 4360     		str	r3, [r0, #4]
 827 0014 7047     		bx	lr
 828              		.cfi_endproc
 829              	.LFE129:
 831              		.section	.text.ADC_GetConversionValue,"ax",%progbits
 832              		.align	1
 833              		.global	ADC_GetConversionValue
 834              		.syntax unified
 835              		.thumb
 836              		.thumb_func
 837              		.fpu fpv4-sp-d16
 839              	ADC_GetConversionValue:
 840              	.LFB130:
 979:./FWLIB/src/stm32f4xx_adc.c **** 
 980:./FWLIB/src/stm32f4xx_adc.c **** /**
 981:./FWLIB/src/stm32f4xx_adc.c ****   * @brief  Returns the last ADCx conversion result data for regular channel.
 982:./FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 983:./FWLIB/src/stm32f4xx_adc.c ****   * @retval The Data conversion value.
 984:./FWLIB/src/stm32f4xx_adc.c ****   */
 985:./FWLIB/src/stm32f4xx_adc.c **** uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
 986:./FWLIB/src/stm32f4xx_adc.c **** {
 841              		.loc 1 986 0
 842              		.cfi_startproc
ARM GAS  /tmp/ccqllL8a.s 			page 33


 843              		@ args = 0, pretend = 0, frame = 0
 844              		@ frame_needed = 0, uses_anonymous_args = 0
 845              		@ link register save eliminated.
 846              	.LVL83:
 987:./FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
 988:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 989:./FWLIB/src/stm32f4xx_adc.c ****   
 990:./FWLIB/src/stm32f4xx_adc.c ****   /* Return the selected ADC conversion value */
 991:./FWLIB/src/stm32f4xx_adc.c ****   return (uint16_t) ADCx->DR;
 847              		.loc 1 991 0
 848 0000 C06C     		ldr	r0, [r0, #76]
 849              	.LVL84:
 992:./FWLIB/src/stm32f4xx_adc.c **** }
 850              		.loc 1 992 0
 851 0002 80B2     		uxth	r0, r0
 852 0004 7047     		bx	lr
 853              		.cfi_endproc
 854              	.LFE130:
 856              		.section	.text.ADC_GetMultiModeConversionValue,"ax",%progbits
 857              		.align	1
 858              		.global	ADC_GetMultiModeConversionValue
 859              		.syntax unified
 860              		.thumb
 861              		.thumb_func
 862              		.fpu fpv4-sp-d16
 864              	ADC_GetMultiModeConversionValue:
 865              	.LFB131:
 993:./FWLIB/src/stm32f4xx_adc.c **** 
 994:./FWLIB/src/stm32f4xx_adc.c **** /**
 995:./FWLIB/src/stm32f4xx_adc.c ****   * @brief  Returns the last ADC1, ADC2 and ADC3 regular conversions results 
 996:./FWLIB/src/stm32f4xx_adc.c ****   *         data in the selected multi mode.
 997:./FWLIB/src/stm32f4xx_adc.c ****   * @param  None  
 998:./FWLIB/src/stm32f4xx_adc.c ****   * @retval The Data conversion value.
 999:./FWLIB/src/stm32f4xx_adc.c ****   * @note   In dual mode, the value returned by this function is as following
1000:./FWLIB/src/stm32f4xx_adc.c ****   *           Data[15:0] : these bits contain the regular data of ADC1.
1001:./FWLIB/src/stm32f4xx_adc.c ****   *           Data[31:16]: these bits contain the regular data of ADC2.
1002:./FWLIB/src/stm32f4xx_adc.c ****   * @note   In triple mode, the value returned by this function is as following
1003:./FWLIB/src/stm32f4xx_adc.c ****   *           Data[15:0] : these bits contain alternatively the regular data of ADC1, ADC3 and ADC2
1004:./FWLIB/src/stm32f4xx_adc.c ****   *           Data[31:16]: these bits contain alternatively the regular data of ADC2, ADC1 and ADC3
1005:./FWLIB/src/stm32f4xx_adc.c ****   */
1006:./FWLIB/src/stm32f4xx_adc.c **** uint32_t ADC_GetMultiModeConversionValue(void)
1007:./FWLIB/src/stm32f4xx_adc.c **** {
 866              		.loc 1 1007 0
 867              		.cfi_startproc
 868              		@ args = 0, pretend = 0, frame = 0
 869              		@ frame_needed = 0, uses_anonymous_args = 0
 870              		@ link register save eliminated.
1008:./FWLIB/src/stm32f4xx_adc.c ****   /* Return the multi mode conversion value */
1009:./FWLIB/src/stm32f4xx_adc.c ****   return (*(__IO uint32_t *) CDR_ADDRESS);
 871              		.loc 1 1009 0
 872 0000 014B     		ldr	r3, .L61
 873 0002 1868     		ldr	r0, [r3]
1010:./FWLIB/src/stm32f4xx_adc.c **** }
 874              		.loc 1 1010 0
 875 0004 7047     		bx	lr
 876              	.L62:
 877 0006 00BF     		.align	2
ARM GAS  /tmp/ccqllL8a.s 			page 34


 878              	.L61:
 879 0008 08230140 		.word	1073816328
 880              		.cfi_endproc
 881              	.LFE131:
 883              		.section	.text.ADC_DMACmd,"ax",%progbits
 884              		.align	1
 885              		.global	ADC_DMACmd
 886              		.syntax unified
 887              		.thumb
 888              		.thumb_func
 889              		.fpu fpv4-sp-d16
 891              	ADC_DMACmd:
 892              	.LFB132:
1011:./FWLIB/src/stm32f4xx_adc.c **** /**
1012:./FWLIB/src/stm32f4xx_adc.c ****   * @}
1013:./FWLIB/src/stm32f4xx_adc.c ****   */
1014:./FWLIB/src/stm32f4xx_adc.c **** 
1015:./FWLIB/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group5 Regular Channels DMA Configuration functions
1016:./FWLIB/src/stm32f4xx_adc.c ****  *  @brief   Regular Channels DMA Configuration functions 
1017:./FWLIB/src/stm32f4xx_adc.c ****  *
1018:./FWLIB/src/stm32f4xx_adc.c **** @verbatim   
1019:./FWLIB/src/stm32f4xx_adc.c ****  ===============================================================================
1020:./FWLIB/src/stm32f4xx_adc.c ****             ##### Regular Channels DMA Configuration functions #####
1021:./FWLIB/src/stm32f4xx_adc.c ****  ===============================================================================  
1022:./FWLIB/src/stm32f4xx_adc.c ****     [..] This section provides functions allowing to configure the DMA for ADC 
1023:./FWLIB/src/stm32f4xx_adc.c ****          regular channels.
1024:./FWLIB/src/stm32f4xx_adc.c ****          Since converted regular channel values are stored into a unique data 
1025:./FWLIB/src/stm32f4xx_adc.c ****          register, it is useful to use DMA for conversion of more than one regular 
1026:./FWLIB/src/stm32f4xx_adc.c ****          channel. This avoids the loss of the data already stored in the ADC 
1027:./FWLIB/src/stm32f4xx_adc.c ****          Data register.   
1028:./FWLIB/src/stm32f4xx_adc.c ****          When the DMA mode is enabled (using the ADC_DMACmd() function), after each
1029:./FWLIB/src/stm32f4xx_adc.c ****          conversion of a regular channel, a DMA request is generated.
1030:./FWLIB/src/stm32f4xx_adc.c ****     [..] Depending on the "DMA disable selection for Independent ADC mode" 
1031:./FWLIB/src/stm32f4xx_adc.c ****          configuration (using the ADC_DMARequestAfterLastTransferCmd() function), 
1032:./FWLIB/src/stm32f4xx_adc.c ****          at the end of the last DMA transfer, two possibilities are allowed:
1033:./FWLIB/src/stm32f4xx_adc.c ****       (+) No new DMA request is issued to the DMA controller (feature DISABLED) 
1034:./FWLIB/src/stm32f4xx_adc.c ****       (+) Requests can continue to be generated (feature ENABLED).  
1035:./FWLIB/src/stm32f4xx_adc.c ****     [..] Depending on the "DMA disable selection for multi ADC mode" configuration 
1036:./FWLIB/src/stm32f4xx_adc.c ****          (using the void ADC_MultiModeDMARequestAfterLastTransferCmd() function), 
1037:./FWLIB/src/stm32f4xx_adc.c ****          at the end of the last DMA transfer, two possibilities are allowed:
1038:./FWLIB/src/stm32f4xx_adc.c ****         (+) No new DMA request is issued to the DMA controller (feature DISABLED) 
1039:./FWLIB/src/stm32f4xx_adc.c ****         (+) Requests can continue to be generated (feature ENABLED).
1040:./FWLIB/src/stm32f4xx_adc.c **** 
1041:./FWLIB/src/stm32f4xx_adc.c **** @endverbatim
1042:./FWLIB/src/stm32f4xx_adc.c ****   * @{
1043:./FWLIB/src/stm32f4xx_adc.c ****   */
1044:./FWLIB/src/stm32f4xx_adc.c ****   
1045:./FWLIB/src/stm32f4xx_adc.c ****  /**
1046:./FWLIB/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the specified ADC DMA request.
1047:./FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1048:./FWLIB/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC DMA transfer.
1049:./FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1050:./FWLIB/src/stm32f4xx_adc.c ****   * @retval None
1051:./FWLIB/src/stm32f4xx_adc.c ****   */
1052:./FWLIB/src/stm32f4xx_adc.c **** void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1053:./FWLIB/src/stm32f4xx_adc.c **** {
 893              		.loc 1 1053 0
ARM GAS  /tmp/ccqllL8a.s 			page 35


 894              		.cfi_startproc
 895              		@ args = 0, pretend = 0, frame = 0
 896              		@ frame_needed = 0, uses_anonymous_args = 0
 897              		@ link register save eliminated.
 898              	.LVL85:
1054:./FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
1055:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1056:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1057:./FWLIB/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 899              		.loc 1 1057 0
 900 0000 21B9     		cbnz	r1, .L66
1058:./FWLIB/src/stm32f4xx_adc.c ****   {
1059:./FWLIB/src/stm32f4xx_adc.c ****     /* Enable the selected ADC DMA request */
1060:./FWLIB/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
1061:./FWLIB/src/stm32f4xx_adc.c ****   }
1062:./FWLIB/src/stm32f4xx_adc.c ****   else
1063:./FWLIB/src/stm32f4xx_adc.c ****   {
1064:./FWLIB/src/stm32f4xx_adc.c ****     /* Disable the selected ADC DMA request */
1065:./FWLIB/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 901              		.loc 1 1065 0
 902 0002 8368     		ldr	r3, [r0, #8]
 903 0004 23F48073 		bic	r3, r3, #256
 904 0008 8360     		str	r3, [r0, #8]
1066:./FWLIB/src/stm32f4xx_adc.c ****   }
1067:./FWLIB/src/stm32f4xx_adc.c **** }
 905              		.loc 1 1067 0
 906 000a 7047     		bx	lr
 907              	.L66:
1060:./FWLIB/src/stm32f4xx_adc.c ****   }
 908              		.loc 1 1060 0
 909 000c 8368     		ldr	r3, [r0, #8]
 910 000e 43F48073 		orr	r3, r3, #256
 911 0012 8360     		str	r3, [r0, #8]
 912 0014 7047     		bx	lr
 913              		.cfi_endproc
 914              	.LFE132:
 916              		.section	.text.ADC_DMARequestAfterLastTransferCmd,"ax",%progbits
 917              		.align	1
 918              		.global	ADC_DMARequestAfterLastTransferCmd
 919              		.syntax unified
 920              		.thumb
 921              		.thumb_func
 922              		.fpu fpv4-sp-d16
 924              	ADC_DMARequestAfterLastTransferCmd:
 925              	.LFB133:
1068:./FWLIB/src/stm32f4xx_adc.c **** 
1069:./FWLIB/src/stm32f4xx_adc.c **** /**
1070:./FWLIB/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the ADC DMA request after last transfer (Single-ADC mode)  
1071:./FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1072:./FWLIB/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC DMA request after last transfer.
1073:./FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1074:./FWLIB/src/stm32f4xx_adc.c ****   * @retval None
1075:./FWLIB/src/stm32f4xx_adc.c ****   */
1076:./FWLIB/src/stm32f4xx_adc.c **** void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1077:./FWLIB/src/stm32f4xx_adc.c **** {
 926              		.loc 1 1077 0
 927              		.cfi_startproc
ARM GAS  /tmp/ccqllL8a.s 			page 36


 928              		@ args = 0, pretend = 0, frame = 0
 929              		@ frame_needed = 0, uses_anonymous_args = 0
 930              		@ link register save eliminated.
 931              	.LVL86:
1078:./FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
1079:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1080:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1081:./FWLIB/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 932              		.loc 1 1081 0
 933 0000 21B9     		cbnz	r1, .L70
1082:./FWLIB/src/stm32f4xx_adc.c ****   {
1083:./FWLIB/src/stm32f4xx_adc.c ****     /* Enable the selected ADC DMA request after last transfer */
1084:./FWLIB/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
1085:./FWLIB/src/stm32f4xx_adc.c ****   }
1086:./FWLIB/src/stm32f4xx_adc.c ****   else
1087:./FWLIB/src/stm32f4xx_adc.c ****   {
1088:./FWLIB/src/stm32f4xx_adc.c ****     /* Disable the selected ADC DMA request after last transfer */
1089:./FWLIB/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 934              		.loc 1 1089 0
 935 0002 8368     		ldr	r3, [r0, #8]
 936 0004 23F40073 		bic	r3, r3, #512
 937 0008 8360     		str	r3, [r0, #8]
1090:./FWLIB/src/stm32f4xx_adc.c ****   }
1091:./FWLIB/src/stm32f4xx_adc.c **** }
 938              		.loc 1 1091 0
 939 000a 7047     		bx	lr
 940              	.L70:
1084:./FWLIB/src/stm32f4xx_adc.c ****   }
 941              		.loc 1 1084 0
 942 000c 8368     		ldr	r3, [r0, #8]
 943 000e 43F40073 		orr	r3, r3, #512
 944 0012 8360     		str	r3, [r0, #8]
 945 0014 7047     		bx	lr
 946              		.cfi_endproc
 947              	.LFE133:
 949              		.section	.text.ADC_MultiModeDMARequestAfterLastTransferCmd,"ax",%progbits
 950              		.align	1
 951              		.global	ADC_MultiModeDMARequestAfterLastTransferCmd
 952              		.syntax unified
 953              		.thumb
 954              		.thumb_func
 955              		.fpu fpv4-sp-d16
 957              	ADC_MultiModeDMARequestAfterLastTransferCmd:
 958              	.LFB134:
1092:./FWLIB/src/stm32f4xx_adc.c **** 
1093:./FWLIB/src/stm32f4xx_adc.c **** /**
1094:./FWLIB/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the ADC DMA request after last transfer in multi ADC mode       
1095:./FWLIB/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC DMA request after last transfer.
1096:./FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1097:./FWLIB/src/stm32f4xx_adc.c ****   * @note   if Enabled, DMA requests are issued as long as data are converted and 
1098:./FWLIB/src/stm32f4xx_adc.c ****   *         DMA mode for multi ADC mode (selected using ADC_CommonInit() function 
1099:./FWLIB/src/stm32f4xx_adc.c ****   *         by ADC_CommonInitStruct.ADC_DMAAccessMode structure member) is 
1100:./FWLIB/src/stm32f4xx_adc.c ****   *          ADC_DMAAccessMode_1, ADC_DMAAccessMode_2 or ADC_DMAAccessMode_3.     
1101:./FWLIB/src/stm32f4xx_adc.c ****   * @retval None
1102:./FWLIB/src/stm32f4xx_adc.c ****   */
1103:./FWLIB/src/stm32f4xx_adc.c **** void ADC_MultiModeDMARequestAfterLastTransferCmd(FunctionalState NewState)
1104:./FWLIB/src/stm32f4xx_adc.c **** {
ARM GAS  /tmp/ccqllL8a.s 			page 37


 959              		.loc 1 1104 0
 960              		.cfi_startproc
 961              		@ args = 0, pretend = 0, frame = 0
 962              		@ frame_needed = 0, uses_anonymous_args = 0
 963              		@ link register save eliminated.
 964              	.LVL87:
1105:./FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
1106:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1107:./FWLIB/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 965              		.loc 1 1107 0
 966 0000 28B9     		cbnz	r0, .L74
1108:./FWLIB/src/stm32f4xx_adc.c ****   {
1109:./FWLIB/src/stm32f4xx_adc.c ****     /* Enable the selected ADC DMA request after last transfer */
1110:./FWLIB/src/stm32f4xx_adc.c ****     ADC->CCR |= (uint32_t)ADC_CCR_DDS;
1111:./FWLIB/src/stm32f4xx_adc.c ****   }
1112:./FWLIB/src/stm32f4xx_adc.c ****   else
1113:./FWLIB/src/stm32f4xx_adc.c ****   {
1114:./FWLIB/src/stm32f4xx_adc.c ****     /* Disable the selected ADC DMA request after last transfer */
1115:./FWLIB/src/stm32f4xx_adc.c ****     ADC->CCR &= (uint32_t)(~ADC_CCR_DDS);
 967              		.loc 1 1115 0
 968 0002 064A     		ldr	r2, .L75
 969 0004 5368     		ldr	r3, [r2, #4]
 970 0006 23F40053 		bic	r3, r3, #8192
 971 000a 5360     		str	r3, [r2, #4]
1116:./FWLIB/src/stm32f4xx_adc.c ****   }
1117:./FWLIB/src/stm32f4xx_adc.c **** }
 972              		.loc 1 1117 0
 973 000c 7047     		bx	lr
 974              	.L74:
1110:./FWLIB/src/stm32f4xx_adc.c ****   }
 975              		.loc 1 1110 0
 976 000e 034A     		ldr	r2, .L75
 977 0010 5368     		ldr	r3, [r2, #4]
 978 0012 43F40053 		orr	r3, r3, #8192
 979 0016 5360     		str	r3, [r2, #4]
 980 0018 7047     		bx	lr
 981              	.L76:
 982 001a 00BF     		.align	2
 983              	.L75:
 984 001c 00230140 		.word	1073816320
 985              		.cfi_endproc
 986              	.LFE134:
 988              		.section	.text.ADC_InjectedChannelConfig,"ax",%progbits
 989              		.align	1
 990              		.global	ADC_InjectedChannelConfig
 991              		.syntax unified
 992              		.thumb
 993              		.thumb_func
 994              		.fpu fpv4-sp-d16
 996              	ADC_InjectedChannelConfig:
 997              	.LFB135:
1118:./FWLIB/src/stm32f4xx_adc.c **** /**
1119:./FWLIB/src/stm32f4xx_adc.c ****   * @}
1120:./FWLIB/src/stm32f4xx_adc.c ****   */
1121:./FWLIB/src/stm32f4xx_adc.c **** 
1122:./FWLIB/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group6 Injected channels Configuration functions
1123:./FWLIB/src/stm32f4xx_adc.c ****  *  @brief   Injected channels Configuration functions 
ARM GAS  /tmp/ccqllL8a.s 			page 38


1124:./FWLIB/src/stm32f4xx_adc.c ****  *
1125:./FWLIB/src/stm32f4xx_adc.c **** @verbatim   
1126:./FWLIB/src/stm32f4xx_adc.c ****  ===============================================================================
1127:./FWLIB/src/stm32f4xx_adc.c ****               ##### Injected channels Configuration functions #####
1128:./FWLIB/src/stm32f4xx_adc.c ****  ===============================================================================  
1129:./FWLIB/src/stm32f4xx_adc.c **** 
1130:./FWLIB/src/stm32f4xx_adc.c ****     [..] This section provide functions allowing to configure the ADC Injected channels,
1131:./FWLIB/src/stm32f4xx_adc.c ****          it is composed of 2 sub sections : 
1132:./FWLIB/src/stm32f4xx_adc.c ****     
1133:./FWLIB/src/stm32f4xx_adc.c ****       (#) Configuration functions for Injected channels: This subsection provides 
1134:./FWLIB/src/stm32f4xx_adc.c ****           functions allowing to configure the ADC injected channels :    
1135:./FWLIB/src/stm32f4xx_adc.c ****         (++) Configure the rank in the injected group sequencer for each channel
1136:./FWLIB/src/stm32f4xx_adc.c ****         (++) Configure the sampling time for each channel    
1137:./FWLIB/src/stm32f4xx_adc.c ****         (++) Activate the Auto injected Mode  
1138:./FWLIB/src/stm32f4xx_adc.c ****         (++) Activate the Discontinuous Mode 
1139:./FWLIB/src/stm32f4xx_adc.c ****         (++) scan mode activation  
1140:./FWLIB/src/stm32f4xx_adc.c ****         (++) External/software trigger source   
1141:./FWLIB/src/stm32f4xx_adc.c ****         (++) External trigger edge 
1142:./FWLIB/src/stm32f4xx_adc.c ****         (++) injected channels sequencer.
1143:./FWLIB/src/stm32f4xx_adc.c ****     
1144:./FWLIB/src/stm32f4xx_adc.c ****       (#) Get the Specified Injected channel conversion data: This subsection 
1145:./FWLIB/src/stm32f4xx_adc.c ****           provides an important function in the ADC peripheral since it returns the 
1146:./FWLIB/src/stm32f4xx_adc.c ****           converted data of the specific injected channel.
1147:./FWLIB/src/stm32f4xx_adc.c **** 
1148:./FWLIB/src/stm32f4xx_adc.c **** @endverbatim
1149:./FWLIB/src/stm32f4xx_adc.c ****   * @{
1150:./FWLIB/src/stm32f4xx_adc.c ****   */ 
1151:./FWLIB/src/stm32f4xx_adc.c **** /**
1152:./FWLIB/src/stm32f4xx_adc.c ****   * @brief  Configures for the selected ADC injected channel its corresponding
1153:./FWLIB/src/stm32f4xx_adc.c ****   *         rank in the sequencer and its sample time.
1154:./FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1155:./FWLIB/src/stm32f4xx_adc.c ****   * @param  ADC_Channel: the ADC channel to configure. 
1156:./FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1157:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_0: ADC Channel0 selected
1158:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_1: ADC Channel1 selected
1159:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_2: ADC Channel2 selected
1160:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_3: ADC Channel3 selected
1161:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_4: ADC Channel4 selected
1162:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_5: ADC Channel5 selected
1163:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_6: ADC Channel6 selected
1164:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_7: ADC Channel7 selected
1165:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_8: ADC Channel8 selected
1166:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_9: ADC Channel9 selected
1167:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_10: ADC Channel10 selected
1168:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_11: ADC Channel11 selected
1169:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_12: ADC Channel12 selected
1170:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_13: ADC Channel13 selected
1171:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_14: ADC Channel14 selected
1172:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_15: ADC Channel15 selected
1173:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_16: ADC Channel16 selected
1174:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_17: ADC Channel17 selected
1175:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_18: ADC Channel18 selected                       
1176:./FWLIB/src/stm32f4xx_adc.c ****   * @param  Rank: The rank in the injected group sequencer. 
1177:./FWLIB/src/stm32f4xx_adc.c ****   *          This parameter must be between 1 to 4.
1178:./FWLIB/src/stm32f4xx_adc.c ****   * @param  ADC_SampleTime: The sample time value to be set for the selected channel. 
1179:./FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1180:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_3Cycles: Sample time equal to 3 cycles
ARM GAS  /tmp/ccqllL8a.s 			page 39


1181:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_15Cycles: Sample time equal to 15 cycles
1182:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_28Cycles: Sample time equal to 28 cycles
1183:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_56Cycles: Sample time equal to 56 cycles	
1184:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_84Cycles: Sample time equal to 84 cycles	
1185:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_112Cycles: Sample time equal to 112 cycles	
1186:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
1187:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
1188:./FWLIB/src/stm32f4xx_adc.c ****   * @retval None
1189:./FWLIB/src/stm32f4xx_adc.c ****   */
1190:./FWLIB/src/stm32f4xx_adc.c **** void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_Sa
1191:./FWLIB/src/stm32f4xx_adc.c **** {
 998              		.loc 1 1191 0
 999              		.cfi_startproc
 1000              		@ args = 0, pretend = 0, frame = 0
 1001              		@ frame_needed = 0, uses_anonymous_args = 0
 1002              		@ link register save eliminated.
 1003              	.LVL88:
 1004 0000 70B4     		push	{r4, r5, r6}
 1005              	.LCFI8:
 1006              		.cfi_def_cfa_offset 12
 1007              		.cfi_offset 4, -12
 1008              		.cfi_offset 5, -8
 1009              		.cfi_offset 6, -4
 1010              	.LVL89:
1192:./FWLIB/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
1193:./FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
1194:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1195:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
1196:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_RANK(Rank));
1197:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
1198:./FWLIB/src/stm32f4xx_adc.c ****   /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
1199:./FWLIB/src/stm32f4xx_adc.c ****   if (ADC_Channel > ADC_Channel_9)
 1011              		.loc 1 1199 0
 1012 0002 0929     		cmp	r1, #9
 1013 0004 1DD8     		bhi	.L81
1200:./FWLIB/src/stm32f4xx_adc.c ****   {
1201:./FWLIB/src/stm32f4xx_adc.c ****     /* Get the old register value */
1202:./FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR1;
1203:./FWLIB/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
1204:./FWLIB/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
1205:./FWLIB/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
1206:./FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
1207:./FWLIB/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
1208:./FWLIB/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
1209:./FWLIB/src/stm32f4xx_adc.c ****     /* Set the new sample time */
1210:./FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
1211:./FWLIB/src/stm32f4xx_adc.c ****     /* Store the new register value */
1212:./FWLIB/src/stm32f4xx_adc.c ****     ADCx->SMPR1 = tmpreg1;
1213:./FWLIB/src/stm32f4xx_adc.c ****   }
1214:./FWLIB/src/stm32f4xx_adc.c ****   else /* ADC_Channel include in ADC_Channel_[0..9] */
1215:./FWLIB/src/stm32f4xx_adc.c ****   {
1216:./FWLIB/src/stm32f4xx_adc.c ****     /* Get the old register value */
1217:./FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR2;
 1014              		.loc 1 1217 0
 1015 0006 0569     		ldr	r5, [r0, #16]
 1016              	.LVL90:
1218:./FWLIB/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
ARM GAS  /tmp/ccqllL8a.s 			page 40


1219:./FWLIB/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 1017              		.loc 1 1219 0
 1018 0008 01EB4106 		add	r6, r1, r1, lsl #1
 1019 000c 0724     		movs	r4, #7
 1020 000e B440     		lsls	r4, r4, r6
 1021              	.LVL91:
1220:./FWLIB/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
1221:./FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 1022              		.loc 1 1221 0
 1023 0010 25EA0405 		bic	r5, r5, r4
 1024              	.LVL92:
1222:./FWLIB/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
1223:./FWLIB/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 1025              		.loc 1 1223 0
 1026 0014 03FA06F4 		lsl	r4, r3, r6
 1027              	.LVL93:
1224:./FWLIB/src/stm32f4xx_adc.c ****     /* Set the new sample time */
1225:./FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 1028              		.loc 1 1225 0
 1029 0018 2C43     		orrs	r4, r4, r5
 1030              	.LVL94:
1226:./FWLIB/src/stm32f4xx_adc.c ****     /* Store the new register value */
1227:./FWLIB/src/stm32f4xx_adc.c ****     ADCx->SMPR2 = tmpreg1;
 1031              		.loc 1 1227 0
 1032 001a 0461     		str	r4, [r0, #16]
 1033              	.LVL95:
 1034              	.L79:
1228:./FWLIB/src/stm32f4xx_adc.c ****   }
1229:./FWLIB/src/stm32f4xx_adc.c ****   /* Rank configuration */
1230:./FWLIB/src/stm32f4xx_adc.c ****   /* Get the old register value */
1231:./FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->JSQR;
 1035              		.loc 1 1231 0
 1036 001c 846B     		ldr	r4, [r0, #56]
 1037              	.LVL96:
1232:./FWLIB/src/stm32f4xx_adc.c ****   /* Get JL value: Number = JL+1 */
1233:./FWLIB/src/stm32f4xx_adc.c ****   tmpreg3 =  (tmpreg1 & JSQR_JL_SET)>> 20;
 1038              		.loc 1 1233 0
 1039 001e C4F30153 		ubfx	r3, r4, #20, #2
 1040              	.LVL97:
1234:./FWLIB/src/stm32f4xx_adc.c ****   /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
1235:./FWLIB/src/stm32f4xx_adc.c ****   tmpreg2 = JSQR_JSQ_SET << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 1041              		.loc 1 1235 0
 1042 0022 D31A     		subs	r3, r2, r3
 1043              	.LVL98:
 1044 0024 DBB2     		uxtb	r3, r3
 1045 0026 0233     		adds	r3, r3, #2
 1046 0028 DBB2     		uxtb	r3, r3
 1047 002a 03EB8303 		add	r3, r3, r3, lsl #2
 1048 002e 1F22     		movs	r2, #31
 1049              	.LVL99:
 1050 0030 9A40     		lsls	r2, r2, r3
 1051              	.LVL100:
1236:./FWLIB/src/stm32f4xx_adc.c ****   /* Clear the old JSQx bits for the selected rank */
1237:./FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 &= ~tmpreg2;
 1052              		.loc 1 1237 0
 1053 0032 24EA0204 		bic	r4, r4, r2
 1054              	.LVL101:
ARM GAS  /tmp/ccqllL8a.s 			page 41


1238:./FWLIB/src/stm32f4xx_adc.c ****   /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
1239:./FWLIB/src/stm32f4xx_adc.c ****   tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 1055              		.loc 1 1239 0
 1056 0036 01FA03F3 		lsl	r3, r1, r3
 1057              	.LVL102:
1240:./FWLIB/src/stm32f4xx_adc.c ****   /* Set the JSQx bits for the selected rank */
1241:./FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 |= tmpreg2;
 1058              		.loc 1 1241 0
 1059 003a 1C43     		orrs	r4, r4, r3
 1060              	.LVL103:
1242:./FWLIB/src/stm32f4xx_adc.c ****   /* Store the new register value */
1243:./FWLIB/src/stm32f4xx_adc.c ****   ADCx->JSQR = tmpreg1;
 1061              		.loc 1 1243 0
 1062 003c 8463     		str	r4, [r0, #56]
1244:./FWLIB/src/stm32f4xx_adc.c **** }
 1063              		.loc 1 1244 0
 1064 003e 70BC     		pop	{r4, r5, r6}
 1065              	.LCFI9:
 1066              		.cfi_remember_state
 1067              		.cfi_restore 6
 1068              		.cfi_restore 5
 1069              		.cfi_restore 4
 1070              		.cfi_def_cfa_offset 0
 1071              	.LVL104:
 1072 0040 7047     		bx	lr
 1073              	.LVL105:
 1074              	.L81:
 1075              	.LCFI10:
 1076              		.cfi_restore_state
1202:./FWLIB/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 1077              		.loc 1 1202 0
 1078 0042 C568     		ldr	r5, [r0, #12]
 1079              	.LVL106:
1204:./FWLIB/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
 1080              		.loc 1 1204 0
 1081 0044 A1F10A04 		sub	r4, r1, #10
 1082 0048 04EB4404 		add	r4, r4, r4, lsl #1
 1083 004c 0726     		movs	r6, #7
 1084 004e A640     		lsls	r6, r6, r4
 1085              	.LVL107:
1206:./FWLIB/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 1086              		.loc 1 1206 0
 1087 0050 25EA0605 		bic	r5, r5, r6
 1088              	.LVL108:
1208:./FWLIB/src/stm32f4xx_adc.c ****     /* Set the new sample time */
 1089              		.loc 1 1208 0
 1090 0054 03FA04F4 		lsl	r4, r3, r4
 1091              	.LVL109:
1210:./FWLIB/src/stm32f4xx_adc.c ****     /* Store the new register value */
 1092              		.loc 1 1210 0
 1093 0058 2C43     		orrs	r4, r4, r5
 1094              	.LVL110:
1212:./FWLIB/src/stm32f4xx_adc.c ****   }
 1095              		.loc 1 1212 0
 1096 005a C460     		str	r4, [r0, #12]
 1097 005c DEE7     		b	.L79
 1098              		.cfi_endproc
ARM GAS  /tmp/ccqllL8a.s 			page 42


 1099              	.LFE135:
 1101              		.section	.text.ADC_InjectedSequencerLengthConfig,"ax",%progbits
 1102              		.align	1
 1103              		.global	ADC_InjectedSequencerLengthConfig
 1104              		.syntax unified
 1105              		.thumb
 1106              		.thumb_func
 1107              		.fpu fpv4-sp-d16
 1109              	ADC_InjectedSequencerLengthConfig:
 1110              	.LFB136:
1245:./FWLIB/src/stm32f4xx_adc.c **** 
1246:./FWLIB/src/stm32f4xx_adc.c **** /**
1247:./FWLIB/src/stm32f4xx_adc.c ****   * @brief  Configures the sequencer length for injected channels
1248:./FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1249:./FWLIB/src/stm32f4xx_adc.c ****   * @param  Length: The sequencer length. 
1250:./FWLIB/src/stm32f4xx_adc.c ****   *          This parameter must be a number between 1 to 4.
1251:./FWLIB/src/stm32f4xx_adc.c ****   * @retval None
1252:./FWLIB/src/stm32f4xx_adc.c ****   */
1253:./FWLIB/src/stm32f4xx_adc.c **** void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
1254:./FWLIB/src/stm32f4xx_adc.c **** {
 1111              		.loc 1 1254 0
 1112              		.cfi_startproc
 1113              		@ args = 0, pretend = 0, frame = 0
 1114              		@ frame_needed = 0, uses_anonymous_args = 0
 1115              		@ link register save eliminated.
 1116              	.LVL111:
1255:./FWLIB/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
1256:./FWLIB/src/stm32f4xx_adc.c ****   uint32_t tmpreg2 = 0;
1257:./FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
1258:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1259:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_LENGTH(Length));
1260:./FWLIB/src/stm32f4xx_adc.c ****   
1261:./FWLIB/src/stm32f4xx_adc.c ****   /* Get the old register value */
1262:./FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->JSQR;
 1117              		.loc 1 1262 0
 1118 0000 836B     		ldr	r3, [r0, #56]
 1119              	.LVL112:
1263:./FWLIB/src/stm32f4xx_adc.c ****   
1264:./FWLIB/src/stm32f4xx_adc.c ****   /* Clear the old injected sequence length JL bits */
1265:./FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 &= JSQR_JL_RESET;
 1120              		.loc 1 1265 0
 1121 0002 23F44013 		bic	r3, r3, #3145728
 1122              	.LVL113:
1266:./FWLIB/src/stm32f4xx_adc.c ****   
1267:./FWLIB/src/stm32f4xx_adc.c ****   /* Set the injected sequence length JL bits */
1268:./FWLIB/src/stm32f4xx_adc.c ****   tmpreg2 = Length - 1; 
 1123              		.loc 1 1268 0
 1124 0006 0139     		subs	r1, r1, #1
 1125              	.LVL114:
1269:./FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 |= tmpreg2 << 20;
 1126              		.loc 1 1269 0
 1127 0008 43EA0153 		orr	r3, r3, r1, lsl #20
 1128              	.LVL115:
1270:./FWLIB/src/stm32f4xx_adc.c ****   
1271:./FWLIB/src/stm32f4xx_adc.c ****   /* Store the new register value */
1272:./FWLIB/src/stm32f4xx_adc.c ****   ADCx->JSQR = tmpreg1;
 1129              		.loc 1 1272 0
ARM GAS  /tmp/ccqllL8a.s 			page 43


 1130 000c 8363     		str	r3, [r0, #56]
1273:./FWLIB/src/stm32f4xx_adc.c **** }
 1131              		.loc 1 1273 0
 1132 000e 7047     		bx	lr
 1133              		.cfi_endproc
 1134              	.LFE136:
 1136              		.section	.text.ADC_SetInjectedOffset,"ax",%progbits
 1137              		.align	1
 1138              		.global	ADC_SetInjectedOffset
 1139              		.syntax unified
 1140              		.thumb
 1141              		.thumb_func
 1142              		.fpu fpv4-sp-d16
 1144              	ADC_SetInjectedOffset:
 1145              	.LFB137:
1274:./FWLIB/src/stm32f4xx_adc.c **** 
1275:./FWLIB/src/stm32f4xx_adc.c **** /**
1276:./FWLIB/src/stm32f4xx_adc.c ****   * @brief  Set the injected channels conversion value offset
1277:./FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1278:./FWLIB/src/stm32f4xx_adc.c ****   * @param  ADC_InjectedChannel: the ADC injected channel to set its offset. 
1279:./FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1280:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_1: Injected Channel1 selected
1281:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_2: Injected Channel2 selected
1282:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
1283:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
1284:./FWLIB/src/stm32f4xx_adc.c ****   * @param  Offset: the offset value for the selected ADC injected channel
1285:./FWLIB/src/stm32f4xx_adc.c ****   *          This parameter must be a 12bit value.
1286:./FWLIB/src/stm32f4xx_adc.c ****   * @retval None
1287:./FWLIB/src/stm32f4xx_adc.c ****   */
1288:./FWLIB/src/stm32f4xx_adc.c **** void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
1289:./FWLIB/src/stm32f4xx_adc.c **** {
 1146              		.loc 1 1289 0
 1147              		.cfi_startproc
 1148              		@ args = 0, pretend = 0, frame = 8
 1149              		@ frame_needed = 0, uses_anonymous_args = 0
 1150              		@ link register save eliminated.
 1151              	.LVL116:
 1152 0000 82B0     		sub	sp, sp, #8
 1153              	.LCFI11:
 1154              		.cfi_def_cfa_offset 8
1290:./FWLIB/src/stm32f4xx_adc.c ****     __IO uint32_t tmp = 0;
 1155              		.loc 1 1290 0
 1156 0002 0023     		movs	r3, #0
 1157 0004 0193     		str	r3, [sp, #4]
1291:./FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
1292:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1293:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
1294:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_OFFSET(Offset));
1295:./FWLIB/src/stm32f4xx_adc.c ****   
1296:./FWLIB/src/stm32f4xx_adc.c ****   tmp = (uint32_t)ADCx;
 1158              		.loc 1 1296 0
 1159 0006 0190     		str	r0, [sp, #4]
1297:./FWLIB/src/stm32f4xx_adc.c ****   tmp += ADC_InjectedChannel;
 1160              		.loc 1 1297 0
 1161 0008 019B     		ldr	r3, [sp, #4]
 1162 000a 1944     		add	r1, r1, r3
 1163              	.LVL117:
ARM GAS  /tmp/ccqllL8a.s 			page 44


 1164 000c 0191     		str	r1, [sp, #4]
1298:./FWLIB/src/stm32f4xx_adc.c ****   
1299:./FWLIB/src/stm32f4xx_adc.c ****   /* Set the selected injected channel data offset */
1300:./FWLIB/src/stm32f4xx_adc.c ****  *(__IO uint32_t *) tmp = (uint32_t)Offset;
 1165              		.loc 1 1300 0
 1166 000e 019B     		ldr	r3, [sp, #4]
 1167 0010 1A60     		str	r2, [r3]
1301:./FWLIB/src/stm32f4xx_adc.c **** }
 1168              		.loc 1 1301 0
 1169 0012 02B0     		add	sp, sp, #8
 1170              	.LCFI12:
 1171              		.cfi_def_cfa_offset 0
 1172              		@ sp needed
 1173 0014 7047     		bx	lr
 1174              		.cfi_endproc
 1175              	.LFE137:
 1177              		.section	.text.ADC_ExternalTrigInjectedConvConfig,"ax",%progbits
 1178              		.align	1
 1179              		.global	ADC_ExternalTrigInjectedConvConfig
 1180              		.syntax unified
 1181              		.thumb
 1182              		.thumb_func
 1183              		.fpu fpv4-sp-d16
 1185              	ADC_ExternalTrigInjectedConvConfig:
 1186              	.LFB138:
1302:./FWLIB/src/stm32f4xx_adc.c **** 
1303:./FWLIB/src/stm32f4xx_adc.c ****  /**
1304:./FWLIB/src/stm32f4xx_adc.c ****   * @brief  Configures the ADCx external trigger for injected channels conversion.
1305:./FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1306:./FWLIB/src/stm32f4xx_adc.c ****   * @param  ADC_ExternalTrigInjecConv: specifies the ADC trigger to start injected conversion.
1307:./FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:                    
1308:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T1_CC4: Timer1 capture compare4 selected 
1309:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T1_TRGO: Timer1 TRGO event selected 
1310:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T2_CC1: Timer2 capture compare1 selected 
1311:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T2_TRGO: Timer2 TRGO event selected 
1312:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T3_CC2: Timer3 capture compare2 selected 
1313:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T3_CC4: Timer3 capture compare4 selected 
1314:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_CC1: Timer4 capture compare1 selected             
1315:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_CC2: Timer4 capture compare2 selected 
1316:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_CC3: Timer4 capture compare3 selected             
1317:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_TRGO: Timer4 TRGO event selected 
1318:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T5_CC4: Timer5 capture compare4 selected             
1319:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T5_TRGO: Timer5 TRGO event selected                  
1320:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T8_CC2: Timer8 capture compare2 selected
1321:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T8_CC3: Timer8 capture compare3 selected             
1322:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T8_CC4: Timer8 capture compare4 selected 
1323:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_Ext_IT15: External interrupt line 15 event selected  
1324:./FWLIB/src/stm32f4xx_adc.c ****   * @retval None
1325:./FWLIB/src/stm32f4xx_adc.c ****   */
1326:./FWLIB/src/stm32f4xx_adc.c **** void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
1327:./FWLIB/src/stm32f4xx_adc.c **** {
 1187              		.loc 1 1327 0
 1188              		.cfi_startproc
 1189              		@ args = 0, pretend = 0, frame = 0
 1190              		@ frame_needed = 0, uses_anonymous_args = 0
 1191              		@ link register save eliminated.
 1192              	.LVL118:
ARM GAS  /tmp/ccqllL8a.s 			page 45


1328:./FWLIB/src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
1329:./FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
1330:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1331:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
1332:./FWLIB/src/stm32f4xx_adc.c ****   
1333:./FWLIB/src/stm32f4xx_adc.c ****   /* Get the old register value */
1334:./FWLIB/src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR2;
 1193              		.loc 1 1334 0
 1194 0000 8368     		ldr	r3, [r0, #8]
 1195              	.LVL119:
1335:./FWLIB/src/stm32f4xx_adc.c ****   
1336:./FWLIB/src/stm32f4xx_adc.c ****   /* Clear the old external event selection for injected group */
1337:./FWLIB/src/stm32f4xx_adc.c ****   tmpreg &= CR2_JEXTSEL_RESET;
 1196              		.loc 1 1337 0
 1197 0002 23F47023 		bic	r3, r3, #983040
 1198              	.LVL120:
1338:./FWLIB/src/stm32f4xx_adc.c ****   
1339:./FWLIB/src/stm32f4xx_adc.c ****   /* Set the external event selection for injected group */
1340:./FWLIB/src/stm32f4xx_adc.c ****   tmpreg |= ADC_ExternalTrigInjecConv;
 1199              		.loc 1 1340 0
 1200 0006 1943     		orrs	r1, r1, r3
 1201              	.LVL121:
1341:./FWLIB/src/stm32f4xx_adc.c ****   
1342:./FWLIB/src/stm32f4xx_adc.c ****   /* Store the new register value */
1343:./FWLIB/src/stm32f4xx_adc.c ****   ADCx->CR2 = tmpreg;
 1202              		.loc 1 1343 0
 1203 0008 8160     		str	r1, [r0, #8]
1344:./FWLIB/src/stm32f4xx_adc.c **** }
 1204              		.loc 1 1344 0
 1205 000a 7047     		bx	lr
 1206              		.cfi_endproc
 1207              	.LFE138:
 1209              		.section	.text.ADC_ExternalTrigInjectedConvEdgeConfig,"ax",%progbits
 1210              		.align	1
 1211              		.global	ADC_ExternalTrigInjectedConvEdgeConfig
 1212              		.syntax unified
 1213              		.thumb
 1214              		.thumb_func
 1215              		.fpu fpv4-sp-d16
 1217              	ADC_ExternalTrigInjectedConvEdgeConfig:
 1218              	.LFB139:
1345:./FWLIB/src/stm32f4xx_adc.c **** 
1346:./FWLIB/src/stm32f4xx_adc.c **** /**
1347:./FWLIB/src/stm32f4xx_adc.c ****   * @brief  Configures the ADCx external trigger edge for injected channels conversion.
1348:./FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1349:./FWLIB/src/stm32f4xx_adc.c ****   * @param  ADC_ExternalTrigInjecConvEdge: specifies the ADC external trigger edge
1350:./FWLIB/src/stm32f4xx_adc.c ****   *         to start injected conversion. 
1351:./FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1352:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_None: external trigger disabled for 
1353:./FWLIB/src/stm32f4xx_adc.c ****   *                                                     injected conversion
1354:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_Rising: detection on rising edge
1355:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_Falling: detection on falling edge
1356:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_RisingFalling: detection on both rising 
1357:./FWLIB/src/stm32f4xx_adc.c ****   *                                                               and falling edge
1358:./FWLIB/src/stm32f4xx_adc.c ****   * @retval None
1359:./FWLIB/src/stm32f4xx_adc.c ****   */
1360:./FWLIB/src/stm32f4xx_adc.c **** void ADC_ExternalTrigInjectedConvEdgeConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConvEd
ARM GAS  /tmp/ccqllL8a.s 			page 46


1361:./FWLIB/src/stm32f4xx_adc.c **** {
 1219              		.loc 1 1361 0
 1220              		.cfi_startproc
 1221              		@ args = 0, pretend = 0, frame = 0
 1222              		@ frame_needed = 0, uses_anonymous_args = 0
 1223              		@ link register save eliminated.
 1224              	.LVL122:
1362:./FWLIB/src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
1363:./FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
1364:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1365:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(ADC_ExternalTrigInjecConvEdge));
1366:./FWLIB/src/stm32f4xx_adc.c ****   /* Get the old register value */
1367:./FWLIB/src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR2;
 1225              		.loc 1 1367 0
 1226 0000 8368     		ldr	r3, [r0, #8]
 1227              	.LVL123:
1368:./FWLIB/src/stm32f4xx_adc.c ****   /* Clear the old external trigger edge for injected group */
1369:./FWLIB/src/stm32f4xx_adc.c ****   tmpreg &= CR2_JEXTEN_RESET;
 1228              		.loc 1 1369 0
 1229 0002 23F44013 		bic	r3, r3, #3145728
 1230              	.LVL124:
1370:./FWLIB/src/stm32f4xx_adc.c ****   /* Set the new external trigger edge for injected group */
1371:./FWLIB/src/stm32f4xx_adc.c ****   tmpreg |= ADC_ExternalTrigInjecConvEdge;
 1231              		.loc 1 1371 0
 1232 0006 1943     		orrs	r1, r1, r3
 1233              	.LVL125:
1372:./FWLIB/src/stm32f4xx_adc.c ****   /* Store the new register value */
1373:./FWLIB/src/stm32f4xx_adc.c ****   ADCx->CR2 = tmpreg;
 1234              		.loc 1 1373 0
 1235 0008 8160     		str	r1, [r0, #8]
1374:./FWLIB/src/stm32f4xx_adc.c **** }
 1236              		.loc 1 1374 0
 1237 000a 7047     		bx	lr
 1238              		.cfi_endproc
 1239              	.LFE139:
 1241              		.section	.text.ADC_SoftwareStartInjectedConv,"ax",%progbits
 1242              		.align	1
 1243              		.global	ADC_SoftwareStartInjectedConv
 1244              		.syntax unified
 1245              		.thumb
 1246              		.thumb_func
 1247              		.fpu fpv4-sp-d16
 1249              	ADC_SoftwareStartInjectedConv:
 1250              	.LFB140:
1375:./FWLIB/src/stm32f4xx_adc.c **** 
1376:./FWLIB/src/stm32f4xx_adc.c **** /**
1377:./FWLIB/src/stm32f4xx_adc.c ****   * @brief  Enables the selected ADC software start conversion of the injected channels.
1378:./FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1379:./FWLIB/src/stm32f4xx_adc.c ****   * @retval None
1380:./FWLIB/src/stm32f4xx_adc.c ****   */
1381:./FWLIB/src/stm32f4xx_adc.c **** void ADC_SoftwareStartInjectedConv(ADC_TypeDef* ADCx)
1382:./FWLIB/src/stm32f4xx_adc.c **** {
 1251              		.loc 1 1382 0
 1252              		.cfi_startproc
 1253              		@ args = 0, pretend = 0, frame = 0
 1254              		@ frame_needed = 0, uses_anonymous_args = 0
 1255              		@ link register save eliminated.
ARM GAS  /tmp/ccqllL8a.s 			page 47


 1256              	.LVL126:
1383:./FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
1384:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1385:./FWLIB/src/stm32f4xx_adc.c ****   /* Enable the selected ADC conversion for injected group */
1386:./FWLIB/src/stm32f4xx_adc.c ****   ADCx->CR2 |= (uint32_t)ADC_CR2_JSWSTART;
 1257              		.loc 1 1386 0
 1258 0000 8368     		ldr	r3, [r0, #8]
 1259 0002 43F48003 		orr	r3, r3, #4194304
 1260 0006 8360     		str	r3, [r0, #8]
1387:./FWLIB/src/stm32f4xx_adc.c **** }
 1261              		.loc 1 1387 0
 1262 0008 7047     		bx	lr
 1263              		.cfi_endproc
 1264              	.LFE140:
 1266              		.section	.text.ADC_GetSoftwareStartInjectedConvCmdStatus,"ax",%progbits
 1267              		.align	1
 1268              		.global	ADC_GetSoftwareStartInjectedConvCmdStatus
 1269              		.syntax unified
 1270              		.thumb
 1271              		.thumb_func
 1272              		.fpu fpv4-sp-d16
 1274              	ADC_GetSoftwareStartInjectedConvCmdStatus:
 1275              	.LFB141:
1388:./FWLIB/src/stm32f4xx_adc.c **** 
1389:./FWLIB/src/stm32f4xx_adc.c **** /**
1390:./FWLIB/src/stm32f4xx_adc.c ****   * @brief  Gets the selected ADC Software start injected conversion Status.
1391:./FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1392:./FWLIB/src/stm32f4xx_adc.c ****   * @retval The new state of ADC software start injected conversion (SET or RESET).
1393:./FWLIB/src/stm32f4xx_adc.c ****   */
1394:./FWLIB/src/stm32f4xx_adc.c **** FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
1395:./FWLIB/src/stm32f4xx_adc.c **** {
 1276              		.loc 1 1395 0
 1277              		.cfi_startproc
 1278              		@ args = 0, pretend = 0, frame = 0
 1279              		@ frame_needed = 0, uses_anonymous_args = 0
 1280              		@ link register save eliminated.
 1281              	.LVL127:
1396:./FWLIB/src/stm32f4xx_adc.c ****   FlagStatus bitstatus = RESET;
1397:./FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
1398:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1399:./FWLIB/src/stm32f4xx_adc.c ****   
1400:./FWLIB/src/stm32f4xx_adc.c ****   /* Check the status of JSWSTART bit */
1401:./FWLIB/src/stm32f4xx_adc.c ****   if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 1282              		.loc 1 1401 0
 1283 0000 8368     		ldr	r3, [r0, #8]
 1284 0002 13F4800F 		tst	r3, #4194304
 1285 0006 01D1     		bne	.L91
1402:./FWLIB/src/stm32f4xx_adc.c ****   {
1403:./FWLIB/src/stm32f4xx_adc.c ****     /* JSWSTART bit is set */
1404:./FWLIB/src/stm32f4xx_adc.c ****     bitstatus = SET;
1405:./FWLIB/src/stm32f4xx_adc.c ****   }
1406:./FWLIB/src/stm32f4xx_adc.c ****   else
1407:./FWLIB/src/stm32f4xx_adc.c ****   {
1408:./FWLIB/src/stm32f4xx_adc.c ****     /* JSWSTART bit is reset */
1409:./FWLIB/src/stm32f4xx_adc.c ****     bitstatus = RESET;
 1286              		.loc 1 1409 0
 1287 0008 0020     		movs	r0, #0
ARM GAS  /tmp/ccqllL8a.s 			page 48


 1288              	.LVL128:
1410:./FWLIB/src/stm32f4xx_adc.c ****   }
1411:./FWLIB/src/stm32f4xx_adc.c ****   /* Return the JSWSTART bit status */
1412:./FWLIB/src/stm32f4xx_adc.c ****   return  bitstatus;
1413:./FWLIB/src/stm32f4xx_adc.c **** }
 1289              		.loc 1 1413 0
 1290 000a 7047     		bx	lr
 1291              	.LVL129:
 1292              	.L91:
1404:./FWLIB/src/stm32f4xx_adc.c ****   }
 1293              		.loc 1 1404 0
 1294 000c 0120     		movs	r0, #1
 1295              	.LVL130:
 1296 000e 7047     		bx	lr
 1297              		.cfi_endproc
 1298              	.LFE141:
 1300              		.section	.text.ADC_AutoInjectedConvCmd,"ax",%progbits
 1301              		.align	1
 1302              		.global	ADC_AutoInjectedConvCmd
 1303              		.syntax unified
 1304              		.thumb
 1305              		.thumb_func
 1306              		.fpu fpv4-sp-d16
 1308              	ADC_AutoInjectedConvCmd:
 1309              	.LFB142:
1414:./FWLIB/src/stm32f4xx_adc.c **** 
1415:./FWLIB/src/stm32f4xx_adc.c **** /**
1416:./FWLIB/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the selected ADC automatic injected group 
1417:./FWLIB/src/stm32f4xx_adc.c ****   *         conversion after regular one.
1418:./FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1419:./FWLIB/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC auto injected conversion
1420:./FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1421:./FWLIB/src/stm32f4xx_adc.c ****   * @retval None
1422:./FWLIB/src/stm32f4xx_adc.c ****   */
1423:./FWLIB/src/stm32f4xx_adc.c **** void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1424:./FWLIB/src/stm32f4xx_adc.c **** {
 1310              		.loc 1 1424 0
 1311              		.cfi_startproc
 1312              		@ args = 0, pretend = 0, frame = 0
 1313              		@ frame_needed = 0, uses_anonymous_args = 0
 1314              		@ link register save eliminated.
 1315              	.LVL131:
1425:./FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
1426:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1427:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1428:./FWLIB/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1316              		.loc 1 1428 0
 1317 0000 21B9     		cbnz	r1, .L95
1429:./FWLIB/src/stm32f4xx_adc.c ****   {
1430:./FWLIB/src/stm32f4xx_adc.c ****     /* Enable the selected ADC automatic injected group conversion */
1431:./FWLIB/src/stm32f4xx_adc.c ****     ADCx->CR1 |= (uint32_t)ADC_CR1_JAUTO;
1432:./FWLIB/src/stm32f4xx_adc.c ****   }
1433:./FWLIB/src/stm32f4xx_adc.c ****   else
1434:./FWLIB/src/stm32f4xx_adc.c ****   {
1435:./FWLIB/src/stm32f4xx_adc.c ****     /* Disable the selected ADC automatic injected group conversion */
1436:./FWLIB/src/stm32f4xx_adc.c ****     ADCx->CR1 &= (uint32_t)(~ADC_CR1_JAUTO);
 1318              		.loc 1 1436 0
ARM GAS  /tmp/ccqllL8a.s 			page 49


 1319 0002 4368     		ldr	r3, [r0, #4]
 1320 0004 23F48063 		bic	r3, r3, #1024
 1321 0008 4360     		str	r3, [r0, #4]
1437:./FWLIB/src/stm32f4xx_adc.c ****   }
1438:./FWLIB/src/stm32f4xx_adc.c **** }
 1322              		.loc 1 1438 0
 1323 000a 7047     		bx	lr
 1324              	.L95:
1431:./FWLIB/src/stm32f4xx_adc.c ****   }
 1325              		.loc 1 1431 0
 1326 000c 4368     		ldr	r3, [r0, #4]
 1327 000e 43F48063 		orr	r3, r3, #1024
 1328 0012 4360     		str	r3, [r0, #4]
 1329 0014 7047     		bx	lr
 1330              		.cfi_endproc
 1331              	.LFE142:
 1333              		.section	.text.ADC_InjectedDiscModeCmd,"ax",%progbits
 1334              		.align	1
 1335              		.global	ADC_InjectedDiscModeCmd
 1336              		.syntax unified
 1337              		.thumb
 1338              		.thumb_func
 1339              		.fpu fpv4-sp-d16
 1341              	ADC_InjectedDiscModeCmd:
 1342              	.LFB143:
1439:./FWLIB/src/stm32f4xx_adc.c **** 
1440:./FWLIB/src/stm32f4xx_adc.c **** /**
1441:./FWLIB/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the discontinuous mode for injected group 
1442:./FWLIB/src/stm32f4xx_adc.c ****   *         channel for the specified ADC
1443:./FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1444:./FWLIB/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC discontinuous mode on injected
1445:./FWLIB/src/stm32f4xx_adc.c ****   *         group channel.
1446:./FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1447:./FWLIB/src/stm32f4xx_adc.c ****   * @retval None
1448:./FWLIB/src/stm32f4xx_adc.c ****   */
1449:./FWLIB/src/stm32f4xx_adc.c **** void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1450:./FWLIB/src/stm32f4xx_adc.c **** {
 1343              		.loc 1 1450 0
 1344              		.cfi_startproc
 1345              		@ args = 0, pretend = 0, frame = 0
 1346              		@ frame_needed = 0, uses_anonymous_args = 0
 1347              		@ link register save eliminated.
 1348              	.LVL132:
1451:./FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
1452:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1453:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1454:./FWLIB/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1349              		.loc 1 1454 0
 1350 0000 21B9     		cbnz	r1, .L99
1455:./FWLIB/src/stm32f4xx_adc.c ****   {
1456:./FWLIB/src/stm32f4xx_adc.c ****     /* Enable the selected ADC injected discontinuous mode */
1457:./FWLIB/src/stm32f4xx_adc.c ****     ADCx->CR1 |= (uint32_t)ADC_CR1_JDISCEN;
1458:./FWLIB/src/stm32f4xx_adc.c ****   }
1459:./FWLIB/src/stm32f4xx_adc.c ****   else
1460:./FWLIB/src/stm32f4xx_adc.c ****   {
1461:./FWLIB/src/stm32f4xx_adc.c ****     /* Disable the selected ADC injected discontinuous mode */
1462:./FWLIB/src/stm32f4xx_adc.c ****     ADCx->CR1 &= (uint32_t)(~ADC_CR1_JDISCEN);
ARM GAS  /tmp/ccqllL8a.s 			page 50


 1351              		.loc 1 1462 0
 1352 0002 4368     		ldr	r3, [r0, #4]
 1353 0004 23F48053 		bic	r3, r3, #4096
 1354 0008 4360     		str	r3, [r0, #4]
1463:./FWLIB/src/stm32f4xx_adc.c ****   }
1464:./FWLIB/src/stm32f4xx_adc.c **** }
 1355              		.loc 1 1464 0
 1356 000a 7047     		bx	lr
 1357              	.L99:
1457:./FWLIB/src/stm32f4xx_adc.c ****   }
 1358              		.loc 1 1457 0
 1359 000c 4368     		ldr	r3, [r0, #4]
 1360 000e 43F48053 		orr	r3, r3, #4096
 1361 0012 4360     		str	r3, [r0, #4]
 1362 0014 7047     		bx	lr
 1363              		.cfi_endproc
 1364              	.LFE143:
 1366              		.section	.text.ADC_GetInjectedConversionValue,"ax",%progbits
 1367              		.align	1
 1368              		.global	ADC_GetInjectedConversionValue
 1369              		.syntax unified
 1370              		.thumb
 1371              		.thumb_func
 1372              		.fpu fpv4-sp-d16
 1374              	ADC_GetInjectedConversionValue:
 1375              	.LFB144:
1465:./FWLIB/src/stm32f4xx_adc.c **** 
1466:./FWLIB/src/stm32f4xx_adc.c **** /**
1467:./FWLIB/src/stm32f4xx_adc.c ****   * @brief  Returns the ADC injected channel conversion result
1468:./FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1469:./FWLIB/src/stm32f4xx_adc.c ****   * @param  ADC_InjectedChannel: the converted ADC injected channel.
1470:./FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1471:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_1: Injected Channel1 selected
1472:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_2: Injected Channel2 selected
1473:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
1474:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
1475:./FWLIB/src/stm32f4xx_adc.c ****   * @retval The Data conversion value.
1476:./FWLIB/src/stm32f4xx_adc.c ****   */
1477:./FWLIB/src/stm32f4xx_adc.c **** uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
1478:./FWLIB/src/stm32f4xx_adc.c **** {
 1376              		.loc 1 1478 0
 1377              		.cfi_startproc
 1378              		@ args = 0, pretend = 0, frame = 8
 1379              		@ frame_needed = 0, uses_anonymous_args = 0
 1380              		@ link register save eliminated.
 1381              	.LVL133:
 1382 0000 82B0     		sub	sp, sp, #8
 1383              	.LCFI13:
 1384              		.cfi_def_cfa_offset 8
1479:./FWLIB/src/stm32f4xx_adc.c ****   __IO uint32_t tmp = 0;
 1385              		.loc 1 1479 0
 1386 0002 0023     		movs	r3, #0
 1387 0004 0193     		str	r3, [sp, #4]
1480:./FWLIB/src/stm32f4xx_adc.c ****   
1481:./FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
1482:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1483:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
ARM GAS  /tmp/ccqllL8a.s 			page 51


1484:./FWLIB/src/stm32f4xx_adc.c **** 
1485:./FWLIB/src/stm32f4xx_adc.c ****   tmp = (uint32_t)ADCx;
 1388              		.loc 1 1485 0
 1389 0006 0190     		str	r0, [sp, #4]
1486:./FWLIB/src/stm32f4xx_adc.c ****   tmp += ADC_InjectedChannel + JDR_OFFSET;
 1390              		.loc 1 1486 0
 1391 0008 019B     		ldr	r3, [sp, #4]
 1392 000a 1944     		add	r1, r1, r3
 1393              	.LVL134:
 1394 000c 2831     		adds	r1, r1, #40
 1395 000e 0191     		str	r1, [sp, #4]
1487:./FWLIB/src/stm32f4xx_adc.c ****   
1488:./FWLIB/src/stm32f4xx_adc.c ****   /* Returns the selected injected channel conversion data value */
1489:./FWLIB/src/stm32f4xx_adc.c ****   return (uint16_t) (*(__IO uint32_t*)  tmp); 
 1396              		.loc 1 1489 0
 1397 0010 019B     		ldr	r3, [sp, #4]
 1398 0012 1868     		ldr	r0, [r3]
 1399              	.LVL135:
1490:./FWLIB/src/stm32f4xx_adc.c **** }
 1400              		.loc 1 1490 0
 1401 0014 80B2     		uxth	r0, r0
 1402 0016 02B0     		add	sp, sp, #8
 1403              	.LCFI14:
 1404              		.cfi_def_cfa_offset 0
 1405              		@ sp needed
 1406 0018 7047     		bx	lr
 1407              		.cfi_endproc
 1408              	.LFE144:
 1410              		.section	.text.ADC_ITConfig,"ax",%progbits
 1411              		.align	1
 1412              		.global	ADC_ITConfig
 1413              		.syntax unified
 1414              		.thumb
 1415              		.thumb_func
 1416              		.fpu fpv4-sp-d16
 1418              	ADC_ITConfig:
 1419              	.LFB145:
1491:./FWLIB/src/stm32f4xx_adc.c **** /**
1492:./FWLIB/src/stm32f4xx_adc.c ****   * @}
1493:./FWLIB/src/stm32f4xx_adc.c ****   */
1494:./FWLIB/src/stm32f4xx_adc.c **** 
1495:./FWLIB/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group7 Interrupts and flags management functions
1496:./FWLIB/src/stm32f4xx_adc.c ****  *  @brief   Interrupts and flags management functions
1497:./FWLIB/src/stm32f4xx_adc.c ****  *
1498:./FWLIB/src/stm32f4xx_adc.c **** @verbatim   
1499:./FWLIB/src/stm32f4xx_adc.c ****  ===============================================================================
1500:./FWLIB/src/stm32f4xx_adc.c ****             ##### Interrupts and flags management functions #####
1501:./FWLIB/src/stm32f4xx_adc.c ****  ===============================================================================  
1502:./FWLIB/src/stm32f4xx_adc.c **** 
1503:./FWLIB/src/stm32f4xx_adc.c ****     [..] This section provides functions allowing to configure the ADC Interrupts 
1504:./FWLIB/src/stm32f4xx_adc.c ****          and to get the status and clear flags and Interrupts pending bits.
1505:./FWLIB/src/stm32f4xx_adc.c ****   
1506:./FWLIB/src/stm32f4xx_adc.c ****     [..] Each ADC provides 4 Interrupts sources and 6 Flags which can be divided
1507:./FWLIB/src/stm32f4xx_adc.c ****         into 3 groups:
1508:./FWLIB/src/stm32f4xx_adc.c ****   
1509:./FWLIB/src/stm32f4xx_adc.c ****   *** Flags and Interrupts for ADC regular channels ***
1510:./FWLIB/src/stm32f4xx_adc.c ****   =====================================================
ARM GAS  /tmp/ccqllL8a.s 			page 52


1511:./FWLIB/src/stm32f4xx_adc.c ****     [..]
1512:./FWLIB/src/stm32f4xx_adc.c ****       (+) Flags :
1513:./FWLIB/src/stm32f4xx_adc.c ****         (##) ADC_FLAG_OVR : Overrun detection when regular converted data are lost
1514:./FWLIB/src/stm32f4xx_adc.c **** 
1515:./FWLIB/src/stm32f4xx_adc.c ****         (##) ADC_FLAG_EOC : Regular channel end of conversion ==> to indicate 
1516:./FWLIB/src/stm32f4xx_adc.c ****              (depending on EOCS bit, managed by ADC_EOCOnEachRegularChannelCmd() )
1517:./FWLIB/src/stm32f4xx_adc.c ****              the end of:
1518:./FWLIB/src/stm32f4xx_adc.c ****              (+++) a regular CHANNEL conversion 
1519:./FWLIB/src/stm32f4xx_adc.c ****              (+++) sequence of regular GROUP conversions .
1520:./FWLIB/src/stm32f4xx_adc.c **** 
1521:./FWLIB/src/stm32f4xx_adc.c ****         (##) ADC_FLAG_STRT: Regular channel start ==> to indicate when regular 
1522:./FWLIB/src/stm32f4xx_adc.c ****              CHANNEL conversion starts.
1523:./FWLIB/src/stm32f4xx_adc.c ****     [..]
1524:./FWLIB/src/stm32f4xx_adc.c ****       (+) Interrupts :
1525:./FWLIB/src/stm32f4xx_adc.c ****         (##) ADC_IT_OVR : specifies the interrupt source for Overrun detection 
1526:./FWLIB/src/stm32f4xx_adc.c ****              event.  
1527:./FWLIB/src/stm32f4xx_adc.c ****         (##) ADC_IT_EOC : specifies the interrupt source for Regular channel end
1528:./FWLIB/src/stm32f4xx_adc.c ****              of conversion event.
1529:./FWLIB/src/stm32f4xx_adc.c ****   
1530:./FWLIB/src/stm32f4xx_adc.c ****   
1531:./FWLIB/src/stm32f4xx_adc.c ****   *** Flags and Interrupts for ADC Injected channels ***
1532:./FWLIB/src/stm32f4xx_adc.c ****   ======================================================
1533:./FWLIB/src/stm32f4xx_adc.c ****     [..]
1534:./FWLIB/src/stm32f4xx_adc.c ****       (+) Flags :
1535:./FWLIB/src/stm32f4xx_adc.c ****         (##) ADC_FLAG_JEOC : Injected channel end of conversion ==> to indicate 
1536:./FWLIB/src/stm32f4xx_adc.c ****              at the end of injected GROUP conversion  
1537:./FWLIB/src/stm32f4xx_adc.c ****               
1538:./FWLIB/src/stm32f4xx_adc.c ****         (##) ADC_FLAG_JSTRT: Injected channel start ==> to indicate hardware when 
1539:./FWLIB/src/stm32f4xx_adc.c ****              injected GROUP conversion starts.
1540:./FWLIB/src/stm32f4xx_adc.c ****     [..]
1541:./FWLIB/src/stm32f4xx_adc.c ****       (+) Interrupts :
1542:./FWLIB/src/stm32f4xx_adc.c ****         (##) ADC_IT_JEOC : specifies the interrupt source for Injected channel 
1543:./FWLIB/src/stm32f4xx_adc.c ****              end of conversion event.     
1544:./FWLIB/src/stm32f4xx_adc.c **** 
1545:./FWLIB/src/stm32f4xx_adc.c ****   *** General Flags and Interrupts for the ADC ***
1546:./FWLIB/src/stm32f4xx_adc.c ****   ================================================ 
1547:./FWLIB/src/stm32f4xx_adc.c ****     [..]
1548:./FWLIB/src/stm32f4xx_adc.c ****       (+)Flags :
1549:./FWLIB/src/stm32f4xx_adc.c ****         (##) ADC_FLAG_AWD: Analog watchdog ==> to indicate if the converted voltage 
1550:./FWLIB/src/stm32f4xx_adc.c ****              crosses the programmed thresholds values.
1551:./FWLIB/src/stm32f4xx_adc.c ****     [..]          
1552:./FWLIB/src/stm32f4xx_adc.c ****       (+) Interrupts :
1553:./FWLIB/src/stm32f4xx_adc.c ****         (##) ADC_IT_AWD : specifies the interrupt source for Analog watchdog event. 
1554:./FWLIB/src/stm32f4xx_adc.c **** 
1555:./FWLIB/src/stm32f4xx_adc.c ****   
1556:./FWLIB/src/stm32f4xx_adc.c ****     [..] The user should identify which mode will be used in his application to 
1557:./FWLIB/src/stm32f4xx_adc.c ****          manage the ADC controller events: Polling mode or Interrupt mode.
1558:./FWLIB/src/stm32f4xx_adc.c ****   
1559:./FWLIB/src/stm32f4xx_adc.c ****     [..] In the Polling Mode it is advised to use the following functions:
1560:./FWLIB/src/stm32f4xx_adc.c ****       (+) ADC_GetFlagStatus() : to check if flags events occur. 
1561:./FWLIB/src/stm32f4xx_adc.c ****       (+) ADC_ClearFlag()     : to clear the flags events.
1562:./FWLIB/src/stm32f4xx_adc.c ****       
1563:./FWLIB/src/stm32f4xx_adc.c ****     [..] In the Interrupt Mode it is advised to use the following functions:
1564:./FWLIB/src/stm32f4xx_adc.c ****       (+) ADC_ITConfig()          : to enable or disable the interrupt source.
1565:./FWLIB/src/stm32f4xx_adc.c ****       (+) ADC_GetITStatus()       : to check if Interrupt occurs.
1566:./FWLIB/src/stm32f4xx_adc.c ****       (+) ADC_ClearITPendingBit() : to clear the Interrupt pending Bit 
1567:./FWLIB/src/stm32f4xx_adc.c ****                                    (corresponding Flag). 
ARM GAS  /tmp/ccqllL8a.s 			page 53


1568:./FWLIB/src/stm32f4xx_adc.c **** @endverbatim
1569:./FWLIB/src/stm32f4xx_adc.c ****   * @{
1570:./FWLIB/src/stm32f4xx_adc.c ****   */ 
1571:./FWLIB/src/stm32f4xx_adc.c **** /**
1572:./FWLIB/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the specified ADC interrupts.
1573:./FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1574:./FWLIB/src/stm32f4xx_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt sources to be enabled or disabled. 
1575:./FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1576:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_EOC: End of conversion interrupt mask
1577:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
1578:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1579:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_OVR: Overrun interrupt enable                       
1580:./FWLIB/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the specified ADC interrupts.
1581:./FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1582:./FWLIB/src/stm32f4xx_adc.c ****   * @retval None
1583:./FWLIB/src/stm32f4xx_adc.c ****   */
1584:./FWLIB/src/stm32f4xx_adc.c **** void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)  
1585:./FWLIB/src/stm32f4xx_adc.c **** {
 1420              		.loc 1 1585 0
 1421              		.cfi_startproc
 1422              		@ args = 0, pretend = 0, frame = 0
 1423              		@ frame_needed = 0, uses_anonymous_args = 0
 1424              		@ link register save eliminated.
 1425              	.LVL136:
1586:./FWLIB/src/stm32f4xx_adc.c ****   uint32_t itmask = 0;
1587:./FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
1588:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1589:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1590:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_IT(ADC_IT)); 
1591:./FWLIB/src/stm32f4xx_adc.c **** 
1592:./FWLIB/src/stm32f4xx_adc.c ****   /* Get the ADC IT index */
1593:./FWLIB/src/stm32f4xx_adc.c ****   itmask = (uint8_t)ADC_IT;
 1426              		.loc 1 1593 0
 1427 0000 C9B2     		uxtb	r1, r1
 1428              	.LVL137:
1594:./FWLIB/src/stm32f4xx_adc.c ****   itmask = (uint32_t)0x01 << itmask;    
 1429              		.loc 1 1594 0
 1430 0002 0123     		movs	r3, #1
 1431 0004 03FA01F1 		lsl	r1, r3, r1
 1432              	.LVL138:
1595:./FWLIB/src/stm32f4xx_adc.c **** 
1596:./FWLIB/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1433              		.loc 1 1596 0
 1434 0008 22B9     		cbnz	r2, .L105
1597:./FWLIB/src/stm32f4xx_adc.c ****   {
1598:./FWLIB/src/stm32f4xx_adc.c ****     /* Enable the selected ADC interrupts */
1599:./FWLIB/src/stm32f4xx_adc.c ****     ADCx->CR1 |= itmask;
1600:./FWLIB/src/stm32f4xx_adc.c ****   }
1601:./FWLIB/src/stm32f4xx_adc.c ****   else
1602:./FWLIB/src/stm32f4xx_adc.c ****   {
1603:./FWLIB/src/stm32f4xx_adc.c ****     /* Disable the selected ADC interrupts */
1604:./FWLIB/src/stm32f4xx_adc.c ****     ADCx->CR1 &= (~(uint32_t)itmask);
 1435              		.loc 1 1604 0
 1436 000a 4368     		ldr	r3, [r0, #4]
 1437 000c 23EA0101 		bic	r1, r3, r1
 1438              	.LVL139:
 1439 0010 4160     		str	r1, [r0, #4]
ARM GAS  /tmp/ccqllL8a.s 			page 54


1605:./FWLIB/src/stm32f4xx_adc.c ****   }
1606:./FWLIB/src/stm32f4xx_adc.c **** }
 1440              		.loc 1 1606 0
 1441 0012 7047     		bx	lr
 1442              	.LVL140:
 1443              	.L105:
1599:./FWLIB/src/stm32f4xx_adc.c ****   }
 1444              		.loc 1 1599 0
 1445 0014 4368     		ldr	r3, [r0, #4]
 1446 0016 1943     		orrs	r1, r1, r3
 1447              	.LVL141:
 1448 0018 4160     		str	r1, [r0, #4]
 1449 001a 7047     		bx	lr
 1450              		.cfi_endproc
 1451              	.LFE145:
 1453              		.section	.text.ADC_GetFlagStatus,"ax",%progbits
 1454              		.align	1
 1455              		.global	ADC_GetFlagStatus
 1456              		.syntax unified
 1457              		.thumb
 1458              		.thumb_func
 1459              		.fpu fpv4-sp-d16
 1461              	ADC_GetFlagStatus:
 1462              	.LFB146:
1607:./FWLIB/src/stm32f4xx_adc.c **** 
1608:./FWLIB/src/stm32f4xx_adc.c **** /**
1609:./FWLIB/src/stm32f4xx_adc.c ****   * @brief  Checks whether the specified ADC flag is set or not.
1610:./FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1611:./FWLIB/src/stm32f4xx_adc.c ****   * @param  ADC_FLAG: specifies the flag to check. 
1612:./FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1613:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_AWD: Analog watchdog flag
1614:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_EOC: End of conversion flag
1615:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JEOC: End of injected group conversion flag
1616:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
1617:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
1618:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_OVR: Overrun flag                                                 
1619:./FWLIB/src/stm32f4xx_adc.c ****   * @retval The new state of ADC_FLAG (SET or RESET).
1620:./FWLIB/src/stm32f4xx_adc.c ****   */
1621:./FWLIB/src/stm32f4xx_adc.c **** FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
1622:./FWLIB/src/stm32f4xx_adc.c **** {
 1463              		.loc 1 1622 0
 1464              		.cfi_startproc
 1465              		@ args = 0, pretend = 0, frame = 0
 1466              		@ frame_needed = 0, uses_anonymous_args = 0
 1467              		@ link register save eliminated.
 1468              	.LVL142:
1623:./FWLIB/src/stm32f4xx_adc.c ****   FlagStatus bitstatus = RESET;
1624:./FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
1625:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1626:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_GET_FLAG(ADC_FLAG));
1627:./FWLIB/src/stm32f4xx_adc.c **** 
1628:./FWLIB/src/stm32f4xx_adc.c ****   /* Check the status of the specified ADC flag */
1629:./FWLIB/src/stm32f4xx_adc.c ****   if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 1469              		.loc 1 1629 0
 1470 0000 0368     		ldr	r3, [r0]
 1471 0002 1942     		tst	r1, r3
 1472 0004 01D1     		bne	.L109
ARM GAS  /tmp/ccqllL8a.s 			page 55


1630:./FWLIB/src/stm32f4xx_adc.c ****   {
1631:./FWLIB/src/stm32f4xx_adc.c ****     /* ADC_FLAG is set */
1632:./FWLIB/src/stm32f4xx_adc.c ****     bitstatus = SET;
1633:./FWLIB/src/stm32f4xx_adc.c ****   }
1634:./FWLIB/src/stm32f4xx_adc.c ****   else
1635:./FWLIB/src/stm32f4xx_adc.c ****   {
1636:./FWLIB/src/stm32f4xx_adc.c ****     /* ADC_FLAG is reset */
1637:./FWLIB/src/stm32f4xx_adc.c ****     bitstatus = RESET;
 1473              		.loc 1 1637 0
 1474 0006 0020     		movs	r0, #0
 1475              	.LVL143:
1638:./FWLIB/src/stm32f4xx_adc.c ****   }
1639:./FWLIB/src/stm32f4xx_adc.c ****   /* Return the ADC_FLAG status */
1640:./FWLIB/src/stm32f4xx_adc.c ****   return  bitstatus;
1641:./FWLIB/src/stm32f4xx_adc.c **** }
 1476              		.loc 1 1641 0
 1477 0008 7047     		bx	lr
 1478              	.LVL144:
 1479              	.L109:
1632:./FWLIB/src/stm32f4xx_adc.c ****   }
 1480              		.loc 1 1632 0
 1481 000a 0120     		movs	r0, #1
 1482              	.LVL145:
 1483 000c 7047     		bx	lr
 1484              		.cfi_endproc
 1485              	.LFE146:
 1487              		.section	.text.ADC_ClearFlag,"ax",%progbits
 1488              		.align	1
 1489              		.global	ADC_ClearFlag
 1490              		.syntax unified
 1491              		.thumb
 1492              		.thumb_func
 1493              		.fpu fpv4-sp-d16
 1495              	ADC_ClearFlag:
 1496              	.LFB147:
1642:./FWLIB/src/stm32f4xx_adc.c **** 
1643:./FWLIB/src/stm32f4xx_adc.c **** /**
1644:./FWLIB/src/stm32f4xx_adc.c ****   * @brief  Clears the ADCx's pending flags.
1645:./FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1646:./FWLIB/src/stm32f4xx_adc.c ****   * @param  ADC_FLAG: specifies the flag to clear. 
1647:./FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be any combination of the following values:
1648:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_AWD: Analog watchdog flag
1649:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_EOC: End of conversion flag
1650:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JEOC: End of injected group conversion flag
1651:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
1652:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
1653:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_OVR: Overrun flag                          
1654:./FWLIB/src/stm32f4xx_adc.c ****   * @retval None
1655:./FWLIB/src/stm32f4xx_adc.c ****   */
1656:./FWLIB/src/stm32f4xx_adc.c **** void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
1657:./FWLIB/src/stm32f4xx_adc.c **** {
 1497              		.loc 1 1657 0
 1498              		.cfi_startproc
 1499              		@ args = 0, pretend = 0, frame = 0
 1500              		@ frame_needed = 0, uses_anonymous_args = 0
 1501              		@ link register save eliminated.
 1502              	.LVL146:
ARM GAS  /tmp/ccqllL8a.s 			page 56


1658:./FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
1659:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1660:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));
1661:./FWLIB/src/stm32f4xx_adc.c **** 
1662:./FWLIB/src/stm32f4xx_adc.c ****   /* Clear the selected ADC flags */
1663:./FWLIB/src/stm32f4xx_adc.c ****   ADCx->SR = ~(uint32_t)ADC_FLAG;
 1503              		.loc 1 1663 0
 1504 0000 C943     		mvns	r1, r1
 1505              	.LVL147:
 1506 0002 0160     		str	r1, [r0]
1664:./FWLIB/src/stm32f4xx_adc.c **** }
 1507              		.loc 1 1664 0
 1508 0004 7047     		bx	lr
 1509              		.cfi_endproc
 1510              	.LFE147:
 1512              		.section	.text.ADC_GetITStatus,"ax",%progbits
 1513              		.align	1
 1514              		.global	ADC_GetITStatus
 1515              		.syntax unified
 1516              		.thumb
 1517              		.thumb_func
 1518              		.fpu fpv4-sp-d16
 1520              	ADC_GetITStatus:
 1521              	.LFB148:
1665:./FWLIB/src/stm32f4xx_adc.c **** 
1666:./FWLIB/src/stm32f4xx_adc.c **** /**
1667:./FWLIB/src/stm32f4xx_adc.c ****   * @brief  Checks whether the specified ADC interrupt has occurred or not.
1668:./FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx:   where x can be 1, 2 or 3 to select the ADC peripheral.
1669:./FWLIB/src/stm32f4xx_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt source to check. 
1670:./FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1671:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_EOC: End of conversion interrupt mask
1672:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
1673:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1674:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_OVR: Overrun interrupt mask                        
1675:./FWLIB/src/stm32f4xx_adc.c ****   * @retval The new state of ADC_IT (SET or RESET).
1676:./FWLIB/src/stm32f4xx_adc.c ****   */
1677:./FWLIB/src/stm32f4xx_adc.c **** ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
1678:./FWLIB/src/stm32f4xx_adc.c **** {
 1522              		.loc 1 1678 0
 1523              		.cfi_startproc
 1524              		@ args = 0, pretend = 0, frame = 0
 1525              		@ frame_needed = 0, uses_anonymous_args = 0
 1526              		@ link register save eliminated.
 1527              	.LVL148:
 1528 0000 10B4     		push	{r4}
 1529              	.LCFI15:
 1530              		.cfi_def_cfa_offset 4
 1531              		.cfi_offset 4, -4
 1532              	.LVL149:
1679:./FWLIB/src/stm32f4xx_adc.c ****   ITStatus bitstatus = RESET;
1680:./FWLIB/src/stm32f4xx_adc.c ****   uint32_t itmask = 0, enablestatus = 0;
1681:./FWLIB/src/stm32f4xx_adc.c **** 
1682:./FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
1683:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1684:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_IT(ADC_IT));
1685:./FWLIB/src/stm32f4xx_adc.c **** 
1686:./FWLIB/src/stm32f4xx_adc.c ****   /* Get the ADC IT index */
ARM GAS  /tmp/ccqllL8a.s 			page 57


1687:./FWLIB/src/stm32f4xx_adc.c ****   itmask = ADC_IT >> 8;
1688:./FWLIB/src/stm32f4xx_adc.c **** 
1689:./FWLIB/src/stm32f4xx_adc.c ****   /* Get the ADC_IT enable bit status */
1690:./FWLIB/src/stm32f4xx_adc.c ****   enablestatus = (ADCx->CR1 & ((uint32_t)0x01 << (uint8_t)ADC_IT)) ;
 1533              		.loc 1 1690 0
 1534 0002 4268     		ldr	r2, [r0, #4]
 1535 0004 CCB2     		uxtb	r4, r1
 1536 0006 0123     		movs	r3, #1
 1537 0008 A340     		lsls	r3, r3, r4
 1538 000a 1340     		ands	r3, r3, r2
 1539              	.LVL150:
1691:./FWLIB/src/stm32f4xx_adc.c **** 
1692:./FWLIB/src/stm32f4xx_adc.c ****   /* Check the status of the specified ADC interrupt */
1693:./FWLIB/src/stm32f4xx_adc.c ****   if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
 1540              		.loc 1 1693 0
 1541 000c 0268     		ldr	r2, [r0]
 1542 000e 12EA1122 		ands	r2, r2, r1, lsr #8
 1543 0012 02D0     		beq	.L113
 1544              		.loc 1 1693 0 is_stmt 0 discriminator 1
 1545 0014 2BB9     		cbnz	r3, .L114
1694:./FWLIB/src/stm32f4xx_adc.c ****   {
1695:./FWLIB/src/stm32f4xx_adc.c ****     /* ADC_IT is set */
1696:./FWLIB/src/stm32f4xx_adc.c ****     bitstatus = SET;
1697:./FWLIB/src/stm32f4xx_adc.c ****   }
1698:./FWLIB/src/stm32f4xx_adc.c ****   else
1699:./FWLIB/src/stm32f4xx_adc.c ****   {
1700:./FWLIB/src/stm32f4xx_adc.c ****     /* ADC_IT is reset */
1701:./FWLIB/src/stm32f4xx_adc.c ****     bitstatus = RESET;
 1546              		.loc 1 1701 0 is_stmt 1
 1547 0016 0020     		movs	r0, #0
 1548              	.LVL151:
 1549 0018 00E0     		b	.L112
 1550              	.LVL152:
 1551              	.L113:
 1552 001a 0020     		movs	r0, #0
 1553              	.LVL153:
 1554              	.L112:
1702:./FWLIB/src/stm32f4xx_adc.c ****   }
1703:./FWLIB/src/stm32f4xx_adc.c ****   /* Return the ADC_IT status */
1704:./FWLIB/src/stm32f4xx_adc.c ****   return  bitstatus;
1705:./FWLIB/src/stm32f4xx_adc.c **** }
 1555              		.loc 1 1705 0
 1556 001c 5DF8044B 		ldr	r4, [sp], #4
 1557              	.LCFI16:
 1558              		.cfi_remember_state
 1559              		.cfi_restore 4
 1560              		.cfi_def_cfa_offset 0
 1561 0020 7047     		bx	lr
 1562              	.LVL154:
 1563              	.L114:
 1564              	.LCFI17:
 1565              		.cfi_restore_state
1696:./FWLIB/src/stm32f4xx_adc.c ****   }
 1566              		.loc 1 1696 0
 1567 0022 0120     		movs	r0, #1
 1568              	.LVL155:
 1569 0024 FAE7     		b	.L112
ARM GAS  /tmp/ccqllL8a.s 			page 58


 1570              		.cfi_endproc
 1571              	.LFE148:
 1573              		.section	.text.ADC_ClearITPendingBit,"ax",%progbits
 1574              		.align	1
 1575              		.global	ADC_ClearITPendingBit
 1576              		.syntax unified
 1577              		.thumb
 1578              		.thumb_func
 1579              		.fpu fpv4-sp-d16
 1581              	ADC_ClearITPendingBit:
 1582              	.LFB149:
1706:./FWLIB/src/stm32f4xx_adc.c **** 
1707:./FWLIB/src/stm32f4xx_adc.c **** /**
1708:./FWLIB/src/stm32f4xx_adc.c ****   * @brief  Clears the ADCx's interrupt pending bits.
1709:./FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1710:./FWLIB/src/stm32f4xx_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt pending bit to clear.
1711:./FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1712:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_EOC: End of conversion interrupt mask
1713:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
1714:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1715:./FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_OVR: Overrun interrupt mask                         
1716:./FWLIB/src/stm32f4xx_adc.c ****   * @retval None
1717:./FWLIB/src/stm32f4xx_adc.c ****   */
1718:./FWLIB/src/stm32f4xx_adc.c **** void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
1719:./FWLIB/src/stm32f4xx_adc.c **** {
 1583              		.loc 1 1719 0
 1584              		.cfi_startproc
 1585              		@ args = 0, pretend = 0, frame = 0
 1586              		@ frame_needed = 0, uses_anonymous_args = 0
 1587              		@ link register save eliminated.
 1588              	.LVL156:
1720:./FWLIB/src/stm32f4xx_adc.c ****   uint8_t itmask = 0;
1721:./FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
1722:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1723:./FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_IT(ADC_IT)); 
1724:./FWLIB/src/stm32f4xx_adc.c ****   /* Get the ADC IT index */
1725:./FWLIB/src/stm32f4xx_adc.c ****   itmask = (uint8_t)(ADC_IT >> 8);
1726:./FWLIB/src/stm32f4xx_adc.c ****   /* Clear the selected ADC interrupt pending bits */
1727:./FWLIB/src/stm32f4xx_adc.c ****   ADCx->SR = ~(uint32_t)itmask;
 1589              		.loc 1 1727 0
 1590 0000 6FEA1121 		mvn	r1, r1, lsr #8
 1591              	.LVL157:
 1592 0004 0160     		str	r1, [r0]
1728:./FWLIB/src/stm32f4xx_adc.c **** }                    
 1593              		.loc 1 1728 0
 1594 0006 7047     		bx	lr
 1595              		.cfi_endproc
 1596              	.LFE149:
 1598              		.text
 1599              	.Letext0:
 1600              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1601              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1602              		.file 4 "build/lnInclude/core_cm4.h"
 1603              		.file 5 "build/lnInclude/system_stm32f4xx.h"
 1604              		.file 6 "build/lnInclude/stm32f4xx.h"
 1605              		.file 7 "build/lnInclude/stm32f4xx_adc.h"
 1606              		.file 8 "build/lnInclude/stm32f4xx_rcc.h"
ARM GAS  /tmp/ccqllL8a.s 			page 59


ARM GAS  /tmp/ccqllL8a.s 			page 60


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_adc.c
     /tmp/ccqllL8a.s:18     .text.ADC_DeInit:0000000000000000 $t
     /tmp/ccqllL8a.s:25     .text.ADC_DeInit:0000000000000000 ADC_DeInit
     /tmp/ccqllL8a.s:53     .text.ADC_Init:0000000000000000 $t
     /tmp/ccqllL8a.s:60     .text.ADC_Init:0000000000000000 ADC_Init
     /tmp/ccqllL8a.s:141    .text.ADC_Init:000000000000004c $d
     /tmp/ccqllL8a.s:146    .text.ADC_StructInit:0000000000000000 $t
     /tmp/ccqllL8a.s:153    .text.ADC_StructInit:0000000000000000 ADC_StructInit
     /tmp/ccqllL8a.s:183    .text.ADC_CommonInit:0000000000000000 $t
     /tmp/ccqllL8a.s:190    .text.ADC_CommonInit:0000000000000000 ADC_CommonInit
     /tmp/ccqllL8a.s:240    .text.ADC_CommonInit:0000000000000024 $d
     /tmp/ccqllL8a.s:246    .text.ADC_CommonStructInit:0000000000000000 $t
     /tmp/ccqllL8a.s:253    .text.ADC_CommonStructInit:0000000000000000 ADC_CommonStructInit
     /tmp/ccqllL8a.s:276    .text.ADC_Cmd:0000000000000000 $t
     /tmp/ccqllL8a.s:283    .text.ADC_Cmd:0000000000000000 ADC_Cmd
     /tmp/ccqllL8a.s:309    .text.ADC_AnalogWatchdogCmd:0000000000000000 $t
     /tmp/ccqllL8a.s:316    .text.ADC_AnalogWatchdogCmd:0000000000000000 ADC_AnalogWatchdogCmd
     /tmp/ccqllL8a.s:343    .text.ADC_AnalogWatchdogThresholdsConfig:0000000000000000 $t
     /tmp/ccqllL8a.s:350    .text.ADC_AnalogWatchdogThresholdsConfig:0000000000000000 ADC_AnalogWatchdogThresholdsConfig
     /tmp/ccqllL8a.s:368    .text.ADC_AnalogWatchdogSingleChannelConfig:0000000000000000 $t
     /tmp/ccqllL8a.s:375    .text.ADC_AnalogWatchdogSingleChannelConfig:0000000000000000 ADC_AnalogWatchdogSingleChannelConfig
     /tmp/ccqllL8a.s:400    .text.ADC_TempSensorVrefintCmd:0000000000000000 $t
     /tmp/ccqllL8a.s:407    .text.ADC_TempSensorVrefintCmd:0000000000000000 ADC_TempSensorVrefintCmd
     /tmp/ccqllL8a.s:434    .text.ADC_TempSensorVrefintCmd:000000000000001c $d
     /tmp/ccqllL8a.s:439    .text.ADC_VBATCmd:0000000000000000 $t
     /tmp/ccqllL8a.s:446    .text.ADC_VBATCmd:0000000000000000 ADC_VBATCmd
     /tmp/ccqllL8a.s:473    .text.ADC_VBATCmd:000000000000001c $d
     /tmp/ccqllL8a.s:478    .text.ADC_RegularChannelConfig:0000000000000000 $t
     /tmp/ccqllL8a.s:485    .text.ADC_RegularChannelConfig:0000000000000000 ADC_RegularChannelConfig
     /tmp/ccqllL8a.s:639    .text.ADC_SoftwareStartConv:0000000000000000 $t
     /tmp/ccqllL8a.s:646    .text.ADC_SoftwareStartConv:0000000000000000 ADC_SoftwareStartConv
     /tmp/ccqllL8a.s:664    .text.ADC_GetSoftwareStartConvStatus:0000000000000000 $t
     /tmp/ccqllL8a.s:671    .text.ADC_GetSoftwareStartConvStatus:0000000000000000 ADC_GetSoftwareStartConvStatus
     /tmp/ccqllL8a.s:698    .text.ADC_EOCOnEachRegularChannelCmd:0000000000000000 $t
     /tmp/ccqllL8a.s:705    .text.ADC_EOCOnEachRegularChannelCmd:0000000000000000 ADC_EOCOnEachRegularChannelCmd
     /tmp/ccqllL8a.s:731    .text.ADC_ContinuousModeCmd:0000000000000000 $t
     /tmp/ccqllL8a.s:738    .text.ADC_ContinuousModeCmd:0000000000000000 ADC_ContinuousModeCmd
     /tmp/ccqllL8a.s:764    .text.ADC_DiscModeChannelCountConfig:0000000000000000 $t
     /tmp/ccqllL8a.s:771    .text.ADC_DiscModeChannelCountConfig:0000000000000000 ADC_DiscModeChannelCountConfig
     /tmp/ccqllL8a.s:799    .text.ADC_DiscModeCmd:0000000000000000 $t
     /tmp/ccqllL8a.s:806    .text.ADC_DiscModeCmd:0000000000000000 ADC_DiscModeCmd
     /tmp/ccqllL8a.s:832    .text.ADC_GetConversionValue:0000000000000000 $t
     /tmp/ccqllL8a.s:839    .text.ADC_GetConversionValue:0000000000000000 ADC_GetConversionValue
     /tmp/ccqllL8a.s:857    .text.ADC_GetMultiModeConversionValue:0000000000000000 $t
     /tmp/ccqllL8a.s:864    .text.ADC_GetMultiModeConversionValue:0000000000000000 ADC_GetMultiModeConversionValue
     /tmp/ccqllL8a.s:879    .text.ADC_GetMultiModeConversionValue:0000000000000008 $d
     /tmp/ccqllL8a.s:884    .text.ADC_DMACmd:0000000000000000 $t
     /tmp/ccqllL8a.s:891    .text.ADC_DMACmd:0000000000000000 ADC_DMACmd
     /tmp/ccqllL8a.s:917    .text.ADC_DMARequestAfterLastTransferCmd:0000000000000000 $t
     /tmp/ccqllL8a.s:924    .text.ADC_DMARequestAfterLastTransferCmd:0000000000000000 ADC_DMARequestAfterLastTransferCmd
     /tmp/ccqllL8a.s:950    .text.ADC_MultiModeDMARequestAfterLastTransferCmd:0000000000000000 $t
     /tmp/ccqllL8a.s:957    .text.ADC_MultiModeDMARequestAfterLastTransferCmd:0000000000000000 ADC_MultiModeDMARequestAfterLastTransferCmd
     /tmp/ccqllL8a.s:984    .text.ADC_MultiModeDMARequestAfterLastTransferCmd:000000000000001c $d
     /tmp/ccqllL8a.s:989    .text.ADC_InjectedChannelConfig:0000000000000000 $t
     /tmp/ccqllL8a.s:996    .text.ADC_InjectedChannelConfig:0000000000000000 ADC_InjectedChannelConfig
     /tmp/ccqllL8a.s:1102   .text.ADC_InjectedSequencerLengthConfig:0000000000000000 $t
ARM GAS  /tmp/ccqllL8a.s 			page 61


     /tmp/ccqllL8a.s:1109   .text.ADC_InjectedSequencerLengthConfig:0000000000000000 ADC_InjectedSequencerLengthConfig
     /tmp/ccqllL8a.s:1137   .text.ADC_SetInjectedOffset:0000000000000000 $t
     /tmp/ccqllL8a.s:1144   .text.ADC_SetInjectedOffset:0000000000000000 ADC_SetInjectedOffset
     /tmp/ccqllL8a.s:1178   .text.ADC_ExternalTrigInjectedConvConfig:0000000000000000 $t
     /tmp/ccqllL8a.s:1185   .text.ADC_ExternalTrigInjectedConvConfig:0000000000000000 ADC_ExternalTrigInjectedConvConfig
     /tmp/ccqllL8a.s:1210   .text.ADC_ExternalTrigInjectedConvEdgeConfig:0000000000000000 $t
     /tmp/ccqllL8a.s:1217   .text.ADC_ExternalTrigInjectedConvEdgeConfig:0000000000000000 ADC_ExternalTrigInjectedConvEdgeConfig
     /tmp/ccqllL8a.s:1242   .text.ADC_SoftwareStartInjectedConv:0000000000000000 $t
     /tmp/ccqllL8a.s:1249   .text.ADC_SoftwareStartInjectedConv:0000000000000000 ADC_SoftwareStartInjectedConv
     /tmp/ccqllL8a.s:1267   .text.ADC_GetSoftwareStartInjectedConvCmdStatus:0000000000000000 $t
     /tmp/ccqllL8a.s:1274   .text.ADC_GetSoftwareStartInjectedConvCmdStatus:0000000000000000 ADC_GetSoftwareStartInjectedConvCmdStatus
     /tmp/ccqllL8a.s:1301   .text.ADC_AutoInjectedConvCmd:0000000000000000 $t
     /tmp/ccqllL8a.s:1308   .text.ADC_AutoInjectedConvCmd:0000000000000000 ADC_AutoInjectedConvCmd
     /tmp/ccqllL8a.s:1334   .text.ADC_InjectedDiscModeCmd:0000000000000000 $t
     /tmp/ccqllL8a.s:1341   .text.ADC_InjectedDiscModeCmd:0000000000000000 ADC_InjectedDiscModeCmd
     /tmp/ccqllL8a.s:1367   .text.ADC_GetInjectedConversionValue:0000000000000000 $t
     /tmp/ccqllL8a.s:1374   .text.ADC_GetInjectedConversionValue:0000000000000000 ADC_GetInjectedConversionValue
     /tmp/ccqllL8a.s:1411   .text.ADC_ITConfig:0000000000000000 $t
     /tmp/ccqllL8a.s:1418   .text.ADC_ITConfig:0000000000000000 ADC_ITConfig
     /tmp/ccqllL8a.s:1454   .text.ADC_GetFlagStatus:0000000000000000 $t
     /tmp/ccqllL8a.s:1461   .text.ADC_GetFlagStatus:0000000000000000 ADC_GetFlagStatus
     /tmp/ccqllL8a.s:1488   .text.ADC_ClearFlag:0000000000000000 $t
     /tmp/ccqllL8a.s:1495   .text.ADC_ClearFlag:0000000000000000 ADC_ClearFlag
     /tmp/ccqllL8a.s:1513   .text.ADC_GetITStatus:0000000000000000 $t
     /tmp/ccqllL8a.s:1520   .text.ADC_GetITStatus:0000000000000000 ADC_GetITStatus
     /tmp/ccqllL8a.s:1574   .text.ADC_ClearITPendingBit:0000000000000000 $t
     /tmp/ccqllL8a.s:1581   .text.ADC_ClearITPendingBit:0000000000000000 ADC_ClearITPendingBit

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
